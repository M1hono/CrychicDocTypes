package me.srrapero720.embeddiumplus.foundation.embeddium.pages;

import com.google.common.collect.ImmutableList;
import dev.nolij.zume.api.config.v1.ZumeConfig;
import java.util.ArrayList;
import java.util.List;
import me.jellysquid.mods.sodium.client.gui.options.OptionGroup;
import me.jellysquid.mods.sodium.client.gui.options.OptionImpl;
import me.jellysquid.mods.sodium.client.gui.options.OptionPage;
import me.jellysquid.mods.sodium.client.gui.options.control.ControlValueFormatter;
import me.jellysquid.mods.sodium.client.gui.options.control.SliderControl;
import me.jellysquid.mods.sodium.client.gui.options.control.TickBoxControl;
import me.srrapero720.embeddiumplus.foundation.embeddium.storage.ZumeOptionsStorage;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import org.embeddedt.embeddium.client.gui.options.OptionIdentifier;

@Deprecated(forRemoval = true)
public class ZoomPage extends OptionPage {

    public static final OptionIdentifier<Void> ID = OptionIdentifier.create(new ResourceLocation("zume", "page"));

    public ZoomPage() {
        super(ID, Component.translatable("embeddium.plus.options.zoom.page"), create(new ZumeOptionsStorage()));
    }

    private static ImmutableList<OptionGroup> create(ZumeOptionsStorage zoomOptionsStorage) {
        List<OptionGroup> groups = new ArrayList();
        OptionImpl<ZumeConfig, Boolean> enableZume = OptionImpl.<ZumeConfig, Boolean>createBuilder(boolean.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.desc")).setControl(TickBoxControl::new).setBinding((options, value) -> options.isDisabled = !value, options -> !options.isDisabled).build();
        OptionImpl<ZumeConfig, Boolean> cinematicZoom = OptionImpl.<ZumeConfig, Boolean>createBuilder(boolean.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.cinematic.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.cinematic.desc")).setControl(TickBoxControl::new).setBinding((options, value) -> options.isCinematicZoomEnabled = value, options -> options.isCinematicZoomEnabled).build();
        OptionImpl<ZumeConfig, Integer> mouseSensitive = OptionImpl.<ZumeConfig, Integer>createBuilder(int.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.sensitive.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.sensitive.desc")).setControl(option -> new SliderControl(option, 0, 100, 5, ControlValueFormatter.percentage())).setBinding((options, value) -> options.mouseSensitivityFloor = Math.min(Math.floor((double) value.intValue() / 100.0), 1.0), options -> (int) Math.floor(options.mouseSensitivityFloor * 100.0)).build();
        OptionImpl<ZumeConfig, Integer> zoomSpeed = OptionImpl.<ZumeConfig, Integer>createBuilder(int.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.speed.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.speed.desc")).setControl(option -> new SliderControl(option, 5, 150, 5, i -> Component.literal(i + "").append(Component.translatable("embeddium.plus.options.common.nojils")))).setBinding((options, value) -> options.zoomSpeed = value.shortValue(), options -> Integer.valueOf(options.zoomSpeed)).build();
        OptionImpl<ZumeConfig, Boolean> zoomScrolling = OptionImpl.<ZumeConfig, Boolean>createBuilder(boolean.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.scrolling.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.scrolling.desc")).setControl(TickBoxControl::new).setBinding((options, value) -> options.isZoomScrollingEnabled = value, options -> options.isZoomScrollingEnabled).build();
        OptionImpl<ZumeConfig, Integer> zoomSmoothnessMS = OptionImpl.<ZumeConfig, Integer>createBuilder(int.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.smoothness.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.smoothness.desc")).setControl(option -> new SliderControl(option, 50, 150, 10, i -> Component.literal(i + "").append(Component.translatable("embeddium.plus.options.common.millis")))).setBinding((options, value) -> options.zoomSmoothnessMilliseconds = value.shortValue(), options -> Integer.valueOf(options.zoomSmoothnessMilliseconds)).build();
        OptionImpl<ZumeConfig, Integer> animationEasingExponent = OptionImpl.<ZumeConfig, Integer>createBuilder(int.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.easing_exponent.animation.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.easing_exponent.animation.desc")).setControl(opt -> new SliderControl(opt, 0, 25000, 25, i -> Component.literal("x").append((float) i / 1000.0F + ""))).setBinding((options, value) -> options.animationEasingExponent = (double) ((float) value.intValue() / 1000.0F), opts -> (int) opts.animationEasingExponent * 1000).build();
        OptionImpl<ZumeConfig, Integer> zoomEasingExponent = OptionImpl.<ZumeConfig, Integer>createBuilder(int.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.easing_exponent.zoom.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.easing_exponent.zoom.desc")).setControl(opt -> new SliderControl(opt, 0, 25000, 25, i -> Component.literal("x").append((float) i / 1000.0F + ""))).setBinding((options, value) -> options.zoomEasingExponent = (double) ((float) value.intValue() / 1000.0F), opts -> (int) opts.zoomEasingExponent * 1000).build();
        OptionImpl<ZumeConfig, Integer> defaultZoom = OptionImpl.<ZumeConfig, Integer>createBuilder(int.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.default.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.default.desc")).setControl(option -> new SliderControl(option, 0, 100, 1, ControlValueFormatter.percentage())).setBinding((options, value) -> options.defaultZoom = Math.min(Math.floor((double) ((float) value.intValue() / 100.0F)), 1.0), options -> (int) Math.floor(options.defaultZoom * 100.0)).build();
        OptionImpl<ZumeConfig, Boolean> toggleMode = OptionImpl.<ZumeConfig, Boolean>createBuilder(boolean.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.toggle.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.toggle.desc")).setControl(TickBoxControl::new).setBinding((options, value) -> options.isFirstPersonToggleModeEnabled = value, options -> options.isFirstPersonToggleModeEnabled).build();
        OptionImpl<ZumeConfig, Boolean> thirdPersonToggleMode = OptionImpl.<ZumeConfig, Boolean>createBuilder(boolean.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.toggle.third_person.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.toggle.third_person.desc")).setControl(TickBoxControl::new).setBinding((options, value) -> options.isThirdPersonToggleModeEnabled = value, options -> options.isThirdPersonToggleModeEnabled).build();
        OptionImpl<ZumeConfig, Integer> minFov = OptionImpl.<ZumeConfig, Integer>createBuilder(int.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.min.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.min.desc")).setControl(option -> new SliderControl(option, 0, 100, 10, v -> Component.literal((float) v / 10.0F + "Â°"))).setBinding((options, value) -> options.minimumFOV = (double) ((float) value.intValue() / 10.0F), options -> (int) options.minimumFOV * 10).build();
        OptionImpl<ZumeConfig, Integer> thirdPersonMinFov = OptionImpl.<ZumeConfig, Integer>createBuilder(int.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.third_person.min.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.third_person.min.desc")).setControl(opt -> new SliderControl(opt, 0, 10000, 25, v -> Component.translatable("sodium.options.biome_blend.value", (float) v / 1000.0F))).setBinding((options, value) -> options.minimumThirdPersonZoomBlocks = (double) ((float) value.intValue() / 1000.0F), opts -> (int) opts.minimumThirdPersonZoomBlocks * 1000).build();
        OptionImpl<ZumeConfig, Integer> thirdPersonMaxFov = OptionImpl.<ZumeConfig, Integer>createBuilder(int.class, zoomOptionsStorage).setName(Component.translatable("embeddium.plus.options.zoom.third_person.max.title")).setTooltip(Component.translatable("embeddium.plus.options.zoom.third_person.max.desc")).setControl(opt -> new SliderControl(opt, 0, 10000, 25, v -> Component.translatable("sodium.options.biome_blend.value", (float) v / 1000.0F))).setBinding((options, value) -> options.maximumThirdPersonZoomBlocks = (double) ((float) value.intValue() / 1000.0F), opts -> (int) opts.maximumThirdPersonZoomBlocks * 1000).build();
        groups.add(OptionGroup.createBuilder().add(enableZume).add(zoomEasingExponent).add(animationEasingExponent).build());
        groups.add(OptionGroup.createBuilder().add(cinematicZoom).add(zoomSpeed).add(zoomScrolling).add(zoomSmoothnessMS).add(defaultZoom).add(minFov).add(thirdPersonMinFov).add(thirdPersonMaxFov).build());
        groups.add(OptionGroup.createBuilder().add(mouseSensitive).add(toggleMode).add(thirdPersonToggleMode).build());
        return ImmutableList.copyOf(groups);
    }
}