package com.github.alexmodguy.alexscaves.client.model;

import com.github.alexmodguy.alexscaves.server.entity.living.ForsakenEntity;
import com.github.alexmodguy.alexscaves.server.misc.ACMath;
import com.github.alexthe666.citadel.animation.Animation;
import com.github.alexthe666.citadel.animation.IAnimatedEntity;
import com.github.alexthe666.citadel.animation.LegSolverQuadruped;
import com.github.alexthe666.citadel.client.model.AdvancedEntityModel;
import com.github.alexthe666.citadel.client.model.AdvancedModelBox;
import com.github.alexthe666.citadel.client.model.ModelAnimator;
import com.github.alexthe666.citadel.client.model.basic.BasicModelPart;
import com.google.common.collect.ImmutableList;
import com.mojang.blaze3d.vertex.PoseStack;
import net.minecraft.world.phys.Vec3;
import org.joml.Vector4f;

public class ForsakenModel extends AdvancedEntityModel<ForsakenEntity> {

    private final AdvancedModelBox root;

    private final AdvancedModelBox chest;

    private final AdvancedModelBox cube_r1;

    private final AdvancedModelBox cube_r2;

    private final AdvancedModelBox larm;

    private final AdvancedModelBox lforeArm;

    private final AdvancedModelBox lhand;

    private final AdvancedModelBox lfinger;

    private final AdvancedModelBox lfinger2;

    private final AdvancedModelBox lfinger3;

    private final AdvancedModelBox lthumb;

    private final AdvancedModelBox lthumb2;

    private final AdvancedModelBox rarm;

    private final AdvancedModelBox rforeArm;

    private final AdvancedModelBox rhand;

    private final AdvancedModelBox rfinger;

    private final AdvancedModelBox rfinger2;

    private final AdvancedModelBox rfinger3;

    private final AdvancedModelBox rthumb;

    private final AdvancedModelBox rthumb2;

    private final AdvancedModelBox lupperArm;

    private final AdvancedModelBox lupperForeArm;

    private final AdvancedModelBox lupperHand;

    private final AdvancedModelBox lupperFinger;

    private final AdvancedModelBox lupperThumb;

    private final AdvancedModelBox lupperThumb2;

    private final AdvancedModelBox lupperFinger2;

    private final AdvancedModelBox lupperFinger3;

    private final AdvancedModelBox rupperArm;

    private final AdvancedModelBox rupperForeArm;

    private final AdvancedModelBox rupperHand;

    private final AdvancedModelBox rupperFinger;

    private final AdvancedModelBox rupperThumb;

    private final AdvancedModelBox rupperThumb2;

    private final AdvancedModelBox rupperFinger2;

    private final AdvancedModelBox rupperFinger3;

    private final AdvancedModelBox hips;

    private final AdvancedModelBox cube_r3;

    private final AdvancedModelBox lthigh;

    private final AdvancedModelBox lcalf;

    private final AdvancedModelBox lfoot;

    private final AdvancedModelBox ltoe;

    private final AdvancedModelBox ltoe2;

    private final AdvancedModelBox ltoe3;

    private final AdvancedModelBox rthigh;

    private final AdvancedModelBox rcalf;

    private final AdvancedModelBox rfoot;

    private final AdvancedModelBox rtoe;

    private final AdvancedModelBox rtoe2;

    private final AdvancedModelBox rtoe3;

    private final AdvancedModelBox tail;

    private final AdvancedModelBox tail2;

    private final AdvancedModelBox neck;

    private final AdvancedModelBox cube_r4;

    private final AdvancedModelBox cube_r5;

    private final AdvancedModelBox cube_r6;

    private final AdvancedModelBox skull;

    private final AdvancedModelBox rBigear;

    private final AdvancedModelBox lBigear;

    private final AdvancedModelBox rear;

    private final AdvancedModelBox lear;

    private final AdvancedModelBox jaw;

    private final ModelAnimator animator;

    public ForsakenModel() {
        this.texWidth = 256;
        this.texHeight = 256;
        this.root = new AdvancedModelBox(this);
        this.root.setRotationPoint(0.0F, 24.0F, 0.0F);
        this.chest = new AdvancedModelBox(this);
        this.chest.setRotationPoint(0.0F, -40.5F, -3.5F);
        this.root.addChild(this.chest);
        this.setRotateAngle(this.chest, 0.3927F, 0.0F, 0.0F);
        this.chest.setTextureOffset(0, 0).addBox(-10.0F, -13.5F, -12.5F, 20.0F, 26.0F, 30.0F, 0.0F, false);
        this.chest.setTextureOffset(70, 26).addBox(-10.0F, 12.5F, -12.5F, 20.0F, 6.0F, 30.0F, 0.0F, false);
        this.cube_r1 = new AdvancedModelBox(this);
        this.cube_r1.setRotationPoint(0.0F, -13.5F, 8.5F);
        this.chest.addChild(this.cube_r1);
        this.setRotateAngle(this.cube_r1, -1.2217F, 0.0F, 0.0F);
        this.cube_r1.setTextureOffset(154, 62).addBox(-10.0F, -10.0F, 0.0F, 20.0F, 10.0F, 0.0F, 0.0F, false);
        this.cube_r2 = new AdvancedModelBox(this);
        this.cube_r2.setRotationPoint(0.0F, -13.5F, -2.5F);
        this.chest.addChild(this.cube_r2);
        this.setRotateAngle(this.cube_r2, -1.2217F, 0.0F, 0.0F);
        this.cube_r2.setTextureOffset(154, 62).addBox(-10.0F, -10.0F, 0.0F, 20.0F, 10.0F, 0.0F, 0.0F, false);
        this.larm = new AdvancedModelBox(this);
        this.larm.setRotationPoint(9.75F, -48.5F, -8.0F);
        this.root.addChild(this.larm);
        this.larm.setTextureOffset(30, 162).addBox(-1.75F, -6.5F, -4.0F, 6.0F, 25.0F, 8.0F, 0.01F, false);
        this.lforeArm = new AdvancedModelBox(this);
        this.lforeArm.setRotationPoint(1.5F, 15.5F, -0.5F);
        this.larm.addChild(this.lforeArm);
        this.lforeArm.setTextureOffset(148, 147).addBox(-2.5F, 1.0F, -3.5F, 5.0F, 30.0F, 9.0F, 0.0F, false);
        this.lhand = new AdvancedModelBox(this);
        this.lhand.setRotationPoint(0.5F, 30.0F, -1.3333F);
        this.lforeArm.addChild(this.lhand);
        this.lhand.setTextureOffset(140, 24).addBox(-5.0F, 0.0F, -12.1667F, 9.0F, 3.0F, 14.0F, 0.0F, false);
        this.lfinger = new AdvancedModelBox(this);
        this.lfinger.setRotationPoint(-4.25F, 0.0F, -11.1667F);
        this.lhand.addChild(this.lfinger);
        this.lfinger.setTextureOffset(0, 56).addBox(-1.0F, -3.0F, -10.0F, 2.0F, 6.0F, 11.0F, 0.0F, true);
        this.lfinger2 = new AdvancedModelBox(this);
        this.lfinger2.setRotationPoint(3.75F, 0.0F, -11.1667F);
        this.lhand.addChild(this.lfinger2);
        this.lfinger2.setTextureOffset(0, 56).addBox(-1.0F, -3.0F, -10.0F, 2.0F, 6.0F, 11.0F, 0.0F, true);
        this.lfinger3 = new AdvancedModelBox(this);
        this.lfinger3.setRotationPoint(-0.25F, 0.0F, -11.1667F);
        this.lhand.addChild(this.lfinger3);
        this.lfinger3.setTextureOffset(0, 56).addBox(-1.0F, -3.0F, -10.0F, 2.0F, 6.0F, 11.0F, 0.0F, true);
        this.lthumb = new AdvancedModelBox(this);
        this.lthumb.setRotationPoint(-4.25F, 0.0F, 0.8333F);
        this.lhand.addChild(this.lthumb);
        this.lthumb.setTextureOffset(107, 68).addBox(-1.0F, -3.0F, -1.0F, 2.0F, 6.0F, 9.0F, 0.0F, true);
        this.lthumb2 = new AdvancedModelBox(this);
        this.lthumb2.setRotationPoint(3.5F, 0.0F, 0.8333F);
        this.lhand.addChild(this.lthumb2);
        this.lthumb2.setTextureOffset(107, 68).addBox(-1.0F, -3.0F, -1.0F, 2.0F, 6.0F, 9.0F, 0.0F, false);
        this.rarm = new AdvancedModelBox(this);
        this.rarm.setRotationPoint(-9.75F, -48.5F, -8.0F);
        this.root.addChild(this.rarm);
        this.rarm.setTextureOffset(30, 162).addBox(-4.25F, -6.5F, -4.0F, 6.0F, 25.0F, 8.0F, 0.01F, true);
        this.rforeArm = new AdvancedModelBox(this);
        this.rforeArm.setRotationPoint(-1.5F, 15.5F, -0.5F);
        this.rarm.addChild(this.rforeArm);
        this.rforeArm.setTextureOffset(148, 147).addBox(-2.5F, 1.0F, -3.5F, 5.0F, 30.0F, 9.0F, 0.0F, true);
        this.rhand = new AdvancedModelBox(this);
        this.rhand.setRotationPoint(-0.5F, 30.0F, -1.3333F);
        this.rforeArm.addChild(this.rhand);
        this.rhand.setTextureOffset(140, 24).addBox(-4.0F, 0.0F, -12.1667F, 9.0F, 3.0F, 14.0F, 0.0F, true);
        this.rfinger = new AdvancedModelBox(this);
        this.rfinger.setRotationPoint(4.25F, 0.0F, -11.1667F);
        this.rhand.addChild(this.rfinger);
        this.rfinger.setTextureOffset(0, 56).addBox(-1.0F, -3.0F, -10.0F, 2.0F, 6.0F, 11.0F, 0.0F, false);
        this.rfinger2 = new AdvancedModelBox(this);
        this.rfinger2.setRotationPoint(-3.75F, 0.0F, -11.1667F);
        this.rhand.addChild(this.rfinger2);
        this.rfinger2.setTextureOffset(0, 56).addBox(-1.0F, -3.0F, -10.0F, 2.0F, 6.0F, 11.0F, 0.0F, false);
        this.rfinger3 = new AdvancedModelBox(this);
        this.rfinger3.setRotationPoint(0.25F, 0.0F, -11.1667F);
        this.rhand.addChild(this.rfinger3);
        this.rfinger3.setTextureOffset(0, 56).addBox(-1.0F, -3.0F, -10.0F, 2.0F, 6.0F, 11.0F, 0.0F, false);
        this.rthumb = new AdvancedModelBox(this);
        this.rthumb.setRotationPoint(4.25F, 0.0F, 0.8333F);
        this.rhand.addChild(this.rthumb);
        this.rthumb.setTextureOffset(107, 68).addBox(-1.0F, -3.0F, -1.0F, 2.0F, 6.0F, 9.0F, 0.0F, false);
        this.rthumb2 = new AdvancedModelBox(this);
        this.rthumb2.setRotationPoint(-3.5F, 0.0F, 0.8333F);
        this.rhand.addChild(this.rthumb2);
        this.rthumb2.setTextureOffset(107, 68).addBox(-1.0F, -3.0F, -1.0F, 2.0F, 6.0F, 9.0F, 0.0F, true);
        this.lupperArm = new AdvancedModelBox(this);
        this.lupperArm.setRotationPoint(9.75F, -54.5F, 6.0F);
        this.root.addChild(this.lupperArm);
        this.setRotateAngle(this.lupperArm, 0.0F, 0.0F, -1.5708F);
        this.lupperArm.setTextureOffset(30, 162).addBox(-0.75F, -6.5F, -4.0F, 6.0F, 27.0F, 8.0F, 0.01F, false);
        this.lupperForeArm = new AdvancedModelBox(this);
        this.lupperForeArm.setRotationPoint(2.5F, 17.5F, -0.5F);
        this.lupperArm.addChild(this.lupperForeArm);
        this.lupperForeArm.setTextureOffset(79, 127).addBox(-2.5F, -1.0F, -4.5F, 5.0F, 32.0F, 10.0F, 0.0F, false);
        this.lupperHand = new AdvancedModelBox(this);
        this.lupperHand.setRotationPoint(-1.75F, 29.5F, 0.5F);
        this.lupperForeArm.addChild(this.lupperHand);
        this.lupperHand.setTextureOffset(0, 136).addBox(-2.5F, -1.5F, -7.0F, 5.0F, 19.0F, 14.0F, 0.0F, false);
        this.lupperFinger = new AdvancedModelBox(this);
        this.lupperFinger.setRotationPoint(2.5F, 16.5F, -5.5F);
        this.lupperHand.addChild(this.lupperFinger);
        this.lupperFinger.setTextureOffset(0, 107).addBox(-2.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, false);
        this.lupperFinger.setTextureOffset(92, 62).addBox(-12.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, false);
        this.lupperThumb = new AdvancedModelBox(this);
        this.lupperThumb.setRotationPoint(2.5F, -0.5F, -6.5F);
        this.lupperHand.addChild(this.lupperThumb);
        this.setRotateAngle(this.lupperThumb, -1.5708F, 0.0F, 0.0F);
        this.lupperThumb.setTextureOffset(0, 107).addBox(-2.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, false);
        this.lupperThumb.setTextureOffset(92, 62).addBox(-12.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, false);
        this.lupperThumb2 = new AdvancedModelBox(this);
        this.lupperThumb2.setRotationPoint(2.5F, -0.5F, 6.5F);
        this.lupperHand.addChild(this.lupperThumb2);
        this.setRotateAngle(this.lupperThumb2, 1.5708F, 0.0F, 0.0F);
        this.lupperThumb2.setTextureOffset(0, 107).addBox(-2.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, false);
        this.lupperThumb2.setTextureOffset(92, 62).addBox(-12.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, false);
        this.lupperFinger2 = new AdvancedModelBox(this);
        this.lupperFinger2.setRotationPoint(2.5F, 16.5F, 0.0F);
        this.lupperHand.addChild(this.lupperFinger2);
        this.lupperFinger2.setTextureOffset(0, 107).addBox(-2.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, false);
        this.lupperFinger2.setTextureOffset(92, 62).addBox(-12.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, false);
        this.lupperFinger3 = new AdvancedModelBox(this);
        this.lupperFinger3.setRotationPoint(2.5F, 16.5F, 5.5F);
        this.lupperHand.addChild(this.lupperFinger3);
        this.lupperFinger3.setTextureOffset(0, 107).addBox(-2.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, false);
        this.lupperFinger3.setTextureOffset(92, 62).addBox(-12.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, false);
        this.rupperArm = new AdvancedModelBox(this);
        this.rupperArm.setRotationPoint(-9.75F, -54.5F, 6.0F);
        this.root.addChild(this.rupperArm);
        this.setRotateAngle(this.rupperArm, 0.0F, 0.0F, 1.5708F);
        this.rupperArm.setTextureOffset(30, 162).addBox(-5.25F, -6.5F, -4.0F, 6.0F, 27.0F, 8.0F, 0.01F, true);
        this.rupperForeArm = new AdvancedModelBox(this);
        this.rupperForeArm.setRotationPoint(-2.5F, 17.5F, -0.5F);
        this.rupperArm.addChild(this.rupperForeArm);
        this.rupperForeArm.setTextureOffset(79, 127).addBox(-2.5F, -1.0F, -4.5F, 5.0F, 32.0F, 10.0F, 0.0F, true);
        this.rupperHand = new AdvancedModelBox(this);
        this.rupperHand.setRotationPoint(1.75F, 29.5F, 0.5F);
        this.rupperForeArm.addChild(this.rupperHand);
        this.rupperHand.setTextureOffset(0, 136).addBox(-2.5F, -1.5F, -7.0F, 5.0F, 19.0F, 14.0F, 0.0F, true);
        this.rupperFinger = new AdvancedModelBox(this);
        this.rupperFinger.setRotationPoint(-2.5F, 16.5F, -5.5F);
        this.rupperHand.addChild(this.rupperFinger);
        this.rupperFinger.setTextureOffset(0, 107).addBox(-4.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, true);
        this.rupperFinger.setTextureOffset(92, 62).addBox(-4.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, true);
        this.rupperThumb = new AdvancedModelBox(this);
        this.rupperThumb.setRotationPoint(-2.5F, -0.5F, -6.5F);
        this.rupperHand.addChild(this.rupperThumb);
        this.setRotateAngle(this.rupperThumb, -1.5708F, 0.0F, 0.0F);
        this.rupperThumb.setTextureOffset(0, 107).addBox(-4.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, true);
        this.rupperThumb.setTextureOffset(92, 62).addBox(-4.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, true);
        this.rupperThumb2 = new AdvancedModelBox(this);
        this.rupperThumb2.setRotationPoint(-2.5F, -0.5F, 6.5F);
        this.rupperHand.addChild(this.rupperThumb2);
        this.setRotateAngle(this.rupperThumb2, 1.5708F, 0.0F, 0.0F);
        this.rupperThumb2.setTextureOffset(0, 107).addBox(-4.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, true);
        this.rupperThumb2.setTextureOffset(92, 62).addBox(-4.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, true);
        this.rupperFinger2 = new AdvancedModelBox(this);
        this.rupperFinger2.setRotationPoint(-2.5F, 16.5F, 0.0F);
        this.rupperHand.addChild(this.rupperFinger2);
        this.rupperFinger2.setTextureOffset(0, 107).addBox(-4.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, true);
        this.rupperFinger2.setTextureOffset(92, 62).addBox(-4.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, true);
        this.rupperFinger3 = new AdvancedModelBox(this);
        this.rupperFinger3.setRotationPoint(-2.5F, 16.5F, 5.5F);
        this.rupperHand.addChild(this.rupperFinger3);
        this.rupperFinger3.setTextureOffset(0, 107).addBox(-4.0F, -1.0F, -2.0F, 6.0F, 11.0F, 4.0F, 0.0F, true);
        this.rupperFinger3.setTextureOffset(92, 62).addBox(-4.0F, 10.0F, -1.0F, 16.0F, 4.0F, 2.0F, 0.0F, true);
        this.hips = new AdvancedModelBox(this);
        this.hips.setRotationPoint(0.0F, -49.0F, 8.0F);
        this.root.addChild(this.hips);
        this.cube_r3 = new AdvancedModelBox(this);
        this.cube_r3.setRotationPoint(0.0F, 0.0F, 0.0F);
        this.hips.addChild(this.cube_r3);
        this.setRotateAngle(this.cube_r3, -0.3927F, 0.0F, 0.0F);
        this.cube_r3.setTextureOffset(0, 56).addBox(-7.0F, -3.0F, -2.0F, 14.0F, 22.0F, 29.0F, 0.0F, false);
        this.lthigh = new AdvancedModelBox(this);
        this.lthigh.setRotationPoint(6.0F, 17.0F, 17.0F);
        this.hips.addChild(this.lthigh);
        this.setRotateAngle(this.lthigh, -0.7854F, -0.7854F, -0.3927F);
        this.lthigh.setTextureOffset(39, 127).addBox(-2.0F, -3.0F, -5.0F, 7.0F, 22.0F, 13.0F, 0.01F, false);
        this.lcalf = new AdvancedModelBox(this);
        this.lcalf.setRotationPoint(1.5F, 19.25F, 7.5F);
        this.lthigh.addChild(this.lcalf);
        this.lcalf.setTextureOffset(0, 107).addBox(-2.5F, -8.25F, -2.5F, 5.0F, 8.0F, 21.0F, 0.0F, false);
        this.lfoot = new AdvancedModelBox(this);
        this.lfoot.setRotationPoint(0.0F, -2.25F, 17.75F);
        this.lcalf.addChild(this.lfoot);
        this.setRotateAngle(this.lfoot, -0.3491F, -0.3927F, 0.0F);
        this.lfoot.setTextureOffset(31, 107).addBox(-4.5F, -2.0F, -1.0F, 9.0F, 13.0F, 3.0F, 0.0F, false);
        this.ltoe = new AdvancedModelBox(this);
        this.ltoe.setRotationPoint(-4.0F, 10.0F, -1.0F);
        this.lfoot.addChild(this.ltoe);
        this.ltoe.setTextureOffset(57, 57).addBox(-1.0F, -1.0F, -2.0F, 2.0F, 8.0F, 5.0F, 0.0F, false);
        this.ltoe2 = new AdvancedModelBox(this);
        this.ltoe2.setRotationPoint(4.0F, 10.0F, -1.0F);
        this.lfoot.addChild(this.ltoe2);
        this.ltoe2.setTextureOffset(57, 57).addBox(-1.0F, -1.0F, -2.0F, 2.0F, 8.0F, 5.0F, 0.0F, true);
        this.ltoe3 = new AdvancedModelBox(this);
        this.ltoe3.setRotationPoint(0.0F, 10.0F, -1.0F);
        this.lfoot.addChild(this.ltoe3);
        this.ltoe3.setTextureOffset(57, 57).addBox(-1.0F, -1.0F, -2.0F, 2.0F, 8.0F, 5.0F, 0.0F, false);
        this.rthigh = new AdvancedModelBox(this);
        this.rthigh.setRotationPoint(-6.0F, 17.0F, 17.0F);
        this.hips.addChild(this.rthigh);
        this.setRotateAngle(this.rthigh, -0.7854F, 0.7854F, 0.3927F);
        this.rthigh.setTextureOffset(39, 127).addBox(-5.0F, -3.0F, -5.0F, 7.0F, 22.0F, 13.0F, 0.01F, true);
        this.rcalf = new AdvancedModelBox(this);
        this.rcalf.setRotationPoint(-1.5F, 19.25F, 7.5F);
        this.rthigh.addChild(this.rcalf);
        this.rcalf.setTextureOffset(0, 107).addBox(-2.5F, -8.25F, -2.5F, 5.0F, 8.0F, 21.0F, 0.0F, true);
        this.rfoot = new AdvancedModelBox(this);
        this.rfoot.setRotationPoint(0.0F, -2.25F, 17.75F);
        this.rcalf.addChild(this.rfoot);
        this.setRotateAngle(this.rfoot, -0.3927F, 0.3927F, 0.0F);
        this.rfoot.setTextureOffset(31, 107).addBox(-4.5F, -2.0F, -1.0F, 9.0F, 13.0F, 3.0F, 0.0F, true);
        this.rtoe = new AdvancedModelBox(this);
        this.rtoe.setRotationPoint(4.0F, 10.0F, -1.0F);
        this.rfoot.addChild(this.rtoe);
        this.rtoe.setTextureOffset(57, 57).addBox(-1.0F, -1.0F, -2.0F, 2.0F, 8.0F, 5.0F, 0.0F, true);
        this.rtoe2 = new AdvancedModelBox(this);
        this.rtoe2.setRotationPoint(-4.0F, 10.0F, -1.0F);
        this.rfoot.addChild(this.rtoe2);
        this.rtoe2.setTextureOffset(57, 57).addBox(-1.0F, -1.0F, -2.0F, 2.0F, 8.0F, 5.0F, 0.0F, false);
        this.rtoe3 = new AdvancedModelBox(this);
        this.rtoe3.setRotationPoint(0.0F, 10.0F, -1.0F);
        this.rfoot.addChild(this.rtoe3);
        this.rtoe3.setTextureOffset(57, 57).addBox(-1.0F, -1.0F, -2.0F, 2.0F, 8.0F, 5.0F, 0.0F, true);
        this.tail = new AdvancedModelBox(this);
        this.tail.setRotationPoint(0.0F, 11.0F, 22.4224F);
        this.hips.addChild(this.tail);
        this.tail.setTextureOffset(109, 132).addBox(-2.0F, -2.0F, -2.4224F, 4.0F, 4.0F, 20.0F, 0.01F, false);
        this.tail2 = new AdvancedModelBox(this);
        this.tail2.setRotationPoint(0.0F, 0.0F, 17.0F);
        this.tail.addChild(this.tail2);
        this.tail2.setTextureOffset(130, 0).addBox(-1.0F, -1.0F, 0.5776F, 2.0F, 2.0F, 20.0F, 0.01F, false);
        this.neck = new AdvancedModelBox(this);
        this.neck.setRotationPoint(0.0F, -44.0F, -14.0F);
        this.root.addChild(this.neck);
        this.neck.setTextureOffset(62, 83).addBox(-5.0F, -13.0F, -23.0F, 10.0F, 20.0F, 24.0F, 0.0F, false);
        this.cube_r4 = new AdvancedModelBox(this);
        this.cube_r4.setRotationPoint(0.0F, -13.0F, -3.0F);
        this.neck.addChild(this.cube_r4);
        this.setRotateAngle(this.cube_r4, -1.2217F, 0.0F, 0.0F);
        this.cube_r4.setTextureOffset(92, 68).addBox(-5.0F, -8.0F, 0.0F, 10.0F, 8.0F, 0.0F, 0.0F, false);
        this.cube_r5 = new AdvancedModelBox(this);
        this.cube_r5.setRotationPoint(0.0F, -13.0F, -13.0F);
        this.neck.addChild(this.cube_r5);
        this.setRotateAngle(this.cube_r5, -1.2217F, 0.0F, 0.0F);
        this.cube_r5.setTextureOffset(106, 98).addBox(-5.0F, -8.0F, 0.0F, 10.0F, 8.0F, 0.0F, 0.0F, false);
        this.cube_r6 = new AdvancedModelBox(this);
        this.cube_r6.setRotationPoint(0.0F, -13.0F, -23.0F);
        this.neck.addChild(this.cube_r6);
        this.setRotateAngle(this.cube_r6, -1.2217F, 0.0F, 0.0F);
        this.cube_r6.setTextureOffset(66, 127).addBox(-5.0F, -8.0F, 0.0F, 10.0F, 8.0F, 0.0F, 0.0F, false);
        this.skull = new AdvancedModelBox(this);
        this.skull.setRotationPoint(0.0F, -7.0F, -18.0F);
        this.neck.addChild(this.skull);
        this.skull.setTextureOffset(114, 190).addBox(-5.5F, 7.0F, -21.5F, 11.0F, 6.0F, 23.0F, 0.01F, false);
        this.skull.setTextureOffset(106, 62).addBox(-6.0F, -2.0F, -22.0F, 12.0F, 12.0F, 24.0F, 0.01F, false);
        this.skull.setTextureOffset(232, 0).addBox(-6.0F, -10.0F, -22.5F, 12.0F, 14.0F, 0.0F, 0.01F, false);
        this.rBigear = new AdvancedModelBox(this);
        this.rBigear.setRotationPoint(-4.5F, -1.0F, 3.0F);
        this.skull.addChild(this.rBigear);
        this.setRotateAngle(this.rBigear, 0.0F, 0.0F, -0.7418F);
        this.rBigear.setTextureOffset(0, 0).addBox(-10.5F, -15.0F, -1.0F, 10.0F, 19.0F, 2.0F, 0.0F, false);
        this.rBigear.setTextureOffset(158, 7).addBox(-6.5F, -26.0F, -1.0F, 6.0F, 11.0F, 2.0F, 0.0F, false);
        this.lBigear = new AdvancedModelBox(this);
        this.lBigear.setRotationPoint(4.5F, -1.0F, 3.0F);
        this.skull.addChild(this.lBigear);
        this.setRotateAngle(this.lBigear, 0.0F, 0.0F, 0.7418F);
        this.lBigear.setTextureOffset(0, 0).addBox(0.5F, -15.0F, -1.0F, 10.0F, 19.0F, 2.0F, 0.0F, true);
        this.lBigear.setTextureOffset(158, 7).addBox(0.5F, -26.0F, -1.0F, 6.0F, 11.0F, 2.0F, 0.0F, true);
        this.rear = new AdvancedModelBox(this);
        this.rear.setRotationPoint(-4.5F, 0.5F, 4.5F);
        this.skull.addChild(this.rear);
        this.setRotateAngle(this.rear, 0.0F, 0.2182F, -0.1745F);
        this.rear.setTextureOffset(137, 132).addBox(-18.5F, -0.5F, -1.5F, 18.0F, 9.0F, 2.0F, 0.0F, false);
        this.rear.setTextureOffset(0, 78).addBox(-28.5F, -0.5F, -1.5F, 10.0F, 5.0F, 2.0F, 0.0F, false);
        this.lear = new AdvancedModelBox(this);
        this.lear.setRotationPoint(4.5F, 0.5F, 4.5F);
        this.skull.addChild(this.lear);
        this.setRotateAngle(this.lear, 0.0F, -0.2182F, 0.1745F);
        this.lear.setTextureOffset(137, 132).addBox(0.5F, -0.5F, -1.5F, 18.0F, 9.0F, 2.0F, 0.0F, true);
        this.lear.setTextureOffset(0, 78).addBox(18.5F, -0.5F, -1.5F, 10.0F, 5.0F, 2.0F, 0.0F, true);
        this.jaw = new AdvancedModelBox(this);
        this.jaw.setRotationPoint(0.0F, 9.5F, 0.0F);
        this.skull.addChild(this.jaw);
        this.jaw.setTextureOffset(106, 103).addBox(-6.0F, 0.5F, -22.0F, 12.0F, 5.0F, 24.0F, 0.0F, false);
        this.jaw.setTextureOffset(57, 62).addBox(-5.0F, -4.5F, -21.0F, 10.0F, 5.0F, 15.0F, 0.0F, false);
        this.updateDefaultPose();
        this.animator = ModelAnimator.create();
    }

    public void setupAnim(ForsakenEntity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        this.resetToDefaultPose();
        float partialTicks = ageInTicks - (float) entity.f_19797_;
        float earTwitch = ACMath.smin((float) Math.sin((double) (ageInTicks * 0.1F)) + 0.5F, 0.0F, 0.3F);
        float jumpProgress = entity.getLeapProgress(partialTicks);
        float groundProgress = 1.0F - jumpProgress;
        float leftArmHoldAmount = 1.0F - entity.getRaisedLeftArmAmount(partialTicks);
        float rightArmHoldAmount = 1.0F - entity.getRaisedRightArmAmount(partialTicks);
        float lFingerPronateAmount = Math.max(jumpProgress, leftArmHoldAmount);
        float rFingerPronateAmount = Math.max(jumpProgress, rightArmHoldAmount);
        float runProgress = entity.getRunProgress(partialTicks);
        float runAmount = limbSwingAmount * groundProgress * runProgress;
        float walkAmount = limbSwingAmount * groundProgress * (1.0F - runProgress);
        float walkSpeed = 0.35F;
        float walkDegree = 0.8F;
        float runSpeed = 0.5F;
        float runDegree = 0.65F;
        float articulateLegScale = 1.0F - jumpProgress;
        if (entity.getAnimation() != IAnimatedEntity.NO_ANIMATION) {
            articulateLegScale *= this.setupAnimForAnimation(entity, entity.getAnimation(), limbSwing, limbSwingAmount, ageInTicks);
        }
        this.articulateLegs(entity.legSolver, articulateLegScale, partialTicks);
        this.animate(entity);
        this.progressRotationPrev(this.tail, 1.0F - limbSwingAmount, (float) Math.toRadians(-30.0), 0.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.lupperArm, leftArmHoldAmount, (float) Math.toRadians(-60.0), (float) Math.toRadians(-140.0), (float) Math.toRadians(70.0), 1.0F);
        this.progressRotationPrev(this.lupperForeArm, leftArmHoldAmount, (float) Math.toRadians(-20.0), (float) Math.toRadians(30.0), (float) Math.toRadians(100.0), 1.0F);
        this.progressRotationPrev(this.lupperHand, leftArmHoldAmount, (float) Math.toRadians(30.0), (float) Math.toRadians(30.0), (float) Math.toRadians(30.0), 1.0F);
        this.progressRotationPrev(this.lupperThumb, lFingerPronateAmount, (float) Math.toRadians(60.0), (float) Math.toRadians(30.0), 0.0F, 1.0F);
        this.progressRotationPrev(this.lupperFinger, lFingerPronateAmount, 0.0F, 0.0F, (float) Math.toRadians(50.0), 1.0F);
        this.progressRotationPrev(this.lupperFinger2, lFingerPronateAmount, 0.0F, 0.0F, (float) Math.toRadians(50.0), 1.0F);
        this.progressRotationPrev(this.lupperFinger3, lFingerPronateAmount, 0.0F, 0.0F, (float) Math.toRadians(50.0), 1.0F);
        this.progressRotationPrev(this.lupperThumb2, lFingerPronateAmount, (float) Math.toRadians(-60.0), (float) Math.toRadians(30.0), 0.0F, 1.0F);
        this.progressRotationPrev(this.rupperArm, rightArmHoldAmount, (float) Math.toRadians(-60.0), (float) Math.toRadians(140.0), (float) Math.toRadians(-70.0), 1.0F);
        this.progressRotationPrev(this.rupperForeArm, rightArmHoldAmount, (float) Math.toRadians(-20.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(-100.0), 1.0F);
        this.progressRotationPrev(this.rupperHand, rightArmHoldAmount, (float) Math.toRadians(30.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(-30.0), 1.0F);
        this.progressRotationPrev(this.rupperThumb, rFingerPronateAmount, (float) Math.toRadians(60.0), (float) Math.toRadians(-30.0), 0.0F, 1.0F);
        this.progressRotationPrev(this.rupperFinger, rFingerPronateAmount, 0.0F, 0.0F, (float) Math.toRadians(-50.0), 1.0F);
        this.progressRotationPrev(this.rupperFinger2, rFingerPronateAmount, 0.0F, 0.0F, (float) Math.toRadians(-50.0), 1.0F);
        this.progressRotationPrev(this.rupperFinger3, rFingerPronateAmount, 0.0F, 0.0F, (float) Math.toRadians(-50.0), 1.0F);
        this.progressRotationPrev(this.rupperThumb2, rFingerPronateAmount, (float) Math.toRadians(-60.0), (float) Math.toRadians(-30.0), 0.0F, 1.0F);
        this.progressRotationPrev(this.lthigh, limbSwingAmount, 0.0F, (float) Math.toRadians(30.0), 0.0F, 1.0F);
        this.progressRotationPrev(this.rthigh, limbSwingAmount, 0.0F, (float) Math.toRadians(-30.0), 0.0F, 1.0F);
        this.progressPositionPrev(this.root, jumpProgress, 0.0F, -10.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.root, jumpProgress, (float) Math.toRadians(10.0), 0.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.larm, jumpProgress, (float) Math.toRadians(20.0), (float) Math.toRadians(-30.0), 0.0F, 1.0F);
        this.progressRotationPrev(this.lforeArm, jumpProgress, (float) Math.toRadians(-70.0), 0.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.lhand, jumpProgress, (float) Math.toRadians(20.0), 0.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.rarm, jumpProgress, (float) Math.toRadians(20.0), (float) Math.toRadians(30.0), 0.0F, 1.0F);
        this.progressRotationPrev(this.rforeArm, jumpProgress, (float) Math.toRadians(-70.0), 0.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.rhand, jumpProgress, (float) Math.toRadians(20.0), 0.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.lthigh, jumpProgress, (float) Math.toRadians(20.0), (float) Math.toRadians(30.0), (float) Math.toRadians(10.0), 1.0F);
        this.progressRotationPrev(this.lcalf, jumpProgress, (float) Math.toRadians(-20.0), 0.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.lfoot, jumpProgress, (float) Math.toRadians(20.0), 0.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.rthigh, jumpProgress, (float) Math.toRadians(20.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(-10.0), 1.0F);
        this.progressRotationPrev(this.rcalf, jumpProgress, (float) Math.toRadians(-20.0), 0.0F, 0.0F, 1.0F);
        this.progressRotationPrev(this.rfoot, jumpProgress, (float) Math.toRadians(20.0), 0.0F, 0.0F, 1.0F);
        this.walk(this.neck, 0.1F, 0.03F, true, 0.0F, 0.0F, ageInTicks, 1.0F);
        this.walk(this.skull, 0.1F, 0.03F, true, 1.0F, 0.0F, ageInTicks, 1.0F);
        this.walk(this.jaw, 0.1F, 0.1F, true, 2.0F, -0.1F, ageInTicks, 1.0F);
        this.bob(this.neck, walkSpeed, walkDegree * 2.0F, false, limbSwing, walkAmount);
        this.walk(this.neck, walkSpeed, walkDegree * 0.2F, true, 2.0F, -0.1F, limbSwing, walkAmount);
        this.walk(this.skull, walkSpeed, walkDegree * 0.2F, false, 1.0F, -0.1F, limbSwing, walkAmount);
        this.walk(this.lBigear, 3.0F, 0.1F, true, 2.0F, -0.1F, ageInTicks, earTwitch);
        this.walk(this.rBigear, 3.0F, 0.1F, true, 2.0F, -0.1F, ageInTicks, earTwitch);
        this.flap(this.lear, 2.0F, 0.08F, true, 1.0F, -0.1F, ageInTicks, earTwitch);
        this.flap(this.rear, 2.0F, 0.08F, true, 1.0F, -0.1F, ageInTicks, earTwitch);
        this.swing(this.tail, 0.1F, 0.05F, true, 0.0F, 0.0F, ageInTicks, 1.0F);
        this.swing(this.tail2, 0.1F, 0.05F, true, -1.0F, 0.0F, ageInTicks, 1.0F);
        this.swing(this.lupperArm, 0.1F, 0.1F, true, 0.0F, 0.2F, ageInTicks, leftArmHoldAmount);
        this.swing(this.lupperForeArm, 0.1F, 0.1F, true, 1.0F, 0.0F, ageInTicks, leftArmHoldAmount);
        this.flap(this.lupperThumb, 0.1F, 0.2F, true, 0.0F, 0.2F, ageInTicks, leftArmHoldAmount);
        this.flap(this.lupperFinger, 0.1F, 0.2F, true, 1.0F, 0.2F, ageInTicks, leftArmHoldAmount);
        this.flap(this.lupperFinger2, 0.1F, 0.2F, true, 2.0F, 0.2F, ageInTicks, leftArmHoldAmount);
        this.flap(this.lupperFinger3, 0.1F, 0.2F, true, 3.0F, 0.2F, ageInTicks, leftArmHoldAmount);
        this.flap(this.lupperThumb2, 0.1F, 0.2F, true, 4.0F, 0.2F, ageInTicks, leftArmHoldAmount);
        this.swing(this.rupperArm, 0.1F, 0.1F, true, 0.0F, -0.2F, ageInTicks, rightArmHoldAmount);
        this.swing(this.rupperForeArm, 0.1F, 0.1F, true, 1.0F, 0.0F, ageInTicks, rightArmHoldAmount);
        this.flap(this.rupperThumb, 0.1F, 0.2F, true, 0.0F, -0.2F, ageInTicks, rightArmHoldAmount);
        this.flap(this.rupperFinger, 0.1F, 0.2F, true, 1.0F, -0.2F, ageInTicks, rightArmHoldAmount);
        this.flap(this.rupperFinger2, 0.1F, 0.2F, true, 2.0F, -0.2F, ageInTicks, rightArmHoldAmount);
        this.flap(this.rupperFinger3, 0.1F, 0.2F, true, 3.0F, -0.2F, ageInTicks, rightArmHoldAmount);
        this.flap(this.rupperThumb2, 0.1F, 0.2F, true, 4.0F, -0.2F, ageInTicks, rightArmHoldAmount);
        float bodyWalkBob = -Math.abs(ACMath.walkValue(limbSwing, walkAmount, walkSpeed, 0.0F, 9.0F, false));
        this.chest.rotationPointY += bodyWalkBob;
        this.hips.rotationPointY += bodyWalkBob;
        this.rupperArm.rotationPointY += bodyWalkBob;
        this.lupperArm.rotationPointY += bodyWalkBob;
        this.lthigh.rotationPointY -= bodyWalkBob;
        this.rthigh.rotationPointY -= bodyWalkBob;
        this.walk(this.tail, walkSpeed, walkDegree * 0.6F, false, -3.0F, -0.3F, limbSwing, walkAmount);
        this.walk(this.tail2, walkSpeed, walkDegree * 0.6F, false, -4.0F, 0.3F, limbSwing, walkAmount);
        this.walk(this.larm, walkSpeed, walkDegree * 0.6F, false, 1.0F, 0.0F, limbSwing, walkAmount);
        this.walk(this.lforeArm, walkSpeed, walkDegree * 0.2F, false, 1.5F, -0.1F, limbSwing, walkAmount);
        this.walk(this.lhand, walkSpeed, walkDegree * 1.0F, false, -3.0F, 0.0F, limbSwing, walkAmount);
        this.larm.rotationPointY = this.larm.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, -0.5F, 9.0F, true));
        this.larm.rotationPointY = this.larm.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, -1.0F, 4.0F, false));
        this.lhand.rotationPointY = this.lhand.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, -1.0F, 4.0F, false));
        this.walk(this.lfinger, walkSpeed, walkDegree * 0.3F, true, -2.0F, 0.4F, limbSwing, walkAmount);
        this.walk(this.lfinger2, walkSpeed, walkDegree * 0.3F, true, -2.0F, 0.4F, limbSwing, walkAmount);
        this.walk(this.lfinger3, walkSpeed, walkDegree * 0.3F, true, -2.0F, 0.4F, limbSwing, walkAmount);
        this.walk(this.lthumb, walkSpeed, walkDegree * 2.0F, true, -4.0F, 0.0F, limbSwing, walkAmount);
        this.walk(this.lthumb2, walkSpeed, walkDegree * 2.0F, true, -4.0F, 0.0F, limbSwing, walkAmount);
        this.walk(this.rarm, walkSpeed, walkDegree * 0.6F, true, 1.0F, 0.0F, limbSwing, walkAmount);
        this.walk(this.rforeArm, walkSpeed, walkDegree * 0.2F, true, 1.5F, 0.1F, limbSwing, walkAmount);
        this.walk(this.rhand, walkSpeed, walkDegree * 1.0F, true, -3.0F, 0.0F, limbSwing, walkAmount);
        this.rarm.rotationPointY = this.rarm.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, -0.5F, 9.0F, false));
        this.rarm.rotationPointY = this.rarm.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, -1.0F, 5.0F, true));
        this.rhand.rotationPointY = this.rhand.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, -1.0F, 5.0F, true));
        this.walk(this.rfinger, walkSpeed, walkDegree * 0.3F, false, -2.0F, -0.4F, limbSwing, walkAmount);
        this.walk(this.rfinger2, walkSpeed, walkDegree * 0.3F, false, -2.0F, -0.4F, limbSwing, walkAmount);
        this.walk(this.rfinger3, walkSpeed, walkDegree * 0.3F, false, -2.0F, -0.4F, limbSwing, walkAmount);
        this.walk(this.rthumb, walkSpeed, walkDegree * 2.0F, false, -4.0F, 0.0F, limbSwing, walkAmount);
        this.walk(this.rthumb2, walkSpeed, walkDegree * 2.0F, false, -4.0F, 0.0F, limbSwing, walkAmount);
        this.walk(this.lthigh, walkSpeed, walkDegree * 0.6F, true, 1.0F, -0.3F, limbSwing, walkAmount);
        this.walk(this.lcalf, walkSpeed, walkDegree * 0.6F, true, 1.5F, 0.1F, limbSwing, walkAmount);
        this.walk(this.lfoot, walkSpeed, walkDegree * 1.0F, true, 2.0F, 0.0F, limbSwing, walkAmount);
        this.swing(this.lfoot, walkSpeed, walkDegree * 0.4F, true, 2.0F, -0.4F, limbSwing, walkAmount);
        this.lthigh.rotationPointY = this.lthigh.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, -0.5F, 18.0F, false));
        this.lfoot.rotationPointZ = this.lfoot.rotationPointZ + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, 2.0F, 8.0F, false));
        this.lfoot.rotationPointY = this.lfoot.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, 2.0F, 8.0F, false));
        this.walk(this.ltoe, walkSpeed, walkDegree * 1.4F, false, 3.0F, -0.4F, limbSwing, walkAmount);
        this.walk(this.ltoe2, walkSpeed, walkDegree * 1.4F, false, 3.0F, -0.4F, limbSwing, walkAmount);
        this.walk(this.ltoe3, walkSpeed, walkDegree * 1.4F, false, 3.0F, -0.4F, limbSwing, walkAmount);
        this.walk(this.rthigh, walkSpeed, walkDegree * 0.6F, false, 1.0F, 0.3F, limbSwing, walkAmount);
        this.walk(this.rcalf, walkSpeed, walkDegree * 0.6F, false, 1.5F, -0.1F, limbSwing, walkAmount);
        this.walk(this.rfoot, walkSpeed, walkDegree * 1.0F, false, 2.0F, 0.0F, limbSwing, walkAmount);
        this.swing(this.rfoot, walkSpeed, walkDegree * 0.4F, false, 2.0F, -0.4F, limbSwing, walkAmount);
        this.rthigh.rotationPointY = this.rthigh.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, -0.5F, 18.0F, true));
        this.rfoot.rotationPointZ = this.rfoot.rotationPointZ + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, 2.0F, 8.0F, true));
        this.rfoot.rotationPointY = this.rfoot.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, walkAmount, walkSpeed, 2.0F, 8.0F, true));
        this.walk(this.rtoe, walkSpeed, walkDegree * 1.4F, true, 3.0F, -0.4F, limbSwing, walkAmount);
        this.walk(this.rtoe2, walkSpeed, walkDegree * 1.4F, true, 3.0F, -0.4F, limbSwing, walkAmount);
        this.walk(this.rtoe3, walkSpeed, walkDegree * 1.4F, true, 3.0F, -0.4F, limbSwing, walkAmount);
        this.walk(this.root, runSpeed, runDegree * 0.1F, false, 0.0F, 0.0F, limbSwing, runAmount);
        float bodyRunBob = -Math.abs(ACMath.walkValue(limbSwing, runAmount, runSpeed, 0.0F, 7.0F, false));
        this.chest.rotationPointY += bodyRunBob;
        this.root.rotationPointZ = this.root.rotationPointZ - (ACMath.walkValue(limbSwing, runAmount, runSpeed, 2.0F, 7.0F, false) + 7.0F * runAmount);
        this.hips.rotationPointY += bodyRunBob;
        this.rupperArm.rotationPointY += bodyRunBob;
        this.lupperArm.rotationPointY += bodyRunBob;
        this.walk(this.neck, runSpeed, runDegree * 0.2F, false, 1.0F, 0.1F, limbSwing, runAmount);
        this.walk(this.skull, runSpeed, runDegree * 0.2F, true, 2.0F, -0.1F, limbSwing, runAmount);
        this.walk(this.tail, runSpeed, runDegree * 0.2F, false, 2.0F, -0.3F, limbSwing, runAmount);
        this.walk(this.tail2, runSpeed, runDegree * 0.2F, false, 1.0F, 0.3F, limbSwing, runAmount);
        this.swing(this.tail, runSpeed, runDegree * 0.4F, false, -1.0F, 0.0F, limbSwing, runAmount);
        this.swing(this.tail2, runSpeed, runDegree * 0.4F, false, 0.0F, 0.0F, limbSwing, runAmount);
        this.swing(this.lupperArm, runSpeed, runDegree * 0.2F, false, -1.0F, -0.3F, limbSwing, runAmount);
        this.flap(this.lupperForeArm, runSpeed, runDegree * 0.1F, false, -2.0F, 0.25F, limbSwing, runAmount);
        this.swing(this.rupperArm, runSpeed, runDegree * 0.2F, false, -1.0F, 0.3F, limbSwing, runAmount);
        this.flap(this.rupperForeArm, runSpeed, runDegree * 0.1F, false, -2.0F, -0.25F, limbSwing, runAmount);
        this.walk(this.larm, runSpeed, runDegree * 0.6F, false, 1.0F, 0.0F, limbSwing, runAmount);
        this.swing(this.larm, runSpeed, runDegree * 0.3F, false, 2.0F, -0.2F, limbSwing, runAmount);
        this.walk(this.lforeArm, runSpeed, runDegree * 0.2F, false, 1.5F, -0.1F, limbSwing, runAmount);
        this.walk(this.lhand, runSpeed, runDegree * 1.0F, false, -3.0F, 0.0F, limbSwing, runAmount);
        this.larm.rotationPointY = this.larm.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, -0.5F, 8.0F, true));
        this.larm.rotationPointY = this.larm.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, -1.0F, 4.0F, false));
        this.lhand.rotationPointY = this.lhand.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, -1.0F, 4.0F, false));
        this.walk(this.lfinger, runSpeed, runDegree * 0.3F, true, -2.0F, 0.4F, limbSwing, runAmount);
        this.walk(this.lfinger2, runSpeed, runDegree * 0.3F, true, -2.0F, 0.4F, limbSwing, runAmount);
        this.walk(this.lfinger3, runSpeed, runDegree * 0.3F, true, -2.0F, 0.4F, limbSwing, runAmount);
        this.walk(this.lthumb, runSpeed, runDegree * 2.0F, true, -4.0F, 0.0F, limbSwing, runAmount);
        this.walk(this.lthumb2, runSpeed, runDegree * 2.0F, true, -4.0F, 0.0F, limbSwing, runAmount);
        this.walk(this.rarm, runSpeed, runDegree * 0.6F, false, 1.0F, 0.0F, limbSwing, runAmount);
        this.swing(this.rarm, runSpeed, runDegree * 0.3F, true, 2.0F, -0.2F, limbSwing, runAmount);
        this.walk(this.rforeArm, runSpeed, runDegree * 0.2F, false, 1.5F, -0.1F, limbSwing, runAmount);
        this.walk(this.rhand, runSpeed, runDegree * 1.0F, false, -3.0F, 0.0F, limbSwing, runAmount);
        this.rarm.rotationPointY = this.rarm.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, -0.5F, 8.0F, true));
        this.rarm.rotationPointY = this.rarm.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, -1.0F, 4.0F, false));
        this.rhand.rotationPointY = this.rhand.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, -1.0F, 4.0F, false));
        this.walk(this.rfinger, runSpeed, runDegree * 0.3F, true, -2.0F, 0.4F, limbSwing, runAmount);
        this.walk(this.rfinger2, runSpeed, runDegree * 0.3F, true, -2.0F, 0.4F, limbSwing, runAmount);
        this.walk(this.rfinger3, runSpeed, runDegree * 0.3F, true, -2.0F, 0.4F, limbSwing, runAmount);
        this.walk(this.rthumb, runSpeed, runDegree * 2.0F, true, -4.0F, 0.0F, limbSwing, runAmount);
        this.walk(this.rthumb2, runSpeed, runDegree * 2.0F, true, -4.0F, 0.0F, limbSwing, runAmount);
        this.walk(this.lthigh, runSpeed, runDegree * 0.6F, true, 2.0F, -0.3F, limbSwing, runAmount);
        this.walk(this.lcalf, runSpeed, runDegree * 0.6F, true, 2.5F, 0.1F, limbSwing, runAmount);
        this.walk(this.lfoot, runSpeed, runDegree * 1.0F, true, 3.0F, 0.0F, limbSwing, runAmount);
        this.swing(this.lfoot, runSpeed, runDegree * 0.4F, true, 3.0F, -0.4F, limbSwing, runAmount);
        this.lthigh.rotationPointY = this.lthigh.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, 0.5F, 10.0F, false));
        this.lfoot.rotationPointZ = this.lfoot.rotationPointZ + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, 3.0F, 8.0F, false));
        this.lfoot.rotationPointY = this.lfoot.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, 3.0F, 8.0F, false));
        this.walk(this.ltoe, runSpeed, runDegree * 1.4F, false, 4.0F, -0.4F, limbSwing, runAmount);
        this.walk(this.ltoe2, runSpeed, runDegree * 1.4F, false, 4.0F, -0.4F, limbSwing, runAmount);
        this.walk(this.ltoe3, runSpeed, runDegree * 1.4F, false, 4.0F, -0.4F, limbSwing, runAmount);
        this.walk(this.rthigh, runSpeed, runDegree * 0.6F, true, 2.0F, -0.3F, limbSwing, runAmount);
        this.walk(this.rcalf, runSpeed, runDegree * 0.6F, true, 2.5F, 0.1F, limbSwing, runAmount);
        this.walk(this.rfoot, runSpeed, runDegree * 1.0F, true, 3.0F, 0.0F, limbSwing, runAmount);
        this.swing(this.rfoot, runSpeed, runDegree * 0.4F, true, 3.0F, -0.4F, limbSwing, runAmount);
        this.rthigh.rotationPointY = this.rthigh.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, 0.5F, 10.0F, false));
        this.rfoot.rotationPointZ = this.rfoot.rotationPointZ + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, 3.0F, 8.0F, false));
        this.rfoot.rotationPointY = this.rfoot.rotationPointY + Math.min(0.0F, ACMath.walkValue(limbSwing, runAmount, runSpeed, 3.0F, 8.0F, false));
        this.walk(this.rtoe, runSpeed, runDegree * 1.4F, false, 4.0F, -0.4F, limbSwing, runAmount);
        this.walk(this.rtoe2, runSpeed, runDegree * 1.4F, false, 4.0F, -0.4F, limbSwing, runAmount);
        this.walk(this.rtoe3, runSpeed, runDegree * 1.4F, false, 4.0F, -0.4F, limbSwing, runAmount);
        this.root.rotateAngleX = this.root.rotateAngleX + jumpProgress * entity.getLeapPitch(partialTicks) * 0.6F / (180.0F / (float) Math.PI);
        this.faceTarget(netHeadYaw, headPitch, 1.0F, new AdvancedModelBox[] { this.neck, this.skull });
    }

    private float setupAnimForAnimation(ForsakenEntity entity, Animation animation, float limbSwing, float limbSwingAmount, float ageInTicks) {
        float partialTick = ageInTicks - (float) entity.f_19797_;
        float rootScale = 1.0F;
        float legMoveAmount = 1.0F;
        if (animation == ForsakenEntity.ANIMATION_SUMMON) {
            float animationIntensity = ACMath.cullAnimationTick(entity.getAnimationTick(), 3.0F, animation, partialTick, 0);
            float animationProgress = ((float) entity.getAnimationTick() + partialTick) / (float) animation.getDuration();
            rootScale = 0.5F + 0.5F * animationProgress;
            this.root.rotationPointY += (1.0F - animationProgress) * 25.0F;
            legMoveAmount = 1.0F - animationIntensity;
        }
        if (entity.getAnimation() == ForsakenEntity.ANIMATION_SONIC_ATTACK) {
            float animationIntensity = ACMath.cullAnimationTick(entity.getAnimationTick(), 1.0F, animation, partialTick, 5, 30);
            this.jaw.walk(2.0F, 0.1F, false, 1.0F, 0.0F, ageInTicks, animationIntensity);
            this.lBigear.walk(2.0F, 0.2F, false, 3.0F, 0.0F, ageInTicks, animationIntensity);
            this.rBigear.walk(2.0F, 0.2F, false, 3.0F, 0.0F, ageInTicks, animationIntensity);
            this.lear.walk(2.0F, 0.3F, false, 3.0F, 1.0F, ageInTicks, animationIntensity);
            this.rear.walk(2.0F, 0.3F, false, 3.0F, 1.0F, ageInTicks, animationIntensity);
        }
        if (entity.getAnimation() == ForsakenEntity.ANIMATION_SONIC_BLAST) {
            float animationIntensity = ACMath.cullAnimationTick(entity.getAnimationTick(), 1.0F, animation, partialTick, 5, 30);
            this.neck.flap(0.5F, 0.5F, false, 1.0F, 0.0F, ageInTicks, animationIntensity);
            this.neck.swing(0.5F, 0.5F, false, 2.0F, 0.0F, ageInTicks, animationIntensity);
            this.jaw.walk(2.0F, 0.1F, false, 1.0F, 0.0F, ageInTicks, animationIntensity);
            this.lBigear.walk(2.0F, 0.2F, false, 3.0F, 0.0F, ageInTicks, animationIntensity);
            this.rBigear.walk(2.0F, 0.2F, false, 3.0F, 0.0F, ageInTicks, animationIntensity);
            this.lear.walk(2.0F, 0.3F, false, 3.0F, 1.0F, ageInTicks, animationIntensity);
            this.rear.walk(2.0F, 0.3F, false, 3.0F, 1.0F, ageInTicks, animationIntensity);
        }
        this.root.setScale(rootScale, rootScale, rootScale);
        this.root.scaleChildren = true;
        return legMoveAmount;
    }

    public Vec3 getMouthPosition(Vec3 offsetIn) {
        PoseStack translationStack = new PoseStack();
        translationStack.pushPose();
        this.root.translateAndRotate(translationStack);
        this.neck.translateAndRotate(translationStack);
        this.skull.translateAndRotate(translationStack);
        Vector4f armOffsetVec = new Vector4f((float) offsetIn.x, (float) offsetIn.y, (float) offsetIn.z, 1.0F);
        armOffsetVec.mul(translationStack.last().pose());
        Vec3 vec3 = new Vec3((double) (-armOffsetVec.x()), (double) (-armOffsetVec.y()), (double) armOffsetVec.z());
        translationStack.popPose();
        return vec3.add(0.0, 1.0, -1.0);
    }

    public Vec3 getHandPosition(boolean right, Vec3 offsetIn) {
        PoseStack translationStack = new PoseStack();
        translationStack.pushPose();
        this.root.translateAndRotate(translationStack);
        if (right) {
            this.rupperArm.translateAndRotate(translationStack);
            this.rupperForeArm.translateAndRotate(translationStack);
            this.rupperHand.translateAndRotate(translationStack);
        } else {
            this.lupperArm.translateAndRotate(translationStack);
            this.lupperForeArm.translateAndRotate(translationStack);
            this.lupperHand.translateAndRotate(translationStack);
        }
        Vector4f armOffsetVec = new Vector4f((float) offsetIn.x, (float) offsetIn.y, (float) offsetIn.z, 1.0F);
        armOffsetVec.mul(translationStack.last().pose());
        Vec3 vec3 = new Vec3((double) armOffsetVec.x(), (double) armOffsetVec.y(), (double) armOffsetVec.z());
        translationStack.popPose();
        return vec3;
    }

    @Override
    public Iterable<BasicModelPart> parts() {
        return ImmutableList.of(this.root);
    }

    @Override
    public Iterable<AdvancedModelBox> getAllParts() {
        return ImmutableList.of(this.root, this.chest, this.cube_r1, this.cube_r2, this.larm, this.lforeArm, this.lhand, this.lfinger, this.lfinger2, this.lfinger3, this.lthumb, this.lthumb2, new AdvancedModelBox[] { this.rarm, this.rforeArm, this.rhand, this.rfinger, this.rfinger2, this.rfinger3, this.rthumb, this.rthumb2, this.lupperArm, this.lupperForeArm, this.lupperHand, this.lupperFinger, this.lupperThumb, this.lupperThumb2, this.lupperFinger2, this.lupperFinger3, this.rupperArm, this.rupperForeArm, this.rupperHand, this.rupperFinger, this.rupperThumb, this.rupperThumb2, this.rupperFinger2, this.rupperFinger3, this.hips, this.cube_r3, this.lthigh, this.lcalf, this.lfoot, this.ltoe, this.ltoe2, this.ltoe3, this.rthigh, this.rcalf, this.rfoot, this.rtoe, this.rtoe2, this.rtoe3, this.tail, this.tail2, this.neck, this.cube_r4, this.cube_r5, this.cube_r6, this.skull, this.rBigear, this.lBigear, this.rear, this.lear, this.jaw });
    }

    private void articulateLegs(LegSolverQuadruped legs, float multiplier, float partialTick) {
        float heightBackLeft = legs.backLeft.getHeight(partialTick) * multiplier;
        float heightBackRight = legs.backRight.getHeight(partialTick) * multiplier;
        float heightFrontLeft = legs.frontLeft.getHeight(partialTick) * multiplier;
        float heightFrontRight = legs.frontRight.getHeight(partialTick) * multiplier;
        float max = Math.max(Math.max(heightBackLeft, heightBackRight), Math.max(heightFrontLeft, heightFrontRight));
        this.root.rotationPointY += max * 16.0F;
        this.rarm.rotationPointY += (heightFrontRight - max) * 16.0F + (1.0F - heightFrontRight) * 7.0F;
        this.rarm.rotateAngleX = (float) ((double) this.rarm.rotateAngleX + (double) (1.0F - heightFrontRight) * Math.toRadians(30.0));
        this.rforeArm.rotateAngleX = (float) ((double) this.rforeArm.rotateAngleX + (double) (1.0F - heightFrontRight) * Math.toRadians(-60.0));
        this.rhand.rotateAngleX = (float) ((double) this.rhand.rotateAngleX + (double) (1.0F - heightFrontRight) * Math.toRadians(30.0));
        this.larm.rotationPointY += (heightFrontLeft - max) * 16.0F + (1.0F - heightFrontLeft) * 7.0F;
        this.larm.rotateAngleX = (float) ((double) this.larm.rotateAngleX + (double) (1.0F - heightFrontLeft) * Math.toRadians(30.0));
        this.lforeArm.rotateAngleX = (float) ((double) this.lforeArm.rotateAngleX + (double) (1.0F - heightFrontLeft) * Math.toRadians(-60.0));
        this.lhand.rotateAngleX = (float) ((double) this.lhand.rotateAngleX + (double) (1.0F - heightFrontLeft) * Math.toRadians(30.0));
        this.rthigh.rotationPointY += (heightBackRight - max) * 16.0F;
        this.rthigh.rotateAngleX = (float) ((double) this.rthigh.rotateAngleX + (double) heightBackRight * Math.toRadians(30.0));
        this.rthigh.rotateAngleZ = (float) ((double) this.rthigh.rotateAngleZ + (double) heightBackRight * Math.toRadians(-10.0));
        this.rcalf.rotateAngleX = (float) ((double) this.rcalf.rotateAngleX + (double) heightBackRight * Math.toRadians(-60.0));
        this.rcalf.rotationPointY -= heightBackRight * 2.0F;
        this.rcalf.rotationPointZ -= heightBackRight * 10.0F;
        this.rfoot.rotateAngleX = (float) ((double) this.rfoot.rotateAngleX + (double) heightBackRight * Math.toRadians(15.0));
        this.lthigh.rotationPointY += (heightBackLeft - max) * 16.0F;
        this.lthigh.rotateAngleX = (float) ((double) this.lthigh.rotateAngleX + (double) heightBackLeft * Math.toRadians(30.0));
        this.lthigh.rotateAngleZ = (float) ((double) this.lthigh.rotateAngleZ + (double) heightBackLeft * Math.toRadians(10.0));
        this.lcalf.rotateAngleX = (float) ((double) this.lcalf.rotateAngleX + (double) heightBackLeft * Math.toRadians(-60.0));
        this.lcalf.rotationPointY -= heightBackLeft * 2.0F;
        this.lcalf.rotationPointZ -= heightBackLeft * 10.0F;
        this.lfoot.rotateAngleX = (float) ((double) this.lfoot.rotateAngleX + (double) heightBackLeft * Math.toRadians(15.0));
    }

    public void animate(IAnimatedEntity entity) {
        this.animator.update(entity);
        this.animator.setAnimation(ForsakenEntity.ANIMATION_PREPARE_JUMP);
        this.animator.startKeyframe(5);
        this.animator.move(this.root, 0.0F, 10.0F, 0.0F);
        this.animator.move(this.larm, 0.0F, 1.0F, 1.0F);
        this.animator.move(this.rarm, 0.0F, 1.0F, 1.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(20.0), 0.0F, 0.0F);
        this.animator.rotate(this.skull, (float) Math.toRadians(-30.0), 0.0F, 0.0F);
        this.animator.rotate(this.larm, (float) Math.toRadians(40.0), (float) Math.toRadians(-20.0), 0.0F);
        this.animator.rotate(this.lforeArm, (float) Math.toRadians(-50.0), 0.0F, 0.0F);
        this.animator.rotate(this.lhand, (float) Math.toRadians(10.0), 0.0F, 0.0F);
        this.animator.rotate(this.rarm, (float) Math.toRadians(40.0), (float) Math.toRadians(20.0), 0.0F);
        this.animator.rotate(this.rforeArm, (float) Math.toRadians(-50.0), 0.0F, 0.0F);
        this.animator.rotate(this.rhand, (float) Math.toRadians(10.0), 0.0F, 0.0F);
        this.animator.rotate(this.lthigh, (float) Math.toRadians(-40.0), (float) Math.toRadians(10.0), 0.0F);
        this.animator.rotate(this.lcalf, (float) Math.toRadians(20.0), 0.0F, 0.0F);
        this.animator.rotate(this.lfoot, (float) Math.toRadians(10.0), 0.0F, 0.0F);
        this.animator.rotate(this.rthigh, (float) Math.toRadians(-40.0), (float) Math.toRadians(-10.0), 0.0F);
        this.animator.rotate(this.rcalf, (float) Math.toRadians(20.0), 0.0F, 0.0F);
        this.animator.rotate(this.rfoot, (float) Math.toRadians(10.0), 0.0F, 0.0F);
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(5);
        this.animator.resetKeyframe(5);
        this.animator.endKeyframe();
        this.animator.setAnimation(ForsakenEntity.ANIMATION_BITE);
        this.animator.startKeyframe(4);
        this.animator.move(this.chest, 0.0F, -5.0F, 0.0F);
        this.animator.move(this.neck, 0.0F, 0.0F, 3.0F);
        this.animator.rotate(this.chest, (float) Math.toRadians(-20.0), 0.0F, 0.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(-20.0), 0.0F, (float) Math.toRadians(-10.0));
        this.animator.rotate(this.skull, (float) Math.toRadians(30.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.endKeyframe();
        this.animator.startKeyframe(4);
        this.animator.move(this.neck, 0.0F, 5.0F, 0.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(10.0), 0.0F, 0.0F);
        this.animator.rotate(this.skull, (float) Math.toRadians(-10.0), 0.0F, 0.0F);
        this.animator.rotate(this.jaw, (float) Math.toRadians(70.0), 0.0F, 0.0F);
        this.animator.endKeyframe();
        this.animator.startKeyframe(3);
        this.animator.move(this.neck, 0.0F, 5.0F, 0.0F);
        this.animator.move(this.jaw, 0.0F, -1.0F, 1.0F);
        this.animator.rotate(this.jaw, (float) Math.toRadians(-10.0), 0.0F, 0.0F);
        this.animator.endKeyframe();
        this.animator.resetKeyframe(4);
        this.animator.setAnimation(ForsakenEntity.ANIMATION_LEFT_SLASH);
        this.animator.startKeyframe(10);
        this.animator.rotate(this.root, 0.0F, (float) Math.toRadians(-10.0), 0.0F);
        this.animator.rotate(this.neck, 0.0F, (float) Math.toRadians(15.0), 0.0F);
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(20.0), (float) Math.toRadians(-40.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.lupperForeArm, (float) Math.toRadians(-20.0), (float) Math.toRadians(-20.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperHand, (float) Math.toRadians(-40.0), 0.0F, (float) Math.toRadians(-10.0));
        this.animator.rotate(this.lupperThumb, (float) Math.toRadians(65.0), (float) Math.toRadians(-35.0), 0.0F);
        this.animator.rotate(this.lupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperThumb2, (float) Math.toRadians(-65.0), (float) Math.toRadians(-35.0), 0.0F);
        this.animator.endKeyframe();
        this.animator.startKeyframe(5);
        this.animator.move(this.neck, 0.0F, 3.0F, 3.0F);
        this.animator.move(this.lupperArm, 2.0F, 7.0F, -14.0F);
        this.animator.rotate(this.root, 0.0F, (float) Math.toRadians(10.0), 0.0F);
        this.animator.rotate(this.neck, 0.0F, (float) Math.toRadians(15.0), 0.0F);
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(-30.0), 0.0F, (float) Math.toRadians(30.0));
        this.animator.rotate(this.lupperForeArm, (float) Math.toRadians(-50.0), 0.0F, (float) Math.toRadians(30.0));
        this.animator.rotate(this.lupperHand, (float) Math.toRadians(-20.0), 0.0F, (float) Math.toRadians(-30.0));
        this.animator.rotate(this.lupperThumb, (float) Math.toRadians(65.0), (float) Math.toRadians(-55.0), 0.0F);
        this.animator.rotate(this.lupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(55.0));
        this.animator.rotate(this.lupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(55.0));
        this.animator.rotate(this.lupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(55.0));
        this.animator.rotate(this.lupperThumb2, (float) Math.toRadians(-65.0), (float) Math.toRadians(-55.0), 0.0F);
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(3);
        this.animator.resetKeyframe(15);
        this.animator.setAnimation(ForsakenEntity.ANIMATION_RIGHT_SLASH);
        this.animator.startKeyframe(10);
        this.animator.rotate(this.root, 0.0F, (float) Math.toRadians(10.0), 0.0F);
        this.animator.rotate(this.neck, 0.0F, (float) Math.toRadians(-15.0), 0.0F);
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(20.0), (float) Math.toRadians(40.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.rupperForeArm, (float) Math.toRadians(-20.0), (float) Math.toRadians(20.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperHand, (float) Math.toRadians(-40.0), 0.0F, (float) Math.toRadians(10.0));
        this.animator.rotate(this.rupperThumb, (float) Math.toRadians(65.0), (float) Math.toRadians(35.0), 0.0F);
        this.animator.rotate(this.rupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperThumb2, (float) Math.toRadians(-65.0), (float) Math.toRadians(35.0), 0.0F);
        this.animator.endKeyframe();
        this.animator.startKeyframe(5);
        this.animator.move(this.neck, 0.0F, 3.0F, 3.0F);
        this.animator.move(this.rupperArm, -2.0F, 7.0F, -14.0F);
        this.animator.rotate(this.root, 0.0F, (float) Math.toRadians(-10.0), 0.0F);
        this.animator.rotate(this.neck, 0.0F, (float) Math.toRadians(-15.0), 0.0F);
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(-30.0), 0.0F, (float) Math.toRadians(-30.0));
        this.animator.rotate(this.rupperForeArm, (float) Math.toRadians(-50.0), 0.0F, (float) Math.toRadians(-30.0));
        this.animator.rotate(this.rupperHand, (float) Math.toRadians(-20.0), 0.0F, (float) Math.toRadians(30.0));
        this.animator.rotate(this.rupperThumb, (float) Math.toRadians(65.0), (float) Math.toRadians(55.0), 0.0F);
        this.animator.rotate(this.rupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(-55.0));
        this.animator.rotate(this.rupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(-55.0));
        this.animator.rotate(this.rupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(-55.0));
        this.animator.rotate(this.rupperThumb2, (float) Math.toRadians(-65.0), (float) Math.toRadians(55.0), 0.0F);
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(3);
        this.animator.resetKeyframe(15);
        this.animator.setAnimation(ForsakenEntity.ANIMATION_GROUND_SMASH);
        this.animator.startKeyframe(10);
        this.animator.rotate(this.neck, (float) Math.toRadians(-20.0), 0.0F, 0.0F);
        this.animator.rotate(this.skull, (float) Math.toRadians(20.0), 0.0F, 0.0F);
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(20.0), (float) Math.toRadians(40.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperForeArm, 0.0F, 0.0F, (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperHand, 0.0F, 0.0F, (float) Math.toRadians(20.0));
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(20.0), (float) Math.toRadians(-40.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperForeArm, 0.0F, 0.0F, (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperHand, 0.0F, 0.0F, (float) Math.toRadians(-20.0));
        this.animator.endKeyframe();
        this.animator.startKeyframe(5);
        this.animator.rotate(this.neck, (float) Math.toRadians(-40.0), 0.0F, 0.0F);
        this.animator.rotate(this.skull, (float) Math.toRadians(40.0), 0.0F, 0.0F);
        this.animator.move(this.chest, 0.0F, 3.0F, 0.0F);
        this.animator.move(this.skull, 0.0F, -1.0F, -1.0F);
        this.animator.move(this.rupperArm, -2.0F, 12.0F, -20.0F);
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(-60.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(-40.0));
        this.animator.rotate(this.rupperForeArm, 0.0F, (float) Math.toRadians(-30.0), (float) Math.toRadians(-30.0));
        this.animator.rotate(this.rupperHand, (float) Math.toRadians(20.0), (float) Math.toRadians(-10.0), (float) Math.toRadians(60.0));
        this.animator.rotate(this.rupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(25.0));
        this.animator.rotate(this.rupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(25.0));
        this.animator.rotate(this.rupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(15.0));
        this.animator.rotate(this.rupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.move(this.lupperArm, 2.0F, 12.0F, -20.0F);
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(-60.0), (float) Math.toRadians(30.0), (float) Math.toRadians(40.0));
        this.animator.rotate(this.lupperForeArm, 0.0F, (float) Math.toRadians(30.0), (float) Math.toRadians(30.0));
        this.animator.rotate(this.lupperHand, (float) Math.toRadians(20.0), (float) Math.toRadians(10.0), (float) Math.toRadians(-60.0));
        this.animator.rotate(this.lupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(-25.0));
        this.animator.rotate(this.lupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(-25.0));
        this.animator.rotate(this.lupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(-15.0));
        this.animator.rotate(this.lupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(2);
        this.animator.resetKeyframe(13);
        this.animator.setAnimation(ForsakenEntity.ANIMATION_SONIC_ATTACK);
        this.animator.startKeyframe(5);
        this.animator.move(this.neck, 0.0F, 0.0F, 3.0F);
        this.animator.rotate(this.chest, (float) Math.toRadians(10.0), 0.0F, 0.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(-20.0), 0.0F, 0.0F);
        this.animator.rotate(this.skull, (float) Math.toRadians(-30.0), 0.0F, 0.0F);
        this.animator.endKeyframe();
        this.animator.startKeyframe(5);
        this.animator.move(this.neck, 0.0F, 5.0F, -3.0F);
        this.animator.move(this.skull, 0.0F, -2.0F, -1.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(10.0), 0.0F, 0.0F);
        this.animator.rotate(this.skull, (float) Math.toRadians(-30.0), 0.0F, 0.0F);
        this.animator.rotate(this.jaw, (float) Math.toRadians(70.0), 0.0F, 0.0F);
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(15);
        this.animator.resetKeyframe(10);
        this.animator.setAnimation(ForsakenEntity.ANIMATION_SONIC_BLAST);
        this.animator.startKeyframe(5);
        this.animator.move(this.neck, 0.0F, 0.0F, 3.0F);
        this.animator.rotate(this.chest, (float) Math.toRadians(10.0), 0.0F, 0.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(-20.0), 0.0F, 0.0F);
        this.animator.rotate(this.skull, (float) Math.toRadians(-30.0), 0.0F, 0.0F);
        this.animator.endKeyframe();
        this.animator.startKeyframe(5);
        this.animator.move(this.neck, 0.0F, -2.0F, 2.0F);
        this.animator.rotate(this.chest, (float) Math.toRadians(10.0), 0.0F, 0.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(-30.0), 0.0F, 0.0F);
        this.animator.rotate(this.skull, (float) Math.toRadians(-30.0), 0.0F, 0.0F);
        this.animator.rotate(this.jaw, (float) Math.toRadians(70.0), 0.0F, 0.0F);
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(25);
        this.animator.resetKeyframe(10);
        this.animator.setAnimation(ForsakenEntity.ANIMATION_LEFT_PICKUP);
        this.animator.startKeyframe(10);
        this.animator.move(this.lupperArm, 2.0F, 12.0F, -20.0F);
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(-60.0), (float) Math.toRadians(30.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.lupperForeArm, 0.0F, (float) Math.toRadians(20.0), (float) Math.toRadians(-30.0));
        this.animator.rotate(this.lupperHand, (float) Math.toRadians(0.0), (float) Math.toRadians(-70.0), (float) Math.toRadians(-60.0));
        this.animator.rotate(this.lupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(-25.0));
        this.animator.rotate(this.lupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(-25.0));
        this.animator.rotate(this.lupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(-15.0));
        this.animator.rotate(this.lupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.endKeyframe();
        this.animator.startKeyframe(5);
        this.animator.move(this.lupperArm, 2.0F, 12.0F, -20.0F);
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(-70.0), (float) Math.toRadians(30.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.lupperForeArm, 0.0F, (float) Math.toRadians(10.0), (float) Math.toRadians(-10.0));
        this.animator.rotate(this.lupperHand, (float) Math.toRadians(90.0), (float) Math.toRadians(-150.0), (float) Math.toRadians(-130.0));
        this.animator.rotate(this.lupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.move(this.lupperThumb, -2.0F, 0.0F, 0.0F);
        this.animator.move(this.lupperThumb2, -4.0F, 0.0F, 0.0F);
        this.animator.rotate(this.lupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(2);
        this.animator.startKeyframe(10);
        this.animator.rotate(this.neck, (float) Math.toRadians(-30.0), (float) Math.toRadians(-10.0), (float) Math.toRadians(-10.0));
        this.animator.rotate(this.skull, (float) Math.toRadians(-20.0), (float) Math.toRadians(-20.0), (float) Math.toRadians(-10.0));
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(-30.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperForeArm, (float) Math.toRadians(-10.0), (float) Math.toRadians(-10.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperHand, (float) Math.toRadians(30.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(30.0));
        this.animator.rotate(this.lupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.move(this.lupperThumb, -2.0F, 0.0F, 0.0F);
        this.animator.move(this.lupperThumb2, -4.0F, 0.0F, 0.0F);
        this.animator.rotate(this.lupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(2);
        this.animator.startKeyframe(5);
        this.animator.move(this.skull, 0.0F, 2.0F, 0.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(-30.0), (float) Math.toRadians(-20.0), (float) Math.toRadians(-10.0));
        this.animator.rotate(this.skull, (float) Math.toRadians(-20.0), (float) Math.toRadians(-40.0), (float) Math.toRadians(-10.0));
        this.animator.rotate(this.jaw, (float) Math.toRadians(70.0), 0.0F, 0.0F);
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(-50.0), (float) Math.toRadians(-10.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperForeArm, (float) Math.toRadians(-20.0), (float) Math.toRadians(-10.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperHand, (float) Math.toRadians(20.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(30.0));
        this.animator.rotate(this.lupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.move(this.lupperThumb, -2.0F, 0.0F, 0.0F);
        this.animator.move(this.lupperThumb2, -4.0F, 0.0F, 0.0F);
        this.animator.rotate(this.lupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.endKeyframe();
        this.animator.startKeyframe(2);
        this.animator.rotate(this.neck, (float) Math.toRadians(-30.0), (float) Math.toRadians(-20.0), (float) Math.toRadians(-10.0));
        this.animator.rotate(this.skull, (float) Math.toRadians(-20.0), (float) Math.toRadians(-40.0), (float) Math.toRadians(-10.0));
        this.animator.rotate(this.jaw, (float) Math.toRadians(-10.0), 0.0F, 0.0F);
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(-50.0), (float) Math.toRadians(-10.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperForeArm, (float) Math.toRadians(-20.0), (float) Math.toRadians(-10.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperHand, (float) Math.toRadians(20.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(30.0));
        this.animator.rotate(this.lupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(35.0));
        this.animator.rotate(this.lupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(35.0));
        this.animator.move(this.lupperThumb, -2.0F, 0.0F, 0.0F);
        this.animator.move(this.lupperThumb2, -4.0F, 0.0F, 0.0F);
        this.animator.rotate(this.lupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.rotate(this.lupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(2);
        this.animator.resetKeyframe(10);
        this.animator.setAnimation(ForsakenEntity.ANIMATION_RIGHT_PICKUP);
        this.animator.startKeyframe(10);
        this.animator.move(this.rupperArm, -2.0F, 12.0F, -20.0F);
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(-60.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.rupperForeArm, 0.0F, (float) Math.toRadians(-20.0), (float) Math.toRadians(30.0));
        this.animator.rotate(this.rupperHand, (float) Math.toRadians(0.0), (float) Math.toRadians(70.0), (float) Math.toRadians(60.0));
        this.animator.rotate(this.rupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(25.0));
        this.animator.rotate(this.rupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(25.0));
        this.animator.rotate(this.rupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(15.0));
        this.animator.rotate(this.rupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(-20.0));
        this.animator.endKeyframe();
        this.animator.startKeyframe(5);
        this.animator.move(this.rupperArm, -2.0F, 12.0F, -20.0F);
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(-70.0), (float) Math.toRadians(-30.0), (float) Math.toRadians(-20.0));
        this.animator.rotate(this.rupperForeArm, 0.0F, (float) Math.toRadians(-10.0), (float) Math.toRadians(10.0));
        this.animator.rotate(this.rupperHand, (float) Math.toRadians(90.0), (float) Math.toRadians(150.0), (float) Math.toRadians(130.0));
        this.animator.rotate(this.rupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.move(this.rupperThumb, 2.0F, 0.0F, 0.0F);
        this.animator.move(this.rupperThumb2, 4.0F, 0.0F, 0.0F);
        this.animator.rotate(this.rupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(2);
        this.animator.startKeyframe(10);
        this.animator.rotate(this.neck, (float) Math.toRadians(-30.0), (float) Math.toRadians(10.0), (float) Math.toRadians(10.0));
        this.animator.rotate(this.skull, (float) Math.toRadians(-20.0), (float) Math.toRadians(20.0), (float) Math.toRadians(10.0));
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(-30.0), (float) Math.toRadians(30.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperForeArm, (float) Math.toRadians(-10.0), (float) Math.toRadians(10.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperHand, (float) Math.toRadians(30.0), (float) Math.toRadians(30.0), (float) Math.toRadians(-30.0));
        this.animator.rotate(this.rupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.move(this.rupperThumb, 2.0F, 0.0F, 0.0F);
        this.animator.move(this.rupperThumb2, 4.0F, 0.0F, 0.0F);
        this.animator.rotate(this.rupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(2);
        this.animator.startKeyframe(5);
        this.animator.move(this.skull, 0.0F, 2.0F, 0.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(-30.0), (float) Math.toRadians(20.0), (float) Math.toRadians(10.0));
        this.animator.rotate(this.skull, (float) Math.toRadians(-20.0), (float) Math.toRadians(40.0), (float) Math.toRadians(10.0));
        this.animator.rotate(this.jaw, (float) Math.toRadians(70.0), 0.0F, 0.0F);
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(-50.0), (float) Math.toRadians(10.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperForeArm, (float) Math.toRadians(-20.0), (float) Math.toRadians(10.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperHand, (float) Math.toRadians(20.0), (float) Math.toRadians(30.0), (float) Math.toRadians(-30.0));
        this.animator.rotate(this.rupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.move(this.rupperThumb, 2.0F, 0.0F, 0.0F);
        this.animator.move(this.rupperThumb2, 4.0F, 0.0F, 0.0F);
        this.animator.rotate(this.rupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.endKeyframe();
        this.animator.startKeyframe(2);
        this.animator.rotate(this.neck, (float) Math.toRadians(-30.0), (float) Math.toRadians(20.0), (float) Math.toRadians(10.0));
        this.animator.rotate(this.skull, (float) Math.toRadians(-20.0), (float) Math.toRadians(40.0), (float) Math.toRadians(10.0));
        this.animator.rotate(this.jaw, (float) Math.toRadians(-10.0), 0.0F, 0.0F);
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(-50.0), (float) Math.toRadians(10.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperForeArm, (float) Math.toRadians(-20.0), (float) Math.toRadians(10.0), (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperHand, (float) Math.toRadians(20.0), (float) Math.toRadians(30.0), (float) Math.toRadians(-30.0));
        this.animator.rotate(this.rupperFinger, (float) Math.toRadians(-15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger2, 0.0F, 0.0F, (float) Math.toRadians(-35.0));
        this.animator.rotate(this.rupperFinger3, (float) Math.toRadians(15.0), 0.0F, (float) Math.toRadians(-35.0));
        this.animator.move(this.rupperThumb, 2.0F, 0.0F, 0.0F);
        this.animator.move(this.rupperThumb2, 4.0F, 0.0F, 0.0F);
        this.animator.rotate(this.rupperThumb, (float) Math.toRadians(65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.rotate(this.rupperThumb2, (float) Math.toRadians(-65.0), 0.0F, (float) Math.toRadians(20.0));
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(2);
        this.animator.resetKeyframe(10);
        this.animator.setAnimation(ForsakenEntity.ANIMATION_SUMMON);
        this.animator.startKeyframe(0);
        this.animator.move(this.root, 0.0F, -70.0F, 0.0F);
        this.animator.rotate(this.root, (float) Math.toRadians(-180.0), 0.0F, 0.0F);
        this.animator.rotate(this.neck, (float) Math.toRadians(65.0), 0.0F, 0.0F);
        this.animator.rotate(this.skull, (float) Math.toRadians(35.0), 0.0F, 0.0F);
        this.animator.rotate(this.tail, (float) Math.toRadians(-25.0), 0.0F, 0.0F);
        this.animator.rotate(this.tail2, (float) Math.toRadians(-25.0), 0.0F, 0.0F);
        this.animator.rotate(this.larm, (float) Math.toRadians(-25.0), (float) Math.toRadians(-35.0), 0.0F);
        this.animator.rotate(this.lforeArm, (float) Math.toRadians(-25.0), 0.0F, 0.0F);
        this.animator.rotate(this.lhand, (float) Math.toRadians(125.0), 0.0F, 0.0F);
        this.animator.rotate(this.rarm, (float) Math.toRadians(-25.0), (float) Math.toRadians(35.0), 0.0F);
        this.animator.rotate(this.rforeArm, (float) Math.toRadians(-25.0), 0.0F, 0.0F);
        this.animator.rotate(this.rhand, (float) Math.toRadians(125.0), 0.0F, 0.0F);
        this.animator.rotate(this.rthigh, (float) Math.toRadians(-65.0), (float) Math.toRadians(15.0), (float) Math.toRadians(-15.0));
        this.animator.rotate(this.rcalf, (float) Math.toRadians(25.0), 0.0F, 0.0F);
        this.animator.rotate(this.rfoot, (float) Math.toRadians(95.0), 0.0F, 0.0F);
        this.animator.rotate(this.lthigh, (float) Math.toRadians(-65.0), (float) Math.toRadians(-15.0), (float) Math.toRadians(15.0));
        this.animator.rotate(this.lcalf, (float) Math.toRadians(25.0), 0.0F, 0.0F);
        this.animator.rotate(this.lfoot, (float) Math.toRadians(95.0), 0.0F, 0.0F);
        this.animator.rotate(this.rupperArm, (float) Math.toRadians(20.0), 0.0F, 0.0F);
        this.animator.rotate(this.rupperForeArm, (float) Math.toRadians(-40.0), 0.0F, 0.0F);
        this.animator.rotate(this.rupperHand, (float) Math.toRadians(20.0), (float) Math.toRadians(10.0), (float) Math.toRadians(-30.0));
        this.animator.rotate(this.lupperArm, (float) Math.toRadians(20.0), 0.0F, 0.0F);
        this.animator.rotate(this.lupperForeArm, (float) Math.toRadians(-40.0), 0.0F, 0.0F);
        this.animator.rotate(this.lupperHand, (float) Math.toRadians(20.0), (float) Math.toRadians(-10.0), (float) Math.toRadians(30.0));
        this.animator.endKeyframe();
        this.animator.setStaticKeyframe(10);
        this.animator.resetKeyframe(40);
    }
}