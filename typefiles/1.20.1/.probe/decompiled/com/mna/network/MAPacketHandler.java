package com.mna.network;

import com.mna.ManaAndArtifice;
import com.mna.network.handlers.ClientMessageHandler;
import com.mna.network.handlers.ServerMessageHandler;
import com.mna.network.messages.to_client.AuraSyncMessageToClient;
import com.mna.network.messages.to_client.CantripCastingTimerMessage;
import com.mna.network.messages.to_client.ClientboundPlayerFocusDistanceMessage;
import com.mna.network.messages.to_client.CloudstepJumpMessage;
import com.mna.network.messages.to_client.EnderDiscGuiDimensionCycle;
import com.mna.network.messages.to_client.EntityStateMessage;
import com.mna.network.messages.to_client.ExtendedSlotContainerContentsMessage;
import com.mna.network.messages.to_client.ExtendedSlotContentsMessage;
import com.mna.network.messages.to_client.MAPFXMessage;
import com.mna.network.messages.to_client.MagicSyncMessageToClient;
import com.mna.network.messages.to_client.MindVisionMessage;
import com.mna.network.messages.to_client.PosessionMessage;
import com.mna.network.messages.to_client.ProgressionSyncMessageToClient;
import com.mna.network.messages.to_client.RespondLootTableItems;
import com.mna.network.messages.to_client.RoteProgressSyncMessageToClient;
import com.mna.network.messages.to_client.SetIcarianDataMessage;
import com.mna.network.messages.to_client.SetLiftPositionMessage;
import com.mna.network.messages.to_client.SetLiftSpeedMessage;
import com.mna.network.messages.to_client.SetRitualCollectedReagentsMessage;
import com.mna.network.messages.to_client.ShowDidYouKnow;
import com.mna.network.messages.to_client.SpawnParticleEffectMessage;
import com.mna.network.messages.to_client.SpawnParticleMessage;
import com.mna.network.messages.to_client.StructureSyncMessage;
import com.mna.network.messages.to_client.WanderingWizardInventoryMessage;
import com.mna.network.messages.to_client.WellspringPowerNetworkSyncMessage;
import com.mna.network.messages.to_client.WellspringSyncMessage;
import com.mna.network.messages.to_server.AnimatedConstructDropItemMessage;
import com.mna.network.messages.to_server.AnimatedConstructSyncRequestMessage;
import com.mna.network.messages.to_server.AuraSyncMessageToServer;
import com.mna.network.messages.to_server.CantripPatternUpdateMessage;
import com.mna.network.messages.to_server.ConstructHornMessage;
import com.mna.network.messages.to_server.EndControlEffectEarlyMessage;
import com.mna.network.messages.to_server.EnderDiscIndexSetMessage;
import com.mna.network.messages.to_server.EnderDiscPatternSetMessage;
import com.mna.network.messages.to_server.InscriptionTableAttributeChangeMessage;
import com.mna.network.messages.to_server.InscriptionTableCraftingUpdateMessage;
import com.mna.network.messages.to_server.InscriptionTableRequestStartCraftingMessage;
import com.mna.network.messages.to_server.InscriptionTableSetComponentMessage;
import com.mna.network.messages.to_server.InscriptionTableSetModifierMessage;
import com.mna.network.messages.to_server.InscriptionTableSetShapeMessage;
import com.mna.network.messages.to_server.LodestarLogicSetMessage;
import com.mna.network.messages.to_server.MAPFXSyncRequestMessage;
import com.mna.network.messages.to_server.MagiciansWorkbenchClearMessage;
import com.mna.network.messages.to_server.MagiciansWorkbenchRecipeSetMessage;
import com.mna.network.messages.to_server.ManaweavePatternDrawnMessage;
import com.mna.network.messages.to_server.ManaweaveWandSlotChangeMessage;
import com.mna.network.messages.to_server.MultiblockSyncRequestMessage;
import com.mna.network.messages.to_server.OpenSpellRenameMessage;
import com.mna.network.messages.to_server.PatterningPrismPasteMessage;
import com.mna.network.messages.to_server.PlayerBounceMessage;
import com.mna.network.messages.to_server.PlayerFocusDistanceMessage;
import com.mna.network.messages.to_server.PlayerJumpMessage;
import com.mna.network.messages.to_server.PossessionInputMessage;
import com.mna.network.messages.to_server.RadialInventorySlotChangeMessage;
import com.mna.network.messages.to_server.RequestLootTableItems;
import com.mna.network.messages.to_server.RequestWellspringPowerNetworkSyncMessage;
import com.mna.network.messages.to_server.RitualKitIndexSetMessage;
import com.mna.network.messages.to_server.RoteSpellsSyncMessageToServer;
import com.mna.network.messages.to_server.RunescribingTableMutexChangeMessage;
import com.mna.network.messages.to_server.SelectedModifierMessage;
import com.mna.network.messages.to_server.SpellAdjustmentsMessage;
import com.mna.network.messages.to_server.SpellBookSlotChangeMessage;
import com.mna.network.messages.to_server.SpellNameAndIconMessage;
import com.mna.network.messages.to_server.TradeSelectedMessage;
import com.mna.network.messages.to_server.UIModifierPress;
import com.mna.network.messages.to_server.WizardLabSelectSpellComponentMessage;
import net.minecraft.resources.ResourceLocation;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber.Bus;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.network.NetworkRegistry;
import net.minecraftforge.network.simple.SimpleChannel;

@EventBusSubscriber(modid = "mna", bus = Bus.MOD)
public class MAPacketHandler {

    static final String PROTOCOL_VERSION = "1";

    static final SimpleChannel network = NetworkRegistry.newSimpleChannel(new ResourceLocation("mna", "main"), () -> "1", "1"::equals, "1"::equals);

    @SubscribeEvent
    public static void setup(FMLCommonSetupEvent event) {
        int packet_id = 1;
        network.registerMessage(packet_id++, MagicSyncMessageToClient.class, MagicSyncMessageToClient::encode, MagicSyncMessageToClient::decode, ClientMessageHandler::handleMagicSyncMessage);
        network.registerMessage(packet_id++, InscriptionTableCraftingUpdateMessage.class, InscriptionTableCraftingUpdateMessage::encode, InscriptionTableCraftingUpdateMessage::decode, ClientMessageHandler::handleInscriptionTableCraftingUpdate);
        network.registerMessage(packet_id++, SpawnParticleMessage.class, SpawnParticleMessage::encode, SpawnParticleMessage::decode, ClientMessageHandler::handleSpawnParticleMessage);
        network.registerMessage(packet_id++, ProgressionSyncMessageToClient.class, ProgressionSyncMessageToClient::encode, ProgressionSyncMessageToClient::decode, ClientMessageHandler::handleProgressionSyncMessage);
        network.registerMessage(packet_id++, SetLiftPositionMessage.class, SetLiftPositionMessage::encode, SetLiftPositionMessage::decode, ClientMessageHandler::handleSetLiftPositionMessage);
        network.registerMessage(packet_id++, EntityStateMessage.class, EntityStateMessage::encode, EntityStateMessage::decode, ClientMessageHandler::handleEntityStateMessage);
        network.registerMessage(packet_id++, RoteProgressSyncMessageToClient.class, RoteProgressSyncMessageToClient::encode, RoteProgressSyncMessageToClient::decode, ClientMessageHandler::handleRoteSyncMessage);
        network.registerMessage(packet_id++, SetRitualCollectedReagentsMessage.class, SetRitualCollectedReagentsMessage::encode, SetRitualCollectedReagentsMessage::decode, ClientMessageHandler::handleSetRitualReagentData);
        network.registerMessage(packet_id++, CantripCastingTimerMessage.class, CantripCastingTimerMessage::encode, CantripCastingTimerMessage::decode, ClientMessageHandler::handleCantripCastingTimerMessage);
        network.registerMessage(packet_id++, WanderingWizardInventoryMessage.class, WanderingWizardInventoryMessage::encode, WanderingWizardInventoryMessage::decode, ClientMessageHandler::handleWanderingWizardInventoryMessage);
        network.registerMessage(packet_id++, WellspringSyncMessage.class, WellspringSyncMessage::encode, WellspringSyncMessage::decode, ClientMessageHandler::handleWellspringSyncMessage);
        network.registerMessage(packet_id++, WellspringPowerNetworkSyncMessage.class, WellspringPowerNetworkSyncMessage::encode, WellspringPowerNetworkSyncMessage::decode, ClientMessageHandler::handleWellspringPowerNetworkSyncMessage);
        network.registerMessage(packet_id++, MindVisionMessage.class, MindVisionMessage::encode, MindVisionMessage::decode, ClientMessageHandler::handleMindVisionMessage);
        network.registerMessage(packet_id++, PosessionMessage.class, PosessionMessage::encode, PosessionMessage::decode, ClientMessageHandler::handlePosessionMessage);
        network.registerMessage(packet_id++, MAPFXMessage.class, MAPFXMessage::encode, MAPFXMessage::decode, ClientMessageHandler::handleMAPFXMessage);
        network.registerMessage(packet_id++, StructureSyncMessage.class, StructureSyncMessage::encode, StructureSyncMessage::decode, ClientMessageHandler::handleStructureSyncMessage);
        network.registerMessage(packet_id++, SpawnParticleEffectMessage.class, SpawnParticleEffectMessage::encode, SpawnParticleEffectMessage::decode, ClientMessageHandler::handleSpawnParticleEffectMessage);
        network.registerMessage(packet_id++, ExtendedSlotContentsMessage.class, ExtendedSlotContentsMessage::encode, ExtendedSlotContentsMessage::decode, ClientMessageHandler::handleExtendedSlotContentsMessage);
        network.registerMessage(packet_id++, ExtendedSlotContainerContentsMessage.class, ExtendedSlotContainerContentsMessage::encode, ExtendedSlotContainerContentsMessage::decode, ClientMessageHandler::handleExtendedSlotContainerContentsMessage);
        network.registerMessage(packet_id++, AuraSyncMessageToClient.class, AuraSyncMessageToClient::encode, AuraSyncMessageToClient::decode, ClientMessageHandler::handlePlayerAuraSyncMessage);
        network.registerMessage(packet_id++, CloudstepJumpMessage.class, CloudstepJumpMessage::encode, CloudstepJumpMessage::decode, ClientMessageHandler::handleCloudstepJumpMessage);
        network.registerMessage(packet_id++, ClientboundPlayerFocusDistanceMessage.class, ClientboundPlayerFocusDistanceMessage::encode, ClientboundPlayerFocusDistanceMessage::decode, ClientMessageHandler::handleClientboundPlayerFocusDistanceMessage);
        network.registerMessage(packet_id++, SetLiftSpeedMessage.class, SetLiftSpeedMessage::encode, SetLiftSpeedMessage::decode, ClientMessageHandler::handleSetLiftSpeedMessage);
        network.registerMessage(packet_id++, ShowDidYouKnow.class, ShowDidYouKnow::encode, ShowDidYouKnow::decode, ClientMessageHandler::handleShowDidYouKnow);
        network.registerMessage(packet_id++, SetIcarianDataMessage.class, SetIcarianDataMessage::encode, SetIcarianDataMessage::decode, ClientMessageHandler::handleSetIcarianDataMessage);
        network.registerMessage(packet_id++, EnderDiscGuiDimensionCycle.class, EnderDiscGuiDimensionCycle::encode, EnderDiscGuiDimensionCycle::decode, ClientMessageHandler::handleEnderDiscGuiDimensionCycle);
        network.registerMessage(packet_id++, RespondLootTableItems.class, RespondLootTableItems::encode, RespondLootTableItems::decode, ClientMessageHandler::handleRespondLootTableItems);
        network.registerMessage(packet_id++, InscriptionTableRequestStartCraftingMessage.class, InscriptionTableRequestStartCraftingMessage::encode, InscriptionTableRequestStartCraftingMessage::decode, ServerMessageHandler::handleInscriptionTableStartCrafting);
        network.registerMessage(packet_id++, InscriptionTableSetComponentMessage.class, InscriptionTableSetComponentMessage::encode, InscriptionTableSetComponentMessage::decode, ServerMessageHandler::handleInscriptionTableComponentSet);
        network.registerMessage(packet_id++, InscriptionTableSetModifierMessage.class, InscriptionTableSetModifierMessage::encode, InscriptionTableSetModifierMessage::decode, ServerMessageHandler::handleInscriptionTableModifierSet);
        network.registerMessage(packet_id++, InscriptionTableSetShapeMessage.class, InscriptionTableSetShapeMessage::encode, InscriptionTableSetShapeMessage::decode, ServerMessageHandler::handleInscriptionTableShapeSet);
        network.registerMessage(packet_id++, InscriptionTableAttributeChangeMessage.class, InscriptionTableAttributeChangeMessage::encode, InscriptionTableAttributeChangeMessage::decode, ServerMessageHandler::handleInscriptionTableAttributeChange);
        network.registerMessage(packet_id++, ManaweavePatternDrawnMessage.class, ManaweavePatternDrawnMessage::encode, ManaweavePatternDrawnMessage::decode, ServerMessageHandler::handleManaweavePatternDrawnMessage);
        network.registerMessage(packet_id++, RunescribingTableMutexChangeMessage.class, RunescribingTableMutexChangeMessage::encode, RunescribingTableMutexChangeMessage::decode, ServerMessageHandler::handleRunescribingTableMutexChangeMessage);
        network.registerMessage(packet_id++, SpellBookSlotChangeMessage.class, SpellBookSlotChangeMessage::encode, SpellBookSlotChangeMessage::decode, ServerMessageHandler::handleSpellBookSlotChangeMessage);
        network.registerMessage(packet_id++, RadialInventorySlotChangeMessage.class, RadialInventorySlotChangeMessage::encode, RadialInventorySlotChangeMessage::decode, ServerMessageHandler::handleRadialInventorySlotChangeMessage);
        network.registerMessage(packet_id++, ManaweaveWandSlotChangeMessage.class, ManaweaveWandSlotChangeMessage::encode, ManaweaveWandSlotChangeMessage::decode, ServerMessageHandler::handleManaweaveWandSlotChangeMessage);
        network.registerMessage(packet_id++, EnderDiscPatternSetMessage.class, EnderDiscPatternSetMessage::encode, EnderDiscPatternSetMessage::decode, ServerMessageHandler::handleEnderDiscPatternSetMessage);
        network.registerMessage(packet_id++, EnderDiscIndexSetMessage.class, EnderDiscIndexSetMessage::encode, EnderDiscIndexSetMessage::decode, ServerMessageHandler::handleEnderDiscIndexSetMessage);
        network.registerMessage(packet_id++, RitualKitIndexSetMessage.class, RitualKitIndexSetMessage::encode, RitualKitIndexSetMessage::decode, ServerMessageHandler::handleRitualKitIndexSetMessage);
        network.registerMessage(packet_id++, SpellNameAndIconMessage.class, SpellNameAndIconMessage::encode, SpellNameAndIconMessage::decode, ServerMessageHandler::handleSpellNameAndIconMessage);
        network.registerMessage(packet_id++, AnimatedConstructSyncRequestMessage.class, AnimatedConstructSyncRequestMessage::encode, AnimatedConstructSyncRequestMessage::decode, ServerMessageHandler::handleAnimatedConstructSyncRequestMessage);
        network.registerMessage(packet_id++, RoteSpellsSyncMessageToServer.class, RoteSpellsSyncMessageToServer::encode, RoteSpellsSyncMessageToServer::decode, ServerMessageHandler::handleRoteSpellsSyncMessageToServer);
        network.registerMessage(packet_id++, PlayerBounceMessage.class, PlayerBounceMessage::encode, PlayerBounceMessage::decode, ServerMessageHandler::handlePlayerBounceMessage);
        network.registerMessage(packet_id++, PlayerJumpMessage.class, PlayerJumpMessage::encode, PlayerJumpMessage::decode, ServerMessageHandler::handlePlayerJumpMessage);
        network.registerMessage(packet_id++, CantripPatternUpdateMessage.class, CantripPatternUpdateMessage::encode, CantripPatternUpdateMessage::decode, ServerMessageHandler::handleCantripPatternUpdateMessage);
        network.registerMessage(packet_id++, UIModifierPress.class, UIModifierPress::encode, UIModifierPress::decode, ServerMessageHandler::handleUIModifierPress);
        network.registerMessage(packet_id++, SpellAdjustmentsMessage.class, SpellAdjustmentsMessage::encode, SpellAdjustmentsMessage::decode, ServerMessageHandler::handleSpellAdjustmentsMessage);
        network.registerMessage(packet_id++, OpenSpellRenameMessage.class, OpenSpellRenameMessage::encode, OpenSpellRenameMessage::decode, ServerMessageHandler::handleOpenSpellRenameMessage);
        network.registerMessage(packet_id++, SelectedModifierMessage.class, SelectedModifierMessage::encode, SelectedModifierMessage::decode, ServerMessageHandler::handleSelectedModifierMessage);
        network.registerMessage(packet_id++, ConstructHornMessage.class, ConstructHornMessage::encode, ConstructHornMessage::decode, ServerMessageHandler::handleConstructHornMessage);
        network.registerMessage(packet_id++, TradeSelectedMessage.class, TradeSelectedMessage::encode, TradeSelectedMessage::decode, ServerMessageHandler::handleTradeSelectedMessage);
        network.registerMessage(packet_id++, MAPFXSyncRequestMessage.class, MAPFXSyncRequestMessage::encode, MAPFXSyncRequestMessage::decode, ServerMessageHandler::handleMAPFXSyncRequestMessage);
        network.registerMessage(packet_id++, PossessionInputMessage.class, PossessionInputMessage::encode, PossessionInputMessage::decode, ServerMessageHandler::handlePossessionInputMessage);
        network.registerMessage(packet_id++, EndControlEffectEarlyMessage.class, EndControlEffectEarlyMessage::encode, EndControlEffectEarlyMessage::decode, ServerMessageHandler::handleEndControlEffectEarlyMessage);
        network.registerMessage(packet_id++, MultiblockSyncRequestMessage.class, MultiblockSyncRequestMessage::encode, MultiblockSyncRequestMessage::decode, ServerMessageHandler::handleMultiblockSyncRequestMessage);
        network.registerMessage(packet_id++, RequestWellspringPowerNetworkSyncMessage.class, RequestWellspringPowerNetworkSyncMessage::encode, RequestWellspringPowerNetworkSyncMessage::decode, ServerMessageHandler::handleRequestWellspringPowerNetworkSyncMessage);
        network.registerMessage(packet_id++, MagiciansWorkbenchRecipeSetMessage.class, MagiciansWorkbenchRecipeSetMessage::encode, MagiciansWorkbenchRecipeSetMessage::decode, ServerMessageHandler::handleMagiciansWorkbenchRecipeSetMessage);
        network.registerMessage(packet_id++, MagiciansWorkbenchClearMessage.class, MagiciansWorkbenchClearMessage::encode, MagiciansWorkbenchClearMessage::decode, ServerMessageHandler::handleMagiciansWorkbenchClearMessage);
        network.registerMessage(packet_id++, LodestarLogicSetMessage.class, LodestarLogicSetMessage::encode, LodestarLogicSetMessage::decode, ServerMessageHandler::handleLodestarLogicSetMessage);
        network.registerMessage(packet_id++, AuraSyncMessageToServer.class, AuraSyncMessageToServer::encode, AuraSyncMessageToServer::decode, ServerMessageHandler::handleAuraSyncMessage);
        network.registerMessage(packet_id++, WizardLabSelectSpellComponentMessage.class, WizardLabSelectSpellComponentMessage::encode, WizardLabSelectSpellComponentMessage::decode, ServerMessageHandler::handleWizardLabSelectSpellComponentMessage);
        network.registerMessage(packet_id++, AnimatedConstructDropItemMessage.class, AnimatedConstructDropItemMessage::encode, AnimatedConstructDropItemMessage::decode, ServerMessageHandler::handleAnimatedConstructDropItemMessage);
        network.registerMessage(packet_id++, PlayerFocusDistanceMessage.class, PlayerFocusDistanceMessage::encode, PlayerFocusDistanceMessage::decode, ServerMessageHandler::handlePlayerFocusDistanceMessage);
        network.registerMessage(packet_id++, RequestLootTableItems.class, RequestLootTableItems::encode, RequestLootTableItems::decode, ServerMessageHandler::handleRequestLootTableItems);
        network.registerMessage(packet_id++, PatterningPrismPasteMessage.class, PatterningPrismPasteMessage::encode, PatterningPrismPasteMessage::decode, ServerMessageHandler::handlePatterningPrismPasteMessage);
        ManaAndArtifice.LOGGER.info("M&A -> Network Messages Registered");
    }
}