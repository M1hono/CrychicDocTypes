package io.github.apace100.origins.mixin;

import io.github.apace100.origins.Origins;
import io.github.edwinmindcraft.calio.common.CalioConfig;
import io.github.edwinmindcraft.origins.api.OriginsAPI;
import io.github.edwinmindcraft.origins.api.capabilities.IOriginContainer;
import io.github.edwinmindcraft.origins.api.origin.OriginLayer;
import java.util.stream.Collectors;
import net.minecraft.core.Holder;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.tags.DamageTypeTags;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.player.Player;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

@Mixin({ Entity.class })
public abstract class SelectionInvulnerabilityMixin {

    @Inject(at = { @At("HEAD") }, method = { "isInvulnerableTo" }, cancellable = true)
    private void makeOriginInvulnerable(DamageSource damageSource, CallbackInfoReturnable<Boolean> cir) {
        if (!damageSource.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
            Entity entity = (Entity) this;
            IOriginContainer.get(entity).ifPresent(container -> {
                if (!container.hasAllOrigins()) {
                    cir.setReturnValue(true);
                    if (CalioConfig.COMMON.logging.get()) {
                        String s = (String) OriginsAPI.getActiveLayers().stream().filter(x -> !container.hasOrigin(x) && !((OriginLayer) x.value()).empty((Player) entity)).map(layer -> "\"%s\" (Eligible: %s)".formatted(layer.key(), ((OriginLayer) layer.value()).origins((Player) entity).stream().map(Holder::m_203543_).flatMap(x -> x.stream().map(ResourceKey::m_135782_).map(ResourceLocation::toString)).collect(Collectors.joining(",")))).collect(Collectors.joining(","));
                        Origins.LOGGER.info("Player {} took damage while missing origins for layers: {0}", s);
                    }
                }
            });
        }
    }
}