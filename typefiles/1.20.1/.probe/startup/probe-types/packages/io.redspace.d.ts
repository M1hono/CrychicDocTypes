declare module "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ShieldEntity, $ShieldEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$Vec2, $Vec2$Type} from "packages/net/minecraft/world/phys/$Vec2"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ShieldModel, $ShieldModel$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldModel"

export class $ShieldRenderer extends $EntityRenderer<($ShieldEntity)> implements $RenderLayerParent<($ShieldEntity), ($ShieldModel)> {
static "SPECTRAL_OVERLAY_TEXTURE": $ResourceLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $ShieldEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getModel"(): $ShieldModel
public static "getEnergySwirlOffset"(arg0: $ShieldEntity$Type, arg1: float): $Vec2
public static "getEnergySwirlOffset"(arg0: $ShieldEntity$Type, arg1: float, arg2: integer): $Vec2
public "getTextureLocation"(arg0: $ShieldEntity$Type): $ResourceLocation
get "model"(): $ShieldModel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShieldRenderer$Type = ($ShieldRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShieldRenderer_ = $ShieldRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/attribute/$MagicRangedAttribute" {
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$IMagicAttribute, $IMagicAttribute$Type} from "packages/io/redspace/ironsspellbooks/api/attribute/$IMagicAttribute"
import {$RangedAttribute, $RangedAttribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$RangedAttribute"
import {$AttributeModifier$Operation, $AttributeModifier$Operation$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier$Operation"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $MagicRangedAttribute extends $RangedAttribute implements $IMagicAttribute {
static readonly "MAX_NAME_LENGTH": integer

constructor(arg0: string, arg1: double, arg2: double, arg3: double)

public static "isNullOrAddition"(arg0: $AttributeModifier$Operation$Type): boolean
public static "toValueComponent"(arg0: $Attribute$Type, arg1: $AttributeModifier$Operation$Type, arg2: double, arg3: $TooltipFlag$Type): $MutableComponent
public static "toComponent"(arg0: $Attribute$Type, arg1: $AttributeModifier$Type, arg2: $TooltipFlag$Type): $MutableComponent
public static "toBaseComponent"(arg0: $Attribute$Type, arg1: double, arg2: double, arg3: boolean, arg4: $TooltipFlag$Type): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicRangedAttribute$Type = ($MagicRangedAttribute);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicRangedAttribute_ = $MagicRangedAttribute$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$AlchemistCauldronRecipeMaker" {
import {$AlchemistCauldronJeiRecipe, $AlchemistCauldronJeiRecipe$Type} from "packages/io/redspace/ironsspellbooks/jei/$AlchemistCauldronJeiRecipe"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IVanillaRecipeFactory, $IVanillaRecipeFactory$Type} from "packages/mezz/jei/api/recipe/vanilla/$IVanillaRecipeFactory"
import {$IIngredientManager, $IIngredientManager$Type} from "packages/mezz/jei/api/runtime/$IIngredientManager"

export class $AlchemistCauldronRecipeMaker {


public static "getRecipes"(arg0: $IVanillaRecipeFactory$Type, arg1: $IIngredientManager$Type): $List<($AlchemistCauldronJeiRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistCauldronRecipeMaker$Type = ($AlchemistCauldronRecipeMaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistCauldronRecipeMaker_ = $AlchemistCauldronRecipeMaker$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AbstractMagicProjectile extends $Projectile implements $AntiMagicSusceptible {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getExplosionRadius"(): float
public "handleHitDetection"(): void
public "onAntiMagic"(arg0: $MagicData$Type): void
public "setExplosionRadius"(arg0: float): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "shoot"(arg0: $Vec3$Type): void
public "shouldBeSaved"(): boolean
public "getSpeed"(): float
public "tick"(): void
public "isOnFire"(): boolean
public "travel"(): void
public "setDamage"(arg0: float): void
public "getDamage"(): float
public "checkDespawn"(): void
get "explosionRadius"(): float
set "explosionRadius"(value: float)
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
get "onFire"(): boolean
set "damage"(value: float)
get "damage"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractMagicProjectile$Type = ($AbstractMagicProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractMagicProjectile_ = $AbstractMagicProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundTeleportParticles" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundTeleportParticles {

constructor(arg0: $Vec3$Type, arg1: $Vec3$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundTeleportParticles$Type = ($ClientboundTeleportParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundTeleportParticles_ = $ClientboundTeleportParticles$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$SpiderAspectEffect" {
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $SpiderAspectEffect extends $MagicMobEffect {
static readonly "DAMAGE_PER_LEVEL": float

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpiderAspectEffect$Type = ($SpiderAspectEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpiderAspectEffect_ = $SpiderAspectEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/comet/$Comet" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $Comet extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "shoot"(arg0: $Vec3$Type, arg1: float): void
public "getSpeed"(): float
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Comet$Type = ($Comet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Comet_ = $Comet$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/events/$SpellDamageEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$LivingEvent, $LivingEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SpellDamageEvent extends $LivingEvent {

constructor(arg0: $LivingEntity$Type, arg1: float, arg2: $SpellDamageSource$Type)
constructor()

public "getOriginalAmount"(): float
public "isCancelable"(): boolean
public "getSpellDamageSource"(): $SpellDamageSource
public "setAmount"(arg0: float): void
public "getAmount"(): float
public "getListenerList"(): $ListenerList
get "originalAmount"(): float
get "cancelable"(): boolean
get "spellDamageSource"(): $SpellDamageSource
set "amount"(value: float)
get "amount"(): float
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellDamageEvent$Type = ($SpellDamageEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellDamageEvent_ = $SpellDamageEvent$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalRenderer" {
import {$PortalEntity, $PortalEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalEntity"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Matrix3f, $Matrix3f$Type} from "packages/org/joml/$Matrix3f"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PortalRenderer extends $EntityRenderer<($PortalEntity)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $PortalEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "getTextureLocation"(): $ResourceLocation
public "getTextureLocation"(arg0: $PortalEntity$Type): $ResourceLocation
public static "vertex"(arg0: $Matrix4f$Type, arg1: $Matrix3f$Type, arg2: $VertexConsumer$Type, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float): void
get "textureLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortalRenderer$Type = ($PortalRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortalRenderer_ = $PortalRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$SpiderAspectSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SpiderAspectSpell extends $AbstractSpell {

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpiderAspectSpell$Type = ($SpiderAspectSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpiderAspectSpell_ = $SpiderAspectSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$EchoingStrikesSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $EchoingStrikesSpell extends $AbstractSpell {

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EchoingStrikesSpell$Type = ($EchoingStrikesSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EchoingStrikesSpell_ = $EchoingStrikesSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$OwnerGetter" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $OwnerGetter {

 "get"(): $LivingEntity

(): $LivingEntity
}

export namespace $OwnerGetter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnerGetter$Type = ($OwnerGetter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnerGetter_ = $OwnerGetter$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/necromancer/$NecromancerEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Enemy, $Enemy$Type} from "packages/net/minecraft/world/entity/monster/$Enemy"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $NecromancerEntity extends $AbstractSpellCastingMob implements $Enemy {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public static "prepareAttributes"(): $AttributeSupplier$Builder
public "getMobType"(): $MobType
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "mobType"(): $MobType
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NecromancerEntity$Type = ($NecromancerEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NecromancerEntity_ = $NecromancerEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$RayOfSiphoningSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RayOfSiphoningSpell extends $AbstractSpell {

constructor()

public static "getRange"(arg0: integer): float
public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RayOfSiphoningSpell$Type = ($RayOfSiphoningSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RayOfSiphoningSpell_ = $RayOfSiphoningSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$SpellRenderingHelper" {
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$SyncedSpellData, $SyncedSpellData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$SyncedSpellData"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SpellRenderingHelper {
static readonly "SOLID": $ResourceLocation
static readonly "BEACON": $ResourceLocation
static readonly "STRAIGHT_GLOW": $ResourceLocation
static readonly "TWISTING_GLOW": $ResourceLocation

constructor()

public static "renderRayOfSiphoning"(arg0: $LivingEntity$Type, arg1: $PoseStack$Type, arg2: $MultiBufferSource$Type, arg3: float): void
public static "renderSpellHelper"(arg0: $SyncedSpellData$Type, arg1: $LivingEntity$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellRenderingHelper$Type = ($SpellRenderingHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellRenderingHelper_ = $SpellRenderingHelper$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$AngelWingsEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AngelWingsEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AngelWingsEffect$Type = ($AngelWingsEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AngelWingsEffect_ = $AngelWingsEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/$TargetedTargetAreaCastData" {
import {$TargetEntityCastData, $TargetEntityCastData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$TargetEntityCastData"
import {$TargetedAreaEntity, $TargetedAreaEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/target_area/$TargetedAreaEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TargetedTargetAreaCastData extends $TargetEntityCastData {

constructor(arg0: $LivingEntity$Type, arg1: $TargetedAreaEntity$Type)

public "reset"(): void
public "getAreaEntity"(): $TargetedAreaEntity
get "areaEntity"(): $TargetedAreaEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetedTargetAreaCastData$Type = ($TargetedTargetAreaCastData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetedTargetAreaCastData_ = $TargetedTargetAreaCastData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundRegenCloudParticles" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundRegenCloudParticles {

constructor(arg0: $Vec3$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundRegenCloudParticles$Type = ($ClientboundRegenCloudParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundRegenCloudParticles_ = $ClientboundRegenCloudParticles$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ServerboundCancelCast" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ServerboundCancelCast {

constructor(arg0: boolean)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public static "cancelCast"(arg0: $ServerPlayer$Type, arg1: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerboundCancelCast$Type = ($ServerboundCancelCast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerboundCancelCast_ = $ServerboundCancelCast$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$ActiveSpellOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $ActiveSpellOverlay implements $IGuiOverlay {
static "instance": $ActiveSpellOverlay
static readonly "TEXTURE": $ResourceLocation

constructor()

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActiveSpellOverlay$Type = ($ActiveSpellOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActiveSpellOverlay_ = $ActiveSpellOverlay$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingMusicManager" {
import {$DeadKingBoss, $DeadKingBoss$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingBoss"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"

export class $DeadKingMusicManager {


public static "stop"(arg0: $DeadKingBoss$Type): void
public static "clientTick"(arg0: $TickEvent$ClientTickEvent$Type): void
public static "createOrResumeInstance"(arg0: $DeadKingBoss$Type): void
public static "hardStop"(): void
public "triggerResume"(arg0: $DeadKingBoss$Type): void
public "stopLayers"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingMusicManager$Type = ($DeadKingMusicManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingMusicManager_ = $DeadKingMusicManager$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$IMinecraftInstanceHelper" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export interface $IMinecraftInstanceHelper {

 "player"(): $Player

(): $Player
}

export namespace $IMinecraftInstanceHelper {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMinecraftInstanceHelper$Type = ($IMinecraftInstanceHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMinecraftInstanceHelper_ = $IMinecraftInstanceHelper$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$GustSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $GustSpell extends $AbstractSpell {

constructor()

public "getRange"(arg0: integer, arg1: $LivingEntity$Type): float
public "getCastFinishAnimation"(): $AnimationHolder
public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getCastStartAnimation"(): $AnimationHolder
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getStrength"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GustSpell$Type = ($GustSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GustSpell_ = $GustSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/setup/$ClientSetup" {
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$EntityRenderersEvent$AddLayers, $EntityRenderersEvent$AddLayers$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$AddLayers"
import {$EntityRenderersEvent$RegisterRenderers, $EntityRenderersEvent$RegisterRenderers$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$RegisterRenderers"
import {$ModelEvent$RegisterAdditional, $ModelEvent$RegisterAdditional$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$RegisterAdditional"
import {$EntityRenderersEvent$RegisterLayerDefinitions, $EntityRenderersEvent$RegisterLayerDefinitions$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$RegisterLayerDefinitions"
import {$RegisterParticleProvidersEvent, $RegisterParticleProvidersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterParticleProvidersEvent"
import {$ModelEvent$ModifyBakingResult, $ModelEvent$ModifyBakingResult$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$ModifyBakingResult"

export class $ClientSetup {

constructor()

public static "clientSetup"(arg0: $FMLClientSetupEvent$Type): void
public static "registerParticles"(arg0: $RegisterParticleProvidersEvent$Type): void
public static "rendererRegister"(arg0: $EntityRenderersEvent$RegisterRenderers$Type): void
public static "replaceRenderers"(arg0: $EntityRenderersEvent$RegisterRenderers$Type): void
public static "replaceItemModels"(arg0: $ModelEvent$ModifyBakingResult$Type): void
public static "registerRenderers"(arg0: $EntityRenderersEvent$AddLayers$Type): void
public static "onRegisterLayers"(arg0: $EntityRenderersEvent$RegisterLayerDefinitions$Type): void
public static "registerSpecialModels"(arg0: $ModelEvent$RegisterAdditional$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientSetup$Type = ($ClientSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientSetup_ = $ClientSetup$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$MagicEvents" {
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$RegisterCapabilitiesEvent, $RegisterCapabilitiesEvent$Type} from "packages/net/minecraftforge/common/capabilities/$RegisterCapabilitiesEvent"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TickEvent$LevelTickEvent, $TickEvent$LevelTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$LevelTickEvent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MagicEvents {
static readonly "PLAYER_MAGIC_RESOURCE": $ResourceLocation

constructor()

public static "onWorldTick"(arg0: $TickEvent$LevelTickEvent$Type): void
public static "onAttachCapabilitiesPlayer"(arg0: $AttachCapabilitiesEvent$Type<($Entity$Type)>): void
public static "onRegisterCapabilities"(arg0: $RegisterCapabilitiesEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicEvents$Type = ($MagicEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicEvents_ = $MagicEvents$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/priest/$PriestRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"

export class $PriestRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PriestRenderer$Type = ($PriestRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PriestRenderer_ = $PriestRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/config/$ClientConfigs" {
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$RecastOverlay$Anchor, $RecastOverlay$Anchor$Type} from "packages/io/redspace/ironsspellbooks/gui/overlays/$RecastOverlay$Anchor"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$ForgeConfigSpec$Builder, $ForgeConfigSpec$Builder$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$Builder"
import {$ManaBarOverlay$Anchor, $ManaBarOverlay$Anchor$Type} from "packages/io/redspace/ironsspellbooks/gui/overlays/$ManaBarOverlay$Anchor"
import {$ManaBarOverlay$Display, $ManaBarOverlay$Display$Type} from "packages/io/redspace/ironsspellbooks/gui/overlays/$ManaBarOverlay$Display"
import {$SpellBarOverlay$Anchor, $SpellBarOverlay$Anchor$Type} from "packages/io/redspace/ironsspellbooks/gui/overlays/$SpellBarOverlay$Anchor"

export class $ClientConfigs {
static readonly "BUILDER": $ForgeConfigSpec$Builder
static readonly "SHOW_FIRST_PERSON_ARMS": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "SHOW_FIRST_PERSON_ITEMS": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "REPLACE_GHAST_FIREBALL": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "REPLACE_BLAZE_FIREBALL": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "MANA_BAR_Y_OFFSET": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "MANA_BAR_X_OFFSET": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "MANA_TEXT_X_OFFSET": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "MANA_TEXT_Y_OFFSET": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "MANA_BAR_TEXT_VISIBLE": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "ENABLE_BOSS_MUSIC": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "MANA_BAR_ANCHOR": $ForgeConfigSpec$ConfigValue<($ManaBarOverlay$Anchor)>
static readonly "MANA_BAR_DISPLAY": $ForgeConfigSpec$ConfigValue<($ManaBarOverlay$Display)>
static readonly "SPELL_BAR_DISPLAY": $ForgeConfigSpec$ConfigValue<($ManaBarOverlay$Display)>
static readonly "SPELL_BAR_Y_OFFSET": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "SPELL_BAR_X_OFFSET": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "SPELL_BAR_ANCHOR": $ForgeConfigSpec$ConfigValue<($SpellBarOverlay$Anchor)>
static readonly "RECAST_ANCHOR": $ForgeConfigSpec$ConfigValue<($RecastOverlay$Anchor)>
static readonly "RECAST_Y_OFFSET": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "RECAST_X_OFFSET": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "SPEC": $ForgeConfigSpec

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigs$Type = ($ClientConfigs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigs_ = $ClientConfigs$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/tetra/$TetraDummyImpl" {
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$ITetraProxy, $ITetraProxy$Type} from "packages/io/redspace/ironsspellbooks/compat/tetra/$ITetraProxy"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $TetraDummyImpl implements $ITetraProxy {

constructor()

public "initClient"(): void
public "canImbue"(arg0: $ItemStack$Type): boolean
public "handleLivingAttackEvent"(arg0: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TetraDummyImpl$Type = ($TetraDummyImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TetraDummyImpl_ = $TetraDummyImpl$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/$IMerchantWizard" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Merchant, $Merchant$Type} from "packages/net/minecraft/world/item/trading/$Merchant"
import {$MerchantOffers, $MerchantOffers$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffers"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IMerchantWizard extends $Merchant {

 "getRestocksToday"(): integer
 "isTrading"(): boolean
 "shouldRestock"(): boolean
 "setRestocksToday"(arg0: integer): void
 "needsToRestock"(): boolean
 "allowedToRestock"(): boolean
 "serializeMerchant"(arg0: $CompoundTag$Type, arg1: $MerchantOffers$Type, arg2: long, arg3: integer): void
 "restock"(): void
 "m_9236_"(): $Level
 "showProgressBar"(): boolean
 "isClientSide"(): boolean
 "overrideXp"(arg0: integer): void
 "getLastRestockGameTime"(): long
 "setLastRestockGameTime"(arg0: long): void
 "setLastRestockCheckDayTime"(arg0: long): void
 "getLastRestockCheckDayTime"(): long
 "deserializeMerchant"(arg0: $CompoundTag$Type, arg1: $Consumer$Type<($MerchantOffers$Type)>): void
 "getVillagerXp"(): integer
 "getTradingPlayer"(): $Player
 "canRestock"(): boolean
 "setTradingPlayer"(arg0: $Player$Type): void
 "openTradingScreen"(arg0: $Player$Type, arg1: $Component$Type, arg2: integer): void
 "overrideOffers"(arg0: $MerchantOffers$Type): void
 "notifyTrade"(arg0: $MerchantOffer$Type): void
 "notifyTradeUpdated"(arg0: $ItemStack$Type): void
 "getNotifyTradeSound"(): $SoundEvent
 "getOffers"(): $MerchantOffers
}

export namespace $IMerchantWizard {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMerchantWizard$Type = ($IMerchantWizard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMerchantWizard_ = $IMerchantWizard$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$RootSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $RootSpell extends $AbstractSpell {

constructor()

public "getDuration"(arg0: integer, arg1: $LivingEntity$Type): integer
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RootSpell$Type = ($RootSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RootSpell_ = $RootSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$ClientSpellTargetingData" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ClientSpellTargetingData {
 "targetUUIDs": $ArrayList<($UUID)>
 "spellId": string

constructor(arg0: string, arg1: $List$Type<($UUID$Type)>)
constructor(arg0: string, ...arg1: ($UUID$Type)[])
constructor()

public "toString"(): string
public "isTargeted"(arg0: $UUID$Type): boolean
public "isTargeted"(arg0: $LivingEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientSpellTargetingData$Type = ($ClientSpellTargetingData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientSpellTargetingData_ = $ClientSpellTargetingData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundCastErrorMessage" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ClientboundCastErrorMessage$ErrorType, $ClientboundCastErrorMessage$ErrorType$Type} from "packages/io/redspace/ironsspellbooks/network/$ClientboundCastErrorMessage$ErrorType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundCastErrorMessage {
readonly "errorType": $ClientboundCastErrorMessage$ErrorType
readonly "spellId": string

constructor(arg0: $ClientboundCastErrorMessage$ErrorType$Type, arg1: $AbstractSpell$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundCastErrorMessage$Type = ($ClientboundCastErrorMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundCastErrorMessage_ = $ClientboundCastErrorMessage$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/util/$Utils" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Vec2, $Vec2$Type} from "packages/net/minecraft/world/phys/$Vec2"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$ClipContext$Fluid, $ClipContext$Fluid$Type} from "packages/net/minecraft/world/level/$ClipContext$Fluid"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"

export class $Utils {
static readonly "random": $RandomSource

constructor()

public static "getTargetBlock"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $ClipContext$Fluid$Type, arg3: double): $BlockHitResult
public static "getRandomScaled"(arg0: double): double
public static "raycastForBlock"(arg0: $Level$Type, arg1: $Vec3$Type, arg2: $Vec3$Type, arg3: $ClipContext$Fluid$Type): $BlockHitResult
public static "getRandomVec3"(arg0: double): $Vec3
public static "getWeaponDamage"(arg0: $LivingEntity$Type, arg1: $MobType$Type): float
public static "packRGB"(arg0: $Vector3f$Type): integer
public static "shouldHealEntity"(arg0: $LivingEntity$Type, arg1: $LivingEntity$Type): boolean
public static "raycastForEntity"(arg0: $Level$Type, arg1: $Entity$Type, arg2: float, arg3: boolean): $HitResult
public static "raycastForEntity"(arg0: $Level$Type, arg1: $Entity$Type, arg2: float, arg3: boolean, arg4: float): $HitResult
public static "raycastForEntity"(arg0: $Level$Type, arg1: $Entity$Type, arg2: $Vec3$Type, arg3: $Vec3$Type, arg4: boolean): $HitResult
public static "raycastForEntity"(arg0: $Level$Type, arg1: $Entity$Type, arg2: $Vec3$Type, arg3: $Vec3$Type, arg4: boolean, arg5: float, arg6: $Predicate$Type<(any)>): $HitResult
public static "timeFromTicks"(arg0: float, arg1: integer): string
public static "getServerPlayer"(arg0: $Level$Type, arg1: $UUID$Type): $ServerPlayer
public static "deconstructRGB"(arg0: integer): $Vector3f
public static "serverSideInitiateCast"(arg0: $ServerPlayer$Type): boolean
public static "serverSideInitiateQuickCast"(arg0: $ServerPlayer$Type, arg1: integer): boolean
public static "getStackTraceAsString"(): string
public static "findRelativeGroundLevel"(arg0: $Level$Type, arg1: $Vec3$Type, arg2: integer): float
public static "isPlayerHoldingSpellBook"(arg0: $Player$Type): boolean
public static "sendTargetedNotification"(arg0: $ServerPlayer$Type, arg1: $LivingEntity$Type, arg2: $AbstractSpell$Type): void
public static "doMeleeAttack"(arg0: $Mob$Type, arg1: $Entity$Type, arg2: $DamageSource$Type): boolean
public static "smoothstep"(arg0: float, arg1: float, arg2: float): float
public static "intPow"(arg0: float, arg1: integer): float
public static "intPow"(arg0: double, arg1: integer): double
public static "checkEntityIntersecting"(arg0: $Entity$Type, arg1: $Vec3$Type, arg2: $Vec3$Type, arg3: float): $HitResult
public static "releaseUsingHelper"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: integer): void
public static "setPlayerSpellbookStack"(arg0: $Player$Type, arg1: $ItemStack$Type): void
public static "getAngle"(arg0: double, arg1: double, arg2: double, arg3: double): float
public static "getAngle"(arg0: $Vec2$Type, arg1: $Vec2$Type): float
public static "getPositionFromEntityLookDirection"(arg0: $Entity$Type, arg1: float): $Vec3
public static "serverSideCancelCast"(arg0: $ServerPlayer$Type): void
public static "serverSideCancelCast"(arg0: $ServerPlayer$Type, arg1: boolean): void
public static "validAntiMagicTarget"(arg0: $Entity$Type): boolean
public static "rotationFromDirection"(arg0: $Vec3$Type): $Vec2
public static "raycastForEntityOfClass"(arg0: $Level$Type, arg1: $Entity$Type, arg2: $Vec3$Type, arg3: $Vec3$Type, arg4: boolean, arg5: $Class$Type<(any)>): $HitResult
public static "loadAllItems"(arg0: $CompoundTag$Type, arg1: $NonNullList$Type<($ItemStack$Type)>, arg2: string): void
public static "saveAllItems"(arg0: $CompoundTag$Type, arg1: $NonNullList$Type<($ItemStack$Type)>, arg2: string): $CompoundTag
public static "softCapFormula"(arg0: double): double
public static "stringTruncation"(arg0: double, arg1: integer): string
public static "getRandomVec3f"(arg0: double): $Vector3f
public static "throwTarget"(arg0: $LivingEntity$Type, arg1: $LivingEntity$Type, arg2: float, arg3: boolean): void
public static "getServerTick"(): long
public static "spawnInWorld"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $ItemStack$Type): void
public static "getTargetOld"(arg0: $Level$Type, arg1: $Player$Type, arg2: $ClipContext$Fluid$Type, arg3: double): $BlockHitResult
public static "getPlayerSpellbookStack"(arg0: $Player$Type): $ItemStack
public static "handleShriving"(arg0: $ItemStack$Type): $ItemStack
public static "canBeUpgraded"(arg0: $ItemStack$Type): boolean
public static "canImbue"(arg0: $ItemStack$Type): boolean
public static "moveToRelativeGroundLevel"(arg0: $Level$Type, arg1: $Vec3$Type, arg2: integer, arg3: integer): $Vec3
public static "moveToRelativeGroundLevel"(arg0: $Level$Type, arg1: $Vec3$Type, arg2: integer): $Vec3
public static "preCastTargetHelper"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $MagicData$Type, arg3: $AbstractSpell$Type, arg4: integer, arg5: float, arg6: boolean, arg7: $Predicate$Type<($LivingEntity$Type)>): boolean
public static "preCastTargetHelper"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $MagicData$Type, arg3: $AbstractSpell$Type, arg4: integer, arg5: float, arg6: boolean): boolean
public static "preCastTargetHelper"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $MagicData$Type, arg3: $AbstractSpell$Type, arg4: integer, arg5: float): boolean
public static "createTremorBlock"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: float): void
public static "hasLineOfSight"(arg0: $Level$Type, arg1: $Vec3$Type, arg2: $Vec3$Type, arg3: boolean): boolean
public static "hasLineOfSight"(arg0: $Level$Type, arg1: $Entity$Type, arg2: $Entity$Type, arg3: boolean): boolean
public static "checkMonsterSpawnRules"(arg0: $ServerLevelAccessor$Type, arg1: $MobSpawnType$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): boolean
get "stackTraceAsString"(): string
get "serverTick"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Utils$Type = ($Utils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Utils_ = $Utils$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$ICastData" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ICastData {

 "reset"(): void

(): void
}

export namespace $ICastData {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICastData$Type = ($ICastData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICastData_ = $ICastData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingAnimatedWarlockAttackGoal" {
import {$WarlockAttackGoal, $WarlockAttackGoal$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WarlockAttackGoal"
import {$DeadKingBoss, $DeadKingBoss$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingBoss"
import {$DeadKingBoss$AttackType, $DeadKingBoss$AttackType$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingBoss$AttackType"

export class $DeadKingAnimatedWarlockAttackGoal extends $WarlockAttackGoal {
 "currentAttack": $DeadKingBoss$AttackType
 "nextAttack": $DeadKingBoss$AttackType
 "queueCombo": $DeadKingBoss$AttackType

constructor(arg0: $DeadKingBoss$Type, arg1: double, arg2: integer, arg3: integer, arg4: float)

public "playSwingSound"(): void
public "canContinueToUse"(): boolean
public "stop"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingAnimatedWarlockAttackGoal$Type = ($DeadKingAnimatedWarlockAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingAnimatedWarlockAttackGoal_ = $DeadKingAnimatedWarlockAttackGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/item/curios/$AffinityData" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $AffinityData {
static readonly "ISB_ENHANCE": string
static readonly "NONE": $AffinityData


public "getNameForItem"(): string
public static "setAffinityData"(arg0: $ItemStack$Type, arg1: $AbstractSpell$Type): void
public static "getAffinityData"(arg0: $ItemStack$Type): $AffinityData
public static "hasAffinityData"(arg0: $ItemStack$Type): boolean
public "getSpell"(): $AbstractSpell
get "nameForItem"(): string
get "spell"(): $AbstractSpell
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AffinityData$Type = ($AffinityData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AffinityData_ = $AffinityData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/dragon_breath/$DragonBreathProjectile" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$AbstractConeProjectile, $AbstractConeProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractConeProjectile"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DragonBreathProjectile extends $AbstractConeProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "spawnParticles"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DragonBreathProjectile$Type = ($DragonBreathProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DragonBreathProjectile_ = $DragonBreathProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/necromancer/$NecromancerModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"

export class $NecromancerModel extends $AbstractSpellCastingMobModel {

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getModelResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NecromancerModel$Type = ($NecromancerModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NecromancerModel_ = $NecromancerModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$SpinAttackType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SpinAttackType extends $Enum<($SpinAttackType)> {
static readonly "FIRE": $SpinAttackType
static readonly "RIPTIDE": $SpinAttackType


public static "values"(): ($SpinAttackType)[]
public static "valueOf"(arg0: string): $SpinAttackType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpinAttackType$Type = (("fire") | ("riptide")) | ($SpinAttackType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpinAttackType_ = $SpinAttackType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$FireballSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $FireballSpell extends $AbstractSpell {

constructor()

public "getRadius"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireballSpell$Type = ($FireballSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireballSpell_ = $FireballSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$EchoingStrikeEntity" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EchoingStrikeEntity extends $AoeEntity {
readonly "waitTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: float, arg3: float)

public "ambientParticles"(): void
public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EchoingStrikeEntity$Type = ($EchoingStrikeEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EchoingStrikeEntity_ = $EchoingStrikeEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$PlaceholderDamageType" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PlaceholderDamageType {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaceholderDamageType$Type = ($PlaceholderDamageType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaceholderDamageType_ = $PlaceholderDamageType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WizardSupportGoal" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$SupportMob, $SupportMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SupportMob"

export class $WizardSupportGoal<T extends ($PathfinderMob) & ($SupportMob) & ($IMagicEntity)> extends $Goal {

constructor(arg0: T, arg1: double, arg2: integer)
constructor(arg0: T, arg1: double, arg2: integer, arg3: integer)

public "setSpellQuality"(arg0: float, arg1: float): $WizardSupportGoal<(T)>
public "setSpells"(arg0: $List$Type<($AbstractSpell$Type)>, arg1: $List$Type<($AbstractSpell$Type)>): $WizardSupportGoal<(T)>
public "setIsFlying"(): $WizardSupportGoal<(T)>
public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WizardSupportGoal$Type<T> = ($WizardSupportGoal<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WizardSupportGoal_<T> = $WizardSupportGoal$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect" {
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $MagicMobEffect extends $MobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicMobEffect$Type = ($MagicMobEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicMobEffect_ = $MagicMobEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$AcidBubbleParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $AcidBubbleParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AcidBubbleParticle$Type = ($AcidBubbleParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AcidBubbleParticle_ = $AcidBubbleParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$AcupunctureSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AcupunctureSpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AcupunctureSpell$Type = ($AcupunctureSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AcupunctureSpell_ = $AcupunctureSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/poison_breath/$PoisonBreathProjectile" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$AbstractConeProjectile, $AbstractConeProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractConeProjectile"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PoisonBreathProjectile extends $AbstractConeProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "spawnParticles"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonBreathProjectile$Type = ($PoisonBreathProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonBreathProjectile_ = $PoisonBreathProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$AbstractVec3Packet" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $AbstractVec3Packet {

constructor(arg0: $Vec3$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractVec3Packet$Type = ($AbstractVec3Packet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractVec3Packet_ = $AbstractVec3Packet$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractConeProjectile" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$NoKnockbackProjectile, $NoKnockbackProjectile$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$NoKnockbackProjectile"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AbstractConeProjectile extends $Projectile implements $NoKnockbackProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type, arg2: $LivingEntity$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "spawnParticles"(): void
public "tick"(): void
public "isOnFire"(): boolean
public "setId"(arg0: integer): void
public "setDamage"(arg0: float): void
public "setDealDamageActive"(): void
public "isMultipartEntity"(): boolean
public "getParts"(): ($PartEntity<(any)>)[]
get "onFire"(): boolean
set "id"(value: integer)
set "damage"(value: float)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractConeProjectile$Type = ($AbstractConeProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractConeProjectile_ = $AbstractConeProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$PlaguedArmorItem" {
import {$ImbuableChestplateArmorItem, $ImbuableChestplateArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $PlaguedArmorItem extends $ImbuableChestplateArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaguedArmorItem$Type = ($PlaguedArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaguedArmorItem_ = $PlaguedArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$SpellAnimations" {
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SpellAnimations {
static "ANIMATION_RESOURCE": $ResourceLocation
static readonly "ANIMATION_INSTANT_CAST": $AnimationHolder
static readonly "ANIMATION_CONTINUOUS_CAST": $AnimationHolder
static readonly "ANIMATION_CHARGED_CAST": $AnimationHolder
static readonly "ANIMATION_LONG_CAST": $AnimationHolder
static readonly "ANIMATION_LONG_CAST_FINISH": $AnimationHolder
static readonly "ANIMATION_CONTINUOUS_OVERHEAD": $AnimationHolder
static readonly "SLASH_ANIMATION": $AnimationHolder
static readonly "BOW_CHARGE_ANIMATION": $AnimationHolder
static readonly "CHARGE_WAVY_ANIMATION": $AnimationHolder
static readonly "SELF_CAST_ANIMATION": $AnimationHolder
static readonly "CHARGE_SPIT_ANIMATION": $AnimationHolder
static readonly "SPIT_FINISH_ANIMATION": $AnimationHolder
static readonly "CHARGE_ANIMATION": $AnimationHolder
static readonly "FINISH_ANIMATION": $AnimationHolder
static readonly "OVERHEAD_MELEE_SWING_ANIMATION": $AnimationHolder
static readonly "TOUCH_GROUND_ANIMATION": $AnimationHolder
static readonly "ONE_HANDED_HORIZONTAL_SWING_ANIMATION": $AnimationHolder
static readonly "CHARGE_RAISED_HAND": $AnimationHolder
static readonly "STOMP": $AnimationHolder
static readonly "PREPARE_CROSS_ARMS": $AnimationHolder
static readonly "CAST_T_POSE": $AnimationHolder

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellAnimations$Type = ($SpellAnimations);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellAnimations_ = $SpellAnimations$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$LightningStrike" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $LightningStrike extends $AoeEntity {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
public "tick"(): void
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightningStrike$Type = ($LightningStrike);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightningStrike_ = $LightningStrike$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$SpellSelection" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ISerializable, $ISerializable$Type} from "packages/io/redspace/ironsspellbooks/api/network/$ISerializable"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$INBTSerializable, $INBTSerializable$Type} from "packages/net/minecraftforge/common/util/$INBTSerializable"

export class $SpellSelection implements $ISerializable, $INBTSerializable<($CompoundTag)> {
 "equipmentSlot": string
 "index": integer
 "lastEquipmentSlot": string
 "lastIndex": integer

constructor(arg0: string, arg1: integer, arg2: string, arg3: integer)
constructor(arg0: string, arg1: integer)
constructor()

public "toString"(): string
public "isEmpty"(): boolean
public "makeSelection"(arg0: string, arg1: integer): void
public "readFromBuffer"(arg0: $FriendlyByteBuf$Type): void
public "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
public "deserializeNBT"(arg0: $CompoundTag$Type): void
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellSelection$Type = ($SpellSelection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellSelection_ = $SpellSelection$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$ItemPropertiesHelper" {
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"

export class $ItemPropertiesHelper {

constructor()

public static "hidden"(): $Item$Properties
public static "hidden"(arg0: integer): $Item$Properties
public static "equipment"(): $Item$Properties
public static "equipment"(arg0: integer): $Item$Properties
public static "material"(arg0: integer): $Item$Properties
public static "material"(): $Item$Properties
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemPropertiesHelper$Type = ($ItemPropertiesHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemPropertiesHelper_ = $ItemPropertiesHelper$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/fireball/$FireballRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FireballRenderer extends $EntityRenderer<($Projectile)> {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: float)

public "render"(arg0: $Projectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "createBodyLayer"(): $LayerDefinition
public "getTextureLocation"(arg0: $Projectile$Type): $ResourceLocation
public "getFireTextureLocation"(arg0: $Projectile$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireballRenderer$Type = ($FireballRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireballRenderer_ = $FireballRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$PoisonBreathSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $PoisonBreathSpell extends $AbstractSpell {

constructor()

public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonBreathSpell$Type = ($PoisonBreathSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonBreathSpell_ = $PoisonBreathSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/keeper/$GeoKeeperGhostLayer" {
import {$GeoEntityRenderer, $GeoEntityRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoEntityRenderer"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$GeoRenderLayer, $GeoRenderLayer$Type} from "packages/software/bernie/geckolib/renderer/layer/$GeoRenderLayer"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $GeoKeeperGhostLayer extends $GeoRenderLayer<($AbstractSpellCastingMob)> {

constructor(arg0: $GeoEntityRenderer$Type<(any)>)

public "render"(arg0: $PoseStack$Type, arg1: $AbstractSpellCastingMob$Type, arg2: $BakedGeoModel$Type, arg3: $RenderType$Type, arg4: $MultiBufferSource$Type, arg5: $VertexConsumer$Type, arg6: float, arg7: integer, arg8: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeoKeeperGhostLayer$Type = ($GeoKeeperGhostLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeoKeeperGhostLayer_ = $GeoKeeperGhostLayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$TargetEntityCastData" {
import {$ICastData, $ICastData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastData"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TargetEntityCastData implements $ICastData {

constructor(arg0: $LivingEntity$Type)

public "getTarget"(arg0: $ServerLevel$Type): $LivingEntity
public "reset"(): void
public "getTargetPosition"(arg0: $ServerLevel$Type): $Vec3
public "getTargetUUID"(): $UUID
get "targetUUID"(): $UUID
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetEntityCastData$Type = ($TargetEntityCastData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetEntityCastData_ = $TargetEntityCastData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$EvasionSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $EvasionSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvasionSpell$Type = ($EvasionSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvasionSpell_ = $EvasionSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$GenericCustomArmorRenderer" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$GeoItem, $GeoItem$Type} from "packages/software/bernie/geckolib/animatable/$GeoItem"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GeoBone, $GeoBone$Type} from "packages/software/bernie/geckolib/cache/object/$GeoBone"

export class $GenericCustomArmorRenderer<T extends ($Item) & ($GeoItem)> extends $GeoArmorRenderer<(T)> {
 "leggingTorsoLayerBone": $GeoBone
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $GeoModel$Type<(T)>)

public "setAllVisible"(arg0: boolean): void
public "getTextureLocation"(arg0: T): $ResourceLocation
public "scaleModelForBaby"(arg0: $PoseStack$Type, arg1: T, arg2: float, arg3: boolean): void
public "getLeggingTorsoLayerBone"(): $GeoBone
public "applyBoneVisibilityByPart"(arg0: $EquipmentSlot$Type, arg1: $ModelPart$Type, arg2: $HumanoidModel$Type<(any)>): void
set "allVisible"(value: boolean)
get "leggingTorsoLayerBone"(): $GeoBone
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericCustomArmorRenderer$Type<T> = ($GenericCustomArmorRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericCustomArmorRenderer_<T> = $GenericCustomArmorRenderer$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$IPresetSpellContainer" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IPresetSpellContainer {

 "initializeSpellContainer"(arg0: $ItemStack$Type): void

(arg0: $ItemStack$Type): void
}

export namespace $IPresetSpellContainer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPresetSpellContainer$Type = ($IPresetSpellContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPresetSpellContainer_ = $IPresetSpellContainer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/setup/$CommonSetup" {
import {$SpawnPlacementRegisterEvent, $SpawnPlacementRegisterEvent$Type} from "packages/net/minecraftforge/event/entity/$SpawnPlacementRegisterEvent"
import {$ModConfigEvent$Reloading, $ModConfigEvent$Reloading$Type} from "packages/net/minecraftforge/fml/event/config/$ModConfigEvent$Reloading"
import {$EntityAttributeCreationEvent, $EntityAttributeCreationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeCreationEvent"
import {$ModConfigEvent$Loading, $ModConfigEvent$Loading$Type} from "packages/net/minecraftforge/fml/event/config/$ModConfigEvent$Loading"

export class $CommonSetup {

constructor()

public static "onAttributeCreate"(arg0: $EntityAttributeCreationEvent$Type): void
public static "spawnPlacements"(arg0: $SpawnPlacementRegisterEvent$Type): void
public static "onModConfigReloadingEvent"(arg0: $ModConfigEvent$Reloading$Type): void
public static "onModConfigLoadingEvent"(arg0: $ModConfigEvent$Loading$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonSetup$Type = ($CommonSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonSetup_ = $CommonSetup$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/registry/$SchoolRegistryHolder" {
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $SchoolRegistryHolder {

constructor(arg0: $RegistryObject$Type<($SchoolType$Type)>)

public "get"(): $SchoolType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SchoolRegistryHolder$Type = ($SchoolRegistryHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SchoolRegistryHolder_ = $SchoolRegistryHolder$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/debug_wizard/$DebugWizardRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"

export class $DebugWizardRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugWizardRenderer$Type = ($DebugWizardRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugWizardRenderer_ = $DebugWizardRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/firefly_swarm/$FireflySwarmProjectile" {
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FireflySwarmProjectile extends $PathfinderMob implements $AntiMagicSusceptible {
static readonly "radius": float
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $Entity$Type, arg2: $Entity$Type, arg3: float)

public "setTarget"(arg0: $Entity$Type): void
public "getOwner"(): $Entity
public "setOwner"(arg0: $Entity$Type): void
public "getFireflyTarget"(): $Entity
public "onAntiMagic"(arg0: $MagicData$Type): void
public "isPickable"(): boolean
public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "getTarget"(): $LivingEntity
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "target"(value: $Entity$Type)
get "owner"(): $Entity
set "owner"(value: $Entity$Type)
get "fireflyTarget"(): $Entity
get "pickable"(): boolean
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireflySwarmProjectile$Type = ($FireflySwarmProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireflySwarmProjectile_ = $FireflySwarmProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedSkeleton" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MagicSummon, $MagicSummon$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$MagicSummon"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Skeleton, $Skeleton$Type} from "packages/net/minecraft/world/entity/monster/$Skeleton"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SummonTimer, $SummonTimer$Type} from "packages/io/redspace/ironsspellbooks/effect/$SummonTimer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SummonedSkeleton extends $Skeleton implements $MagicSummon, $GeoAnimatable {
static readonly "CONVERSION_TAG": string
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: boolean)

public "setSummoner"(arg0: $LivingEntity$Type): void
public "isAnimatingRise"(): boolean
public "onUnSummon"(): void
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "tick"(): void
public "die"(arg0: $DamageSource$Type): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "isOnSameTeam"(arg0: $Entity$Type): boolean
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "isPushable"(): boolean
public "isPreventingPlayerRest"(arg0: $Player$Type): boolean
public "m_8099_"(): void
public "getTick"(arg0: any): double
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "getSummoner"(): $LivingEntity
public "onRemovedFromWorld"(): void
public "triggerRiseAnimation"(): void
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "onAntiMagic"(arg0: $MagicData$Type): void
public "onDeathHelper"(): void
public "isAlliedHelper"(arg0: $Entity$Type): boolean
public "shouldIgnoreDamage"(arg0: $DamageSource$Type): boolean
public "onRemovedHelper"(arg0: $Entity$Type, arg1: $SummonTimer$Type): void
public "getBoneResetTime"(): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "summoner"(value: $LivingEntity$Type)
get "animatingRise"(): boolean
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "pushable"(): boolean
get "summoner"(): $LivingEntity
get "boneResetTime"(): double
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonedSkeleton$Type = ($SummonedSkeleton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonedSkeleton_ = $SummonedSkeleton$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ice/$RayOfFrostSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $RayOfFrostSpell extends $AbstractSpell {

constructor()

public static "getRange"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RayOfFrostSpell$Type = ($RayOfFrostSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RayOfFrostSpell_ = $RayOfFrostSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/poison_arrow/$PoisonArrow" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PoisonArrow extends $AbstractMagicProjectile {
 "shakeTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "setAoeDamage"(arg0: float): void
public "getAoeDamage"(): float
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
public "tick"(): void
public "createPoisonCloud"(arg0: $Vec3$Type): void
set "aoeDamage"(value: float)
get "aoeDamage"(): float
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonArrow$Type = ($PoisonArrow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonArrow_ = $PoisonArrow$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$AcquireTargetNearLocationGoal" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$TargetGoal, $TargetGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/target/$TargetGoal"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AcquireTargetNearLocationGoal<T extends $LivingEntity> extends $TargetGoal {
readonly "mob": $Mob
readonly "mustSee": boolean
readonly "mustReach": boolean

constructor(arg0: $Mob$Type, arg1: $Class$Type<(T)>, arg2: integer, arg3: boolean, arg4: boolean, arg5: $Vec3$Type, arg6: $Predicate$Type<($LivingEntity$Type)>)

public "setTarget"(arg0: $LivingEntity$Type): void
public "canUse"(): boolean
public "start"(): void
set "target"(value: $LivingEntity$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AcquireTargetNearLocationGoal$Type<T> = ($AcquireTargetNearLocationGoal<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AcquireTargetNearLocationGoal_<T> = $AcquireTargetNearLocationGoal$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/fixers/$FixSpellbookSlots" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataFixerElement, $DataFixerElement$Type} from "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement"

export class $FixSpellbookSlots extends $DataFixerElement {

constructor()

public "runFixer"(arg0: $CompoundTag$Type): boolean
public "preScanValuesToMatch"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FixSpellbookSlots$Type = ($FixSpellbookSlots);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FixSpellbookSlots_ = $FixSpellbookSlots$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/$BloodCauldronBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$CauldronInteraction, $CauldronInteraction$Type} from "packages/net/minecraft/core/cauldron/$CauldronInteraction"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LayeredCauldronBlock, $LayeredCauldronBlock$Type} from "packages/net/minecraft/world/level/block/$LayeredCauldronBlock"
import {$Biome$Precipitation, $Biome$Precipitation$Type} from "packages/net/minecraft/world/level/biome/$Biome$Precipitation"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$BloodCauldronBlock$CookExecution, $BloodCauldronBlock$CookExecution$Type} from "packages/io/redspace/ironsspellbooks/block/$BloodCauldronBlock$CookExecution"

export class $BloodCauldronBlock extends $LayeredCauldronBlock {
static readonly "NO_WEATHER": $Predicate<($Biome$Precipitation)>
static readonly "MIN_FILL_LEVEL": integer
static readonly "MAX_FILL_LEVEL": integer
static readonly "LEVEL": $IntegerProperty
static readonly "RAIN": $Predicate<($Biome$Precipitation)>
static readonly "SNOW": $Predicate<($Biome$Precipitation)>
readonly "interactions": $Map<($Item), ($CauldronInteraction)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "entityInside"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): void
public static "attemptCookEntity"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Entity$Type, arg4: $BloodCauldronBlock$CookExecution$Type): void
public static "getInteractionMap"(): $Map<($Item), ($CauldronInteraction)>
get "interactionMap"(): $Map<($Item), ($CauldronInteraction)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodCauldronBlock$Type = ($BloodCauldronBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodCauldronBlock_ = $BloodCauldronBlock$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$HealingCircleSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $HealingCircleSpell extends $AbstractSpell {

constructor()

public "getTargetingColor"(): $Vector3f
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "targetingColor"(): $Vector3f
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HealingCircleSpell$Type = ($HealingCircleSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HealingCircleSpell_ = $HealingCircleSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$TelekinesisData" {
import {$TargetEntityCastData, $TargetEntityCastData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$TargetEntityCastData"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TelekinesisData extends $TargetEntityCastData {

constructor(arg0: float, arg1: $LivingEntity$Type, arg2: integer)

public "getDistance"(): float
public "setDistance"(arg0: float): void
get "distance"(): float
set "distance"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TelekinesisData$Type = ($TelekinesisData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TelekinesisData_ = $TelekinesisData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ice/$FrostwaveSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $FrostwaveSpell extends $AbstractSpell {

constructor()

public "getDuration"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getRadius"(arg0: integer, arg1: $LivingEntity$Type): float
public "getCastFinishAnimation"(): $AnimationHolder
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrostwaveSpell$Type = ($FrostwaveSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrostwaveSpell_ = $FrostwaveSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/target_area/$TargetedAreaEntity" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ClientboundAddEntityPacket, $ClientboundAddEntityPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundAddEntityPacket"
import {$FluidType, $FluidType$Type} from "packages/net/minecraftforge/fluids/$FluidType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $TargetedAreaEntity extends $Entity {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: float, arg2: integer)
constructor(arg0: $EntityType$Type<($TargetedAreaEntity$Type)>, arg1: $Level$Type)

public "getOwner"(): $Entity
public "setOwner"(arg0: $Entity$Type): void
public "setColor"(arg0: integer): void
public "getColorRaw"(): integer
public "getRadius"(): float
public "setRadius"(arg0: float): void
public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "tick"(): void
public "isOnFire"(): boolean
public "onSyncedDataUpdated"(arg0: $EntityDataAccessor$Type<(any)>): void
public "recreateFromPacket"(arg0: $ClientboundAddEntityPacket$Type): void
public static "createTargetAreaEntity"(arg0: $Level$Type, arg1: $Vec3$Type, arg2: float, arg3: integer): $TargetedAreaEntity
public static "createTargetAreaEntity"(arg0: $Level$Type, arg1: $Vec3$Type, arg2: float, arg3: integer, arg4: $Entity$Type): $TargetedAreaEntity
public "getColor"(): $Vector3f
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "setDuration"(arg0: integer): void
public "refreshDimensions"(): void
public "isPushedByFluid"(arg0: $FluidType$Type): boolean
get "owner"(): $Entity
set "owner"(value: $Entity$Type)
set "color"(value: integer)
get "colorRaw"(): integer
get "radius"(): float
set "radius"(value: float)
get "onFire"(): boolean
get "color"(): $Vector3f
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
set "duration"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetedAreaEntity$Type = ($TargetedAreaEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetedAreaEntity_ = $TargetedAreaEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$BlightEffect" {
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$LivingHealEvent, $LivingHealEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHealEvent"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $BlightEffect extends $MagicMobEffect {
static readonly "DAMAGE_PER_LEVEL": float
static readonly "HEALING_PER_LEVEL": float

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "reduceDamageOutput"(arg0: $LivingDamageEvent$Type): void
public static "reduceHealing"(arg0: $LivingHealEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlightEffect$Type = ($BlightEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlightEffect_ = $BlightEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$BlackHoleSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $BlackHoleSpell extends $AbstractSpell {

constructor()

public "getCastFinishAnimation"(): $AnimationHolder
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "stopSoundOnCancel"(): boolean
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackHoleSpell$Type = ($BlackHoleSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackHoleSpell_ = $BlackHoleSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$ManaBarOverlay$Anchor" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ManaBarOverlay$Anchor extends $Enum<($ManaBarOverlay$Anchor)> {
static readonly "Hunger": $ManaBarOverlay$Anchor
static readonly "XP": $ManaBarOverlay$Anchor
static readonly "Center": $ManaBarOverlay$Anchor
static readonly "TopLeft": $ManaBarOverlay$Anchor
static readonly "TopRight": $ManaBarOverlay$Anchor
static readonly "BottomLeft": $ManaBarOverlay$Anchor
static readonly "BottomRight": $ManaBarOverlay$Anchor


public static "values"(): ($ManaBarOverlay$Anchor)[]
public static "valueOf"(arg0: string): $ManaBarOverlay$Anchor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaBarOverlay$Anchor$Type = (("bottomleft") | ("topleft") | ("topright") | ("center") | ("xp") | ("bottomright") | ("hunger")) | ($ManaBarOverlay$Anchor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaBarOverlay$Anchor_ = $ManaBarOverlay$Anchor$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$EntityRegistry" {
import {$Sunbeam, $Sunbeam$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/sunbeam/$Sunbeam"
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$SummonedSkeleton, $SummonedSkeleton$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedSkeleton"
import {$SmallMagicFireball, $SmallMagicFireball$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/fireball/$SmallMagicFireball"
import {$SummonedVex, $SummonedVex$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedVex"
import {$CryomancerEntity, $CryomancerEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/cryomancer/$CryomancerEntity"
import {$LightningLanceProjectile, $LightningLanceProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/lightning_lance/$LightningLanceProjectile"
import {$EldritchBlastVisualEntity, $EldritchBlastVisualEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/eldritch_blast/$EldritchBlastVisualEntity"
import {$LightningStrike, $LightningStrike$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$LightningStrike"
import {$MagicFireball, $MagicFireball$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/fireball/$MagicFireball"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$DragonBreathProjectile, $DragonBreathProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/dragon_breath/$DragonBreathProjectile"
import {$FlameStrike, $FlameStrike$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/flame_strike/$FlameStrike"
import {$Comet, $Comet$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/comet/$Comet"
import {$IcicleProjectile, $IcicleProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/icicle/$IcicleProjectile"
import {$PoisonCloud, $PoisonCloud$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/poison_cloud/$PoisonCloud"
import {$BlackHole, $BlackHole$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/black_hole/$BlackHole"
import {$RootEntity, $RootEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/root/$RootEntity"
import {$SmallMagicArrow, $SmallMagicArrow$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/small_magic_arrow/$SmallMagicArrow"
import {$PriestEntity, $PriestEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/priest/$PriestEntity"
import {$EchoingStrikeEntity, $EchoingStrikeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$EchoingStrikeEntity"
import {$ArchevokerEntity, $ArchevokerEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/archevoker/$ArchevokerEntity"
import {$DevourJaw, $DevourJaw$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/devour_jaw/$DevourJaw"
import {$DeadKingBoss, $DeadKingBoss$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingBoss"
import {$ConeOfColdProjectile, $ConeOfColdProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/cone_of_cold/$ConeOfColdProjectile"
import {$AcidOrb, $AcidOrb$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/acid_orb/$AcidOrb"
import {$IceBlockProjectile, $IceBlockProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/ice_block/$IceBlockProjectile"
import {$ChainLightning, $ChainLightning$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$ChainLightning"
import {$VisualFallingBlockEntity, $VisualFallingBlockEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/$VisualFallingBlockEntity"
import {$SummonedZombie, $SummonedZombie$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedZombie"
import {$ExtendedWitherSkull, $ExtendedWitherSkull$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$ExtendedWitherSkull"
import {$GustCollider, $GustCollider$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/gust/$GustCollider"
import {$FireBomb, $FireBomb$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/magma_ball/$FireBomb"
import {$KeeperEntity, $KeeperEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/keeper/$KeeperEntity"
import {$DragonBreathPool, $DragonBreathPool$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/dragon_breath/$DragonBreathPool"
import {$PoisonBreathProjectile, $PoisonBreathProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/poison_breath/$PoisonBreathProjectile"
import {$ShieldEntity, $ShieldEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldEntity"
import {$CreeperHeadProjectile, $CreeperHeadProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/creeper_head/$CreeperHeadProjectile"
import {$PoisonSplash, $PoisonSplash$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/poison_cloud/$PoisonSplash"
import {$SpectralHammer, $SpectralHammer$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/spectral_hammer/$SpectralHammer"
import {$DebugWizard, $DebugWizard$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/debug_wizard/$DebugWizard"
import {$HealingAoe, $HealingAoe$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$HealingAoe"
import {$SummonedHorse, $SummonedHorse$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedHorse"
import {$PyromancerEntity, $PyromancerEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/pyromancer/$PyromancerEntity"
import {$GuidingBoltProjectile, $GuidingBoltProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/guiding_bolt/$GuidingBoltProjectile"
import {$BloodSlashProjectile, $BloodSlashProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/blood_slash/$BloodSlashProjectile"
import {$BloodNeedle, $BloodNeedle$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/blood_needle/$BloodNeedle"
import {$RayOfFrostVisualEntity, $RayOfFrostVisualEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/ray_of_frost/$RayOfFrostVisualEntity"
import {$MagicMissileProjectile, $MagicMissileProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/magic_missile/$MagicMissileProjectile"
import {$CatacombsZombie, $CatacombsZombie$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$CatacombsZombie"
import {$VoidTentacle, $VoidTentacle$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/void_tentacle/$VoidTentacle"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$EarthquakeAoe, $EarthquakeAoe$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$EarthquakeAoe"
import {$PoisonArrow, $PoisonArrow$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/poison_arrow/$PoisonArrow"
import {$ApothecaristEntity, $ApothecaristEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/alchemist/$ApothecaristEntity"
import {$WallOfFireEntity, $WallOfFireEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/wall_of_fire/$WallOfFireEntity"
import {$FireflySwarmProjectile, $FireflySwarmProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/firefly_swarm/$FireflySwarmProjectile"
import {$ElectrocuteProjectile, $ElectrocuteProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/electrocute/$ElectrocuteProjectile"
import {$SummonedPolarBear, $SummonedPolarBear$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedPolarBear"
import {$BallLightning, $BallLightning$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/ball_lightning/$BallLightning"
import {$MagicArrowProjectile, $MagicArrowProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/magic_arrow/$MagicArrowProjectile"
import {$PortalEntity, $PortalEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalEntity"
import {$DeadKingCorpseEntity, $DeadKingCorpseEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingCorpseEntity"
import {$TargetedAreaEntity, $TargetedAreaEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/target_area/$TargetedAreaEntity"
import {$ArrowVolleyEntity, $ArrowVolleyEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$ArrowVolleyEntity"
import {$FrozenHumanoid, $FrozenHumanoid$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/frozen_humanoid/$FrozenHumanoid"
import {$FireboltProjectile, $FireboltProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/firebolt/$FireboltProjectile"
import {$StompAoe, $StompAoe$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$StompAoe"
import {$FireField, $FireField$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/magma_ball/$FireField"
import {$NecromancerEntity, $NecromancerEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/necromancer/$NecromancerEntity"
import {$MagehunterVindicator, $MagehunterVindicator$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$MagehunterVindicator"
import {$FireBreathProjectile, $FireBreathProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/fire_breath/$FireBreathProjectile"
import {$CultistEntity, $CultistEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/cultist/$CultistEntity"
import {$WispEntity, $WispEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/wisp/$WispEntity"

export class $EntityRegistry {
static readonly "WISP": $RegistryObject<($EntityType<($WispEntity)>)>
static readonly "SPECTRAL_HAMMER": $RegistryObject<($EntityType<($SpectralHammer)>)>
static readonly "MAGIC_MISSILE_PROJECTILE": $RegistryObject<($EntityType<($MagicMissileProjectile)>)>
static readonly "CONE_OF_COLD_PROJECTILE": $RegistryObject<($EntityType<($ConeOfColdProjectile)>)>
static readonly "BLOOD_SLASH_PROJECTILE": $RegistryObject<($EntityType<($BloodSlashProjectile)>)>
static readonly "ELECTROCUTE_PROJECTILE": $RegistryObject<($EntityType<($ElectrocuteProjectile)>)>
static readonly "FIREBOLT_PROJECTILE": $RegistryObject<($EntityType<($FireboltProjectile)>)>
static readonly "ICICLE_PROJECTILE": $RegistryObject<($EntityType<($IcicleProjectile)>)>
static readonly "FIRE_BREATH_PROJECTILE": $RegistryObject<($EntityType<($FireBreathProjectile)>)>
static readonly "DRAGON_BREATH_PROJECTILE": $RegistryObject<($EntityType<($DragonBreathProjectile)>)>
static readonly "DEBUG_WIZARD": $RegistryObject<($EntityType<($DebugWizard)>)>
static readonly "SPECTRAL_STEED": $RegistryObject<($EntityType<($SummonedHorse)>)>
static readonly "SHIELD_ENTITY": $RegistryObject<($EntityType<($ShieldEntity)>)>
static readonly "WALL_OF_FIRE_ENTITY": $RegistryObject<($EntityType<($WallOfFireEntity)>)>
static readonly "SUMMONED_VEX": $RegistryObject<($EntityType<($SummonedVex)>)>
static readonly "PYROMANCER": $RegistryObject<($EntityType<($PyromancerEntity)>)>
static readonly "CRYOMANCER": $RegistryObject<($EntityType<($CryomancerEntity)>)>
static readonly "LIGHTNING_LANCE_PROJECTILE": $RegistryObject<($EntityType<($LightningLanceProjectile)>)>
static readonly "NECROMANCER": $RegistryObject<($EntityType<($NecromancerEntity)>)>
static readonly "SUMMONED_ZOMBIE": $RegistryObject<($EntityType<($SummonedZombie)>)>
static readonly "SUMMONED_SKELETON": $RegistryObject<($EntityType<($SummonedSkeleton)>)>
static readonly "WITHER_SKULL_PROJECTILE": $RegistryObject<($EntityType<($ExtendedWitherSkull)>)>
static readonly "MAGIC_ARROW_PROJECTILE": $RegistryObject<($EntityType<($MagicArrowProjectile)>)>
static readonly "CREEPER_HEAD_PROJECTILE": $RegistryObject<($EntityType<($CreeperHeadProjectile)>)>
static readonly "FROZEN_HUMANOID": $RegistryObject<($EntityType<($FrozenHumanoid)>)>
static readonly "SMALL_FIREBALL_PROJECTILE": $RegistryObject<($EntityType<($SmallMagicFireball)>)>
static readonly "MAGIC_FIREBALL": $RegistryObject<($EntityType<($MagicFireball)>)>
static readonly "SUMMONED_POLAR_BEAR": $RegistryObject<($EntityType<($SummonedPolarBear)>)>
static readonly "DEAD_KING": $RegistryObject<($EntityType<($DeadKingBoss)>)>
static readonly "DEAD_KING_CORPSE": $RegistryObject<($EntityType<($DeadKingCorpseEntity)>)>
static readonly "CATACOMBS_ZOMBIE": $RegistryObject<($EntityType<($CatacombsZombie)>)>
static readonly "ARCHEVOKER": $RegistryObject<($EntityType<($ArchevokerEntity)>)>
static readonly "MAGEHUNTER_VINDICATOR": $RegistryObject<($EntityType<($MagehunterVindicator)>)>
static readonly "KEEPER": $RegistryObject<($EntityType<($KeeperEntity)>)>
static readonly "SCULK_TENTACLE": $RegistryObject<($EntityType<($VoidTentacle)>)>
static readonly "ICE_BLOCK_PROJECTILE": $RegistryObject<($EntityType<($IceBlockProjectile)>)>
static readonly "POISON_CLOUD": $RegistryObject<($EntityType<($PoisonCloud)>)>
static readonly "SUNBEAM": $RegistryObject<($EntityType<($Sunbeam)>)>
static readonly "DRAGON_BREATH_POOL": $RegistryObject<($EntityType<($DragonBreathPool)>)>
static readonly "POISON_BREATH_PROJECTILE": $RegistryObject<($EntityType<($PoisonBreathProjectile)>)>
static readonly "POISON_ARROW": $RegistryObject<($EntityType<($PoisonArrow)>)>
static readonly "SMALL_MAGIC_ARROW": $RegistryObject<($EntityType<($SmallMagicArrow)>)>
static readonly "POISON_SPLASH": $RegistryObject<($EntityType<($PoisonSplash)>)>
static readonly "ACID_ORB": $RegistryObject<($EntityType<($AcidOrb)>)>
static readonly "ROOT": $RegistryObject<($EntityType<($RootEntity)>)>
static readonly "BLACK_HOLE": $RegistryObject<($EntityType<($BlackHole)>)>
static readonly "BLOOD_NEEDLE": $RegistryObject<($EntityType<($BloodNeedle)>)>
static readonly "FIRE_FIELD": $RegistryObject<($EntityType<($FireField)>)>
static readonly "FIRE_BOMB": $RegistryObject<($EntityType<($FireBomb)>)>
static readonly "COMET": $RegistryObject<($EntityType<($Comet)>)>
static readonly "TARGET_AREA_ENTITY": $RegistryObject<($EntityType<($TargetedAreaEntity)>)>
static readonly "HEALING_AOE": $RegistryObject<($EntityType<($HealingAoe)>)>
static readonly "EARTHQUAKE_AOE": $RegistryObject<($EntityType<($EarthquakeAoe)>)>
static readonly "PRIEST": $RegistryObject<($EntityType<($PriestEntity)>)>
static readonly "FALLING_BLOCK": $RegistryObject<($EntityType<($VisualFallingBlockEntity)>)>
static readonly "GUIDING_BOLT": $RegistryObject<($EntityType<($GuidingBoltProjectile)>)>
static readonly "GUST_COLLIDER": $RegistryObject<($EntityType<($GustCollider)>)>
static readonly "CHAIN_LIGHTNING": $RegistryObject<($EntityType<($ChainLightning)>)>
static readonly "RAY_OF_FROST_VISUAL_ENTITY": $RegistryObject<($EntityType<($RayOfFrostVisualEntity)>)>
static readonly "ELDRITCH_BLAST_VISUAL_ENTITY": $RegistryObject<($EntityType<($EldritchBlastVisualEntity)>)>
static readonly "DEVOUR_JAW": $RegistryObject<($EntityType<($DevourJaw)>)>
static readonly "FIREFLY_SWARM": $RegistryObject<($EntityType<($FireflySwarmProjectile)>)>
static readonly "FLAME_STRIKE": $RegistryObject<($EntityType<($FlameStrike)>)>
static readonly "ARROW_VOLLEY_ENTITY": $RegistryObject<($EntityType<($ArrowVolleyEntity)>)>
static readonly "PORTAL": $RegistryObject<($EntityType<($PortalEntity)>)>
static readonly "STOMP_AOE": $RegistryObject<($EntityType<($StompAoe)>)>
static readonly "LIGHTNING_STRIKE": $RegistryObject<($EntityType<($LightningStrike)>)>
static readonly "APOTHECARIST": $RegistryObject<($EntityType<($ApothecaristEntity)>)>
static readonly "ECHOING_STRIKE": $RegistryObject<($EntityType<($EchoingStrikeEntity)>)>
static readonly "CULTIST": $RegistryObject<($EntityType<($CultistEntity)>)>
static readonly "BALL_LIGHTNING": $RegistryObject<($EntityType<($BallLightning)>)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityRegistry$Type = ($EntityRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityRegistry_ = $EntityRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$HeartstopEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $HeartstopEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeartstopEffect$Type = ($HeartstopEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeartstopEffect_ = $HeartstopEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/devour_jaw/$DevourJawRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$DevourJaw, $DevourJaw$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/devour_jaw/$DevourJaw"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DevourJawRenderer extends $EntityRenderer<($DevourJaw)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $DevourJaw$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $DevourJaw$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DevourJawRenderer$Type = ($DevourJawRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DevourJawRenderer_ = $DevourJawRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$ClearSpellSelectionCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $ClearSpellSelectionCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClearSpellSelectionCommand$Type = ($ClearSpellSelectionCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClearSpellSelectionCommand_ = $ClearSpellSelectionCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$SunbeamSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $SunbeamSpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SunbeamSpell$Type = ($SunbeamSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SunbeamSpell_ = $SunbeamSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/arcane_anvil/$ArcaneAnvilScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ItemCombinerScreen, $ItemCombinerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$ItemCombinerScreen"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ArcaneAnvilMenu, $ArcaneAnvilMenu$Type} from "packages/io/redspace/ironsspellbooks/gui/arcane_anvil/$ArcaneAnvilMenu"

export class $ArcaneAnvilScreen extends $ItemCombinerScreen<($ArcaneAnvilMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ArcaneAnvilMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcaneAnvilScreen$Type = ($ArcaneAnvilScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcaneAnvilScreen_ = $ArcaneAnvilScreen$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$EnergySwirlLayer" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EnergySwirlLayer {
static readonly "EVASION_TEXTURE": $ResourceLocation
static readonly "CHARGE_TEXTURE": $ResourceLocation

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnergySwirlLayer$Type = ($EnergySwirlLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnergySwirlLayer_ = $EnergySwirlLayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$ArchevokerArmorModel" {
import {$DefaultedItemGeoModel, $DefaultedItemGeoModel$Type} from "packages/software/bernie/geckolib/model/$DefaultedItemGeoModel"
import {$ArchevokerArmorItem, $ArchevokerArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ArchevokerArmorItem"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ArchevokerArmorModel extends $DefaultedItemGeoModel<($ArchevokerArmorItem)> {

constructor()

public "getTextureResource"(arg0: $ArchevokerArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $ArchevokerArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $ArchevokerArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArchevokerArmorModel$Type = ($ArchevokerArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArchevokerArmorModel_ = $ArchevokerArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$SpinAttackModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SpinAttackModel extends $GeoModel<($AbstractSpellCastingMob)> {

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getModelResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getAnimationResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpinAttackModel$Type = ($SpinAttackModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpinAttackModel_ = $SpinAttackModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$ManaBarOverlay$Display" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ManaBarOverlay$Display extends $Enum<($ManaBarOverlay$Display)> {
static readonly "Never": $ManaBarOverlay$Display
static readonly "Always": $ManaBarOverlay$Display
static readonly "Contextual": $ManaBarOverlay$Display


public static "values"(): ($ManaBarOverlay$Display)[]
public static "valueOf"(arg0: string): $ManaBarOverlay$Display
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaBarOverlay$Display$Type = (("always") | ("contextual") | ("never")) | ($ManaBarOverlay$Display);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaBarOverlay$Display_ = $ManaBarOverlay$Display$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$DragonskinItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DragonskinItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "createEntity"(arg0: $Level$Type, arg1: $Entity$Type, arg2: $ItemStack$Type): $Entity
public "hasCustomEntity"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DragonskinItem$Type = ($DragonskinItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DragonskinItem_ = $DragonskinItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundSyncEntityData" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"
import {$SyncedSpellData, $SyncedSpellData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$SyncedSpellData"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundSyncEntityData {

constructor(arg0: $SyncedSpellData$Type, arg1: $IMagicEntity$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundSyncEntityData$Type = ($ClientboundSyncEntityData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundSyncEntityData_ = $ClientboundSyncEntityData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/cone_of_cold/$ConeOfColdProjectile" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$AbstractConeProjectile, $AbstractConeProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractConeProjectile"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ConeOfColdProjectile extends $AbstractConeProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "spawnParticles"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConeOfColdProjectile$Type = ($ConeOfColdProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConeOfColdProjectile_ = $ConeOfColdProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$CastCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CastCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CastCommand$Type = ($CastCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CastCommand_ = $CastCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/scroll_forge/$ScrollForgeScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ScrollForgeMenu, $ScrollForgeMenu$Type} from "packages/io/redspace/ironsspellbooks/gui/scroll_forge/$ScrollForgeMenu"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ScrollForgeScreen extends $AbstractContainerScreen<($ScrollForgeMenu)> {
static readonly "RUNIC_FONT": $ResourceLocation
static readonly "ENCHANT_FONT": $ResourceLocation
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ScrollForgeMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "generateSpellList"(): void
public "getSelectedSpell"(): $AbstractSpell
public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
get "selectedSpell"(): $AbstractSpell
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollForgeScreen$Type = ($ScrollForgeScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollForgeScreen_ = $ScrollForgeScreen$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$PoisonSplashSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $PoisonSplashSpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonSplashSpell$Type = ($PoisonSplashSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonSplashSpell_ = $PoisonSplashSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/network/$ISerializable" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"

export interface $ISerializable {

 "readFromBuffer"(arg0: $FriendlyByteBuf$Type): void
 "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
}

export namespace $ISerializable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISerializable$Type = ($ISerializable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISerializable_ = $ISerializable$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundOnCastStarted" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundOnCastStarted {

constructor(arg0: $UUID$Type, arg1: string, arg2: integer)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundOnCastStarted$Type = ($ClientboundOnCastStarted);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundOnCastStarted_ = $ClientboundOnCastStarted$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/wisp/$WispModel" {
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$WispEntity, $WispEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/wisp/$WispEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $WispModel extends $GeoModel<($WispEntity)> {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationResource": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $WispEntity$Type): $ResourceLocation
public "getModelResource"(arg0: $WispEntity$Type): $ResourceLocation
public "getAnimationResource"(arg0: $WispEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WispModel$Type = ($WispModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WispModel_ = $WispModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/archevoker/$ArchevokerEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Enemy, $Enemy$Type} from "packages/net/minecraft/world/entity/monster/$Enemy"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ArchevokerEntity extends $AbstractSpellCastingMob implements $Enemy {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public static "prepareAttributes"(): $AttributeSupplier$Builder
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArchevokerEntity$Type = ($ArchevokerEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArchevokerEntity_ = $ArchevokerEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/lightning_lance/$LightningLanceProjectile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $LightningLanceProjectile extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
public "getAge"(): integer
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
get "age"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightningLanceProjectile$Type = ($LightningLanceProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightningLanceProjectile_ = $LightningLanceProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WispAttackGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"

export class $WispAttackGoal extends $Goal {

constructor(arg0: $PathfinderMob$Type, arg1: double)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WispAttackGoal$Type = ($WispAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WispAttackGoal_ = $WispAttackGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/dragon_breath/$DragonBreathPool" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DragonBreathPool extends $AoeEntity {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DragonBreathPool$Type = ($DragonBreathPool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DragonBreathPool_ = $DragonBreathPool$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$ExtendedEvokerFang" {
import {$EvokerFangs, $EvokerFangs$Type} from "packages/net/minecraft/world/entity/projectile/$EvokerFangs"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ExtendedEvokerFang extends $EvokerFangs implements $AntiMagicSusceptible {
static readonly "ATTACK_DURATION": integer
static readonly "LIFE_OFFSET": integer
static readonly "ATTACK_TRIGGER_TICKS": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: double, arg2: double, arg3: double, arg4: float, arg5: integer, arg6: $LivingEntity$Type, arg7: float)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "getAnimationProgress"(arg0: float): float
public "tick"(): void
public "getDamage"(): float
get "damage"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedEvokerFang$Type = ($ExtendedEvokerFang);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedEvokerFang_ = $ExtendedEvokerFang$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundFrostStepParticles" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundFrostStepParticles {

constructor(arg0: $Vec3$Type, arg1: $Vec3$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundFrostStepParticles$Type = ($ClientboundFrostStepParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundFrostStepParticles_ = $ClientboundFrostStepParticles$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/alchemist/$ApothecaristRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ApothecaristRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "preRender"(arg0: $PoseStack$Type, arg1: $AbstractSpellCastingMob$Type, arg2: $BakedGeoModel$Type, arg3: $MultiBufferSource$Type, arg4: $VertexConsumer$Type, arg5: boolean, arg6: float, arg7: integer, arg8: integer, arg9: float, arg10: float, arg11: float, arg12: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ApothecaristRenderer$Type = ($ApothecaristRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ApothecaristRenderer_ = $ApothecaristRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$GuidingBoltSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $GuidingBoltSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuidingBoltSpell$Type = ($GuidingBoltSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuidingBoltSpell_ = $GuidingBoltSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/debug_wizard/$DebugWizard" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Enemy, $Enemy$Type} from "packages/net/minecraft/world/entity/monster/$Enemy"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DebugWizard extends $AbstractSpellCastingMob implements $Enemy {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type, arg2: $AbstractSpell$Type, arg3: integer, arg4: boolean, arg5: integer)

public "getSpellInfo"(): string
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "onSyncedDataUpdated"(arg0: $EntityDataAccessor$Type<(any)>): void
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "spellInfo"(): string
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugWizard$Type = ($DebugWizard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugWizard_ = $DebugWizard$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$PortalPos, $PortalPos$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalPos"

export class $PortalData implements $ICastDataSerializable {
 "globalPos1": $PortalPos
 "portalEntityId1": $UUID
 "globalPos2": $PortalPos
 "portalEntityId2": $UUID
 "ticksToLive": integer

constructor()

public "reset"(): void
public "setPortalDuration"(arg0: integer): void
public "readFromBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getConnectedPortalPos"(arg0: $UUID$Type): $Optional<($PortalPos)>
public "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
public "getConnectedPortalUUID"(arg0: $UUID$Type): $UUID
set "portalDuration"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortalData$Type = ($PortalData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortalData_ = $PortalData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$PyromancerArmorItem" {
import {$ImbuableChestplateArmorItem, $ImbuableChestplateArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $PyromancerArmorItem extends $ImbuableChestplateArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PyromancerArmorItem$Type = ($PyromancerArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PyromancerArmorItem_ = $PyromancerArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$ThunderstormSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ThunderstormSpell extends $AbstractSpell {

constructor()

public "getDurationTicks"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThunderstormSpell$Type = ($ThunderstormSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThunderstormSpell_ = $ThunderstormSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$SpecialItemRenderer" {
import {$ItemRenderer, $ItemRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$ItemRenderer"
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $SpecialItemRenderer extends $BlockEntityWithoutLevelRenderer {
readonly "guiModel": $BakedModel
readonly "normalModel": $BakedModel

constructor(arg0: $ItemRenderer$Type, arg1: $EntityModelSet$Type, arg2: string)

public "renderByItem"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialItemRenderer$Type = ($SpecialItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialItemRenderer_ = $SpecialItemRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$GlowingEyesLayer" {
import {$GlowingEyesLayer$EyeType, $GlowingEyesLayer$EyeType$Type} from "packages/io/redspace/ironsspellbooks/render/$GlowingEyesLayer$EyeType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $GlowingEyesLayer {
static readonly "EYE_TEXTURE": $ResourceLocation
static readonly "EYES": $RenderType

constructor()

public static "getEyeType"(arg0: $LivingEntity$Type): $GlowingEyesLayer$EyeType
public static "getEyeScale"(arg0: $LivingEntity$Type): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlowingEyesLayer$Type = ($GlowingEyesLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlowingEyesLayer_ = $GlowingEyesLayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/poison_cloud/$PoisonSplash" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PoisonSplash extends $AoeEntity {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "ambientParticles"(): void
public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
public "tick"(): void
public "createPoisonCloud"(): void
public "refreshDimensions"(): void
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonSplash$Type = ($PoisonSplash);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonSplash_ = $PoisonSplash$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingAmbienceSoundManager" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $DeadKingAmbienceSoundManager {


public "trigger"(): void
public "triggerStop"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingAmbienceSoundManager$Type = ($DeadKingAmbienceSoundManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingAmbienceSoundManager_ = $DeadKingAmbienceSoundManager$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$LightningBoltSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $LightningBoltSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightningBoltSpell$Type = ($LightningBoltSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightningBoltSpell_ = $LightningBoltSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$FortifyEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $FortifyEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FortifyEffect$Type = ($FortifyEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FortifyEffect_ = $FortifyEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronInteraction" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $AlchemistCauldronInteraction {

 "interact"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: integer, arg4: $ItemStack$Type): $ItemStack

(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: integer, arg4: $ItemStack$Type): $ItemStack
}

export namespace $AlchemistCauldronInteraction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistCauldronInteraction$Type = ($AlchemistCauldronInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistCauldronInteraction_ = $AlchemistCauldronInteraction$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$ShockwaveParticleOptions" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$DustParticleOptionsBase, $DustParticleOptionsBase$Type} from "packages/net/minecraft/core/particles/$DustParticleOptionsBase"
import {$ParticleOptions$Deserializer, $ParticleOptions$Deserializer$Type} from "packages/net/minecraft/core/particles/$ParticleOptions$Deserializer"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"

export class $ShockwaveParticleOptions extends $DustParticleOptionsBase {
static readonly "CODEC": $Codec<($ShockwaveParticleOptions)>
static readonly "DESERIALIZER": $ParticleOptions$Deserializer<($ShockwaveParticleOptions)>
static readonly "MIN_SCALE": float
static readonly "MAX_SCALE": float

constructor(arg0: $Vector3f$Type, arg1: float, arg2: boolean, arg3: string)
constructor(arg0: $Vector3f$Type, arg1: float, arg2: boolean)

public "color"(): $Vector3f
public "getType"(): $ParticleType<($ShockwaveParticleOptions)>
public "trailParticle"(): $Optional<($ParticleOptions)>
public "isFullbright"(): boolean
public "getScale"(): float
public "writeToNetwork"(arg0: $FriendlyByteBuf$Type): void
get "type"(): $ParticleType<($ShockwaveParticleOptions)>
get "fullbright"(): boolean
get "scale"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShockwaveParticleOptions$Type = ($ShockwaveParticleOptions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShockwaveParticleOptions_ = $ShockwaveParticleOptions$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$WorldlyContainer, $WorldlyContainer$Type} from "packages/net/minecraft/world/$WorldlyContainer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Object2ObjectOpenHashMap, $Object2ObjectOpenHashMap$Type} from "packages/it/unimi/dsi/fastutil/objects/$Object2ObjectOpenHashMap"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AlchemistCauldronInteraction, $AlchemistCauldronInteraction$Type} from "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronInteraction"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $AlchemistCauldronTile extends $BlockEntity implements $WorldlyContainer {
 "interactions": $Object2ObjectOpenHashMap<($Item), ($AlchemistCauldronInteraction)>
readonly "inputItems": $NonNullList<($ItemStack)>
readonly "resultItems": $NonNullList<($ItemStack)>
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public static "isEmpty"(arg0: $NonNullList$Type<($ItemStack$Type)>): boolean
public static "isFull"(arg0: $NonNullList$Type<($ItemStack$Type)>): boolean
public "setChanged"(): void
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "getAverageWaterColor"(): integer
public "drops"(): void
public "canTakeItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "getSlotsForFace"(arg0: $Direction$Type): (integer)[]
public "canPlaceItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "isValidInput"(arg0: $ItemStack$Type): boolean
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "load"(arg0: $CompoundTag$Type): void
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "stillValid"(arg0: $Player$Type): boolean
public static "serverTick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $AlchemistCauldronTile$Type): void
public "handleUse"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type): $InteractionResult
public static "appendItem"(arg0: $NonNullList$Type<($ItemStack$Type)>, arg1: $ItemStack$Type): boolean
public "getItemWaterColor"(arg0: $ItemStack$Type): integer
public static "grabItem"(arg0: $NonNullList$Type<($ItemStack$Type)>): $ItemStack
public "meltComponent"(arg0: $ItemStack$Type): void
public static "getInkFromScroll"(arg0: $ItemStack$Type): $Item
public static "isBrewable"(arg0: $ItemStack$Type): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "getUpdateTag"(): $CompoundTag
public "onDataPacket"(arg0: $Connection$Type, arg1: $ClientboundBlockEntityDataPacket$Type): void
public "handleUpdateTag"(arg0: $CompoundTag$Type): void
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "containerSize"(): integer
get "averageWaterColor"(): integer
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "empty"(): boolean
get "updateTag"(): $CompoundTag
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistCauldronTile$Type = ($AlchemistCauldronTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistCauldronTile_ = $AlchemistCauldronTile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/alchemist/$ApothecaristModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$AnimationState, $AnimationState$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationState"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"

export class $ApothecaristModel extends $AbstractSpellCastingMobModel {
static readonly "TEXTURE": $ResourceLocation
static readonly "MODEL": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getModelResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "setCustomAnimations"(arg0: $AbstractSpellCastingMob$Type, arg1: long, arg2: $AnimationState$Type<($AbstractSpellCastingMob$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ApothecaristModel$Type = ($ApothecaristModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ApothecaristModel_ = $ApothecaristModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$PlayerMagicProvider" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$INBTSerializable, $INBTSerializable$Type} from "packages/net/minecraftforge/common/util/$INBTSerializable"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $PlayerMagicProvider implements $ICapabilityProvider, $INBTSerializable<($CompoundTag)> {
static "PLAYER_MAGIC": $Capability<($MagicData)>

constructor(arg0: $ServerPlayer$Type)

public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
public "deserializeNBT"(arg0: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerMagicProvider$Type = ($PlayerMagicProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerMagicProvider_ = $PlayerMagicProvider$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/scroll_forge/$ScrollForgeBlock" {
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BaseEntityBlock, $BaseEntityBlock$Type} from "packages/net/minecraft/world/level/block/$BaseEntityBlock"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $ScrollForgeBlock extends $BaseEntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "SHAPE_TABLETOP": $VoxelShape
static readonly "SHAPE_LEG_1": $VoxelShape
static readonly "SHAPE_LEG_2": $VoxelShape
static readonly "SHAPE": $VoxelShape
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollForgeBlock$Type = ($ScrollForgeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollForgeBlock_ = $ScrollForgeBlock$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$ScrollForgeRecipe" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ScrollForgeRecipe extends $Record {

constructor(inkInputs: $List$Type<($ItemStack$Type)>, paperInput: $ItemStack$Type, focusInput: $ItemStack$Type, scrollOutputs: $List$Type<($ItemStack$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "isValid"(): boolean
public "inkInputs"(): $List<($ItemStack)>
public "paperInput"(): $ItemStack
public "focusInput"(): $ItemStack
public "scrollOutputs"(): $List<($ItemStack)>
get "valid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollForgeRecipe$Type = ($ScrollForgeRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollForgeRecipe_ = $ScrollForgeRecipe$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$HealingAoe" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $HealingAoe extends $AoeEntity implements $AntiMagicSusceptible {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "ambientParticles"(): void
public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HealingAoe$Type = ($HealingAoe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HealingAoe_ = $HealingAoe$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$StarfallSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $StarfallSpell extends $AbstractSpell {

constructor()

public "shootComet"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $Vec3$Type): void
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "onServerCastTick"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): void
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StarfallSpell$Type = ($StarfallSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StarfallSpell_ = $StarfallSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$ShieldEntity, $ShieldEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldEntity"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $ShieldModel extends $EntityModel<($ShieldEntity)> {
static readonly "LAYER_LOCATION": $ModelLayerLocation
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "setupAnim"(arg0: $ShieldEntity$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
public "renderToBuffer"(arg0: $PoseStack$Type, arg1: $VertexConsumer$Type, arg2: integer, arg3: integer, arg4: float, arg5: float, arg6: float, arg7: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShieldModel$Type = ($ShieldModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShieldModel_ = $ShieldModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$EmberParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $EmberParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "m_6355_"(arg0: float): integer
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmberParticle$Type = ($EmberParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmberParticle_ = $EmberParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$ChargeSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ChargeSpell extends $AbstractSpell {

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChargeSpell$Type = ($ChargeSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChargeSpell_ = $ChargeSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/eldritch/$AbstractEldritchSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$CastResult, $CastResult$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastResult"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $AbstractEldritchSpell extends $AbstractSpell {
static readonly "ELDRITCH_OBFUSCATED_STYLE": $Style

constructor()

public "getDisplayName"(arg0: $Player$Type): $MutableComponent
public "canBeCastedBy"(arg0: integer, arg1: $CastSource$Type, arg2: $MagicData$Type, arg3: $Player$Type): $CastResult
public "needsLearning"(): boolean
public "isLearned"(arg0: $Player$Type): boolean
public "canBeCraftedBy"(arg0: $Player$Type): boolean
public "obfuscateStats"(arg0: $Player$Type): boolean
public "allowLooting"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractEldritchSpell$Type = ($AbstractEldritchSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractEldritchSpell_ = $AbstractEldritchSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/root/$PreventDismount" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $PreventDismount {

}

export namespace $PreventDismount {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PreventDismount$Type = ($PreventDismount);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PreventDismount_ = $PreventDismount$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/fixers/$FixTetra" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataFixerElement, $DataFixerElement$Type} from "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement"

export class $FixTetra extends $DataFixerElement {

constructor()

public "runFixer"(arg0: $CompoundTag$Type): boolean
public "preScanValuesToMatch"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FixTetra$Type = ($FixTetra);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FixTetra_ = $FixTetra$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$RendEffect" {
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $RendEffect extends $MobEffect {
static readonly "ARMOR_PER_LEVEL": float

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RendEffect$Type = ($RendEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RendEffect_ = $RendEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ICastData, $ICastData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastData"
import {$ISerializable, $ISerializable$Type} from "packages/io/redspace/ironsspellbooks/api/network/$ISerializable"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$INBTSerializable, $INBTSerializable$Type} from "packages/net/minecraftforge/common/util/$INBTSerializable"

export interface $ICastDataSerializable extends $ICastData, $ISerializable, $INBTSerializable<($CompoundTag)> {

 "reset"(): void
 "readFromBuffer"(arg0: $FriendlyByteBuf$Type): void
 "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
 "deserializeNBT"(arg0: $CompoundTag$Type): void
 "serializeNBT"(): $CompoundTag
}

export namespace $ICastDataSerializable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICastDataSerializable$Type = ($ICastDataSerializable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICastDataSerializable_ = $ICastDataSerializable$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$EarthquakeSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $EarthquakeSpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EarthquakeSpell$Type = ($EarthquakeSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EarthquakeSpell_ = $EarthquakeSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$TeleportSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $TeleportSpell extends $AbstractSpell {

constructor()

public static "particleCloud"(arg0: $Level$Type, arg1: $Vec3$Type): void
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public static "findTeleportLocation"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: float): $Vec3
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeleportSpell$Type = ($TeleportSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeleportSpell_ = $TeleportSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/tetra/$StatGetterPercentAttribute" {
import {$StatGetterAttribute, $StatGetterAttribute$Type} from "packages/se/mickelus/tetra/gui/stats/getter/$StatGetterAttribute"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $StatGetterPercentAttribute extends $StatGetterAttribute {

constructor(arg0: $Attribute$Type)

public "getValue"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: string, arg3: string): double
public "getValue"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: string): double
public "getValue"(arg0: $Player$Type, arg1: $ItemStack$Type): double
public "shouldShow"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatGetterPercentAttribute$Type = ($StatGetterPercentAttribute);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatGetterPercentAttribute_ = $StatGetterPercentAttribute$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/$IronsTagTraverser" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IntArrayTag, $IntArrayTag$Type} from "packages/net/minecraft/nbt/$IntArrayTag"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$IntTag, $IntTag$Type} from "packages/net/minecraft/nbt/$IntTag"
import {$FloatTag, $FloatTag$Type} from "packages/net/minecraft/nbt/$FloatTag"
import {$ByteArrayTag, $ByteArrayTag$Type} from "packages/net/minecraft/nbt/$ByteArrayTag"
import {$TagVisitor, $TagVisitor$Type} from "packages/net/minecraft/nbt/$TagVisitor"
import {$ShortTag, $ShortTag$Type} from "packages/net/minecraft/nbt/$ShortTag"
import {$LongArrayTag, $LongArrayTag$Type} from "packages/net/minecraft/nbt/$LongArrayTag"
import {$LongTag, $LongTag$Type} from "packages/net/minecraft/nbt/$LongTag"
import {$StringTag, $StringTag$Type} from "packages/net/minecraft/nbt/$StringTag"
import {$EndTag, $EndTag$Type} from "packages/net/minecraft/nbt/$EndTag"
import {$ByteTag, $ByteTag$Type} from "packages/net/minecraft/nbt/$ByteTag"
import {$DoubleTag, $DoubleTag$Type} from "packages/net/minecraft/nbt/$DoubleTag"

export class $IronsTagTraverser implements $TagVisitor {

constructor()

public "visit"(arg0: $Tag$Type): void
public "visitString"(arg0: $StringTag$Type): void
public "visitFloat"(arg0: $FloatTag$Type): void
public "visitByteArray"(arg0: $ByteArrayTag$Type): void
public "visitCompound"(arg0: $CompoundTag$Type): void
public "visitInt"(arg0: $IntTag$Type): void
public "visitShort"(arg0: $ShortTag$Type): void
public "visitEnd"(arg0: $EndTag$Type): void
public "visitByte"(arg0: $ByteTag$Type): void
public "changesMade"(): boolean
public "totalChanges"(): integer
public "visitDouble"(arg0: $DoubleTag$Type): void
public "visitLongArray"(arg0: $LongArrayTag$Type): void
public "visitList"(arg0: $ListTag$Type): void
public "visitIntArray"(arg0: $IntArrayTag$Type): void
public "visitLong"(arg0: $LongTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronsTagTraverser$Type = ($IronsTagTraverser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronsTagTraverser_ = $IronsTagTraverser$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$CultistArmorItem" {
import {$ImbuableChestplateArmorItem, $ImbuableChestplateArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $CultistArmorItem extends $ImbuableChestplateArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CultistArmorItem$Type = ($CultistArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CultistArmorItem_ = $CultistArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/inscription_table/network/$ServerboundInscriptionTableSelectSpell" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerboundInscriptionTableSelectSpell {

constructor(arg0: $BlockPos$Type, arg1: integer)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerboundInscriptionTableSelectSpell$Type = ($ServerboundInscriptionTableSelectSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerboundInscriptionTableSelectSpell_ = $ServerboundInscriptionTableSelectSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$CounterspellSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $CounterspellSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CounterspellSpell$Type = ($CounterspellSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CounterspellSpell_ = $CounterspellSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$SpellbreakerItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicSwordItem, $MagicSwordItem$Type} from "packages/io/redspace/ironsspellbooks/api/item/weapons/$MagicSwordItem"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$SpellDataRegistryHolder, $SpellDataRegistryHolder$Type} from "packages/io/redspace/ironsspellbooks/api/registry/$SpellDataRegistryHolder"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SpellbreakerItem extends $MagicSwordItem {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: ($SpellDataRegistryHolder$Type)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellbreakerItem$Type = ($SpellbreakerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellbreakerItem_ = $SpellbreakerItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundSyncRecasts" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$RecastInstance, $RecastInstance$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastInstance"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ClientboundSyncRecasts {

constructor(arg0: $Map$Type<(string), ($RecastInstance$Type)>)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public static "readSpellID"(arg0: $FriendlyByteBuf$Type): string
public static "writeSpellId"(arg0: $FriendlyByteBuf$Type, arg1: string): void
public static "readRecastInstance"(arg0: $FriendlyByteBuf$Type): $RecastInstance
public static "writeRecastInstance"(arg0: $FriendlyByteBuf$Type, arg1: $RecastInstance$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundSyncRecasts$Type = ($ClientboundSyncRecasts);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundSyncRecasts_ = $ClientboundSyncRecasts$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$LobCreeperSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $LobCreeperSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LobCreeperSpell$Type = ($LobCreeperSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LobCreeperSpell_ = $LobCreeperSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$FogParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $FogParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getQuadSize"(arg0: float): float
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "render"(arg0: $VertexConsumer$Type, arg1: $Camera$Type, arg2: float): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FogParticle$Type = ($FogParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FogParticle_ = $FogParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronRecipe" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"

export class $AlchemistCauldronRecipe {

constructor(arg0: $Potion$Type, arg1: $Item$Type, arg2: $Item$Type)
constructor(arg0: $Item$Type, arg1: $Item$Type, arg2: $Item$Type)
constructor(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type)

public "getResult"(): $ItemStack
public "getInput"(): $ItemStack
public "getIngredient"(): $ItemStack
public "setBaseRequirement"(arg0: integer): $AlchemistCauldronRecipe
public "setResultLimit"(arg0: integer): $AlchemistCauldronRecipe
public "createOutput"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
get "result"(): $ItemStack
get "input"(): $ItemStack
get "ingredient"(): $ItemStack
set "baseRequirement"(value: integer)
set "resultLimit"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistCauldronRecipe$Type = ($AlchemistCauldronRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistCauldronRecipe_ = $AlchemistCauldronRecipe$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/spectral_hammer/$SpectralHammerModel" {
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$SpectralHammer, $SpectralHammer$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/spectral_hammer/$SpectralHammer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SpectralHammerModel extends $GeoModel<($SpectralHammer)> {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationResource": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $SpectralHammer$Type): $ResourceLocation
public "getModelResource"(arg0: $SpectralHammer$Type): $ResourceLocation
public "getAnimationResource"(arg0: $SpectralHammer$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpectralHammerModel$Type = ($SpectralHammerModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpectralHammerModel_ = $SpectralHammerModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/blood_slash/$BloodSlashRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$BloodSlashProjectile, $BloodSlashProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/blood_slash/$BloodSlashProjectile"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BloodSlashRenderer extends $EntityRenderer<($BloodSlashProjectile)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $BloodSlashProjectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $BloodSlashProjectile$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodSlashRenderer$Type = ($BloodSlashRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodSlashRenderer_ = $BloodSlashRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/magic/$SpellSelectionManager$SpellSelectionEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SpellSelectionManager, $SpellSelectionManager$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$SpellSelectionManager"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"

export class $SpellSelectionManager$SpellSelectionEvent extends $PlayerEvent {

constructor()
constructor(arg0: $Player$Type, arg1: $SpellSelectionManager$Type)

public "isCancelable"(): boolean
public "getManager"(): $SpellSelectionManager
public "addSelectionOption"(arg0: $SpellData$Type, arg1: string, arg2: integer): void
public "addSelectionOption"(arg0: $SpellData$Type, arg1: string, arg2: integer, arg3: integer): void
public "getListenerList"(): $ListenerList
get "cancelable"(): boolean
get "manager"(): $SpellSelectionManager
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellSelectionManager$SpellSelectionEvent$Type = ($SpellSelectionManager$SpellSelectionEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellSelectionManager$SpellSelectionEvent_ = $SpellSelectionManager$SpellSelectionEvent$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/fixers/$FixUpgradeType" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataFixerElement, $DataFixerElement$Type} from "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement"

export class $FixUpgradeType extends $DataFixerElement {

constructor()

public "runFixer"(arg0: $CompoundTag$Type): boolean
public "preScanValuesToMatch"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FixUpgradeType$Type = ($FixUpgradeType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FixUpgradeType_ = $FixUpgradeType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$ArcaneAnvilRecipeCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ArcaneAnvilRecipe, $ArcaneAnvilRecipe$Type} from "packages/io/redspace/ironsspellbooks/jei/$ArcaneAnvilRecipe"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IDrawable, $IDrawable$Type} from "packages/mezz/jei/api/gui/drawable/$IDrawable"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $ArcaneAnvilRecipeCategory implements $IRecipeCategory<($ArcaneAnvilRecipe)> {
static readonly "ARCANE_ANVIL_RECIPE_RECIPE_TYPE": $RecipeType<($ArcaneAnvilRecipe)>

constructor(arg0: $IGuiHelper$Type)

public "getRecipeType"(): $RecipeType<($ArcaneAnvilRecipe)>
public "draw"(arg0: $ArcaneAnvilRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "getIcon"(): $IDrawable
public "getTitle"(): $Component
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $ArcaneAnvilRecipe$Type, arg2: $IFocusGroup$Type): void
public "getBackground"(): $IDrawable
public "getWidth"(): integer
public "getHeight"(): integer
public "isHandled"(arg0: $ArcaneAnvilRecipe$Type): boolean
public "handleInput"(arg0: $ArcaneAnvilRecipe$Type, arg1: double, arg2: double, arg3: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: $ArcaneAnvilRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: double, arg3: double): $List<($Component)>
public "getRegistryName"(arg0: $ArcaneAnvilRecipe$Type): $ResourceLocation
get "recipeType"(): $RecipeType<($ArcaneAnvilRecipe)>
get "icon"(): $IDrawable
get "title"(): $Component
get "background"(): $IDrawable
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcaneAnvilRecipeCategory$Type = ($ArcaneAnvilRecipeCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcaneAnvilRecipeCategory_ = $ArcaneAnvilRecipeCategory$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientBoundSyncRecast" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$RecastInstance, $RecastInstance$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastInstance"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientBoundSyncRecast {

constructor(arg0: $RecastInstance$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncRecast$Type = ($ClientBoundSyncRecast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncRecast_ = $ClientBoundSyncRecast$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$SpellWheelOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $SpellWheelOverlay implements $IGuiOverlay {
static "instance": $SpellWheelOverlay
static readonly "TEXTURE": $ResourceLocation
 "active": boolean

constructor()

public "close"(): void
public "open"(): void
public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellWheelOverlay$Type = ($SpellWheelOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellWheelOverlay_ = $SpellWheelOverlay$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$SparkParticleOptions" {
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$ParticleOptions$Deserializer, $ParticleOptions$Deserializer$Type} from "packages/net/minecraft/core/particles/$ParticleOptions$Deserializer"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"

export class $SparkParticleOptions implements $ParticleOptions {
static readonly "CODEC": $Codec<($SparkParticleOptions)>
static readonly "DESERIALIZER": $ParticleOptions$Deserializer<($SparkParticleOptions)>

constructor(arg0: $Vector3f$Type)

public static "readVector3f"(arg0: $StringReader$Type): $Vector3f
public static "readVector3f"(arg0: $FriendlyByteBuf$Type): $Vector3f
public "getColor"(): $Vector3f
public "getType"(): $ParticleType<(any)>
public "writeToString"(): string
public "writeToNetwork"(arg0: $FriendlyByteBuf$Type): void
get "color"(): $Vector3f
get "type"(): $ParticleType<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SparkParticleOptions$Type = ($SparkParticleOptions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SparkParticleOptions_ = $SparkParticleOptions$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/magic/$SpellSelectionManager" {
import {$SpellSelectionManager$SelectionOption, $SpellSelectionManager$SelectionOption$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$SpellSelectionManager$SelectionOption"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpellSelection, $SpellSelection$Type} from "packages/io/redspace/ironsspellbooks/gui/overlays/$SpellSelection"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"

export class $SpellSelectionManager {
static readonly "MAINHAND": string
static readonly "OFFHAND": string

constructor(arg0: $Player$Type)

public "getAllSpells"(): $List<($SpellSelectionManager$SelectionOption)>
public "getSpellsForSlot"(arg0: string): $List<($SpellSelectionManager$SelectionOption)>
public "makeSelection"(arg0: integer): void
public "getSpellForSlot"(arg0: string, arg1: integer): $SpellData
public "getSelectionIndex"(): integer
public "getSelection"(): $SpellSelectionManager$SelectionOption
public "getSpellCount"(): integer
public "getSpellSlot"(arg0: integer): $SpellSelectionManager$SelectionOption
public "getSpellData"(arg0: integer): $SpellData
public "getCurrentSelection"(): $SpellSelection
public "getSelectedSpellData"(): $SpellData
public "getGlobalSelectionIndex"(): integer
get "allSpells"(): $List<($SpellSelectionManager$SelectionOption)>
get "selectionIndex"(): integer
get "selection"(): $SpellSelectionManager$SelectionOption
get "spellCount"(): integer
get "currentSelection"(): $SpellSelection
get "selectedSpellData"(): $SpellData
get "globalSelectionIndex"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellSelectionManager$Type = ($SpellSelectionManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellSelectionManager_ = $SpellSelectionManager$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$ShieldSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ShieldSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShieldSpell$Type = ($ShieldSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShieldSpell_ = $ShieldSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$AutoloaderCrossbow" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$CrossbowItem, $CrossbowItem$Type} from "packages/net/minecraft/world/item/$CrossbowItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AutoloaderCrossbow extends $CrossbowItem {
static readonly "LOADING": string
static readonly "LOADING_TIMESTAMP": string
static readonly "DEFAULT_RANGE": integer
static readonly "ARROW_ONLY": $Predicate<($ItemStack)>
static readonly "ARROW_OR_FIREWORK": $Predicate<($ItemStack)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public static "isLoading"(arg0: $ItemStack$Type): boolean
public static "getLoadingTicks"(arg0: $ItemStack$Type): integer
public static "setLoadingTicks"(arg0: $ItemStack$Type, arg1: integer): void
public static "setLoading"(arg0: $ItemStack$Type, arg1: boolean): void
public static "startLoading"(arg0: $Player$Type, arg1: $ItemStack$Type): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "getChargeDuration"(arg0: $ItemStack$Type): integer
public "onEntityItemUpdate"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AutoloaderCrossbow$Type = ($AutoloaderCrossbow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AutoloaderCrossbow_ = $AutoloaderCrossbow$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/curios/$SimpleDescriptiveCurio" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurioBaseItem, $CurioBaseItem$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$CurioBaseItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SimpleDescriptiveCurio extends $CurioBaseItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: string)
constructor(arg0: $Item$Properties$Type)

public "getDescription"(arg0: $ItemStack$Type): $Component
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
public "getDescriptionLines"(arg0: $ItemStack$Type): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleDescriptiveCurio$Type = ($SimpleDescriptiveCurio);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleDescriptiveCurio_ = $SimpleDescriptiveCurio$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$IMultihandWeapon" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMultihandWeapon {

}

export namespace $IMultihandWeapon {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMultihandWeapon$Type = ($IMultihandWeapon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMultihandWeapon_ = $IMultihandWeapon$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$DragonBreathSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $DragonBreathSpell extends $AbstractSpell {

constructor()

public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DragonBreathSpell$Type = ($DragonBreathSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DragonBreathSpell_ = $DragonBreathSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $SpellRarity extends $Enum<($SpellRarity)> {
static readonly "COMMON": $SpellRarity
static readonly "UNCOMMON": $SpellRarity
static readonly "RARE": $SpellRarity
static readonly "EPIC": $SpellRarity
static readonly "LEGENDARY": $SpellRarity


public static "values"(): ($SpellRarity)[]
public static "valueOf"(arg0: string): $SpellRarity
public "getValue"(): integer
public "getDisplayName"(): $MutableComponent
public "compareRarity"(arg0: $SpellRarity$Type): integer
public static "rarityTest"(): void
public "getChatFormatting"(): $ChatFormatting
public static "getRawRarityConfig"(): $List<(double)>
public static "getRarityConfig"(): $List<(double)>
get "value"(): integer
get "displayName"(): $MutableComponent
get "chatFormatting"(): $ChatFormatting
get "rawRarityConfig"(): $List<(double)>
get "rarityConfig"(): $List<(double)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellRarity$Type = (("uncommon") | ("common") | ("legendary") | ("rare") | ("epic")) | ($SpellRarity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellRarity_ = $SpellRarity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$FortifySpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $FortifySpell extends $AbstractSpell {
static readonly "radius": float

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "onServerPreCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FortifySpell$Type = ($FortifySpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FortifySpell_ = $FortifySpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$AlchemistAttackGoal" {
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$WizardAttackGoal, $WizardAttackGoal$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WizardAttackGoal"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $AlchemistAttackGoal extends $WizardAttackGoal {
static readonly "ATTACK_POTIONS": $List<($MobEffect)>

constructor(arg0: $IMagicEntity$Type, arg1: double, arg2: integer, arg3: integer, arg4: float, arg5: float)

public "setIsFlying"(): $AlchemistAttackGoal
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistAttackGoal$Type = ($AlchemistAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistAttackGoal_ = $AlchemistAttackGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder" {
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RawAnimation, $RawAnimation$Type} from "packages/software/bernie/geckolib/core/animation/$RawAnimation"

export class $AnimationHolder {
readonly "isPass": boolean
readonly "animatesLegs": boolean

constructor(arg0: string, arg1: boolean)
constructor(arg0: string, arg1: boolean, arg2: boolean)

public static "pass"(): $AnimationHolder
public "getForPlayer"(): $Optional<($ResourceLocation)>
public static "none"(): $AnimationHolder
public "getForMob"(): $Optional<($RawAnimation)>
get "forPlayer"(): $Optional<($ResourceLocation)>
get "forMob"(): $Optional<($RawAnimation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationHolder$Type = ($AnimationHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationHolder_ = $AnimationHolder$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/alchemist/$ApothecaristEntity" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$IMerchantWizard, $IMerchantWizard$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/$IMerchantWizard"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$MerchantOffers, $MerchantOffers$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffers"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$NeutralWizard, $NeutralWizard$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$NeutralWizard"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ApothecaristEntity extends $NeutralWizard implements $IMerchantWizard {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "getRestocksToday"(): integer
public "setRestocksToday"(arg0: integer): void
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "getTradingPlayer"(): $Player
public "setTradingPlayer"(arg0: $Player$Type): void
public "overrideOffers"(arg0: $MerchantOffers$Type): void
public "notifyTrade"(arg0: $MerchantOffer$Type): void
public "notifyTradeUpdated"(arg0: $ItemStack$Type): void
public "getNotifyTradeSound"(): $SoundEvent
public "getLastRestockGameTime"(): long
public "setLastRestockGameTime"(arg0: long): void
public "setLastRestockCheckDayTime"(arg0: long): void
public "getLastRestockCheckDayTime"(): long
public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "canBeAffected"(arg0: $MobEffectInstance$Type): boolean
public "swing"(arg0: $InteractionHand$Type): void
public "getAmbientSoundInterval"(): integer
public "getAngerSound"(): $Optional<($SoundEvent)>
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "getOffers"(): $MerchantOffers
public "isTrading"(): boolean
public "shouldRestock"(): boolean
public "needsToRestock"(): boolean
public "allowedToRestock"(): boolean
public "serializeMerchant"(arg0: $CompoundTag$Type, arg1: $MerchantOffers$Type, arg2: long, arg3: integer): void
public "restock"(): void
public "showProgressBar"(): boolean
public "isClientSide"(): boolean
public "overrideXp"(arg0: integer): void
public "deserializeMerchant"(arg0: $CompoundTag$Type, arg1: $Consumer$Type<($MerchantOffers$Type)>): void
public "getVillagerXp"(): integer
public "canRestock"(): boolean
public "openTradingScreen"(arg0: $Player$Type, arg1: $Component$Type, arg2: integer): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "canAttack"(arg0: $LivingEntity$Type): boolean
public "setTarget"(arg0: $LivingEntity$Type): void
public "getTarget"(): $LivingEntity
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "restocksToday"(): integer
set "restocksToday"(value: integer)
get "tradingPlayer"(): $Player
set "tradingPlayer"(value: $Player$Type)
get "notifyTradeSound"(): $SoundEvent
get "lastRestockGameTime"(): long
set "lastRestockGameTime"(value: long)
set "lastRestockCheckDayTime"(value: long)
get "lastRestockCheckDayTime"(): long
get "ambientSoundInterval"(): integer
get "angerSound"(): $Optional<($SoundEvent)>
get "offers"(): $MerchantOffers
get "trading"(): boolean
get "clientSide"(): boolean
get "villagerXp"(): integer
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
set "target"(value: $LivingEntity$Type)
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ApothecaristEntity$Type = ($ApothecaristEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ApothecaristEntity_ = $ApothecaristEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$TooltipsUtils" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LocalPlayer, $LocalPlayer$Type} from "packages/net/minecraft/client/player/$LocalPlayer"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $TooltipsUtils {
static readonly "UNIQUE_STYLE": $Style

constructor()

public static "formatActiveSpellTooltip"(arg0: $ItemStack$Type, arg1: $SpellData$Type, arg2: $CastSource$Type, arg3: $LocalPlayer$Type): $List<($MutableComponent)>
public static "getLevelComponenet"(arg0: $SpellData$Type, arg1: $LivingEntity$Type): $MutableComponent
public static "indexOfComponentRegex"(arg0: $List$Type<($Component$Type)>, arg1: string): integer
public static "getManaCostComponent"(arg0: $CastType$Type, arg1: integer): $MutableComponent
public static "getTitleComponent"(arg0: $SpellData$Type, arg1: $LocalPlayer$Type): $MutableComponent
public static "addShiftTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $List$Type<($Component$Type)>): void
public static "addShiftTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $List$Type<($Component$Type)>): void
public static "indexOfComponent"(arg0: $List$Type<($Component$Type)>, arg1: string): integer
public static "getCastTimeComponent"(arg0: $CastType$Type, arg1: string): $MutableComponent
public static "createSpellDescriptionTooltip"(arg0: $AbstractSpell$Type, arg1: $Font$Type): $List<($FormattedCharSequence)>
public static "formatScrollTooltip"(arg0: $ItemStack$Type, arg1: $LocalPlayer$Type): $List<($Component)>
public static "getStyleFor"(arg0: $Player$Type, arg1: $AbstractSpell$Type): $Style
public static "indexOfAdvancedText"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipsUtils$Type = ($TooltipsUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipsUtils_ = $TooltipsUtils$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$SyncedSpellData, $SyncedSpellData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$SyncedSpellData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IMagicEntity {

 "cancelCast"(): void
 "m_6844_"(arg0: $EquipmentSlot$Type): $ItemStack
 "setHasUsedSingleAttack"(arg0: boolean): void
 "setBurningDashDirectionData"(): void
 "startDrinkingPotion"(): void
 "notifyDangerousProjectile"(arg0: $Projectile$Type): void
 "setTeleportLocationBehindTarget"(arg0: integer): boolean
 "getHasUsedSingleAttack"(): boolean
 "isCasting"(): boolean
 "isDrinkingPotion"(): boolean
 "castComplete"(): void
 "setSyncedSpellData"(arg0: $SyncedSpellData$Type): void
 "initiateCastSpell"(arg0: $AbstractSpell$Type, arg1: integer): void
 "getMagicData"(): $MagicData
}

export namespace $IMagicEntity {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMagicEntity$Type = ($IMagicEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMagicEntity_ = $IMagicEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/config/$SpellConfigParameters" {
import {$SpellRarity, $SpellRarity$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity"

export class $SpellConfigParameters {
readonly "MAX_LEVEL": integer
readonly "MIN_RARITY": $SpellRarity
readonly "MANA_MULTIPLIER": double
readonly "POWER_MULTIPLIER": double
readonly "COOLDOWN_IN_SECONDS": double
readonly "ENABLED": boolean
readonly "CAN_BE_CRAFTED": boolean

constructor(arg0: boolean, arg1: integer, arg2: $SpellRarity$Type, arg3: double, arg4: double, arg5: double, arg6: boolean)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellConfigParameters$Type = ($SpellConfigParameters);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellConfigParameters_ = $SpellConfigParameters$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$ModTags" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $ModTags {
static readonly "SCHOOL_FOCUS": $TagKey<($Item)>
static readonly "FIRE_FOCUS": $TagKey<($Item)>
static readonly "ICE_FOCUS": $TagKey<($Item)>
static readonly "LIGHTNING_FOCUS": $TagKey<($Item)>
static readonly "ENDER_FOCUS": $TagKey<($Item)>
static readonly "HOLY_FOCUS": $TagKey<($Item)>
static readonly "BLOOD_FOCUS": $TagKey<($Item)>
static readonly "EVOCATION_FOCUS": $TagKey<($Item)>
static readonly "ELDRITCH_FOCUS": $TagKey<($Item)>
static readonly "NATURE_FOCUS": $TagKey<($Item)>
static readonly "INSCRIBED_RUNES": $TagKey<($Item)>
static readonly "SPECTRAL_HAMMER_MINEABLE": $TagKey<($Block)>
static readonly "GUARDED_BY_WIZARDS": $TagKey<($Block)>
static readonly "WAYWARD_COMPASS_LOCATOR": $TagKey<($Structure)>
static readonly "ALWAYS_HEAL": $TagKey<($EntityType<(any)>)>
static readonly "CANT_ROOT": $TagKey<($EntityType<(any)>)>
static readonly "VILLAGE_ALLIES": $TagKey<($EntityType<(any)>)>
static readonly "CANT_USE_PORTAL": $TagKey<($EntityType<(any)>)>
static readonly "NO_DEFAULT_SPAWNS": $TagKey<($Biome)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModTags$Type = ($ModTags);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModTags_ = $ModTags$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$TruthseekerItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ExtendedSwordItem, $ExtendedSwordItem$Type} from "packages/io/redspace/ironsspellbooks/api/item/weapons/$ExtendedSwordItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TruthseekerItem extends $ExtendedSwordItem {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TruthseekerItem$Type = ($TruthseekerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TruthseekerItem_ = $TruthseekerItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$ExtendedFireworkRocket" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$FireworkRocketEntity, $FireworkRocketEntity$Type} from "packages/net/minecraft/world/entity/projectile/$FireworkRocketEntity"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$OptionalInt, $OptionalInt$Type} from "packages/java/util/$OptionalInt"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ExtendedFireworkRocket extends $FireworkRocketEntity implements $AntiMagicSusceptible {
static readonly "DATA_ID_FIREWORKS_ITEM": $EntityDataAccessor<($ItemStack)>
static readonly "DATA_ATTACHED_TO_TARGET": $EntityDataAccessor<($OptionalInt)>
 "life": integer
 "lifetime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $ItemStack$Type, arg2: $Entity$Type, arg3: double, arg4: double, arg5: double, arg6: boolean, arg7: float)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "tick"(): void
public "getDamage"(): float
public "shoot"(arg0: double, arg1: double, arg2: double, arg3: float, arg4: float): void
get "damage"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedFireworkRocket$Type = ($ExtendedFireworkRocket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedFireworkRocket_ = $ExtendedFireworkRocket$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/blood_slash/$BloodSlashProjectile" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BloodSlashProjectile extends $Projectile implements $AntiMagicSusceptible {
readonly "animationSeed": integer
 "oldBB": $AABB
 "animationTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type, arg2: $LivingEntity$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "getRadius"(): float
public "setRadius"(arg0: float): void
public "shoot"(arg0: $Vec3$Type): void
public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "spawnParticles"(): void
public "tick"(): void
public "onSyncedDataUpdated"(arg0: $EntityDataAccessor$Type<(any)>): void
public "setDamage"(arg0: float): void
public "refreshDimensions"(): void
get "radius"(): float
set "radius"(value: float)
set "damage"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodSlashProjectile$Type = ($BloodSlashProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodSlashProjectile_ = $BloodSlashProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$CodeTimer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CodeTimer {

constructor()

public "add"(arg0: string): void
public "toString"(): string
public "getOutput"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CodeTimer$Type = ($CodeTimer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CodeTimer_ = $CodeTimer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$PortalFrameParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $PortalFrameParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double)

public "m_6355_"(arg0: float): integer
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortalFrameParticle$Type = ($PortalFrameParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortalFrameParticle_ = $PortalFrameParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$PlanarSightEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $PlanarSightEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlanarSightEffect$Type = ($PlanarSightEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlanarSightEffect_ = $PlanarSightEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$MagmaBombSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $MagmaBombSpell extends $AbstractSpell {

constructor()

public "getRadius"(arg0: integer, arg1: $LivingEntity$Type): float
public "getAoeDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getCastStartAnimation"(): $AnimationHolder
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagmaBombSpell$Type = ($MagmaBombSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagmaBombSpell_ = $MagmaBombSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/$EldritchResearchScreen" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EldritchResearchScreen$SpellNode, $EldritchResearchScreen$SpellNode$Type} from "packages/io/redspace/ironsspellbooks/gui/$EldritchResearchScreen$SpellNode"

export class $EldritchResearchScreen extends $Screen {
static readonly "WINDOW_WIDTH": integer
static readonly "WINDOW_HEIGHT": integer
static readonly "WINDOW_INSIDE_WIDTH": integer
static readonly "WINDOW_INSIDE_HEIGHT": integer
static readonly "BACKGROUND_TILE_WIDTH": integer
static readonly "BACKGROUND_TILE_HEIGHT": integer
static readonly "BACKGROUND_TILE_COUNT_X": integer
static readonly "BACKGROUND_TILE_COUNT_Y": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Component$Type, arg1: $InteractionHand$Type)

public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isPauseScreen"(): boolean
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public static "buildTooltip"(arg0: $AbstractSpell$Type, arg1: $Font$Type): $List<($FormattedCharSequence)>
public "isHoveringNode"(arg0: $EldritchResearchScreen$SpellNode$Type, arg1: integer, arg2: integer): boolean
get "pauseScreen"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EldritchResearchScreen$Type = ($EldritchResearchScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EldritchResearchScreen_ = $EldritchResearchScreen$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/icicle/$IcicleRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IcicleProjectile, $IcicleProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/icicle/$IcicleProjectile"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $IcicleRenderer extends $EntityRenderer<($IcicleProjectile)> {
static readonly "TEXTURE": $ResourceLocation
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $IcicleProjectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "createBodyLayer"(): $LayerDefinition
public "getTextureLocation"(arg0: $IcicleProjectile$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IcicleRenderer$Type = ($IcicleRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IcicleRenderer_ = $IcicleRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/electrocute/$ElectrocuteProjectile" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$AbstractConeProjectile, $AbstractConeProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractConeProjectile"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ElectrocuteProjectile extends $AbstractConeProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "generateLightningBeams"(): void
public "spawnParticles"(): void
public "getAge"(): integer
public static "generateBranch"(arg0: $Vec3$Type, arg1: integer, arg2: float, arg3: integer): $List<($Vec3)>
public static "randomVector"(arg0: float): $Vec3
public "getBeamCache"(): $List<($Vec3)>
public "shouldRender"(arg0: double, arg1: double, arg2: double): boolean
public "shouldRenderAtSqrDistance"(arg0: double): boolean
get "age"(): integer
get "beamCache"(): $List<($Vec3)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElectrocuteProjectile$Type = ($ElectrocuteProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElectrocuteProjectile_ = $ElectrocuteProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractShieldEntity" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AbstractShieldEntity extends $Entity implements $AntiMagicSusceptible {
 "hurtThisTick": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: float)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "takeDamage"(arg0: $DamageSource$Type, arg1: float, arg2: $Vec3$Type): void
public "getHealth"(): float
public "getVoxels"(): $List<($VoxelShape)>
public "tick"(): void
public "setId"(arg0: integer): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "setHealth"(arg0: float): void
public "isMultipartEntity"(): boolean
public "getParts"(): ($PartEntity<(any)>)[]
public "canBeCollidedWith"(): boolean
public "canCollideWith"(arg0: $Entity$Type): boolean
get "health"(): float
get "voxels"(): $List<($VoxelShape)>
set "id"(value: integer)
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
set "health"(value: float)
get "multipartEntity"(): boolean
get "parts"(): ($PartEntity<(any)>)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractShieldEntity$Type = ($AbstractShieldEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractShieldEntity_ = $AbstractShieldEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$InkItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpellRarity, $SpellRarity$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $InkItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $SpellRarity$Type)

public static "getInkForRarity"(arg0: $SpellRarity$Type): $InkItem
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getRarity"(): $SpellRarity
get "rarity"(): $SpellRarity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InkItem$Type = ($InkItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InkItem_ = $InkItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundSyncTargetingData" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ClientboundSyncTargetingData {

constructor(arg0: $FriendlyByteBuf$Type)
constructor(arg0: $AbstractSpell$Type, arg1: $List$Type<($UUID$Type)>)
constructor(arg0: $LivingEntity$Type, arg1: $AbstractSpell$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundSyncTargetingData$Type = ($ClientboundSyncTargetingData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundSyncTargetingData_ = $ClientboundSyncTargetingData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$HeartstopSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $HeartstopSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeartstopSpell$Type = ($HeartstopSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeartstopSpell_ = $HeartstopSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/black_hole/$BlackHoleRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlackHole, $BlackHole$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/black_hole/$BlackHole"

export class $BlackHoleRenderer extends $EntityRenderer<($BlackHole)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $BlackHole$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $BlackHole$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackHoleRenderer$Type = ($BlackHoleRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackHoleRenderer_ = $BlackHoleRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastInstance" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$ISerializable, $ISerializable$Type} from "packages/io/redspace/ironsspellbooks/api/network/$ISerializable"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$INBTSerializable, $INBTSerializable$Type} from "packages/net/minecraftforge/common/util/$INBTSerializable"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $RecastInstance implements $ISerializable, $INBTSerializable<($CompoundTag)> {

constructor()
constructor(arg0: string, arg1: integer, arg2: integer, arg3: integer, arg4: $CastSource$Type, arg5: $ICastDataSerializable$Type)

public "toString"(): string
public "getCastData"(): $ICastDataSerializable
public "getTicksToLive"(): integer
public "getTicksRemaining"(): integer
public "getTotalRecasts"(): integer
public "readFromBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getRemainingRecasts"(): integer
public "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
public "getSpellId"(): string
public "getSpellLevel"(): integer
public "getCastSource"(): $CastSource
get "castData"(): $ICastDataSerializable
get "ticksToLive"(): integer
get "ticksRemaining"(): integer
get "totalRecasts"(): integer
get "remainingRecasts"(): integer
get "spellId"(): string
get "spellLevel"(): integer
get "castSource"(): $CastSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecastInstance$Type = ($RecastInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecastInstance_ = $RecastInstance$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$CreateDebugWizardCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CreateDebugWizardCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateDebugWizardCommand$Type = ($CreateDebugWizardCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateDebugWizardCommand_ = $CreateDebugWizardCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$GenerateModList" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $GenerateModList {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenerateModList$Type = ($GenerateModList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenerateModList_ = $GenerateModList$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$ShrivingStoneItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ShrivingStoneItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShrivingStoneItem$Type = ($ShrivingStoneItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShrivingStoneItem_ = $ShrivingStoneItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundSyncAnimation" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$IAnimatedAttacker, $IAnimatedAttacker$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$IAnimatedAttacker"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClientboundSyncAnimation<T extends ($Entity) & ($IAnimatedAttacker)> {

constructor(arg0: string, arg1: T)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundSyncAnimation$Type<T> = ($ClientboundSyncAnimation<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundSyncAnimation_<T> = $ClientboundSyncAnimation$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$FeatureRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$BiomeModifier, $BiomeModifier$Type} from "packages/net/minecraftforge/common/world/$BiomeModifier"
import {$PlacedFeature, $PlacedFeature$Type} from "packages/net/minecraft/world/level/levelgen/placement/$PlacedFeature"
import {$ConfiguredFeature, $ConfiguredFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$ConfiguredFeature"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$BootstapContext, $BootstapContext$Type} from "packages/net/minecraft/data/worldgen/$BootstapContext"

export class $FeatureRegistry {
static readonly "ARCANE_DEBRIS_FEATURE": $ResourceKey<($ConfiguredFeature<(any), (any)>)>
static readonly "ARCANE_DEBRIS_PLACEMENT": $ResourceKey<($PlacedFeature)>
static readonly "ADD_ARCANE_DEBRIS_ORE": $ResourceKey<($BiomeModifier)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
public static "bootstrapPlacedFeature"(arg0: $BootstapContext$Type<($PlacedFeature$Type)>): void
public static "bootstrapBiomeModifier"(arg0: $BootstapContext$Type<($BiomeModifier$Type)>): void
public static "bootstrapConfiguredFeature"(arg0: $BootstapContext$Type<($ConfiguredFeature$Type<(any), (any)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FeatureRegistry$Type = ($FeatureRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FeatureRegistry_ = $FeatureRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BaseEntityBlock, $BaseEntityBlock$Type} from "packages/net/minecraft/world/level/block/$BaseEntityBlock"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $AlchemistCauldronBlock extends $BaseEntityBlock {
static readonly "LIT": $BooleanProperty
static readonly "MAX_LEVELS": integer
static readonly "LEVEL": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public static "getLevel"(arg0: $BlockState$Type): integer
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "isFireSource"(arg0: $BlockState$Type): boolean
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "entityInside"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public static "isBoiling"(arg0: $BlockState$Type): boolean
public static "isLit"(arg0: $BlockState$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistCauldronBlock$Type = ($AlchemistCauldronBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistCauldronBlock_ = $AlchemistCauldronBlock$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/$EldritchResearchScreen$SpellNode" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $EldritchResearchScreen$SpellNode extends $Record {


public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "x"(): integer
public "y"(): integer
public "spell"(): $AbstractSpell
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EldritchResearchScreen$SpellNode$Type = ($EldritchResearchScreen$SpellNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EldritchResearchScreen$SpellNode_ = $EldritchResearchScreen$SpellNode$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/void_tentacle/$VoidTentacleRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$GeoLivingEntityRenderer, $GeoLivingEntityRenderer$Type} from "packages/io/redspace/ironsspellbooks/render/$GeoLivingEntityRenderer"
import {$VoidTentacle, $VoidTentacle$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/void_tentacle/$VoidTentacle"

export class $VoidTentacleRenderer extends $GeoLivingEntityRenderer<($VoidTentacle)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VoidTentacleRenderer$Type = ($VoidTentacleRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VoidTentacleRenderer_ = $VoidTentacleRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$CreativeTabRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$BuildCreativeModeTabContentsEvent, $BuildCreativeModeTabContentsEvent$Type} from "packages/net/minecraftforge/event/$BuildCreativeModeTabContentsEvent"

export class $CreativeTabRegistry {
static readonly "EQUIPMENT_TAB": $RegistryObject<($CreativeModeTab)>
static readonly "MATERIALS_TAB": $RegistryObject<($CreativeModeTab)>
static readonly "SCROLLS_TAB": $RegistryObject<($CreativeModeTab)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
public static "fillCreativeTabs"(arg0: $BuildCreativeModeTabContentsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreativeTabRegistry$Type = ($CreativeTabRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreativeTabRegistry_ = $CreativeTabRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$BloodStaffItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$StaffItem, $StaffItem$Type} from "packages/io/redspace/ironsspellbooks/item/weapons/$StaffItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BloodStaffItem extends $StaffItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodStaffItem$Type = ($BloodStaffItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodStaffItem_ = $BloodStaffItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$PriestArmorModel" {
import {$PriestArmorItem, $PriestArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$PriestArmorItem"
import {$DefaultedItemGeoModel, $DefaultedItemGeoModel$Type} from "packages/software/bernie/geckolib/model/$DefaultedItemGeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PriestArmorModel extends $DefaultedItemGeoModel<($PriestArmorItem)> {

constructor()

public "getTextureResource"(arg0: $PriestArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $PriestArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $PriestArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PriestArmorModel$Type = ($PriestArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PriestArmorModel_ = $PriestArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$ChainCreeperSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ChainCreeperSpell extends $AbstractSpell {

constructor()

public static "summonCreeperRing"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $Vec3$Type, arg3: float, arg4: integer): void
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainCreeperSpell$Type = ($ChainCreeperSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainCreeperSpell_ = $ChainCreeperSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingEmissiveLayer" {
import {$GeoEntityRenderer, $GeoEntityRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoEntityRenderer"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$GeoRenderLayer, $GeoRenderLayer$Type} from "packages/software/bernie/geckolib/renderer/layer/$GeoRenderLayer"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $DeadKingEmissiveLayer extends $GeoRenderLayer<($AbstractSpellCastingMob)> {
static readonly "TEXTURE_NORMAL": $ResourceLocation
static readonly "TEXTURE_ENRAGED": $ResourceLocation

constructor(arg0: $GeoEntityRenderer$Type<(any)>)

public "render"(arg0: $PoseStack$Type, arg1: $AbstractSpellCastingMob$Type, arg2: $BakedGeoModel$Type, arg3: $RenderType$Type, arg4: $MultiBufferSource$Type, arg5: $VertexConsumer$Type, arg6: float, arg7: integer, arg8: integer): void
public static "renderType"(arg0: $ResourceLocation$Type): $RenderType
public static "currentModel"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public static "currentTexture"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingEmissiveLayer$Type = ($DeadKingEmissiveLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingEmissiveLayer_ = $DeadKingEmissiveLayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$CastingItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$IMultihandWeapon, $IMultihandWeapon$Type} from "packages/io/redspace/ironsspellbooks/item/weapons/$IMultihandWeapon"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CastingItem extends $Item implements $IMultihandWeapon {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "shouldCauseReequipAnimation"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getUseDuration"(arg0: $ItemStack$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "releaseUsing"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type, arg3: integer): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getUseAnimation"(arg0: $ItemStack$Type): $UseAnim
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CastingItem$Type = ($CastingItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CastingItem_ = $CastingItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/events/$ModifySpellLevelEvent" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ModifySpellLevelEvent extends $Event {

constructor(arg0: $AbstractSpell$Type, arg1: $LivingEntity$Type, arg2: integer, arg3: integer)
constructor()

public "getLevel"(): integer
public "setLevel"(arg0: integer): void
public "addLevels"(arg0: integer): void
public "getBaseLevel"(): integer
public "isCancelable"(): boolean
public "getEntity"(): $LivingEntity
public "getSpell"(): $AbstractSpell
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "level"(): integer
set "level"(value: integer)
get "baseLevel"(): integer
get "cancelable"(): boolean
get "entity"(): $LivingEntity
get "spell"(): $AbstractSpell
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModifySpellLevelEvent$Type = ($ModifySpellLevelEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModifySpellLevelEvent_ = $ModifySpellLevelEvent$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$ScrollModel" {
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ModelBakery, $ModelBakery$Type} from "packages/net/minecraft/client/resources/model/$ModelBakery"
import {$NBTOverrideItemModel, $NBTOverrideItemModel$Type} from "packages/io/redspace/ironsspellbooks/render/$NBTOverrideItemModel"

export class $ScrollModel extends $NBTOverrideItemModel {

constructor(arg0: $BakedModel$Type, arg1: $ModelBakery$Type)

public static "getScrollModelLocation"(arg0: $SchoolType$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollModel$Type = ($ScrollModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollModel_ = $ScrollModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$FireBreathSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FireBreathSpell extends $AbstractSpell {

constructor()

public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireBreathSpell$Type = ($FireBreathSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireBreathSpell_ = $FireBreathSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$BlastwaveParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $BlastwaveParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getQuadSize"(arg0: float): float
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "shouldCull"(): boolean
public "render"(arg0: $VertexConsumer$Type, arg1: $Camera$Type, arg2: float): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlastwaveParticle$Type = ($BlastwaveParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlastwaveParticle_ = $BlastwaveParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$CryomancerArmorModel" {
import {$DefaultedItemGeoModel, $DefaultedItemGeoModel$Type} from "packages/software/bernie/geckolib/model/$DefaultedItemGeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CryomancerArmorItem, $CryomancerArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$CryomancerArmorItem"

export class $CryomancerArmorModel extends $DefaultedItemGeoModel<($CryomancerArmorItem)> {

constructor()

public "getTextureResource"(arg0: $CryomancerArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $CryomancerArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $CryomancerArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CryomancerArmorModel$Type = ($CryomancerArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CryomancerArmorModel_ = $CryomancerArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/magma_ball/$MagmaBallRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FireBomb, $FireBomb$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/magma_ball/$FireBomb"

export class $MagmaBallRenderer extends $EntityRenderer<($FireBomb)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $FireBomb$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $FireBomb$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagmaBallRenderer$Type = ($MagmaBallRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagmaBallRenderer_ = $MagmaBallRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$BlessingOfLifeSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $BlessingOfLifeSpell extends $AbstractSpell {

constructor()

public "getTargetingColor"(): $Vector3f
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "targetingColor"(): $Vector3f
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlessingOfLifeSpell$Type = ($BlessingOfLifeSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlessingOfLifeSpell_ = $BlessingOfLifeSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/guiding_bolt/$GuidingBoltProjectile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $GuidingBoltProjectile extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type, arg2: $LivingEntity$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuidingBoltProjectile$Type = ($GuidingBoltProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuidingBoltProjectile_ = $GuidingBoltProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/tetra/$TetraProxy" {
import {$ITetraProxy, $ITetraProxy$Type} from "packages/io/redspace/ironsspellbooks/compat/tetra/$ITetraProxy"

export class $TetraProxy {
static "PROXY": $ITetraProxy

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TetraProxy$Type = ($TetraProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TetraProxy_ = $TetraProxy$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$AcidOrbSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $AcidOrbSpell extends $AbstractSpell {

constructor()

public "getRadius"(arg0: integer, arg1: $LivingEntity$Type): float
public "getRendAmplifier"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getRendDuration"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getCastFinishAnimation"(): $AnimationHolder
public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AcidOrbSpell$Type = ($AcidOrbSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AcidOrbSpell_ = $AcidOrbSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$ZapParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $ZapParticle extends $TextureSheetParticle {
static "PARTICLE_EMISSIVE": $ParticleRenderType
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "render"(arg0: $VertexConsumer$Type, arg1: $Camera$Type, arg2: float): void
public "randomVector3f"(arg0: $RandomSource$Type, arg1: float): $Vector3f
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZapParticle$Type = ($ZapParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZapParticle_ = $ZapParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedPolarBear" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MagicSummon, $MagicSummon$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$MagicSummon"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SummonTimer, $SummonTimer$Type} from "packages/io/redspace/ironsspellbooks/effect/$SummonTimer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$PolarBear, $PolarBear$Type} from "packages/net/minecraft/world/entity/animal/$PolarBear"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SummonedPolarBear extends $PolarBear implements $MagicSummon {
static readonly "BABY_START_AGE": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "setSummoner"(arg0: $LivingEntity$Type): void
public "onUnSummon"(): void
public "die"(arg0: $DamageSource$Type): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "isOnSameTeam"(arg0: $Entity$Type): boolean
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "getControllingPassenger"(): $LivingEntity
public "m_8099_"(): void
public "mobInteract"(arg0: $Player$Type, arg1: $InteractionHand$Type): $InteractionResult
public static "createAttributes"(): $AttributeSupplier$Builder
public "getSummoner"(): $LivingEntity
public "getStepHeight"(): float
public "onRemovedFromWorld"(): void
public "onAntiMagic"(arg0: $MagicData$Type): void
public "onDeathHelper"(): void
public "isAlliedHelper"(arg0: $Entity$Type): boolean
public "shouldIgnoreDamage"(arg0: $DamageSource$Type): boolean
public "onRemovedHelper"(arg0: $Entity$Type, arg1: $SummonTimer$Type): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "canAttack"(arg0: $LivingEntity$Type): boolean
public "setTarget"(arg0: $LivingEntity$Type): void
public "getTarget"(): $LivingEntity
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "summoner"(value: $LivingEntity$Type)
get "controllingPassenger"(): $LivingEntity
get "summoner"(): $LivingEntity
get "stepHeight"(): float
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
set "target"(value: $LivingEntity$Type)
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonedPolarBear$Type = ($SummonedPolarBear);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonedPolarBear_ = $SummonedPolarBear$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$BlightSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $BlightSpell extends $AbstractSpell {

constructor()

public "getDuration"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getAmplifier"(arg0: integer, arg1: $LivingEntity$Type): integer
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlightSpell$Type = ($BlightSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlightSpell_ = $BlightSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/raise_dead_summons/$SummonedSkeletonModel" {
import {$SummonedSkeleton, $SummonedSkeleton$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedSkeleton"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SummonedSkeletonModel extends $GeoModel<($SummonedSkeleton)> {
static readonly "TEXTURE": $ResourceLocation
static readonly "MODEL": $ResourceLocation
static readonly "ANIMATIONS": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $SummonedSkeleton$Type): $ResourceLocation
public "getModelResource"(arg0: $SummonedSkeleton$Type): $ResourceLocation
public "getAnimationResource"(arg0: $SummonedSkeleton$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonedSkeletonModel$Type = ($SummonedSkeletonModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonedSkeletonModel_ = $SummonedSkeletonModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$PotionRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/net/minecraftforge/registries/$DeferredRegister"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"

export class $PotionRegistry {
static readonly "POTIONS": $DeferredRegister<($Potion)>
static readonly "INSTANT_MANA_ONE": $RegistryObject<($Potion)>
static readonly "INSTANT_MANA_TWO": $RegistryObject<($Potion)>
static readonly "INSTANT_MANA_THREE": $RegistryObject<($Potion)>
static readonly "INSTANT_MANA_FOUR": $RegistryObject<($Potion)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
public static "addRecipes"(arg0: $FMLCommonSetupEvent$Type): void
public static "addContainerMix"(arg0: $Item$Type, arg1: $Item$Type, arg2: $Item$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotionRegistry$Type = ($PotionRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotionRegistry_ = $PotionRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/poison_cloud/$PoisonCloud" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PoisonCloud extends $AoeEntity {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonCloud$Type = ($PoisonCloud);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonCloud_ = $PoisonCloud$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/util/$UpdateClient" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"

export class $UpdateClient {

constructor()

public static "SendManaUpdate"(arg0: $ServerPlayer$Type, arg1: $MagicData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdateClient$Type = ($UpdateClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdateClient_ = $UpdateClient$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$BlockRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$ScrollForgeTile, $ScrollForgeTile$Type} from "packages/io/redspace/ironsspellbooks/block/scroll_forge/$ScrollForgeTile"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PedestalTile, $PedestalTile$Type} from "packages/io/redspace/ironsspellbooks/block/pedestal/$PedestalTile"
import {$AlchemistCauldronTile, $AlchemistCauldronTile$Type} from "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronTile"

export class $BlockRegistry {
static readonly "INSCRIPTION_TABLE_BLOCK": $RegistryObject<($Block)>
static readonly "SCROLL_FORGE_BLOCK": $RegistryObject<($Block)>
static readonly "PEDESTAL_BLOCK": $RegistryObject<($Block)>
static readonly "BLOOD_CAULDRON_BLOCK": $RegistryObject<($Block)>
static readonly "ARCANE_ANVIL_BLOCK": $RegistryObject<($Block)>
static readonly "ARCANE_DEBRIS": $RegistryObject<($Block)>
static readonly "ARMOR_PILE_BLOCK": $RegistryObject<($Block)>
static readonly "ALCHEMIST_CAULDRON": $RegistryObject<($Block)>
static readonly "FIREFLY_JAR": $RegistryObject<($Block)>
static readonly "SCROLL_FORGE_TILE": $RegistryObject<($BlockEntityType<($ScrollForgeTile)>)>
static readonly "PEDESTAL_TILE": $RegistryObject<($BlockEntityType<($PedestalTile)>)>
static readonly "ALCHEMIST_CAULDRON_TILE": $RegistryObject<($BlockEntityType<($AlchemistCauldronTile)>)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockRegistry$Type = ($BlockRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockRegistry_ = $BlockRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/fire_breath/$FireBreathProjectile" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$AbstractConeProjectile, $AbstractConeProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractConeProjectile"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FireBreathProjectile extends $AbstractConeProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "spawnParticles"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireBreathProjectile$Type = ($FireBreathProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireBreathProjectile_ = $FireBreathProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/util/$CameraShakeManager" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ViewportEvent$ComputeCameraAngles, $ViewportEvent$ComputeCameraAngles$Type} from "packages/net/minecraftforge/client/event/$ViewportEvent$ComputeCameraAngles"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$CameraShakeData, $CameraShakeData$Type} from "packages/io/redspace/ironsspellbooks/api/util/$CameraShakeData"

export class $CameraShakeManager {
static readonly "cameraShakeData": $ArrayList<($CameraShakeData)>
static "clientCameraShakeData": $ArrayList<($CameraShakeData)>

constructor()

public static "addCameraShake"(arg0: $CameraShakeData$Type): void
public static "doSync"(arg0: $ServerPlayer$Type): void
public static "handleCameraShake"(arg0: $ViewportEvent$ComputeCameraAngles$Type): void
public static "serverTick"(arg0: $TickEvent$ServerTickEvent$Type): void
public static "removeCameraShake"(arg0: $CameraShakeData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CameraShakeManager$Type = ($CameraShakeManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CameraShakeManager_ = $CameraShakeManager$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$ArcaneAnvilRecipeMaker" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IVanillaRecipeFactory, $IVanillaRecipeFactory$Type} from "packages/mezz/jei/api/recipe/vanilla/$IVanillaRecipeFactory"
import {$ArcaneAnvilRecipe, $ArcaneAnvilRecipe$Type} from "packages/io/redspace/ironsspellbooks/jei/$ArcaneAnvilRecipe"
import {$IIngredientManager, $IIngredientManager$Type} from "packages/mezz/jei/api/runtime/$IIngredientManager"

export class $ArcaneAnvilRecipeMaker {


public static "getVisibleItems"(): $List<($Item)>
public static "getRecipes"(arg0: $IVanillaRecipeFactory$Type, arg1: $IIngredientManager$Type): $List<($ArcaneAnvilRecipe)>
get "visibleItems"(): $List<($Item)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcaneAnvilRecipeMaker$Type = ($ArcaneAnvilRecipeMaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcaneAnvilRecipeMaker_ = $ArcaneAnvilRecipeMaker$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$BlazeStormSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BlazeStormSpell extends $AbstractSpell {

constructor()

public "shootBlazeFireball"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type): void
public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "getCastTime"(arg0: integer): integer
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "onServerCastTick"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): void
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlazeStormSpell$Type = ($BlazeStormSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlazeStormSpell_ = $BlazeStormSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datagen/$DamageTypeTagGenerator" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$TagsProvider, $TagsProvider$Type} from "packages/net/minecraft/data/tags/$TagsProvider"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $DamageTypeTagGenerator extends $TagsProvider<($DamageType)> {
static readonly "BYPASS_EVASION": $TagKey<($DamageType)>
static readonly "LONG_CAST_IGNORE": $TagKey<($DamageType)>
static readonly "FIRE_MAGIC": $TagKey<($DamageType)>
static readonly "ICE_MAGIC": $TagKey<($DamageType)>
static readonly "LIGHTNING_MAGIC": $TagKey<($DamageType)>
static readonly "HOLY_MAGIC": $TagKey<($DamageType)>
static readonly "ENDER_MAGIC": $TagKey<($DamageType)>
static readonly "BLOOD_MAGIC": $TagKey<($DamageType)>
static readonly "EVOCATION_MAGIC": $TagKey<($DamageType)>
static readonly "ELDRITCH_MAGIC": $TagKey<($DamageType)>
static readonly "NATURE_MAGIC": $TagKey<($DamageType)>

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg2: $ExistingFileHelper$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageTypeTagGenerator$Type = ($DamageTypeTagGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageTypeTagGenerator_ = $DamageTypeTagGenerator$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$PlayerCooldowns" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$CooldownInstance, $CooldownInstance$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$CooldownInstance"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PlayerCooldowns {
static readonly "SPELL_ID": string
static readonly "SPELL_COOLDOWN": string
static readonly "COOLDOWN_REMAINING": string

constructor()

public "tick"(arg0: integer): void
public "clearCooldowns"(): void
public "getCooldownPercent"(arg0: $AbstractSpell$Type): float
public "getSpellCooldowns"(): $Map<(string), ($CooldownInstance)>
public "syncToPlayer"(arg0: $ServerPlayer$Type): void
public "setTickBuffer"(arg0: integer): void
public "removeCooldown"(arg0: string): boolean
public "decrementCooldown"(arg0: $CooldownInstance$Type, arg1: integer): boolean
public "isOnCooldown"(arg0: $AbstractSpell$Type): boolean
public "addCooldown"(arg0: $AbstractSpell$Type, arg1: integer): void
public "addCooldown"(arg0: $AbstractSpell$Type, arg1: integer, arg2: integer): void
public "addCooldown"(arg0: string, arg1: integer): void
public "addCooldown"(arg0: string, arg1: integer, arg2: integer): void
public "loadNBTData"(arg0: $ListTag$Type): void
public "hasCooldownsActive"(): boolean
public "saveNBTData"(): $ListTag
get "spellCooldowns"(): $Map<(string), ($CooldownInstance)>
set "tickBuffer"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerCooldowns$Type = ($PlayerCooldowns);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerCooldowns_ = $PlayerCooldowns$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$FireParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $FireParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "m_6355_"(arg0: float): integer
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireParticle$Type = ($FireParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireParticle_ = $FireParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/events/$InscribeSpellEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"

export class $InscribeSpellEvent extends $PlayerEvent {

constructor()
constructor(arg0: $Player$Type, arg1: $SpellData$Type)

public "isCancelable"(): boolean
public "getSpellData"(): $SpellData
public "getListenerList"(): $ListenerList
get "cancelable"(): boolean
get "spellData"(): $SpellData
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InscribeSpellEvent$Type = ($InscribeSpellEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InscribeSpellEvent_ = $InscribeSpellEvent$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/creeper_head/$CreeperHeadRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$WitherSkullRenderer, $WitherSkullRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$WitherSkullRenderer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$WitherSkull, $WitherSkull$Type} from "packages/net/minecraft/world/entity/projectile/$WitherSkull"

export class $CreeperHeadRenderer extends $WitherSkullRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $WitherSkull$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreeperHeadRenderer$Type = ($CreeperHeadRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreeperHeadRenderer_ = $CreeperHeadRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/setup/$Messages" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $Messages {

constructor()

public static "register"(): void
public static "sendToAllPlayers"<MSG>(arg0: MSG): void
public static "sendToPlayer"<MSG>(arg0: MSG, arg1: $ServerPlayer$Type): void
public static "sendToPlayersTrackingEntity"<MSG>(arg0: MSG, arg1: $Entity$Type, arg2: boolean): void
public static "sendToPlayersTrackingEntity"<MSG>(arg0: MSG, arg1: $Entity$Type): void
public static "sendToServer"<MSG>(arg0: MSG): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Messages$Type = ($Messages);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Messages_ = $Messages$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/magma_ball/$FireBomb" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FireBomb extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "setAoeDamage"(arg0: float): void
public "getAoeDamage"(): float
public "getImpactSound"(): $Optional<($SoundEvent)>
public "createFireField"(arg0: $Vec3$Type): void
public "getSpeed"(): float
set "aoeDamage"(value: float)
get "aoeDamage"(): float
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireBomb$Type = ($FireBomb);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireBomb_ = $FireBomb$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingCorpseEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DeadKingCorpseEntity extends $AbstractSpellCastingMob {
static readonly "ambienceRange": integer
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "isPickable"(): boolean
public "tick"(): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "shouldBeExtraAnimated"(): boolean
public "shouldAlwaysAnimateHead"(): boolean
public "isPushable"(): boolean
public "isPersistenceRequired"(): boolean
public "triggered"(): boolean
public "canBeCollidedWith"(): boolean
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "pickable"(): boolean
get "pushable"(): boolean
get "persistenceRequired"(): boolean
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingCorpseEntity$Type = ($DeadKingCorpseEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingCorpseEntity_ = $DeadKingCorpseEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$FindSupportableTargetGoal" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$SupportMob, $SupportMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SupportMob"
import {$NearestAttackableTargetGoal, $NearestAttackableTargetGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/target/$NearestAttackableTargetGoal"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $FindSupportableTargetGoal<M extends ($Mob) & ($SupportMob)> extends $NearestAttackableTargetGoal<($LivingEntity)> {
readonly "targetType": $Class<(T)>
readonly "randomInterval": integer
readonly "mob": $Mob
readonly "mustSee": boolean
readonly "mustReach": boolean

constructor(arg0: M, arg1: $Class$Type<(any)>, arg2: boolean, arg3: $Predicate$Type<($LivingEntity$Type)>)

public "start"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FindSupportableTargetGoal$Type<M> = ($FindSupportableTargetGoal<(M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FindSupportableTargetGoal_<M> = $FindSupportableTargetGoal$Type<(M)>;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/eldritch/$EldritchBlastSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$AbstractEldritchSpell, $AbstractEldritchSpell$Type} from "packages/io/redspace/ironsspellbooks/spells/eldritch/$AbstractEldritchSpell"

export class $EldritchBlastSpell extends $AbstractEldritchSpell {
static readonly "ELDRITCH_OBFUSCATED_STYLE": $Style

constructor()

public static "getRange"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "getRecastCount"(arg0: integer, arg1: $LivingEntity$Type): integer
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EldritchBlastSpell$Type = ($EldritchBlastSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EldritchBlastSpell_ = $EldritchBlastSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$CommandArgumentRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"

export class $CommandArgumentRegistry {

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandArgumentRegistry$Type = ($CommandArgumentRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandArgumentRegistry_ = $CommandArgumentRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$FlamingBarrageSpell" {
import {$RecastResult, $RecastResult$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastResult"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$RecastInstance, $RecastInstance$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $FlamingBarrageSpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getEmptyCastData"(): $ICastDataSerializable
public "getDefaultConfig"(): $DefaultConfig
public "getRecastCount"(arg0: integer, arg1: $LivingEntity$Type): integer
public "onRecastFinished"(arg0: $ServerPlayer$Type, arg1: $RecastInstance$Type, arg2: $RecastResult$Type, arg3: $ICastDataSerializable$Type): void
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "emptyCastData"(): $ICastDataSerializable
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlamingBarrageSpell$Type = ($FlamingBarrageSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlamingBarrageSpell_ = $FlamingBarrageSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/magic/$IMagicManager" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export interface $IMagicManager {

 "addCooldown"(arg0: $ServerPlayer$Type, arg1: $AbstractSpell$Type, arg2: $CastSource$Type): void

(arg0: $ServerPlayer$Type, arg1: $AbstractSpell$Type, arg2: $CastSource$Type): void
}

export namespace $IMagicManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMagicManager$Type = ($IMagicManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMagicManager_ = $IMagicManager$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/fixers/$FixIsbSpellbook" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataFixerElement, $DataFixerElement$Type} from "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement"

export class $FixIsbSpellbook extends $DataFixerElement {

constructor()

public "runFixer"(arg0: $CompoundTag$Type): boolean
public "preScanValuesToMatch"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FixIsbSpellbook$Type = ($FixIsbSpellbook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FixIsbSpellbook_ = $FixIsbSpellbook$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$LegacySpellData" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $LegacySpellData {
static readonly "ISB_SPELL": string
static readonly "LEGACY_SPELL_TYPE": string
static readonly "SPELL_ID": string
static readonly "SPELL_LEVEL": string
static readonly "EMPTY": $LegacySpellData
 "displayName": $MutableComponent
readonly "spell": $AbstractSpell
readonly "spellLevel": integer

constructor(arg0: $AbstractSpell$Type, arg1: integer)

public static "getSpellData"(arg0: $ItemStack$Type): $LegacySpellData
public static "hasSpellData"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LegacySpellData$Type = ($LegacySpellData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LegacySpellData_ = $LegacySpellData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$SpellTargetingLayer" {
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SpellTargetingLayer {
static readonly "TEXTURE": $ResourceLocation

constructor()

public static "shouldRender"(arg0: $LivingEntity$Type): boolean
public static "renderTargetLayer"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellTargetingLayer$Type = ($SpellTargetingLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellTargetingLayer_ = $SpellTargetingLayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/wall_of_fire/$WallOfFireEntity" {
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractShieldEntity, $AbstractShieldEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractShieldEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $WallOfFireEntity extends $AbstractShieldEntity implements $IEntityAdditionalSpawnData {
 "hurtThisTick": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $Entity$Type, arg2: $List$Type<($Vec3$Type)>, arg3: float)

public "getOwner"(): $Entity
public "setOwner"(arg0: $Entity$Type): void
public "takeDamage"(arg0: $DamageSource$Type, arg1: float, arg2: $Vec3$Type): void
public "createShield"(): void
public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "getParts"(): ($PartEntity<(any)>)[]
get "owner"(): $Entity
set "owner"(value: $Entity$Type)
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "parts"(): ($PartEntity<(any)>)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallOfFireEntity$Type = ($WallOfFireEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallOfFireEntity_ = $WallOfFireEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$MagehunterVindicator" {
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Vindicator, $Vindicator$Type} from "packages/net/minecraft/world/entity/monster/$Vindicator"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MagehunterVindicator extends $Vindicator {
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagehunterVindicator$Type = ($MagehunterVindicator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagehunterVindicator_ = $MagehunterVindicator$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/cone_of_cold/$ConeOfColdRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ConeOfColdProjectile, $ConeOfColdProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/cone_of_cold/$ConeOfColdProjectile"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ConeOfColdRenderer extends $EntityRenderer<($ConeOfColdProjectile)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $ConeOfColdProjectile$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConeOfColdRenderer$Type = ($ConeOfColdRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConeOfColdRenderer_ = $ConeOfColdRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/blood_needle/$BloodNeedleRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$BloodNeedle, $BloodNeedle$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/blood_needle/$BloodNeedle"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BloodNeedleRenderer extends $EntityRenderer<($BloodNeedle)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $BloodNeedle$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $BloodNeedle$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodNeedleRenderer$Type = ($BloodNeedleRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodNeedleRenderer_ = $BloodNeedleRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundFortifyAreaParticles" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundFortifyAreaParticles {

constructor(arg0: $Vec3$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundFortifyAreaParticles$Type = ($ClientboundFortifyAreaParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundFortifyAreaParticles_ = $ClientboundFortifyAreaParticles$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/keeper/$KeeperEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Enemy, $Enemy$Type} from "packages/net/minecraft/world/entity/monster/$Enemy"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$IAnimatedAttacker, $IAnimatedAttacker$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$IAnimatedAttacker"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $KeeperEntity extends $AbstractSpellCastingMob implements $Enemy, $IAnimatedAttacker {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "fireImmune"(): boolean
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "isInvulnerableTo"(arg0: $DamageSource$Type): boolean
public "shouldAlwaysAnimateLegs"(): boolean
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "playAnimation"(arg0: string): void
public "isAnimating"(): boolean
public "getStepHeight"(): float
public "playAmbientSound"(): void
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "animating"(): boolean
get "stepHeight"(): float
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeeperEntity$Type = ($KeeperEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeeperEntity_ = $KeeperEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$UniqueItem" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $UniqueItem {

}

export namespace $UniqueItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UniqueItem$Type = ($UniqueItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UniqueItem_ = $UniqueItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/guiding_bolt/$GuidingBoltEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GuidingBoltEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuidingBoltEffect$Type = ($GuidingBoltEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuidingBoltEffect_ = $GuidingBoltEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$CommandRegistry" {
import {$RegisterCommandsEvent, $RegisterCommandsEvent$Type} from "packages/net/minecraftforge/event/$RegisterCommandsEvent"

export class $CommandRegistry {

constructor()

public static "onCommandsRegister"(arg0: $RegisterCommandsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandRegistry$Type = ($CommandRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandRegistry_ = $CommandRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundGuidingBoltManagerStopTracking" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClientboundGuidingBoltManagerStopTracking {

constructor(arg0: $Entity$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundGuidingBoltManagerStopTracking$Type = ($ClientboundGuidingBoltManagerStopTracking);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundGuidingBoltManagerStopTracking_ = $ClientboundGuidingBoltManagerStopTracking$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/ray_of_frost/$RayOfFrostRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$RayOfFrostVisualEntity, $RayOfFrostVisualEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/ray_of_frost/$RayOfFrostVisualEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Frustum, $Frustum$Type} from "packages/net/minecraft/client/renderer/culling/$Frustum"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $RayOfFrostRenderer extends $EntityRenderer<($RayOfFrostVisualEntity)> {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $RayOfFrostVisualEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "createBodyLayer"(): $LayerDefinition
public "shouldRender"(arg0: $RayOfFrostVisualEntity$Type, arg1: $Frustum$Type, arg2: double, arg3: double, arg4: double): boolean
public "getTextureLocation"(arg0: $RayOfFrostVisualEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RayOfFrostRenderer$Type = ($RayOfFrostRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RayOfFrostRenderer_ = $RayOfFrostRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/frozen_humanoid/$FrozenHumanoid" {
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FrozenHumanoid extends $LivingEntity {
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
 "entityJs$builder": any
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "isSitting"(): boolean
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "getMainArm"(): $HumanoidArm
public "isPickable"(): boolean
public "isBaby"(): boolean
public "setSummoner"(arg0: $LivingEntity$Type): void
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "getAttacktime"(): float
public "getLimbSwingAmount"(): float
public "getLimbSwing"(): float
public "tick"(): void
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "isAutoSpinAttack"(): boolean
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "setItemSlot"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): void
public "isPushable"(): boolean
public "setShatterDamage"(arg0: float): void
public "setDeathTimer"(arg0: integer): void
public "getSummoner"(): $LivingEntity
public "canBeCollidedWith"(): boolean
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "sitting"(): boolean
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pickable"(): boolean
get "baby"(): boolean
set "summoner"(value: $LivingEntity$Type)
get "attacktime"(): float
get "limbSwingAmount"(): float
get "limbSwing"(): float
get "autoSpinAttack"(): boolean
get "pushable"(): boolean
set "shatterDamage"(value: float)
set "deathTimer"(value: integer)
get "summoner"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrozenHumanoid$Type = ($FrozenHumanoid);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrozenHumanoid_ = $FrozenHumanoid$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$UpgradeOrbItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$UpgradeType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UpgradeOrbItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $UpgradeType$Type, arg1: $Item$Properties$Type)

public "getName"(arg0: $ItemStack$Type): $Component
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getUpgradeType"(): $UpgradeType
get "upgradeType"(): $UpgradeType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeOrbItem$Type = ($UpgradeOrbItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeOrbItem_ = $UpgradeOrbItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$FlamingStrikeSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FlamingStrikeSpell extends $AbstractSpell {

constructor()

public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getEffectiveCastTime"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getCastFinishAnimation"(): $AnimationHolder
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "canBeInterrupted"(arg0: $Player$Type): boolean
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlamingStrikeSpell$Type = ($FlamingStrikeSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlamingStrikeSpell_ = $FlamingStrikeSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$ClientInputEvents" {
import {$InputEvent$Key, $InputEvent$Key$Type} from "packages/net/minecraftforge/client/event/$InputEvent$Key"
import {$InputEvent$InteractionKeyMappingTriggered, $InputEvent$InteractionKeyMappingTriggered$Type} from "packages/net/minecraftforge/client/event/$InputEvent$InteractionKeyMappingTriggered"
import {$InputEvent$MouseButton$Pre, $InputEvent$MouseButton$Pre$Type} from "packages/net/minecraftforge/client/event/$InputEvent$MouseButton$Pre"
import {$InputEvent$MouseScrollingEvent, $InputEvent$MouseScrollingEvent$Type} from "packages/net/minecraftforge/client/event/$InputEvent$MouseScrollingEvent"

export class $ClientInputEvents {
static "isUseKeyDown": boolean
static "hasReleasedSinceCasting": boolean
static "isShiftKeyDown": boolean

constructor()

public static "onMouseInput"(arg0: $InputEvent$MouseButton$Pre$Type): void
public static "onUseInput"(arg0: $InputEvent$InteractionKeyMappingTriggered$Type): void
public static "onKeyInput"(arg0: $InputEvent$Key$Type): void
public static "clientMouseScrolled"(arg0: $InputEvent$MouseScrollingEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientInputEvents$Type = ($ClientInputEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientInputEvents_ = $ClientInputEvents$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$UniqueSpellBook" {
import {$UniqueItem, $UniqueItem$Type} from "packages/io/redspace/ironsspellbooks/item/$UniqueItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SpellRarity, $SpellRarity$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SimpleAttributeSpellBook, $SimpleAttributeSpellBook$Type} from "packages/io/redspace/ironsspellbooks/item/spell_books/$SimpleAttributeSpellBook"
import {$SpellDataRegistryHolder, $SpellDataRegistryHolder$Type} from "packages/io/redspace/ironsspellbooks/api/registry/$SpellDataRegistryHolder"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ISpellContainer, $ISpellContainer$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ISpellContainer"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UniqueSpellBook extends $SimpleAttributeSpellBook implements $UniqueItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $SpellRarity$Type, arg1: ($SpellDataRegistryHolder$Type)[], arg2: integer)
constructor(arg0: $SpellRarity$Type, arg1: ($SpellDataRegistryHolder$Type)[])
constructor(arg0: $SpellRarity$Type, arg1: ($SpellDataRegistryHolder$Type)[], arg2: integer, arg3: $Supplier$Type<($Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>)>)
constructor(arg0: $SpellRarity$Type, arg1: ($SpellDataRegistryHolder$Type)[], arg2: $Supplier$Type<($Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>)>)

public "isUnique"(): boolean
public "getSpells"(): $List<($SpellData)>
public "getName"(arg0: $ItemStack$Type): $Component
public "initializeSpellContainer"(arg0: $ItemStack$Type): void
public "initializeSpellContainerOLD"(arg0: $ItemStack$Type): $ISpellContainer
get "unique"(): boolean
get "spells"(): $List<($SpellData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UniqueSpellBook$Type = ($UniqueSpellBook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UniqueSpellBook_ = $UniqueSpellBook$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$StaffOfTheNines" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$Vec2, $Vec2$Type} from "packages/net/minecraft/world/phys/$Vec2"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $StaffOfTheNines extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getPosition"(arg0: $Vec3$Type, arg1: float, arg2: float, arg3: float, arg4: $Vec2$Type): $Vec3
public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StaffOfTheNines$Type = ($StaffOfTheNines);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StaffOfTheNines_ = $StaffOfTheNines$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$BurningDashEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $BurningDashEffect extends $MobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BurningDashEffect$Type = ($BurningDashEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BurningDashEffect_ = $BurningDashEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/fixers/$FixIsbSpell" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataFixerElement, $DataFixerElement$Type} from "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement"

export class $FixIsbSpell extends $DataFixerElement {

constructor()

public "runFixer"(arg0: $CompoundTag$Type): boolean
public "preScanValuesToMatch"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FixIsbSpell$Type = ($FixIsbSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FixIsbSpell_ = $FixIsbSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/acid_orb/$AcidOrbRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$AcidOrb, $AcidOrb$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/acid_orb/$AcidOrb"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $AcidOrbRenderer extends $EntityRenderer<($AcidOrb)> {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $AcidOrb$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "createBodyLayer"(): $LayerDefinition
public "getTextureLocation"(arg0: $AcidOrb$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AcidOrbRenderer$Type = ($AcidOrbRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AcidOrbRenderer_ = $AcidOrbRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ServerboundCast" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ServerboundCast {

constructor()
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerboundCast$Type = ($ServerboundCast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerboundCast_ = $ServerboundCast$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$Log" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Log {
static readonly "SPELL_DEBUG": boolean
static readonly "SPELL_SELECTION": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Log$Type = ($Log);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Log_ = $Log$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$AffinityRingRenderer" {
import {$ItemRenderer, $ItemRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$ItemRenderer"
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $AffinityRingRenderer extends $BlockEntityWithoutLevelRenderer {

constructor(arg0: $ItemRenderer$Type, arg1: $EntityModelSet$Type)

public "renderByItem"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public static "getAffinityRingModelLocation"(arg0: $SchoolType$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AffinityRingRenderer$Type = ($AffinityRingRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AffinityRingRenderer_ = $AffinityRingRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$StompSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $StompSpell extends $AbstractSpell {

constructor()

public "getEffectiveCastTime"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getCastFinishAnimation"(): $AnimationHolder
public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "canBeInterrupted"(arg0: $Player$Type): boolean
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StompSpell$Type = ($StompSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StompSpell_ = $StompSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/ball_lightning/$BallLightning" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BallLightning extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "handleHitDetection"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
public "tick"(): void
public "canHitVictim"(arg0: $Entity$Type): boolean
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BallLightning$Type = ($BallLightning);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BallLightning_ = $BallLightning$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$AttackAnimationData" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $AttackAnimationData {
readonly "lengthInTicks": integer
readonly "animationId": string
readonly "attackTimestamps": (integer)[]

constructor(arg0: integer, arg1: string, ...arg2: (integer)[])

public "isSingleHit"(): boolean
public "isHitFrame"(arg0: integer): boolean
get "singleHit"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttackAnimationData$Type = ($AttackAnimationData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttackAnimationData_ = $AttackAnimationData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$WispSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $WispSpell extends $AbstractSpell {

constructor()

public static "getImpactSound"(): $SoundEvent
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "impactSound"(): $SoundEvent
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WispSpell$Type = ($WispSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WispSpell_ = $WispSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/gust/$GustRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GustCollider, $GustCollider$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/gust/$GustCollider"

export class $GustRenderer extends $EntityRenderer<($GustCollider)> {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $GustCollider$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "createBodyLayer"(): $LayerDefinition
public "getTextureLocation"(arg0: $GustCollider$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GustRenderer$Type = ($GustRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GustRenderer_ = $GustRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/$IronsWorldUpgrader" {
import {$LevelStorageSource$LevelStorageAccess, $LevelStorageSource$LevelStorageAccess$Type} from "packages/net/minecraft/world/level/storage/$LevelStorageSource$LevelStorageAccess"
import {$RegistryLayer, $RegistryLayer$Type} from "packages/net/minecraft/server/$RegistryLayer"
import {$LayeredRegistryAccess, $LayeredRegistryAccess$Type} from "packages/net/minecraft/core/$LayeredRegistryAccess"

export class $IronsWorldUpgrader {
 "tempCount": integer
static "IRONS_WORLD_DATA_VERSION": integer
static readonly "INHABITED_TIME_MARKER": (byte)[]
static readonly "REGION_FOLDER": string
static readonly "ENTITY_FOLDER": string

constructor(arg0: $LevelStorageSource$LevelStorageAccess$Type, arg1: $LayeredRegistryAccess$Type<($RegistryLayer$Type)>)

public "runUpgrade"(): void
public "worldNeedsUpgrading"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronsWorldUpgrader$Type = ($IronsWorldUpgrader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronsWorldUpgrader_ = $IronsWorldUpgrader$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalTeleporter" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ITeleporter, $ITeleporter$Type} from "packages/net/minecraftforge/common/util/$ITeleporter"
import {$PortalInfo, $PortalInfo$Type} from "packages/net/minecraft/world/level/portal/$PortalInfo"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PortalTeleporter implements $ITeleporter {


public "playTeleportSound"(arg0: $ServerPlayer$Type, arg1: $ServerLevel$Type, arg2: $ServerLevel$Type): boolean
public "placeEntity"(arg0: $Entity$Type, arg1: $ServerLevel$Type, arg2: $ServerLevel$Type, arg3: float, arg4: $Function$Type<(boolean), ($Entity$Type)>): $Entity
public "getPortalInfo"(arg0: $Entity$Type, arg1: $ServerLevel$Type, arg2: $Function$Type<($ServerLevel$Type), ($PortalInfo$Type)>): $PortalInfo
public "isVanilla"(): boolean
get "vanilla"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortalTeleporter$Type = ($PortalTeleporter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortalTeleporter_ = $PortalTeleporter$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/consumables/$SimpleElixir" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DrinkableItem, $DrinkableItem$Type} from "packages/io/redspace/ironsspellbooks/item/consumables/$DrinkableItem"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SimpleElixir extends $DrinkableItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MobEffectInstance$Type)>)
constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MobEffectInstance$Type)>, arg2: boolean)

public "getMobEffect"(): $MobEffectInstance
public static "addPotionTooltip"(arg0: $MobEffectInstance$Type, arg1: $List$Type<($Component$Type)>, arg2: float): void
public "isFoil"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getMaxStackSize"(arg0: $ItemStack$Type): integer
get "mobEffect"(): $MobEffectInstance
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleElixir$Type = ($SimpleElixir);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleElixir_ = $SimpleElixir$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundSyncMana" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundSyncMana {

constructor(arg0: $MagicData$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundSyncMana$Type = ($ClientboundSyncMana);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundSyncMana_ = $ClientboundSyncMana$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$ChainLightning" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ChainLightning extends $AbstractMagicProjectile {
 "maxConnections": integer
 "maxConnectionsPerWave": integer
 "range": float
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $Entity$Type, arg2: $Entity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "shouldBeSaved"(): boolean
public "doHurt"(arg0: $Entity$Type): void
public "hasAlreadyZapped"(arg0: $Entity$Type): boolean
public "getSpeed"(): float
public "tick"(): void
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainLightning$Type = ($ChainLightning);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainLightning_ = $ChainLightning$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/inscription_table/$InscriptionTableBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ChestType, $ChestType$Type} from "packages/net/minecraft/world/level/block/state/properties/$ChestType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PushReaction, $PushReaction$Type} from "packages/net/minecraft/world/level/material/$PushReaction"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$HorizontalDirectionalBlock, $HorizontalDirectionalBlock$Type} from "packages/net/minecraft/world/level/block/$HorizontalDirectionalBlock"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $InscriptionTableBlock extends $HorizontalDirectionalBlock {
static readonly "PART": $EnumProperty<($ChestType)>
static readonly "SHAPE": $VoxelShape
static readonly "SHAPE_TABLETOP": $VoxelShape
static readonly "SHAPE_LEG_1": $VoxelShape
static readonly "SHAPE_LEG_2": $VoxelShape
static readonly "SHAPE_LEG_3": $VoxelShape
static readonly "SHAPE_LEG_4": $VoxelShape
static readonly "SHAPE_LEGS_EAST": $VoxelShape
static readonly "SHAPE_LEGS_WEST": $VoxelShape
static readonly "SHAPE_LEGS_NORTH": $VoxelShape
static readonly "SHAPE_LEGS_SOUTH": $VoxelShape
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "playerWillDestroy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "getPistonPushReaction"(arg0: $BlockState$Type): $PushReaction
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "getMenuProvider"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $MenuProvider
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InscriptionTableBlock$Type = ($InscriptionTableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InscriptionTableBlock_ = $InscriptionTableBlock$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/curios/$InvisibiltyRing" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SimpleDescriptiveCurio, $SimpleDescriptiveCurio$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$SimpleDescriptiveCurio"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $InvisibiltyRing extends $SimpleDescriptiveCurio {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvisibiltyRing$Type = ($InvisibiltyRing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvisibiltyRing_ = $InvisibiltyRing$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$LightningLanceSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $LightningLanceSpell extends $AbstractSpell {

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightningLanceSpell$Type = ($LightningLanceSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightningLanceSpell_ = $LightningLanceSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/raise_dead_summons/$SummonedZombieMultiRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$SummonedZombie, $SummonedZombie$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedZombie"
import {$HumanoidRenderer, $HumanoidRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$HumanoidRenderer"

export class $SummonedZombieMultiRenderer extends $HumanoidRenderer<($SummonedZombie)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $SummonedZombie$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonedZombieMultiRenderer$Type = ($SummonedZombieMultiRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonedZombieMultiRenderer_ = $SummonedZombieMultiRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$DefaultBipedBoneIdents" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $DefaultBipedBoneIdents {
static readonly "LEFT_HAND_BONE_IDENT": string
static readonly "RIGHT_HAND_BONE_IDENT": string
static readonly "LEFT_LEG_BONE_IDENT": string
static readonly "RIGHT_LEG_BONE_IDENT": string
static readonly "BODY_BONE_IDENT": string
static readonly "LEFT_ARM_BONE_IDENT": string
static readonly "RIGHT_ARM_BONE_IDENT": string
static readonly "HEAD_BONE_IDENT": string
static readonly "CAPE_BONE_IDENT": string
static readonly "POTION_BONE_IDENT": string
static readonly "LEFT_FOOT_ARMOR_BONE_IDENT": string
static readonly "RIGHT_FOOT_ARMOR_BONE_IDENT": string
static readonly "LEFT_FOOT_ARMOR_BONE_2_IDENT": string
static readonly "RIGHT_FOOT_ARMOR_BONE_2_IDENT": string
static readonly "LEFT_LEG_ARMOR_BONE_IDENT": string
static readonly "RIGHT_LEG_ARMOR_BONE_IDENT": string
static readonly "LEFT_LEG_ARMOR_BONE_2_IDENT": string
static readonly "RIGHT_LEG_ARMOR_BONE_2_IDENT": string
static readonly "BODY_ARMOR_BONE_IDENT": string
static readonly "RIGHT_ARM_ARMOR_BONE_IDENT": string
static readonly "LEFT_ARM_ARMOR_BONE_IDENT": string
static readonly "HEAD_ARMOR_BONE_IDENT": string

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultBipedBoneIdents$Type = ($DefaultBipedBoneIdents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultBipedBoneIdents_ = $DefaultBipedBoneIdents$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$ServerPlayerEvents" {
import {$ItemTossEvent, $ItemTossEvent$Type} from "packages/net/minecraftforge/event/entity/item/$ItemTossEvent"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$PlayerEvent$Clone, $PlayerEvent$Clone$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$Clone"
import {$PlayerContainerEvent$Open, $PlayerContainerEvent$Open$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerContainerEvent$Open"
import {$CurioAttributeModifierEvent, $CurioAttributeModifierEvent$Type} from "packages/top/theillusivec4/curios/api/event/$CurioAttributeModifierEvent"
import {$LivingExperienceDropEvent, $LivingExperienceDropEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingExperienceDropEvent"
import {$PlayerInteractEvent$EntityInteractSpecific, $PlayerInteractEvent$EntityInteractSpecific$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteractSpecific"
import {$PlayerEvent$PlayerLoggedOutEvent, $PlayerEvent$PlayerLoggedOutEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedOutEvent"
import {$PlayerEvent$StartTracking, $PlayerEvent$StartTracking$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$StartTracking"
import {$PlayerEvent$BreakSpeed, $PlayerEvent$BreakSpeed$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$BreakSpeed"
import {$PlayerInteractEvent$RightClickItem, $PlayerInteractEvent$RightClickItem$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickItem"
import {$LivingEvent$LivingTickEvent, $LivingEvent$LivingTickEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent$LivingTickEvent"
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$ProjectileImpactEvent, $ProjectileImpactEvent$Type} from "packages/net/minecraftforge/event/entity/$ProjectileImpactEvent"
import {$EntityMountEvent, $EntityMountEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityMountEvent"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$LevelEvent$Load, $LevelEvent$Load$Type} from "packages/net/minecraftforge/event/level/$LevelEvent$Load"
import {$LivingEquipmentChangeEvent, $LivingEquipmentChangeEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEquipmentChangeEvent"
import {$CurioChangeEvent, $CurioChangeEvent$Type} from "packages/top/theillusivec4/curios/api/event/$CurioChangeEvent"
import {$ServerStoppedEvent, $ServerStoppedEvent$Type} from "packages/net/minecraftforge/event/server/$ServerStoppedEvent"
import {$PlayerEvent$PlayerChangedDimensionEvent, $PlayerEvent$PlayerChangedDimensionEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerChangedDimensionEvent"
import {$ServerStartedEvent, $ServerStartedEvent$Type} from "packages/net/minecraftforge/event/server/$ServerStartedEvent"
import {$ServerAboutToStartEvent, $ServerAboutToStartEvent$Type} from "packages/net/minecraftforge/event/server/$ServerAboutToStartEvent"
import {$MobSpawnEvent$FinalizeSpawn, $MobSpawnEvent$FinalizeSpawn$Type} from "packages/net/minecraftforge/event/entity/living/$MobSpawnEvent$FinalizeSpawn"
import {$AnvilUpdateEvent, $AnvilUpdateEvent$Type} from "packages/net/minecraftforge/event/$AnvilUpdateEvent"
import {$PlayerEvent$PlayerRespawnEvent, $PlayerEvent$PlayerRespawnEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerRespawnEvent"
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"
import {$LivingChangeTargetEvent, $LivingChangeTargetEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingChangeTargetEvent"

export class $ServerPlayerEvents {

constructor()

public static "onStartTracking"(arg0: $PlayerEvent$StartTracking$Type): void
public static "onServerStarted"(arg0: $ServerStartedEvent$Type): void
public static "onCurioChangeEvent"(arg0: $CurioChangeEvent$Type): void
public static "onLivingDeathEvent"(arg0: $LivingDeathEvent$Type): void
public static "onPlayerDropItem"(arg0: $ItemTossEvent$Type): void
public static "onPlayerLogOut"(arg0: $PlayerEvent$PlayerLoggedOutEvent$Type): void
public static "onLivingTakeDamage"(arg0: $LivingDamageEvent$Type): void
public static "useItemEvent"(arg0: $PlayerInteractEvent$RightClickItem$Type): void
public static "preventDismount"(arg0: $EntityMountEvent$Type): void
public static "useOnEntityEvent"(arg0: $PlayerInteractEvent$EntityInteractSpecific$Type): void
public static "changeDigSpeed"(arg0: $PlayerEvent$BreakSpeed$Type): void
public static "onEntityMountEvent"(arg0: $EntityMountEvent$Type): void
public static "onAnvilRecipe"(arg0: $AnvilUpdateEvent$Type): void
public static "onPlayerLoggedIn"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "onLevelLoaded"(arg0: $LevelEvent$Load$Type): void
public static "onPlayerCloned"(arg0: $PlayerEvent$Clone$Type): void
public static "onLivingAttack"(arg0: $LivingAttackEvent$Type): void
public static "onLivingTick"(arg0: $LivingEvent$LivingTickEvent$Type): void
public static "onPlayerRespawn"(arg0: $PlayerEvent$PlayerRespawnEvent$Type): void
public static "onLivingChangeTarget"(arg0: $LivingChangeTargetEvent$Type): void
public static "onProjectileImpact"(arg0: $ProjectileImpactEvent$Type): void
public static "onServerAboutToStart"(arg0: $ServerAboutToStartEvent$Type): void
public static "handleUpgradeModifiers"(arg0: $ItemAttributeModifierEvent$Type): void
public static "handleCurioUpgradeModifiers"(arg0: $CurioAttributeModifierEvent$Type): void
public static "handleResistanceAttributesOnSpawn"(arg0: $MobSpawnEvent$FinalizeSpawn$Type): void
public static "onLivingEquipmentChangeEvent"(arg0: $LivingEquipmentChangeEvent$Type): void
public static "onPlayerOpenContainer"(arg0: $PlayerContainerEvent$Open$Type): void
public static "onServerStoppedEvent"(arg0: $ServerStoppedEvent$Type): void
public static "onExperienceDroppedEvent"(arg0: $LivingExperienceDropEvent$Type): void
public static "onPlayerChangedDimension"(arg0: $PlayerEvent$PlayerChangedDimensionEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerPlayerEvents$Type = ($ServerPlayerEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerPlayerEvents_ = $ServerPlayerEvents$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$UnstableEnderParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $UnstableEnderParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "m_6355_"(arg0: float): integer
public "getQuadSize"(arg0: float): float
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UnstableEnderParticle$Type = ($UnstableEnderParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UnstableEnderParticle_ = $UnstableEnderParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/ball_lightning/$BallLightningRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BallLightning, $BallLightning$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/ball_lightning/$BallLightning"

export class $BallLightningRenderer extends $EntityRenderer<($BallLightning)> {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $BallLightning$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "createBodyLayer"(): $LayerDefinition
public "getTextureLocation"(arg0: $BallLightning$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BallLightningRenderer$Type = ($BallLightningRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BallLightningRenderer_ = $BallLightningRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/events/$SpellOnCastEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SpellOnCastEvent extends $PlayerEvent {

constructor()
constructor(arg0: $Player$Type, arg1: string, arg2: integer, arg3: integer, arg4: $SchoolType$Type, arg5: $CastSource$Type)

public "isCancelable"(): boolean
public "getOriginalSpellLevel"(): integer
public "getOriginalManaCost"(): integer
public "getSpellId"(): string
public "getSpellLevel"(): integer
public "setSpellLevel"(arg0: integer): void
public "getSchoolType"(): $SchoolType
public "getManaCost"(): integer
public "setManaCost"(arg0: integer): void
public "getCastSource"(): $CastSource
public "getListenerList"(): $ListenerList
get "cancelable"(): boolean
get "originalSpellLevel"(): integer
get "originalManaCost"(): integer
get "spellId"(): string
get "spellLevel"(): integer
set "spellLevel"(value: integer)
get "schoolType"(): $SchoolType
get "manaCost"(): integer
set "manaCost"(value: integer)
get "castSource"(): $CastSource
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellOnCastEvent$Type = ($SpellOnCastEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellOnCastEvent_ = $SpellOnCastEvent$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundOnCastFinished" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundOnCastFinished {

constructor(arg0: $UUID$Type, arg1: string, arg2: boolean)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundOnCastFinished$Type = ($ClientboundOnCastFinished);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundOnCastFinished_ = $ClientboundOnCastFinished$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$ScreenEffectsOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $ScreenEffectsOverlay implements $IGuiOverlay {
static readonly "instance": $ScreenEffectsOverlay
static readonly "MAGIC_AURA_TEXTURE": $ResourceLocation
static readonly "HEARTSTOP_TEXTURE": $ResourceLocation

constructor()

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenEffectsOverlay$Type = ($ScreenEffectsOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenEffectsOverlay_ = $ScreenEffectsOverlay$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/archevoker/$ArchevokerModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"

export class $ArchevokerModel extends $AbstractSpellCastingMobModel {
static readonly "TEXTURE": $ResourceLocation
static readonly "MODEL": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getModelResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArchevokerModel$Type = ($ArchevokerModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArchevokerModel_ = $ArchevokerModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$NBTOverrideItemModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ModelBakery, $ModelBakery$Type} from "packages/net/minecraft/client/resources/model/$ModelBakery"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"

export class $NBTOverrideItemModel implements $BakedModel {

constructor(arg0: $BakedModel$Type, arg1: $ModelBakery$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $RandomSource$Type): $List<($BakedQuad)>
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "getQuads"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $RandomSource$Type, arg3: $ModelData$Type, arg4: $RenderType$Type): $List<($BakedQuad)>
public "getParticleIcon"(arg0: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(arg0: $BlockAndTintGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $ModelData$Type): $ModelData
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "particleIcon"(): $TextureAtlasSprite
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTOverrideItemModel$Type = ($NBTOverrideItemModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTOverrideItemModel_ = $NBTOverrideItemModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$NBT" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$GlobalPos, $GlobalPos$Type} from "packages/net/minecraft/core/$GlobalPos"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$PortalPos, $PortalPos$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalPos"

export class $NBT {

constructor()

public static "readVec3"(arg0: $CompoundTag$Type): $Vec3
public static "readPortalPos"(arg0: $CompoundTag$Type): $PortalPos
public static "writePortalPos"(arg0: $PortalPos$Type): $CompoundTag
public static "writeGlobalPos"(arg0: $GlobalPos$Type): $CompoundTag
public static "readGlobalPos"(arg0: $CompoundTag$Type): $GlobalPos
public static "writeVec3Pos"(arg0: $Vec3$Type): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBT$Type = ($NBT);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBT_ = $NBT$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/ice_block/$IceBlockProjectile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$GeoEntity, $GeoEntity$Type} from "packages/software/bernie/geckolib/animatable/$GeoEntity"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $IceBlockProjectile extends $AbstractMagicProjectile implements $GeoEntity {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type)

public "getTarget"(): $Entity
public "setTarget"(arg0: $Entity$Type): void
public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "setPitch"(arg0: float): void
public "setYaw"(arg0: float): void
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "getSpeed"(): float
public "tick"(): void
public "setAirTime"(arg0: integer): void
public "canBeCollidedWith"(): boolean
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "getTick"(arg0: any): double
public "triggerAnim"(arg0: string, arg1: string): void
public "getBoneResetTime"(): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
get "target"(): $Entity
set "target"(value: $Entity$Type)
get "impactSound"(): $Optional<($SoundEvent)>
set "pitch"(value: float)
set "yaw"(value: float)
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "speed"(): float
set "airTime"(value: integer)
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IceBlockProjectile$Type = ($IceBlockProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IceBlockProjectile_ = $IceBlockProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$CryomancerArmorItem" {
import {$ImbuableChestplateArmorItem, $ImbuableChestplateArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $CryomancerArmorItem extends $ImbuableChestplateArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CryomancerArmorItem$Type = ($CryomancerArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CryomancerArmorItem_ = $CryomancerArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/entity/$NoKnockbackProjectile" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $NoKnockbackProjectile {

}

export namespace $NoKnockbackProjectile {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoKnockbackProjectile$Type = ($NoKnockbackProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoKnockbackProjectile_ = $NoKnockbackProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/guiding_bolt/$GuidingBoltManager" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$INBTSerializable, $INBTSerializable$Type} from "packages/net/minecraftforge/common/util/$INBTSerializable"
import {$EntityJoinLevelEvent, $EntityJoinLevelEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityJoinLevelEvent"
import {$TickEvent$LevelTickEvent, $TickEvent$LevelTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$LevelTickEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LivingEvent$LivingTickEvent, $LivingEvent$LivingTickEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent$LivingTickEvent"

export class $GuidingBoltManager implements $INBTSerializable<($CompoundTag)> {
static readonly "INSTANCE": $GuidingBoltManager

constructor()

public "startTracking"(arg0: $LivingEntity$Type): void
public "stopTracking"(arg0: $LivingEntity$Type): void
public static "handleClientboundStopTracking"(arg0: $UUID$Type): void
public static "handleClientboundStartTracking"(arg0: $UUID$Type, arg1: $List$Type<(integer)>): void
public static "handleClientLogout"(): void
public static "livingTick"(arg0: $LivingEvent$LivingTickEvent$Type): void
public static "onProjectileShot"(arg0: $EntityJoinLevelEvent$Type): void
public static "serverTick"(arg0: $TickEvent$LevelTickEvent$Type): void
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuidingBoltManager$Type = ($GuidingBoltManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuidingBoltManager_ = $GuidingBoltManager$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$GenericHurtByTargetGoal" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$TargetGoal, $TargetGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/target/$TargetGoal"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GenericHurtByTargetGoal extends $TargetGoal {
readonly "mob": $Mob
readonly "mustSee": boolean
readonly "mustReach": boolean

constructor(arg0: $PathfinderMob$Type, arg1: $Predicate$Type<($LivingEntity$Type)>)

public "setAlertOthers"(...arg0: ($Class$Type<(any)>)[]): $GenericHurtByTargetGoal
public "canUse"(): boolean
public "start"(): void
set "alertOthers"(value: ($Class$Type<(any)>)[])
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericHurtByTargetGoal$Type = ($GenericHurtByTargetGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericHurtByTargetGoal_ = $GenericHurtByTargetGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$PlayerRecasts" {
import {$RecastResult, $RecastResult$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastResult"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$RecastInstance, $RecastInstance$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PlayerRecasts {

constructor(arg0: $Map$Type<(string), ($RecastInstance$Type)>)
constructor(arg0: $ServerPlayer$Type)
constructor()

public "toString"(): string
public "removeAll"(arg0: $RecastResult$Type): void
public "tick"(arg0: integer): void
public "addRecast"(arg0: $RecastInstance$Type, arg1: $MagicData$Type): boolean
public "getRecastInstance"(arg0: string): $RecastInstance
public "removeRecast"(arg0: $RecastInstance$Type, arg1: $RecastResult$Type): void
public "removeRecast"(arg0: string): void
public "getActiveRecasts"(): $List<($RecastInstance)>
public "syncAllToPlayer"(): void
public "tickRecasts"(): void
public "syncToPlayer"(arg0: $RecastInstance$Type): void
public "decrementRecastCount"(arg0: $AbstractSpell$Type): void
public "decrementRecastCount"(arg0: string): void
public "syncRemoveToPlayer"(arg0: string): void
public "getAllRecasts"(): $List<($RecastInstance)>
public "isRecastActive"(arg0: $RecastInstance$Type): boolean
public "forceAddRecast"(arg0: $RecastInstance$Type): void
public "hasRecastForSpell"(arg0: $AbstractSpell$Type): boolean
public "hasRecastForSpell"(arg0: string): boolean
public "getRemainingRecastsForSpell"(arg0: string): integer
public "getRemainingRecastsForSpell"(arg0: $AbstractSpell$Type): integer
public "loadNBTData"(arg0: $ListTag$Type): void
public "saveNBTData"(): $ListTag
public "hasRecastsActive"(): boolean
get "activeRecasts"(): $List<($RecastInstance)>
get "allRecasts"(): $List<($RecastInstance)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerRecasts$Type = ($PlayerRecasts);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerRecasts_ = $PlayerRecasts$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$DivineSmiteSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $DivineSmiteSpell extends $AbstractSpell {

constructor()

public "getEffectiveCastTime"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getCastFinishAnimation"(): $AnimationHolder
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "canBeInterrupted"(arg0: $Player$Type): boolean
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DivineSmiteSpell$Type = ($DivineSmiteSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DivineSmiteSpell_ = $DivineSmiteSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$PoisonArrowSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $PoisonArrowSpell extends $AbstractSpell {

constructor()

public "getArrowDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getAOEDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getCastFinishAnimation"(): $AnimationHolder
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonArrowSpell$Type = ($PoisonArrowSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonArrowSpell_ = $PoisonArrowSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem" {
import {$ExtendedArmorItem, $ExtendedArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ExtendedArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IPresetSpellContainer, $IPresetSpellContainer$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$IPresetSpellContainer"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IronsExtendedArmorMaterial, $IronsExtendedArmorMaterial$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$IronsExtendedArmorMaterial"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $ImbuableChestplateArmorItem extends $ExtendedArmorItem implements $IPresetSpellContainer {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $IronsExtendedArmorMaterial$Type, arg1: $ArmorItem$Type$Type, arg2: $Item$Properties$Type)

public "initializeSpellContainer"(arg0: $ItemStack$Type): void
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImbuableChestplateArmorItem$Type = ($ImbuableChestplateArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImbuableChestplateArmorItem_ = $ImbuableChestplateArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/inscription_table/$InscriptionTableMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ContainerLevelAccess, $ContainerLevelAccess$Type} from "packages/net/minecraft/world/inventory/$ContainerLevelAccess"

export class $InscriptionTableMenu extends $AbstractContainerMenu {
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $FriendlyByteBuf$Type)
constructor(arg0: integer, arg1: $Inventory$Type, arg2: $ContainerLevelAccess$Type)

public "stillValid"(arg0: $Player$Type): boolean
public "removed"(arg0: $Player$Type): void
public "getSpellBookSlot"(): $Slot
public "getResultSlot"(): $Slot
public "setSelectedSpell"(arg0: integer): void
public "getScrollSlot"(): $Slot
public "doInscription"(arg0: integer): void
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "slotsChanged"(arg0: $Container$Type): void
get "spellBookSlot"(): $Slot
get "resultSlot"(): $Slot
set "selectedSpell"(value: integer)
get "scrollSlot"(): $Slot
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InscriptionTableMenu$Type = ($InscriptionTableMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InscriptionTableMenu_ = $InscriptionTableMenu$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$SummonEnderChestSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SummonEnderChestSpell extends $AbstractSpell {

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonEnderChestSpell$Type = ($SummonEnderChestSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonEnderChestSpell_ = $SummonEnderChestSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/eldritch_blast/$EldritchBlastVisualEntity" {
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EldritchBlastVisualEntity extends $Entity implements $IEntityAdditionalSpawnData {
static readonly "lifetime": integer
 "distance": float
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $Vec3$Type, arg2: $Vec3$Type, arg3: $LivingEntity$Type)

public "shouldBeSaved"(): boolean
public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "shouldRender"(arg0: double, arg1: double, arg2: double): boolean
public "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EldritchBlastVisualEntity$Type = ($EldritchBlastVisualEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EldritchBlastVisualEntity_ = $EldritchBlastVisualEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$JeiPlugin" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $JeiPlugin implements $IModPlugin {
static readonly "RECIPE_GUI_VANILLA": $ResourceLocation
static readonly "ALCHEMIST_CAULDRON_GUI": $ResourceLocation
static readonly "SCROLL_FORGE_GUI": $ResourceLocation

constructor()

public "registerItemSubtypes"(arg0: $ISubtypeRegistration$Type): void
public "registerGuiHandlers"(arg0: $IGuiHandlerRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipeCatalysts"(arg0: $IRecipeCatalystRegistration$Type): void
public "getPluginUid"(): $ResourceLocation
public "registerRecipes"(arg0: $IRecipeRegistration$Type): void
public "registerCategories"(arg0: $IRecipeCategoryRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "onRuntimeUnavailable"(): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerAdvanced"(arg0: $IAdvancedRegistration$Type): void
public "onRuntimeAvailable"(arg0: $IJeiRuntime$Type): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JeiPlugin$Type = ($JeiPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JeiPlugin_ = $JeiPlugin$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$TarnishedCrownModel" {
import {$TarnishedCrownArmorItem, $TarnishedCrownArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$TarnishedCrownArmorItem"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TarnishedCrownModel extends $GeoModel<($TarnishedCrownArmorItem)> {

constructor()

public "getTextureResource"(arg0: $TarnishedCrownArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $TarnishedCrownArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $TarnishedCrownArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TarnishedCrownModel$Type = ($TarnishedCrownModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TarnishedCrownModel_ = $TarnishedCrownModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$HumanoidRenderer" {
import {$GeoEntityRenderer, $GeoEntityRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoEntityRenderer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"

export class $HumanoidRenderer<T extends ($Mob) & ($GeoAnimatable)> extends $GeoEntityRenderer<(T)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: $GeoModel$Type<(T)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HumanoidRenderer$Type<T> = ($HumanoidRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HumanoidRenderer_<T> = $HumanoidRenderer$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/item/consumables/$CastersTea" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DrinkableItem, $DrinkableItem$Type} from "packages/io/redspace/ironsspellbooks/item/consumables/$DrinkableItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CastersTea extends $DrinkableItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CastersTea$Type = ($CastersTea);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CastersTea_ = $CastersTea$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/$DataFixerHelpers" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataFixerElement, $DataFixerElement$Type} from "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DataFixerHelpers {
static readonly "LEGACY_SPELL_MAPPING": $Map<(integer), (string)>
static readonly "LEGACY_ITEM_IDS": $Map<(string), (string)>
static readonly "LEGACY_UPGRADE_TYPE_IDS": $Map<(string), (string)>
static readonly "NEW_SPELL_IDS": $Map<(string), (string)>
static "DATA_FIXER_ELEMENTS": $List<($DataFixerElement)>
static "DATA_MATCHER_TARGETS": $List<((byte)[])>

constructor()

public static "doFixUps"(arg0: $CompoundTag$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataFixerHelpers$Type = ($DataFixerHelpers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataFixerHelpers_ = $DataFixerHelpers$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$ChainLightningSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ChainLightningSpell extends $AbstractSpell {

constructor()

public "getRange"(arg0: integer, arg1: $LivingEntity$Type): float
public "getMaxConnections"(arg0: integer, arg1: $LivingEntity$Type): integer
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainLightningSpell$Type = ($ChainLightningSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainLightningSpell_ = $ChainLightningSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$SacrificeSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SacrificeSpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SacrificeSpell$Type = ($SacrificeSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SacrificeSpell_ = $SacrificeSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/acid_orb/$AcidOrb" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AcidOrb extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "setRendDuration"(arg0: integer): void
public "getRendDuration"(): integer
public "setRendLevel"(arg0: integer): void
public "getSpeed"(): float
public "getRendLevel"(): integer
get "impactSound"(): $Optional<($SoundEvent)>
set "rendDuration"(value: integer)
get "rendDuration"(): integer
set "rendLevel"(value: integer)
get "speed"(): float
get "rendLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AcidOrb$Type = ($AcidOrb);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AcidOrb_ = $AcidOrb$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $DeadKingRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $AbstractSpellCastingMob$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getRenderType"(arg0: $AbstractSpellCastingMob$Type, arg1: $ResourceLocation$Type, arg2: $MultiBufferSource$Type, arg3: float): $RenderType
public "preRender"(arg0: $PoseStack$Type, arg1: $AbstractSpellCastingMob$Type, arg2: $BakedGeoModel$Type, arg3: $MultiBufferSource$Type, arg4: $VertexConsumer$Type, arg5: boolean, arg6: float, arg7: integer, arg8: integer, arg9: float, arg10: float, arg11: float, arg12: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingRenderer$Type = ($DeadKingRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingRenderer_ = $DeadKingRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$SupportMob" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $SupportMob {

 "getSupportTarget"(): $LivingEntity
 "setSupportTarget"(arg0: $LivingEntity$Type): void
}

export namespace $SupportMob {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SupportMob$Type = ($SupportMob);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SupportMob_ = $SupportMob$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/flame_strike/$FlameStrike" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FlameStrike extends $AoeEntity {
readonly "ticksPerFrame": integer
readonly "deathTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: boolean)

public "isMirrored"(): boolean
public "ambientParticles"(): void
public "shouldBeSaved"(): boolean
public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "refreshDimensions"(): void
get "mirrored"(): boolean
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlameStrike$Type = ($FlameStrike);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlameStrike_ = $FlameStrike$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundUpdateCastingState" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ClientboundUpdateCastingState {

constructor(arg0: string, arg1: integer, arg2: integer, arg3: $CastSource$Type, arg4: string)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundUpdateCastingState$Type = ($ClientboundUpdateCastingState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundUpdateCastingState_ = $ClientboundUpdateCastingState$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$WallOfFireSpell$FireWallData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"

export class $WallOfFireSpell$FireWallData implements $ICastDataSerializable {
 "anchorPoints": $List<($Vec3)>
 "maxTotalDistance": float
 "accumulatedDistance": float
 "ticks": integer


public "reset"(): void
public "readFromBuffer"(arg0: $FriendlyByteBuf$Type): void
public "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
public "deserializeNBT"(arg0: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallOfFireSpell$FireWallData$Type = ($WallOfFireSpell$FireWallData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallOfFireSpell$FireWallData_ = $WallOfFireSpell$FireWallData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$RecastOverlay$Anchor" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $RecastOverlay$Anchor extends $Enum<($RecastOverlay$Anchor)> {
static readonly "Center": $RecastOverlay$Anchor
static readonly "TopCenter": $RecastOverlay$Anchor
static readonly "TopLeft": $RecastOverlay$Anchor
static readonly "TopRight": $RecastOverlay$Anchor
static readonly "BottomLeft": $RecastOverlay$Anchor
static readonly "BottomRight": $RecastOverlay$Anchor


public static "values"(): ($RecastOverlay$Anchor)[]
public static "valueOf"(arg0: string): $RecastOverlay$Anchor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecastOverlay$Anchor$Type = (("bottomleft") | ("topleft") | ("topright") | ("center") | ("topcenter") | ("bottomright")) | ($RecastOverlay$Anchor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecastOverlay$Anchor_ = $RecastOverlay$Anchor$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/util/$CameraShakeData" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"

export class $CameraShakeData {

constructor(arg0: integer, arg1: $Vec3$Type, arg2: float)

public static "deserializeFromBuffer"(arg0: $FriendlyByteBuf$Type): $CameraShakeData
public "serializeToBuffer"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CameraShakeData$Type = ($CameraShakeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CameraShakeData_ = $CameraShakeData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/archevoker/$ArchevokerRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"

export class $ArchevokerRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArchevokerRenderer$Type = ($ArchevokerRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArchevokerRenderer_ = $ArchevokerRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$AscensionSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ICastData, $ICastData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastData"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $AscensionSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getEmptyCastData"(): $ICastDataSerializable
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "onClientCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $ICastData$Type): void
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "emptyCastData"(): $ICastDataSerializable
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AscensionSpell$Type = ($AscensionSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AscensionSpell_ = $AscensionSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$ClientPlayerEvents" {
import {$TickEvent$PlayerTickEvent, $TickEvent$PlayerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$PlayerTickEvent"
import {$RenderLivingEvent$Pre, $RenderLivingEvent$Pre$Type} from "packages/net/minecraftforge/client/event/$RenderLivingEvent$Pre"
import {$ClientPlayerNetworkEvent$LoggingOut, $ClientPlayerNetworkEvent$LoggingOut$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$LoggingOut"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$ViewportEvent$ComputeFogColor, $ViewportEvent$ComputeFogColor$Type} from "packages/net/minecraftforge/client/event/$ViewportEvent$ComputeFogColor"
import {$RenderLivingEvent$Post, $RenderLivingEvent$Post$Type} from "packages/net/minecraftforge/client/event/$RenderLivingEvent$Post"
import {$ScreenEvent$Opening, $ScreenEvent$Opening$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Opening"
import {$ItemTooltipEvent, $ItemTooltipEvent$Type} from "packages/net/minecraftforge/event/entity/player/$ItemTooltipEvent"

export class $ClientPlayerEvents {

constructor()

public static "onPlayerTick"(arg0: $TickEvent$PlayerTickEvent$Type): void
public static "onPlayerLogOut"(arg0: $ClientPlayerNetworkEvent$LoggingOut$Type): void
public static "afterLivingRender"(arg0: $RenderLivingEvent$Post$Type<(any), (any)>): void
public static "onPlayerOpenScreen"(arg0: $ScreenEvent$Opening$Type): void
public static "beforeLivingRender"(arg0: $RenderLivingEvent$Pre$Type<(any), (any)>): void
public static "changeFogColor"(arg0: $ViewportEvent$ComputeFogColor$Type): void
public static "onPlayerLogin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "customPotionTooltips"(arg0: $ItemTooltipEvent$Type): void
public static "imbuedWeaponTooltips"(arg0: $ItemTooltipEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientPlayerEvents$Type = ($ClientPlayerEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientPlayerEvents_ = $ClientPlayerEvents$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$ShadowwalkerArmorModel" {
import {$ShadowwalkerArmorItem, $ShadowwalkerArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ShadowwalkerArmorItem"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ShadowwalkerArmorModel extends $GeoModel<($ShadowwalkerArmorItem)> {

constructor()

public "getTextureResource"(arg0: $ShadowwalkerArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $ShadowwalkerArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $ShadowwalkerArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShadowwalkerArmorModel$Type = ($ShadowwalkerArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShadowwalkerArmorModel_ = $ShadowwalkerArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$SpellBarrageGoal" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"

export class $SpellBarrageGoal extends $Goal {

constructor(arg0: $IMagicEntity$Type, arg1: $AbstractSpell$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellBarrageGoal$Type = ($SpellBarrageGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellBarrageGoal_ = $SpellBarrageGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ice/$ConeOfColdSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ConeOfColdSpell extends $AbstractSpell {

constructor()

public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConeOfColdSpell$Type = ($ConeOfColdSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConeOfColdSpell_ = $ConeOfColdSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$ClientRenderCache" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Vec2, $Vec2$Type} from "packages/net/minecraft/world/phys/$Vec2"
import {$SpellSelectionManager, $SpellSelectionManager$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$SpellSelectionManager"

export class $ClientRenderCache {
static "relativeSpellBarSlotLocations": $List<($Vec2)>
static readonly "SPELL_LAYOUT": ((integer)[])[]

constructor()

public static "getRowCounts"(arg0: integer): (integer)[]
public static "generateRelativeLocations"(arg0: $SpellSelectionManager$Type, arg1: integer, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientRenderCache$Type = ($ClientRenderCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientRenderCache_ = $ClientRenderCache$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/loot/$SpellFilter" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"

export class $SpellFilter {

constructor()
constructor(arg0: $List$Type<($AbstractSpell$Type)>)
constructor(arg0: $SchoolType$Type)

public "serialize"(arg0: $JsonObject$Type): void
public static "deserializeSpellFilter"(arg0: $JsonObject$Type): $SpellFilter
public "getApplicableSpells"(): $List<($AbstractSpell)>
public "isFiltered"(): boolean
public "getRandomSpell"(arg0: $RandomSource$Type, arg1: $Predicate$Type<($AbstractSpell$Type)>): $AbstractSpell
public "getRandomSpell"(arg0: $RandomSource$Type): $AbstractSpell
get "applicableSpells"(): $List<($AbstractSpell)>
get "filtered"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellFilter$Type = ($SpellFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellFilter_ = $SpellFilter$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/spectral_hammer/$SpectralHammerRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$GeoLivingEntityRenderer, $GeoLivingEntityRenderer$Type} from "packages/io/redspace/ironsspellbooks/render/$GeoLivingEntityRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec2, $Vec2$Type} from "packages/net/minecraft/world/phys/$Vec2"
import {$SpectralHammer, $SpectralHammer$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/spectral_hammer/$SpectralHammer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $SpectralHammerRenderer extends $GeoLivingEntityRenderer<($SpectralHammer)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getRenderType"(arg0: $SpectralHammer$Type, arg1: $ResourceLocation$Type, arg2: $MultiBufferSource$Type, arg3: float): $RenderType
public "preRender"(arg0: $PoseStack$Type, arg1: $SpectralHammer$Type, arg2: $BakedGeoModel$Type, arg3: $MultiBufferSource$Type, arg4: $VertexConsumer$Type, arg5: boolean, arg6: float, arg7: integer, arg8: integer, arg9: float, arg10: float, arg11: float, arg12: float): void
public static "getEnergySwirlOffset"(arg0: $SpectralHammer$Type, arg1: float): $Vec2
public static "getEnergySwirlOffset"(arg0: $SpectralHammer$Type, arg1: float, arg2: integer): $Vec2
public "getTextureLocation"(arg0: $SpectralHammer$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpectralHammerRenderer$Type = ($SpectralHammerRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpectralHammerRenderer_ = $SpectralHammerRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$ShieldPart" {
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AbstractShieldEntity, $AbstractShieldEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractShieldEntity"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ShieldPart extends $PartEntity<($AbstractShieldEntity)> {
readonly "parentEntity": $AbstractShieldEntity
readonly "name": string
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $AbstractShieldEntity$Type, arg1: string, arg2: float, arg3: float, arg4: boolean)

public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "shouldBeSaved"(): boolean
public "isPickable"(): boolean
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "is"(arg0: $Entity$Type): boolean
public "canBeCollidedWith"(): boolean
get "pickable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShieldPart$Type = ($ShieldPart);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShieldPart_ = $ShieldPart$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundAddMotionToPlayer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundAddMotionToPlayer {

constructor(arg0: $FriendlyByteBuf$Type)
constructor(arg0: $Vec3$Type, arg1: boolean)
constructor(arg0: double, arg1: double, arg2: double, arg3: boolean)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundAddMotionToPlayer$Type = ($ClientboundAddMotionToPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundAddMotionToPlayer_ = $ClientboundAddMotionToPlayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$StructureElementRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$IndividualTerrainStructurePoolElement, $IndividualTerrainStructurePoolElement$Type} from "packages/io/redspace/ironsspellbooks/worldgen/$IndividualTerrainStructurePoolElement"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/net/minecraftforge/registries/$DeferredRegister"
import {$StructurePoolElementType, $StructurePoolElementType$Type} from "packages/net/minecraft/world/level/levelgen/structure/pools/$StructurePoolElementType"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $StructureElementRegistry {
static readonly "STRUCTURE_POOL_ELEMENT_DEFERRED_REGISTER": $DeferredRegister<($StructurePoolElementType<(any)>)>
static readonly "INDIVIDUAL_TERRAIN_ELEMENT": $RegistryObject<($StructurePoolElementType<($IndividualTerrainStructurePoolElement)>)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureElementRegistry$Type = ($StructureElementRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureElementRegistry_ = $StructureElementRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$CastSource" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CastSource extends $Enum<($CastSource)> {
static readonly "SPELLBOOK": $CastSource
static readonly "SCROLL": $CastSource
static readonly "SWORD": $CastSource
static readonly "MOB": $CastSource
static readonly "COMMAND": $CastSource
static readonly "NONE": $CastSource


public static "values"(): ($CastSource)[]
public static "valueOf"(arg0: string): $CastSource
public "consumesMana"(): boolean
public "respectsCooldown"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CastSource$Type = (("sword") | ("mob") | ("spellbook") | ("scroll") | ("none") | ("command")) | ($CastSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CastSource_ = $CastSource$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/arcane_anvil/$ArcaneAnvilMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ItemCombinerMenu, $ItemCombinerMenu$Type} from "packages/net/minecraft/world/inventory/$ItemCombinerMenu"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ContainerLevelAccess, $ContainerLevelAccess$Type} from "packages/net/minecraft/world/inventory/$ContainerLevelAccess"

export class $ArcaneAnvilMenu extends $ItemCombinerMenu {
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $ContainerLevelAccess$Type)
constructor(arg0: integer, arg1: $Inventory$Type, arg2: $FriendlyByteBuf$Type)

public "canTakeItemForPickAll"(arg0: $ItemStack$Type, arg1: $Slot$Type): boolean
public "createResult"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcaneAnvilMenu$Type = ($ArcaneAnvilMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcaneAnvilMenu_ = $ArcaneAnvilMenu$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$ShadowwalkerArmorItem" {
import {$ImbuableChestplateArmorItem, $ImbuableChestplateArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $ShadowwalkerArmorItem extends $ImbuableChestplateArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShadowwalkerArmorItem$Type = ($ShadowwalkerArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShadowwalkerArmorItem_ = $ShadowwalkerArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/void_tentacle/$VoidTentacleModel" {
import {$AnimationState, $AnimationState$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationState"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$VoidTentacle, $VoidTentacle$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/void_tentacle/$VoidTentacle"

export class $VoidTentacleModel extends $GeoModel<($VoidTentacle)> {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationResource": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $VoidTentacle$Type): $ResourceLocation
public "getModelResource"(arg0: $VoidTentacle$Type): $ResourceLocation
public "getAnimationResource"(arg0: $VoidTentacle$Type): $ResourceLocation
public "setCustomAnimations"(arg0: $VoidTentacle$Type, arg1: long, arg2: $AnimationState$Type<($VoidTentacle$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VoidTentacleModel$Type = ($VoidTentacleModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VoidTentacleModel_ = $VoidTentacleModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$AmethystRapierItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicSwordItem, $MagicSwordItem$Type} from "packages/io/redspace/ironsspellbooks/api/item/weapons/$MagicSwordItem"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$SpellDataRegistryHolder, $SpellDataRegistryHolder$Type} from "packages/io/redspace/ironsspellbooks/api/registry/$SpellDataRegistryHolder"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AmethystRapierItem extends $MagicSwordItem {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: ($SpellDataRegistryHolder$Type)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AmethystRapierItem$Type = ($AmethystRapierItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AmethystRapierItem_ = $AmethystRapierItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$GlowingEyesLayer$EyeType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $GlowingEyesLayer$EyeType extends $Enum<($GlowingEyesLayer$EyeType)> {
static readonly "None": $GlowingEyesLayer$EyeType
static readonly "Abyssal": $GlowingEyesLayer$EyeType
static readonly "Planar_Sight": $GlowingEyesLayer$EyeType
static readonly "Ender_Armor": $GlowingEyesLayer$EyeType
readonly "r": float
readonly "g": float
readonly "b": float
readonly "scale": float


public static "values"(): ($GlowingEyesLayer$EyeType)[]
public static "valueOf"(arg0: string): $GlowingEyesLayer$EyeType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlowingEyesLayer$EyeType$Type = (("planar_sight") | ("ender_armor") | ("abyssal") | ("none")) | ($GlowingEyesLayer$EyeType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlowingEyesLayer$EyeType_ = $GlowingEyesLayer$EyeType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$ReturnToHomeAtNightGoal" {
import {$HomeOwner, $HomeOwner$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$HomeOwner"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$WaterAvoidingRandomStrollGoal, $WaterAvoidingRandomStrollGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$WaterAvoidingRandomStrollGoal"

export class $ReturnToHomeAtNightGoal<T extends ($PathfinderMob) & ($HomeOwner)> extends $WaterAvoidingRandomStrollGoal {
static readonly "PROBABILITY": float
static readonly "DEFAULT_INTERVAL": integer

constructor(arg0: T, arg1: double)

public "canUse"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReturnToHomeAtNightGoal$Type<T> = ($ReturnToHomeAtNightGoal<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReturnToHomeAtNightGoal_<T> = $ReturnToHomeAtNightGoal$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$PriestArmorItem" {
import {$ImbuableChestplateArmorItem, $ImbuableChestplateArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $PriestArmorItem extends $ImbuableChestplateArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PriestArmorItem$Type = ($PriestArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PriestArmorItem_ = $PriestArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$BloodStepSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $BloodStepSpell extends $AbstractSpell {

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "onClientPreCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type, arg4: $MagicData$Type): void
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodStepSpell$Type = ($BloodStepSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodStepSpell_ = $BloodStepSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/$Curios" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $Curios {
static "SPELLBOOK_SLOT": string
static "NECKLACE_SLOT": string
static "RING_SLOT": string

constructor()

public static "registerCurioSlot"(arg0: string, arg1: integer, arg2: boolean, arg3: $ResourceLocation$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Curios$Type = ($Curios);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Curios_ = $Curios$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/magic/$LearnedSpellData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ISerializable, $ISerializable$Type} from "packages/io/redspace/ironsspellbooks/api/network/$ISerializable"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $LearnedSpellData implements $ISerializable {
static readonly "LEARNED_SPELLS": string
readonly "learnedSpells": $Set<($ResourceLocation)>

constructor()

public "loadFromNBT"(arg0: $CompoundTag$Type): void
public "saveToNBT"(arg0: $CompoundTag$Type): void
public "readFromBuffer"(arg0: $FriendlyByteBuf$Type): void
public "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LearnedSpellData$Type = ($LearnedSpellData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LearnedSpellData_ = $LearnedSpellData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/item/$IScroll" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IScroll {

}

export namespace $IScroll {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IScroll$Type = ($IScroll);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IScroll_ = $IScroll$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingBossMusicInstance" {
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$AbstractTickableSoundInstance, $AbstractTickableSoundInstance$Type} from "packages/net/minecraft/client/resources/sounds/$AbstractTickableSoundInstance"

export class $DeadKingBossMusicInstance extends $AbstractTickableSoundInstance {


public "tick"(): void
public "triggerStop"(): void
public "canStartSilent"(): boolean
public static "createUnseededRandom"(): $RandomSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingBossMusicInstance$Type = ($DeadKingBossMusicInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingBossMusicInstance_ = $DeadKingBossMusicInstance$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$TransformStack" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$CoreGeoBone, $CoreGeoBone$Type} from "packages/software/bernie/geckolib/core/animatable/model/$CoreGeoBone"

export class $TransformStack {

constructor()

public "popStack"(): void
public "pushRotationWithBase"(arg0: $CoreGeoBone$Type, arg1: float, arg2: float, arg3: float): void
public "pushPosition"(arg0: $CoreGeoBone$Type, arg1: float, arg2: float, arg3: float): void
public "pushPosition"(arg0: $CoreGeoBone$Type, arg1: $Vector3f$Type): void
public "pushRotation"(arg0: $CoreGeoBone$Type, arg1: float, arg2: float, arg3: float): void
public "pushRotation"(arg0: $CoreGeoBone$Type, arg1: $Vector3f$Type): void
public "setPosImpl"(arg0: $CoreGeoBone$Type, arg1: $Vector3f$Type): void
public "overrideRotation"(arg0: $CoreGeoBone$Type, arg1: $Vector3f$Type): void
public "setRotImpl"(arg0: $CoreGeoBone$Type, arg1: $Vector3f$Type): void
public "overridePosition"(arg0: $CoreGeoBone$Type, arg1: $Vector3f$Type): void
public static "wrapRadians"(arg0: float): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TransformStack$Type = ($TransformStack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TransformStack_ = $TransformStack$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundOakskinParticles" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundOakskinParticles {

constructor(arg0: $Vec3$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundOakskinParticles$Type = ($ClientboundOakskinParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundOakskinParticles_ = $ClientboundOakskinParticles$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/inscription_table/$InscriptionTableScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InscriptionTableMenu, $InscriptionTableMenu$Type} from "packages/io/redspace/ironsspellbooks/gui/inscription_table/$InscriptionTableMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $InscriptionTableScreen extends $AbstractContainerScreen<($InscriptionTableMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $InscriptionTableMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InscriptionTableScreen$Type = ($InscriptionTableScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InscriptionTableScreen_ = $InscriptionTableScreen$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$OakskinEffect" {
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CustomDescriptionMobEffect, $CustomDescriptionMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$CustomDescriptionMobEffect"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $OakskinEffect extends $CustomDescriptionMobEffect {
static readonly "REDUCTION_PER_LEVEL": float
static readonly "BASE_REDUCTION": float

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "getReductionAmount"(arg0: integer): float
public "getDescriptionLine"(arg0: $MobEffectInstance$Type): $Component
public static "reduceDamage"(arg0: $LivingDamageEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OakskinEffect$Type = ($OakskinEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OakskinEffect_ = $OakskinEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$GenericDefendVillageTargetGoal" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$TargetGoal, $TargetGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/target/$TargetGoal"

export class $GenericDefendVillageTargetGoal extends $TargetGoal {
readonly "mob": $Mob
readonly "mustSee": boolean
readonly "mustReach": boolean

constructor(arg0: $Mob$Type)

public "canUse"(): boolean
public "start"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericDefendVillageTargetGoal$Type = ($GenericDefendVillageTargetGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericDefendVillageTargetGoal_ = $GenericDefendVillageTargetGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/registry/$AttributeRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$EntityAttributeModificationEvent, $EntityAttributeModificationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeModificationEvent"

export class $AttributeRegistry {
static readonly "MAX_MANA": $RegistryObject<($Attribute)>
static readonly "MANA_REGEN": $RegistryObject<($Attribute)>
static readonly "COOLDOWN_REDUCTION": $RegistryObject<($Attribute)>
static readonly "SPELL_POWER": $RegistryObject<($Attribute)>
static readonly "SPELL_RESIST": $RegistryObject<($Attribute)>
static readonly "CAST_TIME_REDUCTION": $RegistryObject<($Attribute)>
static readonly "SUMMON_DAMAGE": $RegistryObject<($Attribute)>
static readonly "FIRE_MAGIC_RESIST": $RegistryObject<($Attribute)>
static readonly "ICE_MAGIC_RESIST": $RegistryObject<($Attribute)>
static readonly "LIGHTNING_MAGIC_RESIST": $RegistryObject<($Attribute)>
static readonly "HOLY_MAGIC_RESIST": $RegistryObject<($Attribute)>
static readonly "ENDER_MAGIC_RESIST": $RegistryObject<($Attribute)>
static readonly "BLOOD_MAGIC_RESIST": $RegistryObject<($Attribute)>
static readonly "EVOCATION_MAGIC_RESIST": $RegistryObject<($Attribute)>
static readonly "NATURE_MAGIC_RESIST": $RegistryObject<($Attribute)>
static readonly "ELDRITCH_MAGIC_RESIST": $RegistryObject<($Attribute)>
static readonly "FIRE_SPELL_POWER": $RegistryObject<($Attribute)>
static readonly "ICE_SPELL_POWER": $RegistryObject<($Attribute)>
static readonly "LIGHTNING_SPELL_POWER": $RegistryObject<($Attribute)>
static readonly "HOLY_SPELL_POWER": $RegistryObject<($Attribute)>
static readonly "ENDER_SPELL_POWER": $RegistryObject<($Attribute)>
static readonly "BLOOD_SPELL_POWER": $RegistryObject<($Attribute)>
static readonly "EVOCATION_SPELL_POWER": $RegistryObject<($Attribute)>
static readonly "NATURE_SPELL_POWER": $RegistryObject<($Attribute)>
static readonly "ELDRITCH_SPELL_POWER": $RegistryObject<($Attribute)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
public static "modifyEntityAttributes"(arg0: $EntityAttributeModificationEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeRegistry$Type = ($AttributeRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeRegistry_ = $AttributeRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$ReplacedFireballRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$FireballRenderer, $FireballRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/fireball/$FireballRenderer"

export class $ReplacedFireballRenderer extends $FireballRenderer {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: float, arg2: float)

public "render"(arg0: $Projectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReplacedFireballRenderer$Type = ($ReplacedFireballRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReplacedFireballRenderer_ = $ReplacedFireballRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/curios/$PoisonwardRing" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SimpleDescriptiveCurio, $SimpleDescriptiveCurio$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$SimpleDescriptiveCurio"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PoisonwardRing extends $SimpleDescriptiveCurio {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonwardRing$Type = ($PoisonwardRing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonwardRing_ = $PoisonwardRing$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$PumpkinArmorItem" {
import {$ExtendedArmorItem, $ExtendedArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ExtendedArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $PumpkinArmorItem extends $ExtendedArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public "isEnderMask"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PumpkinArmorItem$Type = ($PumpkinArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PumpkinArmorItem_ = $PumpkinArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$WitherSkullSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $WitherSkullSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WitherSkullSpell$Type = ($WitherSkullSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WitherSkullSpell_ = $WitherSkullSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/$TargetAreaCastData" {
import {$EntityCastData, $EntityCastData$Type} from "packages/io/redspace/ironsspellbooks/spells/$EntityCastData"
import {$TargetedAreaEntity, $TargetedAreaEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/target_area/$TargetedAreaEntity"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"

export class $TargetAreaCastData extends $EntityCastData {

constructor(arg0: $Vec3$Type, arg1: $TargetedAreaEntity$Type)

public "getCenter"(): $Vec3
get "center"(): $Vec3
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetAreaCastData$Type = ($TargetAreaCastData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetAreaCastData_ = $TargetAreaCastData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/firebolt/$FireboltRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FireboltRenderer extends $EntityRenderer<($Projectile)> {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $Projectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "createBodyLayer"(): $LayerDefinition
public "getTextureLocation"(arg0: $Projectile$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireboltRenderer$Type = ($FireboltRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireboltRenderer_ = $FireboltRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/arcane_anvil/$ArcaneAnvilBlock" {
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$FallingBlock, $FallingBlock$Type} from "packages/net/minecraft/world/level/block/$FallingBlock"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $ArcaneAnvilBlock extends $FallingBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "getMenuProvider"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $MenuProvider
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "onLand"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $BlockState$Type, arg4: $FallingBlockEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcaneAnvilBlock$Type = ($ArcaneAnvilBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcaneAnvilBlock_ = $ArcaneAnvilBlock$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$GluttonyEffect" {
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$LivingEntityUseItemEvent$Finish, $LivingEntityUseItemEvent$Finish$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEntityUseItemEvent$Finish"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $GluttonyEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "ratioForAmplifier"(arg0: integer): float
public static "finishEating"(arg0: $LivingEntityUseItemEvent$Finish$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GluttonyEffect$Type = ($GluttonyEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GluttonyEffect_ = $GluttonyEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$ElectrocuteSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ElectrocuteSpell extends $AbstractSpell {

constructor()

public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElectrocuteSpell$Type = ($ElectrocuteSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElectrocuteSpell_ = $ElectrocuteSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$AngelWingsLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AngelWingsLayer<T extends $LivingEntity, M extends $EntityModel<(T)>> extends $RenderLayer<(T), (M)> {

constructor(arg0: $RenderLayerParent$Type<(T), (M)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
public "shouldRender"(arg0: T): boolean
public "getAngelWingsTexture"(arg0: T): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AngelWingsLayer$Type<T, M> = ($AngelWingsLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AngelWingsLayer_<T, M> = $AngelWingsLayer$Type<(T), (M)>;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$BloodGroundParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $BloodGroundParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodGroundParticle$Type = ($BloodGroundParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodGroundParticle_ = $BloodGroundParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$MinecraftInstanceHelper" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IMinecraftInstanceHelper, $IMinecraftInstanceHelper$Type} from "packages/io/redspace/ironsspellbooks/util/$IMinecraftInstanceHelper"

export class $MinecraftInstanceHelper implements $IMinecraftInstanceHelper {
static "instance": $IMinecraftInstanceHelper

constructor()

public "player"(): $Player
public static "ifPlayerPresent"(arg0: $Consumer$Type<($Player$Type)>): void
public static "getPlayer"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinecraftInstanceHelper$Type = ($MinecraftInstanceHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinecraftInstanceHelper_ = $MinecraftInstanceHelper$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$ThunderstormEffect" {
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ThunderstormEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "getDamageFromAmplifier"(arg0: integer, arg1: $LivingEntity$Type): float
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThunderstormEffect$Type = ($ThunderstormEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThunderstormEffect_ = $ThunderstormEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/cultist/$CultistRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"

export class $CultistRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CultistRenderer$Type = ($CultistRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CultistRenderer_ = $CultistRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datagen/$DataGenerators" {
import {$GatherDataEvent, $GatherDataEvent$Type} from "packages/net/minecraftforge/data/event/$GatherDataEvent"

export class $DataGenerators {

constructor()

public static "gatherData"(arg0: $GatherDataEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataGenerators$Type = ($DataGenerators);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataGenerators_ = $DataGenerators$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/root/$RootModel" {
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RootEntity, $RootEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/root/$RootEntity"

export class $RootModel extends $GeoModel<($RootEntity)> {
static readonly "ANIMS": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $RootEntity$Type): $ResourceLocation
public "getModelResource"(arg0: $RootEntity$Type): $ResourceLocation
public "getAnimationResource"(arg0: $RootEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RootModel$Type = ($RootModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RootModel_ = $RootModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/pyromancer/$PyromancerRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"

export class $PyromancerRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PyromancerRenderer$Type = ($PyromancerRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PyromancerRenderer_ = $PyromancerRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/loot/$FurledMapLootFunction" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$LootItemConditionalFunction$Builder, $LootItemConditionalFunction$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemConditionalFunction$Builder"
import {$LootItemConditionalFunction, $LootItemConditionalFunction$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemConditionalFunction"

export class $FurledMapLootFunction extends $LootItemConditionalFunction {


public static "create"(arg0: string, arg1: string): $LootItemConditionalFunction$Builder<(any)>
public "getType"(): $LootItemFunctionType
public static "decorate"(arg0: $BiFunction$Type<($ItemStack$Type), ($LootContext$Type), ($ItemStack$Type)>, arg1: $Consumer$Type<($ItemStack$Type)>, arg2: $LootContext$Type): $Consumer<($ItemStack)>
get "type"(): $LootItemFunctionType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FurledMapLootFunction$Type = ($FurledMapLootFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FurledMapLootFunction_ = $FurledMapLootFunction$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/electrocute/$ElectrocuteRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$ElectrocuteProjectile, $ElectrocuteProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/electrocute/$ElectrocuteProjectile"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$PoseStack$Pose, $PoseStack$Pose$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack$Pose"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ElectrocuteRenderer extends $EntityRenderer<($ElectrocuteProjectile)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $ElectrocuteProjectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $ElectrocuteProjectile$Type): $ResourceLocation
public "drawHull"(arg0: $Vec3$Type, arg1: $Vec3$Type, arg2: float, arg3: float, arg4: $PoseStack$Pose$Type, arg5: $VertexConsumer$Type, arg6: integer, arg7: integer, arg8: integer, arg9: integer): void
public "drawQuad"(arg0: $Vec3$Type, arg1: $Vec3$Type, arg2: float, arg3: float, arg4: $PoseStack$Pose$Type, arg5: $VertexConsumer$Type, arg6: integer, arg7: integer, arg8: integer, arg9: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElectrocuteRenderer$Type = ($ElectrocuteRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElectrocuteRenderer_ = $ElectrocuteRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$IAnimatedAttacker" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IAnimatedAttacker {

 "playAnimation"(arg0: string): void

(arg0: string): void
}

export namespace $IAnimatedAttacker {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAnimatedAttacker$Type = ($IAnimatedAttacker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAnimatedAttacker_ = $IAnimatedAttacker$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/pedestal/$PedestalRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$PedestalTile, $PedestalTile$Type} from "packages/io/redspace/ironsspellbooks/block/pedestal/$PedestalTile"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $PedestalRenderer implements $BlockEntityRenderer<($PedestalTile)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $PedestalTile$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $PedestalTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $PedestalTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PedestalRenderer$Type = ($PedestalRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PedestalRenderer_ = $PedestalRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundSyncCooldown" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundSyncCooldown {

constructor(arg0: string, arg1: integer)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundSyncCooldown$Type = ($ClientboundSyncCooldown);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundSyncCooldown_ = $ClientboundSyncCooldown$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$HomeOwner" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $HomeOwner {

 "serializeHome"(arg0: $HomeOwner$Type, arg1: $CompoundTag$Type): void
 "setHome"(arg0: $BlockPos$Type): void
 "deserializeHome"(arg0: $HomeOwner$Type, arg1: $CompoundTag$Type): void
 "getHome"(): $BlockPos
}

export namespace $HomeOwner {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HomeOwner$Type = ($HomeOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HomeOwner_ = $HomeOwner$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$GeoSpinAttackLayer" {
import {$GeoRenderer, $GeoRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoRenderer"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$GeoRenderLayer, $GeoRenderLayer$Type} from "packages/software/bernie/geckolib/renderer/layer/$GeoRenderLayer"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $GeoSpinAttackLayer extends $GeoRenderLayer<($AbstractSpellCastingMob)> {

constructor(arg0: $GeoRenderer$Type<($AbstractSpellCastingMob$Type)>)
constructor(arg0: $AbstractSpellCastingMobRenderer$Type)

public "render"(arg0: $PoseStack$Type, arg1: $AbstractSpellCastingMob$Type, arg2: $BakedGeoModel$Type, arg3: $RenderType$Type, arg4: $MultiBufferSource$Type, arg5: $VertexConsumer$Type, arg6: float, arg7: integer, arg8: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeoSpinAttackLayer$Type = ($GeoSpinAttackLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeoSpinAttackLayer_ = $GeoSpinAttackLayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$CastBarOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $CastBarOverlay implements $IGuiOverlay {
static "instance": $CastBarOverlay
static readonly "TEXTURE": $ResourceLocation

constructor()

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CastBarOverlay$Type = ($CastBarOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CastBarOverlay_ = $CastBarOverlay$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$ManaBarOverlay" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $ManaBarOverlay implements $IGuiOverlay {
static readonly "instance": $ManaBarOverlay
static readonly "TEXTURE": $ResourceLocation

constructor()

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
public static "shouldShowManaBar"(arg0: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaBarOverlay$Type = ($ManaBarOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaBarOverlay_ = $ManaBarOverlay$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/curios/$SimpleAttributeCurio" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurioBaseItem, $CurioBaseItem$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$CurioBaseItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SimpleAttributeCurio extends $CurioBaseItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Attribute$Type, arg2: $AttributeModifier$Type)

public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleAttributeCurio$Type = ($SimpleAttributeCurio);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleAttributeCurio_ = $SimpleAttributeCurio$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundEquipmentChanged" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundEquipmentChanged {

constructor()
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundEquipmentChanged$Type = ($ClientboundEquipmentChanged);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundEquipmentChanged_ = $ClientboundEquipmentChanged$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/small_magic_arrow/$SmallMagicArrowRenderer" {
import {$SmallMagicArrow, $SmallMagicArrow$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/small_magic_arrow/$SmallMagicArrow"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Matrix3f, $Matrix3f$Type} from "packages/org/joml/$Matrix3f"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SmallMagicArrowRenderer extends $EntityRenderer<($SmallMagicArrow)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $SmallMagicArrow$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $SmallMagicArrow$Type): $ResourceLocation
public static "getTextureLocation"(): $ResourceLocation
public static "vertex"(arg0: $Matrix4f$Type, arg1: $Matrix3f$Type, arg2: $VertexConsumer$Type, arg3: integer, arg4: integer, arg5: integer, arg6: float, arg7: float, arg8: integer, arg9: integer, arg10: integer, arg11: integer): void
public static "renderModel"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type): void
get "textureLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SmallMagicArrowRenderer$Type = ($SmallMagicArrowRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SmallMagicArrowRenderer_ = $SmallMagicArrowRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$CloudOfRegenerationSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $CloudOfRegenerationSpell extends $AbstractSpell {
static readonly "radius": float

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloudOfRegenerationSpell$Type = ($CloudOfRegenerationSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloudOfRegenerationSpell_ = $CloudOfRegenerationSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/data/$IDataStorage" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IDataStorage {

 "isDirty"(): boolean
 "clearDirty"(): void
}

export namespace $IDataStorage {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IDataStorage$Type = ($IDataStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IDataStorage_ = $IDataStorage$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$ShockwaveSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ShockwaveSpell extends $AbstractSpell {

constructor()

public "getRadius"(arg0: integer, arg1: $LivingEntity$Type): float
public "getCastFinishAnimation"(): $AnimationHolder
public "getCastStartAnimation"(): $AnimationHolder
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "playSound"(arg0: $Optional$Type<($SoundEvent$Type)>, arg1: $Entity$Type): void
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShockwaveSpell$Type = ($ShockwaveSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShockwaveSpell_ = $ShockwaveSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldTrimModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$ShieldEntity, $ShieldEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldEntity"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $ShieldTrimModel extends $EntityModel<($ShieldEntity)> {
static readonly "LAYER_LOCATION": $ModelLayerLocation
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "setupAnim"(arg0: $ShieldEntity$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
public "renderToBuffer"(arg0: $PoseStack$Type, arg1: $VertexConsumer$Type, arg2: integer, arg3: integer, arg4: float, arg5: float, arg6: float, arg7: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShieldTrimModel$Type = ($ShieldTrimModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShieldTrimModel_ = $ShieldTrimModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/magic_missile/$MagicMissileProjectile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MagicMissileProjectile extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type, arg2: $LivingEntity$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicMissileProjectile$Type = ($MagicMissileProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicMissileProjectile_ = $MagicMissileProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$EchoingStrikesEffect" {
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EchoingStrikesEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "createEcho"(arg0: $LivingHurtEvent$Type): void
public static "getDamageModifier"(arg0: integer, arg1: $LivingEntity$Type): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EchoingStrikesEffect$Type = ($EchoingStrikesEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EchoingStrikesEffect_ = $EchoingStrikesEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$MenuRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$ScrollForgeMenu, $ScrollForgeMenu$Type} from "packages/io/redspace/ironsspellbooks/gui/scroll_forge/$ScrollForgeMenu"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$InscriptionTableMenu, $InscriptionTableMenu$Type} from "packages/io/redspace/ironsspellbooks/gui/inscription_table/$InscriptionTableMenu"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$ArcaneAnvilMenu, $ArcaneAnvilMenu$Type} from "packages/io/redspace/ironsspellbooks/gui/arcane_anvil/$ArcaneAnvilMenu"

export class $MenuRegistry {
static readonly "INSCRIPTION_TABLE_MENU": $RegistryObject<($MenuType<($InscriptionTableMenu)>)>
static readonly "SCROLL_FORGE_MENU": $RegistryObject<($MenuType<($ScrollForgeMenu)>)>
static readonly "ARCANE_ANVIL_MENU": $RegistryObject<($MenuType<($ArcaneAnvilMenu)>)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuRegistry$Type = ($MenuRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuRegistry_ = $MenuRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/frozen_humanoid/$FrozenHumanoidRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$LivingEntityRenderer, $LivingEntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$LivingEntityRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$FrozenHumanoid, $FrozenHumanoid$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/frozen_humanoid/$FrozenHumanoid"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FrozenHumanoidRenderer extends $LivingEntityRenderer<($FrozenHumanoid), ($HumanoidModel<($FrozenHumanoid)>)> {
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $FrozenHumanoid$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $FrozenHumanoid$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrozenHumanoidRenderer$Type = ($FrozenHumanoidRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrozenHumanoidRenderer_ = $FrozenHumanoidRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$ParticleRegistry" {
import {$BlastwaveParticleOptions, $BlastwaveParticleOptions$Type} from "packages/io/redspace/ironsspellbooks/particle/$BlastwaveParticleOptions"
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$SparkParticleOptions, $SparkParticleOptions$Type} from "packages/io/redspace/ironsspellbooks/particle/$SparkParticleOptions"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/net/minecraftforge/registries/$DeferredRegister"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$ShockwaveParticleOptions, $ShockwaveParticleOptions$Type} from "packages/io/redspace/ironsspellbooks/particle/$ShockwaveParticleOptions"
import {$ZapParticleOption, $ZapParticleOption$Type} from "packages/io/redspace/ironsspellbooks/particle/$ZapParticleOption"
import {$FogParticleOptions, $FogParticleOptions$Type} from "packages/io/redspace/ironsspellbooks/particle/$FogParticleOptions"

export class $ParticleRegistry {
static readonly "PARTICLE_TYPES": $DeferredRegister<($ParticleType<(any)>)>
static readonly "BLOOD_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "WISP_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "BLOOD_GROUND_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "SNOWFLAKE_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "ELECTRICITY_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "UNSTABLE_ENDER_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "DRAGON_FIRE_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "FIRE_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "EMBER_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "SIPHON_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "ACID_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "ACID_BUBBLE_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "SNOW_DUST": $RegistryObject<($SimpleParticleType)>
static readonly "RING_SMOKE_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "FOG_PARTICLE": $RegistryObject<($ParticleType<($FogParticleOptions)>)>
static readonly "SHOCKWAVE_PARTICLE": $RegistryObject<($ParticleType<($ShockwaveParticleOptions)>)>
static readonly "ZAP_PARTICLE": $RegistryObject<($ParticleType<($ZapParticleOption)>)>
static readonly "FIREFLY_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "PORTAL_FRAME_PARTICLE": $RegistryObject<($SimpleParticleType)>
static readonly "BLASTWAVE_PARTICLE": $RegistryObject<($ParticleType<($BlastwaveParticleOptions)>)>
static readonly "SPARK_PARTICLE": $RegistryObject<($ParticleType<($SparkParticleOptions)>)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParticleRegistry$Type = ($ParticleRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParticleRegistry_ = $ParticleRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$GenericOwnerHurtTargetGoal" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$OwnerGetter, $OwnerGetter$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$OwnerGetter"
import {$TargetGoal, $TargetGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/target/$TargetGoal"

export class $GenericOwnerHurtTargetGoal extends $TargetGoal {
readonly "mob": $Mob
readonly "mustSee": boolean
readonly "mustReach": boolean

constructor(arg0: $Mob$Type, arg1: $OwnerGetter$Type)

public "canUse"(): boolean
public "start"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericOwnerHurtTargetGoal$Type = ($GenericOwnerHurtTargetGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericOwnerHurtTargetGoal_ = $GenericOwnerHurtTargetGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$FireboltSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FireboltSpell extends $AbstractSpell {

constructor()

public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireboltSpell$Type = ($FireboltSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireboltSpell_ = $FireboltSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$KeyState" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"

export class $KeyState {

constructor(arg0: $KeyMapping$Type)

public "update"(): void
public "wasReleased"(): boolean
public "isHeld"(): boolean
public "wasPressed"(): boolean
public "wasHeldMoreThan"(arg0: integer): boolean
get "held"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyState$Type = ($KeyState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyState_ = $KeyState$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/$BloodCauldronBlock$CookExecution" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $BloodCauldronBlock$CookExecution {

 "execute"(): void

(): void
}

export namespace $BloodCauldronBlock$CookExecution {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodCauldronBlock$CookExecution$Type = ($BloodCauldronBlock$CookExecution);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodCauldronBlock$CookExecution_ = $BloodCauldronBlock$CookExecution$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$RecallSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$SyncedSpellData, $SyncedSpellData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$SyncedSpellData"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RecallSpell extends $AbstractSpell {

constructor()

public static "ambientParticles"(arg0: $LivingEntity$Type, arg1: $SyncedSpellData$Type): void
public static "findSpawnPosition"(arg0: $ServerLevel$Type, arg1: $ServerPlayer$Type): $Optional<($Vec3)>
public "getCastFinishAnimation"(): $AnimationHolder
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "stopSoundOnCancel"(): boolean
public "playSound"(arg0: $Optional$Type<($SoundEvent$Type)>, arg1: $Entity$Type): void
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecallSpell$Type = ($RecallSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecallSpell_ = $RecallSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$HitherThitherWand" {
import {$UniqueItem, $UniqueItem$Type} from "packages/io/redspace/ironsspellbooks/item/$UniqueItem"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IPresetSpellContainer, $IPresetSpellContainer$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$IPresetSpellContainer"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $HitherThitherWand extends $Item implements $IPresetSpellContainer, $UniqueItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "initializeSpellContainer"(arg0: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HitherThitherWand$Type = ($HitherThitherWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HitherThitherWand_ = $HitherThitherWand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/curios/$FirewardRing" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SimpleDescriptiveCurio, $SimpleDescriptiveCurio$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$SimpleDescriptiveCurio"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FirewardRing extends $SimpleDescriptiveCurio {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FirewardRing$Type = ($FirewardRing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FirewardRing_ = $FirewardRing$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalPos" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"

export class $PortalPos {


public static "of"(arg0: $ResourceKey$Type<($Level$Type)>, arg1: $Vec3$Type, arg2: float): $PortalPos
public "pos"(): $Vec3
public "dimension"(): $ResourceKey<($Level)>
public "rotation"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortalPos$Type = ($PortalPos);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortalPos_ = $PortalPos$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$FrostbiteEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $FrostbiteEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "doEffect"(arg0: $LivingEntity$Type, arg1: $DamageSource$Type): boolean
public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrostbiteEffect$Type = ($FrostbiteEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrostbiteEffect_ = $FrostbiteEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$ArcaneAnvilRecipe$Tuple" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $ArcaneAnvilRecipe$Tuple<A, B, C> extends $Record {

constructor(a: A, b: B, c: C)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "b"(): B
public "c"(): C
public "a"(): A
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcaneAnvilRecipe$Tuple$Type<A, B, C> = ($ArcaneAnvilRecipe$Tuple<(A), (B), (C)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcaneAnvilRecipe$Tuple_<A, B, C> = $ArcaneAnvilRecipe$Tuple$Type<(A), (B), (C)>;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$SpectralHammerSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $SpectralHammerSpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpectralHammerSpell$Type = ($SpectralHammerSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpectralHammerSpell_ = $SpectralHammerSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$TarnishedCrownArmorItem" {
import {$ExtendedArmorItem, $ExtendedArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ExtendedArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IPresetSpellContainer, $IPresetSpellContainer$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$IPresetSpellContainer"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $TarnishedCrownArmorItem extends $ExtendedArmorItem implements $IPresetSpellContainer {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public "initializeSpellContainer"(arg0: $ItemStack$Type): void
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TarnishedCrownArmorItem$Type = ($TarnishedCrownArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TarnishedCrownArmorItem_ = $TarnishedCrownArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/network/$ServerboundSelectSpell" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$SpellSelection, $SpellSelection$Type} from "packages/io/redspace/ironsspellbooks/gui/overlays/$SpellSelection"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ServerboundSelectSpell {

constructor(arg0: $SpellSelection$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerboundSelectSpell$Type = ($ServerboundSelectSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerboundSelectSpell_ = $ServerboundSelectSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedZombie" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$Zombie, $Zombie$Type} from "packages/net/minecraft/world/entity/monster/$Zombie"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MagicSummon, $MagicSummon$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$MagicSummon"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SummonTimer, $SummonTimer$Type} from "packages/io/redspace/ironsspellbooks/effect/$SummonTimer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SummonedZombie extends $Zombie implements $MagicSummon, $GeoAnimatable {
static readonly "ZOMBIE_LEADER_CHANCE": float
static readonly "REINFORCEMENT_ATTEMPTS": integer
static readonly "REINFORCEMENT_RANGE_MAX": integer
static readonly "REINFORCEMENT_RANGE_MIN": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: boolean)

public "setSummoner"(arg0: $LivingEntity$Type): void
public "isAnimatingRise"(): boolean
public "onUnSummon"(): void
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "tick"(): void
public "die"(arg0: $DamageSource$Type): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "isOnSameTeam"(arg0: $Entity$Type): boolean
public "remove"(arg0: $Entity$RemovalReason$Type): void
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "isPushable"(): boolean
public "isPreventingPlayerRest"(arg0: $Player$Type): boolean
public "m_8099_"(): void
public "getTick"(arg0: any): double
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "getSummoner"(): $LivingEntity
public "onRemovedFromWorld"(): void
public "triggerRiseAnimation"(): void
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "onAntiMagic"(arg0: $MagicData$Type): void
public "onDeathHelper"(): void
public "isAlliedHelper"(arg0: $Entity$Type): boolean
public "shouldIgnoreDamage"(arg0: $DamageSource$Type): boolean
public "onRemovedHelper"(arg0: $Entity$Type, arg1: $SummonTimer$Type): void
public "getBoneResetTime"(): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "summoner"(value: $LivingEntity$Type)
get "animatingRise"(): boolean
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "pushable"(): boolean
get "summoner"(): $LivingEntity
get "boneResetTime"(): double
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonedZombie$Type = ($SummonedZombie);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonedZombie_ = $SummonedZombie$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$AbyssalShroudEffect" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AbyssalShroudEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "ambientParticles"(arg0: $ClientLevel$Type, arg1: $LivingEntity$Type): void
public static "doEffect"(arg0: $LivingEntity$Type, arg1: $DamageSource$Type): boolean
public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbyssalShroudEffect$Type = ($AbyssalShroudEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbyssalShroudEffect_ = $AbyssalShroudEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$MagicSummon" {
import {$SummonTimer, $SummonTimer$Type} from "packages/io/redspace/ironsspellbooks/effect/$SummonTimer"
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $MagicSummon extends $AntiMagicSusceptible {

 "onAntiMagic"(arg0: $MagicData$Type): void
 "onUnSummon"(): void
 "onDeathHelper"(): void
 "isAlliedHelper"(arg0: $Entity$Type): boolean
 "shouldIgnoreDamage"(arg0: $DamageSource$Type): boolean
 "onRemovedHelper"(arg0: $Entity$Type, arg1: $SummonTimer$Type): void
 "getSummoner"(): $LivingEntity
}

export namespace $MagicSummon {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicSummon$Type = ($MagicSummon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicSummon_ = $MagicSummon$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$RecastResult, $RecastResult$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastResult"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$SpellRarity, $SpellRarity$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ICastData, $ICastData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastData"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$RecastInstance, $RecastInstance$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$CastResult, $CastResult$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastResult"

export class $AbstractSpell {
/**
 * This field is a type stub generated by ProbeJS and shall not be used in any sense.
 */
 "probejsInternal$$Literal": Special.Spells
/**
 * This field is a type stub generated by ProbeJS and shall not be used in any sense.
 */
 "probejsInternal$$Tag": Special.SpellsTag

constructor()

public "equals"(arg0: any): boolean
public "hashCode"(): integer
public "getDisplayName"(arg0: $Player$Type): $MutableComponent
public "isEnabled"(): boolean
public "getTargetingColor"(): $Vector3f
public "getSpellName"(): string
public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getDamageSource"(arg0: $Entity$Type): $SpellDamageSource
public "getMaxLevel"(): integer
public "getMinLevel"(): integer
public "getEntityPowerMultiplier"(arg0: $LivingEntity$Type): float
public "getEffectiveCastTime"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getCastFinishAnimation"(): $AnimationHolder
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getMinLevelForRarity"(arg0: $SpellRarity$Type): integer
public "getCastStartAnimation"(): $AnimationHolder
public "attemptInitiateCast"(arg0: $ItemStack$Type, arg1: integer, arg2: $Level$Type, arg3: $Player$Type, arg4: $CastSource$Type, arg5: boolean, arg6: string): boolean
public "getSpellIconResource"(): $ResourceLocation
public "onServerCastComplete"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type, arg4: boolean): void
public "getSpellResource"(): $ResourceLocation
public "getEmptyCastData"(): $ICastDataSerializable
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getSpellPower"(arg0: integer, arg1: $Entity$Type): float
public "getLevelFor"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getSpellCooldown"(): integer
public "getDefaultConfig"(): $DefaultConfig
public "getMinRarity"(): integer
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "getCastTime"(arg0: integer): integer
public "getComponentId"(): string
public "castSpell"(arg0: $Level$Type, arg1: integer, arg2: $ServerPlayer$Type, arg3: $CastSource$Type, arg4: boolean): void
public "getRecastCount"(arg0: integer, arg1: $LivingEntity$Type): integer
public "onRecastFinished"(arg0: $ServerPlayer$Type, arg1: $RecastInstance$Type, arg2: $RecastResult$Type, arg3: $ICastDataSerializable$Type): void
public "canBeCastedBy"(arg0: integer, arg1: $CastSource$Type, arg2: $MagicData$Type, arg3: $Player$Type): $CastResult
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "onServerPreCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): void
public "getMaxRarity"(): integer
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "onClientCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $ICastData$Type): void
public "onClientPreCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type, arg4: $MagicData$Type): void
public "onServerCastTick"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): void
public "needsLearning"(): boolean
public "isLearned"(arg0: $Player$Type): boolean
public "canBeCraftedBy"(arg0: $Player$Type): boolean
public "canBeInterrupted"(arg0: $Player$Type): boolean
public "getDeathMessageId"(): string
public "stopSoundOnCancel"(): boolean
public "obfuscateStats"(arg0: $Player$Type): boolean
public "allowLooting"(): boolean
public "allowCrafting"(): boolean
public "getRarity"(arg0: integer): $SpellRarity
public "playSound"(arg0: $Optional$Type<($SoundEvent$Type)>, arg1: $Entity$Type): void
public "getSpellId"(): string
public "getSchoolType"(): $SchoolType
public "getManaCost"(arg0: integer): integer
public "getCastType"(): $CastType
get "enabled"(): boolean
get "targetingColor"(): $Vector3f
get "spellName"(): string
get "maxLevel"(): integer
get "minLevel"(): integer
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellIconResource"(): $ResourceLocation
get "spellResource"(): $ResourceLocation
get "emptyCastData"(): $ICastDataSerializable
get "castFinishSound"(): $Optional<($SoundEvent)>
get "spellCooldown"(): integer
get "defaultConfig"(): $DefaultConfig
get "minRarity"(): integer
get "castStartSound"(): $Optional<($SoundEvent)>
get "componentId"(): string
get "maxRarity"(): integer
get "deathMessageId"(): string
get "spellId"(): string
get "schoolType"(): $SchoolType
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSpell$Type = ($AbstractSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSpell_ = $AbstractSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$StaffItem" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CastingItem, $CastingItem$Type} from "packages/io/redspace/ironsspellbooks/item/$CastingItem"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $StaffItem extends $CastingItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: double, arg2: double, arg3: $Map$Type<($Attribute$Type), ($AttributeModifier$Type)>)

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "getEnchantmentValue"(): integer
public "isEnchantable"(arg0: $ItemStack$Type): boolean
get "enchantmentValue"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StaffItem$Type = ($StaffItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StaffItem_ = $StaffItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$FirecrackerSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $FirecrackerSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FirecrackerSpell$Type = ($FirecrackerSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FirecrackerSpell_ = $FirecrackerSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$CastTargetingData" {
import {$TargetEntityCastData, $TargetEntityCastData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$TargetEntityCastData"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

/**
 * 
 * @deprecated
 */
export class $CastTargetingData extends $TargetEntityCastData {

constructor(arg0: $LivingEntity$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CastTargetingData$Type = ($CastTargetingData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CastTargetingData_ = $CastTargetingData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/events/$SpellHealEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$LivingEvent, $LivingEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent"
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SpellHealEvent extends $LivingEvent {

constructor()
constructor(arg0: $LivingEntity$Type, arg1: $LivingEntity$Type, arg2: float, arg3: $SchoolType$Type)

public "getHealAmount"(): float
public "getTargetEntity"(): $LivingEntity
public "getSchoolType"(): $SchoolType
public "getListenerList"(): $ListenerList
get "healAmount"(): float
get "targetEntity"(): $LivingEntity
get "schoolType"(): $SchoolType
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellHealEvent$Type = ($SpellHealEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellHealEvent_ = $SpellHealEvent$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/pedestal/$PedestalTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $PedestalTile extends $BlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "drops"(): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "load"(arg0: $CompoundTag$Type): void
public "triggerEvent"(arg0: integer, arg1: integer): boolean
public "getHeldItem"(): $ItemStack
public "setHeldItem"(arg0: $ItemStack$Type): void
public "getUpdateTag"(): $CompoundTag
public "onDataPacket"(arg0: $Connection$Type, arg1: $ClientboundBlockEntityDataPacket$Type): void
public "handleUpdateTag"(arg0: $CompoundTag$Type): void
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "heldItem"(): $ItemStack
set "heldItem"(value: $ItemStack$Type)
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PedestalTile$Type = ($PedestalTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PedestalTile_ = $PedestalTile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/wisp/$WispEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$GeoEntity, $GeoEntity$Type} from "packages/software/bernie/geckolib/animatable/$GeoEntity"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WispEntity extends $PathfinderMob implements $GeoEntity {
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: float)

public "setOwner"(arg0: $Entity$Type): void
public static "isValidTarget"(arg0: $Entity$Type): boolean
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "getMainArm"(): $HumanoidArm
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "spawnParticles"(): void
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "tick"(): void
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "setItemSlot"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): void
public "travel"(arg0: $Vec3$Type): void
public "isNoGravity"(): boolean
public "setTarget"(arg0: $LivingEntity$Type): void
public "getTarget"(): $LivingEntity
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "getTick"(arg0: any): double
public "triggerAnim"(arg0: string, arg1: string): void
public "getBoneResetTime"(): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "owner"(value: $Entity$Type)
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "noGravity"(): boolean
set "target"(value: $LivingEntity$Type)
get "target"(): $LivingEntity
get "boneResetTime"(): double
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WispEntity$Type = ($WispEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WispEntity_ = $WispEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$RaiseDeadSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $RaiseDeadSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RaiseDeadSpell$Type = ($RaiseDeadSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RaiseDeadSpell_ = $RaiseDeadSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/loot/$RandomizeSpellFunction" {
import {$SpellFilter, $SpellFilter$Type} from "packages/io/redspace/ironsspellbooks/loot/$SpellFilter"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$LootItemConditionalFunction$Builder, $LootItemConditionalFunction$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemConditionalFunction$Builder"
import {$NumberProvider, $NumberProvider$Type} from "packages/net/minecraft/world/level/storage/loot/providers/number/$NumberProvider"
import {$LootItemConditionalFunction, $LootItemConditionalFunction$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemConditionalFunction"

export class $RandomizeSpellFunction extends $LootItemConditionalFunction {


public static "create"(arg0: $NumberProvider$Type, arg1: $SpellFilter$Type): $LootItemConditionalFunction$Builder<(any)>
public "getQualityRange"<N extends $NumberProvider>(): N
public static "allSpells"(arg0: $NumberProvider$Type): $LootItemConditionalFunction$Builder<(any)>
public "getType"(): $LootItemFunctionType
public static "decorate"(arg0: $BiFunction$Type<($ItemStack$Type), ($LootContext$Type), ($ItemStack$Type)>, arg1: $Consumer$Type<($ItemStack$Type)>, arg2: $LootContext$Type): $Consumer<($ItemStack)>
get "qualityRange"(): N
get "type"(): $LootItemFunctionType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomizeSpellFunction$Type = ($RandomizeSpellFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomizeSpellFunction_ = $RandomizeSpellFunction$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/item/weapons/$MagicSwordItem" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SpellDataRegistryHolder, $SpellDataRegistryHolder$Type} from "packages/io/redspace/ironsspellbooks/api/registry/$SpellDataRegistryHolder"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IPresetSpellContainer, $IPresetSpellContainer$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$IPresetSpellContainer"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ExtendedSwordItem, $ExtendedSwordItem$Type} from "packages/io/redspace/ironsspellbooks/api/item/weapons/$ExtendedSwordItem"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MagicSwordItem extends $ExtendedSwordItem implements $IPresetSpellContainer {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: double, arg2: double, arg3: ($SpellDataRegistryHolder$Type)[], arg4: $Map$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg5: $Item$Properties$Type)

public "getSpells"(): $List<($SpellData)>
public "initializeSpellContainer"(arg0: $ItemStack$Type): void
get "spells"(): $List<($SpellData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicSwordItem$Type = ($MagicSwordItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicSwordItem_ = $MagicSwordItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/curios/$AffinityRing" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SimpleDescriptiveCurio, $SimpleDescriptiveCurio$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$SimpleDescriptiveCurio"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AffinityRing extends $SimpleDescriptiveCurio {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "getName"(arg0: $ItemStack$Type): $Component
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AffinityRing$Type = ($AffinityRing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AffinityRing_ = $AffinityRing$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$MagicMissileSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $MagicMissileSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicMissileSpell$Type = ($MagicMissileSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicMissileSpell_ = $MagicMissileSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$SpellSlotUpgradeItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SpellSlotUpgradeItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: integer)

public "maxSlots"(): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellSlotUpgradeItem$Type = ($SpellSlotUpgradeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellSlotUpgradeItem_ = $SpellSlotUpgradeItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/config/$SpellDiscovery" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$List, $List$Type} from "packages/java/util/$List"

export class $SpellDiscovery {

constructor()

public static "getSpellsForConfig"(): $List<($AbstractSpell)>
get "spellsForConfig"(): $List<($AbstractSpell)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellDiscovery$Type = ($SpellDiscovery);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellDiscovery_ = $SpellDiscovery$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$SpellBarOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $SpellBarOverlay implements $IGuiOverlay {
static readonly "instance": $SpellBarOverlay
static readonly "TEXTURE": $ResourceLocation

constructor()

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellBarOverlay$Type = ($SpellBarOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellBarOverlay_ = $SpellBarOverlay$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$ExtendedArmorMaterials" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$IronsExtendedArmorMaterial, $IronsExtendedArmorMaterial$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$IronsExtendedArmorMaterial"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnumMap, $EnumMap$Type} from "packages/java/util/$EnumMap"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $ExtendedArmorMaterials extends $Enum<($ExtendedArmorMaterials)> implements $IronsExtendedArmorMaterial {
static readonly "TARNISHED": $ExtendedArmorMaterials
static readonly "DEV": $ExtendedArmorMaterials
static readonly "WANDERING_MAGICIAN": $ExtendedArmorMaterials
static readonly "PUMPKIN": $ExtendedArmorMaterials
static readonly "PYROMANCER": $ExtendedArmorMaterials
static readonly "ARCHEVOKER": $ExtendedArmorMaterials
static readonly "CULTIST": $ExtendedArmorMaterials
static readonly "PRIEST": $ExtendedArmorMaterials
static readonly "CRYOMANCER": $ExtendedArmorMaterials
static readonly "SHADOWWALKER": $ExtendedArmorMaterials
static readonly "PLAGUED": $ExtendedArmorMaterials
static readonly "ELECTROMANCER": $ExtendedArmorMaterials
static readonly "NETHERITE_BATTLEMAGE": $ExtendedArmorMaterials


public static "values"(): ($ExtendedArmorMaterials)[]
public static "valueOf"(arg0: string): $ExtendedArmorMaterials
public "getAdditionalAttributes"(): $Map<($Attribute), ($AttributeModifier)>
public static "schoolArmorMap"(): $EnumMap<($ArmorItem$Type), (integer)>
public "getDefenseForType"(arg0: $ArmorItem$Type$Type): integer
public "getEnchantmentValue"(): integer
public "getName"(): string
public "getToughness"(): float
public "getKnockbackResistance"(): float
public "getEquipSound"(): $SoundEvent
public "getRepairIngredient"(): $Ingredient
public "getDurabilityForType"(arg0: $ArmorItem$Type$Type): integer
public static "makeArmorMap"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): $EnumMap<($ArmorItem$Type), (integer)>
public "getDurabilityForSlot"(arg0: $EquipmentSlot$Type): integer
get "additionalAttributes"(): $Map<($Attribute), ($AttributeModifier)>
get "enchantmentValue"(): integer
get "name"(): string
get "toughness"(): float
get "knockbackResistance"(): float
get "equipSound"(): $SoundEvent
get "repairIngredient"(): $Ingredient
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedArmorMaterials$Type = (("wandering_magician") | ("pyromancer") | ("archevoker") | ("netherite_battlemage") | ("cultist") | ("priest") | ("electromancer") | ("shadowwalker") | ("dev") | ("cryomancer") | ("tarnished") | ("pumpkin") | ("plagued")) | ($ExtendedArmorMaterials);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedArmorMaterials_ = $ExtendedArmorMaterials$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/$IronsSpellbooks" {
import {$AddPackFindersEvent, $AddPackFindersEvent$Type} from "packages/net/minecraftforge/event/$AddPackFindersEvent"
import {$MagicManager, $MagicManager$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$MagicManager"
import {$Logger, $Logger$Type} from "packages/org/slf4j/$Logger"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $IronsSpellbooks {
static readonly "MODID": string
static readonly "LOGGER": $Logger
static "MAGIC_MANAGER": $MagicManager
static "MCS": $MinecraftServer
static "OVERWORLD": $ServerLevel

constructor()

public static "id"(arg0: string): $ResourceLocation
public "addPackFinders"(arg0: $AddPackFindersEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronsSpellbooks$Type = ($IronsSpellbooks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronsSpellbooks_ = $IronsSpellbooks$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$ExtendedWeaponTiers" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"

export class $ExtendedWeaponTiers extends $Enum<($ExtendedWeaponTiers)> implements $Tier {
static readonly "KEEPER_FLAMBERGE": $ExtendedWeaponTiers
static readonly "DREADSWORD": $ExtendedWeaponTiers
static readonly "METAL_MAGEHUNTER": $ExtendedWeaponTiers
static readonly "CRYSTAL_MAGEHUNTER": $ExtendedWeaponTiers
static readonly "TRUTHSEEKER": $ExtendedWeaponTiers
static readonly "CLAYMORE": $ExtendedWeaponTiers
static readonly "AMETHYST": $ExtendedWeaponTiers


public static "values"(): ($ExtendedWeaponTiers)[]
public static "valueOf"(arg0: string): $ExtendedWeaponTiers
public "getEnchantmentValue"(): integer
public "getSpeed"(): float
public "getUses"(): integer
public "getAttackDamageBonus"(): float
public "getLevel"(): integer
public "getRepairIngredient"(): $Ingredient
public "getTag"(): $TagKey<($Block)>
get "enchantmentValue"(): integer
get "speed"(): float
get "uses"(): integer
get "attackDamageBonus"(): float
get "level"(): integer
get "repairIngredient"(): $Ingredient
get "tag"(): $TagKey<($Block)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedWeaponTiers$Type = (("keeper_flamberge") | ("claymore") | ("metal_magehunter") | ("truthseeker") | ("amethyst") | ("dreadsword") | ("crystal_magehunter")) | ($ExtendedWeaponTiers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedWeaponTiers_ = $ExtendedWeaponTiers$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$AbstractSimpleParticlePacket" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$AbstractVec3Packet, $AbstractVec3Packet$Type} from "packages/io/redspace/ironsspellbooks/network/spell/$AbstractVec3Packet"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $AbstractSimpleParticlePacket extends $AbstractVec3Packet {

constructor(arg0: $Vec3$Type)

public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSimpleParticlePacket$Type = ($AbstractSimpleParticlePacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSimpleParticlePacket_ = $AbstractSimpleParticlePacket$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$ItemRegistry" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$ForgeSpawnEggItem, $ForgeSpawnEggItem$Type} from "packages/net/minecraftforge/common/$ForgeSpawnEggItem"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$CurioBaseItem, $CurioBaseItem$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$CurioBaseItem"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $ItemRegistry {
static readonly "WIMPY_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "LEGENDARY_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "NETHERITE_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "DIAMOND_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "GOLD_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "IRON_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "COPPER_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "ROTTEN_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "BLAZE_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "DRAGONSKIN_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "DRUIDIC_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "VILLAGER_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "GRAYBEARD_STAFF": $RegistryObject<($Item)>
static readonly "ARTIFICER_STAFF": $RegistryObject<($Item)>
static readonly "ICE_STAFF": $RegistryObject<($Item)>
static readonly "LIGHTNING_ROD_STAFF": $RegistryObject<($Item)>
static readonly "BLOOD_STAFF": $RegistryObject<($Item)>
static readonly "EVOKER_SPELL_BOOK": $RegistryObject<($Item)>
static readonly "NECRONOMICON": $RegistryObject<($Item)>
static readonly "MAGEHUNTER": $RegistryObject<($Item)>
static readonly "SPELLBREAKER": $RegistryObject<($Item)>
static readonly "TEST_CLAYMORE": $RegistryObject<($Item)>
static readonly "KEEPER_FLAMBERGE": $RegistryObject<($Item)>
static readonly "AMETHYST_RAPIER": $RegistryObject<($Item)>
static readonly "MISERY": $RegistryObject<($Item)>
static readonly "SCROLL": $RegistryObject<($Item)>
static readonly "AUTOLOADER_CROSSBOW": $RegistryObject<($Item)>
static readonly "HITHER_THITHER_WAND": $RegistryObject<($Item)>
static readonly "STAFF_OF_THE_NINES": $RegistryObject<($Item)>
static readonly "INK_COMMON": $RegistryObject<($Item)>
static readonly "INK_UNCOMMON": $RegistryObject<($Item)>
static readonly "INK_RARE": $RegistryObject<($Item)>
static readonly "INK_EPIC": $RegistryObject<($Item)>
static readonly "INK_LEGENDARY": $RegistryObject<($Item)>
static readonly "OAKSKIN_ELIXIR": $RegistryObject<($Item)>
static readonly "GREATER_OAKSKIN_ELIXIR": $RegistryObject<($Item)>
static readonly "GREATER_HEALING_POTION": $RegistryObject<($Item)>
static readonly "INVISIBILITY_ELIXIR": $RegistryObject<($Item)>
static readonly "GREATER_INVISIBILITY_ELIXIR": $RegistryObject<($Item)>
static readonly "EVASION_ELIXIR": $RegistryObject<($Item)>
static readonly "GREATER_EVASION_ELIXIR": $RegistryObject<($Item)>
static readonly "FIRE_ALE": $RegistryObject<($Item)>
static readonly "NETHERWARD_TINCTURE": $RegistryObject<($Item)>
static readonly "UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "FIRE_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "ICE_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "LIGHTNING_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "HOLY_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "ENDER_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "BLOOD_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "EVOCATION_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "NATURE_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "MANA_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "COOLDOWN_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "PROTECTION_UPGRADE_ORB": $RegistryObject<($Item)>
static readonly "LIGHTNING_BOTTLE": $RegistryObject<($Item)>
static readonly "FROZEN_BONE_SHARD": $RegistryObject<($Item)>
static readonly "BLOOD_VIAL": $RegistryObject<($Item)>
static readonly "DIVINE_PEARL": $RegistryObject<($Item)>
static readonly "FURLED_MAP": $RegistryObject<($Item)>
static readonly "HOGSKIN": $RegistryObject<($Item)>
static readonly "DRAGONSKIN": $RegistryObject<($Item)>
static readonly "ARCANE_ESSENCE": $RegistryObject<($Item)>
static readonly "MAGIC_CLOTH": $RegistryObject<($Item)>
static readonly "BLANK_RUNE": $RegistryObject<($Item)>
static readonly "FIRE_RUNE": $RegistryObject<($Item)>
static readonly "ICE_RUNE": $RegistryObject<($Item)>
static readonly "LIGHTNING_RUNE": $RegistryObject<($Item)>
static readonly "ENDER_RUNE": $RegistryObject<($Item)>
static readonly "HOLY_RUNE": $RegistryObject<($Item)>
static readonly "BLOOD_RUNE": $RegistryObject<($Item)>
static readonly "EVOCATION_RUNE": $RegistryObject<($Item)>
static readonly "MANA_RUNE": $RegistryObject<($Item)>
static readonly "COOLDOWN_RUNE": $RegistryObject<($Item)>
static readonly "PROTECTION_RUNE": $RegistryObject<($Item)>
static readonly "NATURE_RUNE": $RegistryObject<($Item)>
static readonly "WAYWARD_COMPASS": $RegistryObject<($Item)>
static readonly "RUINED_BOOK": $RegistryObject<($Item)>
static readonly "CINDER_ESSENCE": $RegistryObject<($Item)>
static readonly "ARCANE_SALVAGE": $RegistryObject<($Item)>
static readonly "ARCANE_INGOT": $RegistryObject<($Item)>
static readonly "SHRIVING_STONE": $RegistryObject<($Item)>
static readonly "LESSER_SPELL_SLOT_UPGRADE": $RegistryObject<($Item)>
static readonly "ELDRITCH_PAGE": $RegistryObject<($Item)>
static readonly "LOST_KNOWLEDGE_FRAGMENT": $RegistryObject<($Item)>
static readonly "FROSTED_HELVE": $RegistryObject<($Item)>
static readonly "ICE_CRYSTAL": $RegistryObject<($Item)>
static readonly "ENERGIZED_CORE": $RegistryObject<($Item)>
static readonly "INSCRIPTION_TABLE_BLOCK_ITEM": $RegistryObject<($Item)>
static readonly "ACANE_ANVIL_BLOCK_ITEM": $RegistryObject<($Item)>
static readonly "SCROLL_FORGE_BLOCK": $RegistryObject<($Item)>
static readonly "PEDESTAL_BLOCK_ITEM": $RegistryObject<($Item)>
static readonly "ARMOR_PILE_BLOCK_ITEM": $RegistryObject<($Item)>
static readonly "ARCANE_DEBRIS_BLOCK_ITEM": $RegistryObject<($Item)>
static readonly "ALCHEMIST_CAULDRON_BLOCK_ITEM": $RegistryObject<($Item)>
static readonly "FIREFLY_JAR_ITEM": $RegistryObject<($Item)>
static readonly "WANDERING_MAGICIAN_HELMET": $RegistryObject<($Item)>
static readonly "WANDERING_MAGICIAN_CHESTPLATE": $RegistryObject<($Item)>
static readonly "WANDERING_MAGICIAN_LEGGINGS": $RegistryObject<($Item)>
static readonly "WANDERING_MAGICIAN_BOOTS": $RegistryObject<($Item)>
static readonly "PUMPKIN_HELMET": $RegistryObject<($Item)>
static readonly "PUMPKIN_CHESTPLATE": $RegistryObject<($Item)>
static readonly "PUMPKIN_LEGGINGS": $RegistryObject<($Item)>
static readonly "PUMPKIN_BOOTS": $RegistryObject<($Item)>
static readonly "PYROMANCER_HELMET": $RegistryObject<($Item)>
static readonly "PYROMANCER_CHESTPLATE": $RegistryObject<($Item)>
static readonly "PYROMANCER_LEGGINGS": $RegistryObject<($Item)>
static readonly "PYROMANCER_BOOTS": $RegistryObject<($Item)>
static readonly "ELECTROMANCER_HELMET": $RegistryObject<($Item)>
static readonly "ELECTROMANCER_CHESTPLATE": $RegistryObject<($Item)>
static readonly "ELECTROMANCER_LEGGINGS": $RegistryObject<($Item)>
static readonly "ELECTROMANCER_BOOTS": $RegistryObject<($Item)>
static readonly "ARCHEVOKER_HELMET": $RegistryObject<($Item)>
static readonly "ARCHEVOKER_CHESTPLATE": $RegistryObject<($Item)>
static readonly "ARCHEVOKER_LEGGINGS": $RegistryObject<($Item)>
static readonly "ARCHEVOKER_BOOTS": $RegistryObject<($Item)>
static readonly "CULTIST_HELMET": $RegistryObject<($Item)>
static readonly "CULTIST_CHESTPLATE": $RegistryObject<($Item)>
static readonly "CULTIST_LEGGINGS": $RegistryObject<($Item)>
static readonly "CULTIST_BOOTS": $RegistryObject<($Item)>
static readonly "CRYOMANCER_HELMET": $RegistryObject<($Item)>
static readonly "CRYOMANCER_CHESTPLATE": $RegistryObject<($Item)>
static readonly "CRYOMANCER_LEGGINGS": $RegistryObject<($Item)>
static readonly "CRYOMANCER_BOOTS": $RegistryObject<($Item)>
static readonly "SHADOWWALKER_HELMET": $RegistryObject<($Item)>
static readonly "SHADOWWALKER_CHESTPLATE": $RegistryObject<($Item)>
static readonly "SHADOWWALKER_LEGGINGS": $RegistryObject<($Item)>
static readonly "SHADOWWALKER_BOOTS": $RegistryObject<($Item)>
static readonly "PRIEST_HELMET": $RegistryObject<($Item)>
static readonly "PRIEST_CHESTPLATE": $RegistryObject<($Item)>
static readonly "PRIEST_LEGGINGS": $RegistryObject<($Item)>
static readonly "PRIEST_BOOTS": $RegistryObject<($Item)>
static readonly "PLAGUED_HELMET": $RegistryObject<($Item)>
static readonly "PLAGUED_CHESTPLATE": $RegistryObject<($Item)>
static readonly "PLAGUED_LEGGINGS": $RegistryObject<($Item)>
static readonly "PLAGUED_BOOTS": $RegistryObject<($Item)>
static readonly "NETHERITE_MAGE_HELMET": $RegistryObject<($Item)>
static readonly "NETHERITE_MAGE_CHESTPLATE": $RegistryObject<($Item)>
static readonly "NETHERITE_MAGE_LEGGINGS": $RegistryObject<($Item)>
static readonly "NETHERITE_MAGE_BOOTS": $RegistryObject<($Item)>
static readonly "TARNISHED_CROWN": $RegistryObject<($Item)>
static readonly "DEV_CROWN": $RegistryObject<($Item)>
static readonly "MANA_RING": $RegistryObject<($CurioBaseItem)>
static readonly "SILVER_RING": $RegistryObject<($CurioBaseItem)>
static readonly "COOLDOWN_RING": $RegistryObject<($CurioBaseItem)>
static readonly "CAST_TIME_RING": $RegistryObject<($CurioBaseItem)>
static readonly "HEAVY_CHAIN": $RegistryObject<($CurioBaseItem)>
static readonly "EMERALD_STONEPLATE_RING": $RegistryObject<($CurioBaseItem)>
static readonly "FIREWARD_RING": $RegistryObject<($CurioBaseItem)>
static readonly "FROSTWARD_RING": $RegistryObject<($CurioBaseItem)>
static readonly "POISONWARD_RING": $RegistryObject<($CurioBaseItem)>
static readonly "CONJURERS_TALISMAN": $RegistryObject<($CurioBaseItem)>
static readonly "AFFINITY_RING": $RegistryObject<($CurioBaseItem)>
static readonly "CONCENTRATION_AMULET": $RegistryObject<($CurioBaseItem)>
static readonly "LURKER_RING": $RegistryObject<($CurioBaseItem)>
static readonly "AMETHYST_RESONANCE_NECKLACE": $RegistryObject<($CurioBaseItem)>
static readonly "INVISIBILITY_RING": $RegistryObject<($CurioBaseItem)>
static readonly "KEEPER_SPAWN_EGG": $RegistryObject<($ForgeSpawnEggItem)>
static readonly "DEAD_KING_CORPSE_SPAWN_EGG": $RegistryObject<($ForgeSpawnEggItem)>
static readonly "ARCHEVOKER_SPAWN_EGG": $RegistryObject<($ForgeSpawnEggItem)>
static readonly "NECROMANCER_SPAWN_EGG": $RegistryObject<($ForgeSpawnEggItem)>
static readonly "CRYOMANCER_SPAWN_EGG": $RegistryObject<($ForgeSpawnEggItem)>
static readonly "PYROMANCER_SPAWN_EGG": $RegistryObject<($ForgeSpawnEggItem)>
static readonly "PRIEST_SPAWN_EGG": $RegistryObject<($ForgeSpawnEggItem)>
static readonly "APOTHECARIST_SPAWN_EGG": $RegistryObject<($ForgeSpawnEggItem)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
public static "getIronsItems"(): $Collection<($RegistryObject<($Item)>)>
get "ironsItems"(): $Collection<($RegistryObject<($Item)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemRegistry$Type = ($ItemRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemRegistry_ = $ItemRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$AngelWingsModel" {
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$AgeableListModel, $AgeableListModel$Type} from "packages/net/minecraft/client/model/$AgeableListModel"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AngelWingsModel<T extends $LivingEntity> extends $AgeableListModel<(T)> {
static readonly "MAIN": string
static readonly "ANGEL_WINGS": string
static "ANGEL_WINGS_LAYER": $ModelLayerLocation
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public static "createLayer"(): $LayerDefinition
public "setupAnim"(arg0: T, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AngelWingsModel$Type<T> = ($AngelWingsModel<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AngelWingsModel_<T> = $AngelWingsModel$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/setup/$DataHandling" {
import {$ChunkDataEvent, $ChunkDataEvent$Type} from "packages/net/minecraftforge/event/level/$ChunkDataEvent"
import {$AddReloadListenerEvent, $AddReloadListenerEvent$Type} from "packages/net/minecraftforge/event/$AddReloadListenerEvent"

export class $DataHandling {

constructor()

public static "onChunkDataEvent"(arg0: $ChunkDataEvent$Type): void
public static "addReloadListenerEvent"(arg0: $AddReloadListenerEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataHandling$Type = ($DataHandling);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataHandling_ = $DataHandling$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$MagicArrowSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $MagicArrowSpell extends $AbstractSpell {

constructor()

public "getCastFinishAnimation"(): $AnimationHolder
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicArrowSpell$Type = ($MagicArrowSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicArrowSpell_ = $MagicArrowSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/tetra/effects/$ManaSiphonTetraEffect" {
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$ItemEffect, $ItemEffect$Type} from "packages/se/mickelus/tetra/effect/$ItemEffect"

export class $ManaSiphonTetraEffect {
static readonly "manaSiphon": $ItemEffect
static readonly "siphonName": string
static readonly "siphonTooltip": string

constructor()

public static "addGuiBars"(): void
public static "handleLivingAttackEvent"(arg0: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaSiphonTetraEffect$Type = ($ManaSiphonTetraEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaSiphonTetraEffect_ = $ManaSiphonTetraEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$BurningDashSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ICastData, $ICastData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastData"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BurningDashSpell extends $AbstractSpell {

constructor()

public static "ambientParticles"(arg0: $ClientLevel$Type, arg1: $LivingEntity$Type): void
public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getSpellResource"(): $ResourceLocation
public "getEmptyCastData"(): $ICastDataSerializable
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "onClientCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $ICastData$Type): void
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "emptyCastData"(): $ICastDataSerializable
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BurningDashSpell$Type = ($BurningDashSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BurningDashSpell_ = $BurningDashSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundHealParticles" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundHealParticles {

constructor(arg0: $Vec3$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundHealParticles$Type = ($ClientboundHealParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundHealParticles_ = $ClientboundHealParticles$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldEntity" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$AbstractShieldEntity, $AbstractShieldEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractShieldEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"

export class $ShieldEntity extends $AbstractShieldEntity {
 "hurtThisTick": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: float)

public "takeDamage"(arg0: $DamageSource$Type, arg1: float, arg2: $Vec3$Type): void
public "setRotation"(arg0: float, arg1: float): void
public "tick"(): void
public "getParts"(): ($PartEntity<(any)>)[]
get "parts"(): ($PartEntity<(any)>)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShieldEntity$Type = ($ShieldEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShieldEntity_ = $ShieldEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/cryomancer/$CryomancerRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"

export class $CryomancerRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CryomancerRenderer$Type = ($CryomancerRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CryomancerRenderer_ = $CryomancerRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/worldgen/$RemoveWaterProcessor" {
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$StructurePlaceSettings, $StructurePlaceSettings$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructurePlaceSettings"
import {$StructureProcessor, $StructureProcessor$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureProcessor"
import {$StructureTemplate$StructureBlockInfo, $StructureTemplate$StructureBlockInfo$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureTemplate$StructureBlockInfo"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$StructureTemplate, $StructureTemplate$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureTemplate"

export class $RemoveWaterProcessor extends $StructureProcessor {
static readonly "CODEC": $Codec<($RemoveWaterProcessor)>

constructor()

public "process"(arg0: $LevelReader$Type, arg1: $BlockPos$Type, arg2: $BlockPos$Type, arg3: $StructureTemplate$StructureBlockInfo$Type, arg4: $StructureTemplate$StructureBlockInfo$Type, arg5: $StructurePlaceSettings$Type, arg6: $StructureTemplate$Type): $StructureTemplate$StructureBlockInfo
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RemoveWaterProcessor$Type = ($RemoveWaterProcessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RemoveWaterProcessor_ = $RemoveWaterProcessor$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$LegacySpellBookData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$LegacySpellData, $LegacySpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$LegacySpellData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $LegacySpellBookData {
static readonly "ISB_SPELLBOOK": string
static readonly "SPELL_SLOTS": string
static readonly "ACTIVE_SPELL_INDEX": string
static readonly "SPELLS": string
static readonly "LEGACY_ID": string
static readonly "ID": string
static readonly "LEVEL": string
static readonly "SLOT": string
 "transcribedSpells": ($LegacySpellData)[]
 "activeSpellIndex": integer
 "spellSlots": integer
 "spellCount": integer

constructor(arg0: $ItemStack$Type, arg1: $CompoundTag$Type)
constructor(arg0: integer)

public "loadFromNBT"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): void
public static "getSpellBookData"(arg0: $ItemStack$Type): $LegacySpellBookData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LegacySpellBookData$Type = ($LegacySpellBookData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LegacySpellBookData_ = $LegacySpellBookData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/events/$SpellPreCastEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SpellPreCastEvent extends $PlayerEvent {

constructor()
constructor(arg0: $Player$Type, arg1: string, arg2: integer, arg3: $SchoolType$Type, arg4: $CastSource$Type)

public "isCancelable"(): boolean
public "getSpellId"(): string
public "getSpellLevel"(): integer
public "getSchoolType"(): $SchoolType
public "getCastSource"(): $CastSource
public "getListenerList"(): $ListenerList
get "cancelable"(): boolean
get "spellId"(): string
get "spellLevel"(): integer
get "schoolType"(): $SchoolType
get "castSource"(): $CastSource
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellPreCastEvent$Type = ($SpellPreCastEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellPreCastEvent_ = $SpellPreCastEvent$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$WaywardCompass" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$GlobalPos, $GlobalPos$Type} from "packages/net/minecraft/core/$GlobalPos"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $WaywardCompass extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "missingWarning"(arg0: $ItemStack$Type): boolean
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "onCraftedBy"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Player$Type): void
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "getCatacombsLocation"(arg0: $Entity$Type, arg1: $CompoundTag$Type): $GlobalPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaywardCompass$Type = ($WaywardCompass);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaywardCompass_ = $WaywardCompass$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$WololoSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $WololoSpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WololoSpell$Type = ($WololoSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WololoSpell_ = $WololoSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/scroll_forge/$ScrollForgeTile" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStackHandler, $ItemStackHandler$Type} from "packages/net/minecraftforge/items/$ItemStackHandler"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ScrollForgeTile extends $BlockEntity implements $MenuProvider {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "getDisplayName"(): $MutableComponent
public "drops"(): void
public "invalidateCaps"(): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "getStackInSlot"(arg0: integer): $ItemStack
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "load"(arg0: $CompoundTag$Type): void
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "getItemHandler"(): $ItemStackHandler
public "setRecipeSpell"(arg0: string): void
public "getUpdateTag"(): $CompoundTag
public "setRemoved"(): void
public "onDataPacket"(arg0: $Connection$Type, arg1: $ClientboundBlockEntityDataPacket$Type): void
public "handleUpdateTag"(arg0: $CompoundTag$Type): void
get "displayName"(): $MutableComponent
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "itemHandler"(): $ItemStackHandler
set "recipeSpell"(value: string)
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollForgeTile$Type = ($ScrollForgeTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollForgeTile_ = $ScrollForgeTile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$GreaterHealSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $GreaterHealSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GreaterHealSpell$Type = ($GreaterHealSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GreaterHealSpell_ = $GreaterHealSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$NoKnockbackProjectile, $NoKnockbackProjectile$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$NoKnockbackProjectile"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidType, $FluidType$Type} from "packages/net/minecraftforge/fluids/$FluidType"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AoeEntity extends $Projectile implements $NoKnockbackProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "getRadius"(): float
public "ambientParticles"(): void
public "setRadius"(arg0: float): void
public "setCircular"(): void
public "getEffectDuration"(): integer
public "setEffectDuration"(arg0: integer): void
public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "isCircular"(): boolean
public "onPostHit"(): void
public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
public "tick"(): void
public "isOnFire"(): boolean
public "onSyncedDataUpdated"(arg0: $EntityDataAccessor$Type<(any)>): void
public "setDamage"(arg0: float): void
public "getDamage"(): float
public "setDuration"(arg0: integer): void
public "refreshDimensions"(): void
public "isPushedByFluid"(arg0: $FluidType$Type): boolean
get "radius"(): float
set "radius"(value: float)
get "effectDuration"(): integer
set "effectDuration"(value: integer)
get "circular"(): boolean
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
get "onFire"(): boolean
set "damage"(value: float)
get "damage"(): float
set "duration"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AoeEntity$Type = ($AoeEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AoeEntity_ = $AoeEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientBoundRemoveRecast" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientBoundRemoveRecast {

constructor(arg0: string)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundRemoveRecast$Type = ($ClientBoundRemoveRecast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundRemoveRecast_ = $ClientBoundRemoveRecast$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$GustDefenseGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GustDefenseGoal extends $Goal {

constructor(arg0: $IMagicEntity$Type)

public "shouldAreaAttack"(arg0: $LivingEntity$Type): boolean
public "canUse"(): boolean
public "start"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GustDefenseGoal$Type = ($GustDefenseGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GustDefenseGoal_ = $GustDefenseGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingBoss" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Enemy, $Enemy$Type} from "packages/net/minecraft/world/entity/monster/$Enemy"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$IAnimatedAttacker, $IAnimatedAttacker$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$IAnimatedAttacker"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$IClientEventEntity, $IClientEventEntity$Type} from "packages/io/redspace/ironsspellbooks/api/network/$IClientEventEntity"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$DeadKingBoss$Phases, $DeadKingBoss$Phases$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingBoss$Phases"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DeadKingBoss extends $AbstractSpellCastingMob implements $Enemy, $IAnimatedAttacker, $IClientEventEntity {
static readonly "STOP_MUSIC": byte
static readonly "START_MUSIC": byte
 "isMeleeing": boolean
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "isInvertedHealAndHarm"(): boolean
public "canBreatheUnderwater"(): boolean
public "getPhase"(): integer
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "isPhaseTransitioning"(): boolean
public "tick"(): void
public "handleEntityEvent"(arg0: byte): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "isOnSameTeam"(arg0: $Entity$Type): boolean
public "causeFallDamage"(arg0: float, arg1: float, arg2: $DamageSource$Type): boolean
public "shouldAlwaysAnimateLegs"(): boolean
public "bobBodyWhileWalking"(): boolean
public "shouldAlwaysAnimateHead"(): boolean
public "getVoicePitch"(): float
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "isPushable"(): boolean
public "stopSeenByPlayer"(arg0: $ServerPlayer$Type): void
public "startSeenByPlayer"(arg0: $ServerPlayer$Type): void
public "handleClientEvent"(arg0: byte): void
public "isPhase"(arg0: $DeadKingBoss$Phases$Type): boolean
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "playAnimation"(arg0: string): void
public "isAnimating"(): boolean
public "setCustomName"(arg0: $Component$Type): void
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "invertedHealAndHarm"(): boolean
get "phase"(): integer
get "phaseTransitioning"(): boolean
get "voicePitch"(): float
get "pushable"(): boolean
get "animating"(): boolean
set "customName"(value: $Component$Type)
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingBoss$Type = ($DeadKingBoss);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingBoss_ = $DeadKingBoss$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$GoldCrownArmorItem" {
import {$ExtendedArmorItem, $ExtendedArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ExtendedArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $GoldCrownArmorItem extends $ExtendedArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoldCrownArmorItem$Type = ($GoldCrownArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoldCrownArmorItem_ = $GoldCrownArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/keeper/$KeeperModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$AnimationState, $AnimationState$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationState"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"

export class $KeeperModel extends $AbstractSpellCastingMobModel {
static readonly "TEXTURE": $ResourceLocation
static readonly "modelResource": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getModelResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "setCustomAnimations"(arg0: $AbstractSpellCastingMob$Type, arg1: long, arg2: $AnimationState$Type<($AbstractSpellCastingMob$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeeperModel$Type = ($KeeperModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeeperModel_ = $KeeperModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/spectral_hammer/$SpectralHammer" {
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$GeoEntity, $GeoEntity$Type} from "packages/software/bernie/geckolib/animatable/$GeoEntity"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SpectralHammer extends $LivingEntity implements $GeoEntity {
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
 "entityJs$builder": any
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $BlockHitResult$Type, arg3: integer, arg4: integer)

public "getArmorSlots"(): $Iterable<($ItemStack)>
public "getMainArm"(): $HumanoidArm
public static "prepareAttributes"(): $AttributeSupplier$Builder
public static "dropResources"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $List<($ItemStack)>
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "tick"(): void
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "setItemSlot"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): void
public "isInvulnerable"(): boolean
public "isNoGravity"(): boolean
public "isPushable"(): boolean
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "getTick"(arg0: any): double
public "triggerAnim"(arg0: string, arg1: string): void
public "getBoneResetTime"(): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "invulnerable"(): boolean
get "noGravity"(): boolean
get "pushable"(): boolean
get "boneResetTime"(): double
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpectralHammer$Type = ($SpectralHammer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpectralHammer_ = $SpectralHammer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$ThunderStepSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ThunderStepSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThunderStepSpell$Type = ($ThunderStepSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThunderStepSpell_ = $ThunderStepSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$ElectricityParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $ElectricityParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElectricityParticle$Type = ($ElectricityParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElectricityParticle_ = $ElectricityParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/setup/$PlayerAnimationTrigger" {
import {$ClientChatReceivedEvent, $ClientChatReceivedEvent$Type} from "packages/net/minecraftforge/client/event/$ClientChatReceivedEvent"

export class $PlayerAnimationTrigger {

constructor()

public static "onChatReceived"(arg0: $ClientChatReceivedEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerAnimationTrigger$Type = ($PlayerAnimationTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerAnimationTrigger_ = $PlayerAnimationTrigger$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$SpellBarOverlay$Anchor" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SpellBarOverlay$Anchor extends $Enum<($SpellBarOverlay$Anchor)> {
static readonly "Hotbar": $SpellBarOverlay$Anchor
static readonly "TopLeft": $SpellBarOverlay$Anchor
static readonly "TopRight": $SpellBarOverlay$Anchor
static readonly "BottomLeft": $SpellBarOverlay$Anchor
static readonly "BottomRight": $SpellBarOverlay$Anchor


public static "values"(): ($SpellBarOverlay$Anchor)[]
public static "valueOf"(arg0: string): $SpellBarOverlay$Anchor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellBarOverlay$Anchor$Type = (("bottomleft") | ("topleft") | ("topright") | ("bottomright") | ("hotbar")) | ($SpellBarOverlay$Anchor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellBarOverlay$Anchor_ = $SpellBarOverlay$Anchor$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/$EntityCastData" {
import {$ICastData, $ICastData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastData"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EntityCastData implements $ICastData {

constructor(arg0: $Entity$Type)

public "reset"(): void
public "getCastingEntity"(): $Entity
public "discardCastingEntity"(): void
get "castingEntity"(): $Entity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityCastData$Type = ($EntityCastData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityCastData_ = $EntityCastData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundBloodSiphonParticles" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundBloodSiphonParticles {

constructor(arg0: $Vec3$Type, arg1: $Vec3$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundBloodSiphonParticles$Type = ($ClientboundBloodSiphonParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundBloodSiphonParticles_ = $ClientboundBloodSiphonParticles$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$NetheriteMageArmorItem" {
import {$ImbuableChestplateArmorItem, $ImbuableChestplateArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $NetheriteMageArmorItem extends $ImbuableChestplateArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetheriteMageArmorItem$Type = ($NetheriteMageArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetheriteMageArmorItem_ = $NetheriteMageArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundOnClientCast" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$ICastData, $ICastData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastData"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ClientboundOnClientCast {

constructor(arg0: string, arg1: integer, arg2: $CastSource$Type, arg3: $ICastData$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundOnClientCast$Type = ($ClientboundOnClientCast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundOnClientCast_ = $ClientboundOnClientCast$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$ArmorCapeProvider" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ArmorCapeProvider {

 "getCapeResourceLocation"(): $ResourceLocation

(): $ResourceLocation
}

export namespace $ArmorCapeProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorCapeProvider$Type = ($ArmorCapeProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorCapeProvider_ = $ArmorCapeProvider$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$LearnCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $LearnCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LearnCommand$Type = ($LearnCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LearnCommand_ = $LearnCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$SpellData" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$SpellRarity, $SpellRarity$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity"

export class $SpellData implements $Comparable<($SpellData)> {
static readonly "SPELL_ID": string
static readonly "SPELL_LEVEL": string
static readonly "SPELL_LOCKED": string
static readonly "EMPTY": $SpellData

constructor(arg0: $AbstractSpell$Type, arg1: integer)
constructor(arg0: $AbstractSpell$Type, arg1: integer, arg2: boolean)

public "equals"(arg0: any): boolean
public "hashCode"(): integer
public "compareTo"(arg0: $SpellData$Type): integer
public "isLocked"(): boolean
public "getDisplayName"(): $Component
public "getLevel"(): integer
public "canRemove"(): boolean
public "getRarity"(): $SpellRarity
public "getSpell"(): $AbstractSpell
get "locked"(): boolean
get "displayName"(): $Component
get "level"(): integer
get "rarity"(): $SpellRarity
get "spell"(): $AbstractSpell
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellData$Type = ($SpellData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellData_ = $SpellData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$UpgradeData" {
import {$UpgradeType, $UpgradeType$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$UpgradeType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UpgradeData {
static readonly "Upgrades": string
static readonly "Upgrade_Key": string
static readonly "Slot_Key": string
static readonly "Upgrade_Count": string
static readonly "NONE": $UpgradeData


public "getCount"(): integer
public "getUpgradedSlot"(): string
public static "hasUpgradeData"(arg0: $ItemStack$Type): boolean
public static "getUpgradeData"(arg0: $ItemStack$Type): $UpgradeData
public "getUpgrades"(): $Map<($UpgradeType), (integer)>
public static "removeUpgradeData"(arg0: $ItemStack$Type): void
public "addUpgrade"(arg0: $ItemStack$Type, arg1: $UpgradeType$Type, arg2: string): $UpgradeData
public static "setUpgradeData"(arg0: $ItemStack$Type, arg1: $UpgradeData$Type): void
get "count"(): integer
get "upgradedSlot"(): string
get "upgrades"(): $Map<($UpgradeType), (integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeData$Type = ($UpgradeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeData_ = $UpgradeData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$FogParticleOptions" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$DustParticleOptionsBase, $DustParticleOptionsBase$Type} from "packages/net/minecraft/core/particles/$DustParticleOptionsBase"
import {$ParticleOptions$Deserializer, $ParticleOptions$Deserializer$Type} from "packages/net/minecraft/core/particles/$ParticleOptions$Deserializer"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $FogParticleOptions extends $DustParticleOptionsBase {
static readonly "CODEC": $Codec<($FogParticleOptions)>
static readonly "DESERIALIZER": $ParticleOptions$Deserializer<($FogParticleOptions)>
static readonly "MIN_SCALE": float
static readonly "MAX_SCALE": float

constructor(arg0: $Vector3f$Type, arg1: float)

public "getType"(): $ParticleType<($FogParticleOptions)>
get "type"(): $ParticleType<($FogParticleOptions)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FogParticleOptions$Type = ($FogParticleOptions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FogParticleOptions_ = $FogParticleOptions$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$ArrowVolleyEntity" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ArrowVolleyEntity extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "setArrowsPerRow"(arg0: integer): void
public "setRows"(arg0: integer): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
public "tick"(): void
set "arrowsPerRow"(value: integer)
set "rows"(value: integer)
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowVolleyEntity$Type = ($ArrowVolleyEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowVolleyEntity_ = $ArrowVolleyEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingBoss$AttackType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$AttackAnimationData, $AttackAnimationData$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$AttackAnimationData"

export class $DeadKingBoss$AttackType extends $Enum<($DeadKingBoss$AttackType)> {
static readonly "DOUBLE_SWING": $DeadKingBoss$AttackType
static readonly "SLAM": $DeadKingBoss$AttackType
readonly "data": $AttackAnimationData


public static "values"(): ($DeadKingBoss$AttackType)[]
public static "valueOf"(arg0: string): $DeadKingBoss$AttackType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingBoss$AttackType$Type = (("slam") | ("double_swing")) | ($DeadKingBoss$AttackType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingBoss$AttackType_ = $DeadKingBoss$AttackType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/$CompatHandler" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CompatHandler {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatHandler$Type = ($CompatHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatHandler_ = $CompatHandler$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$StructureProcessorRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$StructureProcessorType, $StructureProcessorType$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureProcessorType"
import {$WeatherCopperProcessor, $WeatherCopperProcessor$Type} from "packages/io/redspace/ironsspellbooks/worldgen/$WeatherCopperProcessor"
import {$RemoveWaterProcessor, $RemoveWaterProcessor$Type} from "packages/io/redspace/ironsspellbooks/worldgen/$RemoveWaterProcessor"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/net/minecraftforge/registries/$DeferredRegister"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $StructureProcessorRegistry {
static readonly "PROCESSORS": $DeferredRegister<($StructureProcessorType<(any)>)>
static readonly "REMOVE_WATER": $RegistryObject<($StructureProcessorType<($RemoveWaterProcessor)>)>
static readonly "WEATHER_COPPER": $RegistryObject<($StructureProcessorType<($WeatherCopperProcessor)>)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureProcessorRegistry$Type = ($StructureProcessorRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureProcessorRegistry_ = $StructureProcessorRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$PyromancerArmorModel" {
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$PyromancerArmorItem, $PyromancerArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$PyromancerArmorItem"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PyromancerArmorModel extends $GeoModel<($PyromancerArmorItem)> {

constructor()

public "getTextureResource"(arg0: $PyromancerArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $PyromancerArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $PyromancerArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PyromancerArmorModel$Type = ($PyromancerArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PyromancerArmorModel_ = $PyromancerArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$IronsExtendedArmorMaterial" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export interface $IronsExtendedArmorMaterial extends $ArmorMaterial {

 "getAdditionalAttributes"(): $Map<($Attribute), ($AttributeModifier)>
 "getDefenseForType"(arg0: $ArmorItem$Type$Type): integer
 "getEnchantmentValue"(): integer
 "getName"(): string
 "getToughness"(): float
 "getKnockbackResistance"(): float
 "getEquipSound"(): $SoundEvent
 "getRepairIngredient"(): $Ingredient
 "getDurabilityForType"(arg0: $ArmorItem$Type$Type): integer
}

export namespace $IronsExtendedArmorMaterial {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronsExtendedArmorMaterial$Type = ($IronsExtendedArmorMaterial);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronsExtendedArmorMaterial_ = $IronsExtendedArmorMaterial$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$SpellRarity, $SpellRarity$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DefaultConfig {
 "minRarity": $SpellRarity
 "schoolResource": $ResourceLocation
 "maxLevel": integer
 "enabled": boolean
 "cooldownInSeconds": double
 "allowCrafting": boolean

constructor(arg0: $Consumer$Type<($DefaultConfig$Type)>)
constructor()

public "build"(): $DefaultConfig
public "setAllowCrafting"(arg0: boolean): $DefaultConfig
public "setDeprecated"(arg0: boolean): $DefaultConfig
public "setCooldownSeconds"(arg0: double): $DefaultConfig
public "setMinRarity"(arg0: $SpellRarity$Type): $DefaultConfig
public "setMaxLevel"(arg0: integer): $DefaultConfig
public "setSchoolResource"(arg0: $ResourceLocation$Type): $DefaultConfig
set "allowCrafting"(value: boolean)
set "deprecated"(value: boolean)
set "cooldownSeconds"(value: double)
set "minRarity"(value: $SpellRarity$Type)
set "maxLevel"(value: integer)
set "schoolResource"(value: $ResourceLocation$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultConfig$Type = ($DefaultConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultConfig_ = $DefaultConfig$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/ray_of_frost/$RayOfFrostVisualEntity" {
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RayOfFrostVisualEntity extends $Entity implements $IEntityAdditionalSpawnData {
static readonly "lifetime": integer
 "distance": float
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $Vec3$Type, arg2: $Vec3$Type, arg3: $LivingEntity$Type)

public "shouldBeSaved"(): boolean
public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "shouldRender"(arg0: double, arg1: double, arg2: double): boolean
public "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RayOfFrostVisualEntity$Type = ($RayOfFrostVisualEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RayOfFrostVisualEntity_ = $RayOfFrostVisualEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$OverlayRegistry" {
import {$RegisterGuiOverlaysEvent, $RegisterGuiOverlaysEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterGuiOverlaysEvent"

export class $OverlayRegistry {

constructor()

public static "onRegisterOverlays"(arg0: $RegisterGuiOverlaysEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OverlayRegistry$Type = ($OverlayRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OverlayRegistry_ = $OverlayRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$GoldCrownModel" {
import {$GoldCrownArmorItem, $GoldCrownArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$GoldCrownArmorItem"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GoldCrownModel extends $GeoModel<($GoldCrownArmorItem)> {

constructor()

public "getTextureResource"(arg0: $GoldCrownArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $GoldCrownArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $GoldCrownArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoldCrownModel$Type = ($GoldCrownModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoldCrownModel_ = $GoldCrownModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$ScrollForgeRecipeMaker" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ScrollForgeRecipe, $ScrollForgeRecipe$Type} from "packages/io/redspace/ironsspellbooks/jei/$ScrollForgeRecipe"
import {$IVanillaRecipeFactory, $IVanillaRecipeFactory$Type} from "packages/mezz/jei/api/recipe/vanilla/$IVanillaRecipeFactory"
import {$IIngredientManager, $IIngredientManager$Type} from "packages/mezz/jei/api/runtime/$IIngredientManager"

export class $ScrollForgeRecipeMaker {


public static "getRecipes"(arg0: $IVanillaRecipeFactory$Type, arg1: $IIngredientManager$Type): $List<($ScrollForgeRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollForgeRecipeMaker$Type = ($ScrollForgeRecipeMaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollForgeRecipeMaker_ = $ScrollForgeRecipeMaker$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$ChargeSpellLayer" {
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ChargeSpellLayer {

constructor()

public static "getArmFromUseHand"(arg0: $LivingEntity$Type): $HumanoidArm
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChargeSpellLayer$Type = ($ChargeSpellLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChargeSpellLayer_ = $ChargeSpellLayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$HealSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $HealSpell extends $AbstractSpell {

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HealSpell$Type = ($HealSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HealSpell_ = $HealSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/root/$RootEntity" {
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$PreventDismount, $PreventDismount$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/root/$PreventDismount"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity$MoveFunction, $Entity$MoveFunction$Type} from "packages/net/minecraft/world/entity/$Entity$MoveFunction"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$GeoEntity, $GeoEntity$Type} from "packages/software/bernie/geckolib/animatable/$GeoEntity"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidType, $FluidType$Type} from "packages/net/minecraftforge/fluids/$FluidType"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RootEntity extends $LivingEntity implements $GeoEntity, $PreventDismount, $AntiMagicSusceptible {
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
 "entityJs$builder": any
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "getTarget"(): $LivingEntity
public "setTarget"(arg0: $LivingEntity$Type): void
public "getOwner"(): $LivingEntity
public "setOwner"(arg0: $LivingEntity$Type): void
public "onAntiMagic"(arg0: $MagicData$Type): void
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "getMainArm"(): $HumanoidArm
public "isPickable"(): boolean
public "getScale"(): float
public "removeRoot"(): void
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "tick"(): void
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "setItemSlot"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): void
public "knockback"(arg0: double, arg1: double, arg2: double): void
public "isDamageSourceBlocked"(arg0: $DamageSource$Type): boolean
public "push"(arg0: $Entity$Type): void
public "isPushable"(): boolean
public "isAffectedByPotions"(): boolean
public "shouldRiderFaceForward"(arg0: $Player$Type): boolean
public "dismountsUnderwater"(): boolean
public "hasIndirectPassenger"(arg0: $Entity$Type): boolean
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "setDuration"(arg0: integer): void
public "shouldRiderSit"(): boolean
public "isPushedByFluid"(arg0: $FluidType$Type): boolean
public "canBeCollidedWith"(): boolean
public "canCollideWith"(arg0: $Entity$Type): boolean
public "getPassengersRidingOffset"(): double
public "m_19956_"(arg0: $Entity$Type, arg1: $Entity$MoveFunction$Type): void
public "showVehicleHealth"(): boolean
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "getTick"(arg0: any): double
public "triggerAnim"(arg0: string, arg1: string): void
public "getBoneResetTime"(): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "target"(): $LivingEntity
set "target"(value: $LivingEntity$Type)
get "owner"(): $LivingEntity
set "owner"(value: $LivingEntity$Type)
get "armorSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "pickable"(): boolean
get "scale"(): float
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "pushable"(): boolean
get "affectedByPotions"(): boolean
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
set "duration"(value: integer)
get "passengersRidingOffset"(): double
get "boneResetTime"(): double
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RootEntity$Type = ($RootEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RootEntity_ = $RootEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$CatacombsSkeletonHorse" {
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$SkeletonHorse, $SkeletonHorse$Type} from "packages/net/minecraft/world/entity/animal/horse/$SkeletonHorse"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CatacombsSkeletonHorse extends $SkeletonHorse {
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "CHEST_SLOT_OFFSET": integer
static readonly "INVENTORY_SLOT_OFFSET": integer
static readonly "BREEDING_CROSS_FACTOR": double
static readonly "MAX_MOVEMENT_SPEED": float
static readonly "MAX_JUMP_STRENGTH": float
static "FOOD_ITEMS": $Ingredient
static readonly "INV_SLOT_SADDLE": integer
static readonly "INV_SLOT_ARMOR": integer
static readonly "INV_BASE_COUNT": integer
 "tailCounter": integer
 "sprintCounter": integer
static readonly "BABY_START_AGE": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CatacombsSkeletonHorse$Type = ($CatacombsSkeletonHorse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CatacombsSkeletonHorse_ = $CatacombsSkeletonHorse$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$AscensionEffect" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AscensionEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "ambientParticles"(arg0: $ClientLevel$Type, arg1: $LivingEntity$Type): void
public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AscensionEffect$Type = ($AscensionEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AscensionEffect_ = $AscensionEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldTrimLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ShieldEntity, $ShieldEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldEntity"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ShieldModel, $ShieldModel$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/shield/$ShieldModel"

export class $ShieldTrimLayer extends $RenderLayer<($ShieldEntity), ($ShieldModel)> {

constructor(arg0: $RenderLayerParent$Type<($ShieldEntity$Type), ($ShieldModel$Type)>, arg1: $EntityRendererProvider$Context$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $ShieldEntity$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShieldTrimLayer$Type = ($ShieldTrimLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShieldTrimLayer_ = $ShieldTrimLayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/guiding_bolt/$GuidingBoltRenderer" {
import {$GuidingBoltProjectile, $GuidingBoltProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/guiding_bolt/$GuidingBoltProjectile"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GuidingBoltRenderer extends $EntityRenderer<($GuidingBoltProjectile)> {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $GuidingBoltProjectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "createBodyLayer"(): $LayerDefinition
public "getTextureLocation"(arg0: $GuidingBoltProjectile$Type): $ResourceLocation
public "getFireTextureLocation"(arg0: $Projectile$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuidingBoltRenderer$Type = ($GuidingBoltRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuidingBoltRenderer_ = $GuidingBoltRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/registry/$SchoolRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$IForgeRegistry, $IForgeRegistry$Type} from "packages/net/minecraftforge/registries/$IForgeRegistry"
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$ModelEvent$RegisterAdditional, $ModelEvent$RegisterAdditional$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$RegisterAdditional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $SchoolRegistry {
static readonly "SCHOOL_REGISTRY_KEY": $ResourceKey<($Registry<($SchoolType)>)>
static readonly "REGISTRY": $Supplier<($IForgeRegistry<($SchoolType)>)>
static readonly "FIRE_RESOURCE": $ResourceLocation
static readonly "ICE_RESOURCE": $ResourceLocation
static readonly "LIGHTNING_RESOURCE": $ResourceLocation
static readonly "HOLY_RESOURCE": $ResourceLocation
static readonly "ENDER_RESOURCE": $ResourceLocation
static readonly "BLOOD_RESOURCE": $ResourceLocation
static readonly "EVOCATION_RESOURCE": $ResourceLocation
static readonly "NATURE_RESOURCE": $ResourceLocation
static readonly "ELDRITCH_RESOURCE": $ResourceLocation
static readonly "FIRE": $RegistryObject<($SchoolType)>
static readonly "ICE": $RegistryObject<($SchoolType)>
static readonly "LIGHTNING": $RegistryObject<($SchoolType)>
static readonly "HOLY": $RegistryObject<($SchoolType)>
static readonly "ENDER": $RegistryObject<($SchoolType)>
static readonly "BLOOD": $RegistryObject<($SchoolType)>
static readonly "EVOCATION": $RegistryObject<($SchoolType)>
static readonly "NATURE": $RegistryObject<($SchoolType)>
static readonly "ELDRITCH": $RegistryObject<($SchoolType)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
public static "getSchoolFromFocus"(arg0: $ItemStack$Type): $SchoolType
public static "clientSetup"(arg0: $ModelEvent$RegisterAdditional$Type): void
public static "getSchool"(arg0: $ResourceLocation$Type): $SchoolType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SchoolRegistry$Type = ($SchoolRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SchoolRegistry_ = $SchoolRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$KeeperFlambergeItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ExtendedSwordItem, $ExtendedSwordItem$Type} from "packages/io/redspace/ironsspellbooks/api/item/weapons/$ExtendedSwordItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $KeeperFlambergeItem extends $ExtendedSwordItem {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeeperFlambergeItem$Type = ($KeeperFlambergeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeeperFlambergeItem_ = $KeeperFlambergeItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/target_area/$TargetAreaRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$TargetedAreaEntity, $TargetedAreaEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/target_area/$TargetedAreaEntity"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TargetAreaRenderer extends $EntityRenderer<($TargetedAreaEntity)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $TargetedAreaEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $TargetedAreaEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetAreaRenderer$Type = ($TargetAreaRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetAreaRenderer_ = $TargetAreaRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$AutoSpellConfig" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $AutoSpellConfig extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $AutoSpellConfig {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AutoSpellConfig$Type = ($AutoSpellConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AutoSpellConfig_ = $AutoSpellConfig$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$CreateScrollCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CreateScrollCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateScrollCommand$Type = ($CreateScrollCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateScrollCommand_ = $CreateScrollCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$DevourSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DevourSpell extends $AbstractSpell {

constructor()

public "getHpBonus"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DevourSpell$Type = ($DevourSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DevourSpell_ = $DevourSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/icicle/$IcicleProjectile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $IcicleProjectile extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IcicleProjectile$Type = ($IcicleProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IcicleProjectile_ = $IcicleProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/poison_arrow/$PoisonArrowRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Matrix3f, $Matrix3f$Type} from "packages/org/joml/$Matrix3f"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PoisonArrow, $PoisonArrow$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/poison_arrow/$PoisonArrow"

export class $PoisonArrowRenderer extends $EntityRenderer<($PoisonArrow)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $PoisonArrow$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $PoisonArrow$Type): $ResourceLocation
public static "getTextureLocation"(): $ResourceLocation
public static "vertex"(arg0: $Matrix4f$Type, arg1: $Matrix3f$Type, arg2: $VertexConsumer$Type, arg3: integer, arg4: integer, arg5: integer, arg6: float, arg7: float, arg8: integer, arg9: integer, arg10: integer, arg11: integer): void
public static "renderModel"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer): void
get "textureLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonArrowRenderer$Type = ($PoisonArrowRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonArrowRenderer_ = $PoisonArrowRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$WanderingMagicianArmorItem" {
import {$ExtendedArmorItem, $ExtendedArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ExtendedArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $WanderingMagicianArmorItem extends $ExtendedArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WanderingMagicianArmorItem$Type = ($WanderingMagicianArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WanderingMagicianArmorItem_ = $WanderingMagicianArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/consumables/$NetherwardTinctureItem" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$DrinkableItem, $DrinkableItem$Type} from "packages/io/redspace/ironsspellbooks/item/consumables/$DrinkableItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $NetherwardTinctureItem extends $DrinkableItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getDrinkingSound"(): $SoundEvent
get "drinkingSound"(): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetherwardTinctureItem$Type = ($NetherwardTinctureItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetherwardTinctureItem_ = $NetherwardTinctureItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/$FireflyJar" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FireflyJar extends $Block {
static readonly "SHAPE": $VoxelShape
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireflyJar$Type = ($FireflyJar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireflyJar_ = $FireflyJar$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$GluttonySpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $GluttonySpell extends $AbstractSpell {

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GluttonySpell$Type = ($GluttonySpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GluttonySpell_ = $GluttonySpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$DebugWizardAttackGoal" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"

export class $DebugWizardAttackGoal extends $Goal {

constructor(arg0: $IMagicEntity$Type, arg1: $AbstractSpell$Type, arg2: integer, arg3: integer)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugWizardAttackGoal$Type = ($DebugWizardAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugWizardAttackGoal_ = $DebugWizardAttackGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/network/$IClientEventEntity" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IClientEventEntity {

 "handleClientEvent"(arg0: byte): void

(arg0: byte): void
}

export namespace $IClientEventEntity {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IClientEventEntity$Type = ($IClientEventEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IClientEventEntity_ = $IClientEventEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$BloodParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $BloodParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodParticle$Type = ($BloodParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodParticle_ = $BloodParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/magic/$MagicData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PlayerRecasts, $PlayerRecasts$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$PlayerRecasts"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PlayerCooldowns, $PlayerCooldowns$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$PlayerCooldowns"
import {$ICastData, $ICastData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastData"
import {$SyncedSpellData, $SyncedSpellData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$SyncedSpellData"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $MagicData {
static readonly "MANA": string
static readonly "COOLDOWNS": string
static readonly "RECASTS": string

constructor(arg0: $ServerPlayer$Type)
constructor()
constructor(arg0: boolean)

public "toString"(): string
public "isCasting"(): boolean
public "getSyncedData"(): $SyncedSpellData
public "getCastingEquipmentSlot"(): string
public "resetAdditionalCastData"(): void
public "setAdditionalCastData"(arg0: $ICastData$Type): void
public "getCastingSpellLevel"(): integer
public "getCastDurationRemaining"(): integer
public "getPlayerCastingItem"(): $ItemStack
public "getAdditionalCastData"(): $ICastData
public "setPlayerCastingItem"(arg0: $ItemStack$Type): void
public "getCastCompletionPercent"(): float
public "getCastSource"(): $CastSource
public "setServerPlayer"(arg0: $ServerPlayer$Type): void
public "getMana"(): float
public "setMana"(arg0: float): void
public "addMana"(arg0: float): void
public "setSyncedData"(arg0: $SyncedSpellData$Type): void
public "popMarkedPoison"(): boolean
public "getCastDuration"(): integer
public "getCastType"(): $CastType
public "handleCastDuration"(): void
public "getPlayerCooldowns"(): $PlayerCooldowns
public "setPlayerRecasts"(arg0: $PlayerRecasts$Type): void
public "getCastingSpell"(): $SpellData
public "initiateCast"(arg0: $AbstractSpell$Type, arg1: integer, arg2: integer, arg3: $CastSource$Type, arg4: string): void
public "getCastingSpellId"(): string
public "resetCastingState"(): void
public "getPlayerRecasts"(): $PlayerRecasts
public "loadNBTData"(arg0: $CompoundTag$Type): void
public "saveNBTData"(arg0: $CompoundTag$Type): void
public static "getPlayerMagicData"(arg0: $LivingEntity$Type): $MagicData
public "markPoisoned"(): void
get "casting"(): boolean
get "syncedData"(): $SyncedSpellData
get "castingEquipmentSlot"(): string
set "additionalCastData"(value: $ICastData$Type)
get "castingSpellLevel"(): integer
get "castDurationRemaining"(): integer
get "playerCastingItem"(): $ItemStack
get "additionalCastData"(): $ICastData
set "playerCastingItem"(value: $ItemStack$Type)
get "castCompletionPercent"(): float
get "castSource"(): $CastSource
set "serverPlayer"(value: $ServerPlayer$Type)
get "mana"(): float
set "mana"(value: float)
set "syncedData"(value: $SyncedSpellData$Type)
get "castDuration"(): integer
get "castType"(): $CastType
get "playerCooldowns"(): $PlayerCooldowns
set "playerRecasts"(value: $PlayerRecasts$Type)
get "castingSpell"(): $SpellData
get "castingSpellId"(): string
get "playerRecasts"(): $PlayerRecasts
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicData$Type = ($MagicData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicData_ = $MagicData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundFieryExplosionParticles" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundFieryExplosionParticles {

constructor(arg0: $Vec3$Type, arg1: float)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundFieryExplosionParticles$Type = ($ClientboundFieryExplosionParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundFieryExplosionParticles_ = $ClientboundFieryExplosionParticles$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$CastType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CastType extends $Enum<($CastType)> {
static readonly "NONE": $CastType
static readonly "INSTANT": $CastType
static readonly "LONG": $CastType
static readonly "CONTINUOUS": $CastType


public static "values"(): ($CastType)[]
public static "valueOf"(arg0: string): $CastType
public "getValue"(): integer
/**
 * 
 * @deprecated
 */
public "holdToCast"(): boolean
public "immediatelySuppressRightClicks"(): boolean
get "value"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CastType$Type = (("continuous") | ("none") | ("long") | ("instant")) | ($CastType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CastType_ = $CastType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/item/weapons/$ExtendedSwordItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$SwordItem, $SwordItem$Type} from "packages/net/minecraft/world/item/$SwordItem"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ExtendedSwordItem extends $SwordItem {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: double, arg2: double, arg3: $Map$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg4: $Item$Properties$Type)

public "getDefaultAttributeModifiers"(arg0: $EquipmentSlot$Type): $Multimap<($Attribute), ($AttributeModifier)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedSwordItem$Type = ($ExtendedSwordItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedSwordItem_ = $ExtendedSwordItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$InstantManaEffect" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CustomDescriptionMobEffect, $CustomDescriptionMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$CustomDescriptionMobEffect"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $InstantManaEffect extends $CustomDescriptionMobEffect {
static readonly "manaPerAmplifier": integer
static readonly "manaPerAmplifierPercent": float

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getDescriptionLine"(arg0: $MobEffectInstance$Type): $Component
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "isInstantenous"(): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
public "applyInstantenousEffect"(arg0: $Entity$Type, arg1: $Entity$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: double): void
get "instantenous"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InstantManaEffect$Type = ($InstantManaEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InstantManaEffect_ = $InstantManaEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ice/$IceBlockSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $IceBlockSpell extends $AbstractSpell {

constructor()

public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IceBlockSpell$Type = ($IceBlockSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IceBlockSpell_ = $IceBlockSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$SpellBook" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$CurioBaseItem, $CurioBaseItem$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$CurioBaseItem"
import {$SpellRarity, $SpellRarity$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IPresetSpellContainer, $IPresetSpellContainer$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$IPresetSpellContainer"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ISpellbook, $ISpellbook$Type} from "packages/io/redspace/ironsspellbooks/api/item/$ISpellbook"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SpellBook extends $CurioBaseItem implements $ISpellbook, $IPresetSpellContainer {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: integer, arg1: $SpellRarity$Type, arg2: $Item$Properties$Type)
constructor(arg0: integer, arg1: $SpellRarity$Type)
constructor()

public "isUnique"(): boolean
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "getMaxSpellSlots"(): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "initializeSpellContainer"(arg0: $ItemStack$Type): void
public "getRarity"(): $SpellRarity
get "unique"(): boolean
get "maxSpellSlots"(): integer
get "rarity"(): $SpellRarity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellBook$Type = ($SpellBook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellBook_ = $SpellBook$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$UpgradeTypes" {
import {$UpgradeType, $UpgradeType$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$UpgradeType"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier$Operation, $AttributeModifier$Operation$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier$Operation"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $UpgradeTypes extends $Enum<($UpgradeTypes)> implements $UpgradeType {
static readonly "FIRE_SPELL_POWER": $UpgradeTypes
static readonly "ICE_SPELL_POWER": $UpgradeTypes
static readonly "LIGHTNING_SPELL_POWER": $UpgradeTypes
static readonly "HOLY_SPELL_POWER": $UpgradeTypes
static readonly "ENDER_SPELL_POWER": $UpgradeTypes
static readonly "BLOOD_SPELL_POWER": $UpgradeTypes
static readonly "EVOCATION_SPELL_POWER": $UpgradeTypes
static readonly "NATURE_SPELL_POWER": $UpgradeTypes
static readonly "COOLDOWN": $UpgradeTypes
static readonly "SPELL_RESISTANCE": $UpgradeTypes
static readonly "MANA": $UpgradeTypes
static readonly "ATTACK_DAMAGE": $UpgradeTypes
static readonly "ATTACK_SPEED": $UpgradeTypes
static readonly "HEALTH": $UpgradeTypes


public static "values"(): ($UpgradeTypes)[]
public static "valueOf"(arg0: string): $UpgradeTypes
public "getId"(): $ResourceLocation
public "getAttribute"(): $Attribute
public "getAmountPerUpgrade"(): float
public "getOperation"(): $AttributeModifier$Operation
public static "registerUpgrade"(arg0: $UpgradeType$Type): void
public static "getUpgrade"(arg0: $ResourceLocation$Type): $Optional<($UpgradeType)>
get "id"(): $ResourceLocation
get "attribute"(): $Attribute
get "amountPerUpgrade"(): float
get "operation"(): $AttributeModifier$Operation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeTypes$Type = (("ice_spell_power") | ("spell_resistance") | ("health") | ("holy_spell_power") | ("attack_damage") | ("attack_speed") | ("nature_spell_power") | ("fire_spell_power") | ("ender_spell_power") | ("evocation_spell_power") | ("mana") | ("blood_spell_power") | ("cooldown") | ("lightning_spell_power")) | ($UpgradeTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeTypes_ = $UpgradeTypes$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$ClearRecastsCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $ClearRecastsCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClearRecastsCommand$Type = ($ClearRecastsCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClearRecastsCommand_ = $ClearRecastsCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/pyromancer/$PyromancerEntity" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$IMerchantWizard, $IMerchantWizard$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/$IMerchantWizard"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$MerchantOffers, $MerchantOffers$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffers"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$NeutralWizard, $NeutralWizard$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$NeutralWizard"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PyromancerEntity extends $NeutralWizard implements $IMerchantWizard {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "getRestocksToday"(): integer
public "setRestocksToday"(arg0: integer): void
public "fireImmune"(): boolean
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "getTradingPlayer"(): $Player
public "setTradingPlayer"(arg0: $Player$Type): void
public "overrideOffers"(arg0: $MerchantOffers$Type): void
public "notifyTrade"(arg0: $MerchantOffer$Type): void
public "notifyTradeUpdated"(arg0: $ItemStack$Type): void
public "getNotifyTradeSound"(): $SoundEvent
public "getLastRestockGameTime"(): long
public "setLastRestockGameTime"(arg0: long): void
public "setLastRestockCheckDayTime"(arg0: long): void
public "getLastRestockCheckDayTime"(): long
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "getAngerSound"(): $Optional<($SoundEvent)>
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "getOffers"(): $MerchantOffers
public "isTrading"(): boolean
public "shouldRestock"(): boolean
public "needsToRestock"(): boolean
public "allowedToRestock"(): boolean
public "serializeMerchant"(arg0: $CompoundTag$Type, arg1: $MerchantOffers$Type, arg2: long, arg3: integer): void
public "restock"(): void
public "showProgressBar"(): boolean
public "isClientSide"(): boolean
public "overrideXp"(arg0: integer): void
public "deserializeMerchant"(arg0: $CompoundTag$Type, arg1: $Consumer$Type<($MerchantOffers$Type)>): void
public "getVillagerXp"(): integer
public "canRestock"(): boolean
public "openTradingScreen"(arg0: $Player$Type, arg1: $Component$Type, arg2: integer): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "canAttack"(arg0: $LivingEntity$Type): boolean
public "setTarget"(arg0: $LivingEntity$Type): void
public "getTarget"(): $LivingEntity
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "restocksToday"(): integer
set "restocksToday"(value: integer)
get "tradingPlayer"(): $Player
set "tradingPlayer"(value: $Player$Type)
get "notifyTradeSound"(): $SoundEvent
get "lastRestockGameTime"(): long
set "lastRestockGameTime"(value: long)
set "lastRestockCheckDayTime"(value: long)
get "lastRestockCheckDayTime"(): long
get "angerSound"(): $Optional<($SoundEvent)>
get "offers"(): $MerchantOffers
get "trading"(): boolean
get "clientSide"(): boolean
get "villagerXp"(): integer
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
set "target"(value: $LivingEntity$Type)
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PyromancerEntity$Type = ($PyromancerEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PyromancerEntity_ = $PyromancerEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/setup/$ModSetup" {
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"

export class $ModSetup {

constructor()

public static "init"(arg0: $FMLCommonSetupEvent$Type): void
public static "setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModSetup$Type = ($ModSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModSetup_ = $ModSetup$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/consumables/$FireAleItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DrinkableItem, $DrinkableItem$Type} from "packages/io/redspace/ironsspellbooks/item/consumables/$DrinkableItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FireAleItem extends $DrinkableItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getMaxStackSize"(arg0: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireAleItem$Type = ($FireAleItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireAleItem_ = $FireAleItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/creeper_head/$CreeperHeadProjectile" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$WitherSkull, $WitherSkull$Type} from "packages/net/minecraft/world/entity/projectile/$WitherSkull"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CreeperHeadProjectile extends $WitherSkull implements $AntiMagicSusceptible {
 "xPower": double
 "yPower": double
 "zPower": double
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $LivingEntity$Type, arg1: $Level$Type, arg2: $Vec3$Type, arg3: float)
constructor(arg0: $LivingEntity$Type, arg1: $Level$Type, arg2: float, arg3: float)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "setChainOnKill"(arg0: boolean): void
public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
set "chainOnKill"(value: boolean)
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreeperHeadProjectile$Type = ($CreeperHeadProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreeperHeadProjectile_ = $CreeperHeadProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/loot/$RandomizeRingEnhancementFunction" {
import {$SpellFilter, $SpellFilter$Type} from "packages/io/redspace/ironsspellbooks/loot/$SpellFilter"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$LootItemConditionalFunction$Builder, $LootItemConditionalFunction$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemConditionalFunction$Builder"
import {$LootItemConditionalFunction, $LootItemConditionalFunction$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemConditionalFunction"

export class $RandomizeRingEnhancementFunction extends $LootItemConditionalFunction {


public static "create"(arg0: $SpellFilter$Type): $LootItemConditionalFunction$Builder<(any)>
public static "allSpells"(): $LootItemConditionalFunction$Builder<(any)>
public "getType"(): $LootItemFunctionType
public static "decorate"(arg0: $BiFunction$Type<($ItemStack$Type), ($LootContext$Type), ($ItemStack$Type)>, arg1: $Consumer$Type<($ItemStack$Type)>, arg2: $LootContext$Type): $Consumer<($ItemStack)>
get "type"(): $LootItemFunctionType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomizeRingEnhancementFunction$Type = ($RandomizeRingEnhancementFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomizeRingEnhancementFunction_ = $RandomizeRingEnhancementFunction$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$WispParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $WispParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WispParticle$Type = ($WispParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WispParticle_ = $WispParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$BlastwaveParticleOptions" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$DustParticleOptionsBase, $DustParticleOptionsBase$Type} from "packages/net/minecraft/core/particles/$DustParticleOptionsBase"
import {$ParticleOptions$Deserializer, $ParticleOptions$Deserializer$Type} from "packages/net/minecraft/core/particles/$ParticleOptions$Deserializer"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $BlastwaveParticleOptions extends $DustParticleOptionsBase {
static readonly "CODEC": $Codec<($BlastwaveParticleOptions)>
static readonly "DESERIALIZER": $ParticleOptions$Deserializer<($BlastwaveParticleOptions)>
static readonly "MIN_SCALE": float
static readonly "MAX_SCALE": float

constructor(arg0: $Vector3f$Type, arg1: float)

public "getType"(): $ParticleType<($BlastwaveParticleOptions)>
public "getScale"(): float
public "writeToNetwork"(arg0: $FriendlyByteBuf$Type): void
get "type"(): $ParticleType<($BlastwaveParticleOptions)>
get "scale"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlastwaveParticleOptions$Type = ($BlastwaveParticleOptions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlastwaveParticleOptions_ = $BlastwaveParticleOptions$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ice/$IcicleSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $IcicleSpell extends $AbstractSpell {

constructor()

public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IcicleSpell$Type = ($IcicleSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IcicleSpell_ = $IcicleSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$FireflyParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $FireflyParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireflyParticle$Type = ($FireflyParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireflyParticle_ = $FireflyParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$NeutralWizard" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$NeutralMob, $NeutralMob$Type} from "packages/net/minecraft/world/entity/$NeutralMob"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $NeutralWizard extends $AbstractSpellCastingMob implements $NeutralMob {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>


public "aiStep"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "isAngryAt"(arg0: $LivingEntity$Type): boolean
public "setPersistentAngerTarget"(arg0: $UUID$Type): void
public "startPersistentAngerTimer"(): void
public "setRemainingPersistentAngerTime"(arg0: integer): void
public "getRemainingPersistentAngerTime"(): integer
public "getPersistentAngerTarget"(): $UUID
public "getAngerSound"(): $Optional<($SoundEvent)>
public "isHostileTowards"(arg0: $LivingEntity$Type): boolean
public "guardsBlocks"(): boolean
public "getAngerThreshold"(): integer
public "increaseAngerLevel"(arg0: integer): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "canAttack"(arg0: $LivingEntity$Type): boolean
public "playerDied"(arg0: $Player$Type): void
public "addPersistentAngerSaveData"(arg0: $CompoundTag$Type): void
public "readPersistentAngerSaveData"(arg0: $Level$Type, arg1: $CompoundTag$Type): void
public "updatePersistentAnger"(arg0: $ServerLevel$Type, arg1: boolean): void
public "forgetCurrentTargetAndRefreshUniversalAnger"(): void
public "isAngryAtAllPlayers"(arg0: $Level$Type): boolean
public "stopBeingAngry"(): void
public "isAngry"(): boolean
public "setTarget"(arg0: $LivingEntity$Type): void
public "getTarget"(): $LivingEntity
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "persistentAngerTarget"(value: $UUID$Type)
set "remainingPersistentAngerTime"(value: integer)
get "remainingPersistentAngerTime"(): integer
get "persistentAngerTarget"(): $UUID
get "angerSound"(): $Optional<($SoundEvent)>
get "angerThreshold"(): integer
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "angry"(): boolean
set "target"(value: $LivingEntity$Type)
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NeutralWizard$Type = ($NeutralWizard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NeutralWizard_ = $NeutralWizard$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$AnimationState, $AnimationState$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationState"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"

export class $DeadKingModel extends $AbstractSpellCastingMobModel {
static readonly "TEXTURE_NORMAL": $ResourceLocation
static readonly "TEXTURE_CORPSE": $ResourceLocation
static readonly "TEXTURE_ENRAGED": $ResourceLocation
static readonly "MODEL": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getModelResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "setCustomAnimations"(arg0: $AbstractSpellCastingMob$Type, arg1: long, arg2: $AnimationState$Type<($AbstractSpellCastingMob$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingModel$Type = ($DeadKingModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingModel_ = $DeadKingModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/registry/$SpellRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$IForgeRegistry, $IForgeRegistry$Type} from "packages/net/minecraftforge/registries/$IForgeRegistry"
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$NoneSpell, $NoneSpell$Type} from "packages/io/redspace/ironsspellbooks/spells/$NoneSpell"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $SpellRegistry {
static readonly "SPELL_REGISTRY_KEY": $ResourceKey<($Registry<($AbstractSpell)>)>
static readonly "REGISTRY": $Supplier<($IForgeRegistry<($AbstractSpell)>)>
static readonly "ACUPUNCTURE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "BLOOD_NEEDLES_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "BLOOD_SLASH_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "BLOOD_STEP_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "DEVOUR_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "HEARTSTOP_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "RAISE_DEAD_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "RAY_OF_SIPHONING_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "WITHER_SKULL_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SACRIFICE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "COUNTERSPELL_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "DRAGON_BREATH_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "EVASION_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "MAGIC_ARROW_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "MAGIC_MISSILE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "STARFALL_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "TELEPORT_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SUMMON_ENDER_CHEST_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "RECALL_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "PORTAL_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ECHOING_STRIKES_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "BLACK_HOLE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "CHAIN_CREEPER_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FANG_STRIKE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FANG_WARD_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FIRECRACKER_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "GUST_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "INVISIBILITY_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "LOB_CREEPER_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SHIELD_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SPECTRAL_HAMMER_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SUMMON_HORSE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SUMMON_VEX_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SLOW_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ARROW_VOLLEY_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "WOLOLO_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "BLAZE_STORM_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "BURNING_DASH_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FIREBALL_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FIREBOLT_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FIRE_BREATH_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "MAGMA_BOMB_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "WALL_OF_FIRE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "HEAT_SURGE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FLAMING_STRIKE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SCORCH_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FLAMING_BARRAGE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ANGEL_WINGS_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "BLESSING_OF_LIFE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "CLOUD_OF_REGENERATION_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FORTIFY_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "GREATER_HEAL_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "GUIDING_BOLT_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "HEALING_CIRCLE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "HEAL_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "WISP_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "DIVINE_SMITE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "HASTE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "CONE_OF_COLD_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FROST_STEP_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ICE_BLOCK_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ICICLE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SUMMON_POLAR_BEAR_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "RAY_OF_FROST_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FROSTWAVE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ASCENSION_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "CHAIN_LIGHTNING_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "CHARGE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ELECTROCUTE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "LIGHTNING_BOLT_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "LIGHTNING_LANCE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SHOCKWAVE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "THUNDERSTORM_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "BALL_LIGHTNING_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ACID_ORB_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "BLIGHT_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "POISON_ARROW_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "POISON_BREATH_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "POISON_SPLASH_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ROOT_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SPIDER_ASPECT_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "FIREFLY_SWARM_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "OAKSKIN_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "EARTHQUAKE_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "STOMP_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "GLUTTONY_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ABYSSAL_SHROUD_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SCULK_TENTACLES_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "SONIC_BOOM_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "PLANAR_SIGHT_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "TELEKINESIS_SPELL": $RegistryObject<($AbstractSpell)>
static readonly "ELDRITCH_BLAST_SPELL": $RegistryObject<($AbstractSpell)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
public static "none"(): $NoneSpell
public static "getEnabledSpells"(): $List<($AbstractSpell)>
public static "getSpellsForSchool"(arg0: $SchoolType$Type): $List<($AbstractSpell)>
public static "onConfigReload"(): void
public static "getSpell"(arg0: string): $AbstractSpell
public static "getSpell"(arg0: $ResourceLocation$Type): $AbstractSpell
get "enabledSpells"(): $List<($AbstractSpell)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellRegistry$Type = ($SpellRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellRegistry_ = $SpellRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$SpellContainer" {
import {$ISpellContainer, $ISpellContainer$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ISpellContainer"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $SpellContainer implements $ISpellContainer {
static readonly "SPELL_SLOT_CONTAINER": string
static readonly "SPELL_DATA": string
static readonly "MAX_SLOTS": string
static readonly "MUST_EQUIP": string
static readonly "SPELL_WHEEL": string
static readonly "SLOT_INDEX": string
static readonly "SPELL_ID": string
static readonly "SPELL_LEVEL": string
static readonly "SPELL_LOCKED": string

constructor(arg0: $ItemStack$Type)
constructor(arg0: integer, arg1: boolean, arg2: boolean)
constructor()

public "isEmpty"(): boolean
public "save"(arg0: $ItemStack$Type): void
public "getAllSpells"(): ($SpellData)[]
public "spellWheel"(): boolean
public "mustEquip"(): boolean
public "getActiveSpells"(): $List<($SpellData)>
public "getSpellAtIndex"(arg0: integer): $SpellData
public "getMaxSpellCount"(): integer
public "addSpell"(arg0: $AbstractSpell$Type, arg1: integer, arg2: boolean, arg3: $ItemStack$Type): boolean
public "removeSpellAtIndex"(arg0: integer, arg1: $ItemStack$Type): boolean
public static "isLegacyTagFormat"(arg0: $CompoundTag$Type): boolean
public "getIndexForSpell"(arg0: $AbstractSpell$Type): integer
public "setMaxSpellCount"(arg0: integer): void
public "addSpellAtIndex"(arg0: $AbstractSpell$Type, arg1: integer, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): boolean
public "removeSpell"(arg0: $AbstractSpell$Type, arg1: $ItemStack$Type): boolean
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "getActiveSpellCount"(): integer
public "getNextAvailableIndex"(): integer
public static "get"(arg0: $ItemStack$Type): $ISpellContainer
public static "create"(arg0: integer, arg1: boolean, arg2: boolean): $ISpellContainer
public static "getOrCreate"(arg0: $ItemStack$Type): $ISpellContainer
public static "isSpellContainer"(arg0: $ItemStack$Type): boolean
public static "createScrollContainer"(arg0: $AbstractSpell$Type, arg1: integer, arg2: $ItemStack$Type): $ISpellContainer
public static "createImbuedContainer"(arg0: $AbstractSpell$Type, arg1: integer, arg2: $ItemStack$Type): $ISpellContainer
get "empty"(): boolean
get "allSpells"(): ($SpellData)[]
get "activeSpells"(): $List<($SpellData)>
get "maxSpellCount"(): integer
set "maxSpellCount"(value: integer)
get "activeSpellCount"(): integer
get "nextAvailableIndex"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellContainer$Type = ($SpellContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellContainer_ = $SpellContainer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/devour_jaw/$DevourJaw" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DevourJaw extends $AoeEntity {
 "vigorLevel": integer
readonly "waitTime": integer
readonly "warmupTime": integer
readonly "deathTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type)

public "ambientParticles"(): void
public "shouldBeSaved"(): boolean
public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "refreshDimensions"(): void
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DevourJaw$Type = ($DevourJaw);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DevourJaw_ = $DevourJaw$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/magic_arrow/$MagicArrowProjectile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MagicArrowProjectile extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
public "tick"(): void
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicArrowProjectile$Type = ($MagicArrowProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicArrowProjectile_ = $MagicArrowProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$ClientMagicData" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PlayerRecasts, $PlayerRecasts$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$PlayerRecasts"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PlayerCooldowns, $PlayerCooldowns$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$PlayerCooldowns"
import {$SpellSelectionManager, $SpellSelectionManager$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$SpellSelectionManager"
import {$KeyframeAnimationPlayer, $KeyframeAnimationPlayer$Type} from "packages/dev/kosmx/playerAnim/api/layered/$KeyframeAnimationPlayer"
import {$SyncedSpellData, $SyncedSpellData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$SyncedSpellData"
import {$ClientSpellTargetingData, $ClientSpellTargetingData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$ClientSpellTargetingData"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ClientMagicData {
static "castingAnimationPlayerLookup": $HashMap<($UUID), ($KeyframeAnimationPlayer)>

constructor()

public static "getSpellSelectionManager"(): $SpellSelectionManager
public static "getCooldownPercent"(arg0: $AbstractSpell$Type): float
public static "setClientCastState"(arg0: string, arg1: integer, arg2: integer, arg3: $CastSource$Type, arg4: string): void
public static "setRecasts"(arg0: $PlayerRecasts$Type): void
public static "getRecasts"(): $PlayerRecasts
public static "getPlayerMana"(): integer
public static "getCooldowns"(): $PlayerCooldowns
public static "getSyncedSpellData"(arg0: $LivingEntity$Type): $SyncedSpellData
public static "isCasting"(): boolean
public static "setTargetingData"(arg0: $ClientSpellTargetingData$Type): void
public static "getTargetingData"(): $ClientSpellTargetingData
public static "resetTargetingData"(): void
public static "getCastingSpellLevel"(): integer
public static "getCastDurationRemaining"(): integer
public static "getCastCompletionPercent"(): float
public static "handleAbstractCastingMobSyncedData"(arg0: integer, arg1: $SyncedSpellData$Type): void
public static "handlePlayerSyncedData"(arg0: $SyncedSpellData$Type): void
public static "setMana"(arg0: integer): void
public static "getCastDuration"(): integer
public static "getCastType"(): $CastType
public static "handleCastDuration"(): void
public static "getCastingSpellId"(): string
public static "updateSpellSelectionManager"(arg0: $ServerPlayer$Type): void
public static "updateSpellSelectionManager"(): void
public static "resetClientCastState"(arg0: $UUID$Type): void
get "spellSelectionManager"(): $SpellSelectionManager
set "recasts"(value: $PlayerRecasts$Type)
get "recasts"(): $PlayerRecasts
get "playerMana"(): integer
get "cooldowns"(): $PlayerCooldowns
get "casting"(): boolean
set "targetingData"(value: $ClientSpellTargetingData$Type)
get "targetingData"(): $ClientSpellTargetingData
get "castingSpellLevel"(): integer
get "castDurationRemaining"(): integer
get "castCompletionPercent"(): float
set "mana"(value: integer)
get "castDuration"(): integer
get "castType"(): $CastType
get "castingSpellId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientMagicData$Type = ($ClientMagicData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientMagicData_ = $ClientMagicData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/small_magic_arrow/$SmallMagicArrow" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SmallMagicArrow extends $AbstractMagicProjectile {
 "shakeTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $Entity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "shoot"(arg0: $Vec3$Type): void
public "getSpeed"(): float
public "tick"(): void
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SmallMagicArrow$Type = ($SmallMagicArrow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SmallMagicArrow_ = $SmallMagicArrow$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$EldritchManuscript" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EldritchManuscript extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EldritchManuscript$Type = ($EldritchManuscript);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EldritchManuscript_ = $EldritchManuscript$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/worldgen/$VillageAddition" {
import {$ServerAboutToStartEvent, $ServerAboutToStartEvent$Type} from "packages/net/minecraftforge/event/server/$ServerAboutToStartEvent"

export class $VillageAddition {

constructor()

public static "addNewVillageBuilding"(arg0: $ServerAboutToStartEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillageAddition$Type = ($VillageAddition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillageAddition_ = $VillageAddition$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$ConePart" {
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$AbstractConeProjectile, $AbstractConeProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractConeProjectile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PartEntity, $PartEntity$Type} from "packages/net/minecraftforge/entity/$PartEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ConePart extends $PartEntity<($AbstractConeProjectile)> {
readonly "parentEntity": $AbstractConeProjectile
readonly "name": string
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $AbstractConeProjectile$Type, arg1: string, arg2: float, arg3: float)

public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "shouldBeSaved"(): boolean
public "is"(arg0: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConePart$Type = ($ConePart);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConePart_ = $ConePart$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$AngelWingsSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AngelWingsSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AngelWingsSpell$Type = ($AngelWingsSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AngelWingsSpell_ = $AngelWingsSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/inscription_table/network/$ServerboundInscribeSpell" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerboundInscribeSpell {

constructor(arg0: $BlockPos$Type, arg1: integer)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerboundInscribeSpell$Type = ($ServerboundInscribeSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerboundInscribeSpell_ = $ServerboundInscribeSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/horse/$SpectralSteedRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractHorseRenderer, $AbstractHorseRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$AbstractHorseRenderer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$HorseModel, $HorseModel$Type} from "packages/net/minecraft/client/model/$HorseModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SummonedHorse, $SummonedHorse$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedHorse"

export class $SpectralSteedRenderer extends $AbstractHorseRenderer<($SummonedHorse), ($HorseModel<($SummonedHorse)>)> {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $SummonedHorse$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpectralSteedRenderer$Type = ($SpectralSteedRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpectralSteedRenderer_ = $SpectralSteedRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundSyncCameraShake" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$CameraShakeData, $CameraShakeData$Type} from "packages/io/redspace/ironsspellbooks/api/util/$CameraShakeData"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundSyncCameraShake {

constructor(arg0: $ArrayList$Type<($CameraShakeData$Type)>)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundSyncCameraShake$Type = ($ClientboundSyncCameraShake);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundSyncCameraShake_ = $ClientboundSyncCameraShake$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$ElectromancerArmorModel" {
import {$DefaultedItemGeoModel, $DefaultedItemGeoModel$Type} from "packages/software/bernie/geckolib/model/$DefaultedItemGeoModel"
import {$ElectromancerArmorItem, $ElectromancerArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ElectromancerArmorItem"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ElectromancerArmorModel extends $DefaultedItemGeoModel<($ElectromancerArmorItem)> {

constructor()

public "getTextureResource"(arg0: $ElectromancerArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $ElectromancerArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $ElectromancerArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElectromancerArmorModel$Type = ($ElectromancerArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElectromancerArmorModel_ = $ElectromancerArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/cultist/$CultistModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"

export class $CultistModel extends $AbstractSpellCastingMobModel {
static readonly "TEXTURE": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CultistModel$Type = ($CultistModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CultistModel_ = $CultistModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$SyncedSpellData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$EntityDataSerializer, $EntityDataSerializer$Type} from "packages/net/minecraft/network/syncher/$EntityDataSerializer"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$SpinAttackType, $SpinAttackType$Type} from "packages/io/redspace/ironsspellbooks/player/$SpinAttackType"
import {$SpellSelection, $SpellSelection$Type} from "packages/io/redspace/ironsspellbooks/gui/overlays/$SpellSelection"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SyncedSpellData {
static readonly "ANGEL_WINGS": long
static readonly "EVASION": long
static readonly "HEARTSTOP": long
static readonly "ABYSSAL_SHROUD": long
static readonly "ASCENSION": long
static readonly "TRUE_INVIS": long
static readonly "CHARGED": long
static readonly "PLANAR_SIGHT": long
static readonly "HEAL_TARGET": long
static readonly "SYNCED_SPELL_DATA": $EntityDataSerializer<($SyncedSpellData)>

constructor(arg0: integer)
constructor(arg0: $LivingEntity$Type)

public "toString"(): string
public "doSync"(): void
public "isSpellLearned"(arg0: $AbstractSpell$Type): boolean
public "getPersistentData"(): $SyncedSpellData
public "getSpellSelection"(): $SpellSelection
public "subtractEvasionHit"(): void
public "addHeartstopDamage"(arg0: float): void
public "getSpinAttackType"(): $SpinAttackType
public "hasEffect"(arg0: long): boolean
public "syncToPlayer"(arg0: $ServerPlayer$Type): void
public "isCasting"(): boolean
public "getServerPlayerId"(): integer
public "forgetAllSpells"(): void
public "removeLocalEffect"(arg0: long): void
public "addLocalEffect"(arg0: long): void
public "hasDodgeEffect"(): boolean
public "hasLocalEffect"(arg0: long): boolean
public "addEffects"(arg0: long): void
public "learnSpell"(arg0: $AbstractSpell$Type): void
public "setSpellSelection"(arg0: $SpellSelection$Type): void
public "setSpinAttackType"(arg0: $SpinAttackType$Type): void
public "removeEffects"(arg0: long): void
public "getCastingEquipmentSlot"(): string
public "getCastingSpellLevel"(): integer
public "setEvasionHitsRemaining"(arg0: integer): void
public "setHeartstopAccumulatedDamage"(arg0: float): void
public "getHeartstopAccumulatedDamage"(): float
public "getEvasionHitsRemaining"(): integer
public "getCastingSpellId"(): string
public "setIsCasting"(arg0: boolean, arg1: string, arg2: integer, arg3: string): void
public "loadNBTData"(arg0: $CompoundTag$Type): void
public "saveNBTData"(arg0: $CompoundTag$Type): void
get "persistentData"(): $SyncedSpellData
get "spellSelection"(): $SpellSelection
get "spinAttackType"(): $SpinAttackType
get "casting"(): boolean
get "serverPlayerId"(): integer
set "spellSelection"(value: $SpellSelection$Type)
set "spinAttackType"(value: $SpinAttackType$Type)
get "castingEquipmentSlot"(): string
get "castingSpellLevel"(): integer
set "evasionHitsRemaining"(value: integer)
set "heartstopAccumulatedDamage"(value: float)
get "heartstopAccumulatedDamage"(): float
get "evasionHitsRemaining"(): integer
get "castingSpellId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncedSpellData$Type = ($SyncedSpellData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncedSpellData_ = $SyncedSpellData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/attribute/$IMagicAttribute" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMagicAttribute {

}

export namespace $IMagicAttribute {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMagicAttribute$Type = ($IMagicAttribute);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMagicAttribute_ = $IMagicAttribute$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$GeoLivingEntityRenderer" {
import {$GeoEntityRenderer, $GeoEntityRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoEntityRenderer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GeoLivingEntityRenderer<T extends ($LivingEntity) & ($GeoAnimatable)> extends $GeoEntityRenderer<(T)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: $GeoModel$Type<(T)>)

public "shouldShowName"(arg0: T): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeoLivingEntityRenderer$Type<T> = ($GeoLivingEntityRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeoLivingEntityRenderer_<T> = $GeoLivingEntityRenderer$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/necromancer/$NecromancerRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $NecromancerRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getRenderType"(arg0: $AbstractSpellCastingMob$Type, arg1: $ResourceLocation$Type, arg2: $MultiBufferSource$Type, arg3: float): $RenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NecromancerRenderer$Type = ($NecromancerRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NecromancerRenderer_ = $NecromancerRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/config/$ServerConfigs$SpellConfigParameters" {
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$SpellRarity, $SpellRarity$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity"

export class $ServerConfigs$SpellConfigParameters {


public "enabled"(): boolean
public "school"(): $SchoolType
public "manaMultiplier"(): double
public "cooldownInTicks"(): integer
public "powerMultiplier"(): double
public "minRarity"(): $SpellRarity
public "allowCrafting"(): boolean
public "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerConfigs$SpellConfigParameters$Type = ($ServerConfigs$SpellConfigParameters);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerConfigs$SpellConfigParameters_ = $ServerConfigs$SpellConfigParameters$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundAborptionParticles" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundAborptionParticles {

constructor(arg0: $Vec3$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundAborptionParticles$Type = ($ClientboundAborptionParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundAborptionParticles_ = $ClientboundAborptionParticles$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundGuidingBoltManagerStartTracking" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClientboundGuidingBoltManagerStartTracking {

constructor(arg0: $Entity$Type, arg1: $List$Type<($Projectile$Type)>)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundGuidingBoltManagerStartTracking$Type = ($ClientboundGuidingBoltManagerStartTracking);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundGuidingBoltManagerStartTracking_ = $ClientboundGuidingBoltManagerStartTracking$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/overlays/$RecastOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $RecastOverlay implements $IGuiOverlay {
static "instance": $RecastOverlay
static readonly "TEXTURE": $ResourceLocation

constructor()

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecastOverlay$Type = ($RecastOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecastOverlay_ = $RecastOverlay$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/magma_ball/$FireField" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FireField extends $AoeEntity {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireField$Type = ($FireField);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireField_ = $FireField$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/scroll_forge/$ScrollForgeMenu" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ScrollForgeTile, $ScrollForgeTile$Type} from "packages/io/redspace/ironsspellbooks/block/scroll_forge/$ScrollForgeTile"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ScrollForgeMenu extends $AbstractContainerMenu {
readonly "blockEntity": $ScrollForgeTile
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $FriendlyByteBuf$Type)
constructor(arg0: integer, arg1: $Inventory$Type, arg2: $BlockEntity$Type)

public "stillValid"(arg0: $Player$Type): boolean
public "canTakeItemForPickAll"(arg0: $ItemStack$Type, arg1: $Slot$Type): boolean
public "getFocusSlot"(): $Slot
public "getInkSlot"(): $Slot
public "getBlankScrollSlot"(): $Slot
public "getResultSlot"(): $Slot
public "setRecipeSpell"(arg0: $AbstractSpell$Type): void
public "onSlotsChanged"(arg0: integer): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
get "focusSlot"(): $Slot
get "inkSlot"(): $Slot
get "blankScrollSlot"(): $Slot
get "resultSlot"(): $Slot
set "recipeSpell"(value: $AbstractSpell$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollForgeMenu$Type = ($ScrollForgeMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollForgeMenu_ = $ScrollForgeMenu$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$CreateSpellBookCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CreateSpellBookCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateSpellBookCommand$Type = ($CreateSpellBookCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateSpellBookCommand_ = $CreateSpellBookCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/pyromancer/$PyromancerModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"

export class $PyromancerModel extends $AbstractSpellCastingMobModel {
static readonly "TEXTURE": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PyromancerModel$Type = ($PyromancerModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PyromancerModel_ = $PyromancerModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ice/$FrostStepSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $FrostStepSpell extends $AbstractSpell {

constructor()

public static "particleCloud"(arg0: $Level$Type, arg1: $Vec3$Type): void
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrostStepSpell$Type = ($FrostStepSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrostStepSpell_ = $FrostStepSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundSyncCooldowns" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$CooldownInstance, $CooldownInstance$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$CooldownInstance"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ClientboundSyncCooldowns {

constructor(arg0: $FriendlyByteBuf$Type)
constructor(arg0: $Map$Type<(string), ($CooldownInstance$Type)>)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public static "writeCoolDownInstance"(arg0: $FriendlyByteBuf$Type, arg1: $CooldownInstance$Type): void
public static "readCoolDownInstance"(arg0: $FriendlyByteBuf$Type): $CooldownInstance
public static "readSpellID"(arg0: $FriendlyByteBuf$Type): string
public static "writeSpellId"(arg0: $FriendlyByteBuf$Type, arg1: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundSyncCooldowns$Type = ($ClientboundSyncCooldowns);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundSyncCooldowns_ = $ClientboundSyncCooldowns$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$SlowSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SlowSpell extends $AbstractSpell {

constructor()

public "getDuration"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getAmplifier"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getTargetingColor"(): $Vector3f
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "targetingColor"(): $Vector3f
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlowSpell$Type = ($SlowSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlowSpell_ = $SlowSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$CustomDescriptionMobEffect" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CustomDescriptionMobEffect extends $MagicMobEffect {


public static "handleCustomPotionTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>, arg2: boolean, arg3: $MobEffectInstance$Type, arg4: $CustomDescriptionMobEffect$Type): void
public "getDescriptionLine"(arg0: $MobEffectInstance$Type): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomDescriptionMobEffect$Type = ($CustomDescriptionMobEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomDescriptionMobEffect_ = $CustomDescriptionMobEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/pumpkin/$PumpkinArmorModel" {
import {$PumpkinArmorItem, $PumpkinArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$PumpkinArmorItem"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PumpkinArmorModel extends $GeoModel<($PumpkinArmorItem)> {

constructor()

public "getTextureResource"(arg0: $PumpkinArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $PumpkinArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $PumpkinArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PumpkinArmorModel$Type = ($PumpkinArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PumpkinArmorModel_ = $PumpkinArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$MagicManager" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IMagicManager, $IMagicManager$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$IMagicManager"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"

export class $MagicManager implements $IMagicManager {
static readonly "MANA_REGEN_TICKS": integer
static readonly "CONTINUOUS_CAST_TICK_INTERVAL": integer

constructor()

public "tick"(arg0: $Level$Type): void
public "regenPlayerMana"(arg0: $ServerPlayer$Type, arg1: $MagicData$Type): boolean
public "clearCooldowns"(arg0: $ServerPlayer$Type): void
public static "getEffectiveSpellCooldown"(arg0: $AbstractSpell$Type, arg1: $Player$Type, arg2: $CastSource$Type): integer
public static "spawnParticles"(arg0: $Level$Type, arg1: $ParticleOptions$Type, arg2: double, arg3: double, arg4: double, arg5: integer, arg6: double, arg7: double, arg8: double, arg9: double, arg10: boolean): void
public "addCooldown"(arg0: $ServerPlayer$Type, arg1: $AbstractSpell$Type, arg2: $CastSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicManager$Type = ($MagicManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicManager_ = $MagicManager$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedVex" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Vex, $Vex$Type} from "packages/net/minecraft/world/entity/monster/$Vex"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MagicSummon, $MagicSummon$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$MagicSummon"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SummonTimer, $SummonTimer$Type} from "packages/io/redspace/ironsspellbooks/effect/$SummonTimer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SummonedVex extends $Vex implements $MagicSummon {
static readonly "FLAP_DEGREES_PER_TICK": float
static readonly "TICKS_PER_FLAP": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "setSummoner"(arg0: $LivingEntity$Type): void
public "onUnSummon"(): void
public "die"(arg0: $DamageSource$Type): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "isOnSameTeam"(arg0: $Entity$Type): boolean
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "isPreventingPlayerRest"(arg0: $Player$Type): boolean
public "m_8099_"(): void
public "getSummoner"(): $LivingEntity
public "onRemovedFromWorld"(): void
public "onAntiMagic"(arg0: $MagicData$Type): void
public "onDeathHelper"(): void
public "isAlliedHelper"(arg0: $Entity$Type): boolean
public "shouldIgnoreDamage"(arg0: $DamageSource$Type): boolean
public "onRemovedHelper"(arg0: $Entity$Type, arg1: $SummonTimer$Type): void
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "summoner"(value: $LivingEntity$Type)
get "summoner"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonedVex$Type = ($SummonedVex);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonedVex_ = $SummonedVex$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalEntity" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$PortalData, $PortalData$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalData"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PortalEntity extends $Entity implements $AntiMagicSusceptible {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $PortalData$Type)
constructor(arg0: $EntityType$Type<($PortalEntity$Type)>, arg1: $Level$Type)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "setTicksToLive"(arg0: integer): void
public "setPortalConnected"(): void
public "setOwnerUUID"(arg0: $UUID$Type): void
public "getOwnerUUID"(): $UUID
public "getPortalConnected"(): boolean
public "spawnParticles"(arg0: float, arg1: $Vector3f$Type): void
public "tick"(): void
public "onSyncedDataUpdated"(arg0: $EntityDataAccessor$Type<(any)>): void
public "checkForEntitiesToTeleport"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "onRemovedFromWorld"(): void
set "ticksToLive"(value: integer)
set "ownerUUID"(value: $UUID$Type)
get "ownerUUID"(): $UUID
get "portalConnected"(): boolean
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortalEntity$Type = ($PortalEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortalEntity_ = $PortalEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/fireball/$MagicFireball" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MagicFireball extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicFireball$Type = ($MagicFireball);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicFireball_ = $MagicFireball$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$SummonTimer" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $SummonTimer extends $MobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonTimer$Type = ($SummonTimer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonTimer_ = $SummonTimer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$UpgradeType" {
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier$Operation, $AttributeModifier$Operation$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier$Operation"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $UpgradeType {

 "getId"(): $ResourceLocation
 "getAttribute"(): $Attribute
 "getAmountPerUpgrade"(): float
 "getOperation"(): $AttributeModifier$Operation
}

export namespace $UpgradeType {
const UPGRADE_REGISTRY: $Map<($ResourceLocation), ($UpgradeType)>
function registerUpgrade(arg0: $UpgradeType$Type): void
function getUpgrade(arg0: $ResourceLocation$Type): $Optional<($UpgradeType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeType$Type = ($UpgradeType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeType_ = $UpgradeType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ice/$FrostbiteSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $FrostbiteSpell extends $AbstractSpell {

constructor()

public "getPercentDamage"(arg0: integer, arg1: $LivingEntity$Type): float
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "onServerCastTick"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): void
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrostbiteSpell$Type = ($FrostbiteSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrostbiteSpell_ = $FrostbiteSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/eldritch/$PlanarSightSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$AbstractEldritchSpell, $AbstractEldritchSpell$Type} from "packages/io/redspace/ironsspellbooks/spells/eldritch/$AbstractEldritchSpell"

export class $PlanarSightSpell extends $AbstractEldritchSpell {
static readonly "ELDRITCH_OBFUSCATED_STYLE": $Style

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlanarSightSpell$Type = ($PlanarSightSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlanarSightSpell_ = $PlanarSightSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingBoss$Phases" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $DeadKingBoss$Phases extends $Enum<($DeadKingBoss$Phases)> {
static readonly "FirstPhase": $DeadKingBoss$Phases
static readonly "Transitioning": $DeadKingBoss$Phases
static readonly "FinalPhase": $DeadKingBoss$Phases


public static "values"(): ($DeadKingBoss$Phases)[]
public static "valueOf"(arg0: string): $DeadKingBoss$Phases
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingBoss$Phases$Type = (("transitioning") | ("finalphase") | ("firstphase")) | ($DeadKingBoss$Phases);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingBoss$Phases_ = $DeadKingBoss$Phases$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$IronsDebugCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$IronsDebugCommand$IronsDebugCommandTypes, $IronsDebugCommand$IronsDebugCommandTypes$Type} from "packages/io/redspace/ironsspellbooks/command/$IronsDebugCommand$IronsDebugCommandTypes"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $IronsDebugCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
public static "getDataForType"(arg0: $CommandSourceStack$Type, arg1: $IronsDebugCommand$IronsDebugCommandTypes$Type): integer
public static "getReacstingData"(arg0: $CommandSourceStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronsDebugCommand$Type = ($IronsDebugCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronsDebugCommand_ = $IronsDebugCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$CatacombsZombie" {
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$Zombie, $Zombie$Type} from "packages/net/minecraft/world/entity/monster/$Zombie"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CatacombsZombie extends $Zombie {
static readonly "ZOMBIE_LEADER_CHANCE": float
static readonly "REINFORCEMENT_ATTEMPTS": integer
static readonly "REINFORCEMENT_RANGE_MAX": integer
static readonly "REINFORCEMENT_RANGE_MIN": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CatacombsZombie$Type = ($CatacombsZombie);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CatacombsZombie_ = $CatacombsZombie$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/$GenericAnimatedWarlockAttackGoal" {
import {$IAnimatedAttacker, $IAnimatedAttacker$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$IAnimatedAttacker"
import {$WarlockAttackGoal, $WarlockAttackGoal$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WarlockAttackGoal"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$AttackAnimationData, $AttackAnimationData$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$AttackAnimationData"

export class $GenericAnimatedWarlockAttackGoal<T extends ($PathfinderMob) & ($IAnimatedAttacker) & ($IMagicEntity)> extends $WarlockAttackGoal {
 "currentAttack": $AttackAnimationData
 "nextAttack": $AttackAnimationData
 "queueCombo": $AttackAnimationData

constructor(arg0: T, arg1: double, arg2: integer, arg3: integer, arg4: float)

public "playSwingSound"(): void
public "setComboChance"(arg0: float): $GenericAnimatedWarlockAttackGoal<(T)>
public "setMoveset"(arg0: $List$Type<($AttackAnimationData$Type)>): $GenericAnimatedWarlockAttackGoal<(T)>
public "canContinueToUse"(): boolean
public "stop"(): void
set "comboChance"(value: float)
set "moveset"(value: $List$Type<($AttackAnimationData$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericAnimatedWarlockAttackGoal$Type<T> = ($GenericAnimatedWarlockAttackGoal<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericAnimatedWarlockAttackGoal_<T> = $GenericAnimatedWarlockAttackGoal$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$ParticleHelper" {
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"

export class $ParticleHelper {
static readonly "FIRE": $ParticleOptions
static readonly "BLOOD": $ParticleOptions
static readonly "WISP": $ParticleOptions
static readonly "BLOOD_GROUND": $ParticleOptions
static readonly "SNOWFLAKE": $ParticleOptions
static readonly "ELECTRICITY": $ParticleOptions
static readonly "UNSTABLE_ENDER": $ParticleOptions
static readonly "EMBERS": $ParticleOptions
static readonly "SIPHON": $ParticleOptions
static readonly "ACID": $ParticleOptions
static readonly "ACID_BUBBLE": $ParticleOptions
static readonly "FOG": $ParticleOptions
static readonly "VOID_TENTACLE_FOG": $ParticleOptions
static readonly "ROOT_FOG": $ParticleOptions
static readonly "COMET_FOG": $ParticleOptions
static readonly "FOG_THUNDER_LIGHT": $ParticleOptions
static readonly "FOG_THUNDER_DARK": $ParticleOptions
static readonly "POISON_CLOUD": $ParticleOptions
static readonly "ICY_FOG": $ParticleOptions
static readonly "SUNBEAM": $ParticleOptions
static readonly "FIREFLY": $ParticleOptions
static readonly "PORTAL_FRAME": $ParticleOptions
static readonly "FIERY_SPARKS": $ParticleOptions
static readonly "ELECTRIC_SPARKS": $ParticleOptions
static readonly "SNOW_DUST": $ParticleOptions

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParticleHelper$Type = ($ParticleHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParticleHelper_ = $ParticleHelper$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/magic_arrow/$MagicArrowRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Matrix3f, $Matrix3f$Type} from "packages/org/joml/$Matrix3f"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MagicArrowProjectile, $MagicArrowProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/magic_arrow/$MagicArrowProjectile"

export class $MagicArrowRenderer extends $EntityRenderer<($MagicArrowProjectile)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $MagicArrowProjectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $MagicArrowProjectile$Type): $ResourceLocation
public static "getTextureLocation"(): $ResourceLocation
public static "vertex"(arg0: $Matrix4f$Type, arg1: $Matrix3f$Type, arg2: $VertexConsumer$Type, arg3: integer, arg4: integer, arg5: integer, arg6: float, arg7: float, arg8: integer, arg9: integer, arg10: integer, arg11: integer): void
public static "renderModel"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type): void
get "textureLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicArrowRenderer$Type = ($MagicArrowRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicArrowRenderer_ = $MagicArrowRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$MultiTargetEntityCastData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $MultiTargetEntityCastData implements $ICastDataSerializable {

constructor(...arg0: ($LivingEntity$Type)[])

public "reset"(): void
public "isTargeted"(arg0: $LivingEntity$Type): boolean
public "readFromBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getTargets"(): $List<($UUID)>
public "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
public "addTarget"(arg0: $LivingEntity$Type): void
public "addTarget"(arg0: $UUID$Type): void
public "deserializeNBT"(arg0: $CompoundTag$Type): void
get "targets"(): $List<($UUID)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiTargetEntityCastData$Type = ($MultiTargetEntityCastData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiTargetEntityCastData_ = $MultiTargetEntityCastData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/config/$ServerConfigs" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ServerConfigs$SpellConfigParameters, $ServerConfigs$SpellConfigParameters$Type} from "packages/io/redspace/ironsspellbooks/config/$ServerConfigs$SpellConfigParameters"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$ServerConfigsAccessor, $ServerConfigsAccessor$Type} from "packages/com/squoshi/irons_spells_js/mixin/$ServerConfigsAccessor"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ServerConfigs implements $ServerConfigsAccessor {
static readonly "SPEC": $ForgeConfigSpec
static readonly "DEFAULT_CONFIG": $ServerConfigs$SpellConfigParameters
static readonly "SWORDS_CONSUME_MANA": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "SWORDS_CD_MULTIPLIER": $ForgeConfigSpec$ConfigValue<(double)>
static readonly "CAN_ATTACK_OWN_SUMMONS": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "MAX_UPGRADES": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "MANA_SPAWN_PERCENT": $ForgeConfigSpec$ConfigValue<(double)>
static readonly "RUN_WORLD_UPGRADER": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "SCROLL_RECYCLE_CHANCE": $ForgeConfigSpec$ConfigValue<(double)>
static readonly "PRIEST_TOWER_SPAWNRATE": $ForgeConfigSpec$ConfigValue<(integer)>
static readonly "ALLOW_CAULDRON_BREWING": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "FURLED_MAPS_SKIP_CHUNKS": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "APPLY_ALL_MULTIHAND_ATTRIBUTES": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "BETTER_CREEPER_THUNDERHIT": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "SPELL_GREIFING": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "ADDITIONAL_WANDERING_TRADER_TRADES": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "DISABLE_ADVENTURE_MODE_CASTING": $ForgeConfigSpec$ConfigValue<(boolean)>
static readonly "RARITY_CONFIG": $ForgeConfigSpec$ConfigValue<($List<(any)>)>
static readonly "UPGRADE_WHITELIST_ITEMS": $Set<($Item)>
static readonly "UPGRADE_BLACKLIST_ITEMS": $Set<($Item)>
static readonly "IMBUE_WHITELIST_ITEMS": $Set<($Item)>
static readonly "IMBUE_BLACKLIST_ITEMS": $Set<($Item)>

constructor()

public static "onConfigReload"(): void
public static "getSpellConfig"(arg0: $AbstractSpell$Type): $ServerConfigs$SpellConfigParameters
public static "getSpellConfigs"(): $Map<(string), ($ServerConfigs$SpellConfigParameters)>
get "spellConfigs"(): $Map<(string), ($ServerConfigs$SpellConfigParameters)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerConfigs$Type = ($ServerConfigs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerConfigs_ = $ServerConfigs$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$VanillaAnvilRecipeMaker" {
import {$TieredItem, $TieredItem$Type} from "packages/net/minecraft/world/item/$TieredItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArmorItem, $ArmorItem$Type} from "packages/net/minecraft/world/item/$ArmorItem"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$IVanillaRecipeFactory, $IVanillaRecipeFactory$Type} from "packages/mezz/jei/api/recipe/vanilla/$IVanillaRecipeFactory"
import {$IJeiAnvilRecipe, $IJeiAnvilRecipe$Type} from "packages/mezz/jei/api/recipe/vanilla/$IJeiAnvilRecipe"

export class $VanillaAnvilRecipeMaker {

constructor()

public static "getAnvilRepairRecipes"(arg0: $IVanillaRecipeFactory$Type): $List<($IJeiAnvilRecipe)>
public static "getTieredItems"(): $List<($TieredItem)>
public static "getArmorItems"(): $List<($ArmorItem)>
public static "getArmorRepairRecipes"(arg0: $IVanillaRecipeFactory$Type): $Stream<($IJeiAnvilRecipe)>
public static "getItemRepairRecipes"(arg0: $IVanillaRecipeFactory$Type): $Stream<($IJeiAnvilRecipe)>
get "tieredItems"(): $List<($TieredItem)>
get "armorItems"(): $List<($ArmorItem)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaAnvilRecipeMaker$Type = ($VanillaAnvilRecipeMaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaAnvilRecipeMaker_ = $VanillaAnvilRecipeMaker$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$ZapParticleOption" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ParticleOptions$Deserializer, $ParticleOptions$Deserializer$Type} from "packages/net/minecraft/core/particles/$ParticleOptions$Deserializer"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"

export class $ZapParticleOption implements $ParticleOptions {
static readonly "CODEC": $Codec<($ZapParticleOption)>
static readonly "DESERIALIZER": $ParticleOptions$Deserializer<($ZapParticleOption)>

constructor(arg0: $Vec3$Type)

public "getDestination"(): $Vec3
public "getType"(): $ParticleType<($ZapParticleOption)>
public "writeToString"(): string
public "writeToNetwork"(arg0: $FriendlyByteBuf$Type): void
get "destination"(): $Vec3
get "type"(): $ParticleType<($ZapParticleOption)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZapParticleOption$Type = ($ZapParticleOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZapParticleOption_ = $ZapParticleOption$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$ScrollForgeRecipeCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ScrollForgeRecipe, $ScrollForgeRecipe$Type} from "packages/io/redspace/ironsspellbooks/jei/$ScrollForgeRecipe"
import {$IDrawable, $IDrawable$Type} from "packages/mezz/jei/api/gui/drawable/$IDrawable"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $ScrollForgeRecipeCategory implements $IRecipeCategory<($ScrollForgeRecipe)> {
static readonly "SCROLL_FORGE_RECIPE_RECIPE_TYPE": $RecipeType<($ScrollForgeRecipe)>

constructor(arg0: $IGuiHelper$Type)

public "getRecipeType"(): $RecipeType<($ScrollForgeRecipe)>
public "getIcon"(): $IDrawable
public "getTitle"(): $Component
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $ScrollForgeRecipe$Type, arg2: $IFocusGroup$Type): void
public "getBackground"(): $IDrawable
public "draw"(arg0: $ScrollForgeRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "getWidth"(): integer
public "getHeight"(): integer
public "isHandled"(arg0: $ScrollForgeRecipe$Type): boolean
public "handleInput"(arg0: $ScrollForgeRecipe$Type, arg1: double, arg2: double, arg3: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: $ScrollForgeRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: double, arg3: double): $List<($Component)>
public "getRegistryName"(arg0: $ScrollForgeRecipe$Type): $ResourceLocation
get "recipeType"(): $RecipeType<($ScrollForgeRecipe)>
get "icon"(): $IDrawable
get "title"(): $Component
get "background"(): $IDrawable
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollForgeRecipeCategory$Type = ($ScrollForgeRecipeCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollForgeRecipeCategory_ = $ScrollForgeRecipeCategory$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/cultist/$CultistEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Enemy, $Enemy$Type} from "packages/net/minecraft/world/entity/monster/$Enemy"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$IAnimatedAttacker, $IAnimatedAttacker$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$IAnimatedAttacker"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$NeutralWizard, $NeutralWizard$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$NeutralWizard"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CultistEntity extends $NeutralWizard implements $Enemy, $IAnimatedAttacker {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public static "prepareAttributes"(): $AttributeSupplier$Builder
public "isHostileTowards"(arg0: $LivingEntity$Type): boolean
public "guardsBlocks"(): boolean
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "playAnimation"(arg0: string): void
public "shouldSheathSword"(): boolean
public "isAnimating"(): boolean
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "canAttack"(arg0: $LivingEntity$Type): boolean
public "setTarget"(arg0: $LivingEntity$Type): void
public "getTarget"(): $LivingEntity
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "animating"(): boolean
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
set "target"(value: $LivingEntity$Type)
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CultistEntity$Type = ($CultistEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CultistEntity_ = $CultistEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/eldritch/$SonicBoomSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$AbstractEldritchSpell, $AbstractEldritchSpell$Type} from "packages/io/redspace/ironsspellbooks/spells/eldritch/$AbstractEldritchSpell"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SonicBoomSpell extends $AbstractEldritchSpell {
static readonly "ELDRITCH_OBFUSCATED_STYLE": $Style

constructor()

public static "getRange"(arg0: integer, arg1: $LivingEntity$Type): float
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "playSound"(arg0: $Optional$Type<($SoundEvent$Type)>, arg1: $Entity$Type): void
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SonicBoomSpell$Type = ($SonicBoomSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SonicBoomSpell_ = $SonicBoomSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/$WizardAIEvents" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEvent$BreakEvent, $BlockEvent$BreakEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent$BreakEvent"
import {$PlayerInteractEvent$RightClickBlock, $PlayerInteractEvent$RightClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickBlock"

export class $WizardAIEvents {

constructor()

public static "onBlockBreak"(arg0: $BlockEvent$BreakEvent$Type): void
public static "onBlockUsed"(arg0: $PlayerInteractEvent$RightClickBlock$Type): void
public static "angerNearbyWizards"(arg0: $Player$Type, arg1: integer, arg2: boolean, arg3: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WizardAIEvents$Type = ($WizardAIEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WizardAIEvents_ = $WizardAIEvents$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/tetra/effects/$FreezeTetraEffect" {
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$ItemEffect, $ItemEffect$Type} from "packages/se/mickelus/tetra/effect/$ItemEffect"

export class $FreezeTetraEffect {
static readonly "freezeOnHit": $ItemEffect
static readonly "freezeName": string
static readonly "freezeTooltip": string

constructor()

public static "addGuiBars"(): void
public static "handleLivingAttackEvent"(arg0: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FreezeTetraEffect$Type = ($FreezeTetraEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FreezeTetraEffect_ = $FreezeTetraEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/eldritch/$SculkTentaclesSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$AbstractEldritchSpell, $AbstractEldritchSpell$Type} from "packages/io/redspace/ironsspellbooks/spells/eldritch/$AbstractEldritchSpell"

export class $SculkTentaclesSpell extends $AbstractEldritchSpell {
static readonly "ELDRITCH_OBFUSCATED_STYLE": $Style

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SculkTentaclesSpell$Type = ($SculkTentaclesSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SculkTentaclesSpell_ = $SculkTentaclesSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/fixers/$FixIsbEnhance" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataFixerElement, $DataFixerElement$Type} from "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement"

export class $FixIsbEnhance extends $DataFixerElement {

constructor()

public "runFixer"(arg0: $CompoundTag$Type): boolean
public "preScanValuesToMatch"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FixIsbEnhance$Type = ($FixIsbEnhance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FixIsbEnhance_ = $FixIsbEnhance$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/lightning_lance/$LightningLanceRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$LightningLanceProjectile, $LightningLanceProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/lightning_lance/$LightningLanceProjectile"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $LightningLanceRenderer extends $EntityRenderer<($LightningLanceProjectile)> {
static readonly "TEXTURES": ($ResourceLocation)[]
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $LightningLanceProjectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "getTextureLocation"(arg0: integer): $ResourceLocation
public "getTextureLocation"(arg0: $LightningLanceProjectile$Type): $ResourceLocation
public static "renderModel"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightningLanceRenderer$Type = ($LightningLanceRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightningLanceRenderer_ = $LightningLanceRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$CastResult" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CastResult$Type, $CastResult$Type$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastResult$Type"

export class $CastResult {
readonly "type": $CastResult$Type
readonly "message": $Component

constructor(arg0: $CastResult$Type$Type)
constructor(arg0: $CastResult$Type$Type, arg1: $Component$Type)

public "isSuccess"(): boolean
get "success"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CastResult$Type = ($CastResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CastResult_ = $CastResult$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedHorse" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MagicSummon, $MagicSummon$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$MagicSummon"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SummonTimer, $SummonTimer$Type} from "packages/io/redspace/ironsspellbooks/effect/$SummonTimer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$AbstractHorse, $AbstractHorse$Type} from "packages/net/minecraft/world/entity/animal/horse/$AbstractHorse"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SummonedHorse extends $AbstractHorse implements $MagicSummon {
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "CHEST_SLOT_OFFSET": integer
static readonly "INVENTORY_SLOT_OFFSET": integer
static readonly "BREEDING_CROSS_FACTOR": double
static readonly "MAX_MOVEMENT_SPEED": float
static readonly "MAX_JUMP_STRENGTH": float
static "FOOD_ITEMS": $Ingredient
static readonly "INV_SLOT_SADDLE": integer
static readonly "INV_SLOT_ARMOR": integer
static readonly "INV_BASE_COUNT": integer
 "tailCounter": integer
 "sprintCounter": integer
static readonly "BABY_START_AGE": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)
constructor(arg0: $Level$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "openCustomInventoryScreen"(arg0: $Player$Type): void
public "setSummoner"(arg0: $LivingEntity$Type): void
public "onUnSummon"(): void
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "spawnParticles"(): void
public "tick"(): void
public "die"(arg0: $DamageSource$Type): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "canBeLeashed"(arg0: $Player$Type): boolean
public "mobInteract"(arg0: $Player$Type, arg1: $InteractionHand$Type): $InteractionResult
public "isTamed"(): boolean
public "isSaddled"(): boolean
public "getSummoner"(): $LivingEntity
public "onRemovedFromWorld"(): void
public "onAntiMagic"(arg0: $MagicData$Type): void
public "onDeathHelper"(): void
public "isAlliedHelper"(arg0: $Entity$Type): boolean
public "shouldIgnoreDamage"(arg0: $DamageSource$Type): boolean
public "onRemovedHelper"(arg0: $Entity$Type, arg1: $SummonTimer$Type): void
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "summoner"(value: $LivingEntity$Type)
get "tamed"(): boolean
get "saddled"(): boolean
get "summoner"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonedHorse$Type = ($SummonedHorse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonedHorse_ = $SummonedHorse$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec2, $Vec2$Type} from "packages/net/minecraft/world/phys/$Vec2"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$AlchemistCauldronTile, $AlchemistCauldronTile$Type} from "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronTile"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $AlchemistCauldronRenderer implements $BlockEntityRenderer<($AlchemistCauldronTile)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $AlchemistCauldronTile$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "getFloatingItemOffset"(arg0: float, arg1: integer): $Vec2
public static "getWaterOffest"(arg0: $BlockState$Type): float
public "shouldRender"(arg0: $AlchemistCauldronTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $AlchemistCauldronTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistCauldronRenderer$Type = ($AlchemistCauldronRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistCauldronRenderer_ = $AlchemistCauldronRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$ArrowVolleySpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ArrowVolleySpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowVolleySpell$Type = ($ArrowVolleySpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowVolleySpell_ = $ArrowVolleySpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$PatrolNearLocationGoal" {
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$WaterAvoidingRandomStrollGoal, $WaterAvoidingRandomStrollGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$WaterAvoidingRandomStrollGoal"

export class $PatrolNearLocationGoal extends $WaterAvoidingRandomStrollGoal {
static readonly "PROBABILITY": float
static readonly "DEFAULT_INTERVAL": integer

constructor(arg0: $PathfinderMob$Type, arg1: float, arg2: double)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatrolNearLocationGoal$Type = ($PatrolNearLocationGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatrolNearLocationGoal_ = $PatrolNearLocationGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastResult" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $RecastResult extends $Enum<($RecastResult)> {
static readonly "TIMEOUT": $RecastResult
static readonly "COUNTERSPELL": $RecastResult
static readonly "DEATH": $RecastResult
static readonly "USED_ALL_RECASTS": $RecastResult
static readonly "COMMAND": $RecastResult
static readonly "USER_CANCEL": $RecastResult


public static "values"(): ($RecastResult)[]
public static "valueOf"(arg0: string): $RecastResult
public "isSuccess"(): boolean
public "isFailure"(): boolean
get "success"(): boolean
get "failure"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecastResult$Type = (("death") | ("counterspell") | ("used_all_recasts") | ("user_cancel") | ("timeout") | ("command")) | ($RecastResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecastResult_ = $RecastResult$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$AcidParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $AcidParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AcidParticle$Type = ($AcidParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AcidParticle_ = $AcidParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$ArcaneAnvilRecipe" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ArcaneAnvilRecipe$Tuple, $ArcaneAnvilRecipe$Tuple$Type} from "packages/io/redspace/ironsspellbooks/jei/$ArcaneAnvilRecipe$Tuple"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ArcaneAnvilRecipe {

constructor(arg0: $ItemStack$Type, arg1: $List$Type<($ItemStack$Type)>)
constructor(arg0: $ItemStack$Type, arg1: $AbstractSpell$Type)
constructor(arg0: $AbstractSpell$Type, arg1: integer)

public "getRecipeItems"(): $ArcaneAnvilRecipe$Tuple<($List<($ItemStack)>), ($List<($ItemStack)>), ($List<($ItemStack)>)>
get "recipeItems"(): $ArcaneAnvilRecipe$Tuple<($List<($ItemStack)>), ($List<($ItemStack)>), ($List<($ItemStack)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcaneAnvilRecipe$Type = ($ArcaneAnvilRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcaneAnvilRecipe_ = $ArcaneAnvilRecipe$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/keeper/$KeeperAnimatedWarlockAttackGoal" {
import {$KeeperEntity, $KeeperEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/keeper/$KeeperEntity"
import {$WarlockAttackGoal, $WarlockAttackGoal$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WarlockAttackGoal"
import {$KeeperEntity$AttackType, $KeeperEntity$AttackType$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/keeper/$KeeperEntity$AttackType"

export class $KeeperAnimatedWarlockAttackGoal extends $WarlockAttackGoal {
 "currentAttack": $KeeperEntity$AttackType
 "nextAttack": $KeeperEntity$AttackType
 "queueCombo": $KeeperEntity$AttackType

constructor(arg0: $KeeperEntity$Type, arg1: double, arg2: integer, arg3: integer, arg4: float)

public "playSwingSound"(): void
public "playImpactSound"(): void
public "canContinueToUse"(): boolean
public "stop"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeeperAnimatedWarlockAttackGoal$Type = ($KeeperAnimatedWarlockAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeeperAnimatedWarlockAttackGoal_ = $KeeperAnimatedWarlockAttackGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/loot/$AppendLootModifier" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$LootModifier, $LootModifier$Type} from "packages/net/minecraftforge/common/loot/$LootModifier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $AppendLootModifier<V> extends $LootModifier {
static readonly "CODEC": $Supplier<($Codec<($AppendLootModifier)>)>


public "codec"(): $Codec<(any)>
public static "getJson"<U>(arg0: $Dynamic$Type<(any)>): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AppendLootModifier$Type<V> = ($AppendLootModifier<(V)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AppendLootModifier_<V> = $AppendLootModifier$Type<(V)>;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/pumpkin/$PumpkinArmorRenderer" {
import {$PumpkinArmorItem, $PumpkinArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$PumpkinArmorItem"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$GenericCustomArmorRenderer, $GenericCustomArmorRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/armor/$GenericCustomArmorRenderer"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$GeoBone, $GeoBone$Type} from "packages/software/bernie/geckolib/cache/object/$GeoBone"

export class $PumpkinArmorRenderer extends $GenericCustomArmorRenderer<($PumpkinArmorItem)> {
 "bodyHeadLayerBone": $GeoBone
 "leggingTorsoLayerBone": $GeoBone
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $GeoModel$Type<($PumpkinArmorItem$Type)>)

public "setAllVisible"(arg0: boolean): void
public "applyBoneVisibilityByPart"(arg0: $EquipmentSlot$Type, arg1: $ModelPart$Type, arg2: $HumanoidModel$Type<(any)>): void
public "getBodyHeadLayerBone"(): $GeoBone
set "allVisible"(value: boolean)
get "bodyHeadLayerBone"(): $GeoBone
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PumpkinArmorRenderer$Type = ($PumpkinArmorRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PumpkinArmorRenderer_ = $PumpkinArmorRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$SoundRegistry" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $SoundRegistry {
static "FORCE_IMPACT": $RegistryObject<($SoundEvent)>
static "ICE_IMPACT": $RegistryObject<($SoundEvent)>
static "MAGIC_SPELL_REVERSE_3": $RegistryObject<($SoundEvent)>
static "ARIAL_SUMMONING_5_CUSTOM_1": $RegistryObject<($SoundEvent)>
static "DARK_MAGIC_BUFF_03_CUSTOM_1": $RegistryObject<($SoundEvent)>
static "DARK_SPELL_02": $RegistryObject<($SoundEvent)>
static "LIGHTNING_WOOSH_01": $RegistryObject<($SoundEvent)>
static "HEARTSTOP_CAST": $RegistryObject<($SoundEvent)>
static "LIGHTNING_LANCE_CAST": $RegistryObject<($SoundEvent)>
static "MAGIC_ARROW_RELEASE": $RegistryObject<($SoundEvent)>
static "MAGIC_ARROW_CHARGE": $RegistryObject<($SoundEvent)>
static "FROST_STEP": $RegistryObject<($SoundEvent)>
static "ABYSSAL_TELEPORT": $RegistryObject<($SoundEvent)>
static "ABYSSAL_SHROUD": $RegistryObject<($SoundEvent)>
static "BLOOD_STEP": $RegistryObject<($SoundEvent)>
static "FIRE_BREATH_LOOP": $RegistryObject<($SoundEvent)>
static "ELECTROCUTE_LOOP": $RegistryObject<($SoundEvent)>
static "CONE_OF_COLD_LOOP": $RegistryObject<($SoundEvent)>
static "CLOUD_OF_REGEN_LOOP": $RegistryObject<($SoundEvent)>
static "RAISE_DEAD_START": $RegistryObject<($SoundEvent)>
static "RAISE_DEAD_FINISH": $RegistryObject<($SoundEvent)>
static "VOID_TENTACLES_START": $RegistryObject<($SoundEvent)>
static "VOID_TENTACLES_FINISH": $RegistryObject<($SoundEvent)>
static "VOID_TENTACLES_LEAVE": $RegistryObject<($SoundEvent)>
static "VOID_TENTACLES_AMBIENT": $RegistryObject<($SoundEvent)>
static "ICE_BLOCK_CAST": $RegistryObject<($SoundEvent)>
static "ICE_BLOCK_IMPACT": $RegistryObject<($SoundEvent)>
static "RAY_OF_SIPHONING": $RegistryObject<($SoundEvent)>
static "FIREBALL_START": $RegistryObject<($SoundEvent)>
static "ACID_ORB_CHARGE": $RegistryObject<($SoundEvent)>
static "ACID_ORB_CAST": $RegistryObject<($SoundEvent)>
static "ACID_ORB_IMPACT": $RegistryObject<($SoundEvent)>
static "POISON_ARROW_CHARGE": $RegistryObject<($SoundEvent)>
static "POISON_ARROW_CAST": $RegistryObject<($SoundEvent)>
static "POISON_BREATH_LOOP": $RegistryObject<($SoundEvent)>
static "ROOT_EMERGE": $RegistryObject<($SoundEvent)>
static "BLACK_HOLE_CHARGE": $RegistryObject<($SoundEvent)>
static "BLACK_HOLE_CAST": $RegistryObject<($SoundEvent)>
static "BLACK_HOLE_LOOP": $RegistryObject<($SoundEvent)>
static "POISON_SPLASH_BEGIN": $RegistryObject<($SoundEvent)>
static "BLIGHT_BEGIN": $RegistryObject<($SoundEvent)>
static "SPIDER_ASPECT_CAST": $RegistryObject<($SoundEvent)>
static "BLOOD_NEEDLE_IMPACT": $RegistryObject<($SoundEvent)>
static "FIRE_BOMB_CHARGE": $RegistryObject<($SoundEvent)>
static "FIRE_BOMB_CAST": $RegistryObject<($SoundEvent)>
static "GUST_CHARGE": $RegistryObject<($SoundEvent)>
static "GUST_CAST": $RegistryObject<($SoundEvent)>
static "GUIDING_BOLT_IMPACT": $RegistryObject<($SoundEvent)>
static "GUIDING_BOLT_CAST": $RegistryObject<($SoundEvent)>
static "CHAIN_LIGHTNING_CHAIN": $RegistryObject<($SoundEvent)>
static "DEVOUR_BITE": $RegistryObject<($SoundEvent)>
static "KEEPER_SWING": $RegistryObject<($SoundEvent)>
static "KEEPER_STEP": $RegistryObject<($SoundEvent)>
static "KEEPER_DEATH": $RegistryObject<($SoundEvent)>
static "KEEPER_HURT": $RegistryObject<($SoundEvent)>
static "KEEPER_SWORD_IMPACT": $RegistryObject<($SoundEvent)>
static "KEEPER_IDLE": $RegistryObject<($SoundEvent)>
static "OAKSKIN_CAST": $RegistryObject<($SoundEvent)>
static "EARTHQUAKE_LOOP": $RegistryObject<($SoundEvent)>
static "EARTHQUAKE_IMPACT": $RegistryObject<($SoundEvent)>
static "EARTHQUAKE_CAST": $RegistryObject<($SoundEvent)>
static "FIREFLY_SWARM_IDLE": $RegistryObject<($SoundEvent)>
static "FIREFLY_SWARM_ATTACK": $RegistryObject<($SoundEvent)>
static "FIREFLY_SPELL_PREPARE": $RegistryObject<($SoundEvent)>
static "RAY_OF_FROST": $RegistryObject<($SoundEvent)>
static "SONIC_BOOM": $RegistryObject<($SoundEvent)>
static "DIVINE_SMITE_WINDUP": $RegistryObject<($SoundEvent)>
static "DIVINE_SMITE_CAST": $RegistryObject<($SoundEvent)>
static "TELEKINESIS_CAST": $RegistryObject<($SoundEvent)>
static "TELEKINESIS_LOOP": $RegistryObject<($SoundEvent)>
static "PLANAR_SIGHT_CAST": $RegistryObject<($SoundEvent)>
static "HEAT_SURGE_PREPARE": $RegistryObject<($SoundEvent)>
static "FROSTWAVE_PREPARE": $RegistryObject<($SoundEvent)>
static "ARROW_VOLLEY_PREPARE": $RegistryObject<($SoundEvent)>
static "BOW_SHOOT": $RegistryObject<($SoundEvent)>
static "RECALL_PREPARE": $RegistryObject<($SoundEvent)>
static "ELDRITCH_BLAST": $RegistryObject<($SoundEvent)>
static "FLAMING_STRIKE_UPSWING": $RegistryObject<($SoundEvent)>
static "FLAMING_STRIKE_SWING": $RegistryObject<($SoundEvent)>
static "SHOCKWAVE_CAST": $RegistryObject<($SoundEvent)>
static "SHOCKWAVE_PREPARE": $RegistryObject<($SoundEvent)>
static "TRADER_YES": $RegistryObject<($SoundEvent)>
static "TRADER_NO": $RegistryObject<($SoundEvent)>
static "SCORCH_PREPARE": $RegistryObject<($SoundEvent)>
static "FIERY_EXPLOSION": $RegistryObject<($SoundEvent)>
static "ECHOING_STRIKE": $RegistryObject<($SoundEvent)>
static "SMALL_LIGHTNING_STRIKE": $RegistryObject<($SoundEvent)>
static "THUNDERSTORM_PREPARE": $RegistryObject<($SoundEvent)>
static "BLOOD_EXPLOSION": $RegistryObject<($SoundEvent)>
static "DEAD_KING_SWING": $RegistryObject<($SoundEvent)>
static "DEAD_KING_SLAM": $RegistryObject<($SoundEvent)>
static "DEAD_KING_HIT": $RegistryObject<($SoundEvent)>
static "DEAD_KING_RESURRECT": $RegistryObject<($SoundEvent)>
static "DEAD_KING_SPAWN": $RegistryObject<($SoundEvent)>
static "DEAD_KING_FAKE_DEATH": $RegistryObject<($SoundEvent)>
static "DEAD_KING_DEATH": $RegistryObject<($SoundEvent)>
static "DEAD_KING_HURT": $RegistryObject<($SoundEvent)>
static "DEAD_KING_EXPLODE": $RegistryObject<($SoundEvent)>
static "DEAD_KING_DRUM_LOOP": $RegistryObject<($SoundEvent)>
static "DEAD_KING_AMBIENCE": $RegistryObject<($SoundEvent)>
static "DEAD_KING_MUSIC_INTRO": $RegistryObject<($SoundEvent)>
static "DEAD_KING_FIRST_PHASE_MELODY": $RegistryObject<($SoundEvent)>
static "DEAD_KING_FIRST_PHASE_ACCENT_01": $RegistryObject<($SoundEvent)>
static "DEAD_KING_SECOND_PHASE_MELODY_ALT": $RegistryObject<($SoundEvent)>
static "DEAD_KING_SUSPENSE": $RegistryObject<($SoundEvent)>
static "FIRE_CAST": $RegistryObject<($SoundEvent)>
static "ICE_CAST": $RegistryObject<($SoundEvent)>
static "LIGHTNING_CAST": $RegistryObject<($SoundEvent)>
static "HOLY_CAST": $RegistryObject<($SoundEvent)>
static "ENDER_CAST": $RegistryObject<($SoundEvent)>
static "BLOOD_CAST": $RegistryObject<($SoundEvent)>
static "EVOCATION_CAST": $RegistryObject<($SoundEvent)>
static "NATURE_CAST": $RegistryObject<($SoundEvent)>
static "POISON_CAST": $RegistryObject<($SoundEvent)>
static "LEARN_ELDRITCH_SPELL": $RegistryObject<($SoundEvent)>
static "UI_TICK": $RegistryObject<($SoundEvent)>
static "EQUIP_SPELL_BOOK": $RegistryObject<($SoundEvent)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoundRegistry$Type = ($SoundRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoundRegistry_ = $SoundRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/wisp/$WispRenderer" {
import {$GeoEntityRenderer, $GeoEntityRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoEntityRenderer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$WispEntity, $WispEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/wisp/$WispEntity"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $WispRenderer extends $GeoEntityRenderer<($WispEntity)> {
static readonly "textureLocation": $ResourceLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getRenderType"(arg0: $WispEntity$Type, arg1: $ResourceLocation$Type, arg2: $MultiBufferSource$Type, arg3: float): $RenderType
public "getTextureLocation"(arg0: $WispEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WispRenderer$Type = ($WispRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WispRenderer_ = $WispRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$ShockwaveParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $ShockwaveParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getQuadSize"(arg0: float): float
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "shouldCull"(): boolean
public "render"(arg0: $VertexConsumer$Type, arg1: $Camera$Type, arg2: float): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShockwaveParticle$Type = ($ShockwaveParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShockwaveParticle_ = $ShockwaveParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/item/$ISpellbook" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ISpellbook {

}

export namespace $ISpellbook {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISpellbook$Type = ($ISpellbook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISpellbook_ = $ISpellbook$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$OwnerHelper" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $OwnerHelper {

constructor()

public static "getAndCacheOwner"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $UUID$Type): $LivingEntity
public static "serializeOwner"(arg0: $CompoundTag$Type, arg1: $UUID$Type): void
public static "deserializeOwner"(arg0: $CompoundTag$Type): $UUID
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnerHelper$Type = ($OwnerHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnerHelper_ = $OwnerHelper$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible" {
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"

export interface $AntiMagicSusceptible {

 "onAntiMagic"(arg0: $MagicData$Type): void

(arg0: $MagicData$Type): void
}

export namespace $AntiMagicSusceptible {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AntiMagicSusceptible$Type = ($AntiMagicSusceptible);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AntiMagicSusceptible_ = $AntiMagicSusceptible$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$UpgradeUtils" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$UpgradeData, $UpgradeData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$UpgradeData"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier$Operation, $AttributeModifier$Operation$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier$Operation"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UpgradeUtils {
static readonly "UPGRADE_UUIDS_BY_SLOT": $Map<($EquipmentSlot), ($UUID)>

constructor()

public static "getRelevantEquipmentSlot"(arg0: $ItemStack$Type): string
public static "UUIDForSlot"(arg0: $EquipmentSlot$Type): $UUID
public static "collectAndRemovePreexistingAttribute"(arg0: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg1: $Attribute$Type, arg2: $AttributeModifier$Operation$Type, arg3: $BiConsumer$Type<($Attribute$Type), ($AttributeModifier$Type)>): double
public static "handleAttributeEvent"(arg0: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg1: $UpgradeData$Type, arg2: $BiConsumer$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg3: $BiConsumer$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg4: $Optional$Type<($UUID$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeUtils$Type = ($UpgradeUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeUtils_ = $UpgradeUtils$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/pedestal/$PedestalBlock" {
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BaseEntityBlock, $BaseEntityBlock$Type} from "packages/net/minecraft/world/level/block/$BaseEntityBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $PedestalBlock extends $BaseEntityBlock {
static readonly "SHAPE_COLUMN": $VoxelShape
static readonly "SHAPE_BOTTOM": $VoxelShape
static readonly "SHAPE_TOP": $VoxelShape
static readonly "SHAPE": $VoxelShape
static readonly "BOOKSHELF_OFFSETS": $List<($BlockPos)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PedestalBlock$Type = ($PedestalBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PedestalBlock_ = $PedestalBlock$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$SpellBookCurioRenderer" {
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ICurioRenderer, $ICurioRenderer$Type} from "packages/top/theillusivec4/curios/api/client/$ICurioRenderer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SpellBookCurioRenderer implements $ICurioRenderer {

constructor()

public "render"<T extends $LivingEntity, M extends $EntityModel<(T)>>(arg0: $ItemStack$Type, arg1: $SlotContext$Type, arg2: $PoseStack$Type, arg3: $RenderLayerParent$Type<(T), (M)>, arg4: $MultiBufferSource$Type, arg5: integer, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float): void
public static "followHeadRotations"(arg0: $LivingEntity$Type, ...arg1: ($ModelPart$Type)[]): void
public static "translateIfSneaking"(arg0: $PoseStack$Type, arg1: $LivingEntity$Type): void
public static "followBodyRotations"(arg0: $LivingEntity$Type, ...arg1: ($HumanoidModel$Type<($LivingEntity$Type)>)[]): void
public static "rotateIfSneaking"(arg0: $PoseStack$Type, arg1: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellBookCurioRenderer$Type = ($SpellBookCurioRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellBookCurioRenderer_ = $SpellBookCurioRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$ClientSpellCastHelper" {
import {$ICastData, $ICastData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastData"
import {$ClientboundCastErrorMessage, $ClientboundCastErrorMessage$Type} from "packages/io/redspace/ironsspellbooks/network/$ClientboundCastErrorMessage"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $ClientSpellCastHelper {

constructor()

public static "handleClientboundTeleport"(arg0: $Vec3$Type, arg1: $Vec3$Type): void
public static "handleClientboundOnClientCast"(arg0: string, arg1: integer, arg2: $CastSource$Type, arg3: $ICastData$Type): void
public static "handleClientBoundOnCastStarted"(arg0: $UUID$Type, arg1: string, arg2: integer): void
public static "handleClientBoundOnCastFinished"(arg0: $UUID$Type, arg1: string, arg2: boolean): void
public static "handleCastErrorMessage"(arg0: $ClientboundCastErrorMessage$Type): void
public static "handleClientboundBloodSiphonParticles"(arg0: $Vec3$Type, arg1: $Vec3$Type): void
public static "handleClientsideAbsorptionParticles"(arg0: $Vec3$Type): void
public static "handleClientsideRegenCloudParticles"(arg0: $Vec3$Type): void
public static "handleClientsideFortifyAreaParticles"(arg0: $Vec3$Type): void
public static "setSuppressRightClicks"(arg0: boolean): void
public static "handleClientboundFrostStep"(arg0: $Vec3$Type, arg1: $Vec3$Type): void
public static "handleClientsideHealParticles"(arg0: $Vec3$Type): void
public static "handleClientboundOakskinParticles"(arg0: $Vec3$Type): void
public static "handleClientboundShockwaveParticle"(arg0: $Vec3$Type, arg1: float, arg2: $ParticleType$Type<(any)>): void
public static "openEldritchResearchScreen"(arg0: $InteractionHand$Type): void
public static "handleClientboundFieryExplosion"(arg0: $Vec3$Type, arg1: float): void
public static "shouldSuppressRightClicks"(): boolean
set "suppressRightClicks"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientSpellCastHelper$Type = ($ClientSpellCastHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientSpellCastHelper_ = $ClientSpellCastHelper$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/netherite/$NetheriteMageArmorModel" {
import {$NetheriteMageArmorItem, $NetheriteMageArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$NetheriteMageArmorItem"
import {$DefaultedItemGeoModel, $DefaultedItemGeoModel$Type} from "packages/software/bernie/geckolib/model/$DefaultedItemGeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $NetheriteMageArmorModel extends $DefaultedItemGeoModel<($NetheriteMageArmorItem)> {

constructor()

public "getTextureResource"(arg0: $NetheriteMageArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $NetheriteMageArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $NetheriteMageArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetheriteMageArmorModel$Type = ($NetheriteMageArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetheriteMageArmorModel_ = $NetheriteMageArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/$VisualFallingBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $VisualFallingBlockEntity extends $FallingBlockEntity {
 "blockState": $BlockState
 "time": integer
 "dropItem": boolean
 "cancelDrop": boolean
 "blockData": $CompoundTag
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: double, arg2: double, arg3: double, arg4: $BlockState$Type, arg5: integer, arg6: boolean)
constructor(arg0: $Level$Type, arg1: double, arg2: double, arg3: double, arg4: $BlockState$Type, arg5: integer)
constructor(arg0: $Level$Type, arg1: double, arg2: double, arg3: double, arg4: $BlockState$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "isPickable"(): boolean
public "callOnBrokenAfterFall"(arg0: $Block$Type, arg1: $BlockPos$Type): void
public "tick"(): void
public "setOnGround"(arg0: boolean): void
public "onGround"(): boolean
public "causeFallDamage"(arg0: float, arg1: float, arg2: $DamageSource$Type): boolean
get "pickable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VisualFallingBlockEntity$Type = ($VisualFallingBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VisualFallingBlockEntity_ = $VisualFallingBlockEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$SummonVexSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SummonVexSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonVexSpell$Type = ($SummonVexSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonVexSpell_ = $SummonVexSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/$NoneSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $NoneSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoneSpell$Type = ($NoneSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoneSpell_ = $NoneSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$CastResult$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CastResult$Type extends $Enum<($CastResult$Type)> {
static readonly "SUCCESS": $CastResult$Type
static readonly "FAILURE": $CastResult$Type


public static "values"(): ($CastResult$Type)[]
public static "valueOf"(arg0: string): $CastResult$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CastResult$Type$Type = (("success") | ("failure")) | ($CastResult$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CastResult$Type_ = $CastResult$Type$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/void_tentacle/$VoidTentacle" {
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$GeoEntity, $GeoEntity$Type} from "packages/software/bernie/geckolib/animatable/$GeoEntity"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $VoidTentacle extends $LivingEntity implements $GeoEntity, $AntiMagicSusceptible {
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
 "entityJs$builder": any
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: float)

public "getOwner"(): $LivingEntity
public "setOwner"(arg0: $LivingEntity$Type): void
public "onAntiMagic"(arg0: $MagicData$Type): void
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "isPushedByFluid"(): boolean
public "getMainArm"(): $HumanoidArm
public "isPickable"(): boolean
public "dealDamage"(arg0: $LivingEntity$Type): boolean
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "tick"(): void
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "setItemSlot"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): void
public "isOnFire"(): boolean
public "isPushable"(): boolean
public "setDamage"(arg0: float): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "getTick"(arg0: any): double
public "triggerAnim"(arg0: string, arg1: string): void
public "getBoneResetTime"(): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "owner"(): $LivingEntity
set "owner"(value: $LivingEntity$Type)
get "armorSlots"(): $Iterable<($ItemStack)>
get "pushedByFluid"(): boolean
get "mainArm"(): $HumanoidArm
get "pickable"(): boolean
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "onFire"(): boolean
get "pushable"(): boolean
set "damage"(value: float)
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "boneResetTime"(): double
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VoidTentacle$Type = ($VoidTentacle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VoidTentacle_ = $VoidTentacle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$AdditionalWanderingTrades" {
import {$WandererTradesEvent, $WandererTradesEvent$Type} from "packages/net/minecraftforge/event/village/$WandererTradesEvent"

export class $AdditionalWanderingTrades {
static readonly "INK_SALE_PRICE_PER_RARITY": integer
static readonly "INK_BUY_PRICE_PER_RARITY": integer

constructor()

public static "addWanderingTrades"(arg0: $WandererTradesEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdditionalWanderingTrades$Type = ($AdditionalWanderingTrades);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdditionalWanderingTrades_ = $AdditionalWanderingTrades$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$EvasionEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CustomDescriptionMobEffect, $CustomDescriptionMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$CustomDescriptionMobEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EvasionEffect extends $CustomDescriptionMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "doEffect"(arg0: $LivingEntity$Type, arg1: $DamageSource$Type): boolean
public "getDescriptionLine"(arg0: $MobEffectInstance$Type): $Component
public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvasionEffect$Type = ($EvasionEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvasionEffect_ = $EvasionEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$PortalManager" {
import {$PortalEntity, $PortalEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalEntity"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$INBTSerializable, $INBTSerializable$Type} from "packages/net/minecraftforge/common/util/$INBTSerializable"
import {$PortalData, $PortalData$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/portal/$PortalData"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PortalManager implements $INBTSerializable<($CompoundTag)> {
static readonly "INSTANCE": $PortalManager

constructor()

public "isEntityOnCooldown"(arg0: $Entity$Type, arg1: $UUID$Type): boolean
public "addPortalData"(arg0: $UUID$Type, arg1: $PortalData$Type): void
public "removePortalData"(arg0: $UUID$Type): void
public "isPortalConnected"(arg0: $UUID$Type): boolean
public "killPortal"(arg0: $UUID$Type, arg1: $UUID$Type): void
public "getPortalData"(arg0: $PortalEntity$Type): $PortalData
public "canUsePortal"(arg0: $PortalEntity$Type, arg1: $Entity$Type): boolean
public "addPortalCooldown"(arg0: $Entity$Type, arg1: $UUID$Type): void
public "processDelayCooldown"(arg0: $UUID$Type, arg1: $UUID$Type, arg2: integer): void
public "processCooldownTick"(arg0: $UUID$Type, arg1: integer): void
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortalManager$Type = ($PortalManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortalManager_ = $PortalManager$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$ArchevokerArmorItem" {
import {$ImbuableChestplateArmorItem, $ImbuableChestplateArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $ArchevokerArmorItem extends $ImbuableChestplateArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArchevokerArmorItem$Type = ($ArchevokerArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArchevokerArmorItem_ = $ArchevokerArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/loot/$LootDebugEvents" {
import {$PlayerInteractEvent$RightClickBlock, $PlayerInteractEvent$RightClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickBlock"

export class $LootDebugEvents {

constructor()

public static "alertLootTable"(arg0: $PlayerInteractEvent$RightClickBlock$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootDebugEvents$Type = ($LootDebugEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootDebugEvents_ = $LootDebugEvents$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$TestClaymoreItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ExtendedSwordItem, $ExtendedSwordItem$Type} from "packages/io/redspace/ironsspellbooks/api/item/weapons/$ExtendedSwordItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TestClaymoreItem extends $ExtendedSwordItem {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TestClaymoreItem$Type = ($TestClaymoreItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TestClaymoreItem_ = $TestClaymoreItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"

export class $DataFixerElement {

constructor()

public "runFixer"(arg0: $CompoundTag$Type): boolean
public "preScanValueBytes"(): $List<((byte)[])>
public "preScanValuesToMatch"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataFixerElement$Type = ($DataFixerElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataFixerElement_ = $DataFixerElement$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$FirebrandItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ExtendedSwordItem, $ExtendedSwordItem$Type} from "packages/io/redspace/ironsspellbooks/api/item/weapons/$ExtendedSwordItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FirebrandItem extends $ExtendedSwordItem {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FirebrandItem$Type = ($FirebrandItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FirebrandItem_ = $FirebrandItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$LocateBlock" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $LocateBlock {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>, arg1: $CommandBuildContext$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocateBlock$Type = ($LocateBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocateBlock_ = $LocateBlock$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/tetra/$TetraActualImpl" {
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$ITetraProxy, $ITetraProxy$Type} from "packages/io/redspace/ironsspellbooks/compat/tetra/$ITetraProxy"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $TetraActualImpl implements $ITetraProxy {

constructor()

public "initClient"(): void
public "canImbue"(arg0: $ItemStack$Type): boolean
public "handleLivingAttackEvent"(arg0: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TetraActualImpl$Type = ($TetraActualImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TetraActualImpl_ = $TetraActualImpl$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$EarthquakeAoe" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EarthquakeAoe extends $AoeEntity implements $AntiMagicSusceptible {
static "clientEarthquakeOrigins": $Map<($UUID), ($EarthquakeAoe)>
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "ambientParticles"(): void
public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
public "tick"(): void
public "remove"(arg0: $Entity$RemovalReason$Type): void
public "setSlownessAmplifier"(arg0: integer): void
public "getSlownessAmplifier"(): integer
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
set "slownessAmplifier"(value: integer)
get "slownessAmplifier"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EarthquakeAoe$Type = ($EarthquakeAoe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EarthquakeAoe_ = $EarthquakeAoe$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SpellDamageSource extends $DamageSource {


public "get"(): $DamageSource
public static "source"(arg0: $Entity$Type, arg1: $Entity$Type, arg2: $AbstractSpell$Type): $SpellDamageSource
public static "source"(arg0: $Entity$Type, arg1: $AbstractSpell$Type): $SpellDamageSource
public "setFireTime"(arg0: integer): $SpellDamageSource
public "getFreezeTicks"(): integer
public "hasPostHitEffects"(): boolean
public "getFireTime"(): integer
public "setFreezeTicks"(arg0: integer): $SpellDamageSource
public "getLocalizedDeathMessage"(arg0: $LivingEntity$Type): $Component
public "setLifestealPercent"(arg0: float): $SpellDamageSource
public "spell"(): $AbstractSpell
public "getLifestealPercent"(): float
set "fireTime"(value: integer)
get "freezeTicks"(): integer
get "fireTime"(): integer
set "freezeTicks"(value: integer)
set "lifestealPercent"(value: float)
get "lifestealPercent"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellDamageSource$Type = ($SpellDamageSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellDamageSource_ = $SpellDamageSource$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$LootRegistry" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/net/minecraftforge/registries/$DeferredRegister"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $LootRegistry {
static readonly "LOOT_FUNCTIONS": $DeferredRegister<($LootItemFunctionType)>
static readonly "LOOT_MODIFIER_SERIALIZERS": $DeferredRegister<($Codec<(any)>)>
static readonly "RANDOMIZE_SPELL_FUNCTION": $RegistryObject<($LootItemFunctionType)>
static readonly "RANDOMIZE_SPELL_RING_FUNCTION": $RegistryObject<($LootItemFunctionType)>
static readonly "SET_FURLED_MAP_FUNCTION": $RegistryObject<($LootItemFunctionType)>
static readonly "APPEND_LOOT_MODIFIER": $RegistryObject<($Codec<(any)>)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootRegistry$Type = ($LootRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootRegistry_ = $LootRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ender/$PortalSpell" {
import {$RecastResult, $RecastResult$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastResult"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$RecastInstance, $RecastInstance$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $PortalSpell extends $AbstractSpell {
static readonly "PORTAL_RECAST_COUNT": integer

constructor()

public "getRecastDuration"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getPortalDuration"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getSpellResource"(): $ResourceLocation
public "getEmptyCastData"(): $ICastDataSerializable
public "getDefaultConfig"(): $DefaultConfig
public "getRecastCount"(arg0: integer, arg1: $LivingEntity$Type): integer
public "onRecastFinished"(arg0: $ServerPlayer$Type, arg1: $RecastInstance$Type, arg2: $RecastResult$Type, arg3: $ICastDataSerializable$Type): void
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "emptyCastData"(): $ICastDataSerializable
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortalSpell$Type = ($PortalSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortalSpell_ = $PortalSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$Scroll" {
import {$IScroll, $IScroll$Type} from "packages/io/redspace/ironsspellbooks/api/item/$IScroll"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Scroll extends $Item implements $IScroll {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public static "attemptRemoveScrollAfterCast"(arg0: $ServerPlayer$Type): void
public "getUseDuration"(arg0: $ItemStack$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "getName"(arg0: $ItemStack$Type): $Component
public "releaseUsing"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type, arg3: integer): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getUseAnimation"(arg0: $ItemStack$Type): $UseAnim
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Scroll$Type = ($Scroll);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Scroll_ = $Scroll$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$GenericOwnerHurtByTargetGoal" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$OwnerGetter, $OwnerGetter$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$OwnerGetter"
import {$TargetGoal, $TargetGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/target/$TargetGoal"

export class $GenericOwnerHurtByTargetGoal extends $TargetGoal {
readonly "mob": $Mob
readonly "mustSee": boolean
readonly "mustReach": boolean

constructor(arg0: $Mob$Type, arg1: $OwnerGetter$Type)

public "canUse"(): boolean
public "start"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericOwnerHurtByTargetGoal$Type = ($GenericOwnerHurtByTargetGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericOwnerHurtByTargetGoal_ = $GenericOwnerHurtByTargetGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/data/$DataFixerStorage" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$LevelStorageSource$LevelStorageAccess, $LevelStorageSource$LevelStorageAccess$Type} from "packages/net/minecraft/world/level/storage/$LevelStorageSource$LevelStorageAccess"

export class $DataFixerStorage extends $SavedData {
static "INSTANCE": $DataFixerStorage

constructor(arg0: integer)
constructor()

public static "load"(arg0: $CompoundTag$Type): $DataFixerStorage
public static "init"(arg0: $LevelStorageSource$LevelStorageAccess$Type): void
public "getDataVersion"(): integer
public "setDataVersion"(arg0: integer): void
public "save"(arg0: $CompoundTag$Type): $CompoundTag
get "dataVersion"(): integer
set "dataVersion"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataFixerStorage$Type = ($DataFixerStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataFixerStorage_ = $DataFixerStorage$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WarlockAttackGoal" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$WizardAttackGoal, $WizardAttackGoal$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WizardAttackGoal"

export class $WarlockAttackGoal extends $WizardAttackGoal {

constructor(arg0: $IMagicEntity$Type, arg1: double, arg2: integer, arg3: integer, arg4: float)

public "setMeleeMovespeedModifier"(arg0: float): $WarlockAttackGoal
public "setMeleeAttackInverval"(arg0: integer, arg1: integer): $WarlockAttackGoal
public "setSpells"(arg0: $List$Type<($AbstractSpell$Type)>, arg1: $List$Type<($AbstractSpell$Type)>, arg2: $List$Type<($AbstractSpell$Type)>, arg3: $List$Type<($AbstractSpell$Type)>): $WarlockAttackGoal
public "setMeleeBias"(arg0: float, arg1: float): $WarlockAttackGoal
public "setIsFlying"(): $WarlockAttackGoal
public "tick"(): void
set "meleeMovespeedModifier"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WarlockAttackGoal$Type = ($WarlockAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WarlockAttackGoal_ = $WarlockAttackGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$AirborneEffect" {
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $AirborneEffect extends $MobEffect {
static readonly "damage_per_amp": float

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public static "getDamageFromLevel"(arg0: integer): float
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AirborneEffect$Type = ($AirborneEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AirborneEffect_ = $AirborneEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$EnchantedWardEffect" {
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EnchantedWardEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantedWardEffect$Type = ($EnchantedWardEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantedWardEffect_ = $EnchantedWardEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronRecipeRegistry" {
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$AlchemistCauldronRecipe, $AlchemistCauldronRecipe$Type} from "packages/io/redspace/ironsspellbooks/block/alchemist_cauldron/$AlchemistCauldronRecipe"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $AlchemistCauldronRecipeRegistry {

constructor()

public static "isValidIngredient"(arg0: $ItemStack$Type): boolean
public static "hasOutput"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public static "addRecipe"(arg0: $AlchemistCauldronRecipe$Type): $AlchemistCauldronRecipe
public static "getRecipes"(): $ImmutableList<($AlchemistCauldronRecipe)>
public static "getOutput"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
get "recipes"(): $ImmutableList<($AlchemistCauldronRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistCauldronRecipeRegistry$Type = ($AlchemistCauldronRecipeRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistCauldronRecipeRegistry_ = $AlchemistCauldronRecipeRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/curios/$FrostwardRing" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SimpleDescriptiveCurio, $SimpleDescriptiveCurio$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$SimpleDescriptiveCurio"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FrostwardRing extends $SimpleDescriptiveCurio {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "canWalkOnPowderedSnow"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrostwardRing$Type = ($FrostwardRing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrostwardRing_ = $FrostwardRing$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/scroll_forge/$ScrollForgeRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ScrollForgeTile, $ScrollForgeTile$Type} from "packages/io/redspace/ironsspellbooks/block/scroll_forge/$ScrollForgeTile"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $ScrollForgeRenderer implements $BlockEntityRenderer<($ScrollForgeTile)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $ScrollForgeTile$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $ScrollForgeTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $ScrollForgeTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollForgeRenderer$Type = ($ScrollForgeRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollForgeRenderer_ = $ScrollForgeRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$FangWardSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $FangWardSpell extends $AbstractSpell {

constructor()

public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FangWardSpell$Type = ($FangWardSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FangWardSpell_ = $FangWardSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$ElectromancerArmorItem" {
import {$ImbuableChestplateArmorItem, $ImbuableChestplateArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ImbuableChestplateArmorItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ArmorCapeProvider, $ArmorCapeProvider$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$ArmorCapeProvider"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $ElectromancerArmorItem extends $ImbuableChestplateArmorItem implements $ArmorCapeProvider {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorItem$Type$Type, arg1: $Item$Properties$Type)

public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public "getCapeResourceLocation"(): $ResourceLocation
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public static "get"(arg0: $ItemStack$Type): $Equipable
get "capeResourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElectromancerArmorItem$Type = ($ElectromancerArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElectromancerArmorItem_ = $ElectromancerArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/damage/$ISSDamageTypes" {
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$BootstapContext, $BootstapContext$Type} from "packages/net/minecraft/data/worldgen/$BootstapContext"

export class $ISSDamageTypes {
static readonly "FIRE_MAGIC": $ResourceKey<($DamageType)>
static readonly "ICE_MAGIC": $ResourceKey<($DamageType)>
static readonly "LIGHTNING_MAGIC": $ResourceKey<($DamageType)>
static readonly "HOLY_MAGIC": $ResourceKey<($DamageType)>
static readonly "ENDER_MAGIC": $ResourceKey<($DamageType)>
static readonly "BLOOD_MAGIC": $ResourceKey<($DamageType)>
static readonly "EVOCATION_MAGIC": $ResourceKey<($DamageType)>
static readonly "ELDRITCH_MAGIC": $ResourceKey<($DamageType)>
static readonly "NATURE_MAGIC": $ResourceKey<($DamageType)>
static readonly "CAULDRON": $ResourceKey<($DamageType)>
static readonly "HEARTSTOP": $ResourceKey<($DamageType)>
static readonly "DRAGON_BREATH_POOL": $ResourceKey<($DamageType)>
static readonly "FIRE_FIELD": $ResourceKey<($DamageType)>
static readonly "POISON_CLOUD": $ResourceKey<($DamageType)>

constructor()

public static "register"(arg0: string): $ResourceKey<($DamageType)>
public static "bootstrap"(arg0: $BootstapContext$Type<($DamageType$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISSDamageTypes$Type = ($ISSDamageTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISSDamageTypes_ = $ISSDamageTypes$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$RingSmokeParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $RingSmokeParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getQuadSize"(arg0: float): float
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "render"(arg0: $VertexConsumer$Type, arg1: $Camera$Type, arg2: float): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RingSmokeParticle$Type = ($RingSmokeParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RingSmokeParticle_ = $RingSmokeParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$SnowflakeParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $SnowflakeParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SnowflakeParticle$Type = ($SnowflakeParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SnowflakeParticle_ = $SnowflakeParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$ISpellContainer" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$List, $List$Type} from "packages/java/util/$List"
import {$INBTSerializable, $INBTSerializable$Type} from "packages/net/minecraftforge/common/util/$INBTSerializable"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ISpellContainer extends $INBTSerializable<($CompoundTag)> {

 "isEmpty"(): boolean
 "save"(arg0: $ItemStack$Type): void
 "getAllSpells"(): ($SpellData)[]
 "spellWheel"(): boolean
 "mustEquip"(): boolean
 "getActiveSpells"(): $List<($SpellData)>
 "getSpellAtIndex"(arg0: integer): $SpellData
 "getMaxSpellCount"(): integer
 "addSpell"(arg0: $AbstractSpell$Type, arg1: integer, arg2: boolean, arg3: $ItemStack$Type): boolean
 "removeSpellAtIndex"(arg0: integer, arg1: $ItemStack$Type): boolean
 "getIndexForSpell"(arg0: $AbstractSpell$Type): integer
 "setMaxSpellCount"(arg0: integer): void
 "addSpellAtIndex"(arg0: $AbstractSpell$Type, arg1: integer, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): boolean
 "removeSpell"(arg0: $AbstractSpell$Type, arg1: $ItemStack$Type): boolean
 "getActiveSpellCount"(): integer
 "getNextAvailableIndex"(): integer
 "deserializeNBT"(arg0: $CompoundTag$Type): void
 "serializeNBT"(): $CompoundTag
}

export namespace $ISpellContainer {
function get(arg0: $ItemStack$Type): $ISpellContainer
function create(arg0: integer, arg1: boolean, arg2: boolean): $ISpellContainer
function getOrCreate(arg0: $ItemStack$Type): $ISpellContainer
function isSpellContainer(arg0: $ItemStack$Type): boolean
function createScrollContainer(arg0: $AbstractSpell$Type, arg1: integer, arg2: $ItemStack$Type): $ISpellContainer
function createImbuedContainer(arg0: $AbstractSpell$Type, arg1: integer, arg2: $ItemStack$Type): $ISpellContainer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISpellContainer$Type = ($ISpellContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISpellContainer_ = $ISpellContainer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$StompAoe" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $StompAoe extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: integer, arg2: float)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
public "tick"(): void
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StompAoe$Type = ($StompAoe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StompAoe_ = $StompAoe$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WizardRecoverGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"

export class $WizardRecoverGoal extends $Goal {

constructor(arg0: $IMagicEntity$Type)
constructor(arg0: $IMagicEntity$Type, arg1: integer, arg2: integer)

public "canUse"(): boolean
public "start"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WizardRecoverGoal$Type = ($WizardRecoverGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WizardRecoverGoal_ = $WizardRecoverGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/ice_block/$IceBlockRenderer" {
import {$GeoEntityRenderer, $GeoEntityRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoEntityRenderer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$IceBlockProjectile, $IceBlockProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/ice_block/$IceBlockProjectile"

export class $IceBlockRenderer extends $GeoEntityRenderer<($IceBlockProjectile)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IceBlockRenderer$Type = ($IceBlockRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IceBlockRenderer_ = $IceBlockRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$AnimationState, $AnimationState$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationState"
import {$DefaultedEntityGeoModel, $DefaultedEntityGeoModel$Type} from "packages/software/bernie/geckolib/model/$DefaultedEntityGeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $AbstractSpellCastingMobModel extends $DefaultedEntityGeoModel<($AbstractSpellCastingMob)> {

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getModelResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getAnimationResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "setCustomAnimations"(arg0: $AbstractSpellCastingMob$Type, arg1: long, arg2: $AnimationState$Type<($AbstractSpellCastingMob$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSpellCastingMobModel$Type = ($AbstractSpellCastingMobModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSpellCastingMobModel_ = $AbstractSpellCastingMobModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundCastErrorMessage$ErrorType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ClientboundCastErrorMessage$ErrorType extends $Enum<($ClientboundCastErrorMessage$ErrorType)> {
static readonly "COOLDOWN": $ClientboundCastErrorMessage$ErrorType
static readonly "MANA": $ClientboundCastErrorMessage$ErrorType


public static "values"(): ($ClientboundCastErrorMessage$ErrorType)[]
public static "valueOf"(arg0: string): $ClientboundCastErrorMessage$ErrorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundCastErrorMessage$ErrorType$Type = (("mana") | ("cooldown")) | ($ClientboundCastErrorMessage$ErrorType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundCastErrorMessage$ErrorType_ = $ClientboundCastErrorMessage$ErrorType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$BloodSlashSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BloodSlashSpell extends $AbstractSpell {

constructor()

public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodSlashSpell$Type = ($BloodSlashSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodSlashSpell_ = $BloodSlashSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$AlchemistCauldronJeiRecipe" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $AlchemistCauldronJeiRecipe extends $Record {

constructor(inputs: $List$Type<($ItemStack$Type)>, outputs: $List$Type<($ItemStack$Type)>, catalysts: $List$Type<($ItemStack$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "catalysts"(): $List<($ItemStack)>
public "inputs"(): $List<($ItemStack)>
public "outputs"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistCauldronJeiRecipe$Type = ($AlchemistCauldronJeiRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistCauldronJeiRecipe_ = $AlchemistCauldronJeiRecipe$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/jei/$AlchemistCauldronRecipeCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"
import {$AlchemistCauldronJeiRecipe, $AlchemistCauldronJeiRecipe$Type} from "packages/io/redspace/ironsspellbooks/jei/$AlchemistCauldronJeiRecipe"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IDrawable, $IDrawable$Type} from "packages/mezz/jei/api/gui/drawable/$IDrawable"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $AlchemistCauldronRecipeCategory implements $IRecipeCategory<($AlchemistCauldronJeiRecipe)> {
static readonly "ALCHEMIST_CAULDRON_RECIPE_TYPE": $RecipeType<($AlchemistCauldronJeiRecipe)>

constructor(arg0: $IGuiHelper$Type)

public "getRecipeType"(): $RecipeType<($AlchemistCauldronJeiRecipe)>
public "draw"(arg0: $AlchemistCauldronJeiRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "getIcon"(): $IDrawable
public "getTitle"(): $Component
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $AlchemistCauldronJeiRecipe$Type, arg2: $IFocusGroup$Type): void
public "getBackground"(): $IDrawable
public "getWidth"(): integer
public "getHeight"(): integer
public "isHandled"(arg0: $AlchemistCauldronJeiRecipe$Type): boolean
public "handleInput"(arg0: $AlchemistCauldronJeiRecipe$Type, arg1: double, arg2: double, arg3: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: $AlchemistCauldronJeiRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: double, arg3: double): $List<($Component)>
public "getRegistryName"(arg0: $AlchemistCauldronJeiRecipe$Type): $ResourceLocation
get "recipeType"(): $RecipeType<($AlchemistCauldronJeiRecipe)>
get "icon"(): $IDrawable
get "title"(): $Component
get "background"(): $IDrawable
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlchemistCauldronRecipeCategory$Type = ($AlchemistCauldronRecipeCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlchemistCauldronRecipeCategory_ = $AlchemistCauldronRecipeCategory$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datagen/$RegistryDataGenerator" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$DatapackBuiltinEntriesProvider, $DatapackBuiltinEntriesProvider$Type} from "packages/net/minecraftforge/common/data/$DatapackBuiltinEntriesProvider"

export class $RegistryDataGenerator extends $DatapackBuiltinEntriesProvider {


public static "addProviders"(arg0: boolean, arg1: $DataGenerator$Type, arg2: $PackOutput$Type, arg3: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg4: $ExistingFileHelper$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegistryDataGenerator$Type = ($RegistryDataGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegistryDataGenerator_ = $RegistryDataGenerator$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/apotheosis/$ApotheosisHandler" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ApotheosisHandler {

constructor()

public static "init"(): void
public static "isSpellbook"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ApotheosisHandler$Type = ($ApotheosisHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ApotheosisHandler_ = $ApotheosisHandler$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$SiphonParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $SiphonParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "m_6355_"(arg0: float): integer
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SiphonParticle$Type = ($SiphonParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SiphonParticle_ = $SiphonParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/gui/scroll_forge/network/$ServerboundScrollForgeSelectSpell" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerboundScrollForgeSelectSpell {

constructor(arg0: $BlockPos$Type, arg1: string)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerboundScrollForgeSelectSpell$Type = ($ServerboundScrollForgeSelectSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerboundScrollForgeSelectSpell_ = $ServerboundScrollForgeSelectSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$GenericCopyOwnerTargetGoal" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$OwnerGetter, $OwnerGetter$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$OwnerGetter"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$TargetGoal, $TargetGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/target/$TargetGoal"

export class $GenericCopyOwnerTargetGoal extends $TargetGoal {
readonly "mob": $Mob
readonly "mustSee": boolean
readonly "mustReach": boolean

constructor(arg0: $PathfinderMob$Type, arg1: $OwnerGetter$Type)

public "canUse"(): boolean
public "start"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericCopyOwnerTargetGoal$Type = ($GenericCopyOwnerTargetGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericCopyOwnerTargetGoal_ = $GenericCopyOwnerTargetGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/fixers/$FixApoth" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataFixerElement, $DataFixerElement$Type} from "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement"

export class $FixApoth extends $DataFixerElement {

constructor()

public "runFixer"(arg0: $CompoundTag$Type): boolean
public "preScanValuesToMatch"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FixApoth$Type = ($FixApoth);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FixApoth_ = $FixApoth$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$FurledMapItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FurledMapItem extends $Item {
static "FURLED_MAP_NBT": string
static "FURLED_MAP_LOCATION": string
static "FURLED_MAP_DESCRIPTION": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public static "of"(arg0: $ResourceLocation$Type, arg1: $MutableComponent$Type): $ItemStack
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FurledMapItem$Type = ($FurledMapItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FurledMapItem_ = $FurledMapItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/eldritch/$TelekinesisSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$AbstractEldritchSpell, $AbstractEldritchSpell$Type} from "packages/io/redspace/ironsspellbooks/spells/eldritch/$AbstractEldritchSpell"

export class $TelekinesisSpell extends $AbstractEldritchSpell {
static readonly "ELDRITCH_OBFUSCATED_STYLE": $Style

constructor()

public "getTargetingColor"(): $Vector3f
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "getCastTime"(arg0: integer): integer
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "onServerCastTick"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): void
public "getCastType"(): $CastType
get "targetingColor"(): $Vector3f
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TelekinesisSpell$Type = ($TelekinesisSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TelekinesisSpell_ = $TelekinesisSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/worldgen/$WeatherCopperProcessor" {
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$StructurePlaceSettings, $StructurePlaceSettings$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructurePlaceSettings"
import {$StructureProcessor, $StructureProcessor$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureProcessor"
import {$StructureTemplate$StructureBlockInfo, $StructureTemplate$StructureBlockInfo$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureTemplate$StructureBlockInfo"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$StructureTemplate, $StructureTemplate$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureTemplate"

export class $WeatherCopperProcessor extends $StructureProcessor {
static readonly "CODEC": $Codec<($WeatherCopperProcessor)>

constructor(arg0: float)

public "process"(arg0: $LevelReader$Type, arg1: $BlockPos$Type, arg2: $BlockPos$Type, arg3: $StructureTemplate$StructureBlockInfo$Type, arg4: $StructureTemplate$StructureBlockInfo$Type, arg5: $StructurePlaceSettings$Type, arg6: $StructureTemplate$Type): $StructureTemplate$StructureBlockInfo
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeatherCopperProcessor$Type = ($WeatherCopperProcessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeatherCopperProcessor_ = $WeatherCopperProcessor$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/black_hole/$BlackHole" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BlackHole extends $Projectile implements $AntiMagicSusceptible {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "getRadius"(): float
public "setRadius"(arg0: float): void
public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "tick"(): void
public "onSyncedDataUpdated"(arg0: $EntityDataAccessor$Type<(any)>): void
public "setDamage"(arg0: float): void
public "getDamage"(): float
public "displayFireAnimation"(): boolean
public "refreshDimensions"(): void
get "radius"(): float
set "radius"(value: float)
set "damage"(value: float)
get "damage"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackHole$Type = ($BlackHole);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackHole_ = $BlackHole$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$RoamVillageGoal" {
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$PatrolNearLocationGoal, $PatrolNearLocationGoal$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$PatrolNearLocationGoal"

export class $RoamVillageGoal extends $PatrolNearLocationGoal {
static readonly "PROBABILITY": float
static readonly "DEFAULT_INTERVAL": integer

constructor(arg0: $PathfinderMob$Type, arg1: float, arg2: double)

public "canUse"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RoamVillageGoal$Type = ($RoamVillageGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RoamVillageGoal_ = $RoamVillageGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/eldritch_blast/$EldritchBlastRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$EldritchBlastVisualEntity, $EldritchBlastVisualEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/eldritch_blast/$EldritchBlastVisualEntity"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Frustum, $Frustum$Type} from "packages/net/minecraft/client/renderer/culling/$Frustum"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EldritchBlastRenderer extends $EntityRenderer<($EldritchBlastVisualEntity)> {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $EldritchBlastVisualEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public static "createBodyLayer"(): $LayerDefinition
public "shouldRender"(arg0: $EldritchBlastVisualEntity$Type, arg1: $Frustum$Type, arg2: double, arg3: double, arg4: double): boolean
public "getTextureLocation"(arg0: $EldritchBlastVisualEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EldritchBlastRenderer$Type = ($EldritchBlastRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EldritchBlastRenderer_ = $EldritchBlastRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$HeatSurgeSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $HeatSurgeSpell extends $AbstractSpell {

constructor()

public "getDuration"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getRadius"(arg0: integer, arg1: $LivingEntity$Type): float
public "getRendAmplifier"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getCastFinishAnimation"(): $AnimationHolder
public "getCastStartAnimation"(): $AnimationHolder
public "onServerCastComplete"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type, arg4: boolean): void
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "stopSoundOnCancel"(): boolean
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeatSurgeSpell$Type = ($HeatSurgeSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeatSurgeSpell_ = $HeatSurgeSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/consumables/$DrinkableItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DrinkableItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $BiConsumer$Type<($ItemStack$Type), ($LivingEntity$Type)>, arg2: $Item$Type, arg3: boolean)
constructor(arg0: $Item$Properties$Type, arg1: $BiConsumer$Type<($ItemStack$Type), ($LivingEntity$Type)>)

public "getUseDuration"(arg0: $ItemStack$Type): integer
public "finishUsingItem"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type): $ItemStack
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getUseAnimation"(arg0: $ItemStack$Type): $UseAnim
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrinkableItem$Type = ($DrinkableItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrinkableItem_ = $DrinkableItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/eldritch/$AbyssalShroudSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$AbstractEldritchSpell, $AbstractEldritchSpell$Type} from "packages/io/redspace/ironsspellbooks/spells/eldritch/$AbstractEldritchSpell"

export class $AbyssalShroudSpell extends $AbstractEldritchSpell {
static readonly "ELDRITCH_OBFUSCATED_STYLE": $Style

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbyssalShroudSpell$Type = ($AbyssalShroudSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbyssalShroudSpell_ = $AbyssalShroudSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$RecipeYamlGenerator" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $RecipeYamlGenerator {

constructor()

public static "main"(arg0: (string)[]): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeYamlGenerator$Type = ($RecipeYamlGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeYamlGenerator_ = $RecipeYamlGenerator$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundOpenEldritchScreen" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundOpenEldritchScreen {

constructor(arg0: $InteractionHand$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundOpenEldritchScreen$Type = ($ClientboundOpenEldritchScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundOpenEldritchScreen_ = $ClientboundOpenEldritchScreen$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$InvisibilitySpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $InvisibilitySpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvisibilitySpell$Type = ($InvisibilitySpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvisibilitySpell_ = $InvisibilitySpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/events/$ChangeManaEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"

export class $ChangeManaEvent extends $PlayerEvent {

constructor()
constructor(arg0: $Player$Type, arg1: $MagicData$Type, arg2: float, arg3: float)

public "isCancelable"(): boolean
public "getOldMana"(): float
public "getNewMana"(): float
public "setNewMana"(arg0: float): void
public "getMagicData"(): $MagicData
public "getListenerList"(): $ListenerList
get "cancelable"(): boolean
get "oldMana"(): float
get "newMana"(): float
set "newMana"(value: float)
get "magicData"(): $MagicData
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeManaEvent$Type = ($ChangeManaEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeManaEvent_ = $ChangeManaEvent$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$OakskinSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $OakskinSpell extends $AbstractSpell {

constructor()

public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OakskinSpell$Type = ($OakskinSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OakskinSpell_ = $OakskinSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$ScorchSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimationHolder, $AnimationHolder$Type} from "packages/io/redspace/ironsspellbooks/api/util/$AnimationHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ScorchSpell extends $AbstractSpell {

constructor()

public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getCastFinishAnimation"(): $AnimationHolder
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getCastStartAnimation"(): $AnimationHolder
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "castFinishAnimation"(): $AnimationHolder
get "castStartAnimation"(): $AnimationHolder
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScorchSpell$Type = ($ScorchSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScorchSpell_ = $ScorchSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/magic_missile/$MagicMissileRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MagicMissileProjectile, $MagicMissileProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/magic_missile/$MagicMissileProjectile"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $MagicMissileRenderer extends $EntityRenderer<($MagicMissileProjectile)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $MagicMissileProjectile$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "renderType"(arg0: $ResourceLocation$Type): $RenderType
public "getTextureLocation"(arg0: $MagicMissileProjectile$Type): $ResourceLocation
public "getFireTextureLocation"(arg0: $Projectile$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicMissileRenderer$Type = ($MagicMissileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicMissileRenderer_ = $MagicMissileRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/$ExtendedWitherSkull" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$WitherSkull, $WitherSkull$Type} from "packages/net/minecraft/world/entity/projectile/$WitherSkull"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ExtendedWitherSkull extends $WitherSkull implements $AntiMagicSusceptible {
 "xPower": double
 "yPower": double
 "zPower": double
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $LivingEntity$Type, arg1: $Level$Type, arg2: float, arg3: float)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedWitherSkull$Type = ($ExtendedWitherSkull);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedWitherSkull_ = $ExtendedWitherSkull$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/raise_dead_summons/$SummonedZombieModel" {
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SummonedZombie, $SummonedZombie$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedZombie"

export class $SummonedZombieModel extends $GeoModel<($SummonedZombie)> {
static readonly "TEXTURE": $ResourceLocation
static readonly "MODEL": $ResourceLocation
static readonly "ANIMATIONS": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $SummonedZombie$Type): $ResourceLocation
public "getModelResource"(arg0: $SummonedZombie$Type): $ResourceLocation
public "getAnimationResource"(arg0: $SummonedZombie$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonedZombieModel$Type = ($SummonedZombieModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonedZombieModel_ = $SummonedZombieModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$SpellbookModCreativeTabs" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $SpellbookModCreativeTabs {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellbookModCreativeTabs$Type = ($SpellbookModCreativeTabs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellbookModCreativeTabs_ = $SpellbookModCreativeTabs$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"

export class $SchoolType {
/**
 * This field is a type stub generated by ProbeJS and shall not be used in any sense.
 */
 "probejsInternal$$Literal": Special.Schools
/**
 * This field is a type stub generated by ProbeJS and shall not be used in any sense.
 */
 "probejsInternal$$Tag": Special.SchoolsTag

constructor(arg0: $ResourceLocation$Type, arg1: $TagKey$Type<($Item$Type)>, arg2: $Component$Type, arg3: $LazyOptional$Type<($Attribute$Type)>, arg4: $LazyOptional$Type<($Attribute$Type)>, arg5: $LazyOptional$Type<($SoundEvent$Type)>, arg6: $ResourceKey$Type<($DamageType$Type)>)

public "getId"(): $ResourceLocation
public "getDisplayName"(): $Component
public "isFocus"(arg0: $ItemStack$Type): boolean
public "getTargetingColor"(): $Vector3f
public "getDamageType"(): $ResourceKey<($DamageType)>
public "getPowerFor"(arg0: $LivingEntity$Type): double
public "getCastSound"(): $SoundEvent
public "getResistanceFor"(arg0: $LivingEntity$Type): double
get "id"(): $ResourceLocation
get "displayName"(): $Component
get "targetingColor"(): $Vector3f
get "damageType"(): $ResourceKey<($DamageType)>
get "castSound"(): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SchoolType$Type = ($SchoolType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SchoolType_ = $SchoolType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ServerboundQuickCast" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ServerboundQuickCast {

constructor(arg0: integer)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerboundQuickCast$Type = ($ServerboundQuickCast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerboundQuickCast_ = $ServerboundQuickCast$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/block/$ArmorPileBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $ArmorPileBlock extends $Block {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "destroy"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "spawnAfterBreak"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $ItemStack$Type, arg4: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorPileBlock$Type = ($ArmorPileBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorPileBlock_ = $ArmorPileBlock$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$PlaguedArmorModel" {
import {$PlaguedArmorItem, $PlaguedArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$PlaguedArmorItem"
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PlaguedArmorModel extends $GeoModel<($PlaguedArmorItem)> {

constructor()

public "getTextureResource"(arg0: $PlaguedArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $PlaguedArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $PlaguedArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaguedArmorModel$Type = ($PlaguedArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaguedArmorModel_ = $PlaguedArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/$ParallelMatcher" {
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ParallelMatcher implements $AutoCloseable {

constructor(arg0: $List$Type<((byte)[])>)

public "close"(): void
public "pushValue"(arg0: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParallelMatcher$Type = ($ParallelMatcher);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParallelMatcher_ = $ParallelMatcher$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/gust/$GustCollider" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$AbstractConeProjectile, $AbstractConeProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractConeProjectile"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $GustCollider extends $AbstractConeProjectile {
 "strength": float
 "range": float
 "amplifier": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)
constructor(arg0: $EntityType$Type<($GustCollider$Type)>, arg1: $Level$Type)

public "spawnParticles"(): void
public "tick"(): void
public "getOwner"(): $Entity
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "owner"(): $Entity
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GustCollider$Type = ($GustCollider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GustCollider_ = $GustCollider$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$ManaCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $ManaCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaCommand$Type = ($ManaCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaCommand_ = $ManaCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/fire/$WallOfFireSpell" {
import {$RecastResult, $RecastResult$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastResult"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$RecastInstance, $RecastInstance$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$RecastInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$WallOfFireSpell$FireWallData, $WallOfFireSpell$FireWallData$Type} from "packages/io/redspace/ironsspellbooks/spells/fire/$WallOfFireSpell$FireWallData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $WallOfFireSpell extends $AbstractSpell {

constructor()

public "addAnchor"(arg0: $WallOfFireSpell$FireWallData$Type, arg1: $Level$Type, arg2: $LivingEntity$Type, arg3: $RecastInstance$Type): void
public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getSpellResource"(): $ResourceLocation
public "getEmptyCastData"(): $ICastDataSerializable
public "getDefaultConfig"(): $DefaultConfig
public "getRecastCount"(arg0: integer, arg1: $LivingEntity$Type): integer
public "onRecastFinished"(arg0: $ServerPlayer$Type, arg1: $RecastInstance$Type, arg2: $RecastResult$Type, arg3: $ICastDataSerializable$Type): void
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "emptyCastData"(): $ICastDataSerializable
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallOfFireSpell$Type = ($WallOfFireSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallOfFireSpell_ = $WallOfFireSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/curios/$CurioBaseItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CurioBaseItem extends $Item implements $ICurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "isEquippedBy"(arg0: $LivingEntity$Type): boolean
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "hasCurioCapability"(arg0: $ItemStack$Type): boolean
public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "canUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type, arg1: $ItemStack$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "writeSyncData"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public "writeSyncData"(arg0: $ItemStack$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: $ItemStack$Type): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "canEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type, arg2: $ItemStack$Type): boolean
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type, arg2: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioBaseItem$Type = ($CurioBaseItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioBaseItem_ = $CurioBaseItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/nature/$FireflySwarmSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $FireflySwarmSpell extends $AbstractSpell {

constructor()

public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireflySwarmSpell$Type = ($FireflySwarmSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireflySwarmSpell_ = $FireflySwarmSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/$IronsDataVersions" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $IronsDataVersions {
static readonly "SPELL_REGISTRATION_DATA_VERSION": integer
static readonly "ELDRITCH_SCHOOL_DATA_VERSION": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronsDataVersions$Type = ($IronsDataVersions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronsDataVersions_ = $IronsDataVersions$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/flame_strike/$FlameStrikeRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$FlameStrike, $FlameStrike$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/flame_strike/$FlameStrike"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FlameStrikeRenderer extends $EntityRenderer<($FlameStrike)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $FlameStrike$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $FlameStrike$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlameStrikeRenderer$Type = ($FlameStrikeRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlameStrikeRenderer_ = $FlameStrikeRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/wall_of_fire/$WallOfFireRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$WallOfFireEntity, $WallOfFireEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/wall_of_fire/$WallOfFireEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $WallOfFireRenderer extends $EntityRenderer<($WallOfFireEntity)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $WallOfFireEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $WallOfFireEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallOfFireRenderer$Type = ($WallOfFireRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallOfFireRenderer_ = $WallOfFireRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$WizardAttackGoal" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"
import {$List, $List$Type} from "packages/java/util/$List"

export class $WizardAttackGoal extends $Goal {

constructor(arg0: $IMagicEntity$Type, arg1: double, arg2: integer)
constructor(arg0: $IMagicEntity$Type, arg1: double, arg2: integer, arg3: integer)

public "setDrinksPotions"(): $WizardAttackGoal
public "setAllowFleeing"(arg0: boolean): $WizardAttackGoal
public "setSpellQuality"(arg0: float, arg1: float): $WizardAttackGoal
public "setSingleUseSpell"(arg0: $AbstractSpell$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): $WizardAttackGoal
public "setSpells"(arg0: $List$Type<($AbstractSpell$Type)>, arg1: $List$Type<($AbstractSpell$Type)>, arg2: $List$Type<($AbstractSpell$Type)>, arg3: $List$Type<($AbstractSpell$Type)>): $WizardAttackGoal
public "setIsFlying"(): $WizardAttackGoal
public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
set "allowFleeing"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WizardAttackGoal$Type = ($WizardAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WizardAttackGoal_ = $WizardAttackGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/void_tentacle/$VoidTentacleEmissiveLayer" {
import {$GeoEntityRenderer, $GeoEntityRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoEntityRenderer"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$GeoRenderLayer, $GeoRenderLayer$Type} from "packages/software/bernie/geckolib/renderer/layer/$GeoRenderLayer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$VoidTentacle, $VoidTentacle$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/void_tentacle/$VoidTentacle"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $VoidTentacleEmissiveLayer extends $GeoRenderLayer<($VoidTentacle)> {
static readonly "TEXTURE": $ResourceLocation

constructor(arg0: $GeoEntityRenderer$Type<(any)>)

public "render"(arg0: $PoseStack$Type, arg1: $VoidTentacle$Type, arg2: $BakedGeoModel$Type, arg3: $RenderType$Type, arg4: $MultiBufferSource$Type, arg5: $VertexConsumer$Type, arg6: float, arg7: integer, arg8: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VoidTentacleEmissiveLayer$Type = ($VoidTentacleEmissiveLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VoidTentacleEmissiveLayer_ = $VoidTentacleEmissiveLayer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$Color, $Color$Type} from "packages/software/bernie/geckolib/core/object/$Color"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$HumanoidRenderer, $HumanoidRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$HumanoidRenderer"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $AbstractSpellCastingMobRenderer extends $HumanoidRenderer<($AbstractSpellCastingMob)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: $AbstractSpellCastingMobModel$Type)

public "render"(arg0: $AbstractSpellCastingMob$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getRenderType"(arg0: $AbstractSpellCastingMob$Type, arg1: $ResourceLocation$Type, arg2: $MultiBufferSource$Type, arg3: float): $RenderType
public static "makePotion"(arg0: $AbstractSpellCastingMob$Type): $ItemStack
public "getRenderColor"(arg0: $AbstractSpellCastingMob$Type, arg1: float, arg2: integer): $Color
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSpellCastingMobRenderer$Type = ($AbstractSpellCastingMobRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSpellCastingMobRenderer_ = $AbstractSpellCastingMobRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$IronsDebugCommand$IronsDebugCommandTypes" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $IronsDebugCommand$IronsDebugCommandTypes extends $Enum<($IronsDebugCommand$IronsDebugCommandTypes)> {
static readonly "RECASTING": $IronsDebugCommand$IronsDebugCommandTypes


public static "values"(): ($IronsDebugCommand$IronsDebugCommandTypes)[]
public static "valueOf"(arg0: string): $IronsDebugCommand$IronsDebugCommandTypes
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronsDebugCommand$IronsDebugCommandTypes$Type = (("recasting")) | ($IronsDebugCommand$IronsDebugCommandTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronsDebugCommand$IronsDebugCommandTypes_ = $IronsDebugCommand$IronsDebugCommandTypes$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundSyncPlayerData" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$SyncedSpellData, $SyncedSpellData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$SyncedSpellData"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundSyncPlayerData {

constructor(arg0: $SyncedSpellData$Type)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundSyncPlayerData$Type = ($ClientboundSyncPlayerData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundSyncPlayerData_ = $ClientboundSyncPlayerData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$ImpulseCastData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ICastDataSerializable, $ICastDataSerializable$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$ICastDataSerializable"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"

export class $ImpulseCastData implements $ICastDataSerializable {
 "x": float
 "y": float
 "z": float
 "hasImpulse": boolean

constructor()
constructor(arg0: float, arg1: float, arg2: float, arg3: boolean)

public "reset"(): void
public "readFromBuffer"(arg0: $FriendlyByteBuf$Type): void
public "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImpulseCastData$Type = ($ImpulseCastData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImpulseCastData_ = $ImpulseCastData$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/registries/$MobEffectRegistry" {
import {$SummonTimer, $SummonTimer$Type} from "packages/io/redspace/ironsspellbooks/effect/$SummonTimer"
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/net/minecraftforge/registries/$DeferredRegister"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $MobEffectRegistry {
static readonly "MOB_EFFECT_DEFERRED_REGISTER": $DeferredRegister<($MobEffect)>
static readonly "ANGEL_WINGS": $RegistryObject<($MobEffect)>
static readonly "EVASION": $RegistryObject<($MobEffect)>
static readonly "HEARTSTOP": $RegistryObject<($MobEffect)>
static readonly "VEX_TIMER": $RegistryObject<($SummonTimer)>
static readonly "POLAR_BEAR_TIMER": $RegistryObject<($SummonTimer)>
static readonly "RAISE_DEAD_TIMER": $RegistryObject<($SummonTimer)>
static readonly "SUMMON_HORSE_TIMER": $RegistryObject<($SummonTimer)>
static readonly "ABYSSAL_SHROUD": $RegistryObject<($MobEffect)>
static readonly "ASCENSION": $RegistryObject<($MobEffect)>
static readonly "CHARGED": $RegistryObject<($MobEffect)>
static readonly "TRUE_INVISIBILITY": $RegistryObject<($MobEffect)>
static readonly "FORTIFY": $RegistryObject<($MobEffect)>
static readonly "REND": $RegistryObject<($MobEffect)>
static readonly "SPIDER_ASPECT": $RegistryObject<($MobEffect)>
static readonly "BLIGHT": $RegistryObject<($MobEffect)>
static readonly "GUIDING_BOLT": $RegistryObject<($MobEffect)>
static readonly "AIRBORNE": $RegistryObject<($MobEffect)>
static readonly "VIGOR": $RegistryObject<($MobEffect)>
static readonly "INSTANT_MANA": $RegistryObject<($MobEffect)>
static readonly "OAKSKIN": $RegistryObject<($MobEffect)>
static readonly "PLANAR_SIGHT": $RegistryObject<($MobEffect)>
static readonly "ANTIGRAVITY": $RegistryObject<($MobEffect)>
static readonly "HASTENED": $RegistryObject<($MobEffect)>
static readonly "SLOWED": $RegistryObject<($MobEffect)>
static readonly "CHILLED": $RegistryObject<($MobEffect)>
static readonly "BURNING_DASH": $RegistryObject<($MobEffect)>
static readonly "GLUTTONY": $RegistryObject<($MobEffect)>
static readonly "ECHOING_STRIKES": $RegistryObject<($MobEffect)>
static readonly "THUNDERSTORM": $RegistryObject<($MobEffect)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobEffectRegistry$Type = ($MobEffectRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobEffectRegistry_ = $MobEffectRegistry$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/curios/$LurkerRing" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SimpleDescriptiveCurio, $SimpleDescriptiveCurio$Type} from "packages/io/redspace/ironsspellbooks/item/curios/$SimpleDescriptiveCurio"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LurkerRing extends $SimpleDescriptiveCurio {
static readonly "COOLDOWN_IN_TICKS": integer
static readonly "MULTIPLIER": float
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "getDescription"(arg0: $ItemStack$Type): $Component
public "getDescriptionLines"(arg0: $ItemStack$Type): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LurkerRing$Type = ($LurkerRing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LurkerRing_ = $LurkerRing$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/spell_books/$SimpleAttributeSpellBook" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$SpellRarity, $SpellRarity$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellRarity"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$SpellBook, $SpellBook$Type} from "packages/io/redspace/ironsspellbooks/item/$SpellBook"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SimpleAttributeSpellBook extends $SpellBook {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: integer, arg1: $SpellRarity$Type, arg2: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg3: $Item$Properties$Type)
constructor(arg0: integer, arg1: $SpellRarity$Type, arg2: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>)
constructor(arg0: integer, arg1: $SpellRarity$Type, arg2: $Attribute$Type, arg3: double, arg4: double)
constructor(arg0: integer, arg1: $SpellRarity$Type, arg2: $Attribute$Type, arg3: double)

public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleAttributeSpellBook$Type = ($SimpleAttributeSpellBook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleAttributeSpellBook_ = $SimpleAttributeSpellBook$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$SnowDustParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"
import {$SnowflakeParticle, $SnowflakeParticle$Type} from "packages/io/redspace/ironsspellbooks/particle/$SnowflakeParticle"

export class $SnowDustParticle extends $SnowflakeParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SnowDustParticle$Type = ($SnowDustParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SnowDustParticle_ = $SnowDustParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$FangStrikeSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $FangStrikeSpell extends $AbstractSpell {

constructor()

public "shouldAIStopCasting"(arg0: integer, arg1: $Mob$Type, arg2: $LivingEntity$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FangStrikeSpell$Type = ($FangStrikeSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FangStrikeSpell_ = $FangStrikeSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$EnergizedCoreItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EnergizedCoreItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnergizedCoreItem$Type = ($EnergizedCoreItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnergizedCoreItem_ = $EnergizedCoreItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/armor/$ExtendedArmorItem" {
import {$GeoArmorRenderer, $GeoArmorRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoArmorRenderer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$GeoItem, $GeoItem$Type} from "packages/software/bernie/geckolib/animatable/$GeoItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$GeoAnimatable, $GeoAnimatable$Type} from "packages/software/bernie/geckolib/core/animatable/$GeoAnimatable"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$PacketDistributor$PacketTarget, $PacketDistributor$PacketTarget$Type} from "packages/net/minecraftforge/network/$PacketDistributor$PacketTarget"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$IronsExtendedArmorMaterial, $IronsExtendedArmorMaterial$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$IronsExtendedArmorMaterial"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$ArmorItem, $ArmorItem$Type} from "packages/net/minecraft/world/item/$ArmorItem"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ExtendedArmorItem extends $ArmorItem implements $GeoItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $IronsExtendedArmorMaterial$Type, arg1: $ArmorItem$Type$Type, arg2: $Item$Properties$Type)

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "supplyRenderer"(): $GeoArmorRenderer<(any)>
public "getDefaultAttributeModifiers"(arg0: $EquipmentSlot$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "onArmorTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Player$Type): void
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public static "getId"(arg0: $ItemStack$Type): long
public static "registerSyncedAnimatable"(arg0: $GeoAnimatable$Type): void
public static "getOrAssignId"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): long
public "isPerspectiveAware"(): boolean
public "getTick"(arg0: any): double
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "getAnimData"<D>(arg0: long, arg1: $SerializableDataTicket$Type<(D)>): D
public "syncAnimData"<D>(arg0: long, arg1: $SerializableDataTicket$Type<(D)>, arg2: D, arg3: $PacketDistributor$PacketTarget$Type): void
public "setAnimData"<D>(arg0: $Entity$Type, arg1: long, arg2: $SerializableDataTicket$Type<(D)>, arg3: D): void
public "triggerAnim"<D>(arg0: $Entity$Type, arg1: long, arg2: string, arg3: string): void
public "triggerAnim"<D>(arg0: long, arg1: string, arg2: string, arg3: $PacketDistributor$PacketTarget$Type): void
public static "get"(arg0: $ItemStack$Type): $Equipable
public "getBoneResetTime"(): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "perspectiveAware"(): boolean
get "boneResetTime"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedArmorItem$Type = ($ExtendedArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedArmorItem_ = $ExtendedArmorItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$DebugWizardSpellName" {
import {$GeoEntityRenderer, $GeoEntityRenderer$Type} from "packages/software/bernie/geckolib/renderer/$GeoEntityRenderer"
import {$GeoRenderLayer, $GeoRenderLayer$Type} from "packages/software/bernie/geckolib/renderer/layer/$GeoRenderLayer"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"

export class $DebugWizardSpellName extends $GeoRenderLayer<($AbstractSpellCastingMob)> {

constructor(arg0: $GeoEntityRenderer$Type<(any)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugWizardSpellName$Type = ($DebugWizardSpellName);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugWizardSpellName_ = $DebugWizardSpellName$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$CultistArmorModel" {
import {$CultistArmorItem, $CultistArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$CultistArmorItem"
import {$DefaultedItemGeoModel, $DefaultedItemGeoModel$Type} from "packages/software/bernie/geckolib/model/$DefaultedItemGeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $CultistArmorModel extends $DefaultedItemGeoModel<($CultistArmorItem)> {

constructor()

public "getTextureResource"(arg0: $CultistArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $CultistArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $CultistArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CultistArmorModel$Type = ($CultistArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CultistArmorModel_ = $CultistArmorModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$GeoEntity, $GeoEntity$Type} from "packages/software/bernie/geckolib/animatable/$GeoEntity"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$SyncedSpellData, $SyncedSpellData$Type} from "packages/io/redspace/ironsspellbooks/capabilities/magic/$SyncedSpellData"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$SerializableDataTicket, $SerializableDataTicket$Type} from "packages/software/bernie/geckolib/network/$SerializableDataTicket"
import {$IMagicEntity, $IMagicEntity$Type} from "packages/io/redspace/ironsspellbooks/api/entity/$IMagicEntity"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AnimatableInstanceCache, $AnimatableInstanceCache$Type} from "packages/software/bernie/geckolib/core/animatable/instance/$AnimatableInstanceCache"
import {$AnimatableManager$ControllerRegistrar, $AnimatableManager$ControllerRegistrar$Type} from "packages/software/bernie/geckolib/core/animation/$AnimatableManager$ControllerRegistrar"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AbstractSpellCastingMob extends $PathfinderMob implements $GeoEntity, $IMagicEntity {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>


public "cancelCast"(): void
public "getAnimatableInstanceCache"(): $AnimatableInstanceCache
public "rideTick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "getMyRidingOffset"(): double
public "setHasUsedSingleAttack"(arg0: boolean): void
public "setBurningDashDirectionData"(): void
public "startDrinkingPotion"(): void
public "shouldAlwaysAnimateLegs"(): boolean
public "startAutoSpinAttack"(arg0: integer): void
public "shouldBeExtraAnimated"(): boolean
public "bobBodyWhileWalking"(): boolean
public "notifyDangerousProjectile"(arg0: $Projectile$Type): void
public "setTeleportLocationBehindTarget"(arg0: integer): boolean
public "shouldPointArmsWhileCasting"(): boolean
public "getHasUsedSingleAttack"(): boolean
public "shouldAlwaysAnimateHead"(): boolean
public "onSyncedDataUpdated"(arg0: $EntityDataAccessor$Type<(any)>): void
public "isCasting"(): boolean
public "canBeLeashed"(arg0: $Player$Type): boolean
public "isDrinkingPotion"(): boolean
public "castComplete"(): void
public "setSyncedSpellData"(arg0: $SyncedSpellData$Type): void
public "initiateCastSpell"(arg0: $AbstractSpell$Type, arg1: integer): void
public "shouldSheathSword"(): boolean
public "isAnimating"(): boolean
public "getMagicData"(): $MagicData
public "triggerAnim"(arg0: string, arg1: string): void
public "registerControllers"(arg0: $AnimatableManager$ControllerRegistrar$Type): void
public "getAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>): D
public "setAnimData"<D>(arg0: $SerializableDataTicket$Type<(D)>, arg1: D): void
public "getTick"(arg0: any): double
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "getBoneResetTime"(): double
public "shouldPlayAnimsWhileGamePaused"(): boolean
public "animatableCacheOverride"(): $AnimatableInstanceCache
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "animatableInstanceCache"(): $AnimatableInstanceCache
get "myRidingOffset"(): double
set "hasUsedSingleAttack"(value: boolean)
set "teleportLocationBehindTarget"(value: integer)
get "hasUsedSingleAttack"(): boolean
get "casting"(): boolean
get "drinkingPotion"(): boolean
set "syncedSpellData"(value: $SyncedSpellData$Type)
get "animating"(): boolean
get "magicData"(): $MagicData
get "boneResetTime"(): double
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSpellCastingMob$Type = ($AbstractSpellCastingMob);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSpellCastingMob_ = $AbstractSpellCastingMob$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/blood_needle/$BloodNeedle" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BloodNeedle extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "setScale"(arg0: float): void
public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "getZRot"(): float
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "setZRot"(arg0: float): void
public "getScale"(): float
public "getSpeed"(): float
set "scale"(value: float)
get "zRot"(): float
get "impactSound"(): $Optional<($SoundEvent)>
set "zRot"(value: float)
get "scale"(): float
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodNeedle$Type = ($BloodNeedle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodNeedle_ = $BloodNeedle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$TrueInvisibilityEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TrueInvisibilityEffect extends $MagicMobEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrueInvisibilityEffect$Type = ($TrueInvisibilityEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrueInvisibilityEffect_ = $TrueInvisibilityEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/cryomancer/$CryomancerEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Enemy, $Enemy$Type} from "packages/net/minecraft/world/entity/monster/$Enemy"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CryomancerEntity extends $AbstractSpellCastingMob implements $Enemy {
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public static "prepareAttributes"(): $AttributeSupplier$Builder
public "canFreeze"(): boolean
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CryomancerEntity$Type = ($CryomancerEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CryomancerEntity_ = $CryomancerEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$CreateImbuedSwordCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CreateImbuedSwordCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>, arg1: $CommandBuildContext$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateImbuedSwordCommand$Type = ($CreateImbuedSwordCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateImbuedSwordCommand_ = $CreateImbuedSwordCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/priest/$PriestEntity" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$IMerchantWizard, $IMerchantWizard$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/$IMerchantWizard"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$SupportMob, $SupportMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SupportMob"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$VillagerData, $VillagerData$Type} from "packages/net/minecraft/world/entity/npc/$VillagerData"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$HomeOwner, $HomeOwner$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$HomeOwner"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$MerchantOffers, $MerchantOffers$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffers"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$VillagerType, $VillagerType$Type} from "packages/net/minecraft/world/entity/npc/$VillagerType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$NeutralWizard, $NeutralWizard$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$NeutralWizard"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$VillagerDataHolder, $VillagerDataHolder$Type} from "packages/net/minecraft/world/entity/npc/$VillagerDataHolder"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PriestEntity extends $NeutralWizard implements $VillagerDataHolder, $SupportMob, $HomeOwner, $IMerchantWizard {
 "supportTargetSelector": $GoalSelector
static readonly "modelResource": $ResourceLocation
static readonly "textureResource": $ResourceLocation
static readonly "animationInstantCast": $ResourceLocation
 "hasUsedSingleAttack": boolean
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "getRestocksToday"(): integer
public "setRestocksToday"(arg0: integer): void
public "setHome"(arg0: $BlockPos$Type): void
public "isUnhappy"(): boolean
public "setUnhappy"(): void
public "getSupportTarget"(): $LivingEntity
public "setSupportTarget"(arg0: $LivingEntity$Type): void
public "getHome"(): $BlockPos
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "getTradingPlayer"(): $Player
public "setTradingPlayer"(arg0: $Player$Type): void
public "overrideOffers"(arg0: $MerchantOffers$Type): void
public "notifyTrade"(arg0: $MerchantOffer$Type): void
public "notifyTradeUpdated"(arg0: $ItemStack$Type): void
public "getNotifyTradeSound"(): $SoundEvent
public "getLastRestockGameTime"(): long
public "setLastRestockGameTime"(arg0: long): void
public "setLastRestockCheckDayTime"(arg0: long): void
public "getLastRestockCheckDayTime"(): long
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "getAngerSound"(): $Optional<($SoundEvent)>
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "getVillagerData"(): $VillagerData
public "getOffers"(): $MerchantOffers
public "setVillagerData"(arg0: $VillagerData$Type): void
public "setVariant"(arg0: $VillagerType$Type): void
public "serializeHome"(arg0: $HomeOwner$Type, arg1: $CompoundTag$Type): void
public "deserializeHome"(arg0: $HomeOwner$Type, arg1: $CompoundTag$Type): void
public "isTrading"(): boolean
public "shouldRestock"(): boolean
public "needsToRestock"(): boolean
public "allowedToRestock"(): boolean
public "serializeMerchant"(arg0: $CompoundTag$Type, arg1: $MerchantOffers$Type, arg2: long, arg3: integer): void
public "restock"(): void
public "showProgressBar"(): boolean
public "isClientSide"(): boolean
public "overrideXp"(arg0: integer): void
public "deserializeMerchant"(arg0: $CompoundTag$Type, arg1: $Consumer$Type<($MerchantOffers$Type)>): void
public "getVillagerXp"(): integer
public "canRestock"(): boolean
public "openTradingScreen"(arg0: $Player$Type, arg1: $Component$Type, arg2: integer): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "canAttack"(arg0: $LivingEntity$Type): boolean
public "setTarget"(arg0: $LivingEntity$Type): void
public "getTarget"(): $LivingEntity
public "getItemBySlot"(arg0: $EquipmentSlot$Type): $ItemStack
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "restocksToday"(): integer
set "restocksToday"(value: integer)
set "home"(value: $BlockPos$Type)
get "unhappy"(): boolean
get "supportTarget"(): $LivingEntity
set "supportTarget"(value: $LivingEntity$Type)
get "home"(): $BlockPos
get "tradingPlayer"(): $Player
set "tradingPlayer"(value: $Player$Type)
get "notifyTradeSound"(): $SoundEvent
get "lastRestockGameTime"(): long
set "lastRestockGameTime"(value: long)
set "lastRestockCheckDayTime"(value: long)
get "lastRestockCheckDayTime"(): long
get "angerSound"(): $Optional<($SoundEvent)>
get "villagerData"(): $VillagerData
get "offers"(): $MerchantOffers
set "villagerData"(value: $VillagerData$Type)
set "variant"(value: $VillagerType$Type)
get "trading"(): boolean
get "clientSide"(): boolean
get "villagerXp"(): integer
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
set "target"(value: $LivingEntity$Type)
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PriestEntity$Type = ($PriestEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PriestEntity_ = $PriestEntity$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/ice_block/$IceBlockModel" {
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$IceBlockProjectile, $IceBlockProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/ice_block/$IceBlockProjectile"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $IceBlockModel extends $GeoModel<($IceBlockProjectile)> {
static readonly "ANIMS": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $IceBlockProjectile$Type): $ResourceLocation
public "getModelResource"(arg0: $IceBlockProjectile$Type): $ResourceLocation
public "getAnimationResource"(arg0: $IceBlockProjectile$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IceBlockModel$Type = ($IceBlockModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IceBlockModel_ = $IceBlockModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ClientboundEntityEvent" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IClientEventEntity, $IClientEventEntity$Type} from "packages/io/redspace/ironsspellbooks/api/network/$IClientEventEntity"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClientboundEntityEvent<T extends ($Entity) & ($IClientEventEntity)> {

constructor(arg0: $Entity$Type, arg1: byte)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "getEntity"(arg0: $Level$Type): $Entity
public "getEventId"(): byte
get "eventId"(): byte
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundEntityEvent$Type<T> = ($ClientboundEntityEvent<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundEntityEvent_<T> = $ClientboundEntityEvent$Type<(T)>;
}}
declare module "packages/io/redspace/ironsspellbooks/capabilities/magic/$CooldownInstance" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CooldownInstance {

constructor(arg0: integer)
constructor(arg0: integer, arg1: integer)

public "decrement"(): void
public "getCooldownPercent"(): float
public "decrementBy"(arg0: integer): void
public "getSpellCooldown"(): integer
public "getCooldownRemaining"(): integer
get "cooldownPercent"(): float
get "spellCooldown"(): integer
get "cooldownRemaining"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CooldownInstance$Type = ($CooldownInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CooldownInstance_ = $CooldownInstance$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/compat/tetra/$ITetraProxy" {
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ITetraProxy {

 "initClient"(): void
 "canImbue"(arg0: $ItemStack$Type): boolean
 "handleLivingAttackEvent"(arg0: $LivingAttackEvent$Type): void
}

export namespace $ITetraProxy {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITetraProxy$Type = ($ITetraProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITetraProxy_ = $ITetraProxy$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/fireball/$SmallMagicFireball" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SmallMagicFireball extends $AbstractMagicProjectile implements $IEntityAdditionalSpawnData {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "setHomingTarget"(arg0: $LivingEntity$Type): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "shoot"(arg0: $Vec3$Type, arg1: float): void
public "getHomingTarget"(): $Entity
public "getSpeed"(): float
public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
set "homingTarget"(value: $LivingEntity$Type)
get "impactSound"(): $Optional<($SoundEvent)>
get "homingTarget"(): $Entity
get "speed"(): float
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SmallMagicFireball$Type = ($SmallMagicFireball);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SmallMagicFireball_ = $SmallMagicFireball$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/root/$RootRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$GeoLivingEntityRenderer, $GeoLivingEntityRenderer$Type} from "packages/io/redspace/ironsspellbooks/render/$GeoLivingEntityRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$RootEntity, $RootEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/root/$RootEntity"

export class $RootRenderer extends $GeoLivingEntityRenderer<($RootEntity)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "preRender"(arg0: $PoseStack$Type, arg1: $RootEntity$Type, arg2: $BakedGeoModel$Type, arg3: $MultiBufferSource$Type, arg4: $VertexConsumer$Type, arg5: boolean, arg6: float, arg7: integer, arg8: integer, arg9: float, arg10: float, arg11: float, arg12: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RootRenderer$Type = ($RootRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RootRenderer_ = $RootRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$NecronomiconSpellBook" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$UniqueSpellBook, $UniqueSpellBook$Type} from "packages/io/redspace/ironsspellbooks/item/$UniqueSpellBook"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $NecronomiconSpellBook extends $UniqueSpellBook {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "initializeSpellContainer"(arg0: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NecronomiconSpellBook$Type = ($NecronomiconSpellBook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NecronomiconSpellBook_ = $NecronomiconSpellBook$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/damage/$DamageSources" {
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$LivingKnockBackEvent, $LivingKnockBackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingKnockBackEvent"
import {$SchoolType, $SchoolType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SchoolType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DamageSources {

constructor()

public static "get"(arg0: $Level$Type, arg1: $ResourceKey$Type<($DamageType$Type)>): $DamageSource
public static "applyDamage"(arg0: $Entity$Type, arg1: float, arg2: $DamageSource$Type): boolean
/**
 * 
 * @deprecated
 */
public static "indirectDamageSource"(arg0: $DamageSource$Type, arg1: $Entity$Type, arg2: $Entity$Type): $DamageSource
public static "isFriendlyFireBetween"(arg0: $Entity$Type, arg1: $Entity$Type): boolean
public static "ignoreNextKnockback"(arg0: $LivingEntity$Type): void
public static "getResist"(arg0: $LivingEntity$Type, arg1: $SchoolType$Type): float
public static "cancelKnockback"(arg0: $LivingKnockBackEvent$Type): void
/**
 * 
 * @deprecated
 */
public static "directDamageSource"(arg0: $DamageSource$Type, arg1: $Entity$Type): $DamageSource
public static "postHitEffects"(arg0: $LivingDamageEvent$Type): void
public static "getHolderFromResource"(arg0: $Entity$Type, arg1: $ResourceKey$Type<($DamageType$Type)>): $Holder<($DamageType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageSources$Type = ($DamageSources);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageSources_ = $DamageSources$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$DragonFireParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $DragonFireParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: $SpriteSet$Type, arg5: double, arg6: double, arg7: double)

public "m_6355_"(arg0: float): integer
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DragonFireParticle$Type = ($DragonFireParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DragonFireParticle_ = $DragonFireParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/weapons/$MagehunterItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ExtendedSwordItem, $ExtendedSwordItem$Type} from "packages/io/redspace/ironsspellbooks/api/item/weapons/$ExtendedSwordItem"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MagehunterItem extends $ExtendedSwordItem {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagehunterItem$Type = ($MagehunterItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagehunterItem_ = $MagehunterItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$DebugTargetClosestEntityGoal" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$TargetGoal, $TargetGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/target/$TargetGoal"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $DebugTargetClosestEntityGoal extends $TargetGoal {
readonly "mob": $Mob
readonly "mustSee": boolean
readonly "mustReach": boolean

constructor(arg0: $Mob$Type)

public "setTarget"(arg0: $LivingEntity$Type): void
public "canUse"(): boolean
public "start"(): void
set "target"(value: $LivingEntity$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugTargetClosestEntityGoal$Type = ($DebugTargetClosestEntityGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugTargetClosestEntityGoal_ = $DebugTargetClosestEntityGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$GenericFollowOwnerGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$OwnerGetter, $OwnerGetter$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$OwnerGetter"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"

export class $GenericFollowOwnerGoal extends $Goal {

constructor(arg0: $PathfinderMob$Type, arg1: $OwnerGetter$Type, arg2: double, arg3: float, arg4: float, arg5: boolean, arg6: float)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericFollowOwnerGoal$Type = ($GenericFollowOwnerGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericFollowOwnerGoal_ = $GenericFollowOwnerGoal$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/blood/$BloodNeedlesSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SpellDamageSource, $SpellDamageSource$Type} from "packages/io/redspace/ironsspellbooks/damage/$SpellDamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BloodNeedlesSpell extends $AbstractSpell {

constructor()

public "getDamageSource"(arg0: $Entity$Type, arg1: $Entity$Type): $SpellDamageSource
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodNeedlesSpell$Type = ($BloodNeedlesSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodNeedlesSpell_ = $BloodNeedlesSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/lightning/$BallLightningSpell" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $BallLightningSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BallLightningSpell$Type = ($BallLightningSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BallLightningSpell_ = $BallLightningSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/holy/$HasteSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $HasteSpell extends $AbstractSpell {

constructor()

public "getDuration"(arg0: integer, arg1: $LivingEntity$Type): integer
public "getAmplifier"(arg0: integer, arg1: $LivingEntity$Type): integer
public "checkPreCastConditions"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $MagicData$Type): boolean
public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HasteSpell$Type = ($HasteSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HasteSpell_ = $HasteSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/evocation/$SummonHorseSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SummonHorseSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getCastFinishSound"(): $Optional<($SoundEvent)>
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "castFinishSound"(): $Optional<($SoundEvent)>
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonHorseSpell$Type = ($SummonHorseSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonHorseSpell_ = $SummonHorseSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/spells/ice/$SummonPolarBearSpell" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DefaultConfig, $DefaultConfig$Type} from "packages/io/redspace/ironsspellbooks/api/config/$DefaultConfig"
import {$CastType, $CastType$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SummonPolarBearSpell extends $AbstractSpell {

constructor()

public "getSpellResource"(): $ResourceLocation
public "getDefaultConfig"(): $DefaultConfig
public "getCastStartSound"(): $Optional<($SoundEvent)>
public "onCast"(arg0: $Level$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $CastSource$Type, arg4: $MagicData$Type): void
public "getUniqueInfo"(arg0: integer, arg1: $LivingEntity$Type): $List<($MutableComponent)>
public "getCastType"(): $CastType
get "spellResource"(): $ResourceLocation
get "defaultConfig"(): $DefaultConfig
get "castStartSound"(): $Optional<($SoundEvent)>
get "castType"(): $CastType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonPolarBearSpell$Type = ($SummonPolarBearSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonPolarBearSpell_ = $SummonPolarBearSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/armor/$WanderingMagicianModel" {
import {$GeoModel, $GeoModel$Type} from "packages/software/bernie/geckolib/model/$GeoModel"
import {$WanderingMagicianArmorItem, $WanderingMagicianArmorItem$Type} from "packages/io/redspace/ironsspellbooks/item/armor/$WanderingMagicianArmorItem"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $WanderingMagicianModel extends $GeoModel<($WanderingMagicianArmorItem)> {

constructor()

public "getTextureResource"(arg0: $WanderingMagicianArmorItem$Type): $ResourceLocation
public "getModelResource"(arg0: $WanderingMagicianArmorItem$Type): $ResourceLocation
public "getAnimationResource"(arg0: $WanderingMagicianArmorItem$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WanderingMagicianModel$Type = ($WanderingMagicianModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WanderingMagicianModel_ = $WanderingMagicianModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/priest/$PriestModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$AnimationState, $AnimationState$Type} from "packages/software/bernie/geckolib/core/animation/$AnimationState"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"

export class $PriestModel extends $AbstractSpellCastingMobModel {
static readonly "TEXTURE": $ResourceLocation
static readonly "TEXTURE_ARMOR": $ResourceLocation
static readonly "MODEL": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "getModelResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
public "setCustomAnimations"(arg0: $AbstractSpellCastingMob$Type, arg1: long, arg2: $AnimationState$Type<($AbstractSpellCastingMob$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PriestModel$Type = ($PriestModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PriestModel_ = $PriestModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/item/$ArcaneSalvageItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ArcaneSalvageItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcaneSalvageItem$Type = ($ArcaneSalvageItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcaneSalvageItem_ = $ArcaneSalvageItem$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/spell/$ClientboundParticleShockwave" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientboundParticleShockwave {

constructor(arg0: $Vec3$Type, arg1: float, arg2: $ParticleType$Type<(any)>)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public "readVec3"(arg0: $FriendlyByteBuf$Type): $Vec3
public "writeVec3"(arg0: $Vec3$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientboundParticleShockwave$Type = ($ClientboundParticleShockwave);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientboundParticleShockwave_ = $ClientboundParticleShockwave$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/data/$IronsDataStorage" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$DimensionDataStorage, $DimensionDataStorage$Type} from "packages/net/minecraft/world/level/storage/$DimensionDataStorage"

export class $IronsDataStorage extends $SavedData {
static "INSTANCE": $IronsDataStorage

constructor()

public static "load"(arg0: $CompoundTag$Type): $IronsDataStorage
public static "init"(arg0: $DimensionDataStorage$Type): void
public "save"(arg0: $CompoundTag$Type): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronsDataStorage$Type = ($IronsDataStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronsDataStorage_ = $IronsDataStorage$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/player/$KeyMappings" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RegisterKeyMappingsEvent, $RegisterKeyMappingsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterKeyMappingsEvent"

export class $KeyMappings {
static readonly "KEY_BIND_GENERAL_CATEGORY": string
static readonly "KEY_BIND_QUICK_CAST_CATEGORY": string
static readonly "SPELL_WHEEL_KEYMAP": $KeyMapping
static readonly "SPELLBOOK_CAST_ACTIVE_KEYMAP": $KeyMapping
static readonly "SPELLBAR_SCROLL_MODIFIER_KEYMAP": $KeyMapping
static readonly "QUICK_CAST_MAPPINGS": $List<($KeyMapping)>

constructor()

public static "onRegisterKeybinds"(arg0: $RegisterKeyMappingsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyMappings$Type = ($KeyMappings);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyMappings_ = $KeyMappings$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/magic/$MagicHelper" {
import {$IMagicManager, $IMagicManager$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$IMagicManager"

export class $MagicHelper {
static "MAGIC_MANAGER": $IMagicManager

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicHelper$Type = ($MagicHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicHelper_ = $MagicHelper$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/keeper/$KeeperEntity$AttackType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$AttackAnimationData, $AttackAnimationData$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/goals/$AttackAnimationData"

export class $KeeperEntity$AttackType extends $Enum<($KeeperEntity$AttackType)> {
static readonly "Double_Slash": $KeeperEntity$AttackType
static readonly "Single_Upward": $KeeperEntity$AttackType
static readonly "Single_Horizontal": $KeeperEntity$AttackType
static readonly "Single_Horizontal_Fast": $KeeperEntity$AttackType
static readonly "Single_Stab": $KeeperEntity$AttackType
static readonly "Lunge": $KeeperEntity$AttackType
readonly "data": $AttackAnimationData


public static "values"(): ($KeeperEntity$AttackType)[]
public static "valueOf"(arg0: string): $KeeperEntity$AttackType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeeperEntity$AttackType$Type = (("single_horizontal_fast") | ("double_slash") | ("single_upward") | ("lunge") | ("single_horizontal") | ("single_stab")) | ($KeeperEntity$AttackType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeeperEntity$AttackType_ = $KeeperEntity$AttackType$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/wizards/cryomancer/$CryomancerModel" {
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSpellCastingMobModel, $AbstractSpellCastingMobModel$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobModel"

export class $CryomancerModel extends $AbstractSpellCastingMobModel {
static readonly "TEXTURE": $ResourceLocation

constructor()

public "getTextureResource"(arg0: $AbstractSpellCastingMob$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CryomancerModel$Type = ($CryomancerModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CryomancerModel_ = $CryomancerModel$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/worldgen/$IndividualTerrainStructurePoolElement" {
import {$BoundingBox, $BoundingBox$Type} from "packages/net/minecraft/world/level/levelgen/structure/$BoundingBox"
import {$StructureTemplatePool$Projection, $StructureTemplatePool$Projection$Type} from "packages/net/minecraft/world/level/levelgen/structure/pools/$StructureTemplatePool$Projection"
import {$StructureProcessorList, $StructureProcessorList$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureProcessorList"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$WorldGenLevel, $WorldGenLevel$Type} from "packages/net/minecraft/world/level/$WorldGenLevel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$StructureTemplate, $StructureTemplate$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureTemplate"
import {$TerrainAdjustment, $TerrainAdjustment$Type} from "packages/net/minecraft/world/level/levelgen/structure/$TerrainAdjustment"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$StructureTemplateManager, $StructureTemplateManager$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$StructureTemplateManager"
import {$SinglePoolElement, $SinglePoolElement$Type} from "packages/net/minecraft/world/level/levelgen/structure/pools/$SinglePoolElement"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$StructureManager, $StructureManager$Type} from "packages/net/minecraft/world/level/$StructureManager"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$StructurePoolElementType, $StructurePoolElementType$Type} from "packages/net/minecraft/world/level/levelgen/structure/pools/$StructurePoolElementType"

export class $IndividualTerrainStructurePoolElement extends $SinglePoolElement {
static readonly "CODEC": $Codec<($IndividualTerrainStructurePoolElement)>

constructor(arg0: $Either$Type<($ResourceLocation$Type), ($StructureTemplate$Type)>, arg1: $Holder$Type<($StructureProcessorList$Type)>, arg2: $StructureTemplatePool$Projection$Type, arg3: $TerrainAdjustment$Type)

public "getTerrainAdjustment"(): $TerrainAdjustment
public "place"(arg0: $StructureTemplateManager$Type, arg1: $WorldGenLevel$Type, arg2: $StructureManager$Type, arg3: $ChunkGenerator$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type, arg6: $Rotation$Type, arg7: $BoundingBox$Type, arg8: $RandomSource$Type, arg9: boolean): boolean
public "getType"(): $StructurePoolElementType<(any)>
get "terrainAdjustment"(): $TerrainAdjustment
get "type"(): $StructurePoolElementType<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IndividualTerrainStructurePoolElement$Type = ($IndividualTerrainStructurePoolElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IndividualTerrainStructurePoolElement_ = $IndividualTerrainStructurePoolElement$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$FadeableSoundInstance" {
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$AbstractTickableSoundInstance, $AbstractTickableSoundInstance$Type} from "packages/net/minecraft/client/resources/sounds/$AbstractTickableSoundInstance"

export class $FadeableSoundInstance extends $AbstractTickableSoundInstance {


public "tick"(): void
public "triggerStart"(): void
public "triggerStop"(): void
public "canStartSilent"(): boolean
public static "createUnseededRandom"(): $RandomSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FadeableSoundInstance$Type = ($FadeableSoundInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FadeableSoundInstance_ = $FadeableSoundInstance$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/$VisualFallingBlockRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$VisualFallingBlockEntity, $VisualFallingBlockEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/$VisualFallingBlockEntity"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $VisualFallingBlockRenderer extends $EntityRenderer<($VisualFallingBlockEntity)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $VisualFallingBlockEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $VisualFallingBlockEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VisualFallingBlockRenderer$Type = ($VisualFallingBlockRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VisualFallingBlockRenderer_ = $VisualFallingBlockRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/raise_dead_summons/$SummonedSkeletonMultiRenderer" {
import {$SummonedSkeleton, $SummonedSkeleton$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$SummonedSkeleton"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$HumanoidRenderer, $HumanoidRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$HumanoidRenderer"

export class $SummonedSkeletonMultiRenderer extends $HumanoidRenderer<($SummonedSkeleton)> {
static readonly "TEXTURE_ALT": $ResourceLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $SummonedSkeleton$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SummonedSkeletonMultiRenderer$Type = ($SummonedSkeletonMultiRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SummonedSkeletonMultiRenderer_ = $SummonedSkeletonMultiRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$ClearCooldownCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $ClearCooldownCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClearCooldownCommand$Type = ($ClearCooldownCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClearCooldownCommand_ = $ClearCooldownCommand$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/particle/$SparkParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$SparkParticleOptions, $SparkParticleOptions$Type} from "packages/io/redspace/ironsspellbooks/particle/$SparkParticleOptions"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $SparkParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $SparkParticleOptions$Type, arg1: $ClientLevel$Type, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: double)

public "m_6355_"(arg0: float): integer
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SparkParticle$Type = ($SparkParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SparkParticle_ = $SparkParticle$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/sunbeam/$Sunbeam" {
import {$AntiMagicSusceptible, $AntiMagicSusceptible$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/$AntiMagicSusceptible"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MagicData, $MagicData$Type} from "packages/io/redspace/ironsspellbooks/api/magic/$MagicData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AoeEntity, $AoeEntity$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AoeEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $Sunbeam extends $AoeEntity implements $AntiMagicSusceptible {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type)

public "onAntiMagic"(arg0: $MagicData$Type): void
public "ambientParticles"(): void
public "getParticleCount"(): float
public "getParticle"(): $Optional<($ParticleOptions)>
public "applyEffect"(arg0: $LivingEntity$Type): void
public "tick"(): void
public "refreshDimensions"(): void
get "particleCount"(): float
get "particle"(): $Optional<($ParticleOptions)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Sunbeam$Type = ($Sunbeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Sunbeam_ = $Sunbeam$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/util/$ByteHelper" {
import {$ParallelMatcher, $ParallelMatcher$Type} from "packages/io/redspace/ironsspellbooks/datafix/$ParallelMatcher"
import {$DataInputStream, $DataInputStream$Type} from "packages/java/io/$DataInputStream"

export class $ByteHelper {

constructor()

public static "indexOf"(arg0: $DataInputStream$Type, arg1: $ParallelMatcher$Type): integer
public static "indexOf"(arg0: $DataInputStream$Type, arg1: (byte)[]): integer
public static "indexOf"(arg0: (byte)[], arg1: integer, arg2: (byte)[]): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ByteHelper$Type = ($ByteHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ByteHelper_ = $ByteHelper$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/datafix/fixers/$FixItemNames" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataFixerElement, $DataFixerElement$Type} from "packages/io/redspace/ironsspellbooks/datafix/$DataFixerElement"

export class $FixItemNames extends $DataFixerElement {

constructor()

public "runFixer"(arg0: $CompoundTag$Type): boolean
public "preScanValuesToMatch"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FixItemNames$Type = ($FixItemNames);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FixItemNames_ = $FixItemNames$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/magic/$SpellSelectionManager$SelectionOption" {
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"
import {$CastSource, $CastSource$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$CastSource"

export class $SpellSelectionManager$SelectionOption {
 "spellData": $SpellData
 "slot": string
 "slotIndex": integer
 "globalIndex": integer

constructor(arg0: $SpellData$Type, arg1: string, arg2: integer, arg3: integer)

public "getCastSource"(): $CastSource
get "castSource"(): $CastSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellSelectionManager$SelectionOption$Type = ($SpellSelectionManager$SelectionOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellSelectionManager$SelectionOption_ = $SpellSelectionManager$SelectionOption$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/comet/$CometRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FireballRenderer, $FireballRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/fireball/$FireballRenderer"

export class $CometRenderer extends $FireballRenderer {
static readonly "MODEL_LAYER_LOCATION": $ModelLayerLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: float)

public "getTextureLocation"(arg0: $Projectile$Type): $ResourceLocation
public "getFireTextureLocation"(arg0: $Projectile$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CometRenderer$Type = ($CometRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CometRenderer_ = $CometRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/spells/firebolt/$FireboltProjectile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$AbstractMagicProjectile, $AbstractMagicProjectile$Type} from "packages/io/redspace/ironsspellbooks/entity/spells/$AbstractMagicProjectile"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FireboltProjectile extends $AbstractMagicProjectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)

public "impactParticles"(arg0: double, arg1: double, arg2: double): void
public "trailParticles"(): void
public "getImpactSound"(): $Optional<($SoundEvent)>
public "getSpeed"(): float
get "impactSound"(): $Optional<($SoundEvent)>
get "speed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireboltProjectile$Type = ($FireboltProjectile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireboltProjectile_ = $FireboltProjectile$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/keeper/$KeeperRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractSpellCastingMob, $AbstractSpellCastingMob$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMob"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$AbstractSpellCastingMobRenderer, $AbstractSpellCastingMobRenderer$Type} from "packages/io/redspace/ironsspellbooks/entity/mobs/abstract_spell_casting_mob/$AbstractSpellCastingMobRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BakedGeoModel, $BakedGeoModel$Type} from "packages/software/bernie/geckolib/cache/object/$BakedGeoModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GeoBone, $GeoBone$Type} from "packages/software/bernie/geckolib/cache/object/$GeoBone"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $KeeperRenderer extends $AbstractSpellCastingMobRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getRenderType"(arg0: $AbstractSpellCastingMob$Type, arg1: $ResourceLocation$Type, arg2: $MultiBufferSource$Type, arg3: float): $RenderType
public "preRender"(arg0: $PoseStack$Type, arg1: $AbstractSpellCastingMob$Type, arg2: $BakedGeoModel$Type, arg3: $MultiBufferSource$Type, arg4: $VertexConsumer$Type, arg5: boolean, arg6: float, arg7: integer, arg8: integer, arg9: float, arg10: float, arg11: float, arg12: float): void
public "renderRecursively"(arg0: $PoseStack$Type, arg1: $AbstractSpellCastingMob$Type, arg2: $GeoBone$Type, arg3: $RenderType$Type, arg4: $MultiBufferSource$Type, arg5: $VertexConsumer$Type, arg6: boolean, arg7: float, arg8: integer, arg9: integer, arg10: float, arg11: float, arg12: float, arg13: float): void
public "getPackedOverlay"(arg0: $AbstractSpellCastingMob$Type, arg1: float): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeeperRenderer$Type = ($KeeperRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeeperRenderer_ = $KeeperRenderer$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/effect/$ChargeEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$MagicMobEffect, $MagicMobEffect$Type} from "packages/io/redspace/ironsspellbooks/effect/$MagicMobEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ChargeEffect extends $MagicMobEffect {
static readonly "ATTACK_DAMAGE_PER_LEVEL": float
static readonly "SPEED_PER_LEVEL": float
static readonly "SPELL_POWER_PER_LEVEL": float

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public "removeAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChargeEffect$Type = ($ChargeEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChargeEffect_ = $ChargeEffect$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/entity/mobs/dead_king_boss/$DeadKingAmbienceSoundInstance" {
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$AbstractTickableSoundInstance, $AbstractTickableSoundInstance$Type} from "packages/net/minecraft/client/resources/sounds/$AbstractTickableSoundInstance"

export class $DeadKingAmbienceSoundInstance extends $AbstractTickableSoundInstance {
static readonly "rangeSqr": integer
static readonly "maxVolumeRangeSqr": integer


public "tick"(): void
public "triggerStop"(): void
public "canStartSilent"(): boolean
public static "createUnseededRandom"(): $RandomSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadKingAmbienceSoundInstance$Type = ($DeadKingAmbienceSoundInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadKingAmbienceSoundInstance_ = $DeadKingAmbienceSoundInstance$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/api/registry/$SpellDataRegistryHolder" {
import {$AbstractSpell, $AbstractSpell$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$AbstractSpell"
import {$SpellData, $SpellData$Type} from "packages/io/redspace/ironsspellbooks/api/spells/$SpellData"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $SpellDataRegistryHolder {

constructor(arg0: $RegistryObject$Type<($AbstractSpell$Type)>, arg1: integer)

public static "of"(...arg0: ($SpellDataRegistryHolder$Type)[]): ($SpellDataRegistryHolder)[]
public "getSpellData"(): $SpellData
get "spellData"(): $SpellData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellDataRegistryHolder$Type = ($SpellDataRegistryHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellDataRegistryHolder_ = $SpellDataRegistryHolder$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/command/$SpellArgument" {
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$ArgumentType, $ArgumentType$Type} from "packages/com/mojang/brigadier/arguments/$ArgumentType"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $SpellArgument implements $ArgumentType<(string)> {

constructor()

public "getExamples"(): $Collection<(string)>
public "listSuggestions"<S>(arg0: $CommandContext$Type<(S)>, arg1: $SuggestionsBuilder$Type): $CompletableFuture<($Suggestions)>
public static "spellArgument"(): $SpellArgument
get "examples"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpellArgument$Type = ($SpellArgument);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpellArgument_ = $SpellArgument$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/network/$ServerboundLearnSpell" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ServerboundLearnSpell {

constructor(arg0: $InteractionHand$Type, arg1: string)
constructor(arg0: $FriendlyByteBuf$Type)

public "toBytes"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): boolean
public static "handToByte"(arg0: $InteractionHand$Type): byte
public static "byteToHand"(arg0: byte): $InteractionHand
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerboundLearnSpell$Type = ($ServerboundLearnSpell);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerboundLearnSpell_ = $ServerboundLearnSpell$Type;
}}
declare module "packages/io/redspace/ironsspellbooks/render/$StaffArmPose" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"

export class $StaffArmPose {
static "STAFF_ARM_POS": $HumanoidModel$ArmPose

constructor()

public static "initializeClientHelper"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StaffArmPose$Type = ($StaffArmPose);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StaffArmPose_ = $StaffArmPose$Type;
}}
