declare module "packages/dev/xkmc/l2itemselector/events/$GenericKeyEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $GenericKeyEvent extends $Event {

constructor(arg0: $Predicate$Type<($InputConstants$Key$Type)>, arg1: integer)
constructor()

public "test"(arg0: $InputConstants$Key$Type): boolean
public "isCancelable"(): boolean
public "getAction"(): integer
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "action"(): integer
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericKeyEvent$Type = ($GenericKeyEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericKeyEvent_ = $GenericKeyEvent$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/target/$ConfigTargetTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$ConfigGroup"
import {$GolemTabBase, $GolemTabBase$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $ConfigTargetTab extends $GolemTabBase<($ConfigGroup), ($ConfigTargetTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $GolemTabToken<(G), (T)>
readonly "manager": $GolemTabManager<(G)>
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $GolemTabToken$Type<($ConfigGroup$Type), ($ConfigTargetTab$Type)>, arg2: $GolemTabManager$Type<($ConfigGroup$Type)>, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigTargetTab$Type = ($ConfigTargetTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigTargetTab_ = $ConfigTargetTab$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/one/$ShapeBlockMethod" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$SingletonBlockMethod, $SingletonBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$SingletonBlockMethod"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ShapeBlockMethod extends $SingletonBlockMethod {

 "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
 "getBlockSupportShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): $VoxelShape
 "getVisualShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
 "getCollisionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
}

export namespace $ShapeBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeBlockMethod$Type = ($ShapeBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeBlockMethod_ = $ShapeBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/curios/$EntityCuriosListScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$EntityCuriosListMenu, $EntityCuriosListMenu$Type} from "packages/dev/xkmc/l2hostility/compat/curios/$EntityCuriosListMenu"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseCuriosListScreen, $BaseCuriosListScreen$Type} from "packages/dev/xkmc/l2tabs/compat/$BaseCuriosListScreen"

export class $EntityCuriosListScreen extends $BaseCuriosListScreen<($EntityCuriosListMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $EntityCuriosListMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityCuriosListScreen$Type = ($EntityCuriosListScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityCuriosListScreen_ = $EntityCuriosListScreen$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/entity/$ChargeType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ChargeType extends $Enum<($ChargeType)> {
static readonly "BOOST": $ChargeType
static readonly "ETERNAL": $ChargeType


public static "values"(): ($ChargeType)[]
public static "valueOf"(arg0: string): $ChargeType
public "onHit"(arg0: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChargeType$Type = (("eternal") | ("boost")) | ($ChargeType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChargeType_ = $ChargeType$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/client/$CommonDecoUtil" {
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $CommonDecoUtil {

constructor()

public static "fillRect"(arg0: $GuiGraphics$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonDecoUtil$Type = ($CommonDecoUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonDecoUtil_ = $CommonDecoUtil$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/tabs/$ITabScreen" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export interface $ITabScreen {

 "screenHeight"(): integer
 "screenWidth"(): integer
 "asScreen"(): $Screen
 "getGuiLeft"(): integer
 "getGuiTop"(): integer
 "getXSize"(): integer
 "getYSize"(): integer
}

export namespace $ITabScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITabScreen$Type = ($ITabScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITabScreen_ = $ITabScreen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export interface $IMenuPvd extends $MenuProvider {

 "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
 "getDisplayName"(): $Component
 "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
}

export namespace $IMenuPvd {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMenuPvd$Type = ($IMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMenuPvd_ = $IMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2backpack/compat/$GolemCompat" {
import {$ArrowBagEvents$ArrowFindEvent, $ArrowBagEvents$ArrowFindEvent$Type} from "packages/dev/xkmc/l2backpack/events/$ArrowBagEvents$ArrowFindEvent"
import {$GolemHandleItemEvent, $GolemHandleItemEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemHandleItemEvent"
import {$RegistrateTagsProvider$IntrinsicImpl, $RegistrateTagsProvider$IntrinsicImpl$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider$IntrinsicImpl"
import {$GolemEquipEvent, $GolemEquipEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemEquipEvent"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $GolemCompat {

constructor()

public static "register"(): void
public static "onEquip"(arg0: $GolemEquipEvent$Type): void
public static "onArrowFind"(arg0: $ArrowBagEvents$ArrowFindEvent$Type): void
public static "onHandleItem"(arg0: $GolemHandleItemEvent$Type): void
public static "genBlockTag"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($Block$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemCompat$Type = ($GolemCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemCompat_ = $GolemCompat$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/$GolemClient" {
import {$RegisterGuiOverlaysEvent, $RegisterGuiOverlaysEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterGuiOverlaysEvent"
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$EntityRenderersEvent$AddLayers, $EntityRenderersEvent$AddLayers$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$AddLayers"
import {$EntityRenderersEvent$RegisterLayerDefinitions, $EntityRenderersEvent$RegisterLayerDefinitions$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$RegisterLayerDefinitions"
import {$RegisterClientReloadListenersEvent, $RegisterClientReloadListenersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientReloadListenersEvent"

export class $GolemClient {

constructor()

public static "clientSetup"(arg0: $FMLClientSetupEvent$Type): void
public static "registerArmorLayer"(arg0: $EntityRenderersEvent$RegisterLayerDefinitions$Type): void
public static "onAddLayers"(arg0: $EntityRenderersEvent$AddLayers$Type): void
public static "onResourceReload"(arg0: $RegisterClientReloadListenersEvent$Type): void
public static "registerOverlays"(arg0: $RegisterGuiOverlaysEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemClient$Type = ($GolemClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemClient_ = $GolemClient$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$AbstractShapelessRecipe$Serializer, $AbstractShapelessRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe$Serializer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ShapelessRecipe, $ShapelessRecipe$Type} from "packages/net/minecraft/world/item/crafting/$ShapelessRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $AbstractShapelessRecipe<T extends $AbstractShapelessRecipe<(T)>> extends $ShapelessRecipe {
readonly "group": string
readonly "result": $ItemStack
readonly "ingredients": $NonNullList<($Ingredient)>

constructor(arg0: $ResourceLocation$Type, arg1: string, arg2: $ItemStack$Type, arg3: $NonNullList$Type<($Ingredient$Type)>)

public "getSerializer"(): $AbstractShapelessRecipe$Serializer<(T)>
public "getJEIResult"(): $List<($ItemStack)>
get "serializer"(): $AbstractShapelessRecipe$Serializer<(T)>
get "jEIResult"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractShapelessRecipe$Type<T> = ($AbstractShapelessRecipe<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractShapelessRecipe_<T> = $AbstractShapelessRecipe$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/filter/$FilterTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export class $FilterTab extends $FilterTabBase<($FilterTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $FilterTabToken<(T)>
readonly "manager": $FilterTabManager
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $FilterTabToken$Type<($FilterTab$Type)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilterTab$Type = ($FilterTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilterTab_ = $FilterTab$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$ThermalMotive" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $ThermalMotive extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
public "playerAttackedCancel"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThermalMotive$Type = ($ThermalMotive);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThermalMotive_ = $ThermalMotive$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$LCSpriteSourceProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$SpriteSourceProvider, $SpriteSourceProvider$Type} from "packages/net/minecraftforge/common/data/$SpriteSourceProvider"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"

export class $LCSpriteSourceProvider extends $SpriteSourceProvider {

constructor(arg0: $PackOutput$Type, arg1: $ExistingFileHelper$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCSpriteSourceProvider$Type = ($LCSpriteSourceProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCSpriteSourceProvider_ = $LCSpriteSourceProvider$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/jei/$EnvyLootRecipe" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ITraitLootRecipe, $ITraitLootRecipe$Type} from "packages/dev/xkmc/l2hostility/compat/jei/$ITraitLootRecipe"

export class $EnvyLootRecipe extends $Record implements $ITraitLootRecipe {

constructor()

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getResults"(): $List<($ItemStack)>
public "getCurioRequired"(): $List<($ItemStack)>
public "getInputs"(): $List<($ItemStack)>
public "addTooltip"(arg0: $List$Type<($Component$Type)>): void
get "results"(): $List<($ItemStack)>
get "curioRequired"(): $List<($ItemStack)>
get "inputs"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnvyLootRecipe$Type = ($EnvyLootRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnvyLootRecipe_ = $EnvyLootRecipe$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$HardShieldEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$AttributeEnchantment, $AttributeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$AttributeEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"

export class $HardShieldEnchantment extends $UnobtainableEnchantment implements $AttributeEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "addAttributes"(arg0: integer, arg1: $ItemAttributeModifierEvent$Type): void
public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HardShieldEnchantment$Type = ($HardShieldEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HardShieldEnchantment_ = $HardShieldEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$LoadContainerEvents" {
import {$PlayerInteractEvent$LeftClickBlock, $PlayerInteractEvent$LeftClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$LeftClickBlock"

export class $LoadContainerEvents {

constructor()

public static "playerLeftClick"(arg0: $PlayerInteractEvent$LeftClickBlock$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadContainerEvents$Type = ($LoadContainerEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadContainerEvents_ = $LoadContainerEvents$Type;
}}
declare module "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $DrawerInteractToServer$Callback extends $Enum<($DrawerInteractToServer$Callback)> {
static readonly "REGULAR": $DrawerInteractToServer$Callback
static readonly "SUPPRESS": $DrawerInteractToServer$Callback
static readonly "SCRAMBLE": $DrawerInteractToServer$Callback


public static "values"(): ($DrawerInteractToServer$Callback)[]
public static "valueOf"(arg0: string): $DrawerInteractToServer$Callback
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerInteractToServer$Callback$Type = (("suppress") | ("regular") | ("scramble")) | ($DrawerInteractToServer$Callback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerInteractToServer$Callback_ = $DrawerInteractToServer$Callback$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractGolemRenderer, $AbstractGolemRenderer$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$HumaniodGolemPartType, $HumaniodGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumaniodGolemPartType"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$HumanoidGolemModel, $HumanoidGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemModel"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $HumanoidGolemRenderer extends $AbstractGolemRenderer<($HumanoidGolemEntity), ($HumaniodGolemPartType), ($HumanoidGolemModel)> {
static readonly "LIST": $List<($Function<($AbstractGolemRenderer<(any), (any), (any)>), ($RenderLayer<(any), (any)>)>)>
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: boolean)
constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $HumanoidGolemEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "renderImpl"(arg0: $HumanoidGolemEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HumanoidGolemRenderer$Type = ($HumanoidGolemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HumanoidGolemRenderer_ = $HumanoidGolemRenderer$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier$Order" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$DamageModifier$Type, $DamageModifier$Type$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier$Type"

export class $DamageModifier$Order extends $Enum<($DamageModifier$Order)> {
static readonly "PRE_NONLINEAR": $DamageModifier$Order
static readonly "PRE_MULTIPLICATIVE": $DamageModifier$Order
static readonly "PRE_ADDITIVE": $DamageModifier$Order
static readonly "POST_MULT_BASE": $DamageModifier$Order
static readonly "POST_MULTIPLICATIVE": $DamageModifier$Order
static readonly "POST_NONLINEAR": $DamageModifier$Order
static readonly "POST_ADDITIVE": $DamageModifier$Order
static readonly "END_NONLINEAR": $DamageModifier$Order
readonly "type": $DamageModifier$Type


public static "values"(): ($DamageModifier$Order)[]
public static "valueOf"(arg0: string): $DamageModifier$Order
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageModifier$Order$Type = (("end_nonlinear") | ("post_nonlinear") | ("post_multiplicative") | ("pre_additive") | ("pre_multiplicative") | ("post_additive") | ("pre_nonlinear") | ("post_mult_base")) | ($DamageModifier$Order);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageModifier$Order_ = $DamageModifier$Order$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfIncarceration" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RingOfIncarceration extends $CurioItem implements $ICurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "hasCurioCapability"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "canUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type, arg1: $ItemStack$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "writeSyncData"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public "writeSyncData"(arg0: $ItemStack$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: $ItemStack$Type): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "canEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type, arg2: $ItemStack$Type): boolean
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type, arg2: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RingOfIncarceration$Type = ($RingOfIncarceration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RingOfIncarceration_ = $RingOfIncarceration$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkCapSyncToClient" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ChunkDifficulty, $ChunkDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkDifficulty"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ChunkCapSyncToClient extends $SerialPacketBase {
 "tag": $CompoundTag
 "level": $ResourceLocation
 "x": integer
 "z": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $ChunkDifficulty$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChunkCapSyncToClient$Type = ($ChunkCapSyncToClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChunkCapSyncToClient_ = $ChunkCapSyncToClient$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$ImagineBreaker" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$PlayerDifficulty, $PlayerDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/player/$PlayerDifficulty"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ImagineBreaker extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getLootFactor"(arg0: $ItemStack$Type, arg1: $PlayerDifficulty$Type, arg2: $MobTraitCap$Type): double
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImagineBreaker$Type = ($ImagineBreaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImagineBreaker_ = $ImagineBreaker$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/persistent/$SimpleCPSetEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractConditionalPersistentSetEffect, $AbstractConditionalPersistentSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/persistent/$AbstractConditionalPersistentSetEffect"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$PeriodicData, $PeriodicData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/persistent/$PeriodicData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $SimpleCPSetEffect extends $AbstractConditionalPersistentSetEffect<($PeriodicData)> {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $Predicate$Type<($Player$Type)>, arg2: $BiConsumer$Type<($Player$Type), (integer)>, arg3: $BiFunction$Type<(integer), (string), ($MutableComponent$Type)>)

public "getData"(arg0: $ArtifactSetConfig$Entry$Type): $PeriodicData
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleCPSetEffect$Type = ($SimpleCPSetEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleCPSetEffect_ = $SimpleCPSetEffect$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$ItemPool" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$EntityConfig$ItemEntry, $EntityConfig$ItemEntry$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$ItemEntry"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"

export class $EntityConfig$ItemPool extends $Record {

constructor(level: integer, chance: float, slot: string, entries: $ArrayList$Type<($EntityConfig$ItemEntry$Type)>)

public "slot"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "entries"(): $ArrayList<($EntityConfig$ItemEntry)>
public "level"(): integer
public "chance"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityConfig$ItemPool$Type = ($EntityConfig$ItemPool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityConfig$ItemPool_ = $EntityConfig$ItemPool$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechBodyModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $MechBodyModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "interact"(arg0: $Player$Type, arg1: $AbstractGolemEntity$Type<(any), (any)>, arg2: $InteractionHand$Type): $InteractionResult
public "onAiStep"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MechBodyModifier$Type = ($MechBodyModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MechBodyModifier_ = $MechBodyModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/registry/$OpenEquipmentMenuToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$OpenEquipmentMenuToServer$Type, $OpenEquipmentMenuToServer$Type$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$OpenEquipmentMenuToServer$Type"

export class $OpenEquipmentMenuToServer extends $SerialPacketBase {
 "type": $OpenEquipmentMenuToServer$Type
 "uuid": $UUID

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $UUID$Type, arg1: $OpenEquipmentMenuToServer$Type$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenEquipmentMenuToServer$Type = ($OpenEquipmentMenuToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenEquipmentMenuToServer_ = $OpenEquipmentMenuToServer$Type;
}}
declare module "packages/dev/xkmc/l2complements/events/$ItemUseEventHandler" {
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"
import {$PlayerInteractEvent$RightClickBlock, $PlayerInteractEvent$RightClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickBlock"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$PlayerInteractEvent$LeftClickEmpty, $PlayerInteractEvent$LeftClickEmpty$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$LeftClickEmpty"
import {$PlayerInteractEvent$RightClickEmpty, $PlayerInteractEvent$RightClickEmpty$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickEmpty"
import {$PlayerInteractEvent$EntityInteract, $PlayerInteractEvent$EntityInteract$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteract"
import {$AttackEntityEvent, $AttackEntityEvent$Type} from "packages/net/minecraftforge/event/entity/player/$AttackEntityEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PlayerInteractEvent$LeftClickBlock, $PlayerInteractEvent$LeftClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$LeftClickBlock"
import {$ItemUseEventHandler$TriCon, $ItemUseEventHandler$TriCon$Type} from "packages/dev/xkmc/l2complements/events/$ItemUseEventHandler$TriCon"
import {$ItemUseEventHandler$ItemClickHandler, $ItemUseEventHandler$ItemClickHandler$Type} from "packages/dev/xkmc/l2complements/events/$ItemUseEventHandler$ItemClickHandler"

export class $ItemUseEventHandler {
static readonly "LIST": $List<($ItemUseEventHandler$ItemClickHandler)>

constructor()

public static "execute"<T extends $PlayerEvent>(arg0: $ItemStack$Type, arg1: T, arg2: $ItemUseEventHandler$TriCon$Type<(T)>): void
public static "onPlayerRightClickEmpty"(arg0: $PlayerInteractEvent$RightClickEmpty$Type): void
public static "onPlayerRightClickBlock"(arg0: $PlayerInteractEvent$RightClickBlock$Type): void
public static "onPlayerLeftClickBlock"(arg0: $PlayerInteractEvent$LeftClickBlock$Type): void
public static "onPlayerRightClickEntity"(arg0: $PlayerInteractEvent$EntityInteract$Type): void
public static "onPlayerLeftClickEmpty"(arg0: $PlayerInteractEvent$LeftClickEmpty$Type): void
public static "onPlayerLeftClickEntity"(arg0: $AttackEntityEvent$Type): void
public static "onCriticalHit"(arg0: $CriticalHitEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemUseEventHandler$Type = ($ItemUseEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemUseEventHandler_ = $ItemUseEventHandler$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/tool/$Detector" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Detector extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Detector$Type = ($Detector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Detector_ = $Detector$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/armors/$FlameThornEnchantment" {
import {$AbstractThornEnchantment, $AbstractThornEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/armors/$AbstractThornEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $FlameThornEnchantment extends $AbstractThornEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlameThornEnchantment$Type = ($FlameThornEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlameThornEnchantment_ = $FlameThornEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/core/$ArtifactCurioCap" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ICurio, $ICurio$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ArtifactStats, $ArtifactStats$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactStats"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $ArtifactCurioCap implements $ICurio {

constructor(arg0: $ItemStack$Type)

public "getStack"(): $ItemStack
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>): $List<($Component)>
public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "curioTick"(arg0: $SlotContext$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getStats"(): $Optional<($ArtifactStats)>
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string): $Multimap<($Attribute), ($AttributeModifier)>
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type): boolean
public "canUnequip"(arg0: $SlotContext$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type): void
public "getEquipSound"(arg0: $SlotContext$Type): $ICurio$SoundInfo
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "writeSyncData"(): $CompoundTag
public "writeSyncData"(arg0: $SlotContext$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type): boolean
public "canEquip"(arg0: $SlotContext$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type): boolean
public static "playBreakAnimation"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type): integer
get "stack"(): $ItemStack
get "stats"(): $Optional<($ArtifactStats)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactCurioCap$Type = ($ArtifactCurioCap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactCurioCap_ = $ArtifactCurioCap$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/loot/$BackpackLootModifier" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$LootModifier, $LootModifier$Type} from "packages/net/minecraftforge/common/loot/$LootModifier"
import {$LootGen$LootDefinition, $LootGen$LootDefinition$Type} from "packages/dev/xkmc/l2backpack/init/loot/$LootGen$LootDefinition"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $BackpackLootModifier extends $LootModifier {
static readonly "CODEC": $Codec<($BackpackLootModifier)>

constructor(arg0: double, arg1: $LootGen$LootDefinition$Type, arg2: long, ...arg3: ($LootItemCondition$Type)[])

public "codec"(): $Codec<($BackpackLootModifier)>
public static "getJson"<U>(arg0: $Dynamic$Type<(any)>): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackLootModifier$Type = ($BackpackLootModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackLootModifier_ = $BackpackLootModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/api/$IconRenderRegion" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $IconRenderRegion extends $Record {

constructor(x: float, y: float, scale: float)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "scale"(): float
public static "of"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: integer): $IconRenderRegion
public "x"(): float
public static "identity"(): $IconRenderRegion
public "resize"(arg0: $IconRenderRegion$Type): $IconRenderRegion
public "y"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconRenderRegion$Type = ($IconRenderRegion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconRenderRegion_ = $IconRenderRegion$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/tabs/$IFilterScreen" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export interface $IFilterScreen {

 "screenHeight"(): integer
 "screenWidth"(): integer
 "asScreen"(): $Screen
 "onSwitch"(): void
 "getGuiLeft"(): integer
 "getGuiTop"(): integer
 "getXSize"(): integer
 "getYSize"(): integer
}

export namespace $IFilterScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IFilterScreen$Type = ($IFilterScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IFilterScreen_ = $IFilterScreen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/$CreateCompatRegistry" {
import {$MechMobileModifier, $MechMobileModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechMobileModifier"
import {$MechMobileEffect, $MechMobileEffect$Type} from "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechMobileEffect"
import {$CoatingModifier, $CoatingModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$CoatingModifier"
import {$AttributeGolemModifier, $AttributeGolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier"
import {$DummyFurnace, $DummyFurnace$Type} from "packages/dev/xkmc/modulargolems/compat/materials/create/automation/$DummyFurnace"
import {$MechForceModifier, $MechForceModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechForceModifier"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$MechForceEffect, $MechForceEffect$Type} from "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechForceEffect"
import {$MechBodyModifier, $MechBodyModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechBodyModifier"
import {$SimpleUpgradeItem, $SimpleUpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$SimpleUpgradeItem"

export class $CreateCompatRegistry {
static readonly "COATING": $RegistryEntry<($CoatingModifier)>
static readonly "PUSH": $RegistryEntry<($AttributeGolemModifier)>
static readonly "BODY": $RegistryEntry<($MechBodyModifier)>
static readonly "MOBILE": $RegistryEntry<($MechMobileModifier)>
static readonly "FORCE": $RegistryEntry<($MechForceModifier)>
static readonly "EFF_MOBILE": $RegistryEntry<($MechMobileEffect)>
static readonly "EFF_FORCE": $RegistryEntry<($MechForceEffect)>
static readonly "UP_COATING": $ItemEntry<($SimpleUpgradeItem)>
static readonly "UP_PUSH": $ItemEntry<($SimpleUpgradeItem)>
static readonly "DUMMY": $ItemEntry<($DummyFurnace)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateCompatRegistry$Type = ($CreateCompatRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateCompatRegistry_ = $CreateCompatRegistry$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v1/$SaintReduction" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$PlayerOnlySetEffect, $PlayerOnlySetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PlayerOnlySetEffect"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $SaintReduction extends $PlayerOnlySetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "playerReduceDamage"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SaintReduction$Type = ($SaintReduction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SaintReduction_ = $SaintReduction$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$SweepGolemEntity" {
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SweepGolemEntity<T extends $SweepGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>> extends $AbstractGolemEntity<(T), (P)> {
 "inventoryTick": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>


public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "getTarget"(): $LivingEntity
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SweepGolemEntity$Type<T, P> = ($SweepGolemEntity<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SweepGolemEntity_<T, P> = $SweepGolemEntity$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/l2hostility/init/entries/$TraitBuilder" {
import {$AbstractBuilder, $AbstractBuilder$Type} from "packages/com/tterrag/registrate/builders/$AbstractBuilder"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BuilderCallback, $BuilderCallback$Type} from "packages/com/tterrag/registrate/builders/$BuilderCallback"
import {$TraitSymbol, $TraitSymbol$Type} from "packages/dev/xkmc/l2hostility/content/item/traits/$TraitSymbol"
import {$TraitConfig, $TraitConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$TraitConfig"
import {$ItemBuilder, $ItemBuilder$Type} from "packages/com/tterrag/registrate/builders/$ItemBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LHRegistrate, $LHRegistrate$Type} from "packages/dev/xkmc/l2hostility/init/entries/$LHRegistrate"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$NonNullFunction, $NonNullFunction$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullFunction"

export class $TraitBuilder<T extends $MobTrait, P> extends $AbstractBuilder<($MobTrait), (T), (P), ($TraitBuilder<(T), (P)>)> {

constructor(arg0: $LHRegistrate$Type, arg1: P, arg2: string, arg3: $BuilderCallback$Type, arg4: $NonNullSupplier$Type<(T)>, arg5: $Function$Type<($ResourceLocation$Type), ($TraitConfig$Type)>)

public "desc"(arg0: string): $TraitBuilder<(T), (P)>
public "lang"(arg0: string): $TraitBuilder<(T), (P)>
public "item"<I extends $TraitSymbol>(arg0: $NonNullFunction$Type<($Item$Properties$Type), (I)>): $ItemBuilder<(I), ($TraitBuilder<(T), (P)>)>
public static "of"<T>(arg0: $Supplier$Type<(T)>, arg1: $NonNullSupplier$Type<(string)>): $NonNullSupplier<(T)>
public static "of"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
public static "lazy"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitBuilder$Type<T, P> = ($TraitBuilder<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitBuilder_<T, P> = $TraitBuilder$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/wand/$BaseWandItem" {
import {$MGLangData, $MGLangData$Type} from "packages/dev/xkmc/modulargolems/init/data/$MGLangData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$CustomDisplaySelectItem, $CustomDisplaySelectItem$Type} from "packages/dev/xkmc/l2itemselector/select/item/$CustomDisplaySelectItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BaseWandItem extends $Item implements $CustomDisplaySelectItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $MGLangData$Type, arg2: $MGLangData$Type, arg3: $ItemEntry$Type<(any)>)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getDisplay"(arg0: $ResourceLocation$Type, arg1: $ItemStack$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseWandItem$Type = ($BaseWandItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseWandItem_ = $BaseWandItem$Type;
}}
declare module "packages/dev/xkmc/l2tabs/tabs/core/$TabToken" {
import {$TabType, $TabType$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabType"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BaseTab, $BaseTab$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$BaseTab"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TabToken$TabFactory, $TabToken$TabFactory$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabToken$TabFactory"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TabManager, $TabManager$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabManager"

export class $TabToken<T extends $BaseTab<(T)>> {
readonly "factory": $TabToken$TabFactory<(T)>
readonly "type": $TabType
readonly "title": $Component

constructor(arg0: $TabToken$TabFactory$Type<(T)>, arg1: $Supplier$Type<($Item$Type)>, arg2: $Component$Type)

public "create"(arg0: $TabManager$Type): T
public "getIndex"(): integer
get "index"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TabToken$Type<T> = ($TabToken<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TabToken_<T> = $TabToken$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2backpack/network/$RespondTooltipUpdateEvent" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"

export class $RespondTooltipUpdateEvent extends $SerialPacketBase {
 "item": $Item
 "id": $UUID
 "count": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $Item$Type, arg1: $UUID$Type, arg2: integer)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RespondTooltipUpdateEvent$Type = ($RespondTooltipUpdateEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RespondTooltipUpdateEvent_ = $RespondTooltipUpdateEvent$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/$DelegateBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$BlockMethod, $BlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$BlockMethod"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $DelegateBlock extends $Block {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public static "newBaseBlock"(arg0: $BlockBehaviour$Properties$Type, ...arg1: ($BlockMethod$Type)[]): $DelegateBlock
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelegateBlock$Type = ($DelegateBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelegateBlock_ = $DelegateBlock$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageTypeRoot$GenConfig" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DamageTypeWrapper, $DamageTypeWrapper$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageTypeWrapper"

export class $DamageTypeRoot$GenConfig extends $Record {


public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "gen"(): $List<($DamageTypeWrapper)>
public "modid"(): string
public "support"(): $Set<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageTypeRoot$GenConfig$Type = ($DamageTypeRoot$GenConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageTypeRoot$GenConfig_ = $DamageTypeRoot$GenConfig$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$LeviathanBlastPortalAttackGoal" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$BaseRangedAttackGoal, $BaseRangedAttackGoal$Type} from "packages/dev/xkmc/modulargolems/content/modifier/special/$BaseRangedAttackGoal"

export class $LeviathanBlastPortalAttackGoal extends $BaseRangedAttackGoal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LeviathanBlastPortalAttackGoal$Type = ($LeviathanBlastPortalAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LeviathanBlastPortalAttackGoal_ = $LeviathanBlastPortalAttackGoal$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$HarbingerDeathBeamAttackGoal" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$BaseRangedAttackGoal, $BaseRangedAttackGoal$Type} from "packages/dev/xkmc/modulargolems/content/modifier/special/$BaseRangedAttackGoal"

export class $HarbingerDeathBeamAttackGoal extends $BaseRangedAttackGoal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer)

public "canContinueToUse"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HarbingerDeathBeamAttackGoal$Type = ($HarbingerDeathBeamAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HarbingerDeathBeamAttackGoal_ = $HarbingerDeathBeamAttackGoal$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$PowerableMob, $PowerableMob$Type} from "packages/net/minecraft/world/entity/$PowerableMob"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ItemWrapper, $ItemWrapper$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$ItemWrapper"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$GolemMode, $GolemMode$Type} from "packages/dev/xkmc/modulargolems/content/entity/mode/$GolemMode"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$PathRecordCard$Pos, $PathRecordCard$Pos$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$PathRecordCard$Pos"
import {$Team, $Team$Type} from "packages/net/minecraft/world/scores/$Team"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$OwnableEntity, $OwnableEntity$Type} from "packages/net/minecraft/world/entity/$OwnableEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$AbstractGolem, $AbstractGolem$Type} from "packages/net/minecraft/world/entity/animal/$AbstractGolem"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$NeutralMob, $NeutralMob$Type} from "packages/net/minecraft/world/entity/$NeutralMob"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$GolemMaterial, $GolemMaterial$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemMaterial"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AbstractGolemEntity<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>> extends $AbstractGolem implements $IEntityAdditionalSpawnData, $NeutralMob, $OwnableEntity, $PowerableMob {
 "inventoryTick": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>


public "getModifiers"(): $HashMap<($GolemModifier), (integer)>
public "getOwner"(): $Player
public "getConfigEntry"(arg0: $Component$Type): $GolemConfigEntry
public "getPatrolList"(): $List<($PathRecordCard$Pos)>
public "resetTarget"(arg0: $LivingEntity$Type): void
public "getOwnerUUID"(): $UUID
public "getEntityType"(): $EntityType<(T)>
public "isPushedByFluid"(): boolean
public "canAttackType"(arg0: $EntityType$Type<(any)>): boolean
public "fireImmune"(): boolean
public "getScale"(): float
public "toItem"(): $ItemStack
public "hasFlag"(arg0: $GolemFlags$Type): boolean
public "setMode"(arg0: integer, arg1: $BlockPos$Type): void
public "getMode"(): $GolemMode
public "tick"(): void
public "handleEntityEvent"(arg0: byte): void
public "aiStep"(): void
public "die"(arg0: $DamageSource$Type): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "canBeSeenAsEnemy"(): boolean
public "getTeam"(): $Team
public "isOnSameTeam"(arg0: $Entity$Type): boolean
public "travel"(arg0: $Vec3$Type): void
public "updateSwimming"(): void
public "killedEntity"(arg0: $ServerLevel$Type, arg1: $LivingEntity$Type): boolean
public "canAttack"(arg0: $LivingEntity$Type): boolean
public "isInvulnerable"(): boolean
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "canFreeze"(): boolean
public "hasLineOfSight"(arg0: $Entity$Type): boolean
public "isPushable"(): boolean
public "canChangeDimensions"(): boolean
public "setPersistentAngerTarget"(arg0: $UUID$Type): void
public "startPersistentAngerTimer"(): void
public "setRemainingPersistentAngerTime"(arg0: integer): void
public "getRemainingPersistentAngerTime"(): integer
public "getPersistentAngerTarget"(): $UUID
public "canModify"(arg0: $Player$Type): boolean
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "getUpgrades"(): $ArrayList<($Item)>
public "getPerceivedTargetDistanceSquareForMeleeAttack"(arg0: $LivingEntity$Type): double
public "getThis"(): T
public "setConfigCard"(arg0: $UUID$Type, arg1: integer): void
public "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "updateAttributes"(arg0: $ArrayList$Type<($GolemMaterial$Type)>, arg1: $ArrayList$Type<($UpgradeItem$Type)>, arg2: $UUID$Type): void
public "getGuardPos"(): $BlockPos
public "isInSittingPose"(): boolean
public "getTargetPos"(): $Vec3
public "setPatrolStage"(arg0: integer): void
public "getFollowTarget"(): $LivingEntity
public "getPatrolStage"(): integer
public "getCaptain"(): $LivingEntity
public "advancePatrolStage"(): void
public "initMode"(arg0: $Player$Type): boolean
public "getWrapperOfHand"(arg0: $EquipmentSlot$Type): $ItemWrapper
public "checkRide"(arg0: $LivingEntity$Type): void
public "getMaterials"(): $ArrayList<($GolemMaterial)>
public "isPowered"(): boolean
public "canSwim"(): boolean
public "onCreate"(arg0: $ArrayList$Type<($GolemMaterial$Type)>, arg1: $ArrayList$Type<($UpgradeItem$Type)>, arg2: $UUID$Type): void
public "setTarget"(arg0: $LivingEntity$Type): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "playerDied"(arg0: $Player$Type): void
public "addPersistentAngerSaveData"(arg0: $CompoundTag$Type): void
public "readPersistentAngerSaveData"(arg0: $Level$Type, arg1: $CompoundTag$Type): void
public "isAngryAt"(arg0: $LivingEntity$Type): boolean
public "updatePersistentAnger"(arg0: $ServerLevel$Type, arg1: boolean): void
public "forgetCurrentTargetAndRefreshUniversalAnger"(): void
public "isAngryAtAllPlayers"(arg0: $Level$Type): boolean
public "stopBeingAngry"(): void
public "isAngry"(): boolean
public "getTarget"(): $LivingEntity
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "modifiers"(): $HashMap<($GolemModifier), (integer)>
get "owner"(): $Player
get "patrolList"(): $List<($PathRecordCard$Pos)>
get "ownerUUID"(): $UUID
get "entityType"(): $EntityType<(T)>
get "pushedByFluid"(): boolean
get "scale"(): float
get "mode"(): $GolemMode
get "team"(): $Team
get "invulnerable"(): boolean
get "pushable"(): boolean
set "persistentAngerTarget"(value: $UUID$Type)
set "remainingPersistentAngerTime"(value: integer)
get "remainingPersistentAngerTime"(): integer
get "persistentAngerTarget"(): $UUID
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "upgrades"(): $ArrayList<($Item)>
get "this"(): T
get "guardPos"(): $BlockPos
get "inSittingPose"(): boolean
get "targetPos"(): $Vec3
set "patrolStage"(value: integer)
get "followTarget"(): $LivingEntity
get "patrolStage"(): integer
get "captain"(): $LivingEntity
get "materials"(): $ArrayList<($GolemMaterial)>
get "powered"(): boolean
set "target"(value: $LivingEntity$Type)
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "angry"(): boolean
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractGolemEntity$Type<T, P> = ($AbstractGolemEntity<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractGolemEntity_<T, P> = $AbstractGolemEntity$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$BlackAxe" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ThrowingAxeItem, $ThrowingAxeItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$ThrowingAxeItem"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $BlackAxe extends $ThrowingAxeItem implements $LegendaryWeapon {
static readonly "RANGE": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public static "thunderHit"(arg0: $BaseThrownWeaponEntity$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackAxe$Type = ($BlackAxe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackAxe_ = $BlackAxe$Type;
}}
declare module "packages/dev/xkmc/l2backpack/network/$CreativeSetCarryToClient" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CreativeSetCarryToClient extends $SerialPacketBase {
 "item": $Item
 "count": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $ItemStack$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreativeSetCarryToClient$Type = ($CreativeSetCarryToClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreativeSetCarryToClient_ = $CreativeSetCarryToClient$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$AdvGen" {
import {$RegistrateAdvancementProvider, $RegistrateAdvancementProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateAdvancementProvider"

export class $AdvGen {

constructor()

public static "genAdvancements"(arg0: $RegistrateAdvancementProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvGen$Type = ($AdvGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvGen_ = $AdvGen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$LWConfig$Client" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LWConfig$Client {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWConfig$Client$Type = ($LWConfig$Client);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWConfig$Client_ = $LWConfig$Client$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemEquipTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$GolemEquipTrigger, $GolemEquipTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemEquipTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $GolemEquipTrigger$Ins extends $BaseCriterionInstance<($GolemEquipTrigger$Ins), ($GolemEquipTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemEquipTrigger$Ins$Type = ($GolemEquipTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemEquipTrigger$Ins_ = $GolemEquipTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$PredSlot" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $PredSlot extends $Slot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer, arg4: $Predicate$Type<($ItemStack$Type)>)

public "clearSlot"(arg0: $Player$Type): void
public "updateEject"(arg0: $Player$Type): void
public "setInputLockPred"(arg0: $BooleanSupplier$Type): $PredSlot
public "clearDirty"(arg0: $Runnable$Type): boolean
public "clearDirty"(): boolean
public "isInputLocked"(): boolean
public "setLockInput"(arg0: boolean): void
public "setLockOutput"(arg0: boolean): void
public "isOutputLocked"(): boolean
public "setMax"(arg0: integer): $PredSlot
public "mayPlace"(arg0: $ItemStack$Type): boolean
public "mayPickup"(arg0: $Player$Type): boolean
public "setPickup"(arg0: $BooleanSupplier$Type): $PredSlot
public "setChanged"(): void
public "getMaxStackSize"(): integer
set "inputLockPred"(value: $BooleanSupplier$Type)
get "inputLocked"(): boolean
set "lockInput"(value: boolean)
set "lockOutput"(value: boolean)
get "outputLocked"(): boolean
set "max"(value: integer)
set "pickup"(value: $BooleanSupplier$Type)
get "maxStackSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PredSlot$Type = ($PredSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PredSlot_ = $PredSlot$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/loot/$AddLootTableModifier" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$LootModifier, $LootModifier$Type} from "packages/net/minecraftforge/common/loot/$LootModifier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $AddLootTableModifier extends $LootModifier {
static readonly "CODEC": $Codec<($AddLootTableModifier)>

constructor(arg0: $ResourceLocation$Type, ...arg1: ($LootItemCondition$Type)[])

public "codec"(): $Codec<(any)>
public static "getJson"<U>(arg0: $Dynamic$Type<(any)>): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AddLootTableModifier$Type = ($AddLootTableModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AddLootTableModifier_ = $AddLootTableModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/$CreateDispatch" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$ModDispatch, $ModDispatch$Type} from "packages/dev/xkmc/modulargolems/compat/materials/common/$ModDispatch"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $CreateDispatch extends $ModDispatch {
static readonly "MODID": string

constructor()

public "lateRegister"(): void
public "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public "genLang"(arg0: $RegistrateLangProvider$Type): void
public "getDataGen"(arg0: $DataGenerator$Type): $ConfigDataProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateDispatch$Type = ($CreateDispatch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateDispatch_ = $CreateDispatch$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/augment/$AugmentMenuScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IFilterScreen, $IFilterScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$IFilterScreen"
import {$AugmentMenu, $AugmentMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/augment/$AugmentMenu"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $AugmentMenuScreen extends $BaseContainerScreen<($AugmentMenu)> implements $IFilterScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $AugmentMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "screenHeight"(): integer
public "screenWidth"(): integer
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "asScreen"(): $Screen
public "onSwitch"(): void
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AugmentMenuScreen$Type = ($AugmentMenuScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AugmentMenuScreen_ = $AugmentMenuScreen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumaniodGolemPartType" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $HumaniodGolemPartType extends $Enum<($HumaniodGolemPartType)> implements $IGolemPart<($HumaniodGolemPartType)> {
static readonly "BODY": $HumaniodGolemPartType
static readonly "ARMS": $HumaniodGolemPartType
static readonly "LEGS": $HumaniodGolemPartType


public static "values"(): ($HumaniodGolemPartType)[]
public static "valueOf"(arg0: string): $HumaniodGolemPartType
public "getDesc"(arg0: $MutableComponent$Type): $MutableComponent
public "setupItemRender"(arg0: $PoseStack$Type, arg1: $ItemDisplayContext$Type, arg2: $HumaniodGolemPartType$Type): void
public "toItem"(): $GolemPart<(any), ($HumaniodGolemPartType)>
public "ordinal"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HumaniodGolemPartType$Type = (("legs") | ("arms") | ("body")) | ($HumaniodGolemPartType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HumaniodGolemPartType_ = $HumaniodGolemPartType$Type;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$SideBar" {
import {$SideBar$Signature, $SideBar$Signature$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar$Signature"

export class $SideBar<S extends $SideBar$Signature<(S)>> {

constructor(arg0: float, arg1: float)

public "getSignature"(): S
public "isRendering"(): boolean
public "isScreenOn"(): boolean
get "signature"(): S
get "rendering"(): boolean
get "screenOn"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SideBar$Type<S> = ($SideBar<(S)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SideBar_<S> = $SideBar$Type<(S)>;
}}
declare module "packages/dev/xkmc/l2complements/network/$EmptyRightClickToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"

export class $EmptyRightClickToServer extends $SerialPacketBase {
 "hand": boolean
 "right": boolean

constructor(arg0: boolean, arg1: boolean)
/**
 * 
 * @deprecated
 */
constructor()

public "handle"(arg0: $NetworkEvent$Context$Type): void
public "toServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmptyRightClickToServer$Type = ($EmptyRightClickToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmptyRightClickToServer_ = $EmptyRightClickToServer$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/insert/$InsertOnlyItem" {
import {$CapInsertItem, $CapInsertItem$Type} from "packages/dev/xkmc/l2backpack/content/insert/$CapInsertItem"
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export interface $InsertOnlyItem extends $CapInsertItem {

 "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
 "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
 "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
 "mayClientTake"(): boolean
 "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
 "isValidContent"(arg0: $ItemStack$Type): boolean
 "getInvCap"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $IItemHandler
 "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
}

export namespace $InsertOnlyItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InsertOnlyItem$Type = ($InsertOnlyItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InsertOnlyItem_ = $InsertOnlyItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/effect/$AntiBuildEffect" {
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $AntiBuildEffect extends $InherentEffect implements $ForceEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AntiBuildEffect$Type = ($AntiBuildEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AntiBuildEffect_ = $AntiBuildEffect$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/misc/$RandomArtifactSetItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$RankedItem, $RankedItem$Type} from "packages/dev/xkmc/l2artifacts/content/core/$RankedItem"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RandomArtifactSetItem extends $RankedItem {
readonly "rank": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "setList"(arg0: integer, arg1: $Collection$Type<($SetEntry$Type<(any)>)>): $ItemStack
public static "getRandomArtifact"(arg0: $ItemStack$Type, arg1: integer, arg2: $RandomSource$Type): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomArtifactSetItem$Type = ($RandomArtifactSetItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomArtifactSetItem_ = $RandomArtifactSetItem$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$Rect" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $MenuLayoutConfig$Rect {
static readonly "ZERO": $MenuLayoutConfig$Rect
 "x": integer
 "y": integer
 "w": integer
 "h": integer
 "rx": integer
 "ry": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuLayoutConfig$Rect$Type = ($MenuLayoutConfig$Rect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuLayoutConfig$Rect_ = $MenuLayoutConfig$Rect$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ArmorConfig" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArmorFactory, $ArmorFactory$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ArmorFactory"

export class $ArmorConfig extends $Record {

constructor(sup: $ArmorFactory$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "sup"(): $ArmorFactory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorConfig$Type = ($ArmorConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorConfig_ = $ArmorConfig$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$LangData$Info" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $LangData$Info extends $Enum<($LangData$Info)> {
static readonly "SHIFT": $LangData$Info
static readonly "ALT_CONTENT": $LangData$Info
static readonly "ALT_INSERT": $LangData$Info
static readonly "PATCHOULI": $LangData$Info
static readonly "COLLECT_BAG": $LangData$Info
static readonly "COLLECT_DRAWER": $LangData$Info
static readonly "EXTRACT_BAG": $LangData$Info
static readonly "EXTRACT_DRAWER": $LangData$Info
static readonly "LOAD": $LangData$Info
static readonly "PLACE": $LangData$Info
static readonly "KEYBIND": $LangData$Info
static readonly "QUICK_INV_ACCESS": $LangData$Info
static readonly "QUICK_ANY_ACCESS": $LangData$Info
static readonly "ARROW_INFO": $LangData$Info
static readonly "DRAWER_USE": $LangData$Info
static readonly "ENDER_DRAWER_USE": $LangData$Info
static readonly "DIMENSIONAL": $LangData$Info
static readonly "ENDER_DRAWER": $LangData$Info
static readonly "UPGRADE": $LangData$Info
static readonly "EXIT": $LangData$Info
static readonly "SCABBARD_INFO": $LangData$Info
static readonly "ARMORBAG_INFO": $LangData$Info
static readonly "SUIT_BAG_INFO": $LangData$Info
static readonly "MULTI_SWITCH_INFO": $LangData$Info
static readonly "ENDER_SWITCH_INFO": $LangData$Info
static readonly "INHERIT": $LangData$Info
static readonly "PICKUP": $LangData$Info
static readonly "PICKUP_TWEAKER": $LangData$Info
static readonly "DESTROY_TWEAKER": $LangData$Info
static readonly "TWEAKER_BACK": $LangData$Info
static readonly "TWEAKER_BLOCK": $LangData$Info


public "get"(): $MutableComponent
public static "values"(): ($LangData$Info)[]
public static "valueOf"(arg0: string): $LangData$Info
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LangData$Info$Type = (("quick_any_access") | ("dimensional") | ("scabbard_info") | ("shift") | ("arrow_info") | ("collect_bag") | ("tweaker_block") | ("multi_switch_info") | ("alt_content") | ("quick_inv_access") | ("ender_drawer") | ("suit_bag_info") | ("alt_insert") | ("load") | ("armorbag_info") | ("pickup_tweaker") | ("tweaker_back") | ("patchouli") | ("place") | ("destroy_tweaker") | ("ender_drawer_use") | ("extract_bag") | ("upgrade") | ("collect_drawer") | ("pickup") | ("extract_drawer") | ("exit") | ("ender_switch_info") | ("keybind") | ("drawer_use") | ("inherit")) | ($LangData$Info);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LangData$Info_ = $LangData$Info$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/compat/$PatchouliLang" {
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $PatchouliLang extends $Enum<($PatchouliLang)> {
static readonly "TITLE": $PatchouliLang
static readonly "LANDING": $PatchouliLang


public static "values"(): ($PatchouliLang)[]
public static "valueOf"(arg0: string): $PatchouliLang
public static "genLang"(arg0: $RegistrateLangProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatchouliLang$Type = (("landing") | ("title")) | ($PatchouliLang);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatchouliLang_ = $PatchouliLang$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$SpecialRenderItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$TooltipItem, $TooltipItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$TooltipItem"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SpecialRenderItem extends $TooltipItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MutableComponent$Type)>)

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialRenderItem$Type = ($SpecialRenderItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialRenderItem_ = $SpecialRenderItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/highlevel/$ArenaTrait" {
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$AuraEffectTrait, $AuraEffectTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$AuraEffectTrait"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $ArenaTrait extends $AuraEffectTrait {

constructor()

public "onDamaged"(arg0: integer, arg1: $LivingEntity$Type, arg2: $AttackCache$Type): void
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArenaTrait$Type = ($ArenaTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArenaTrait_ = $ArenaTrait$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/registrate/$GolemItems" {
import {$MetalGolemArmorItem, $MetalGolemArmorItem$Type} from "packages/dev/xkmc/modulargolems/content/item/equipments/$MetalGolemArmorItem"
import {$MetalGolemPartType, $MetalGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemPartType"
import {$RiderWandItem, $RiderWandItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$RiderWandItem"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$SimpleUpgradeItem, $SimpleUpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$SimpleUpgradeItem"
import {$EntityTypeFilterCard, $EntityTypeFilterCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$EntityTypeFilterCard"
import {$UuidFilterCard, $UuidFilterCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$UuidFilterCard"
import {$MetalGolemEntity, $MetalGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemEntity"
import {$MetalGolemWeaponItem, $MetalGolemWeaponItem$Type} from "packages/dev/xkmc/modulargolems/content/item/equipments/$MetalGolemWeaponItem"
import {$DogGolemPartType, $DogGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemPartType"
import {$MetalGolemBeaconItem, $MetalGolemBeaconItem$Type} from "packages/dev/xkmc/modulargolems/content/item/equipments/$MetalGolemBeaconItem"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$NameFilterCard, $NameFilterCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$NameFilterCard"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$HumaniodGolemPartType, $HumaniodGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumaniodGolemPartType"
import {$DispenseWand, $DispenseWand$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$DispenseWand"
import {$ConfigCard, $ConfigCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$ConfigCard"
import {$DogGolemEntity, $DogGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemEntity"
import {$ItemBuilder, $ItemBuilder$Type} from "packages/com/tterrag/registrate/builders/$ItemBuilder"
import {$SquadWandItem, $SquadWandItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$SquadWandItem"
import {$DefaultFilterCard, $DefaultFilterCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$DefaultFilterCard"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$GolemHolder, $GolemHolder$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemHolder"
import {$CommandWandItem, $CommandWandItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$CommandWandItem"
import {$PathRecordCard, $PathRecordCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$PathRecordCard"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$RetrievalWandItem, $RetrievalWandItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$RetrievalWandItem"

export class $GolemItems {
static readonly "TAB": $RegistryEntry<($CreativeModeTab)>
static readonly "GOLEM_TEMPLATE": $ItemEntry<($Item)>
static readonly "EMPTY_UPGRADE": $ItemEntry<($Item)>
static readonly "GOLEM_BODY": $ItemEntry<($GolemPart<($MetalGolemEntity), ($MetalGolemPartType)>)>
static readonly "GOLEM_ARM": $ItemEntry<($GolemPart<($MetalGolemEntity), ($MetalGolemPartType)>)>
static readonly "GOLEM_LEGS": $ItemEntry<($GolemPart<($MetalGolemEntity), ($MetalGolemPartType)>)>
static readonly "HOLDER_GOLEM": $ItemEntry<($GolemHolder<($MetalGolemEntity), ($MetalGolemPartType)>)>
static readonly "HUMANOID_BODY": $ItemEntry<($GolemPart<($HumanoidGolemEntity), ($HumaniodGolemPartType)>)>
static readonly "HUMANOID_ARMS": $ItemEntry<($GolemPart<($HumanoidGolemEntity), ($HumaniodGolemPartType)>)>
static readonly "HUMANOID_LEGS": $ItemEntry<($GolemPart<($HumanoidGolemEntity), ($HumaniodGolemPartType)>)>
static readonly "HOLDER_HUMANOID": $ItemEntry<($GolemHolder<($HumanoidGolemEntity), ($HumaniodGolemPartType)>)>
static readonly "DOG_BODY": $ItemEntry<($GolemPart<($DogGolemEntity), ($DogGolemPartType)>)>
static readonly "DOG_LEGS": $ItemEntry<($GolemPart<($DogGolemEntity), ($DogGolemPartType)>)>
static readonly "HOLDER_DOG": $ItemEntry<($GolemHolder<($DogGolemEntity), ($DogGolemPartType)>)>
static readonly "FIRE_IMMUNE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "THUNDER_IMMUNE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "RECYCLE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "DIAMOND": $ItemEntry<($SimpleUpgradeItem)>
static readonly "NETHERITE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "QUARTZ": $ItemEntry<($SimpleUpgradeItem)>
static readonly "GOLD": $ItemEntry<($SimpleUpgradeItem)>
static readonly "ENCHANTED_GOLD": $ItemEntry<($SimpleUpgradeItem)>
static readonly "FLOAT": $ItemEntry<($SimpleUpgradeItem)>
static readonly "SPONGE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "SWIM": $ItemEntry<($SimpleUpgradeItem)>
static readonly "PLAYER_IMMUNE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "ENDER_SIGHT": $ItemEntry<($SimpleUpgradeItem)>
static readonly "BELL": $ItemEntry<($SimpleUpgradeItem)>
static readonly "SPEED": $ItemEntry<($SimpleUpgradeItem)>
static readonly "SLOW": $ItemEntry<($SimpleUpgradeItem)>
static readonly "WEAK": $ItemEntry<($SimpleUpgradeItem)>
static readonly "WITHER": $ItemEntry<($SimpleUpgradeItem)>
static readonly "EMERALD": $ItemEntry<($SimpleUpgradeItem)>
static readonly "PICKUP": $ItemEntry<($SimpleUpgradeItem)>
static readonly "PICKUP_MENDING": $ItemEntry<($SimpleUpgradeItem)>
static readonly "PICKUP_NO_DESTROY": $ItemEntry<($SimpleUpgradeItem)>
static readonly "TALENTED": $ItemEntry<($SimpleUpgradeItem)>
static readonly "CAULDRON": $ItemEntry<($SimpleUpgradeItem)>
static readonly "MOUNT_UPGRADE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "SIZE_UPGRADE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "RETRIEVAL_WAND": $ItemEntry<($RetrievalWandItem)>
static readonly "OMNI_RETRIVAL": $ItemEntry<($RetrievalWandItem)>
static readonly "COMMAND_WAND": $ItemEntry<($CommandWandItem)>
static readonly "OMNI_COMMAND": $ItemEntry<($CommandWandItem)>
static readonly "DISPENSE_WAND": $ItemEntry<($DispenseWand)>
static readonly "OMNI_DISPENSE": $ItemEntry<($DispenseWand)>
static readonly "RIDER_WAND": $ItemEntry<($RiderWandItem)>
static readonly "OMNI_RIDER": $ItemEntry<($RiderWandItem)>
static readonly "SQUAD_WAND": $ItemEntry<($SquadWandItem)>
static readonly "OMNI_SQUAD": $ItemEntry<($SquadWandItem)>
static readonly "GOLEMGUARD_HELMET": $ItemEntry<($MetalGolemArmorItem)>
static readonly "WINDSPIRIT_HELMET": $ItemEntry<($MetalGolemArmorItem)>
static readonly "BARBARICFLAMEVANGUARD_HELMET": $ItemEntry<($MetalGolemArmorItem)>
static readonly "GOLEMGUARD_CHESTPLATE": $ItemEntry<($MetalGolemArmorItem)>
static readonly "WINDSPIRIT_CHESTPLATE": $ItemEntry<($MetalGolemArmorItem)>
static readonly "BARBARICFLAMEVANGUARD_CHESTPLATE": $ItemEntry<($MetalGolemArmorItem)>
static readonly "GOLEMGUARD_SHINGUARD": $ItemEntry<($MetalGolemArmorItem)>
static readonly "WINDSPIRIT_SHINGUARD": $ItemEntry<($MetalGolemArmorItem)>
static readonly "BARBARICFLAMEVANGUARD_SHINGUARD": $ItemEntry<($MetalGolemArmorItem)>
static readonly "METALGOLEM_WEAPON": (($ItemEntry<($MetalGolemWeaponItem)>)[])[]
static readonly "METALGOLEM_BEACONS": ($ItemEntry<($MetalGolemBeaconItem)>)[]
static readonly "CARD": ($ItemEntry<($ConfigCard)>)[]
static readonly "CARD_PATH": $ItemEntry<($PathRecordCard)>
static readonly "CARD_NAME": $ItemEntry<($NameFilterCard)>
static readonly "CARD_TYPE": $ItemEntry<($EntityTypeFilterCard)>
static readonly "CARD_UUID": $ItemEntry<($UuidFilterCard)>
static readonly "CARD_DEF": $ItemEntry<($DefaultFilterCard)>

constructor()

public static "register"(): void
public static "regModUpgrade"(arg0: string, arg1: $Supplier$Type<($RegistryEntry$Type<(any)>)>, arg2: integer, arg3: boolean, arg4: string): $ItemBuilder<($SimpleUpgradeItem), ($L2Registrate)>
public static "regModUpgrade"(arg0: string, arg1: $Supplier$Type<($RegistryEntry$Type<(any)>)>, arg2: string): $ItemBuilder<($SimpleUpgradeItem), ($L2Registrate)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemItems$Type = ($GolemItems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemItems_ = $GolemItems$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/capability/$MobShieldGoal" {
import {$IShieldData, $IShieldData$Type} from "packages/dev/xkmc/l2weaponry/content/capability/$IShieldData"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BaseShieldItem, $BaseShieldItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$BaseShieldItem"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $MobShieldGoal extends $Goal implements $IShieldData {


public "onShieldDamage"(arg0: $ItemStack$Type, arg1: $BaseShieldItem$Type, arg2: double): void
public static "getShieldGoal"(arg0: $Mob$Type): $MobShieldGoal
public "canReflect"(): boolean
public "setShieldDefense"(arg0: double): void
public "getReflectTimer"(): integer
public "getShieldDefense"(): double
public "popRetain"(): double
public "onBlock"(arg0: $ItemStack$Type, arg1: $BaseShieldItem$Type, arg2: boolean, arg3: $LivingEntity$Type): boolean
public "canUse"(): boolean
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
set "shieldDefense"(value: double)
get "reflectTimer"(): integer
get "shieldDefense"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobShieldGoal$Type = ($MobShieldGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobShieldGoal_ = $MobShieldGoal$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/weapon/$VoidTouchEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $VoidTouchEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "initAttack"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "initDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "getColor"(): $ChatFormatting
public "postHurt"(arg0: $AttackCache$Type, arg1: $LivingHurtEvent$Type, arg2: $ItemStack$Type): void
public "postAttack"(arg0: $AttackCache$Type, arg1: $LivingAttackEvent$Type, arg2: $ItemStack$Type): void
public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "color"(): $ChatFormatting
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VoidTouchEnchantment$Type = ($VoidTouchEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VoidTouchEnchantment_ = $VoidTouchEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ToolFactory" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IMatToolType, $IMatToolType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatToolType"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ITool, $ITool$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ITool"

export interface $ToolFactory {

 "get"(arg0: $IMatToolType$Type, arg1: $ITool$Type, arg2: $Item$Properties$Type): $Item

(arg0: $IMatToolType$Type, arg1: $ITool$Type, arg2: $Item$Properties$Type): $Item
}

export namespace $ToolFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolFactory$Type = ($ToolFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolFactory_ = $ToolFactory$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$HumaniodGolemPartType, $HumaniodGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumaniodGolemPartType"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$IGolemModel, $IGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$IGolemModel"
import {$IHeadedModel, $IHeadedModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$IHeadedModel"
import {$PlayerModel, $PlayerModel$Type} from "packages/net/minecraft/client/model/$PlayerModel"

export class $HumanoidGolemModel extends $PlayerModel<($HumanoidGolemEntity)> implements $IGolemModel<($HumanoidGolemEntity), ($HumaniodGolemPartType), ($HumanoidGolemModel)>, $IHeadedModel {
readonly "leftSleeve": $ModelPart
readonly "rightSleeve": $ModelPart
readonly "leftPants": $ModelPart
readonly "rightPants": $ModelPart
readonly "jacket": $ModelPart
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $EntityModelSet$Type)
constructor(arg0: $ModelPart$Type, arg1: boolean)

public "setupAnim"(arg0: $HumanoidGolemEntity$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public "translateToHead"(arg0: $PoseStack$Type): void
public "prepareMobModel"(arg0: $HumanoidGolemEntity$Type, arg1: float, arg2: float, arg3: float): void
public "getTextureLocationInternal"(arg0: $ResourceLocation$Type): $ResourceLocation
public "renderToBufferInternal"(arg0: $HumaniodGolemPartType$Type, arg1: $PoseStack$Type, arg2: $VertexConsumer$Type, arg3: integer, arg4: integer, arg5: float, arg6: float, arg7: float, arg8: float): void
public "getThis"(): $HumanoidGolemModel
public "getHead"(): $ModelPart
get "this"(): $HumanoidGolemModel
get "head"(): $ModelPart
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HumanoidGolemModel$Type = ($HumanoidGolemModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HumanoidGolemModel_ = $HumanoidGolemModel$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$AttributeFilter" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$LangData, $LangData$Type} from "packages/dev/xkmc/l2artifacts/init/data/$LangData"
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$GenericItemStack, $GenericItemStack$Type} from "packages/dev/xkmc/l2library/util/code/$GenericItemStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IArtifactFilter, $IArtifactFilter$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFilter"
import {$ArtifactFilter, $ArtifactFilter$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactFilter"
import {$StatTypeConfig, $StatTypeConfig$Type} from "packages/dev/xkmc/l2artifacts/content/config/$StatTypeConfig"

export class $AttributeFilter extends $ArtifactFilter<($StatTypeConfig)> {
readonly "allEntries": $List<(T)>

constructor(arg0: $IArtifactFilter$Type, arg1: $LangData$Type, arg2: $Collection$Type<($StatTypeConfig$Type)>)

public "getComparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
get "comparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeFilter$Type = ($AttributeFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeFilter_ = $AttributeFilter$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/goals/$GolemFloatGoal" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$FloatGoal, $FloatGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$FloatGoal"

export class $GolemFloatGoal extends $FloatGoal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>)

public "canUse"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemFloatGoal$Type = ($GolemFloatGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemFloatGoal_ = $GolemFloatGoal$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/registrate/$LWEntities" {
import {$JavelinEntity, $JavelinEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$JavelinEntity"
import {$ThrowingAxeEntity, $ThrowingAxeEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$ThrowingAxeEntity"
import {$EntityAttributeCreationEvent, $EntityAttributeCreationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeCreationEvent"
import {$EntityEntry, $EntityEntry$Type} from "packages/com/tterrag/registrate/util/entry/$EntityEntry"

export class $LWEntities {
static readonly "ET_AXE": $EntityEntry<($ThrowingAxeEntity)>
static readonly "TE_JAVELIN": $EntityEntry<($JavelinEntity)>

constructor()

public static "register"(): void
public static "registerEntityAttributes"(arg0: $EntityAttributeCreationEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWEntities$Type = ($LWEntities);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWEntities_ = $LWEntities$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/weapon/$SoulFlameBladeEnchantment" {
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$AbstractBladeEnchantment, $AbstractBladeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/weapon/$AbstractBladeEnchantment"

export class $SoulFlameBladeEnchantment extends $AbstractBladeEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulFlameBladeEnchantment$Type = ($SoulFlameBladeEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulFlameBladeEnchantment_ = $SoulFlameBladeEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/registrate/$BackpackItems" {
import {$DrawerItem, $DrawerItem$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$DrawerItem"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$PickupTweakerTool, $PickupTweakerTool$Type} from "packages/dev/xkmc/l2backpack/content/tool/$PickupTweakerTool"
import {$EnderBackpackItem, $EnderBackpackItem$Type} from "packages/dev/xkmc/l2backpack/content/remote/player/$EnderBackpackItem"
import {$RegistrateItemModelProvider, $RegistrateItemModelProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateItemModelProvider"
import {$EnderDrawerItem, $EnderDrawerItem$Type} from "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerItem"
import {$DestroyTweakerTool, $DestroyTweakerTool$Type} from "packages/dev/xkmc/l2backpack/content/tool/$DestroyTweakerTool"
import {$DataGenContext, $DataGenContext$Type} from "packages/com/tterrag/registrate/providers/$DataGenContext"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EquipmentBag, $EquipmentBag$Type} from "packages/dev/xkmc/l2backpack/content/bag/$EquipmentBag"
import {$MultiSwitch, $MultiSwitch$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/merged/$MultiSwitch"
import {$WorldChestItem, $WorldChestItem$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestItem"
import {$BackpackItem, $BackpackItem$Type} from "packages/dev/xkmc/l2backpack/content/backpack/$BackpackItem"
import {$ArmorSetSwap, $ArmorSetSwap$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/armorswap/$ArmorSetSwap"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$BookBag, $BookBag$Type} from "packages/dev/xkmc/l2backpack/content/bag/$BookBag"
import {$ArmorSwap, $ArmorSwap$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/armorswap/$ArmorSwap"
import {$EnderSwitch, $EnderSwitch$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/merged/$EnderSwitch"
import {$Scabbard, $Scabbard$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/scabbard/$Scabbard"
import {$Quiver, $Quiver$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/quiver/$Quiver"

export class $BackpackItems {
static readonly "TAB": $RegistryEntry<($CreativeModeTab)>
static readonly "BACKPACKS": ($ItemEntry<($BackpackItem)>)[]
static readonly "DIMENSIONAL_STORAGE": ($ItemEntry<($WorldChestItem)>)[]
static readonly "ENDER_BACKPACK": $ItemEntry<($EnderBackpackItem)>
static readonly "ENDER_POCKET": $ItemEntry<($Item)>
static readonly "PICKUP_TWEAKER": $ItemEntry<($PickupTweakerTool)>
static readonly "DESTROY_TWEAKER": $ItemEntry<($DestroyTweakerTool)>
static readonly "ARMOR_BAG": $ItemEntry<($EquipmentBag)>
static readonly "BOOK_BAG": $ItemEntry<($BookBag)>
static readonly "QUIVER": $ItemEntry<($Quiver)>
static readonly "SCABBARD": $ItemEntry<($Scabbard)>
static readonly "ARMOR_SWAP": $ItemEntry<($ArmorSwap)>
static readonly "SUIT_SWAP": $ItemEntry<($ArmorSetSwap)>
static readonly "MULTI_SWITCH": $ItemEntry<($MultiSwitch)>
static readonly "ENDER_SWITCH": $ItemEntry<($EnderSwitch)>
static readonly "DRAWER": $ItemEntry<($DrawerItem)>
static readonly "ENDER_DRAWER": $ItemEntry<($EnderDrawerItem)>

constructor()

public static "register"(): void
public static "createArrowBagModel"<T extends $Quiver>(arg0: $DataGenContext$Type<($Item$Type), (T)>, arg1: $RegistrateItemModelProvider$Type): void
public static "simpleItem"(arg0: string): $ItemEntry<($Item)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackItems$Type = ($BackpackItems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackItems_ = $BackpackItems$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/advancements/$RewardBuilder" {
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LootTable$Builder, $LootTable$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable$Builder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$JsonArray, $JsonArray$Type} from "packages/com/google/gson/$JsonArray"
import {$IAdvBuilder, $IAdvBuilder$Type} from "packages/dev/xkmc/l2library/serial/advancements/$IAdvBuilder"

export class $RewardBuilder extends $Record implements $IAdvBuilder {

constructor(reg: $L2Registrate$Type, exp: integer, loot: $ResourceLocation$Type, sup: $Supplier$Type<($LootTable$Builder$Type)>)

public "onBuild"(): void
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "exp"(): integer
public "reg"(): $L2Registrate
public "sup"(): $Supplier<($LootTable$Builder)>
public "modify"(arg0: string, arg1: $Advancement$Builder$Type): void
public "loot"(): $ResourceLocation
public "addConditions"(arg0: $JsonArray$Type): void
public "modifyJson"(arg0: $JsonObject$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardBuilder$Type = ($RewardBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardBuilder_ = $RewardBuilder$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconBlockEntity" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TickableBlockEntity, $TickableBlockEntity$Type} from "packages/dev/xkmc/l2modularblock/tile_api/$TickableBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$NameSetable, $NameSetable$Type} from "packages/dev/xkmc/l2modularblock/tile_api/$NameSetable"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BaseBlockEntity, $BaseBlockEntity$Type} from "packages/dev/xkmc/l2library/base/tile/$BaseBlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$ContainerData, $ContainerData$Type} from "packages/net/minecraft/world/inventory/$ContainerData"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$HostilityBeaconBlockEntity$Section, $HostilityBeaconBlockEntity$Section$Type} from "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconBlockEntity$Section"

export class $HostilityBeaconBlockEntity extends $BaseBlockEntity implements $TickableBlockEntity, $MenuProvider, $NameSetable, $ContainerData {
static readonly "BEACON_EFFECTS": (($MobEffect)[])[]
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "tick"(): void
public "getName"(): $Component
public "getDisplayName"(): $Component
public "getBeamSections"(): $List<($HostilityBeaconBlockEntity$Section)>
public "set"(arg0: integer, arg1: integer): void
public "get"(arg0: integer): integer
public "setCustomName"(arg0: $Component$Type): void
public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
public "setLevel"(arg0: $Level$Type): void
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "getCustomName"(): $Component
public "getRenderBoundingBox"(): $AABB
public static "playSound"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $SoundEvent$Type): void
public "getCount"(): integer
public "setRemoved"(): void
public "hasCustomName"(): boolean
get "name"(): $Component
get "displayName"(): $Component
get "beamSections"(): $List<($HostilityBeaconBlockEntity$Section)>
set "customName"(value: $Component$Type)
set "level"(value: $Level$Type)
get "customName"(): $Component
get "renderBoundingBox"(): $AABB
get "count"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityBeaconBlockEntity$Type = ($HostilityBeaconBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityBeaconBlockEntity_ = $HostilityBeaconBlockEntity$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$LHTagGen" {
import {$ProviderType, $ProviderType$Type} from "packages/com/tterrag/registrate/providers/$ProviderType"
import {$RegistrateTagsProvider$IntrinsicImpl, $RegistrateTagsProvider$IntrinsicImpl$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider$IntrinsicImpl"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$RegistrateItemTagsProvider, $RegistrateItemTagsProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateItemTagsProvider"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LHTagGen {
static readonly "ENCH_TAGS": $ProviderType<($RegistrateTagsProvider$IntrinsicImpl<($Enchantment)>)>
static readonly "CHAOS_CURIO": $TagKey<($Item)>
static readonly "CURSE_SLOT": $TagKey<($Item)>
static readonly "TRAIT_ITEM": $TagKey<($Item)>
static readonly "NO_SEAL": $TagKey<($Item)>
static readonly "ANTIBUILD_BAN": $TagKey<($Item)>
static readonly "BEACON_BLOCK": $TagKey<($Block)>
static readonly "BEACON_PAYMENT": $TagKey<($Item)>
static readonly "NO_DISPELL": $TagKey<($Enchantment)>
static readonly "BLACKLIST": $TagKey<($EntityType<(any)>)>
static readonly "WHITELIST": $TagKey<($EntityType<(any)>)>
static readonly "NO_SCALING": $TagKey<($EntityType<(any)>)>
static readonly "NO_TRAIT": $TagKey<($EntityType<(any)>)>
static readonly "SEMIBOSS": $TagKey<($EntityType<(any)>)>
static readonly "NO_DROP": $TagKey<($EntityType<(any)>)>
static readonly "ARMOR_TARGET": $TagKey<($EntityType<(any)>)>
static readonly "MELEE_WEAPON_TARGET": $TagKey<($EntityType<(any)>)>
static readonly "RANGED_WEAPON_TARGET": $TagKey<($EntityType<(any)>)>
static readonly "ENTITY_TAG_BUILDER": $Map<($ResourceLocation), ($Consumer<($RegistrateTagsProvider$IntrinsicImpl<($EntityType<(any)>)>)>)>

constructor()

public static "createTraitTag"(arg0: string): $TagKey<($MobTrait)>
public static "onItemTagGen"(arg0: $RegistrateItemTagsProvider$Type): void
public static "onBlockTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($Block$Type)>): void
public static "onEffTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($MobEffect$Type)>): void
public static "onTraitTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($MobTrait$Type)>): void
public static "onEnchTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($Enchantment$Type)>): void
public static "onEntityTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($EntityType$Type<(any)>)>): void
public static "createEntityTag"(arg0: string): $TagKey<($EntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHTagGen$Type = ($LHTagGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHTagGen_ = $LHTagGen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken$TabFactory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemTabGroup, $GolemTabGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabGroup"
import {$GolemTabBase, $GolemTabBase$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"

export interface $GolemTabToken$TabFactory<G extends $GolemTabGroup<(G)>, T extends $GolemTabBase<(G), (T)>> {

 "create"(arg0: integer, arg1: $GolemTabToken$Type<(G), (T)>, arg2: $GolemTabManager$Type<(G)>, arg3: $ItemStack$Type, arg4: $Component$Type): T

(arg0: integer, arg1: $GolemTabToken$Type<(G), (T)>, arg2: $GolemTabManager$Type<(G)>, arg3: $ItemStack$Type, arg4: $Component$Type): T
}

export namespace $GolemTabToken$TabFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTabToken$TabFactory$Type<G, T> = ($GolemTabToken$TabFactory<(G), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTabToken$TabFactory_<G, T> = $GolemTabToken$TabFactory$Type<(G), (T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $IArtifactFeature {

 "getDesc"(): $MutableComponent
 "getTooltipItems"(): $NonNullList<($ItemStack)>

(): $MutableComponent
}

export namespace $IArtifactFeature {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IArtifactFeature$Type = ($IArtifactFeature);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IArtifactFeature_ = $IArtifactFeature$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/aerial/$ArsonistTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $ArsonistTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArsonistTool$Type = ($ArsonistTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArsonistTool_ = $ArsonistTool$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$DrawerRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IDrawerBlockEntity, $IDrawerBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$IDrawerBlockEntity"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $DrawerRenderer implements $BlockEntityRenderer<($IDrawerBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $IDrawerBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $IDrawerBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $IDrawerBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerRenderer$Type = ($DrawerRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerRenderer_ = $DrawerRenderer$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$TotemicTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $TotemicTool extends $ExtraToolConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T): integer
public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TotemicTool$Type = ($TotemicTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TotemicTool_ = $TotemicTool$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/armorswap/$ArmorSetBagMenu" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BaseBagMenu, $BaseBagMenu$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ArmorSetBagMenu extends $BaseBagMenu<($ArmorSetBagMenu)> {
static readonly "MANAGERS": $SpriteManager
readonly "item_slot": $PlayerSlot<(any)>
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $PlayerSlot$Type<(any)>, arg3: $UUID$Type, arg4: $Component$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($ArmorSetBagMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $ArmorSetBagMenu
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorSetBagMenu$Type = ($ArmorSetBagMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorSetBagMenu_ = $ArmorSetBagMenu$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerHelper" {
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RangeDiggingEnchantment, $RangeDiggingEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$RangeDiggingEnchantment"

export class $DiggerHelper {

constructor()

public static "getDigger"(arg0: $ItemStack$Type): $Pair<($RangeDiggingEnchantment), (integer)>
public static "rotateDigger"(arg0: $ItemStack$Type, arg1: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiggerHelper$Type = ($DiggerHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiggerHelper_ = $DiggerHelper$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$ConfigTypeEntry" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$PacketHandlerWithConfig, $PacketHandlerWithConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ConfigTypeEntry<T extends $BaseConfig> extends $Record {

constructor(channel: $PacketHandlerWithConfig$Type, name: string, cls: $Class$Type<(T)>)

public "name"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "cls"(): $Class<(T)>
public "channel"(): $PacketHandlerWithConfig
public "getEntry"(arg0: $ResourceLocation$Type): T
public "getAll"(): $Collection<(T)>
public "getMerged"(): T
public "asPath"(arg0: $ResourceLocation$Type): string
get "all"(): $Collection<(T)>
get "merged"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigTypeEntry$Type<T> = ($ConfigTypeEntry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigTypeEntry_<T> = $ConfigTypeEntry$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe" {
import {$InputReplacement, $InputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$InputReplacement"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSchema, $RecipeSchema$Type} from "packages/dev/latvian/mods/kubejs/recipe/schema/$RecipeSchema"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ReplacementMatch, $ReplacementMatch$Type} from "packages/dev/latvian/mods/kubejs/recipe/$ReplacementMatch"
import {$OutputReplacement, $OutputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$OutputReplacement"
import {$BaseRecipe$RecType, $BaseRecipe$RecType$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe$RecType"

export class $BaseRecipe<Rec extends SRec, SRec extends $BaseRecipe<(any), (SRec), (Inv)>, Inv extends $Container> implements $Recipe<(Inv)> {
 "id": $ResourceLocation

constructor(arg0: $ResourceLocation$Type, arg1: $BaseRecipe$RecType$Type<(Rec), (SRec), (Inv)>)

public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(arg0: Inv, arg1: $RegistryAccess$Type): $ItemStack
public "getId"(): $ResourceLocation
public "matches"(arg0: Inv, arg1: $Level$Type): boolean
public "getRemainingItems"(arg0: Inv): $NonNullList<($ItemStack)>
public "getIngredients"(): $NonNullList<($Ingredient)>
public "getToastSymbol"(): $ItemStack
public "isIncomplete"(): boolean
public "showNotification"(): boolean
public "isSpecial"(): boolean
public "getType"(): $ResourceLocation
public "replaceOutput"(match: $ReplacementMatch$Type, arg1: $OutputReplacement$Type): boolean
public "setGroup"(group: string): void
public "hasInput"(match: $ReplacementMatch$Type): boolean
public "getOrCreateId"(): $ResourceLocation
public "getSchema"(): $RecipeSchema
public "replaceInput"(match: $ReplacementMatch$Type, arg1: $InputReplacement$Type): boolean
public "hasOutput"(match: $ReplacementMatch$Type): boolean
public "getGroup"(): string
public "getMod"(): string
get "serializer"(): $RecipeSerializer<(any)>
get "id"(): $ResourceLocation
get "ingredients"(): $NonNullList<($Ingredient)>
get "toastSymbol"(): $ItemStack
get "incomplete"(): boolean
get "special"(): boolean
get "type"(): $ResourceLocation
set "group"(value: string)
get "orCreateId"(): $ResourceLocation
get "schema"(): $RecipeSchema
get "group"(): string
get "mod"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseRecipe$Type<Rec, SRec, Inv> = ($BaseRecipe<(Rec), (SRec), (Inv)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseRecipe_<Rec, SRec, Inv> = $BaseRecipe$Type<(Rec), (SRec), (Inv)>;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ITool" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"

export interface $ITool {

 "create"(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type): $Item
 "getSpeed"(arg0: float): float
 "getDamage"(arg0: integer): integer
}

export namespace $ITool {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITool$Type = ($ITool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITool_ = $ITool$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/entity/fireball/$BlackFireball" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BaseFireball, $BaseFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$BaseFireball"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BlackFireball extends $BaseFireball<($BlackFireball)> {
 "lifetime": integer
 "xPower": double
 "yPower": double
 "zPower": double
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $LivingEntity$Type, arg1: double, arg2: double, arg3: double, arg4: $Level$Type)
constructor(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: $Level$Type)
constructor(arg0: $EntityType$Type<($BlackFireball$Type)>, arg1: $Level$Type)

public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackFireball$Type = ($BlackFireball);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackFireball_ = $BlackFireball$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$GenericWeaponItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$WeaponItem, $WeaponItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$WeaponItem"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$LWTieredItem, $LWTieredItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$LWTieredItem"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $GenericWeaponItem extends $WeaponItem implements $LWTieredItem {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type, arg5: $TagKey$Type<($Block$Type)>)

public "getExtraConfig"(): $ExtraToolConfig
public "canPerformAction"(arg0: $ItemStack$Type, arg1: $ToolAction$Type): boolean
public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type): float
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "canBeDepleted"(): boolean
public "mineBlock"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockState$Type, arg3: $BlockPos$Type, arg4: $LivingEntity$Type): boolean
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
public "isSharp"(): boolean
public "getMultiplier"(arg0: $AttackCache$Type): float
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public "isHeavy"(): boolean
get "extraConfig"(): $ExtraToolConfig
get "sharp"(): boolean
get "heavy"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericWeaponItem$Type = ($GenericWeaponItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericWeaponItem_ = $GenericWeaponItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/special/$LegendaryEnchantment" {
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$SingleLevelEnchantment, $SingleLevelEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SingleLevelEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $LegendaryEnchantment extends $SingleLevelEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "getColor"(): $ChatFormatting
get "color"(): $ChatFormatting
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LegendaryEnchantment$Type = ($LegendaryEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LegendaryEnchantment_ = $LegendaryEnchantment$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/common/$AddSlotModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"

export class $AddSlotModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "addSlot"(arg0: $List$Type<($UpgradeItem$Type)>, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AddSlotModifier$Type = ($AddSlotModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AddSlotModifier_ = $AddSlotModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/menu/tab/$DifficultyScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BaseTextScreen, $BaseTextScreen$Type} from "packages/dev/xkmc/l2tabs/tabs/contents/$BaseTextScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $DifficultyScreen extends $BaseTextScreen {
 "imageWidth": integer
 "imageHeight": integer
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "m_7856_"(): void
public static "addRewardInfo"(arg0: $List$Type<($Pair$Type<($Component$Type), ($Supplier$Type<($List$Type<($Component$Type)>)>)>)>): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public static "addDifficultyInfo"(arg0: $List$Type<($Pair$Type<($Component$Type), ($Supplier$Type<($List$Type<($Component$Type)>)>)>)>, ...arg1: ($ChatFormatting$Type)[]): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DifficultyScreen$Type = ($DifficultyScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DifficultyScreen_ = $DifficultyScreen$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe$Serializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$SmithingTransformRecipe$Serializer, $SmithingTransformRecipe$Serializer$Type} from "packages/net/minecraft/world/item/crafting/$SmithingTransformRecipe$Serializer"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractSmithingRecipe, $AbstractSmithingRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe"
import {$AbstractSmithingRecipe$RecipeFactory, $AbstractSmithingRecipe$RecipeFactory$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe$RecipeFactory"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $AbstractSmithingRecipe$Serializer<T extends $AbstractSmithingRecipe<(T)>> extends $SmithingTransformRecipe$Serializer {

constructor(arg0: $AbstractSmithingRecipe$RecipeFactory$Type<(T)>)

public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): T
public "toJson"(arg0: T, arg1: $JsonObject$Type): void
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): T
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSmithingRecipe$Serializer$Type<T> = ($AbstractSmithingRecipe$Serializer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSmithingRecipe$Serializer_<T> = $AbstractSmithingRecipe$Serializer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$InvClientTooltip" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"
import {$InvTooltip, $InvTooltip$Type} from "packages/dev/xkmc/l2backpack/content/common/$InvTooltip"

export class $InvClientTooltip extends $Record implements $ClientTooltipComponent {
static readonly "TEXTURE_LOCATION": $ResourceLocation

constructor(inv: $InvTooltip$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "inv"(): $InvTooltip
public "getWidth"(arg0: $Font$Type): integer
public "getHeight"(): integer
public "renderImage"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvClientTooltip$Type = ($InvClientTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvClientTooltip_ = $InvClientTooltip$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/entry/$SetSwapHandler" {
import {$Int2IntFunction, $Int2IntFunction$Type} from "packages/it/unimi/dsi/fastutil/ints/$Int2IntFunction"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ISetSwapHandler, $ISetSwapHandler$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISetSwapHandler"

export class $SetSwapHandler extends $Record implements $ISetSwapHandler {

constructor(list: $List$Type<($ItemStack$Type)>, mapping: $Int2IntFunction$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "replace"(arg0: integer, arg1: $ItemStack$Type): void
public "list"(): $List<($ItemStack)>
public "getStack"(arg0: integer): $ItemStack
public "mapping"(): $Int2IntFunction
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetSwapHandler$Type = ($SetSwapHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetSwapHandler_ = $SetSwapHandler$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$WeaponConfig$EnchConfig" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"

export class $WeaponConfig$EnchConfig extends $Record {

constructor(enchantments: $ArrayList$Type<($Enchantment$Type)>, level: integer, chance: float)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "level"(): integer
public "chance"(): float
public "enchantments"(): $ArrayList<($Enchantment)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeaponConfig$EnchConfig$Type = ($WeaponConfig$EnchConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeaponConfig$EnchConfig_ = $WeaponConfig$EnchConfig$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/one/$GetBlockItemBlockMethod" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$SingletonBlockMethod, $SingletonBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$SingletonBlockMethod"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $GetBlockItemBlockMethod extends $SingletonBlockMethod {

 "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack

(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
}

export namespace $GetBlockItemBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GetBlockItemBlockMethod$Type = ($GetBlockItemBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GetBlockItemBlockMethod_ = $GetBlockItemBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$JavelinItem" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BaseThrowableWeaponItem, $BaseThrowableWeaponItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$BaseThrowableWeaponItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$JavelinEntity, $JavelinEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$JavelinEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $JavelinItem extends $BaseThrowableWeaponItem {
static readonly "RANGE": $AttributeModifier
static readonly "REACH": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getProjectile"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): $JavelinEntity
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "thunderHit"(arg0: $BaseThrownWeaponEntity$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JavelinItem$Type = ($JavelinItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JavelinItem_ = $JavelinItem$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache" {
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$DamageModifier, $DamageModifier$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier"
import {$AttackEntityEvent, $AttackEntityEvent$Type} from "packages/net/minecraftforge/event/entity/player/$AttackEntityEvent"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$PlayerAttackCache, $PlayerAttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$PlayerAttackCache"
import {$Stage, $Stage$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$Stage"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AttackCache {

constructor()

public "getPreDamageOriginal"(): float
public "correctPreDamageOriginal"(arg0: float): float
public "getPreDamage"(): float
public "getLivingHurtEvent"(): $LivingHurtEvent
public "getAttacker"(): $LivingEntity
public "addHurtModifier"(arg0: $DamageModifier$Type): void
public "getAttackTarget"(): $LivingEntity
public "addDealtModifier"(arg0: $DamageModifier$Type): void
public "setupPlayer"(arg0: $PlayerAttackCache$Type): void
public "getPlayerAttackEntityEvent"(): $AttackEntityEvent
public "getLivingDamageEvent"(): $LivingDamageEvent
public "getLivingAttackEvent"(): $LivingAttackEvent
public "getStrength"(): float
public "getStage"(): $Stage
public "getWeapon"(): $ItemStack
public "getDamageDealt"(): float
public "getCriticalHitEvent"(): $CriticalHitEvent
get "preDamageOriginal"(): float
get "preDamage"(): float
get "livingHurtEvent"(): $LivingHurtEvent
get "attacker"(): $LivingEntity
get "attackTarget"(): $LivingEntity
set "upPlayer"(value: $PlayerAttackCache$Type)
get "playerAttackEntityEvent"(): $AttackEntityEvent
get "livingDamageEvent"(): $LivingDamageEvent
get "livingAttackEvent"(): $LivingAttackEvent
get "strength"(): float
get "stage"(): $Stage
get "weapon"(): $ItemStack
get "damageDealt"(): float
get "criticalHitEvent"(): $CriticalHitEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttackCache$Type = ($AttackCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttackCache_ = $AttackCache$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ExtraToolConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "hideWithEffect"(): boolean
public "setTier"(arg0: $Function$Type<(integer), ($TagKey$Type<($Block$Type)>)>): $ExtraToolConfig
public "damageChance"(arg0: double): $ExtraToolConfig
public "setStick"(arg0: $Function$Type<($IMatVanillaType$Type), ($Item$Type)>, arg1: boolean): $ExtraToolConfig
public "repairChance"(arg0: double): $ExtraToolConfig
public "modify"(arg0: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg1: $EquipmentSlot$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T): integer
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type, arg2: float): float
public "setUnDepletable"(): $ExtraToolConfig
public "setBypassMagic"(): $ExtraToolConfig
public "addEffects"(...arg0: ($MobEffectInstance$Type)[]): $ExtraToolConfig
public "setBypassArmor"(): $ExtraToolConfig
public "onHit"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "getTier"(arg0: integer): $TagKey<($Block)>
set "tier"(value: $Function$Type<(integer), ($TagKey$Type<($Block$Type)>)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtraToolConfig$Type = ($ExtraToolConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtraToolConfig_ = $ExtraToolConfig$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$Slimification" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $Slimification extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Slimification$Type = ($Slimification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Slimification_ = $Slimification$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/skill/$EmeraldPopeEffect" {
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$FirstPlayerRenderEffect, $FirstPlayerRenderEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$FirstPlayerRenderEffect"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$ClientRenderEffect, $ClientRenderEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ClientRenderEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $EmeraldPopeEffect extends $MobEffect implements $FirstPlayerRenderEffect, $ClientRenderEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
public "onClientLevelRender"(arg0: $AbstractClientPlayer$Type, arg1: $MobEffectInstance$Type): void
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmeraldPopeEffect$Type = ($EmeraldPopeEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmeraldPopeEffect_ = $EmeraldPopeEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/sync/$SyncedData$Definer" {
import {$EntityDataSerializer, $EntityDataSerializer$Type} from "packages/net/minecraft/network/syncher/$EntityDataSerializer"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"

export interface $SyncedData$Definer {

 "define"<T>(arg0: $EntityDataSerializer$Type<(T)>): $EntityDataAccessor<(T)>

(arg0: $EntityDataSerializer$Type<(T)>): $EntityDataAccessor<(T)>
}

export namespace $SyncedData$Definer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncedData$Definer$Type = ($SyncedData$Definer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncedData$Definer_ = $SyncedData$Definer$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$TargetFilterConfig" {
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TargetFilterConfig {
static readonly "LINE": integer

constructor()

public "initDefault"(): void
public "resetHostile"(): void
public "resetFriendly"(): void
public "friendlyToward"(arg0: $LivingEntity$Type): boolean
public "aggressiveToward"(arg0: $LivingEntity$Type): boolean
public "internalMatch"(arg0: $ArrayList$Type<($ItemStack$Type)>, arg1: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetFilterConfig$Type = ($TargetFilterConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetFilterConfig_ = $TargetFilterConfig$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/card/$EntityTypeFilterCard" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$ClickEntityFilterCard, $ClickEntityFilterCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$ClickEntityFilterCard"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EntityTypeFilterCard extends $ClickEntityFilterCard<($EntityType<(any)>)> {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityTypeFilterCard$Type = ($EntityTypeFilterCard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityTypeFilterCard_ = $EntityTypeFilterCard$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/restore/$DimensionTraceData" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$TrackedEntryData, $TrackedEntryData$Type} from "packages/dev/xkmc/l2screentracker/screen/track/$TrackedEntryData"

export class $DimensionTraceData extends $Record implements $TrackedEntryData<($DimensionTraceData)> {

constructor(color: integer, uuid: $UUID$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "color"(): integer
public "uuid"(): $UUID
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DimensionTraceData$Type = ($DimensionTraceData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DimensionTraceData_ = $DimensionTraceData$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$PickupFilterEditor" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$PickupFilterConfig, $PickupFilterConfig$Type} from "packages/dev/xkmc/modulargolems/content/capability/$PickupFilterConfig"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IGhostContainer, $IGhostContainer$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$IGhostContainer"

export class $PickupFilterEditor extends $Record implements $IGhostContainer {

constructor(editor: $GolemConfigEditor$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "set"(arg0: integer, arg1: $ItemStack$Type): void
public "editor"(): $GolemConfigEditor
public "getFilter"(): $PickupFilterConfig
public "toggleTag"(): void
public "isTagMatch"(): boolean
public "toggleFilter"(): void
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "listSize"(): integer
public "isBlacklist"(): boolean
public "internalMatch"(arg0: $ItemStack$Type): boolean
public "isEmpty"(): boolean
public "setChanged"(): void
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "stillValid"(arg0: $Player$Type): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "filter"(): $PickupFilterConfig
get "tagMatch"(): boolean
get "containerSize"(): integer
get "blacklist"(): boolean
get "empty"(): boolean
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupFilterEditor$Type = ($PickupFilterEditor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupFilterEditor_ = $PickupFilterEditor$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/filter/$ConfigItemTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$ConfigGroup"
import {$GolemTabBase, $GolemTabBase$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $ConfigItemTab extends $GolemTabBase<($ConfigGroup), ($ConfigItemTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $GolemTabToken<(G), (T)>
readonly "manager": $GolemTabManager<(G)>
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $GolemTabToken$Type<($ConfigGroup$Type), ($ConfigItemTab$Type)>, arg2: $GolemTabManager$Type<($ConfigGroup$Type)>, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigItemTab$Type = ($ConfigItemTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigItemTab_ = $ConfigItemTab$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigStorage" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $GolemConfigStorage {
static "CAPABILITY": $Capability<($GolemConfigStorage)>
readonly "level": $Level

constructor(arg0: $Level$Type)

public static "get"(arg0: $Level$Type): $GolemConfigStorage
public static "register"(): void
public "init"(): void
public "replaceStorage"(arg0: $GolemConfigEntry$Type): void
public "getOrCreateStorage"(arg0: $UUID$Type, arg1: integer, arg2: $Component$Type): $GolemConfigEntry
public "getStorage"(arg0: $UUID$Type, arg1: integer): $GolemConfigEntry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemConfigStorage$Type = ($GolemConfigStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemConfigStorage_ = $GolemConfigStorage$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v1/$ProtectionResistance" {
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $ProtectionResistance extends $SetEffect {
readonly "ids": integer

constructor()

public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProtectionResistance$Type = ($ProtectionResistance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProtectionResistance_ = $ProtectionResistance$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/goals/$FollowOwnerGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $FollowOwnerGoal extends $Goal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FollowOwnerGoal$Type = ($FollowOwnerGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FollowOwnerGoal_ = $FollowOwnerGoal$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfHealing" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RingOfHealing extends $CurioItem implements $ICurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "hasCurioCapability"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "canUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type, arg1: $ItemStack$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "writeSyncData"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public "writeSyncData"(arg0: $ItemStack$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: $ItemStack$Type): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "canEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type, arg2: $ItemStack$Type): boolean
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type, arg2: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RingOfHealing$Type = ($RingOfHealing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RingOfHealing_ = $RingOfHealing$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$CarminiteModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $CarminiteModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onDamaged"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingDamageEvent$Type, arg2: integer): void
public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CarminiteModifier$Type = ($CarminiteModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CarminiteModifier_ = $CarminiteModifier$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/$TeamAccessor" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $TeamAccessor {
static readonly "PLAYER_HURT": boolean

constructor()

public static "arePlayersInSameTeam"(arg0: $ServerPlayer$Type, arg1: $ServerPlayer$Type): boolean
public static "getPotentialOwner"(arg0: $Entity$Type): $UUID
public static "arePlayerAndEntityInSameTeam"(arg0: $ServerPlayer$Type, arg1: $LivingEntity$Type): boolean
public static "areEntitiesInSameTeam"(arg0: $LivingEntity$Type, arg1: $LivingEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamAccessor$Type = ($TeamAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamAccessor_ = $TeamAccessor$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$TreeInstance" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TreeInstance extends $Record implements $BlockBreakerInstance {

constructor(x0: integer, x1: integer, y0: integer, y1: integer, z0: integer, z1: integer, max: integer, lv: integer, match: $Function$Type<($BlockState$Type), (integer)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "max"(): integer
public "find"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Predicate$Type<($BlockPos$Type)>): $List<($BlockPos)>
public "match"(): $Function<($BlockState), (integer)>
public "x1"(): integer
public "y1"(): integer
public "z1"(): integer
public "z0"(): integer
public "x0"(): integer
public "lv"(): integer
public "y0"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TreeInstance$Type = ($TreeInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TreeInstance_ = $TreeInstance$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$ArrowSwapType" {
import {$ISwapEntry, $ISwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISwapEntry"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MatcherSwapType, $MatcherSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$MatcherSwapType"

export class $ArrowSwapType extends $MatcherSwapType {

constructor(arg0: string, arg1: integer)

public "match"(arg0: $ItemStack$Type): boolean
public "isAvailable"(arg0: $Player$Type, arg1: $ISwapEntry$Type<(any)>): boolean
public "activePopup"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowSwapType$Type = ($ArrowSwapType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowSwapType_ = $ArrowSwapType$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/misc/$SelectArtifactItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SelectArtifactItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectArtifactItem$Type = ($SelectArtifactItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectArtifactItem_ = $SelectArtifactItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/$L2Hostility" {
import {$WeaponConfig, $WeaponConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$WeaponConfig"
import {$WorldDifficultyConfig, $WorldDifficultyConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$WorldDifficultyConfig"
import {$GatherDataEvent, $GatherDataEvent$Type} from "packages/net/minecraftforge/data/event/$GatherDataEvent"
import {$EntityConfig, $EntityConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$TraitConfig, $TraitConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$TraitConfig"
import {$EntityAttributeModificationEvent, $EntityAttributeModificationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeModificationEvent"
import {$LHRegistrate, $LHRegistrate$Type} from "packages/dev/xkmc/l2hostility/init/entries/$LHRegistrate"
import {$LevelChunk, $LevelChunk$Type} from "packages/net/minecraft/world/level/chunk/$LevelChunk"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$PacketHandlerWithConfig, $PacketHandlerWithConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig"
import {$ConfigTypeEntry, $ConfigTypeEntry$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigTypeEntry"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"

export class $L2Hostility {
static readonly "MODID": string
static readonly "HANDLER": $PacketHandlerWithConfig
static readonly "LOGGER": $Logger
static readonly "REGISTRATE": $LHRegistrate
static readonly "DIFFICULTY": $ConfigTypeEntry<($WorldDifficultyConfig)>
static readonly "TRAIT": $ConfigTypeEntry<($TraitConfig)>
static readonly "WEAPON": $ConfigTypeEntry<($WeaponConfig)>
static readonly "ENTITY": $ConfigTypeEntry<($EntityConfig)>

constructor()

public static "setup"(arg0: $FMLCommonSetupEvent$Type): void
public static "gatherData"(arg0: $GatherDataEvent$Type): void
public static "toTrackingChunk"(arg0: $LevelChunk$Type, arg1: $SerialPacketBase$Type): void
public static "modifyAttributes"(arg0: $EntityAttributeModificationEvent$Type): void
set "up"(value: $FMLCommonSetupEvent$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Hostility$Type = ($L2Hostility);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Hostility_ = $L2Hostility$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/common/$RegenTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $RegenTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "allow"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer): boolean
public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
public "validTarget"(arg0: $LivingEntity$Type): boolean
public "addDetail"(arg0: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegenTrait$Type = ($RegenTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegenTrait_ = $RegenTrait$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ArtifactSwapData, $ArtifactSwapData$Type} from "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapData"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ArtifactSwapItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public static "getData"(arg0: $ItemStack$Type): $ArtifactSwapData
public static "setData"(arg0: $ItemStack$Type, arg1: $ArtifactSwapData$Type): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "canFitInsideContainerItems"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSwapItem$Type = ($ArtifactSwapItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSwapItem_ = $ArtifactSwapItem$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$SlotAcceptor" {
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"

export interface $MenuLayoutConfig$SlotAcceptor {

 "addSlot"(arg0: string, arg1: integer, arg2: integer, arg3: $Slot$Type): void

(arg0: string, arg1: integer, arg2: integer, arg3: $Slot$Type): void
}

export namespace $MenuLayoutConfig$SlotAcceptor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuLayoutConfig$SlotAcceptor$Type = ($MenuLayoutConfig$SlotAcceptor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuLayoutConfig$SlotAcceptor_ = $MenuLayoutConfig$SlotAcceptor$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent" {
import {$DamageState, $DamageState$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageState"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$PlayerAttackCache, $PlayerAttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$PlayerAttackCache"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$DamageTypeWrapper, $DamageTypeWrapper$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageTypeWrapper"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CreateSourceEvent {

constructor(arg0: $Registry$Type<($DamageType$Type)>, arg1: $ResourceKey$Type<($DamageType$Type)>, arg2: $LivingEntity$Type, arg3: $Entity$Type)

/**
 * 
 * @deprecated
 */
public "setResult"(arg0: $DamageTypeWrapper$Type): void
public "enable"(arg0: $DamageState$Type): void
public "getResult"(): $DamageTypeWrapper
public "getAttacker"(): $LivingEntity
public "getDirect"(): $Entity
public "setDirect"(arg0: $Entity$Type): void
public "getOriginal"(): $ResourceKey<($DamageType)>
public "setPlayerAttackCache"(arg0: $PlayerAttackCache$Type): void
public "getPlayerAttackCache"(): $PlayerAttackCache
public "getRegistry"(): $Registry<($DamageType)>
set "result"(value: $DamageTypeWrapper$Type)
get "result"(): $DamageTypeWrapper
get "attacker"(): $LivingEntity
get "direct"(): $Entity
set "direct"(value: $Entity$Type)
get "original"(): $ResourceKey<($DamageType)>
set "playerAttackCache"(value: $PlayerAttackCache$Type)
get "playerAttackCache"(): $PlayerAttackCache
get "registry"(): $Registry<($DamageType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateSourceEvent$Type = ($CreateSourceEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateSourceEvent_ = $CreateSourceEvent$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/client/$ThrownWeaponRenderer" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ThrownWeaponRenderer<T extends $BaseThrownWeaponEntity<(T)>> extends $EntityRenderer<(T)> {
static readonly "TRIDENT_LOCATION": $ResourceLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: T, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: T): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThrownWeaponRenderer$Type<T> = ($ThrownWeaponRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThrownWeaponRenderer_<T> = $ThrownWeaponRenderer$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/target/$TargetConfigScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$GhostItemScreen, $GhostItemScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$GhostItemScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TargetConfigMenu, $TargetConfigMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/target/$TargetConfigMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TargetConfigScreen extends $GhostItemScreen<($TargetConfigMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $TargetConfigMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetConfigScreen$Type = ($TargetConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetConfigScreen_ = $TargetConfigScreen$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/conditionals/$ConditionalData" {
import {$PlayerCapabilityHolder, $PlayerCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TokenProvider, $TokenProvider$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$TokenProvider"
import {$Context, $Context$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$Context"
import {$PlayerCapabilityTemplate, $PlayerCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ConditionalToken, $ConditionalToken$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$ConditionalToken"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$TokenKey, $TokenKey$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$TokenKey"

export class $ConditionalData extends $PlayerCapabilityTemplate<($ConditionalData)> {
static readonly "CAPABILITY": $Capability<($ConditionalData)>
static readonly "HOLDER": $PlayerCapabilityHolder<($ConditionalData)>
 "data": $HashMap<($TokenKey<(any)>), ($ConditionalToken)>
 "tickSinceDeath": integer
 "player": $Player
 "world": $Level

constructor()

public static "register"(): void
public "tick"(): void
public "getData"<T extends $ConditionalToken>(arg0: $TokenKey$Type<(T)>): T
public "onClone"(arg0: boolean): void
public "getOrCreateData"<T extends $ConditionalToken, C extends $Context>(arg0: $TokenProvider$Type<(T), (C)>, arg1: C): T
public "hasData"(arg0: $TokenKey$Type<(any)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConditionalData$Type = ($ConditionalData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConditionalData_ = $ConditionalData$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/quiver/$QuiverMenu" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BaseBagMenu, $BaseBagMenu$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $QuiverMenu extends $BaseBagMenu<($QuiverMenu)> {
static readonly "MANAGERS": $SpriteManager
readonly "item_slot": $PlayerSlot<(any)>
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $PlayerSlot$Type<(any)>, arg3: $UUID$Type, arg4: $Component$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($QuiverMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $QuiverMenu
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverMenu$Type = ($QuiverMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverMenu_ = $QuiverMenu$Type;
}}
declare module "packages/dev/xkmc/l2library/init/$L2LibraryClient" {
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"

export class $L2LibraryClient {

constructor()

public static "clientInit"(arg0: $FMLClientSetupEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2LibraryClient$Type = ($L2LibraryClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2LibraryClient_ = $L2LibraryClient$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$StealthEnchantment" {
import {$SourceModifierEnchantment, $SourceModifierEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SourceModifierEnchantment"
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$AttributeEnchantment, $AttributeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$AttributeEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $StealthEnchantment extends $UnobtainableEnchantment implements $SourceModifierEnchantment, $AttributeEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, ...arg2: ($EquipmentSlot$Type)[])

public "addAttributes"(arg0: integer, arg1: $ItemAttributeModifierEvent$Type): void
public "modify"(arg0: $CreateSourceEvent$Type, arg1: $ItemStack$Type, arg2: integer): void
public "getColor"(): $ChatFormatting
public "getMaxLevel"(): integer
public "getMinLevel"(): integer
public static "modifySource"(arg0: $ItemStack$Type, arg1: $CreateSourceEvent$Type): void
get "color"(): $ChatFormatting
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StealthEnchantment$Type = ($StealthEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StealthEnchantment_ = $StealthEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/chunk/$RegionalDifficultyModifier" {
import {$MobDifficultyCollector, $MobDifficultyCollector$Type} from "packages/dev/xkmc/l2hostility/content/logic/$MobDifficultyCollector"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $RegionalDifficultyModifier {

 "modifyInstance"(arg0: $BlockPos$Type, arg1: $MobDifficultyCollector$Type): void

(arg0: $BlockPos$Type, arg1: $MobDifficultyCollector$Type): void
}

export namespace $RegionalDifficultyModifier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegionalDifficultyModifier$Type = ($RegionalDifficultyModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegionalDifficultyModifier_ = $RegionalDifficultyModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/conditions/$BooleanValueCondition" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $BooleanValueCondition extends $Record implements $ICondition {
static readonly "ID": $ResourceLocation

constructor(path: string, line: $ArrayList$Type<(string)>, expected: boolean)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $ICondition$IContext$Type): boolean
public static "of"(arg0: string, arg1: $ForgeConfigSpec$ConfigValue$Type<(boolean)>, arg2: boolean): $BooleanValueCondition
public "line"(): $ArrayList<(string)>
public "expected"(): boolean
public "path"(): string
public "getID"(): $ResourceLocation
public static "shouldRegisterEntry"(arg0: $JsonElement$Type): boolean
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BooleanValueCondition$Type = ($BooleanValueCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BooleanValueCondition_ = $BooleanValueCondition$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/conditions/$L2ConditionSerializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$IConditionSerializer, $IConditionSerializer$Type} from "packages/net/minecraftforge/common/crafting/conditions/$IConditionSerializer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $L2ConditionSerializer<T extends $ICondition> extends $Record implements $IConditionSerializer<(T)> {

constructor(id: $ResourceLocation$Type, cls: $Class$Type<(T)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $ResourceLocation
public "cls"(): $Class<(T)>
public "write"(arg0: $JsonObject$Type, arg1: T): void
public "read"(arg0: $JsonObject$Type): T
public "getID"(): $ResourceLocation
public "getJson"(arg0: T): $JsonObject
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2ConditionSerializer$Type<T> = ($L2ConditionSerializer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2ConditionSerializer_<T> = $L2ConditionSerializer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2itemselector/select/item/$CustomDisplaySelectItem" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $CustomDisplaySelectItem {

 "getDisplay"(arg0: $ResourceLocation$Type, arg1: $ItemStack$Type): $ItemStack

(arg0: $ResourceLocation$Type, arg1: $ItemStack$Type): $ItemStack
}

export namespace $CustomDisplaySelectItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomDisplaySelectItem$Type = ($CustomDisplaySelectItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomDisplaySelectItem_ = $CustomDisplaySelectItem$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$CustomSmithingBuilder" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$SmithingTransformRecipeBuilder, $SmithingTransformRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$SmithingTransformRecipeBuilder"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$AbstractSmithingRecipe, $AbstractSmithingRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$AbstractSmithingRecipe$Serializer, $AbstractSmithingRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe$Serializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$IExtendedRecipe, $IExtendedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$IExtendedRecipe"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $CustomSmithingBuilder<T extends $AbstractSmithingRecipe<(T)>> extends $SmithingTransformRecipeBuilder implements $IExtendedRecipe {

constructor(arg0: $RegistryEntry$Type<($AbstractSmithingRecipe$Serializer$Type<(T)>)>, arg1: $Ingredient$Type, arg2: $Ingredient$Type, arg3: $Item$Type)

public "addAdditional"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "unlockedBy"(arg0: $RegistrateRecipeProvider$Type, arg1: $ItemLike$Type): $CustomSmithingBuilder<(T)>
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
get "type"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomSmithingBuilder$Type<T> = ($CustomSmithingBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomSmithingBuilder_<T> = $CustomSmithingBuilder$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$ConfigHeartBeatToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"

export class $ConfigHeartBeatToServer extends $SerialPacketBase {
 "id": $UUID
 "color": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $UUID$Type, arg1: integer)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigHeartBeatToServer$Type = ($ConfigHeartBeatToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigHeartBeatToServer_ = $ConfigHeartBeatToServer$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$TooltipItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TooltipItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MutableComponent$Type)>)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "canBeHurtBy"(arg0: $DamageSource$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipItem$Type = ($TooltipItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipItem_ = $TooltipItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/immunes/$ThunderImmuneModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ThunderImmuneModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThunderImmuneModifier$Type = ($ThunderImmuneModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThunderImmuneModifier_ = $ThunderImmuneModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/init/events/$BaseCapabilityEvents" {
import {$TickEvent$PlayerTickEvent, $TickEvent$PlayerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$PlayerTickEvent"
import {$PlayerEvent$Clone, $PlayerEvent$Clone$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$Clone"
import {$PlayerEvent$StartTracking, $PlayerEvent$StartTracking$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$StartTracking"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseCapabilityEvents {

constructor()

public static "onPlayerTick"(arg0: $TickEvent$PlayerTickEvent$Type): void
public static "onStartTracking"(arg0: $PlayerEvent$StartTracking$Type): void
public static "onAttachEntityCapabilities"(arg0: $AttachCapabilitiesEvent$Type<($Entity$Type)>): void
public static "onPlayerClone"(arg0: $PlayerEvent$Clone$Type): void
public static "onServerPlayerJoin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseCapabilityEvents$Type = ($BaseCapabilityEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseCapabilityEvents_ = $BaseCapabilityEvents$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$DrawerItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$DoubleClickItem, $DoubleClickItem$Type} from "packages/dev/xkmc/l2backpack/content/click/$DoubleClickItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$ContentTransfer$Quad, $ContentTransfer$Quad$Type} from "packages/dev/xkmc/l2backpack/content/common/$ContentTransfer$Quad"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$BaseDrawerItem, $BaseDrawerItem$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$BaseDrawerItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DrawerItem extends $BlockItem implements $BaseDrawerItem, $ContentTransfer$Quad, $DoubleClickItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Block$Type, arg1: $Item$Properties$Type)

public "insert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $Player$Type): void
public static "getCount"(arg0: $ItemStack$Type): integer
public "mergeStack"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): void
public "backgroundLoc"(): $ResourceLocation
public "takeItem"(arg0: $ItemStack$Type, arg1: integer, arg2: $Player$Type, arg3: boolean): $ItemStack
public "canSetNewItem"(arg0: $ItemStack$Type): boolean
public "getDescriptionId"(): string
public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "remainingSpace"(arg0: $ItemStack$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "canAbsorb"(arg0: $Slot$Type, arg1: $ItemStack$Type): boolean
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
public "click"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: boolean, arg3: boolean, arg4: boolean, arg5: $IItemHandler$Type): void
public static "setCount"(arg0: $ItemStack$Type, arg1: integer): void
public static "getItem"(arg0: $ItemStack$Type): $Item
public static "getStacking"(arg0: $CompoundTag$Type): integer
public static "getStacking"(): integer
public static "getStacking"(arg0: $ItemStack$Type): integer
public static "loadFromInventory"(arg0: integer, arg1: integer, arg2: $Item$Type, arg3: $Player$Type): integer
public static "getStackingFactor"(arg0: $ItemStack$Type): integer
public static "setStackingFactor"(arg0: $ItemStack$Type, arg1: integer): $ItemStack
public static "canAccept"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
public "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
public "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
public "mayClientTake"(): boolean
public "setItem"(arg0: $ItemStack$Type, arg1: $Item$Type, arg2: $Player$Type): void
public "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
public "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "descriptionId"(): string
get "stacking"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerItem$Type = ($DrawerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerItem_ = $DrawerItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ArtifactSwapMenu, $ArtifactSwapMenu$Type} from "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapMenu"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$MenuLayoutConfig$ScreenRenderer, $MenuLayoutConfig$ScreenRenderer$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$ScreenRenderer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ArtifactSwapScreen extends $BaseContainerScreen<($ArtifactSwapMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ArtifactSwapMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "drawDisable"(arg0: $MenuLayoutConfig$ScreenRenderer$Type, arg1: $GuiGraphics$Type, arg2: integer): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSwapScreen$Type = ($ArtifactSwapScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSwapScreen_ = $ArtifactSwapScreen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/undergarden/$CloggrumTool" {
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $CloggrumTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloggrumTool$Type = ($CloggrumTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloggrumTool_ = $CloggrumTool$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/network/$ClientSyncHandler" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$TraitEffectToClient, $TraitEffectToClient$Type} from "packages/dev/xkmc/l2hostility/init/network/$TraitEffectToClient"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ClientSyncHandler {

constructor()

public static "handleChunkUpdate"(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: $CompoundTag$Type): void
public static "handleEffect"(arg0: $TraitEffectToClient$Type): void
public static "triggerUndying"(arg0: $TraitEffectToClient$Type): void
public static "triggerAura"(arg0: $TraitEffectToClient$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientSyncHandler$Type = ($ClientSyncHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientSyncHandler_ = $ClientSyncHandler$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/twilightforest/$SteeleafTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $SteeleafTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SteeleafTool$Type = ($SteeleafTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SteeleafTool_ = $SteeleafTool$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/$GolemDispenserBehaviors" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GolemDispenserBehaviors {

constructor()

public static "registerDispenseBehaviors"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemDispenserBehaviors$Type = ($GolemDispenserBehaviors);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemDispenserBehaviors_ = $GolemDispenserBehaviors$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/items/$LAItemMisc" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"

export class $LAItemMisc {
static readonly "EXPLOSIVE_FUNGUS": $ItemEntry<($Item)>
static readonly "PETRIFIED_FUNGUS": $ItemEntry<($Item)>
static readonly "NUTRITIOUS_FUNGUS": $ItemEntry<($Item)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LAItemMisc$Type = ($LAItemMisc);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LAItemMisc_ = $LAItemMisc$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$PlayerAttackCache" {
import {$AttackEntityEvent, $AttackEntityEvent$Type} from "packages/net/minecraftforge/event/entity/player/$AttackEntityEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $PlayerAttackCache {

constructor()

public "getAttacker"(): $LivingEntity
public "getPlayerAttackEntityEvent"(): $AttackEntityEvent
public "setupAttackerProfile"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "getStrength"(): float
public "getWeapon"(): $ItemStack
public "getCriticalHitEvent"(): $CriticalHitEvent
get "attacker"(): $LivingEntity
get "playerAttackEntityEvent"(): $AttackEntityEvent
get "strength"(): float
get "weapon"(): $ItemStack
get "criticalHitEvent"(): $CriticalHitEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerAttackCache$Type = ($PlayerAttackCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerAttackCache_ = $PlayerAttackCache$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$FireChargeItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FireChargeItem$PlayerFire, $FireChargeItem$PlayerFire$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$FireChargeItem$PlayerFire"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$TooltipItem, $TooltipItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$TooltipItem"
import {$FireChargeItem$BlockFire, $FireChargeItem$BlockFire$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$FireChargeItem$BlockFire"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BaseFireball, $BaseFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$BaseFireball"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FireChargeItem<T extends $BaseFireball<(T)>> extends $TooltipItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $FireChargeItem$PlayerFire$Type<(T)>, arg2: $FireChargeItem$BlockFire$Type<(T)>, arg3: $Supplier$Type<($MutableComponent$Type)>)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireChargeItem$Type<T> = ($FireChargeItem<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireChargeItem_<T> = $FireChargeItem$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v3/$GluttonyHeal" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$PlayerOnlySetEffect, $PlayerOnlySetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PlayerOnlySetEffect"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $GluttonyHeal extends $PlayerOnlySetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerKillOpponentEvent"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $LivingDeathEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GluttonyHeal$Type = ($GluttonyHeal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GluttonyHeal_ = $GluttonyHeal$Type;
}}
declare module "packages/dev/xkmc/l2itemselector/select/$ISelectionListener" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SetSelectedToServer, $SetSelectedToServer$Type} from "packages/dev/xkmc/l2itemselector/select/$SetSelectedToServer"
import {$L2Keys, $L2Keys$Type} from "packages/dev/xkmc/l2itemselector/init/data/$L2Keys"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ISelectionListener {

 "getID"(): $ResourceLocation
 "handleClientScroll"(arg0: integer, arg1: $Player$Type): boolean
 "isClientActive"(arg0: $Player$Type): boolean
 "handleClientKey"(arg0: $L2Keys$Type, arg1: $Player$Type): void
 "scrollBypassShift"(): boolean
 "toServer"(arg0: integer): void
 "handleClientNumericKey"(arg0: integer, arg1: $BooleanSupplier$Type): boolean
 "handleServerSetSelection"(arg0: $SetSelectedToServer$Type, arg1: $Player$Type): void
}

export namespace $ISelectionListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISelectionListener$Type = ($ISelectionListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISelectionListener_ = $ISelectionListener$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/core/$ModelProvider" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$IGolemModel, $IGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$IGolemModel"

export interface $ModelProvider<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>> {

 "generateModel"(arg0: $EntityModelSet$Type): $IGolemModel<(T), (P), (any)>

(arg0: $EntityModelSet$Type): $IGolemModel<(T), (P), (any)>
}

export namespace $ModelProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelProvider$Type<T, P> = ($ModelProvider<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelProvider_<T, P> = $ModelProvider$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$EstiType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Estimator$EstiResult, $Estimator$EstiResult$Type} from "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$EstiResult"

export class $Estimator$EstiType extends $Enum<($Estimator$EstiType)> implements $Estimator$EstiResult {
static readonly "ZERO": $Estimator$EstiType
static readonly "FAIL": $Estimator$EstiType
static readonly "CLOSE": $Estimator$EstiType


public static "values"(): ($Estimator$EstiType)[]
public static "valueOf"(arg0: string): $Estimator$EstiType
public "getType"(): $Estimator$EstiType
public "getT"(): double
public "getA"(): double
public "getVec"(): $Vec3
get "type"(): $Estimator$EstiType
get "t"(): double
get "a"(): double
get "vec"(): $Vec3
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Estimator$EstiType$Type = (("zero") | ("fail") | ("close")) | ($Estimator$EstiType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Estimator$EstiType_ = $Estimator$EstiType$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/client/$RangeDiggingOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $RangeDiggingOverlay implements $IGuiOverlay {

constructor()

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RangeDiggingOverlay$Type = ($RangeDiggingOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RangeDiggingOverlay_ = $RangeDiggingOverlay$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$PlaneBlockBreaker" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleNumberDesc, $SimpleNumberDesc$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$SimpleNumberDesc"
import {$DiggerContext, $DiggerContext$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext"

export class $PlaneBlockBreaker extends $Record implements $SimpleNumberDesc {

constructor(radius: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getInstance"(arg0: $DiggerContext$Type): $BlockBreakerInstance
public "range"(arg0: integer): integer
public "radius"(): integer
public "getMaxLevel"(): integer
public "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
public "ignoreHardness"(): boolean
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaneBlockBreaker$Type = ($PlaneBlockBreaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaneBlockBreaker_ = $PlaneBlockBreaker$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/restore/$DimensionItemSource" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemSource, $ItemSource$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$ItemSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$DimensionSourceData, $DimensionSourceData$Type} from "packages/dev/xkmc/l2backpack/content/restore/$DimensionSourceData"

export class $DimensionItemSource extends $ItemSource<($DimensionSourceData)> {

constructor()

public "getItem"(arg0: $Player$Type, arg1: $DimensionSourceData$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DimensionItemSource$Type = ($DimensionItemSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DimensionItemSource_ = $DimensionItemSource$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/player/$EnderSyncPacket" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$EnderSyncPacket$Entry, $EnderSyncPacket$Entry$Type} from "packages/dev/xkmc/l2backpack/content/remote/player/$EnderSyncPacket$Entry"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $EnderSyncPacket extends $SerialPacketBase {
 "list": $ArrayList<($EnderSyncPacket$Entry)>

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $List$Type<($Pair$Type<(integer), ($ItemStack$Type)>)>)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderSyncPacket$Type = ($EnderSyncPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderSyncPacket_ = $EnderSyncPacket$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/highlevel/$CorrosionTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraitEffectCache, $TraitEffectCache$Type} from "packages/dev/xkmc/l2hostility/content/logic/$TraitEffectCache"
import {$SlotIterateDamageTrait, $SlotIterateDamageTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/highlevel/$SlotIterateDamageTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $CorrosionTrait extends $SlotIterateDamageTrait {

constructor(arg0: $ChatFormatting$Type)

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onHurtTarget"(arg0: integer, arg1: $LivingEntity$Type, arg2: $AttackCache$Type, arg3: $TraitEffectCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CorrosionTrait$Type = ($CorrosionTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CorrosionTrait_ = $CorrosionTrait$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet$SetContext" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $ArtifactSet$SetContext extends $Record {

constructor(count: integer, ranks: (integer)[], current_index: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "count"(): integer
public "ranks"(): (integer)[]
public "current_index"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSet$SetContext$Type = ($ArtifactSet$SetContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSet$SetContext_ = $ArtifactSet$SetContext$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestInvWrapper" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$InvWrapper, $InvWrapper$Type} from "packages/net/minecraftforge/items/wrapper/$InvWrapper"

export class $WorldChestInvWrapper extends $InvWrapper {

constructor(arg0: $Container$Type, arg1: $UUID$Type)

public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldChestInvWrapper$Type = ($WorldChestInvWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldChestInvWrapper_ = $WorldChestInvWrapper$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$RenderEvents" {
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"

export class $RenderEvents {
static readonly "BACKPACK_LAYER": $ModelLayerLocation

constructor()

public static "registerBackpackLayer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderEvents$Type = ($RenderEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderEvents_ = $RenderEvents$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/bag/$BookBag" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$AbstractBag, $AbstractBag$Type} from "packages/dev/xkmc/l2backpack/content/bag/$AbstractBag"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BookBag extends $AbstractBag {
static readonly "SIZE": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "isValidContent"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookBag$Type = ($BookBag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookBag_ = $BookBag$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/base/$SelfEffectTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SelfEffectTrait extends $MobTrait {
readonly "effect": $Supplier<($MobEffect)>

constructor(arg0: $Supplier$Type<($MobEffect$Type)>)

public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
public "addDetail"(arg0: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelfEffectTrait$Type = ($SelfEffectTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelfEffectTrait_ = $SelfEffectTrait$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/loot/$ArtifactGLMProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$GlobalLootModifierProvider, $GlobalLootModifierProvider$Type} from "packages/net/minecraftforge/common/data/$GlobalLootModifierProvider"

export class $ArtifactGLMProvider extends $GlobalLootModifierProvider {

constructor(arg0: $DataGenerator$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactGLMProvider$Type = ($ArtifactGLMProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactGLMProvider_ = $ArtifactGLMProvider$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/click/$DoubleClickHandler" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $DoubleClickHandler {

constructor()

public static "handle"(arg0: $AbstractContainerMenu$Type, arg1: $Slot$Type, arg2: $ItemStack$Type, arg3: $Player$Type, arg4: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleClickHandler$Type = ($DoubleClickHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleClickHandler_ = $DoubleClickHandler$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/botania/$BotDispatch" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$ModDispatch, $ModDispatch$Type} from "packages/dev/xkmc/modulargolems/compat/materials/common/$ModDispatch"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $BotDispatch extends $ModDispatch {
static readonly "MODID": string

constructor()

public "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public "genLang"(arg0: $RegistrateLangProvider$Type): void
public "getDataGen"(arg0: $DataGenerator$Type): $ConfigDataProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BotDispatch$Type = ($BotDispatch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BotDispatch_ = $BotDispatch$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$LangData" {
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $LangData {

constructor()

public static "asId"(arg0: string): string
public static "addTranslations"(arg0: $RegistrateLangProvider$Type): void
public static "translate"(arg0: string, ...arg1: (any)[]): $MutableComponent
public static "diggerRotate"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LangData$Type = ($LangData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LangData_ = $LangData$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/command/$HostilityCommands" {
import {$RegisterCommandsEvent, $RegisterCommandsEvent$Type} from "packages/net/minecraftforge/event/$RegisterCommandsEvent"

export class $HostilityCommands {

constructor()

public static "register"(arg0: $RegisterCommandsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityCommands$Type = ($HostilityCommands);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityCommands_ = $HostilityCommands$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$ArmorSwapType" {
import {$ISwapEntry, $ISwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISwapEntry"
import {$ISetSwapAction, $ISetSwapAction$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$ISetSwapAction"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$ISingleSwapHandler, $ISingleSwapHandler$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISingleSwapHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ISetSwapHandler, $ISetSwapHandler$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISetSwapHandler"
import {$ISideInfoRenderer, $ISideInfoRenderer$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$ISideInfoRenderer"
import {$SelectionSideBar$Context, $SelectionSideBar$Context$Type} from "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar$Context"
import {$ISingleSwapAction, $ISingleSwapAction$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$ISingleSwapAction"

export class $ArmorSwapType extends $QuickSwapType implements $ISideInfoRenderer, $ISingleSwapAction, $ISetSwapAction {

constructor(arg0: string, arg1: integer)

public "isAvailable"(arg0: $Player$Type, arg1: $ISwapEntry$Type<(any)>, arg2: integer): boolean
public "isAvailable"(arg0: $Player$Type, arg1: $ISwapEntry$Type<(any)>): boolean
public "getSignatureItem"(arg0: $Player$Type): $ItemStack
public "activePopup"(): boolean
public "renderSide"(arg0: $SelectionSideBar$Context$Type, arg1: integer, arg2: integer, arg3: $Player$Type, arg4: $ISwapEntry$Type<(any)>): void
public "swapSingle"(arg0: $Player$Type, arg1: $ISingleSwapHandler$Type): void
public "swapSet"(arg0: $Player$Type, arg1: $ISetSwapHandler$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorSwapType$Type = ($ArmorSwapType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorSwapType_ = $ArmorSwapType$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/$ArtifactTagGen" {
import {$RegistrateTagsProvider$IntrinsicImpl, $RegistrateTagsProvider$IntrinsicImpl$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider$IntrinsicImpl"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $ArtifactTagGen {

constructor()

public static "onEffectTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($MobEffect$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactTagGen$Type = ($ArtifactTagGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactTagGen_ = $ArtifactTagGen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/data/$MGConfig" {
import {$MGConfig$Common, $MGConfig$Common$Type} from "packages/dev/xkmc/modulargolems/init/data/$MGConfig$Common"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$MGConfig$Client, $MGConfig$Client$Type} from "packages/dev/xkmc/modulargolems/init/data/$MGConfig$Client"

export class $MGConfig {
static readonly "CLIENT_SPEC": $ForgeConfigSpec
static readonly "CLIENT": $MGConfig$Client
static readonly "COMMON_SPEC": $ForgeConfigSpec
static readonly "COMMON": $MGConfig$Common

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MGConfig$Type = ($MGConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MGConfig_ = $MGConfig$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/entity/$SpecialSpriteRenderer" {
import {$ItemRenderer, $ItemRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$ItemRenderer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ItemSupplier, $ItemSupplier$Type} from "packages/net/minecraft/world/entity/projectile/$ItemSupplier"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$ISizedItemEntity, $ISizedItemEntity$Type} from "packages/dev/xkmc/l2complements/content/entity/$ISizedItemEntity"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SpecialSpriteRenderer<T extends ($Entity) & ($ItemSupplier) & ($ISizedItemEntity)> extends $EntityRenderer<(T)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: $ItemRenderer$Type, arg2: boolean)

public "render"(arg0: T, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $Entity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialSpriteRenderer$Type<T> = ($SpecialSpriteRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialSpriteRenderer_<T> = $SpecialSpriteRenderer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/content/client/$EnchStackDeco" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IItemDecorator, $IItemDecorator$Type} from "packages/net/minecraftforge/client/$IItemDecorator"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $EnchStackDeco implements $IItemDecorator {

constructor()

public "render"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchStackDeco$Type = ($EnchStackDeco);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchStackDeco_ = $EnchStackDeco$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$RangeDiggingEnchantment" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$CustomDescEnchantment, $CustomDescEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$CustomDescEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockBreaker, $BlockBreaker$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreaker"

export class $RangeDiggingEnchantment extends $UnobtainableEnchantment implements $CustomDescEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $BlockBreaker$Type, arg1: $Enchantment$Rarity$Type, arg2: $EnchantmentCategory$Type, arg3: ($EquipmentSlot$Type)[])

public static "execute"(arg0: $Player$Type, arg1: $Runnable$Type): void
public "onBlockBreak"(arg0: $ServerPlayer$Type, arg1: $BlockPos$Type, arg2: $ItemStack$Type, arg3: integer): void
public "getTargets"(arg0: $Player$Type, arg1: $BlockPos$Type, arg2: $ItemStack$Type, arg3: integer): $List<($BlockPos)>
public "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
public "getDecoColor"(arg0: string): integer
public "getMaxLevel"(): integer
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RangeDiggingEnchantment$Type = ($RangeDiggingEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RangeDiggingEnchantment_ = $RangeDiggingEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$TeleportUtil" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TeleportUtil {

constructor()

public static "teleport"(arg0: $Player$Type, arg1: $LivingEntity$Type, arg2: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeleportUtil$Type = ($TeleportUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeleportUtil_ = $TeleportUtil$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/curios/$EntityCuriosMenuPvd" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EntityCuriosMenuPvd extends $Record implements $MenuProvider {

constructor(e: $LivingEntity$Type, page: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $LivingEntity
public "open"(arg0: $ServerPlayer$Type): void
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "page"(): integer
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityCuriosMenuPvd$Type = ($EntityCuriosMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityCuriosMenuPvd_ = $EntityCuriosMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$BagInteractTrigger$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $BagInteractTrigger$Type extends $Enum<($BagInteractTrigger$Type)> {
static readonly "COLLECT": $BagInteractTrigger$Type
static readonly "EXTRACT": $BagInteractTrigger$Type
static readonly "LOAD": $BagInteractTrigger$Type
static readonly "DUMP": $BagInteractTrigger$Type


public static "values"(): ($BagInteractTrigger$Type)[]
public static "valueOf"(arg0: string): $BagInteractTrigger$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BagInteractTrigger$Type$Type = (("extract") | ("load") | ("dump") | ("collect")) | ($BagInteractTrigger$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BagInteractTrigger$Type_ = $BagInteractTrigger$Type$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/$EffectUtil$AddReason" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $EffectUtil$AddReason extends $Enum<($EffectUtil$AddReason)> {
static readonly "NONE": $EffectUtil$AddReason
static readonly "PROF": $EffectUtil$AddReason
static readonly "FORCE": $EffectUtil$AddReason
static readonly "SKILL": $EffectUtil$AddReason
static readonly "SELF": $EffectUtil$AddReason


public static "values"(): ($EffectUtil$AddReason)[]
public static "valueOf"(arg0: string): $EffectUtil$AddReason
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectUtil$AddReason$Type = (("skill") | ("self") | ("force") | ("none") | ("prof")) | ($EffectUtil$AddReason);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectUtil$AddReason_ = $EffectUtil$AddReason$Type;
}}
declare module "packages/dev/xkmc/l2backpack/compat/$MouseTweakCompat" {
import {$MouseButton, $MouseButton$Type} from "packages/yalter/mousetweaks/$MouseButton"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$MouseTweakCompat$Click, $MouseTweakCompat$Click$Type} from "packages/dev/xkmc/l2backpack/compat/$MouseTweakCompat$Click"

export class $MouseTweakCompat {

constructor()

public static "delegateSlotClick"(arg0: $AbstractContainerScreen$Type<(any)>, arg1: $Slot$Type, arg2: $MouseButton$Type, arg3: boolean, arg4: $MouseTweakCompat$Click$Type): boolean
public static "wrapSlotGet"(arg0: $ItemStack$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MouseTweakCompat$Type = ($MouseTweakCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MouseTweakCompat_ = $MouseTweakCompat$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffectData" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ConditionalToken, $ConditionalToken$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$ConditionalToken"

export class $SetEffectData extends $ConditionalToken {
 "life": integer
 "rank": integer

constructor()

public "update"(arg0: integer, arg1: integer): void
public "tick"(arg0: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetEffectData$Type = ($SetEffectData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetEffectData_ = $SetEffectData$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/upgrades/$UpgradeEnhanceItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RankedItem, $RankedItem$Type} from "packages/dev/xkmc/l2artifacts/content/core/$RankedItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UpgradeEnhanceItem extends $RankedItem {
readonly "rank": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeEnhanceItem$Type = ($UpgradeEnhanceItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeEnhanceItem_ = $UpgradeEnhanceItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemTabGroup, $GolemTabGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabGroup"
import {$GolemTabToken$TabFactory, $GolemTabToken$TabFactory$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken$TabFactory"
import {$GolemTabBase, $GolemTabBase$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase"
import {$GolemTabType, $GolemTabType$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"

export class $GolemTabToken<G extends $GolemTabGroup<(G)>, T extends $GolemTabBase<(G), (T)>> {
readonly "factory": $GolemTabToken$TabFactory<(G), (T)>
readonly "type": $GolemTabType

constructor(arg0: $GolemTabToken$TabFactory$Type<(G), (T)>, arg1: $Supplier$Type<($Item$Type)>, arg2: $Component$Type)

public "create"(arg0: integer, arg1: $GolemTabManager$Type<(G)>): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTabToken$Type<G, T> = ($GolemTabToken<(G), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTabToken_<G, T> = $GolemTabToken$Type<(G), (T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$SyncContainer" {
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SyncContainer {
readonly "players": $Map<($UUID), (long)>

constructor()

public "clientReplace"(arg0: $SyncContainer$Type): void
public "sendToAllTracking"(arg0: $ServerLevel$Type, arg1: $SerialPacketBase$Type): void
public "clientTick"(arg0: $GolemConfigEntry$Type, arg1: $Level$Type, arg2: boolean): void
public "serverUpdate"(arg0: $ServerLevel$Type): void
public "heartBeat"(arg0: $ServerLevel$Type, arg1: $UUID$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncContainer$Type = ($SyncContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncContainer_ = $SyncContainer$Type;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar" {
import {$SideBar$Signature, $SideBar$Signature$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar$Signature"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$SelectionSideBar$Context, $SelectionSideBar$Context$Type} from "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar$Context"
import {$SideBar, $SideBar$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $SelectionSideBar<T, S extends $SideBar$Signature<(S)>> extends $SideBar<(S)> implements $IGuiOverlay {

constructor(arg0: float, arg1: float)

public "isAvailable"(arg0: T): boolean
public "onCenter"(): boolean
public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
public "initRender"(): void
public "renderContent"(arg0: $SelectionSideBar$Context$Type): void
public "getItems"(): $Pair<($List<(T)>), (integer)>
get "items"(): $Pair<($List<(T)>), (integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectionSideBar$Type<T, S> = ($SelectionSideBar<(T), (S)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectionSideBar_<T, S> = $SelectionSideBar$Type<(T), (S)>;
}}
declare module "packages/dev/xkmc/l2hostility/init/$L2HostilityClient" {
import {$RegisterGuiOverlaysEvent, $RegisterGuiOverlaysEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterGuiOverlaysEvent"
import {$DifficultyTab, $DifficultyTab$Type} from "packages/dev/xkmc/l2hostility/content/menu/tab/$DifficultyTab"
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$TabToken, $TabToken$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabToken"
import {$RegisterClientReloadListenersEvent, $RegisterClientReloadListenersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientReloadListenersEvent"

export class $L2HostilityClient {
static "TAB_DIFFICULTY": $TabToken<($DifficultyTab)>

constructor()

public static "client"(arg0: $FMLClientSetupEvent$Type): void
public static "clientSetup"(arg0: $FMLClientSetupEvent$Type): void
public static "onResourceReload"(arg0: $RegisterClientReloadListenersEvent$Type): void
public static "registerOverlay"(arg0: $RegisterGuiOverlaysEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2HostilityClient$Type = ($L2HostilityClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2HostilityClient_ = $L2HostilityClient$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$PatchouliClickListener" {
import {$ConcurrentHashMap, $ConcurrentHashMap$Type} from "packages/java/util/concurrent/$ConcurrentHashMap"
import {$SlotClickHandler, $SlotClickHandler$Type} from "packages/dev/xkmc/l2screentracker/click/$SlotClickHandler"
import {$ReadOnlyStackClickHandler, $ReadOnlyStackClickHandler$Type} from "packages/dev/xkmc/l2screentracker/click/$ReadOnlyStackClickHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ItemTooltipEvent, $ItemTooltipEvent$Type} from "packages/net/minecraftforge/event/entity/player/$ItemTooltipEvent"

export class $PatchouliClickListener extends $ReadOnlyStackClickHandler {
static readonly "MAP": $ConcurrentHashMap<($ResourceLocation), ($SlotClickHandler)>

constructor()

public "isAllowed"(arg0: $ItemStack$Type): boolean
public static "tooltipEvent"(arg0: $ItemTooltipEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatchouliClickListener$Type = ($PatchouliClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatchouliClickListener_ = $PatchouliClickListener$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerBlockEntity" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$DrawerAccess, $DrawerAccess$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$DrawerAccess"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IDrawerBlockEntity, $IDrawerBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$IDrawerBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $EnderDrawerBlockEntity extends $IDrawerBlockEntity {
 "owner_id": $UUID
 "owner_name": string
 "item": $Item
 "config": $CompoundTag
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "getAccess"(): $DrawerAccess
public "getItem"(): $Item
public "onLoad"(): void
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "addToListener"(): void
public "removeFromListener"(): void
public "onChunkUnloaded"(): void
public "setRemoved"(): void
get "access"(): $DrawerAccess
get "item"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderDrawerBlockEntity$Type = ($EnderDrawerBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderDrawerBlockEntity_ = $EnderDrawerBlockEntity$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$ResizedLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ResizedLayer<T extends $AbstractGolemEntity<(any), (any)>, M extends $EntityModel<(T)>> extends $RenderLayer<(T), (M)> {

constructor(arg0: $RenderLayerParent$Type<(T), (M)>, arg1: $RenderLayer$Type<(T), (M)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResizedLayer$Type<T, M> = ($ResizedLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResizedLayer_<T, M> = $ResizedLayer$Type<(T), (M)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart" {
import {$CreativeModeTabModifier, $CreativeModeTabModifier$Type} from "packages/com/tterrag/registrate/util/$CreativeModeTabModifier"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$GolemType, $GolemType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IGolemPartItem, $IGolemPartItem$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$IGolemPartItem"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$GolemMaterial, $GolemMaterial$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemMaterial"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GolemPart<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>> extends $Item implements $IGolemPartItem {
static readonly "LIST": $List<($GolemPart<(any), (any)>)>
readonly "count": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($GolemType$Type<(T), (P)>)>, arg2: P, arg3: integer)

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "getEntityType"(): $GolemType<(T), (P)>
public static "getMaterial"(arg0: $ItemStack$Type): $Optional<($ResourceLocation)>
public static "setMaterial"(arg0: $ItemStack$Type, arg1: $ResourceLocation$Type): $ItemStack
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "fillItemCategory"(arg0: $CreativeModeTabModifier$Type): void
public "parseMaterial"(arg0: $ResourceLocation$Type): $GolemMaterial
public "getPart"(): P
public "asPart"(): $GolemPart<(any), (any)>
get "entityType"(): $GolemType<(T), (P)>
get "part"(): P
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemPart$Type<T, P> = ($GolemPart<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemPart_<T, P> = $GolemPart$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$LCCompatRegistry" {
import {$SoulFlameModifier, $SoulFlameModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$SoulFlameModifier"
import {$FreezingModifier, $FreezingModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$FreezingModifier"
import {$ConduitModifier, $ConduitModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$ConduitModifier"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$TargetBonusModifier, $TargetBonusModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$TargetBonusModifier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$PotionAttackModifier, $PotionAttackModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$PotionAttackModifier"
import {$EnderTeleportModifier, $EnderTeleportModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$EnderTeleportModifier"
import {$PotionDefenseModifier, $PotionDefenseModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$PotionDefenseModifier"
import {$SimpleUpgradeItem, $SimpleUpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$SimpleUpgradeItem"

export class $LCCompatRegistry {
static readonly "CONDUIT": $RegistryEntry<($ConduitModifier)>
static readonly "FREEZE": $RegistryEntry<($FreezingModifier)>
static readonly "FLAME": $RegistryEntry<($SoulFlameModifier)>
static readonly "TELEPORT": $RegistryEntry<($EnderTeleportModifier)>
static readonly "CURSE": $RegistryEntry<($PotionAttackModifier)>
static readonly "INCARCERATE": $RegistryEntry<($PotionAttackModifier)>
static readonly "CLEANSE": $RegistryEntry<($PotionDefenseModifier)>
static readonly "POSEIDITE": $RegistryEntry<($TargetBonusModifier)>
static readonly "TOTEMIC_GOLD": $RegistryEntry<($TargetBonusModifier)>
static readonly "FORCE_FIELD": $ItemEntry<($SimpleUpgradeItem)>
static readonly "FREEZE_UP": $ItemEntry<($SimpleUpgradeItem)>
static readonly "FLAME_UP": $ItemEntry<($SimpleUpgradeItem)>
static readonly "TELEPORT_UP": $ItemEntry<($SimpleUpgradeItem)>
static readonly "ATK_UP": $ItemEntry<($SimpleUpgradeItem)>
static readonly "SPEED_UP": $ItemEntry<($SimpleUpgradeItem)>
static readonly "UPGRADE_CURSE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "UPGRADE_INCARCERATE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "UPGRADE_CLEANSE": $ItemEntry<($SimpleUpgradeItem)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCCompatRegistry$Type = ($LCCompatRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCCompatRegistry_ = $LCCompatRegistry$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$SquadConfig" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"

export class $SquadConfig {

constructor()

public "setCaptainId"(arg0: $UUID$Type): void
public "getCaptainId"(): $UUID
public "getRadius"(): double
public "setRadius"(arg0: double): void
set "captainId"(value: $UUID$Type)
get "captainId"(): $UUID
get "radius"(): double
set "radius"(value: double)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SquadConfig$Type = ($SquadConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SquadConfig_ = $SquadConfig$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/botania/$BotUtils" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BotUtils {

constructor(arg0: $LivingEntity$Type)

public "count"(): integer
public static "getDesc"(arg0: $LivingEntity$Type): $Component
public "getMana"(): integer
public "getMaxMana"(): integer
public "generateMana"(arg0: integer): integer
public "consumeMana"(arg0: integer): integer
get "mana"(): integer
get "maxMana"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BotUtils$Type = ($BotUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BotUtils_ = $BotUtils$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/$ModMats" {
import {$IMatToolType, $IMatToolType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatToolType"
import {$IToolStats, $IToolStats$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IToolStats"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$ToolConfig, $ToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ToolConfig"
import {$ITool, $ITool$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ITool"

export class $ModMats extends $Record implements $IMatToolType, $IToolStats {

constructor(tier: $Tier$Type, config: $ExtraToolConfig$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "config"(): $ExtraToolConfig
public "durability"(): integer
public "getToolStats"(): $IToolStats
public "getSpeed"(arg0: $ITool$Type): float
public "getExtraToolConfig"(): $ExtraToolConfig
public "getToolConfig"(): $ToolConfig
public "getDamage"(arg0: $ITool$Type): integer
public "enchant"(): integer
public "speed"(): integer
public "getTier"(): $Tier
public "tier"(): $Tier
get "toolStats"(): $IToolStats
get "extraToolConfig"(): $ExtraToolConfig
get "toolConfig"(): $ToolConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModMats$Type = ($ModMats);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModMats_ = $ModMats$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$BaseThrowableWeaponItem" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IThrowableCallback, $IThrowableCallback$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$IThrowableCallback"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$GenericWeaponItem, $GenericWeaponItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$GenericWeaponItem"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BaseThrowableWeaponItem extends $GenericWeaponItem implements $IThrowableCallback {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type, arg5: $TagKey$Type<($Block$Type)>)

public "getProjectile"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): $BaseThrownWeaponEntity<(any)>
public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "getUseDuration"(arg0: $ItemStack$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "releaseUsing"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type, arg3: integer): void
public "getUseAnimation"(arg0: $ItemStack$Type): $UseAnim
public "onHitBlock"(arg0: $BaseThrownWeaponEntity$Type<(any)>, arg1: $ItemStack$Type): void
public "onHitEntity"(arg0: $BaseThrownWeaponEntity$Type<(any)>, arg1: $ItemStack$Type, arg2: $LivingEntity$Type): void
public static "thunderHit"(arg0: $BaseThrownWeaponEntity$Type<(any)>): void
public "causeThunder"(arg0: $BaseThrownWeaponEntity$Type<(any)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseThrowableWeaponItem$Type = ($BaseThrowableWeaponItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseThrowableWeaponItem_ = $BaseThrowableWeaponItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemTabGroup, $GolemTabGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabGroup"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $GolemTabBase<G extends $GolemTabGroup<(G)>, T extends $GolemTabBase<(G), (T)>> extends $Button {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $GolemTabToken<(G), (T)>
readonly "manager": $GolemTabManager<(G)>
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $GolemTabToken$Type<(G), (T)>, arg2: $GolemTabManager$Type<(G)>, arg3: $ItemStack$Type, arg4: $Component$Type)

public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "onTabClicked"(): void
public "onTooltip"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTabBase$Type<G, T> = ($GolemTabBase<(G), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTabBase_<G, T> = $GolemTabBase$Type<(G), (T)>;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu$BaseContainer" {
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $BaseContainerMenu$BaseContainer<T extends $BaseContainerMenu<(T)>> extends $SimpleContainer {

constructor(arg0: integer, arg1: T)

public "setChanged"(): void
public "getMaxStackSize"(): integer
public "setMax"(arg0: integer): $BaseContainerMenu$BaseContainer<(T)>
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "maxStackSize"(): integer
set "max"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseContainerMenu$BaseContainer$Type<T> = ($BaseContainerMenu$BaseContainer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseContainerMenu$BaseContainer_<T> = $BaseContainerMenu$BaseContainer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$Stage" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Stage extends $Enum<($Stage)> {
static readonly "PREINIT": $Stage
static readonly "PLAYER_ATTACK": $Stage
static readonly "CRITICAL_HIT": $Stage
static readonly "HURT_PRE": $Stage
static readonly "HURT_POST": $Stage
static readonly "ACTUALLY_HURT_PRE": $Stage
static readonly "ACTUALLY_HURT_POST": $Stage
static readonly "DAMAGE": $Stage


public static "values"(): ($Stage)[]
public static "valueOf"(arg0: string): $Stage
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Stage$Type = (("preinit") | ("player_attack") | ("damage") | ("critical_hit") | ("hurt_pre") | ("actually_hurt_post") | ("hurt_post") | ("actually_hurt_pre")) | ($Stage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Stage_ = $Stage$Type;
}}
declare module "packages/dev/xkmc/l2library/init/$L2Library" {
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$RegisterCapabilitiesEvent, $RegisterCapabilitiesEvent$Type} from "packages/net/minecraftforge/common/capabilities/$RegisterCapabilitiesEvent"
import {$PacketHandlerWithConfig, $PacketHandlerWithConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig"
import {$RegisterEvent, $RegisterEvent$Type} from "packages/net/minecraftforge/registries/$RegisterEvent"
import {$ConfigTypeEntry, $ConfigTypeEntry$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigTypeEntry"
import {$MenuLayoutConfig, $MenuLayoutConfig$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig"

export class $L2Library {
static readonly "MODID": string
static readonly "LOGGER": $Logger
static readonly "REGISTRATE": $L2Registrate
static readonly "PACKET_HANDLER": $PacketHandlerWithConfig
static readonly "MENU_LAYOUT": $ConfigTypeEntry<($MenuLayoutConfig)>

constructor()

public static "registerCaps"(arg0: $RegisterCapabilitiesEvent$Type): void
public static "registerRecipeSerializers"(arg0: $RegisterEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Library$Type = ($L2Library);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Library_ = $L2Library$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/upgrade/$UpgradeTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export class $UpgradeTab extends $FilterTabBase<($UpgradeTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $FilterTabToken<(T)>
readonly "manager": $FilterTabManager
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $FilterTabToken$Type<($UpgradeTab$Type)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeTab$Type = ($UpgradeTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeTab_ = $UpgradeTab$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$PartCraftTrigger$Ins" {
import {$PartCraftTrigger, $PartCraftTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$PartCraftTrigger"
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $PartCraftTrigger$Ins extends $BaseCriterionInstance<($PartCraftTrigger$Ins), ($PartCraftTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PartCraftTrigger$Ins$Type = ($PartCraftTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PartCraftTrigger$Ins_ = $PartCraftTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$BaseBagItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$InsertOnlyItem, $InsertOnlyItem$Type} from "packages/dev/xkmc/l2backpack/content/insert/$InsertOnlyItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$PickupBagItem, $PickupBagItem$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupBagItem"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TooltipInvItem, $TooltipInvItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$TooltipInvItem"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$ContentTransfer$Quad, $ContentTransfer$Quad$Type} from "packages/dev/xkmc/l2backpack/content/common/$ContentTransfer$Quad"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BaseBagItem extends $Item implements $ContentTransfer$Quad, $PickupBagItem, $InsertOnlyItem, $TooltipInvItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "open"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type): void
public "isValidContent"(arg0: $ItemStack$Type): boolean
public "getRows"(arg0: $ItemStack$Type): integer
public "getEquipmentSlot"(arg0: $ItemStack$Type): $EquipmentSlot
public static "getListTag"(arg0: $ItemStack$Type): $ListTag
public static "setListTag"(arg0: $ItemStack$Type, arg1: $ListTag$Type): void
public static "isOpened"(arg0: $ItemStack$Type, arg1: $ClientLevel$Type, arg2: $LivingEntity$Type, arg3: integer): float
public "getInvSize"(arg0: $ItemStack$Type): integer
public static "checkLootGen"(arg0: $ItemStack$Type, arg1: $Player$Type): void
public "getInvItems"(arg0: $ItemStack$Type, arg1: $Player$Type): $List<($ItemStack)>
public static "setItems"(arg0: $ItemStack$Type, arg1: $List$Type<($ItemStack$Type)>): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "getTooltipImage"(arg0: $ItemStack$Type): $Optional<($TooltipComponent)>
public "canEquip"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public static "getTimeStamp"(arg0: $ItemStack$Type): long
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
public "checkInit"(arg0: $ItemStack$Type): void
public static "getItems"(arg0: $ItemStack$Type): $List<($ItemStack)>
public "click"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: boolean, arg3: boolean, arg4: boolean, arg5: $IItemHandler$Type): void
public "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
public "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
public "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
public "mayClientTake"(): boolean
public "getRowSize"(): integer
public "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
public "getInvCap"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $IItemHandler
public "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
get "rowSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseBagItem$Type = ($BaseBagItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseBagItem_ = $BaseBagItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemDisableShieldEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemItemUseEvent, $GolemItemUseEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemItemUseEvent"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GolemDisableShieldEvent extends $GolemItemUseEvent {

constructor()
constructor(arg0: $HumanoidGolemEntity$Type, arg1: $ItemStack$Type, arg2: $InteractionHand$Type, arg3: $LivingEntity$Type, arg4: boolean)

public "getSource"(): $LivingEntity
public "setDisabled"(arg0: boolean): void
public "shouldDisable"(): boolean
public "getListenerList"(): $ListenerList
get "source"(): $LivingEntity
set "disabled"(value: boolean)
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemDisableShieldEvent$Type = ($GolemDisableShieldEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemDisableShieldEvent_ = $GolemDisableShieldEvent$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$QuickSwapOverlay" {
import {$ISwapEntry, $ISwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISwapEntry"
import {$QuickSwapOverlay$BackpackSignature, $QuickSwapOverlay$BackpackSignature$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$QuickSwapOverlay$BackpackSignature"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$SelectionSideBar, $SelectionSideBar$Type} from "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar"
import {$SelectionSideBar$Context, $SelectionSideBar$Context$Type} from "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar$Context"

export class $QuickSwapOverlay extends $SelectionSideBar<($ISwapEntry<(any)>), ($QuickSwapOverlay$BackpackSignature)> {
static "INSTANCE": $QuickSwapOverlay

constructor()

public "getSignature"(): $QuickSwapOverlay$BackpackSignature
public "isAvailable"(arg0: $ISwapEntry$Type<(any)>): boolean
public static "activePopup"(arg0: $QuickSwapType$Type): boolean
public "onCenter"(): boolean
public static "hasShiftDown"(): boolean
public "isScreenOn"(): boolean
public static "hasAltDown"(): boolean
public "renderContent"(arg0: $SelectionSideBar$Context$Type): void
public "getItems"(): $Pair<($List<($ISwapEntry<(any)>)>), (integer)>
get "signature"(): $QuickSwapOverlay$BackpackSignature
get "screenOn"(): boolean
get "items"(): $Pair<($List<($ISwapEntry<(any)>)>), (integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuickSwapOverlay$Type = ($QuickSwapOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuickSwapOverlay_ = $QuickSwapOverlay$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemKillTrigger" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$GolemKillTrigger$Ins, $GolemKillTrigger$Ins$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemKillTrigger$Ins"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $GolemKillTrigger extends $BaseCriterion<($GolemKillTrigger$Ins), ($GolemKillTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $Entity$Type): void
public static "ins"(): $GolemKillTrigger$Ins
public static "byType"(arg0: $EntityType$Type<(any)>): $GolemKillTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemKillTrigger$Type = ($GolemKillTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemKillTrigger_ = $GolemKillTrigger$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$ContentTransfer" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$ContentTransfer$Quad, $ContentTransfer$Quad$Type} from "packages/dev/xkmc/l2backpack/content/common/$ContentTransfer$Quad"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ContentTransfer {

constructor()

public static "transfer"(arg0: $Item$Type, arg1: integer, arg2: $IItemHandler$Type): integer
public static "transfer"(arg0: $List$Type<($ItemStack$Type)>, arg1: $IItemHandler$Type): integer
public static "onCollect"(arg0: $Player$Type, arg1: integer, arg2: $ItemStack$Type): void
public static "onExtract"(arg0: $Player$Type, arg1: integer, arg2: $ItemStack$Type): void
public static "filterMaxItem"(arg0: $IItemHandler$Type): $Item
public static "playDrawerSound"(arg0: $Player$Type): void
public static "loadFrom"(arg0: $Item$Type, arg1: integer, arg2: $IItemHandler$Type): integer
public static "loadFrom"(arg0: $List$Type<($ItemStack$Type)>, arg1: $IItemHandler$Type, arg2: $Player$Type, arg3: $Predicate$Type<($ItemStack$Type)>): integer
public static "onLoad"(arg0: $Player$Type, arg1: integer, arg2: $ItemStack$Type): void
public static "onDump"(arg0: $Player$Type, arg1: integer, arg2: $ItemStack$Type): void
public static "blockInteract"(arg0: $UseOnContext$Type, arg1: $ContentTransfer$Quad$Type): $InteractionResult
public static "leftClick"(arg0: $ContentTransfer$Quad$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $ItemStack$Type, arg4: $Player$Type): void
public static "playSound"(arg0: $Player$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContentTransfer$Type = ($ContentTransfer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContentTransfer_ = $ContentTransfer$Type;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$SideBar$Signature" {
import {$SideBar, $SideBar$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar"

export interface $SideBar$Signature<S extends $SideBar$Signature<(S)>> {

 "shouldRefreshIdle"(arg0: $SideBar$Type<(any)>, arg1: S): boolean

(arg0: $SideBar$Type<(any)>, arg1: S): boolean
}

export namespace $SideBar$Signature {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SideBar$Signature$Type<S> = ($SideBar$Signature<(S)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SideBar$Signature_<S> = $SideBar$Signature$Type<(S)>;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$RecipeGen" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InventoryChangeTrigger$TriggerInstance, $InventoryChangeTrigger$TriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$InventoryChangeTrigger$TriggerInstance"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $RecipeGen {

constructor()

public static "unlock"<T>(arg0: $RegistrateRecipeProvider$Type, arg1: $BiFunction$Type<(string), ($InventoryChangeTrigger$TriggerInstance$Type), (T)>, arg2: $Item$Type): T
public static "getID"(arg0: $ItemLike$Type): $ResourceLocation
public static "smithing"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: $Item$Type): void
public static "smithing"(arg0: $RegistrateRecipeProvider$Type, arg1: $TagKey$Type<($Item$Type)>, arg2: $Item$Type, arg3: $Item$Type): void
public static "smelting"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: float): void
public static "blasting"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: float): void
public static "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public static "recycle"(arg0: $RegistrateRecipeProvider$Type, arg1: $TagKey$Type<($Item$Type)>, arg2: $Item$Type, arg3: float): void
public static "storage"(arg0: $RegistrateRecipeProvider$Type, arg1: $NonNullSupplier$Type<($ItemLike$Type)>, arg2: $NonNullSupplier$Type<($ItemLike$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeGen$Type = ($RecipeGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeGen_ = $RecipeGen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/filter/$ItemConfigMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$GhostItemMenu, $GhostItemMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$GhostItemMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$MenuLayoutConfig, $MenuLayoutConfig$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig"

export class $ItemConfigMenu extends $GhostItemMenu {
static readonly "MANAGER": $SpriteManager
readonly "sprite": $MenuLayoutConfig
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public static "fromNetwork"(arg0: $MenuType$Type<($ItemConfigMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $ItemConfigMenu
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemConfigMenu$Type = ($ItemConfigMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemConfigMenu_ = $ItemConfigMenu$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/traits/$TraitSymbol" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TraitSymbol extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "get"(): $MobTrait
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitSymbol$Type = ($TraitSymbol);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitSymbol_ = $TraitSymbol$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/misc/$RandomArtifactItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$RankedItem, $RankedItem$Type} from "packages/dev/xkmc/l2artifacts/content/core/$RankedItem"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RandomArtifactItem extends $RankedItem {
readonly "rank": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "setList"(arg0: integer, arg1: $Collection$Type<($SetEntry$Type<(any)>)>): $ItemStack
public static "getRandomArtifact"(arg0: $ItemStack$Type, arg1: integer, arg2: $RandomSource$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomArtifactItem$Type = ($RandomArtifactItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomArtifactItem_ = $RandomArtifactItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v2/$FrozeBreakEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $FrozeBreakEffect extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrozeBreakEffect$Type = ($FrozeBreakEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrozeBreakEffect_ = $FrozeBreakEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$GolemModifier$HealingContext, $GolemModifier$HealingContext$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier$HealingContext"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$GolemType, $GolemType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemType"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $GolemModifier extends $NamedEntry<($GolemModifier)> {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $StatFilterType$Type, arg1: integer)

public "handleEvent"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer, arg2: byte): void
public "getTooltip"(arg0: integer): $Component
public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "fitsOn"(arg0: $GolemType$Type<(any), (any)>): boolean
public "interact"(arg0: $Player$Type, arg1: $AbstractGolemEntity$Type<(any), (any)>, arg2: $InteractionHand$Type): $InteractionResult
public "onInventoryHealTick"(arg0: double, arg1: $GolemModifier$HealingContext$Type, arg2: integer): double
public "modifySource"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $CreateSourceEvent$Type, arg2: integer): void
public "onDamaged"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingDamageEvent$Type, arg2: integer): void
public "onAiStep"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer): void
public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
public "onRegisterGoals"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer, arg2: $BiConsumer$Type<(integer), ($Goal$Type)>): void
public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
public "modifyDamage"(arg0: $AttackCache$Type, arg1: $AbstractGolemEntity$Type<(any), (any)>, arg2: integer): void
public "onGolemSpawn"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer): void
public "onHealTick"(arg0: double, arg1: $AbstractGolemEntity$Type<(any), (any)>, arg2: integer): double
public "onAttackTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
public "onSetTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $Mob$Type, arg2: integer): void
public "canExistOn"(arg0: $GolemPart$Type<(any), (any)>): boolean
public "onClientTick"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer): void
public "addSlot"(arg0: $List$Type<($UpgradeItem$Type)>, arg1: integer): integer
public "onHurtTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
public "onHurt"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemModifier$Type = ($GolemModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemModifier_ = $GolemModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/ranged/$GolemBowAttackGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $GolemBowAttackGoal extends $Goal {

constructor(arg0: $HumanoidGolemEntity$Type, arg1: double, arg2: integer, arg3: float)

public "setMinAttackInterval"(arg0: integer): void
public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
set "minAttackInterval"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemBowAttackGoal$Type = ($GolemBowAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemBowAttackGoal_ = $GolemBowAttackGoal$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/capability/$LWPlayerData" {
import {$IShieldData, $IShieldData$Type} from "packages/dev/xkmc/l2weaponry/content/capability/$IShieldData"
import {$PlayerCapabilityHolder, $PlayerCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerCapabilityTemplate, $PlayerCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $LWPlayerData extends $PlayerCapabilityTemplate<($LWPlayerData)> implements $IShieldData {
static readonly "CAPABILITY": $Capability<($LWPlayerData)>
static readonly "HOLDER": $PlayerCapabilityHolder<($LWPlayerData)>
 "player": $Player
 "world": $Level

constructor()

public static "register"(): void
public "tick"(): void
public "getRecoverRate"(): double
public "startReflectTimer"(): void
public "canReflect"(): boolean
public "setShieldDefense"(arg0: double): void
public "getReflectTimer"(): integer
public "getShieldDefense"(): double
public "popRetain"(): double
public "clearReflectTimer"(): void
get "recoverRate"(): double
set "shieldDefense"(value: double)
get "reflectTimer"(): integer
get "shieldDefense"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWPlayerData$Type = ($LWPlayerData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWPlayerData_ = $LWPlayerData$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapMenuPvd" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ArtifactSwapMenuPvd extends $Record implements $MenuProvider {

constructor(player: $ServerPlayer$Type, slot: integer, stack: $ItemStack$Type)

public "slot"(): integer
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "open"(): void
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public "player"(): $ServerPlayer
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSwapMenuPvd$Type = ($ArtifactSwapMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSwapMenuPvd_ = $ArtifactSwapMenuPvd$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/client/overlay/$GolemStatusOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $GolemStatusOverlay implements $IGuiOverlay {

constructor()

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemStatusOverlay$Type = ($GolemStatusOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemStatusOverlay_ = $GolemStatusOverlay$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemDamageShieldEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemItemUseEvent, $GolemItemUseEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemItemUseEvent"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $GolemDamageShieldEvent extends $GolemItemUseEvent {

constructor()
constructor(arg0: $HumanoidGolemEntity$Type, arg1: $ItemStack$Type, arg2: $InteractionHand$Type, arg3: double, arg4: integer)

public "setCost"(arg0: integer): void
public "getDamage"(): double
public "getCost"(): integer
public "getListenerList"(): $ListenerList
set "cost"(value: integer)
get "damage"(): double
get "cost"(): integer
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemDamageShieldEvent$Type = ($GolemDamageShieldEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemDamageShieldEvent_ = $GolemDamageShieldEvent$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/restore/$BackpackTrace" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$LayerPopType, $LayerPopType$Type} from "packages/dev/xkmc/l2screentracker/screen/base/$LayerPopType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemBasedTrace, $ItemBasedTrace$Type} from "packages/dev/xkmc/l2screentracker/screen/track/$ItemBasedTrace"

export class $BackpackTrace extends $ItemBasedTrace {

constructor()

public "restore"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type, arg3: $Component$Type): $LayerPopType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackTrace$Type = ($BackpackTrace);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackTrace_ = $BackpackTrace$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/merged/$EnderSwitchCaps" {
import {$BaseBagInvWrapper, $BaseBagInvWrapper$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagInvWrapper"
import {$PickupTrace, $PickupTrace$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $EnderSwitchCaps extends $BaseBagInvWrapper {

constructor(arg0: $ItemStack$Type)

public "doPickup"(arg0: $ItemStack$Type, arg1: $PickupTrace$Type): integer
public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderSwitchCaps$Type = ($EnderSwitchCaps);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderSwitchCaps_ = $EnderSwitchCaps$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/armorswap/$ArmorSetBagSlot" {
import {$BagSlot, $BagSlot$Type} from "packages/dev/xkmc/l2backpack/content/common/$BagSlot"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandlerModifiable, $IItemHandlerModifiable$Type} from "packages/net/minecraftforge/items/$IItemHandlerModifiable"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ArmorSetBagSlot extends $BagSlot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $IItemHandlerModifiable$Type, arg1: integer, arg2: integer, arg3: integer)

public "getNoItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
get "noItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorSetBagSlot$Type = ($ArmorSetBagSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorSetBagSlot_ = $ArmorSetBagSlot$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/mob/$MinionData" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$EntityConfig$Minion, $EntityConfig$Minion$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$Minion"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $MinionData {
 "uuid": $UUID
 "id": integer
 "linkDistance": double
 "protectMaster": boolean
 "discardOnUnlink": boolean
 "master": $Mob

constructor()

public "init"(arg0: $Mob$Type, arg1: $EntityConfig$Minion$Type): $MinionData
public "tick"(arg0: $LivingEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinionData$Type = ($MinionData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinionData_ = $MinionData$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/wand/$WinterStormWand" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WinterStormWand extends $Item {
static readonly "RANGE": integer
static readonly "CHARGE": integer
static readonly "SIZE_0": integer
static readonly "SIZE_1": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getUseDuration"(arg0: $ItemStack$Type): integer
public "onUseTick"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "releaseUsing"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type, arg3: integer): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getUseAnimation"(arg0: $ItemStack$Type): $UseAnim
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WinterStormWand$Type = ($WinterStormWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WinterStormWand_ = $WinterStormWand$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$RankFilter" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$LangData, $LangData$Type} from "packages/dev/xkmc/l2artifacts/init/data/$LangData"
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$GenericItemStack, $GenericItemStack$Type} from "packages/dev/xkmc/l2library/util/code/$GenericItemStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IArtifactFilter, $IArtifactFilter$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFilter"
import {$ArtifactFilter, $ArtifactFilter$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactFilter"
import {$RankToken, $RankToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$RankToken"

export class $RankFilter extends $ArtifactFilter<($RankToken)> {
readonly "allEntries": $List<(T)>

constructor(arg0: $IArtifactFilter$Type, arg1: $LangData$Type)

public "getPriority"(arg0: integer): integer
public "getComparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
public "prioritize"(arg0: integer): void
get "comparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RankFilter$Type = ($RankFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RankFilter_ = $RankFilter$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/equipment/$EquipmentsScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EquipmentsMenu, $EquipmentsMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/equipment/$EquipmentsMenu"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ITabScreen, $ITabScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$ITabScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $EquipmentsScreen extends $BaseContainerScreen<($EquipmentsMenu)> implements $ITabScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $EquipmentsMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "screenHeight"(): integer
public "screenWidth"(): integer
public "asScreen"(): $Screen
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentsScreen$Type = ($EquipmentsScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentsScreen_ = $EquipmentsScreen$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/$EffectToClient" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $EffectToClient extends $SerialPacketBase {
 "entity": integer
 "effect": $MobEffect
 "exist": boolean
 "level": integer

constructor(arg0: integer, arg1: $MobEffect$Type, arg2: boolean, arg3: integer)
/**
 * 
 * @deprecated
 */
constructor()

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectToClient$Type = ($EffectToClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectToClient_ = $EffectToClient$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$RankToken" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$IArtifactFeature$Sprite, $IArtifactFeature$Sprite$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature$Sprite"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $RankToken extends $Record implements $IArtifactFeature$Sprite {
static readonly "ALL_RANKS": $List<($RankToken)>

constructor(rank: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getDesc"(): $MutableComponent
public "rank"(): integer
public "getIcon"(): $ResourceLocation
public "getTooltipItems"(): $NonNullList<($ItemStack)>
get "desc"(): $MutableComponent
get "icon"(): $ResourceLocation
get "tooltipItems"(): $NonNullList<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RankToken$Type = ($RankToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RankToken_ = $RankToken$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/client/armor/$GolemModelPaths" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GolemModelPaths {
static readonly "HELMETS": $ResourceLocation
static readonly "CHESTPLATES": $ResourceLocation
static readonly "LEGGINGS": $ResourceLocation

constructor()

public static "modLoc"(arg0: string): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemModelPaths$Type = ($GolemModelPaths);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemModelPaths_ = $GolemModelPaths$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/dragons/$FireDragonBoneTool" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $FireDragonBoneTool extends $ExtraToolConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "onHit"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireDragonBoneTool$Type = ($FireDragonBoneTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireDragonBoneTool_ = $FireDragonBoneTool$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$GolemTabGroup, $GolemTabGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabGroup"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ITabScreen, $ITabScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$ITabScreen"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $GolemTabManager<G extends $GolemTabGroup<(G)>> {
readonly "screen": $ITabScreen
readonly "token": G
 "tabPage": integer
 "selected": $GolemTabToken<(G), (any)>

constructor(arg0: $ITabScreen$Type, arg1: G)

public "init"(arg0: $Consumer$Type<($AbstractWidget$Type)>, arg1: $GolemTabToken$Type<(G), (any)>): void
public "getScreen"(): $Screen
public "onToolTipRender"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer): void
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTabManager$Type<G> = ($GolemTabManager<(G)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTabManager_<G> = $GolemTabManager$Type<(G)>;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/weapon/$CurseBladeEnchantment" {
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$AbstractBladeEnchantment, $AbstractBladeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/weapon/$AbstractBladeEnchantment"

export class $CurseBladeEnchantment extends $AbstractBladeEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseBladeEnchantment$Type = ($CurseBladeEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseBladeEnchantment_ = $CurseBladeEnchantment$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/registry/$EquipmentGroup" {
import {$GolemTabGroup, $GolemTabGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabGroup"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $EquipmentGroup extends $GolemTabGroup<($EquipmentGroup)> {
 "golem": $AbstractGolemEntity<(any), (any)>

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentGroup$Type = ($EquipmentGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentGroup_ = $EquipmentGroup$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/core/$GolemType" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EntityEntry, $EntityEntry$Type} from "packages/com/tterrag/registrate/util/entry/$EntityEntry"
import {$GolemHolder, $GolemHolder$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemHolder"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$ModelProvider, $ModelProvider$Type} from "packages/dev/xkmc/modulargolems/content/core/$ModelProvider"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"

export class $GolemType<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>> extends $NamedEntry<($GolemType<(any), (any)>)> {
static readonly "GOLEM_TYPE_TO_ITEM": $HashMap<($ResourceLocation), ($GolemHolder<(any), (any)>)>
static readonly "GOLEM_TYPE_TO_MODEL": $HashMap<($ResourceLocation), ($Supplier<($ModelProvider<(any), (any)>)>)>

constructor(arg0: $EntityEntry$Type<(T)>, arg1: $Supplier$Type<((P)[])>, arg2: P, arg3: $Supplier$Type<($ModelProvider$Type<(T), (P)>)>)

public "type"(): $EntityType<(any)>
public "values"(): (P)[]
public "create"(arg0: $ServerLevel$Type, arg1: $CompoundTag$Type): T
public "create"(arg0: $Level$Type): T
public static "getGolemType"<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>>(arg0: $EntityType$Type<(T)>): $GolemType<(T), (P)>
public static "getGolemHolder"<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>>(arg0: $GolemType$Type<(T), (any)>): $GolemHolder<(T), (P)>
public static "getGolemHolder"<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>>(arg0: $EntityType$Type<(T)>): $GolemHolder<(T), (P)>
public "createForDisplay"(arg0: $CompoundTag$Type): T
public "getBodyPart"(): P
get "bodyPart"(): P
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemType$Type<T, P> = ($GolemType<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemType_<T, P> = $GolemType$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$DivinityCross" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EffectValidItem, $EffectValidItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$EffectValidItem"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$MultiSlotItem, $MultiSlotItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$MultiSlotItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DivinityCross extends $MultiSlotItem implements $EffectValidItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isEffectValid"(arg0: $MobEffectInstance$Type, arg1: $ItemStack$Type, arg2: $LivingEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DivinityCross$Type = ($DivinityCross);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DivinityCross_ = $DivinityCross$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$MenuLayoutConfig$ScreenRenderer, $MenuLayoutConfig$ScreenRenderer$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$ScreenRenderer"
import {$MenuLayoutConfig$SlotAcceptor, $MenuLayoutConfig$SlotAcceptor$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$SlotAcceptor"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$MenuLayoutConfig$Rect, $MenuLayoutConfig$Rect$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$Rect"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MenuLayoutConfig$SlotFactory, $MenuLayoutConfig$SlotFactory$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$SlotFactory"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $MenuLayoutConfig extends $BaseConfig {
 "height": integer
 "side": $HashMap<(string), ($MenuLayoutConfig$Rect)>
 "comp": $HashMap<(string), ($MenuLayoutConfig$Rect)>

/**
 * 
 * @deprecated
 */
constructor()

public "getSlot"<T extends $Slot>(arg0: string, arg1: $MenuLayoutConfig$SlotFactory$Type<(T)>, arg2: $MenuLayoutConfig$SlotAcceptor$Type): void
public "getSide"(arg0: string): $MenuLayoutConfig$Rect
public "getTexture"(): $ResourceLocation
public "getWidth"(): integer
public "getHeight"(): integer
public "getRenderer"(arg0: $Screen$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): $MenuLayoutConfig$ScreenRenderer
public "getRenderer"(arg0: $AbstractContainerScreen$Type<(any)>): $MenuLayoutConfig$ScreenRenderer
public "getComp"(arg0: string): $MenuLayoutConfig$Rect
public "getPlInvX"(): integer
public "getPlInvY"(): integer
public "within"(arg0: string, arg1: double, arg2: double): boolean
get "texture"(): $ResourceLocation
get "width"(): integer
get "height"(): integer
get "plInvX"(): integer
get "plInvY"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuLayoutConfig$Type = ($MenuLayoutConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuLayoutConfig_ = $MenuLayoutConfig$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$ItemOnBackItem" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ItemOnBackItem {

 "shouldRender"(): boolean
}

export namespace $ItemOnBackItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemOnBackItem$Type = ($ItemOnBackItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemOnBackItem_ = $ItemOnBackItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$IArtifactFeature$Sprite, $IArtifactFeature$Sprite$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature$Sprite"
import {$ArtifactStats, $ArtifactStats$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactStats"
import {$ArtifactSlotCuriosType, $ArtifactSlotCuriosType$Type} from "packages/dev/xkmc/l2artifacts/init/data/$ArtifactSlotCuriosType"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Upgrade, $Upgrade$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$Upgrade"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ArtifactSlot extends $NamedEntry<($ArtifactSlot)> implements $IArtifactFeature$Sprite {

constructor(arg0: $ArtifactSlotCuriosType$Type)

public "generate"(arg0: $ArtifactStats$Type, arg1: $Upgrade$Type, arg2: $RandomSource$Type): void
public "getCurioIdentifier"(): string
public "getIcon"(): $ResourceLocation
public "getTooltipItems"(): $NonNullList<($ItemStack)>
get "curioIdentifier"(): string
get "icon"(): $ResourceLocation
get "tooltipItems"(): $NonNullList<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSlot$Type = ($ArtifactSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSlot_ = $ArtifactSlot$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/data/$LongDataSlot" {
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"

export class $LongDataSlot {

constructor(arg0: $AbstractContainerMenu$Type)

public "get"(): long
public "set"(arg0: long): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongDataSlot$Type = ($LongDataSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongDataSlot_ = $LongDataSlot$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityHolder" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$GeneralCapabilityTemplate, $GeneralCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityTemplate"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$GeneralCapabilitySerializer, $GeneralCapabilitySerializer$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilitySerializer"

export class $GeneralCapabilityHolder<E extends $ICapabilityProvider, T extends $GeneralCapabilityTemplate<(E), (T)>> {
static readonly "INTERNAL_MAP": $Map<($ResourceLocation), ($GeneralCapabilityHolder<(any), (any)>)>
readonly "capability": $Capability<(T)>
readonly "id": $ResourceLocation
readonly "holder_class": $Class<(T)>
readonly "entity_class": $Class<(E)>
readonly "sup": $Supplier<(T)>

constructor(arg0: $ResourceLocation$Type, arg1: $Capability$Type<(T)>, arg2: $Class$Type<(T)>, arg3: $Supplier$Type<(T)>, arg4: $Class$Type<(E)>, arg5: $Predicate$Type<(E)>)

public "get"(arg0: E): T
public "isProper"(arg0: E): boolean
public "generateSerializer"(arg0: E): $GeneralCapabilitySerializer<(E), (T)>
public "shouldHaveCap"(arg0: E): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeneralCapabilityHolder$Type<E, T> = ($GeneralCapabilityHolder<(E), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeneralCapabilityHolder_<E, T> = $GeneralCapabilityHolder$Type<(E), (T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v3/$PlayerLight" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $PlayerLight {

constructor()

public static "playerLight"(arg0: $LivingEntity$Type): integer
public static "playerUnderSun"(arg0: $LivingEntity$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerLight$Type = ($PlayerLight);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerLight_ = $PlayerLight$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/registrate/$LWItems" {
import {$AbyssHammer, $AbyssHammer$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$AbyssHammer"
import {$EnderJavelin, $EnderJavelin$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$EnderJavelin"
import {$AbyssAxe, $AbyssAxe$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$AbyssAxe"
import {$BloodClaw, $BloodClaw$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$BloodClaw"
import {$CheaterClaw, $CheaterClaw$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$CheaterClaw"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnderMachete, $EnderMachete$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$EnderMachete"
import {$EnderDagger, $EnderDagger$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$EnderDagger"
import {$FlameAxe, $FlameAxe$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$FlameAxe"
import {$FrozenSpear, $FrozenSpear$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$FrozenSpear"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlackAxe, $BlackAxe$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$BlackAxe"
import {$CheaterMachete, $CheaterMachete$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$CheaterMachete"
import {$HolyHammer, $HolyHammer$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$HolyHammer"
import {$BlackHammer, $BlackHammer$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$BlackHammer"
import {$HolyAxe, $HolyAxe$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$HolyAxe"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EnderSpear, $EnderSpear$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$EnderSpear"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$StormJavelin, $StormJavelin$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$StormJavelin"
import {$AbyssMachete, $AbyssMachete$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$AbyssMachete"
import {$AbyssDagger, $AbyssDagger$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$AbyssDagger"

export class $LWItems {
static readonly "BLOCK_DECO": $List<($Item)>
static readonly "THROW_DECO": $List<($Item)>
static readonly "CLAW_DECO": $List<($Item)>
static readonly "NUNCHAKU_DECO": $List<($Item)>
static readonly "TAB": $RegistryEntry<($CreativeModeTab)>
static readonly "SHIELD_DEFENSE": $RegistryEntry<($Attribute)>
static readonly "REFLECT_TIME": $RegistryEntry<($Attribute)>
static readonly "HANDLE": $ItemEntry<($Item)>
static readonly "STORM_JAVELIN": $ItemEntry<($StormJavelin)>
static readonly "FLAME_AXE": $ItemEntry<($FlameAxe)>
static readonly "FROZEN_SPEAR": $ItemEntry<($FrozenSpear)>
static readonly "BLACK_HAMMER": $ItemEntry<($BlackHammer)>
static readonly "ENDER_SPEAR": $ItemEntry<($EnderSpear)>
static readonly "ENDER_JAVELIN": $ItemEntry<($EnderJavelin)>
static readonly "ENDER_DAGGER": $ItemEntry<($EnderDagger)>
static readonly "ENDER_MACHETE": $ItemEntry<($EnderMachete)>
static readonly "ABYSS_DAGGER": $ItemEntry<($AbyssDagger)>
static readonly "ABYSS_MACHETE": $ItemEntry<($AbyssMachete)>
static readonly "ABYSS_HAMMER": $ItemEntry<($AbyssHammer)>
static readonly "ABYSS_AXE": $ItemEntry<($AbyssAxe)>
static readonly "BLACK_AXE": $ItemEntry<($BlackAxe)>
static readonly "BLOOD_CLAW": $ItemEntry<($BloodClaw)>
static readonly "CHEATER_CLAW": $ItemEntry<($CheaterClaw)>
static readonly "CHEATER_MACHETE": $ItemEntry<($CheaterMachete)>
static readonly "HOLY_AXE": $ItemEntry<($HolyAxe)>
static readonly "HOLY_HAMMER": $ItemEntry<($HolyHammer)>
static readonly "GEN_ITEM": (($ItemEntry<($Item)>)[])[]

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWItems$Type = ($LWItems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWItems_ = $LWItems$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/fitered/$FilteredMenuScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$FilteredMenu, $FilteredMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/fitered/$FilteredMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractScrollerScreen, $AbstractScrollerScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$AbstractScrollerScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $FilteredMenuScreen extends $AbstractScrollerScreen<($FilteredMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $FilteredMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "getTitle"(): $Component
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "title"(): $Component
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilteredMenuScreen$Type = ($FilteredMenuScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilteredMenuScreen_ = $FilteredMenuScreen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/card/$ConfigCard" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$GolemInteractItem, $GolemInteractItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$GolemInteractItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ConfigCard extends $Item implements $GolemInteractItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $DyeColor$Type)

public static "getFilter"(arg0: $Player$Type): $Predicate<($AbstractGolemEntity<(any), (any)>)>
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "getUUID"(arg0: $ItemStack$Type): $UUID
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigCard$Type = ($ConfigCard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigCard_ = $ConfigCard$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/network/$TraitEffectToClient" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$TraitEffects, $TraitEffects$Type} from "packages/dev/xkmc/l2hostility/init/network/$TraitEffects"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TraitEffectToClient extends $SerialPacketBase {
 "id": integer
 "trait": $MobTrait
 "effect": $TraitEffects
 "pos": $BlockPos

constructor(arg0: $BlockPos$Type, arg1: $TraitEffects$Type)
constructor(arg0: $LivingEntity$Type, arg1: $MobTrait$Type, arg2: $TraitEffects$Type)
/**
 * 
 * @deprecated
 */
constructor()

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitEffectToClient$Type = ($TraitEffectToClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitEffectToClient_ = $TraitEffectToClient$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$PocketOfRestoration" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PocketOfRestoration extends $CurioItem implements $ICurioItem {
static readonly "ROOT": string
static readonly "KEY": string
static readonly "START": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer)

public static "setData"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: string, arg3: long): void
public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "hasCurioCapability"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "canUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type, arg1: $ItemStack$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "writeSyncData"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public "writeSyncData"(arg0: $ItemStack$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: $ItemStack$Type): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "canEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type, arg2: $ItemStack$Type): boolean
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type, arg2: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PocketOfRestoration$Type = ($PocketOfRestoration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PocketOfRestoration_ = $PocketOfRestoration$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$LHConfig$Common" {
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LHConfig$Common {
readonly "killsPerLevel": $ForgeConfigSpec$IntValue
readonly "maxPlayerLevel": $ForgeConfigSpec$IntValue
readonly "maxMobLevel": $ForgeConfigSpec$IntValue
readonly "newPlayerProtectRange": $ForgeConfigSpec$IntValue
readonly "playerDeathDecay": $ForgeConfigSpec$DoubleValue
readonly "keepInventoryRuleKeepDifficulty": $ForgeConfigSpec$BooleanValue
readonly "deathDecayDimension": $ForgeConfigSpec$BooleanValue
readonly "deathDecayTraitCap": $ForgeConfigSpec$BooleanValue
readonly "enableEntitySpecificDatapack": $ForgeConfigSpec$BooleanValue
readonly "healthFactor": $ForgeConfigSpec$DoubleValue
readonly "exponentialHealth": $ForgeConfigSpec$BooleanValue
readonly "damageFactor": $ForgeConfigSpec$DoubleValue
readonly "exponentialDamage": $ForgeConfigSpec$BooleanValue
readonly "expDropFactor": $ForgeConfigSpec$DoubleValue
readonly "drownedTridentChancePerLevel": $ForgeConfigSpec$DoubleValue
readonly "enchantmentFactor": $ForgeConfigSpec$DoubleValue
readonly "dimensionFactor": $ForgeConfigSpec$IntValue
readonly "distanceFactor": $ForgeConfigSpec$DoubleValue
readonly "globalApplyChance": $ForgeConfigSpec$DoubleValue
readonly "globalTraitChance": $ForgeConfigSpec$DoubleValue
readonly "globalTraitSuppression": $ForgeConfigSpec$DoubleValue
readonly "allowLegendary": $ForgeConfigSpec$BooleanValue
readonly "allowSectionDifficulty": $ForgeConfigSpec$BooleanValue
readonly "allowBypassMinimum": $ForgeConfigSpec$BooleanValue
readonly "allowHostilityOrb": $ForgeConfigSpec$BooleanValue
readonly "allowHostilitySpawner": $ForgeConfigSpec$BooleanValue
readonly "allowExtraEnchantments": $ForgeConfigSpec$BooleanValue
readonly "defaultLevelBase": $ForgeConfigSpec$IntValue
readonly "defaultLevelVar": $ForgeConfigSpec$DoubleValue
readonly "defaultLevelScale": $ForgeConfigSpec$DoubleValue
readonly "initialTraitChanceSlope": $ForgeConfigSpec$DoubleValue
readonly "allowNoAI": $ForgeConfigSpec$BooleanValue
readonly "allowPlayerAllies": $ForgeConfigSpec$BooleanValue
readonly "allowTraitOnOwnable": $ForgeConfigSpec$BooleanValue
readonly "dropRateFromSpawner": $ForgeConfigSpec$DoubleValue
readonly "bottleOfCurseLevel": $ForgeConfigSpec$IntValue
readonly "envyExtraLevel": $ForgeConfigSpec$IntValue
readonly "greedExtraLevel": $ForgeConfigSpec$IntValue
readonly "lustExtraLevel": $ForgeConfigSpec$IntValue
readonly "wrathExtraLevel": $ForgeConfigSpec$IntValue
readonly "abrahadabraExtraLevel": $ForgeConfigSpec$IntValue
readonly "nidhoggurExtraLevel": $ForgeConfigSpec$IntValue
readonly "nidhoggurDropFactor": $ForgeConfigSpec$DoubleValue
readonly "greedDropFactor": $ForgeConfigSpec$DoubleValue
readonly "envyDropRate": $ForgeConfigSpec$DoubleValue
readonly "gluttonyBottleDropRate": $ForgeConfigSpec$DoubleValue
readonly "prideDamageBonus": $ForgeConfigSpec$DoubleValue
readonly "prideHealthBonus": $ForgeConfigSpec$DoubleValue
readonly "prideTraitFactor": $ForgeConfigSpec$DoubleValue
readonly "wrathDamageBonus": $ForgeConfigSpec$DoubleValue
readonly "disableHostilityLootCurioRequirement": $ForgeConfigSpec$BooleanValue
readonly "banBottles": $ForgeConfigSpec$BooleanValue
readonly "hostilitySpawnCount": $ForgeConfigSpec$IntValue
readonly "hostilitySpawnLevelFactor": $ForgeConfigSpec$IntValue
readonly "tankHealth": $ForgeConfigSpec$DoubleValue
readonly "tankArmor": $ForgeConfigSpec$DoubleValue
readonly "tankTough": $ForgeConfigSpec$DoubleValue
readonly "speedy": $ForgeConfigSpec$DoubleValue
readonly "regen": $ForgeConfigSpec$DoubleValue
readonly "adaptFactor": $ForgeConfigSpec$DoubleValue
readonly "reflectFactor": $ForgeConfigSpec$DoubleValue
readonly "dispellTime": $ForgeConfigSpec$IntValue
readonly "fieryTime": $ForgeConfigSpec$IntValue
readonly "weakTime": $ForgeConfigSpec$IntValue
readonly "slowTime": $ForgeConfigSpec$IntValue
readonly "poisonTime": $ForgeConfigSpec$IntValue
readonly "witherTime": $ForgeConfigSpec$IntValue
readonly "levitationTime": $ForgeConfigSpec$IntValue
readonly "blindTime": $ForgeConfigSpec$IntValue
readonly "confusionTime": $ForgeConfigSpec$IntValue
readonly "soulBurnerTime": $ForgeConfigSpec$IntValue
readonly "freezingTime": $ForgeConfigSpec$IntValue
readonly "curseTime": $ForgeConfigSpec$IntValue
readonly "teleportDuration": $ForgeConfigSpec$IntValue
readonly "teleportRange": $ForgeConfigSpec$IntValue
readonly "repellRange": $ForgeConfigSpec$IntValue
readonly "repellStrength": $ForgeConfigSpec$DoubleValue
readonly "corrosionDurability": $ForgeConfigSpec$DoubleValue
readonly "erosionDurability": $ForgeConfigSpec$DoubleValue
readonly "corrosionDamage": $ForgeConfigSpec$DoubleValue
readonly "erosionDamage": $ForgeConfigSpec$DoubleValue
readonly "ragnarokTime": $ForgeConfigSpec$IntValue
readonly "ragnarokSealBackpack": $ForgeConfigSpec$BooleanValue
readonly "ragnarokSealSlotAdder": $ForgeConfigSpec$BooleanValue
readonly "killerAuraDamage": $ForgeConfigSpec$IntValue
readonly "killerAuraRange": $ForgeConfigSpec$IntValue
readonly "killerAuraInterval": $ForgeConfigSpec$IntValue
readonly "shulkerInterval": $ForgeConfigSpec$IntValue
readonly "grenadeInterval": $ForgeConfigSpec$IntValue
readonly "drainDamage": $ForgeConfigSpec$DoubleValue
readonly "drainDuration": $ForgeConfigSpec$DoubleValue
readonly "drainDurationMax": $ForgeConfigSpec$IntValue
readonly "counterStrikeDuration": $ForgeConfigSpec$IntValue
readonly "counterStrikeRange": $ForgeConfigSpec$IntValue
readonly "pullingRange": $ForgeConfigSpec$IntValue
readonly "pullingStrength": $ForgeConfigSpec$DoubleValue
readonly "reprintDamage": $ForgeConfigSpec$DoubleValue
readonly "reprintBypass": $ForgeConfigSpec$IntValue
readonly "ringOfLifeMaxDamage": $ForgeConfigSpec$DoubleValue
readonly "flameThornTime": $ForgeConfigSpec$IntValue
readonly "ringOfReflectionRadius": $ForgeConfigSpec$IntValue
readonly "witchWandFactor": $ForgeConfigSpec$IntValue
readonly "ringOfCorrosionFactor": $ForgeConfigSpec$DoubleValue
readonly "ringOfCorrosionPenalty": $ForgeConfigSpec$DoubleValue
readonly "ringOfHealingRate": $ForgeConfigSpec$DoubleValue
readonly "witchChargeMinDuration": $ForgeConfigSpec$IntValue
readonly "insulatorFactor": $ForgeConfigSpec$DoubleValue
readonly "orbRadius": $ForgeConfigSpec$IntValue
readonly "splitDropRateFactor": $ForgeConfigSpec$DoubleValue
readonly "map": $Map<(string), ($ForgeConfigSpec$BooleanValue)>
readonly "range": $Map<(string), ($ForgeConfigSpec$IntValue)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHConfig$Common$Type = ($LHConfig$Common);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHConfig$Common_ = $LHConfig$Common$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$DispellTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LegendaryTrait, $LegendaryTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$LegendaryTrait"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $DispellTrait extends $LegendaryTrait {

constructor(arg0: $ChatFormatting$Type)

public "onCreateSource"(arg0: integer, arg1: $LivingEntity$Type, arg2: $CreateSourceEvent$Type): void
public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
public "postHurtImpl"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispellTrait$Type = ($DispellTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispellTrait_ = $DispellTrait$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$SlotGen" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$RecordDataProvider, $RecordDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$RecordDataProvider"

export class $SlotGen extends $RecordDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $BiConsumer$Type<(string), ($Record$Type)>): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotGen$Type = ($SlotGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotGen_ = $SlotGen$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/player/$EnderSyncPacket$Entry" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $EnderSyncPacket$Entry extends $Record {

constructor(slot: integer, stack: $ItemStack$Type)

public "slot"(): integer
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderSyncPacket$Entry$Type = ($EnderSyncPacket$Entry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderSyncPacket$Entry_ = $EnderSyncPacket$Entry$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/upgrade/$SimpleUpgradeItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$ModifierInstance, $ModifierInstance$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$ModifierInstance"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SimpleUpgradeItem extends $UpgradeItem {
static readonly "LIST": $List<($UpgradeItem)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($GolemModifier$Type)>, arg2: integer, arg3: boolean)

public "get"(): $List<($ModifierInstance)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleUpgradeItem$Type = ($SimpleUpgradeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleUpgradeItem_ = $SimpleUpgradeItem$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/capability/$PickupBagItem" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $PickupBagItem {

}

export namespace $PickupBagItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupBagItem$Type = ($PickupBagItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupBagItem_ = $PickupBagItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$TraitCondition" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$MobDifficultyCollector, $MobDifficultyCollector$Type} from "packages/dev/xkmc/l2hostility/content/logic/$MobDifficultyCollector"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EntityConfig$TraitCondition extends $Record {

constructor(lv: integer, chance: float, id: $ResourceLocation$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $ResourceLocation
public "match"(arg0: $LivingEntity$Type, arg1: integer, arg2: $MobDifficultyCollector$Type): boolean
public "lv"(): integer
public "chance"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityConfig$TraitCondition$Type = ($EntityConfig$TraitCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityConfig$TraitCondition_ = $EntityConfig$TraitCondition$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$BackpackConfig" {
import {$BackpackConfig$Common, $BackpackConfig$Common$Type} from "packages/dev/xkmc/l2backpack/init/data/$BackpackConfig$Common"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$BackpackConfig$Client, $BackpackConfig$Client$Type} from "packages/dev/xkmc/l2backpack/init/data/$BackpackConfig$Client"

export class $BackpackConfig {
static readonly "CLIENT_SPEC": $ForgeConfigSpec
static readonly "CLIENT": $BackpackConfig$Client
static readonly "COMMON_SPEC": $ForgeConfigSpec
static readonly "COMMON": $BackpackConfig$Common

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackConfig$Type = ($BackpackConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackConfig_ = $BackpackConfig$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe$Serializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ShapelessRecipe$Serializer, $ShapelessRecipe$Serializer$Type} from "packages/net/minecraft/world/item/crafting/$ShapelessRecipe$Serializer"
import {$AbstractShapelessRecipe, $AbstractShapelessRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractShapelessRecipe$RecipeFactory, $AbstractShapelessRecipe$RecipeFactory$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe$RecipeFactory"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $AbstractShapelessRecipe$Serializer<T extends $AbstractShapelessRecipe<(T)>> extends $ShapelessRecipe$Serializer {

constructor(arg0: $AbstractShapelessRecipe$RecipeFactory$Type<(T)>)

public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): T
public "toJson"(arg0: T, arg1: $JsonObject$Type): void
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): T
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractShapelessRecipe$Serializer$Type<T> = ($AbstractShapelessRecipe$Serializer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractShapelessRecipe$Serializer_<T> = $AbstractShapelessRecipe$Serializer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$IThrowableCallback" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $IThrowableCallback {

 "onHitBlock"(arg0: $BaseThrownWeaponEntity$Type<(any)>, arg1: $ItemStack$Type): void
 "onHitEntity"(arg0: $BaseThrownWeaponEntity$Type<(any)>, arg1: $ItemStack$Type, arg2: $LivingEntity$Type): void
 "causeThunder"(arg0: $BaseThrownWeaponEntity$Type<(any)>): boolean
}

export namespace $IThrowableCallback {
function thunderHit(arg0: $BaseThrownWeaponEntity$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IThrowableCallback$Type = ($IThrowableCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IThrowableCallback_ = $IThrowableCallback$Type;
}}
declare module "packages/dev/xkmc/l2tabs/compat/$BaseCuriosWrapper" {
import {$CuriosSlotWrapper, $CuriosSlotWrapper$Type} from "packages/dev/xkmc/l2tabs/compat/$CuriosSlotWrapper"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BaseCuriosWrapper {
readonly "entity": $LivingEntity
 "total": integer
 "page": integer

constructor(arg0: $LivingEntity$Type)

public "getSize"(): integer
public "getRows"(): integer
public "getSlotAtPosition"(arg0: integer): $CuriosSlotWrapper
get "size"(): integer
get "rows"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseCuriosWrapper$Type = ($BaseCuriosWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseCuriosWrapper_ = $BaseCuriosWrapper$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/special/$SoulBoundPlayerData" {
import {$PlayerCapabilityHolder, $PlayerCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PlayerCapabilityTemplate, $PlayerCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $SoulBoundPlayerData extends $PlayerCapabilityTemplate<($SoulBoundPlayerData)> {
static readonly "CAPABILITY": $Capability<($SoulBoundPlayerData)>
static readonly "HOLDER": $PlayerCapabilityHolder<($SoulBoundPlayerData)>
readonly "list": $List<($ItemStack)>
 "player": $Player
 "world": $Level

constructor()

public static "register"(): void
public "onClone"(arg0: boolean): void
public static "addToPlayer"(arg0: $ServerPlayer$Type, arg1: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulBoundPlayerData$Type = ($SoulBoundPlayerData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulBoundPlayerData_ = $SoulBoundPlayerData$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageTypeWrapper" {
import {$DamageState, $DamageState$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageState"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$DamageWrapperTagProvider, $DamageWrapperTagProvider$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageWrapperTagProvider"

export interface $DamageTypeWrapper {

 "type"(): $ResourceKey<($DamageType)>
 "getObject"(): $DamageType
 "enable"(arg0: $DamageState$Type): $DamageTypeWrapper
 "gen"(arg0: $DamageWrapperTagProvider$Type, arg1: $HolderLookup$Provider$Type): void
 "isEnabled"(arg0: $DamageState$Type): boolean
 "states"(): $Set<($DamageState)>
 "toRoot"(): $DamageTypeWrapper
 "validState"(arg0: $DamageState$Type): boolean
 "getHolder"(arg0: $Level$Type): $Holder<($DamageType)>
}

export namespace $DamageTypeWrapper {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageTypeWrapper$Type = ($DamageTypeWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageTypeWrapper_ = $DamageTypeWrapper$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$SingleSwapToken" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$IQuickSwapItem, $IQuickSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapItem"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SingleSwapEntry, $SingleSwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$SingleSwapEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"

export class $SingleSwapToken extends $Record implements $IQuickSwapToken<($SingleSwapEntry)> {

constructor(item: $IQuickSwapItem$Type, stack: $ItemStack$Type, type: $QuickSwapType$Type)

public "type"(): $QuickSwapType
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "swap"(arg0: $Player$Type): void
public "item"(): $IQuickSwapItem
public "getList"(): $List<($SingleSwapEntry)>
public "getSelected"(): integer
public "setSelected"(arg0: integer): void
public "shrink"(arg0: integer): void
get "list"(): $List<($SingleSwapEntry)>
get "selected"(): integer
set "selected"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SingleSwapToken$Type = ($SingleSwapToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SingleSwapToken_ = $SingleSwapToken$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/network/$NetworkManager" {
import {$LinearFuncConfig, $LinearFuncConfig$Type} from "packages/dev/xkmc/l2artifacts/content/config/$LinearFuncConfig"
import {$PacketHandlerWithConfig, $PacketHandlerWithConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig"
import {$SlotStatConfig, $SlotStatConfig$Type} from "packages/dev/xkmc/l2artifacts/content/config/$SlotStatConfig"
import {$ConfigTypeEntry, $ConfigTypeEntry$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigTypeEntry"
import {$ArtifactSetConfig, $ArtifactSetConfig$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig"
import {$StatTypeConfig, $StatTypeConfig$Type} from "packages/dev/xkmc/l2artifacts/content/config/$StatTypeConfig"

export class $NetworkManager {
static readonly "HANDLER": $PacketHandlerWithConfig
static readonly "ARTIFACT_SETS": $ConfigTypeEntry<($ArtifactSetConfig)>
static readonly "SLOT_STATS": $ConfigTypeEntry<($SlotStatConfig)>
static readonly "STAT_TYPES": $ConfigTypeEntry<($StatTypeConfig)>
static readonly "LINEAR": $ConfigTypeEntry<($LinearFuncConfig)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkManager$Type = ($NetworkManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkManager_ = $NetworkManager$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$SpecialConfigCondition" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SpecialConfigCondition<T> {
 "id": $ResourceLocation


public "test"(arg0: T): boolean
public "cls"(): $Class<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialConfigCondition$Type<T> = ($SpecialConfigCondition<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialConfigCondition_<T> = $SpecialConfigCondition$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $GolemFlags extends $Enum<($GolemFlags)> {
static readonly "IMMUNITY": $GolemFlags
static readonly "FIRE_IMMUNE": $GolemFlags
static readonly "FREEZE_IMMUNE": $GolemFlags
static readonly "THUNDER_IMMUNE": $GolemFlags
static readonly "SEE_THROUGH": $GolemFlags
static readonly "RECYCLE": $GolemFlags
static readonly "FLOAT": $GolemFlags
static readonly "SWIM": $GolemFlags
static readonly "PICKUP": $GolemFlags
static readonly "MENDING": $GolemFlags
static readonly "NO_DESTROY": $GolemFlags
static readonly "PASSIVE": $GolemFlags
static readonly "EARTH_QUAKE": $GolemFlags
static readonly "BOTANIA": $GolemFlags


public static "values"(): ($GolemFlags)[]
public static "valueOf"(arg0: string): $GolemFlags
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemFlags$Type = (("earth_quake") | ("no_destroy") | ("freeze_immune") | ("pickup") | ("mending") | ("immunity") | ("thunder_immune") | ("float") | ("passive") | ("botania") | ("fire_immune") | ("see_through") | ("recycle") | ("swim")) | ($GolemFlags);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemFlags_ = $GolemFlags$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$TreeDigger" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$DiggerContext, $DiggerContext$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext"
import {$BlockBreaker, $BlockBreaker$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreaker"

export class $TreeDigger extends $Record implements $BlockBreaker {

constructor()

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getInstance"(arg0: $DiggerContext$Type): $BlockBreakerInstance
public "match"(arg0: $BlockState$Type): integer
public "getMaxLevel"(): integer
public "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
public "ignoreHardness"(): boolean
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TreeDigger$Type = ($TreeDigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TreeDigger_ = $TreeDigger$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/curios/$L2Totem" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TotemHelper$TotemSlot, $TotemHelper$TotemSlot$Type} from "packages/dev/xkmc/l2damagetracker/contents/curios/$TotemHelper$TotemSlot"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $L2Totem {

 "trigger"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $TotemHelper$TotemSlot$Type, arg3: $DamageSource$Type): void
 "trigger"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $Consumer$Type<($ItemStack$Type)>): void
 "allow"(arg0: $LivingEntity$Type, arg1: $DamageSource$Type): boolean
 "allow"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $DamageSource$Type): boolean
 "isValid"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $TotemHelper$TotemSlot$Type): boolean
 "onClientTrigger"(arg0: $Entity$Type, arg1: $ItemStack$Type): void
}

export namespace $L2Totem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Totem$Type = ($L2Totem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Totem_ = $L2Totem$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$LCConfig" {
import {$LCConfig$Common, $LCConfig$Common$Type} from "packages/dev/xkmc/l2complements/init/data/$LCConfig$Common"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$LCConfig$Client, $LCConfig$Client$Type} from "packages/dev/xkmc/l2complements/init/data/$LCConfig$Client"

export class $LCConfig {
static readonly "CLIENT_SPEC": $ForgeConfigSpec
static readonly "CLIENT": $LCConfig$Client
static readonly "COMMON_SPEC": $ForgeConfigSpec
static readonly "COMMON": $LCConfig$Common
static "COMMON_PATH": string

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCConfig$Type = ($LCConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCConfig_ = $LCConfig$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/augment/$AugmentTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export class $AugmentTab extends $FilterTabBase<($AugmentTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $FilterTabToken<(T)>
readonly "manager": $FilterTabManager
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $FilterTabToken$Type<($AugmentTab$Type)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AugmentTab$Type = ($AugmentTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AugmentTab_ = $AugmentTab$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/special/$LifeSyncEnchantment" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$SingleLevelEnchantment, $SingleLevelEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SingleLevelEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $LifeSyncEnchantment extends $SingleLevelEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public static "getSource"(arg0: $Level$Type): $DamageSource
public "getColor"(): $ChatFormatting
get "color"(): $ChatFormatting
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LifeSyncEnchantment$Type = ($LifeSyncEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LifeSyncEnchantment_ = $LifeSyncEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/registrate/$LCParticle" {
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"

export class $LCParticle {
static readonly "EMERALD": $RegistryEntry<($SimpleParticleType)>

constructor()

public static "register"(): void
public static "registerClient"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCParticle$Type = ($LCParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCParticle_ = $LCParticle$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/screen/source/$ItemSource" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemSourceData, $ItemSourceData$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$ItemSourceData"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ItemSource<T extends ($Record) & ($ItemSourceData<(T)>)> extends $NamedEntry<($ItemSource<(any)>)> {

constructor()

public "getItem"(arg0: $Player$Type, arg1: T): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemSource$Type<T> = ($ItemSource<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemSource_<T> = $ItemSource$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/init/events/$BaseJsonReloadListener" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$SimpleJsonResourceReloadListener, $SimpleJsonResourceReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$SimpleJsonResourceReloadListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BaseJsonReloadListener extends $SimpleJsonResourceReloadListener {

constructor(arg0: string, arg1: $Consumer$Type<($Map$Type<($ResourceLocation$Type), ($JsonElement$Type)>)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseJsonReloadListener$Type = ($BaseJsonReloadListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseJsonReloadListener_ = $BaseJsonReloadListener$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$NBTRecipe" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $NBTRecipe extends $Record implements $FinishedRecipe {

constructor(recipe: $FinishedRecipe$Type, stack: $ItemStack$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "recipe"(): $FinishedRecipe
public "serializeRecipeData"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "getAdvancementId"(): $ResourceLocation
public "getId"(): $ResourceLocation
public "serializeAdvancement"(): $JsonObject
public "serializeRecipe"(): $JsonObject
get "type"(): $RecipeSerializer<(any)>
get "advancementId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTRecipe$Type = ($NBTRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTRecipe_ = $NBTRecipe$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/gateway/$GatewayCondition" {
import {$SpecialConfigCondition, $SpecialConfigCondition$Type} from "packages/dev/xkmc/l2hostility/content/config/$SpecialConfigCondition"
import {$WaveData, $WaveData$Type} from "packages/dev/xkmc/l2hostility/compat/gateway/$WaveData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GatewayCondition extends $SpecialConfigCondition<($WaveData)> {
 "minWave": integer
 "maxWave": integer
 "maxCount": integer
 "chance": double
 "id": $ResourceLocation

constructor()

public "test"(arg0: $WaveData$Type): boolean
public static "of"(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: integer, arg4: double): $GatewayCondition
public static "of"(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: double): $GatewayCondition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GatewayCondition$Type = ($GatewayCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GatewayCondition_ = $GatewayCondition$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/loot/$LootGen$LootDefinition" {
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$LootGen$HiddenPlayer, $LootGen$HiddenPlayer$Type} from "packages/dev/xkmc/l2backpack/init/loot/$LootGen$HiddenPlayer"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LootTable$Builder, $LootTable$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable$Builder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $LootGen$LootDefinition extends $Enum<($LootGen$LootDefinition)> {
static readonly "END_CITY_TREASURE": $LootGen$LootDefinition
static readonly "BASTION_TREASURE": $LootGen$LootDefinition
static readonly "DESERT_PYRAMID": $LootGen$LootDefinition
static readonly "ANCIENT_CITY": $LootGen$LootDefinition
static readonly "SHIPWRECK_TREASURE": $LootGen$LootDefinition
static readonly "UNDERWATER_RUIN_BIG": $LootGen$LootDefinition
static readonly "VILLAGE_CARTOGRAPHER": $LootGen$LootDefinition
static readonly "IGLOO_CHEST": $LootGen$LootDefinition
static readonly "STRONGHOLD_CORRIDOR": $LootGen$LootDefinition
static readonly "WOODLAND_MANSION": $LootGen$LootDefinition
static readonly "NETHER_BRIDGE": $LootGen$LootDefinition
static readonly "PILLAGER_OUTPOST": $LootGen$LootDefinition
static readonly "RUINED_PORTAL": $LootGen$LootDefinition
static readonly "ABANDONED_MINESHAFT": $LootGen$LootDefinition
static readonly "JUNGLE_TEMPLE": $LootGen$LootDefinition
static readonly "SIMPLE_DUNGEON": $LootGen$LootDefinition
readonly "id": string
readonly "chance": double
readonly "player": $LootGen$HiddenPlayer
readonly "color": $DyeColor
readonly "target": $ResourceLocation
readonly "loot": $Supplier<($LootTable$Builder)>


public static "values"(): ($LootGen$LootDefinition)[]
public static "valueOf"(arg0: string): $LootGen$LootDefinition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootGen$LootDefinition$Type = (("woodland_mansion") | ("abandoned_mineshaft") | ("underwater_ruin_big") | ("desert_pyramid") | ("bastion_treasure") | ("end_city_treasure") | ("nether_bridge") | ("jungle_temple") | ("pillager_outpost") | ("stronghold_corridor") | ("village_cartographer") | ("shipwreck_treasure") | ("simple_dungeon") | ("ancient_city") | ("igloo_chest") | ("ruined_portal")) | ($LootGen$LootDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootGen$LootDefinition_ = $LootGen$LootDefinition$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/base/$ContainerBook" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MenuEntry, $MenuEntry$Type} from "packages/com/tterrag/registrate/util/entry/$MenuEntry"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ContainerBook extends $Item implements $MenuProvider {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MenuEntry$Type<(any)>)>)

public "getDisplayName"(): $Component
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public static "getLangKey"(arg0: $MenuType$Type<(any)>): string
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContainerBook$Type = ($ContainerBook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContainerBook_ = $ContainerBook$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/tool/$TweakerTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$IBagTool, $IBagTool$Type} from "packages/dev/xkmc/l2backpack/content/tool/$IBagTool"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TweakerTool extends $Item implements $IBagTool {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "message"(arg0: $PickupConfig$Type): $Component
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "click"(arg0: $PickupConfig$Type): $PickupConfig
public "click"(arg0: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TweakerTool$Type = ($TweakerTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TweakerTool_ = $TweakerTool$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/tile_api/$NameSetable" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Nameable, $Nameable$Type} from "packages/net/minecraft/world/$Nameable"

export interface $NameSetable extends $Nameable {

 "setCustomName"(arg0: $Component$Type): void
 "getName"(): $Component
 "getDisplayName"(): $Component
 "hasCustomName"(): boolean
 "getCustomName"(): $Component
}

export namespace $NameSetable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NameSetable$Type = ($NameSetable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NameSetable_ = $NameSetable$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitCountTrigger$Ins" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$KillTraitCountTrigger, $KillTraitCountTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitCountTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $KillTraitCountTrigger$Ins extends $BaseCriterionInstance<($KillTraitCountTrigger$Ins), ($KillTraitCountTrigger)> {
 "count": integer

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

public "matchAll"(arg0: $MobTraitCap$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitCountTrigger$Ins$Type = ($KillTraitCountTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitCountTrigger$Ins_ = $KillTraitCountTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$LWDamageStates" {
import {$DamageState, $DamageState$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageState"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TreeSet, $TreeSet$Type} from "packages/java/util/$TreeSet"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $LWDamageStates extends $Enum<($LWDamageStates)> implements $DamageState {
static readonly "NO_ANGER": $LWDamageStates


public static "values"(): ($LWDamageStates)[]
public static "valueOf"(arg0: string): $LWDamageStates
public "getId"(): $ResourceLocation
public "removeTags"(arg0: $Consumer$Type<($TagKey$Type<($DamageType$Type)>)>): void
public "gatherTags"(arg0: $Consumer$Type<($TagKey$Type<($DamageType$Type)>)>): void
public static "newSet"(): $TreeSet<($DamageState)>
public "overrides"(arg0: $DamageState$Type): boolean
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWDamageStates$Type = (("no_anger")) | ($LWDamageStates);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWDamageStates_ = $LWDamageStates$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/skin/$ClientProfileManager" {
import {$SpecialRenderProfile, $SpecialRenderProfile$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/skin/$SpecialRenderProfile"

export class $ClientProfileManager {

constructor()

public static "get"(arg0: string): $SpecialRenderProfile
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientProfileManager$Type = ($ClientProfileManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientProfileManager_ = $ClientProfileManager$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/slot/$CurioSlotBuilder" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $CurioSlotBuilder extends $Record {

constructor(order: integer, icon: string)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "order"(): integer
public "icon"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioSlotBuilder$Type = ($CurioSlotBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioSlotBuilder_ = $CurioSlotBuilder$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/registrate/$GolemModifiers" {
import {$PlayerImmuneModifier, $PlayerImmuneModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/immunes/$PlayerImmuneModifier"
import {$MagicImmuneModifier, $MagicImmuneModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/immunes/$MagicImmuneModifier"
import {$SonicModifier, $SonicModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/special/$SonicModifier"
import {$ThornModifier, $ThornModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/common/$ThornModifier"
import {$RideUpgrade, $RideUpgrade$Type} from "packages/dev/xkmc/modulargolems/content/modifier/ride/$RideUpgrade"
import {$PotionMetaModifier, $PotionMetaModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/special/$PotionMetaModifier"
import {$FireImmuneModifier, $FireImmuneModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/immunes/$FireImmuneModifier"
import {$ProjectileRejectModifier, $ProjectileRejectModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/immunes/$ProjectileRejectModifier"
import {$MagicResistanceModifier, $MagicResistanceModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/immunes/$MagicResistanceModifier"
import {$BellModifier, $BellModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/common/$BellModifier"
import {$TalentMetaModifier, $TalentMetaModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/special/$TalentMetaModifier"
import {$SimpleFlagModifier, $SimpleFlagModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$SimpleFlagModifier"
import {$TargetBonusModifier, $TargetBonusModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$TargetBonusModifier"
import {$DamageCapModifier, $DamageCapModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/immunes/$DamageCapModifier"
import {$ImmunityModifier, $ImmunityModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/immunes/$ImmunityModifier"
import {$L2Registrate$GenericBuilder, $L2Registrate$GenericBuilder$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate$GenericBuilder"
import {$ThunderImmuneModifier, $ThunderImmuneModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/immunes/$ThunderImmuneModifier"
import {$ExplosionResistanceModifier, $ExplosionResistanceModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/immunes/$ExplosionResistanceModifier"
import {$PickupModifier, $PickupModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/special/$PickupModifier"
import {$AttributeGolemModifier, $AttributeGolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$PotionAttackModifier, $PotionAttackModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$PotionAttackModifier"

export class $GolemModifiers {
static readonly "FIRE_IMMUNE": $RegistryEntry<($FireImmuneModifier)>
static readonly "THUNDER_IMMUNE": $RegistryEntry<($ThunderImmuneModifier)>
static readonly "MAGIC_IMMUNE": $RegistryEntry<($MagicImmuneModifier)>
static readonly "MAGIC_RES": $RegistryEntry<($MagicResistanceModifier)>
static readonly "THORN": $RegistryEntry<($ThornModifier)>
static readonly "EXPLOSION_RES": $RegistryEntry<($ExplosionResistanceModifier)>
static readonly "DAMAGE_CAP": $RegistryEntry<($DamageCapModifier)>
static readonly "PROJECTILE_REJECT": $RegistryEntry<($ProjectileRejectModifier)>
static readonly "IMMUNITY": $RegistryEntry<($ImmunityModifier)>
static readonly "PLAYER_IMMUNE": $RegistryEntry<($PlayerImmuneModifier)>
static readonly "SONIC": $RegistryEntry<($SonicModifier)>
static readonly "BELL": $RegistryEntry<($BellModifier)>
static readonly "PICKUP": $RegistryEntry<($PickupModifier)>
static readonly "EMERALD": $RegistryEntry<($TargetBonusModifier)>
static readonly "TALENTED": $RegistryEntry<($TalentMetaModifier)>
static readonly "CAULDRON": $RegistryEntry<($PotionMetaModifier)>
static readonly "FLOAT": $RegistryEntry<($SimpleFlagModifier)>
static readonly "SWIM": $RegistryEntry<($SimpleFlagModifier)>
static readonly "ENDER_SIGHT": $RegistryEntry<($SimpleFlagModifier)>
static readonly "RECYCLE": $RegistryEntry<($SimpleFlagModifier)>
static readonly "PICKUP_NODESTROY": $RegistryEntry<($SimpleFlagModifier)>
static readonly "PICKUP_MENDING": $RegistryEntry<($SimpleFlagModifier)>
static readonly "ARMOR": $RegistryEntry<($AttributeGolemModifier)>
static readonly "TOUGH": $RegistryEntry<($AttributeGolemModifier)>
static readonly "DAMAGE": $RegistryEntry<($AttributeGolemModifier)>
static readonly "REGEN": $RegistryEntry<($AttributeGolemModifier)>
static readonly "SPEED": $RegistryEntry<($AttributeGolemModifier)>
static readonly "SIZE_UPGRADE": $RegistryEntry<($AttributeGolemModifier)>
static readonly "SLOW": $RegistryEntry<($PotionAttackModifier)>
static readonly "WEAK": $RegistryEntry<($PotionAttackModifier)>
static readonly "WITHER": $RegistryEntry<($PotionAttackModifier)>
static readonly "MOUNT_UPGRADE": $RegistryEntry<($RideUpgrade)>

constructor()

public static "register"(): void
public static "reg"<T extends $GolemModifier>(arg0: string, arg1: $NonNullSupplier$Type<(T)>, arg2: string, arg3: string): $RegistryEntry<(T)>
public static "reg"<T extends $GolemModifier>(arg0: string, arg1: $NonNullSupplier$Type<(T)>): $L2Registrate$GenericBuilder<($GolemModifier), (T)>
public static "reg"<T extends $GolemModifier>(arg0: string, arg1: $NonNullSupplier$Type<(T)>, arg2: string): $RegistryEntry<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemModifiers$Type = ($GolemModifiers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemModifiers_ = $GolemModifiers$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemBreakToolTrigger" {
import {$GolemBreakToolTrigger$Ins, $GolemBreakToolTrigger$Ins$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemBreakToolTrigger$Ins"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GolemBreakToolTrigger extends $BaseCriterion<($GolemBreakToolTrigger$Ins), ($GolemBreakToolTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type): void
public static "ins"(): $GolemBreakToolTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemBreakToolTrigger$Type = ($GolemBreakToolTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemBreakToolTrigger_ = $GolemBreakToolTrigger$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/type/$SingletonBlockMethod" {
import {$BlockMethod, $BlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$BlockMethod"

export interface $SingletonBlockMethod extends $BlockMethod {

}

export namespace $SingletonBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SingletonBlockMethod$Type = ($SingletonBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SingletonBlockMethod_ = $SingletonBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/$L2Weaponry" {
import {$LWRegistrate, $LWRegistrate$Type} from "packages/dev/xkmc/l2weaponry/init/registrate/$LWRegistrate"
import {$GatherDataEvent, $GatherDataEvent$Type} from "packages/net/minecraftforge/data/event/$GatherDataEvent"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$PacketHandler, $PacketHandler$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandler"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"
import {$EntityAttributeModificationEvent, $EntityAttributeModificationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeModificationEvent"

export class $L2Weaponry {
static readonly "MODID": string
static readonly "LOGGER": $Logger
static readonly "REGISTRATE": $LWRegistrate
static readonly "HANDLER": $PacketHandler

constructor()

public static "setup"(arg0: $FMLCommonSetupEvent$Type): void
public static "gatherData"(arg0: $GatherDataEvent$Type): void
public static "modifyAttributes"(arg0: $EntityAttributeModificationEvent$Type): void
set "up"(value: $FMLCommonSetupEvent$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Weaponry$Type = ($L2Weaponry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Weaponry_ = $L2Weaponry$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/equipments/$TickEquipmentItem" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $TickEquipmentItem {

 "tick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type): void

(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type): void
}

export namespace $TickEquipmentItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickEquipmentItem$Type = ($TickEquipmentItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickEquipmentItem_ = $TickEquipmentItem$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageWrapperTagProvider" {
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$TagsProvider$TagAppender, $TagsProvider$TagAppender$Type} from "packages/net/minecraft/data/tags/$TagsProvider$TagAppender"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export interface $DamageWrapperTagProvider {

 "tag"(arg0: $TagKey$Type<($DamageType$Type)>): $TagsProvider$TagAppender<($DamageType)>

(arg0: $TagKey$Type<($DamageType$Type)>): $TagsProvider$TagAppender<($DamageType)>
}

export namespace $DamageWrapperTagProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageWrapperTagProvider$Type = ($DamageWrapperTagProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageWrapperTagProvider_ = $DamageWrapperTagProvider$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/automation/$DeployerUpgradeRecipe" {
import {$InputReplacement, $InputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$InputReplacement"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSchema, $RecipeSchema$Type} from "packages/dev/latvian/mods/kubejs/recipe/schema/$RecipeSchema"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ReplacementMatch, $ReplacementMatch$Type} from "packages/dev/latvian/mods/kubejs/recipe/$ReplacementMatch"
import {$OutputReplacement, $OutputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$OutputReplacement"

export class $DeployerUpgradeRecipe extends $Record implements $Recipe<($Container)> {

constructor(result: $ItemStack$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "result"(): $ItemStack
public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(arg0: $Container$Type, arg1: $RegistryAccess$Type): $ItemStack
public "getId"(): $ResourceLocation
public "matches"(arg0: $Container$Type, arg1: $Level$Type): boolean
public "getRemainingItems"(arg0: $Container$Type): $NonNullList<($ItemStack)>
public "getIngredients"(): $NonNullList<($Ingredient)>
public "getToastSymbol"(): $ItemStack
public "isIncomplete"(): boolean
public "showNotification"(): boolean
public "isSpecial"(): boolean
public "getType"(): $ResourceLocation
public "replaceOutput"(match: $ReplacementMatch$Type, arg1: $OutputReplacement$Type): boolean
public "setGroup"(group: string): void
public "hasInput"(match: $ReplacementMatch$Type): boolean
public "getOrCreateId"(): $ResourceLocation
public "getSchema"(): $RecipeSchema
public "replaceInput"(match: $ReplacementMatch$Type, arg1: $InputReplacement$Type): boolean
public "hasOutput"(match: $ReplacementMatch$Type): boolean
public "getGroup"(): string
public "getMod"(): string
get "serializer"(): $RecipeSerializer<(any)>
get "id"(): $ResourceLocation
get "ingredients"(): $NonNullList<($Ingredient)>
get "toastSymbol"(): $ItemStack
get "incomplete"(): boolean
get "special"(): boolean
get "type"(): $ResourceLocation
set "group"(value: string)
get "orCreateId"(): $ResourceLocation
get "schema"(): $RecipeSchema
get "group"(): string
get "mod"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeployerUpgradeRecipe$Type = ($DeployerUpgradeRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeployerUpgradeRecipe_ = $DeployerUpgradeRecipe$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$SimpleNumberDesc" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DiggerContext, $DiggerContext$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext"
import {$BlockBreaker, $BlockBreaker$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreaker"

export interface $SimpleNumberDesc extends $BlockBreaker {

 "range"(arg0: integer): integer
 "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
 "getInstance"(arg0: $DiggerContext$Type): $BlockBreakerInstance
 "getMaxLevel"(): integer
 "ignoreHardness"(): boolean
}

export namespace $SimpleNumberDesc {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleNumberDesc$Type = ($SimpleNumberDesc);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleNumberDesc_ = $SimpleNumberDesc$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipe$Inv" {
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$DiffusionRecipe, $DiffusionRecipe$Type} from "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipe"
import {$BaseRecipe$RecInv, $BaseRecipe$RecInv$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe$RecInv"

export class $DiffusionRecipe$Inv extends $SimpleContainer implements $BaseRecipe$RecInv<($DiffusionRecipe)> {

constructor()

public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiffusionRecipe$Inv$Type = ($DiffusionRecipe$Inv);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiffusionRecipe$Inv_ = $DiffusionRecipe$Inv$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier$Operation, $AttributeModifier$Operation$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier$Operation"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $AttrSetEntry extends $Record {

constructor(attr: $Supplier$Type<($Attribute$Type)>, op: $AttributeModifier$Operation$Type, func: $LinearFuncEntry$Type, usePercent: boolean)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getValue"(arg0: integer): double
public "func"(): $LinearFuncEntry
public "attr"(): $Supplier<($Attribute)>
public "op"(): $AttributeModifier$Operation
public "usePercent"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttrSetEntry$Type = ($AttrSetEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttrSetEntry_ = $AttrSetEntry$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$DrawerCountDeco" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IItemDecorator, $IItemDecorator$Type} from "packages/net/minecraftforge/client/$IItemDecorator"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $DrawerCountDeco implements $IItemDecorator {

constructor()

public static "startTooltipRendering"(): void
public static "stopTooltipRendering"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer): boolean
public static "showContent"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerCountDeco$Type = ($DrawerCountDeco);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerCountDeco_ = $DrawerCountDeco$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$BagSlot" {
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandlerModifiable, $IItemHandlerModifiable$Type} from "packages/net/minecraftforge/items/$IItemHandlerModifiable"
import {$SlotItemHandler, $SlotItemHandler$Type} from "packages/net/minecraftforge/items/$SlotItemHandler"

export class $BagSlot extends $SlotItemHandler {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $IItemHandlerModifiable$Type, arg1: integer, arg2: integer, arg3: integer)

public "setChanged"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BagSlot$Type = ($BagSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BagSlot_ = $BagSlot$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$RecSerializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $RecSerializer<R extends $Recipe<(I)>, I extends $Container> implements $RecipeSerializer<(R)> {
readonly "cls": $Class<(R)>

constructor(arg0: $Class$Type<(R)>)

public "toNetwork"(arg0: $FriendlyByteBuf$Type, arg1: R): void
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): R
public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): R
public "blank"(): R
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type, arg2: $ICondition$IContext$Type): R
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecSerializer$Type<R, I> = ($RecSerializer<(R), (I)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecSerializer_<R, I> = $RecSerializer$Type<(R), (I)>;
}}
declare module "packages/dev/xkmc/l2hostility/events/$MobEvents" {
import {$MobEffectEvent$Applicable, $MobEffectEvent$Applicable$Type} from "packages/net/minecraftforge/event/entity/living/$MobEffectEvent$Applicable"
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$LivingDropsEvent, $LivingDropsEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDropsEvent"
import {$LivingExperienceDropEvent, $LivingExperienceDropEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingExperienceDropEvent"
import {$OnDatapackSyncEvent, $OnDatapackSyncEvent$Type} from "packages/net/minecraftforge/event/$OnDatapackSyncEvent"

export class $MobEvents {

constructor()

public static "onDatapackSync"(arg0: $OnDatapackSyncEvent$Type): void
public static "onMobHurt"(arg0: $LivingHurtEvent$Type): void
public static "onMobDrop"(arg0: $LivingDropsEvent$Type): void
public static "onMobDeath"(arg0: $LivingDeathEvent$Type): void
public static "onExpDrop"(arg0: $LivingExperienceDropEvent$Type): void
public static "onMobAttack"(arg0: $LivingAttackEvent$Type): void
public static "onPotionTest"(arg0: $MobEffectEvent$Applicable$Type): void
public static "onDamage"(arg0: $LivingDamageEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobEvents$Type = ($MobEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobEvents_ = $MobEvents$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfWrath" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $CurseOfWrath extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getExtraLevel"(): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onHurtTarget"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $AttackCache$Type): void
get "extraLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseOfWrath$Type = ($CurseOfWrath);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseOfWrath_ = $CurseOfWrath$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/events/$LWClickListener" {
import {$PlayerInteractEvent$RightClickEmpty, $PlayerInteractEvent$RightClickEmpty$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickEmpty"
import {$PlayerInteractEvent$EntityInteract, $PlayerInteractEvent$EntityInteract$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteract"
import {$AttackEntityEvent, $AttackEntityEvent$Type} from "packages/net/minecraftforge/event/entity/player/$AttackEntityEvent"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$PlayerInteractEvent$LeftClickBlock, $PlayerInteractEvent$LeftClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$LeftClickBlock"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"
import {$PlayerInteractEvent$RightClickBlock, $PlayerInteractEvent$RightClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickBlock"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$PlayerInteractEvent$LeftClickEmpty, $PlayerInteractEvent$LeftClickEmpty$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$LeftClickEmpty"
import {$ItemUseEventHandler$ItemClickHandler, $ItemUseEventHandler$ItemClickHandler$Type} from "packages/dev/xkmc/l2complements/events/$ItemUseEventHandler$ItemClickHandler"

export class $LWClickListener implements $ItemUseEventHandler$ItemClickHandler {

constructor()

public "predicate"(arg0: $ItemStack$Type, arg1: $Class$Type<(any)>, arg2: $PlayerEvent$Type): boolean
public "onPlayerLeftClickBlock"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$LeftClickBlock$Type): void
public "onPlayerLeftClickEmpty"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$LeftClickEmpty$Type): void
public "onPlayerRightClickEmpty"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$RightClickEmpty$Type): void
public "onPlayerRightClickBlock"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$RightClickBlock$Type): void
public "onPlayerRightClickEntity"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$EntityInteract$Type): void
public "onPlayerLeftClickEntity"(arg0: $ItemStack$Type, arg1: $AttackEntityEvent$Type): void
public "onCriticalHit"(arg0: $ItemStack$Type, arg1: $CriticalHitEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWClickListener$Type = ($LWClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWClickListener_ = $LWClickListener$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$HostilityBeaconBlockEntity, $HostilityBeaconBlockEntity$Type} from "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconBlockEntity"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $HostilityBeaconRenderer implements $BlockEntityRenderer<($HostilityBeaconBlockEntity)> {
static readonly "BEAM_LOCATION": $ResourceLocation
static readonly "MAX_RENDER_Y": integer

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "shouldRenderOffScreen"(arg0: $HostilityBeaconBlockEntity$Type): boolean
public "getViewDistance"(): integer
public "render"(arg0: $HostilityBeaconBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $HostilityBeaconBlockEntity$Type, arg1: $Vec3$Type): boolean
public static "renderBeaconBeam"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: $ResourceLocation$Type, arg3: float, arg4: float, arg5: long, arg6: integer, arg7: integer, arg8: (float)[], arg9: float, arg10: float): void
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityBeaconRenderer$Type = ($HostilityBeaconRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityBeaconRenderer_ = $HostilityBeaconRenderer$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$StartUpGiveItemEvents" {
import {$TickEvent$PlayerTickEvent, $TickEvent$PlayerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$PlayerTickEvent"

export class $StartUpGiveItemEvents {

constructor()

public static "onPlayerTick"(arg0: $TickEvent$PlayerTickEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StartUpGiveItemEvents$Type = ($StartUpGiveItemEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StartUpGiveItemEvents_ = $StartUpGiveItemEvents$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$CubicBlockBreaker" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleNumberDesc, $SimpleNumberDesc$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$SimpleNumberDesc"
import {$DiggerContext, $DiggerContext$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext"

export class $CubicBlockBreaker extends $Record implements $SimpleNumberDesc {

constructor(radius: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getInstance"(arg0: $DiggerContext$Type): $BlockBreakerInstance
public "range"(arg0: integer): integer
public "radius"(): integer
public "getMaxLevel"(): integer
public "ignoreHardness"(): boolean
public "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CubicBlockBreaker$Type = ($CubicBlockBreaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CubicBlockBreaker_ = $CubicBlockBreaker$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/$DelegateEntityBlockImpl" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$DelegateBlockImpl, $DelegateBlockImpl$Type} from "packages/dev/xkmc/l2modularblock/$DelegateBlockImpl"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $DelegateEntityBlockImpl extends $DelegateBlockImpl implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "triggerEvent"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: integer, arg4: integer): boolean
public "getMenuProvider"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $MenuProvider
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelegateEntityBlockImpl$Type = ($DelegateEntityBlockImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelegateEntityBlockImpl_ = $DelegateEntityBlockImpl$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/registrate/$LHEnchantments" {
import {$HostilityEnchantment, $HostilityEnchantment$Type} from "packages/dev/xkmc/l2hostility/content/enchantments/$HostilityEnchantment"
import {$RemoveTraitEnchantment, $RemoveTraitEnchantment$Type} from "packages/dev/xkmc/l2hostility/content/enchantments/$RemoveTraitEnchantment"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$VanishEnchantment, $VanishEnchantment$Type} from "packages/dev/xkmc/l2hostility/content/enchantments/$VanishEnchantment"

export class $LHEnchantments {
static readonly "INSULATOR": $RegistryEntry<($HostilityEnchantment)>
static readonly "SPLIT_SUPPRESS": $RegistryEntry<($RemoveTraitEnchantment)>
static readonly "VANISH": $RegistryEntry<($VanishEnchantment)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHEnchantments$Type = ($LHEnchantments);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHEnchantments_ = $LHEnchantments$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$CapabilityEvents" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$EntityItemPickupEvent, $EntityItemPickupEvent$Type} from "packages/net/minecraftforge/event/entity/player/$EntityItemPickupEvent"
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CapabilityEvents {

constructor()

public static "onAttachLevelCapabilities"(arg0: $AttachCapabilitiesEvent$Type<($Level$Type)>): void
public static "tryInsertItem"(arg0: $ServerPlayer$Type, arg1: $ItemStack$Type): void
public static "onItemPickup"(arg0: $EntityItemPickupEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapabilityEvents$Type = ($CapabilityEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapabilityEvents_ = $CapabilityEvents$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/recipe/$GolemAssembleRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$AbstractShapedRecipe$Serializer, $AbstractShapedRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe$Serializer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$AbstractShapedRecipe, $AbstractShapedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GolemAssembleRecipe extends $AbstractShapedRecipe<($GolemAssembleRecipe)> {
readonly "width": integer
readonly "height": integer
readonly "result": $ItemStack

constructor(arg0: $ResourceLocation$Type, arg1: string, arg2: integer, arg3: integer, arg4: $NonNullList$Type<($Ingredient$Type)>, arg5: $ItemStack$Type)

public "getSerializer"(): $AbstractShapedRecipe$Serializer<($GolemAssembleRecipe)>
public "assemble"(arg0: $CraftingContainer$Type, arg1: $RegistryAccess$Type): $ItemStack
public "matches"(arg0: $CraftingContainer$Type, arg1: $Level$Type): boolean
get "serializer"(): $AbstractShapedRecipe$Serializer<($GolemAssembleRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemAssembleRecipe$Type = ($GolemAssembleRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemAssembleRecipe_ = $GolemAssembleRecipe$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$BackpackConfig$Common" {
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"

export class $BackpackConfig$Common {
readonly "initialRows": $ForgeConfigSpec$IntValue
readonly "startupBackpackCondition": $ForgeConfigSpec$IntValue


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackConfig$Common$Type = ($BackpackConfig$Common);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackConfig$Common_ = $BackpackConfig$Common$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/mult/$ToolTipBlockMethod" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultipleBlockMethod, $MultipleBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$MultipleBlockMethod"

export interface $ToolTipBlockMethod extends $MultipleBlockMethod {

 "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void

(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}

export namespace $ToolTipBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolTipBlockMethod$Type = ($ToolTipBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolTipBlockMethod_ = $ToolTipBlockMethod$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemMode, $GolemMode$Type} from "packages/dev/xkmc/modulargolems/content/entity/mode/$GolemMode"
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PickupFilterEditor, $PickupFilterEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$PickupFilterEditor"
import {$SquadEditor, $SquadEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$SquadEditor"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TargetFilterEditor, $TargetFilterEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$TargetFilterEditor"
import {$PathEditor, $PathEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$PathEditor"

export interface $GolemConfigEditor {

 "target"(): $TargetFilterEditor
 "entry"(): $GolemConfigEntry
 "getPath"(): $PathEditor
 "sync"(): void
 "level"(): $Level
 "getFilter"(): $PickupFilterEditor
 "getDisplayName"(): $Component
 "getSquad"(): $SquadEditor
 "setLocked"(arg0: boolean): void
 "summonToPosition"(): boolean
 "getDefaultMode"(): $GolemMode
 "setDefaultMode"(arg0: $GolemMode$Type): void
 "locked"(): boolean
 "setSummonToPosition"(arg0: boolean): void
}

export namespace $GolemConfigEditor {
function readable(arg0: $UUID$Type, arg1: integer): $GolemConfigEditor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemConfigEditor$Type = ($GolemConfigEditor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemConfigEditor_ = $GolemConfigEditor$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$EntityConfig$Config, $EntityConfig$Config$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$Config"
import {$CapStorageData, $CapStorageData$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$CapStorageData"
import {$MasterData, $MasterData$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MasterData"
import {$MinionData, $MinionData$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MinionData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LinkedHashMap, $LinkedHashMap$Type} from "packages/java/util/$LinkedHashMap"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RegionalDifficultyModifier, $RegionalDifficultyModifier$Type} from "packages/dev/xkmc/l2hostility/content/capability/chunk/$RegionalDifficultyModifier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$GeneralCapabilityTemplate, $GeneralCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityTemplate"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GeneralCapabilityHolder, $GeneralCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityHolder"

export class $MobTraitCap extends $GeneralCapabilityTemplate<($LivingEntity), ($MobTraitCap)> {
static readonly "CAPABILITY": $Capability<($MobTraitCap)>
static readonly "HOLDER": $GeneralCapabilityHolder<($LivingEntity), ($MobTraitCap)>
readonly "traits": $LinkedHashMap<($MobTrait), (integer)>
 "lv": integer
 "summoned": boolean
 "minion": boolean
 "noDrop": boolean
 "fullDrop": boolean
 "dropRate": double
 "pos": $BlockPos
 "asMinion": $MinionData
 "asMaster": $MasterData

constructor()

public static "register"(): void
public "init"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $RegionalDifficultyModifier$Type): void
public "tick"(arg0: $LivingEntity$Type): void
public "getLevel"(): integer
public "setLevel"(arg0: $LivingEntity$Type, arg1: integer): void
public "copyFrom"(arg0: $LivingEntity$Type, arg1: $LivingEntity$Type, arg2: $MobTraitCap$Type): void
public "getData"<T extends $CapStorageData>(arg0: $ResourceLocation$Type): T
public "removeTrait"(arg0: $MobTrait$Type): void
public "shouldDiscard"(arg0: $LivingEntity$Type): boolean
public "deinit"(): void
public "clampLevel"(arg0: $LivingEntity$Type, arg1: integer): integer
public "setConfigCache"(arg0: $EntityConfig$Config$Type): void
public "onKilled"(arg0: $LivingEntity$Type, arg1: $Player$Type): void
public "getConfigCache"(arg0: $LivingEntity$Type): $EntityConfig$Config
public "isMasterProtected"(): boolean
public "isSummoned"(): boolean
public "syncToClient"(arg0: $LivingEntity$Type): void
public "traitEvent"(arg0: $BiConsumer$Type<($MobTrait$Type), (integer)>): void
public "getTraitLevel"(arg0: $MobTrait$Type): integer
public "setTrait"(arg0: $MobTrait$Type, arg1: integer): void
public "setTrait"(arg0: string, arg1: integer): void
public "hasTrait"(arg0: $MobTrait$Type): boolean
public "syncToPlayer"(arg0: $LivingEntity$Type, arg1: $ServerPlayer$Type): void
public "getTitle"(arg0: boolean, arg1: boolean): $List<($Component)>
public "getEnchantBonus"(): integer
public "getOrCreateData"<T extends $CapStorageData>(arg0: $ResourceLocation$Type, arg1: $Supplier$Type<(T)>): T
public "reinit"(arg0: $LivingEntity$Type, arg1: integer, arg2: boolean): boolean
public "isInitialized"(): boolean
get "level"(): integer
set "configCache"(value: $EntityConfig$Config$Type)
get "masterProtected"(): boolean
get "summoned"(): boolean
get "enchantBonus"(): integer
get "initialized"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobTraitCap$Type = ($MobTraitCap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobTraitCap_ = $MobTraitCap$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/loot/$LootGen" {
import {$RegistrateLootTableProvider, $RegistrateLootTableProvider$Type} from "packages/com/tterrag/registrate/providers/loot/$RegistrateLootTableProvider"

export class $LootGen {

constructor()

public static "genLoot"(arg0: $RegistrateLootTableProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootGen$Type = ($LootGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootGen_ = $LootGen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/$CreateConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $CreateConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateConfigGen$Type = ($CreateConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateConfigGen_ = $CreateConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/config/$LinearFuncConfig$Entry" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $LinearFuncConfig$Entry extends $Record {

constructor(base: double, slope: double)

public "base"(): double
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "slope"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LinearFuncConfig$Entry$Type = ($LinearFuncConfig$Entry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LinearFuncConfig$Entry_ = $LinearFuncConfig$Entry$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/fitered/$FilteredTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export class $FilteredTab extends $FilterTabBase<($FilteredTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $FilterTabToken<(T)>
readonly "manager": $FilterTabManager
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $FilterTabToken$Type<($FilteredTab$Type)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilteredTab$Type = ($FilteredTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilteredTab_ = $FilteredTab$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier$AttrEntry" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$GolemStatType, $GolemStatType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemStatType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$DoubleSupplier, $DoubleSupplier$Type} from "packages/java/util/function/$DoubleSupplier"

export class $AttributeGolemModifier$AttrEntry extends $Record {

constructor(type: $Supplier$Type<($GolemStatType$Type)>, value: $DoubleSupplier$Type)

public "type"(): $Supplier<($GolemStatType)>
public "value"(): $DoubleSupplier
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getValue"(arg0: integer): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeGolemModifier$AttrEntry$Type = ($AttributeGolemModifier$AttrEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeGolemModifier$AttrEntry_ = $AttributeGolemModifier$AttrEntry$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$PullingTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PushPullTrait, $PushPullTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$PushPullTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $PullingTrait extends $PushPullTrait {

constructor(arg0: $ChatFormatting$Type)

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PullingTrait$Type = ($PullingTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PullingTrait_ = $PullingTrait$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v3/$SunBlockMask" {
import {$SetEffectData, $SetEffectData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffectData"
import {$PersistentDataSetEffect, $PersistentDataSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PersistentDataSetEffect"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $SunBlockMask extends $PersistentDataSetEffect<($SetEffectData)> {
readonly "ids": integer

constructor()

public "getData"(arg0: $ArtifactSetConfig$Entry$Type): $SetEffectData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SunBlockMask$Type = ($SunBlockMask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SunBlockMask_ = $SunBlockMask$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Estimator$SolResult, $Estimator$SolResult$Type} from "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$SolResult"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Estimator$EstiResult, $Estimator$EstiResult$Type} from "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$EstiResult"

export class $Estimator {

constructor(arg0: double, arg1: double, arg2: $Vec3$Type, arg3: double, arg4: integer, arg5: $Vec3$Type, arg6: $Vec3$Type)

public static "solve"(arg0: $Function$Type<(double), (double)>, arg1: $Function$Type<(double), (double)>, arg2: double, arg3: double, arg4: double, arg5: double): $Estimator$SolResult
public static "solve"(arg0: $Function$Type<(double), (double)>, arg1: double, arg2: double, arg3: double, arg4: double): $Estimator$SolResult
public "getX0"(arg0: double, arg1: double): double
public "getY0"(arg0: double, arg1: double): double
public "getAnswer"(): $Estimator$EstiResult
public "getIdeal"(): $Estimator$EstiResult
get "answer"(): $Estimator$EstiResult
get "ideal"(): $Estimator$EstiResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Estimator$Type = ($Estimator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Estimator_ = $Estimator$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$EterniumArmor" {
import {$ExtraArmorConfig, $ExtraArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EterniumArmor extends $ExtraArmorConfig {
 "repair_chance": double
 "damage_chance": double
 "magic_immune": integer

constructor()

public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EterniumArmor$Type = ($EterniumArmor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EterniumArmor_ = $EterniumArmor$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig" {
import {$PickupMode, $PickupMode$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupMode"
import {$DestroyMode, $DestroyMode$Type} from "packages/dev/xkmc/l2backpack/content/capability/$DestroyMode"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $PickupConfig extends $Record {

constructor(pickup: $PickupMode$Type, destroy: $DestroyMode$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "destroy"(): $DestroyMode
public static "iterateMode"(arg0: $PickupConfig$Type): $PickupConfig
public static "iterateMode"(arg0: $ItemStack$Type): void
public static "getPickupMode"(arg0: $ItemStack$Type): $PickupConfig
public "pickup"(): $PickupMode
public static "getConfig"(arg0: $ItemStack$Type): $CompoundTag
public static "iterateDestroy"(arg0: $PickupConfig$Type): $PickupConfig
public static "iterateDestroy"(arg0: $ItemStack$Type): void
public static "setConfig"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): void
public static "setConfig"(arg0: $ItemStack$Type, arg1: $PickupConfig$Type): void
public static "addText"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupConfig$Type = ($PickupConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupConfig_ = $PickupConfig$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/mobeffects/$ThermalMotive" {
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $ThermalMotive extends $InherentEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getCurativeItems"(): $List<($ItemStack)>
get "curativeItems"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThermalMotive$Type = ($ThermalMotive);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThermalMotive_ = $ThermalMotive$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/slot/$SlotGen" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$RecordDataProvider, $RecordDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$RecordDataProvider"

export class $SlotGen extends $RecordDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $BiConsumer$Type<(string), ($Record$Type)>): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotGen$Type = ($SlotGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotGen_ = $SlotGen$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType" {
import {$IMatToolType, $IMatToolType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatToolType"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Tools, $Tools$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/vanilla/$Tools"
import {$IToolStats, $IToolStats$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IToolStats"
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$ArmorConfig, $ArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ArmorConfig"
import {$ExtraArmorConfig, $ExtraArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig"
import {$IMatArmorType, $IMatArmorType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatArmorType"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$ToolConfig, $ToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ToolConfig"

export interface $IMatVanillaType extends $IMatToolType, $IMatArmorType {

 "ordinal"(): integer
 "getID"(): string
 "getBlock"(): $Block
 "getIngot"(): $Item
 "armorPrefix"(): string
 "getToolIngot"(): $Item
 "getNugget"(): $Item
 "getToolStick"(): $Item
 "getGenerated"(): (($ItemEntry<($Item)>)[])[]
 "getTool"(arg0: $Tools$Type): $Item
 "getArmor"(arg0: $EquipmentSlot$Type): $Item
 "getToolStats"(): $IToolStats
 "getExtraToolConfig"(): $ExtraToolConfig
 "getToolConfig"(): $ToolConfig
 "getTier"(): $Tier
 "getArmorConfig"(): $ArmorConfig
 "getArmorMaterial"(): $ArmorMaterial
 "getExtraArmorConfig"(): $ExtraArmorConfig
}

export namespace $IMatVanillaType {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMatVanillaType$Type = ($IMatVanillaType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMatVanillaType_ = $IMatVanillaType$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/armors/$IceThornEnchantment" {
import {$AbstractThornEnchantment, $AbstractThornEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/armors/$AbstractThornEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $IceThornEnchantment extends $AbstractThornEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IceThornEnchantment$Type = ($IceThornEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IceThornEnchantment_ = $IceThornEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/tool/$PickupTweakerTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TweakerTool, $TweakerTool$Type} from "packages/dev/xkmc/l2backpack/content/tool/$TweakerTool"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PickupTweakerTool extends $TweakerTool {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "message"(arg0: $PickupConfig$Type): $Component
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "click"(arg0: $ItemStack$Type): void
public "click"(arg0: $PickupConfig$Type): $PickupConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupTweakerTool$Type = ($PickupTweakerTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupTweakerTool_ = $PickupTweakerTool$Type;
}}
declare module "packages/dev/xkmc/l2complements/network/$RotateDiggerToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"

export class $RotateDiggerToServer extends $SerialPacketBase {
 "reverse": boolean

constructor()
constructor(arg0: boolean)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RotateDiggerToServer$Type = ($RotateDiggerToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RotateDiggerToServer_ = $RotateDiggerToServer$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/client/select/$SlotSelectScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$AbstractSelectScreen, $AbstractSelectScreen$Type} from "packages/dev/xkmc/l2artifacts/content/client/select/$AbstractSelectScreen"

export class $SlotSelectScreen extends $AbstractSelectScreen {
readonly "manager": $SpriteManager
readonly "slots": (string)[]
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotSelectScreen$Type = ($SlotSelectScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotSelectScreen_ = $SlotSelectScreen$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerAnalogBlockEntity" {
import {$BlockEntityBlockMethodImpl, $BlockEntityBlockMethodImpl$Type} from "packages/dev/xkmc/l2modularblock/impl/$BlockEntityBlockMethodImpl"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockEntityEntry, $BlockEntityEntry$Type} from "packages/com/tterrag/registrate/util/entry/$BlockEntityEntry"

export class $EnderDrawerAnalogBlockEntity<T extends $BlockEntity> extends $BlockEntityBlockMethodImpl<(T)> {

constructor(arg0: $BlockEntityEntry$Type<(T)>, arg1: $Class$Type<(T)>)

public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderDrawerAnalogBlockEntity$Type<T> = ($EnderDrawerAnalogBlockEntity<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderDrawerAnalogBlockEntity_<T> = $EnderDrawerAnalogBlockEntity$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/events/$ArtifactEffectEvents$EventPredicate" {
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export interface $ArtifactEffectEvents$EventPredicate<T> {

 "apply"(arg0: $SetEffect$Type, arg1: $LivingEntity$Type, arg2: $ArtifactSetConfig$Entry$Type, arg3: integer, arg4: T): boolean

(arg0: $SetEffect$Type, arg1: $LivingEntity$Type, arg2: $ArtifactSetConfig$Entry$Type, arg3: integer, arg4: T): boolean
}

export namespace $ArtifactEffectEvents$EventPredicate {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactEffectEvents$EventPredicate$Type<T> = ($ArtifactEffectEvents$EventPredicate<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactEffectEvents$EventPredicate_<T> = $ArtifactEffectEvents$EventPredicate$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$LCConfig$Common" {
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"

export class $LCConfig$Common {
readonly "windSpeed": $ForgeConfigSpec$DoubleValue
readonly "belowVoid": $ForgeConfigSpec$IntValue
readonly "phantomHeight": $ForgeConfigSpec$IntValue
readonly "explosionDamage": $ForgeConfigSpec$IntValue
readonly "spaceDamage": $ForgeConfigSpec$IntValue
readonly "allowModBanSpaceShard": $ForgeConfigSpec$BooleanValue
readonly "enableImmunityEnchantments": $ForgeConfigSpec$BooleanValue
readonly "cleansePredicate": $ForgeConfigSpec$IntValue
readonly "totemicHealDuration": $ForgeConfigSpec$IntValue
readonly "totemicHealAmount": $ForgeConfigSpec$IntValue
readonly "windSweepIncrement": $ForgeConfigSpec$DoubleValue
readonly "soulFireChargeDuration": $ForgeConfigSpec$IntValue
readonly "blackFireChargeDuration": $ForgeConfigSpec$IntValue
readonly "strongFireChargePower": $ForgeConfigSpec$IntValue
readonly "strongFireChargeBreakBlock": $ForgeConfigSpec$BooleanValue
readonly "emeraldDamageFactor": $ForgeConfigSpec$DoubleValue
readonly "emeraldBaseRange": $ForgeConfigSpec$IntValue
readonly "sonicShooterDamage": $ForgeConfigSpec$IntValue
readonly "hellfireWandDamage": $ForgeConfigSpec$IntValue
readonly "iceEnchantDuration": $ForgeConfigSpec$IntValue
readonly "flameEnchantDuration": $ForgeConfigSpec$IntValue
readonly "bleedEnchantDuration": $ForgeConfigSpec$IntValue
readonly "curseEnchantDuration": $ForgeConfigSpec$IntValue
readonly "bleedEnchantMax": $ForgeConfigSpec$IntValue
readonly "voidTouchChance": $ForgeConfigSpec$DoubleValue
readonly "voidTouchChanceBonus": $ForgeConfigSpec$DoubleValue
readonly "lifeSyncFactor": $ForgeConfigSpec$DoubleValue
readonly "mobTypeBonus": $ForgeConfigSpec$DoubleValue
readonly "treeChopMaxRadius": $ForgeConfigSpec$IntValue
readonly "treeChopMaxHeight": $ForgeConfigSpec$IntValue
readonly "treeChopMaxBlock": $ForgeConfigSpec$IntValue
readonly "chainDiggingDelayThreshold": $ForgeConfigSpec$IntValue
readonly "chainDiggingBlockPerTick": $ForgeConfigSpec$IntValue
readonly "chainDiggingHardnessRange": $ForgeConfigSpec$DoubleValue
readonly "delayDiggingRequireEnder": $ForgeConfigSpec$BooleanValue
readonly "useArsNouveauForEnchantmentRecipe": $ForgeConfigSpec$BooleanValue
readonly "enableVanillaItemRecipe": $ForgeConfigSpec$BooleanValue
readonly "enableToolRecraftRecipe": $ForgeConfigSpec$BooleanValue
readonly "enableSpawnEggRecipe": $ForgeConfigSpec$BooleanValue
readonly "enableWandEnchantments": $ForgeConfigSpec$BooleanValue
readonly "useTagsForWandEnchantmentWhiteList": $ForgeConfigSpec$BooleanValue


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCConfig$Common$Type = ($LCConfig$Common);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCConfig$Common_ = $LCConfig$Common$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/$ModifierEventListeners" {
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$PlayerInteractEvent$EntityInteract, $PlayerInteractEvent$EntityInteract$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteract"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$EntityJoinLevelEvent, $EntityJoinLevelEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityJoinLevelEvent"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$LivingDropsEvent, $LivingDropsEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDropsEvent"
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ExplosionEvent$Detonate, $ExplosionEvent$Detonate$Type} from "packages/net/minecraftforge/event/level/$ExplosionEvent$Detonate"

export class $ModifierEventListeners {

constructor()

public static "onHurtPost"(arg0: $LivingHurtEvent$Type): void
public static "onLivingDrop"(arg0: $LivingDropsEvent$Type): void
public static "onHurtPre"(arg0: $LivingHurtEvent$Type): void
public static "onTargetCardClick"(arg0: $PlayerInteractEvent$EntityInteract$Type): void
public static "onAttackPre"(arg0: $LivingAttackEvent$Type): void
public static "onEntityJoinWorld"(arg0: $EntityJoinLevelEvent$Type): void
public static "onExplosion"(arg0: $ExplosionEvent$Detonate$Type): void
public static "onAttachLevelCapabilities"(arg0: $AttachCapabilitiesEvent$Type<($Level$Type)>): void
public static "onDamaged"(arg0: $LivingDamageEvent$Type): void
public static "onAttacked"(arg0: $LivingAttackEvent$Type): void
public static "onGolemSpawn"(arg0: $EntityJoinLevelEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModifierEventListeners$Type = ($ModifierEventListeners);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModifierEventListeners_ = $ModifierEventListeners$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$ClientDataHandler" {
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"

export class $ClientDataHandler {

constructor()

public static "handleUpdate"(arg0: $GolemConfigEntry$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientDataHandler$Type = ($ClientDataHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientDataHandler_ = $ClientDataHandler$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/config/$SlotStatConfig" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ArtifactSlot, $ArtifactSlot$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot"

export class $SlotStatConfig extends $BaseConfig {
 "available_main_stats": $HashMap<($ArtifactSlot), ($ArrayList<($ResourceLocation)>)>
 "available_sub_stats": $HashMap<($ArtifactSlot), ($ArrayList<($ResourceLocation)>)>

constructor()

public static "getInstance"(): $SlotStatConfig
get "instance"(): $SlotStatConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotStatConfig$Type = ($SlotStatConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotStatConfig_ = $SlotStatConfig$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$AbyssAxe" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$BattleAxeItem, $BattleAxeItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$BattleAxeItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $AbyssAxe extends $BattleAxeItem implements $LegendaryWeapon {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbyssAxe$Type = ($AbyssAxe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbyssAxe_ = $AbyssAxe$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechMobileModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $MechMobileModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MechMobileModifier$Type = ($MechMobileModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MechMobileModifier_ = $MechMobileModifier$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/screen/track/$ItemBasedTraceData" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$TrackedEntryData, $TrackedEntryData$Type} from "packages/dev/xkmc/l2screentracker/screen/track/$TrackedEntryData"

export class $ItemBasedTraceData extends $Record implements $TrackedEntryData<($ItemBasedTraceData)> {

constructor(parent: $PlayerSlot$Type<(any)>, verifier: $Item$Type)

public "parent"(): $PlayerSlot<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "verifier"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemBasedTraceData$Type = ($ItemBasedTraceData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemBasedTraceData_ = $ItemBasedTraceData$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/data/$BoMDData" {
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"

export class $BoMDData {

constructor()

public static "genConfig"(arg0: $ConfigDataProvider$Collector$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BoMDData$Type = ($BoMDData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BoMDData_ = $BoMDData$Type;
}}
declare module "packages/dev/xkmc/l2library/util/math/$MathHelper" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"

export class $MathHelper {

constructor()

public static "pick"<T>(arg0: $List$Type<(T)>, arg1: $Function$Type<(T), (integer)>, arg2: double): T
public static "getUUIDFromString"(arg0: string): $UUID
public static "horSq"(arg0: $Vec3$Type): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathHelper$Type = ($MathHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathHelper_ = $MathHelper$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/click/$DoubleClickItem" {
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $DoubleClickItem {

 "mergeStack"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): void
 "remainingSpace"(arg0: $ItemStack$Type): integer
 "canAbsorb"(arg0: $Slot$Type, arg1: $ItemStack$Type): boolean
}

export namespace $DoubleClickItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleClickItem$Type = ($DoubleClickItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleClickItem_ = $DoubleClickItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/equipments/$MetalGolemBeaconItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TickEquipmentItem, $TickEquipmentItem$Type} from "packages/dev/xkmc/modulargolems/content/item/equipments/$TickEquipmentItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$GolemEquipmentItem, $GolemEquipmentItem$Type} from "packages/dev/xkmc/modulargolems/content/item/equipments/$GolemEquipmentItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MetalGolemBeaconItem extends $GolemEquipmentItem implements $TickEquipmentItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer)

public "tick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type): void
public "getBeaconLevel"(): integer
get "beaconLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalGolemBeaconItem$Type = ($MetalGolemBeaconItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalGolemBeaconItem_ = $MetalGolemBeaconItem$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/bag/$AbstractBag" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$DoubleClickItem, $DoubleClickItem$Type} from "packages/dev/xkmc/l2backpack/content/click/$DoubleClickItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$PickupBagItem, $PickupBagItem$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupBagItem"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TooltipInvItem, $TooltipInvItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$TooltipInvItem"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CapInsertItem, $CapInsertItem$Type} from "packages/dev/xkmc/l2backpack/content/insert/$CapInsertItem"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$ContentTransfer$Quad, $ContentTransfer$Quad$Type} from "packages/dev/xkmc/l2backpack/content/common/$ContentTransfer$Quad"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AbstractBag extends $Item implements $ContentTransfer$Quad, $PickupBagItem, $CapInsertItem, $TooltipInvItem, $DoubleClickItem {
static readonly "SIZE": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getSize"(arg0: $ItemStack$Type): integer
public "getContent"(arg0: $ItemStack$Type): $NonNullList<($ItemStack)>
public "mergeStack"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): void
public "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
public static "isFilled"(arg0: $ItemStack$Type): boolean
public "remainingSpace"(arg0: $ItemStack$Type): integer
public "setContent"(arg0: $ItemStack$Type, arg1: $NonNullList$Type<($ItemStack$Type)>): void
public "getInvSize"(arg0: $ItemStack$Type): integer
public "getInvItems"(arg0: $ItemStack$Type, arg1: $Player$Type): $List<($ItemStack)>
public "mayClientTake"(): boolean
public "getRowSize"(): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "getTooltipImage"(arg0: $ItemStack$Type): $Optional<($TooltipComponent)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "canFitInsideContainerItems"(): boolean
public "canAbsorb"(arg0: $Slot$Type, arg1: $ItemStack$Type): boolean
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
public "click"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: boolean, arg3: boolean, arg4: boolean, arg5: $IItemHandler$Type): void
public "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
public "isValidContent"(arg0: $ItemStack$Type): boolean
public "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
public "getInvCap"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $IItemHandler
public "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
public "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
get "rowSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractBag$Type = ($AbstractBag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractBag_ = $AbstractBag$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkDifficulty" {
import {$LevelChunk, $LevelChunk$Type} from "packages/net/minecraft/world/level/chunk/$LevelChunk"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MobDifficultyCollector, $MobDifficultyCollector$Type} from "packages/dev/xkmc/l2hostility/content/logic/$MobDifficultyCollector"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RegionalDifficultyModifier, $RegionalDifficultyModifier$Type} from "packages/dev/xkmc/l2hostility/content/capability/chunk/$RegionalDifficultyModifier"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SectionDifficulty, $SectionDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/chunk/$SectionDifficulty"

export class $ChunkDifficulty implements $RegionalDifficultyModifier {
static "CAPABILITY": $Capability<($ChunkDifficulty)>
readonly "chunk": $LevelChunk


public static "register"(): void
public "init"(): void
public static "at"(arg0: $Level$Type, arg1: $BlockPos$Type): $Optional<($ChunkDifficulty)>
public static "at"(arg0: $Level$Type, arg1: integer, arg2: integer): $Optional<($ChunkDifficulty)>
public "addKillHistory"(arg0: $Player$Type, arg1: $LivingEntity$Type, arg2: $MobTraitCap$Type): void
public "modifyInstance"(arg0: $BlockPos$Type, arg1: $MobDifficultyCollector$Type): void
public "getSection"(arg0: integer): $SectionDifficulty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChunkDifficulty$Type = ($ChunkDifficulty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChunkDifficulty_ = $ChunkDifficulty$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/blazegear/$DuplicatedBlazeArmsModel" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$ListModel, $ListModel$Type} from "packages/net/minecraft/client/model/$ListModel"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $DuplicatedBlazeArmsModel<T extends $AbstractGolemEntity<(any), (any)>> extends $ListModel<(T)> {
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "parts"(): $Iterable<($ModelPart)>
public "setupAnim"(arg0: T, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DuplicatedBlazeArmsModel$Type<T> = ($DuplicatedBlazeArmsModel<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DuplicatedBlazeArmsModel_<T> = $DuplicatedBlazeArmsModel$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/init/events/$GeneralEventHandler" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$AddReloadListenerEvent, $AddReloadListenerEvent$Type} from "packages/net/minecraftforge/event/$AddReloadListenerEvent"
import {$ExplosionEvent$Detonate, $ExplosionEvent$Detonate$Type} from "packages/net/minecraftforge/event/level/$ExplosionEvent$Detonate"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$OnDatapackSyncEvent, $OnDatapackSyncEvent$Type} from "packages/net/minecraftforge/event/$OnDatapackSyncEvent"

export class $GeneralEventHandler {

constructor()

public static "onDetonate"(arg0: $ExplosionEvent$Detonate$Type): void
public static "schedulePersistent"(arg0: $BooleanSupplier$Type): void
public static "onDatapackSync"(arg0: $OnDatapackSyncEvent$Type): void
public static "schedule"(arg0: $Runnable$Type): void
public static "addReloadListeners"(arg0: $AddReloadListenerEvent$Type): void
public static "serverTick"(arg0: $TickEvent$ServerTickEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeneralEventHandler$Type = ($GeneralEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeneralEventHandler_ = $GeneralEventHandler$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/twilightforest/$KnightmetalTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $KnightmetalTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KnightmetalTool$Type = ($KnightmetalTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KnightmetalTool_ = $KnightmetalTool$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/client/select/$SetSelectScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$AbstractSelectScreen, $AbstractSelectScreen$Type} from "packages/dev/xkmc/l2artifacts/content/client/select/$AbstractSelectScreen"

export class $SetSelectScreen extends $AbstractSelectScreen {
readonly "manager": $SpriteManager
readonly "slots": (string)[]
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor()

public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetSelectScreen$Type = ($SetSelectScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetSelectScreen_ = $SetSelectScreen$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe$RecipeFactory" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$AbstractShapedRecipe, $AbstractShapedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $AbstractShapedRecipe$RecipeFactory<T extends $AbstractShapedRecipe<(T)>> {

 "create"(arg0: $ResourceLocation$Type, arg1: string, arg2: integer, arg3: integer, arg4: $NonNullList$Type<($Ingredient$Type)>, arg5: $ItemStack$Type): T

(arg0: $ResourceLocation$Type, arg1: string, arg2: integer, arg3: integer, arg4: $NonNullList$Type<($Ingredient$Type)>, arg5: $ItemStack$Type): T
}

export namespace $AbstractShapedRecipe$RecipeFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractShapedRecipe$RecipeFactory$Type<T> = ($AbstractShapedRecipe$RecipeFactory<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractShapedRecipe$RecipeFactory_<T> = $AbstractShapedRecipe$RecipeFactory$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/items/$ArtifactItems" {
import {$RandomArtifactItem, $RandomArtifactItem$Type} from "packages/dev/xkmc/l2artifacts/content/misc/$RandomArtifactItem"
import {$StatContainerItem, $StatContainerItem$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$StatContainerItem"
import {$ExpItem, $ExpItem$Type} from "packages/dev/xkmc/l2artifacts/content/misc/$ExpItem"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$ArtifactSwapItem, $ArtifactSwapItem$Type} from "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapItem"
import {$RandomArtifactSetItem, $RandomArtifactSetItem$Type} from "packages/dev/xkmc/l2artifacts/content/misc/$RandomArtifactSetItem"
import {$ArtifactChestItem, $ArtifactChestItem$Type} from "packages/dev/xkmc/l2artifacts/content/misc/$ArtifactChestItem"
import {$UpgradeBoostItem, $UpgradeBoostItem$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$UpgradeBoostItem"
import {$SelectArtifactItem, $SelectArtifactItem$Type} from "packages/dev/xkmc/l2artifacts/content/misc/$SelectArtifactItem"

export class $ArtifactItems {
static readonly "RANK_NAME": (string)[]
static readonly "SELECT": $ItemEntry<($SelectArtifactItem)>
static readonly "FILTER": $ItemEntry<($ArtifactChestItem)>
static readonly "UPGRADED_POCKET": $ItemEntry<($ArtifactChestItem)>
static readonly "SWAP": $ItemEntry<($ArtifactSwapItem)>
static readonly "RANDOM": ($ItemEntry<($RandomArtifactItem)>)[]
static readonly "RANDOM_SET": ($ItemEntry<($RandomArtifactSetItem)>)[]
static readonly "ITEM_EXP": ($ItemEntry<($ExpItem)>)[]
static readonly "ITEM_STAT": ($ItemEntry<($StatContainerItem)>)[]
static readonly "ITEM_BOOST_MAIN": ($ItemEntry<($UpgradeBoostItem)>)[]
static readonly "ITEM_BOOST_SUB": ($ItemEntry<($UpgradeBoostItem)>)[]

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactItems$Type = ($ArtifactItems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactItems_ = $ArtifactItems$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$BagCountDeco" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IItemDecorator, $IItemDecorator$Type} from "packages/net/minecraftforge/client/$IItemDecorator"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $BagCountDeco implements $IItemDecorator {

constructor()

public "render"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BagCountDeco$Type = ($BagCountDeco);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BagCountDeco_ = $BagCountDeco$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/mob/$MasterData$Minion" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"

export class $MasterData$Minion {
 "uuid": $UUID
 "id": integer
 "minion": $Mob

constructor()

public "tick"(arg0: $Mob$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MasterData$Minion$Type = ($MasterData$Minion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MasterData$Minion_ = $MasterData$Minion$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/bag/$EquipmentBag" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$AbstractBag, $AbstractBag$Type} from "packages/dev/xkmc/l2backpack/content/bag/$AbstractBag"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EquipmentBag extends $AbstractBag {
static readonly "SIZE": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "isValidContent"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentBag$Type = ($EquipmentBag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentBag_ = $EquipmentBag$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$ISetSwapAction" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ISetSwapHandler, $ISetSwapHandler$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISetSwapHandler"

export interface $ISetSwapAction {

 "swapSet"(arg0: $Player$Type, arg1: $ISetSwapHandler$Type): void

(arg0: $Player$Type, arg1: $ISetSwapHandler$Type): void
}

export namespace $ISetSwapAction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISetSwapAction$Type = ($ISetSwapAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISetSwapAction_ = $ISetSwapAction$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechForceModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $MechForceModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MechForceModifier$Type = ($MechForceModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MechForceModifier_ = $MechForceModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemHandleItemEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$GolemEvent, $GolemEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemEvent"

export class $GolemHandleItemEvent extends $GolemEvent {

constructor()
constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $ItemEntity$Type)

public "getItem"(): $ItemEntity
public "getListenerList"(): $ListenerList
get "item"(): $ItemEntity
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemHandleItemEvent$Type = ($GolemHandleItemEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemHandleItemEvent_ = $GolemHandleItemEvent$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/automation/$CreateJEIEvents" {
import {$CustomRecipeEvent, $CustomRecipeEvent$Type} from "packages/dev/xkmc/modulargolems/compat/jei/$CustomRecipeEvent"

export class $CreateJEIEvents {

constructor()

public static "onJEICustomRecipe"(arg0: $CustomRecipeEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateJEIEvents$Type = ($CreateJEIEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateJEIEvents_ = $CreateJEIEvents$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/create/$VoidEyeItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ShadowSteelItem, $ShadowSteelItem$Type} from "packages/dev/xkmc/l2complements/content/item/create/$ShadowSteelItem"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $VoidEyeItem extends $ShadowSteelItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MutableComponent$Type)>)

public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "onEntityItemUpdate"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VoidEyeItem$Type = ($VoidEyeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VoidEyeItem_ = $VoidEyeItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/events/$ClientEvents" {
import {$RenderLevelStageEvent, $RenderLevelStageEvent$Type} from "packages/net/minecraftforge/client/event/$RenderLevelStageEvent"
import {$RenderNameTagEvent, $RenderNameTagEvent$Type} from "packages/net/minecraftforge/client/event/$RenderNameTagEvent"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"
import {$ItemTooltipEvent, $ItemTooltipEvent$Type} from "packages/net/minecraftforge/event/entity/player/$ItemTooltipEvent"

export class $ClientEvents {

constructor()

public static "renderNamePlate"(arg0: $RenderNameTagEvent$Type): void
public static "onLevelRenderLast"(arg0: $RenderLevelStageEvent$Type): void
public static "addTooltip"(arg0: $ItemTooltipEvent$Type): void
public static "onClientTick"(arg0: $TickEvent$ClientTickEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEvents$Type = ($ClientEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEvents_ = $ClientEvents$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/ingredients/$PotionIngredient" {
import {$Ingredient$Value, $Ingredient$Value$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient$Value"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$IntList, $IntList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntList"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$BaseIngredient, $BaseIngredient$Type} from "packages/dev/xkmc/l2library/serial/ingredients/$BaseIngredient"
import {$BaseIngredient$Serializer, $BaseIngredient$Serializer$Type} from "packages/dev/xkmc/l2library/serial/ingredients/$BaseIngredient$Serializer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"

export class $PotionIngredient extends $BaseIngredient<($PotionIngredient)> {
static readonly "INSTANCE": $BaseIngredient$Serializer<($PotionIngredient)>
 "potion": $Potion
static readonly "EMPTY": $Ingredient
 "values": ($Ingredient$Value)[]
 "itemStacks": ($ItemStack)[]
 "stackingIds": $IntList

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $Potion$Type)

public "test"(arg0: $ItemStack$Type): boolean
public "getSerializer"(): $BaseIngredient$Serializer<($PotionIngredient)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<(T)>
public static "isEqual"<T>(arg0: any): $Predicate<(T)>
get "serializer"(): $BaseIngredient$Serializer<($PotionIngredient)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotionIngredient$Type = ($PotionIngredient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotionIngredient_ = $PotionIngredient$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/client/outline/$BlockOutliner" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$PathRecordCard$Pos, $PathRecordCard$Pos$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$PathRecordCard$Pos"

export class $BlockOutliner {

constructor()

public static "drawOutlines"(arg0: $Player$Type, arg1: $Collection$Type<($PathRecordCard$Pos$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockOutliner$Type = ($BlockOutliner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockOutliner_ = $BlockOutliner$Type;
}}
declare module "packages/dev/xkmc/modulargolems/mixin/$ExperienceOrbAccessor" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ExperienceOrbAccessor {

 "getCount"(): integer
 "setCount"(arg0: integer): void
}

export namespace $ExperienceOrbAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExperienceOrbAccessor$Type = ($ExperienceOrbAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExperienceOrbAccessor_ = $ExperienceOrbAccessor$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/quiver/$Quiver" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$SingleSwapItem, $SingleSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$SingleSwapItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemOnBackItem, $ItemOnBackItem$Type} from "packages/dev/xkmc/l2backpack/content/render/$ItemOnBackItem"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Quiver extends $SingleSwapItem implements $ItemOnBackItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "open"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type): void
public static "displayArrow"(arg0: $ItemStack$Type): float
public static "isValidStack"(arg0: $ItemStack$Type): boolean
public "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
public "isValidContent"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "shouldRender"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Quiver$Type = ($Quiver);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Quiver_ = $Quiver$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/$EffectUtil" {
import {$EffectUtil$AddReason, $EffectUtil$AddReason$Type} from "packages/dev/xkmc/l2library/base/effects/$EffectUtil$AddReason"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EffectUtil {

constructor()

public static "getReason"(): $EffectUtil$AddReason
public static "refreshEffect"(arg0: $LivingEntity$Type, arg1: $MobEffectInstance$Type, arg2: $EffectUtil$AddReason$Type, arg3: $Entity$Type): void
public static "removeEffect"(arg0: $LivingEntity$Type, arg1: $Predicate$Type<($MobEffectInstance$Type)>): void
public static "addEffect"(arg0: $LivingEntity$Type, arg1: $MobEffectInstance$Type, arg2: $EffectUtil$AddReason$Type, arg3: $Entity$Type): void
get "reason"(): $EffectUtil$AddReason
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectUtil$Type = ($EffectUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectUtil_ = $EffectUtil$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$SculkiumArmor" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ExtraArmorConfig, $ExtraArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $SculkiumArmor extends $ExtraArmorConfig {
 "repair_chance": double
 "damage_chance": double
 "magic_immune": integer

constructor()

public "dampenVibration"(): boolean
public "modify"(arg0: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg1: $EquipmentSlot$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SculkiumArmor$Type = ($SculkiumArmor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SculkiumArmor_ = $SculkiumArmor$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/mult/$PlacementBlockMethod" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$MultipleBlockMethod, $MultipleBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$MultipleBlockMethod"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export interface $PlacementBlockMethod extends $MultipleBlockMethod {

 "getStateForPlacement"(arg0: $BlockState$Type, arg1: $BlockPlaceContext$Type): $BlockState

(arg0: $BlockState$Type, arg1: $BlockPlaceContext$Type): $BlockState
}

export namespace $PlacementBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlacementBlockMethod$Type = ($PlacementBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlacementBlockMethod_ = $PlacementBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/events/$ClientRenderEvents" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RenderHandEvent, $RenderHandEvent$Type} from "packages/net/minecraftforge/client/event/$RenderHandEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ClientRenderEvents {

constructor()

public static "renderHandEvent"(arg0: $RenderHandEvent$Type): void
public static "onNunchakuUse"(arg0: $Player$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientRenderEvents$Type = ($ClientRenderEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientRenderEvents_ = $ClientRenderEvents$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$EntityConfig" {
import {$EntityConfig$ItemPool, $EntityConfig$ItemPool$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$ItemPool"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$EntityConfig$Config, $EntityConfig$Config$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$Config"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$EntityConfig$TraitBase, $EntityConfig$TraitBase$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$TraitBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EntityConfig extends $BaseConfig {
readonly "list": $ArrayList<($EntityConfig$Config)>

constructor()

public "get"<T>(arg0: $EntityType$Type<(any)>, arg1: $ResourceLocation$Type, arg2: $Class$Type<(T)>, arg3: T): $EntityConfig$Config
public "get"(arg0: $EntityType$Type<(any)>): $EntityConfig$Config
public "put"(arg0: $EntityConfig$Config$Type): $EntityConfig
public static "allow"(arg0: $EntityType$Type<(any)>, arg1: $MobTrait$Type): boolean
public "putEntityAndItem"(arg0: integer, arg1: integer, arg2: double, arg3: double, arg4: $List$Type<($EntityType$Type<(any)>)>, arg5: $List$Type<($EntityConfig$TraitBase$Type)>, arg6: $List$Type<($EntityConfig$ItemPool$Type)>): $EntityConfig
public "putEntity"(arg0: integer, arg1: integer, arg2: double, arg3: double, arg4: $List$Type<($EntityType$Type<(any)>)>, arg5: $List$Type<($EntityConfig$TraitBase$Type)>): $EntityConfig
public static "simplePool"(arg0: integer, arg1: string, arg2: $ItemStack$Type): $EntityConfig$ItemPool
public static "trait"(arg0: $MobTrait$Type, arg1: integer, arg2: integer, arg3: integer, arg4: float): $EntityConfig$TraitBase
public static "trait"(arg0: $MobTrait$Type, arg1: integer, arg2: integer): $EntityConfig$TraitBase
public static "entity"(arg0: integer, arg1: integer, arg2: double, arg3: double, arg4: $List$Type<($EntityType$Type<(any)>)>): $EntityConfig$Config
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityConfig$Type = ($EntityConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityConfig_ = $EntityConfig$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$LivingEvent, $LivingEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $GolemEvent extends $LivingEvent {

constructor()
constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>)

public "getListenerList"(): $ListenerList
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemEvent$Type = ($GolemEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemEvent_ = $GolemEvent$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$MetalGolemPartType, $MetalGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemPartType"
import {$MetalGolemEntity, $MetalGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$HierarchicalModel, $HierarchicalModel$Type} from "packages/net/minecraft/client/model/$HierarchicalModel"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IGolemModel, $IGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$IGolemModel"
import {$IHeadedModel, $IHeadedModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$IHeadedModel"

export class $MetalGolemModel extends $HierarchicalModel<($MetalGolemEntity)> implements $IGolemModel<($MetalGolemEntity), ($MetalGolemPartType), ($MetalGolemModel)>, $IHeadedModel {
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "leftForeArm": $ModelPart
readonly "rightForeArm": $ModelPart
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $EntityModelSet$Type)
constructor(arg0: $ModelPart$Type)

public "copyFrom"(arg0: $MetalGolemModel$Type): void
public "root"(): $ModelPart
public "setupAnim"(arg0: $MetalGolemEntity$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public "translateToHead"(arg0: $PoseStack$Type): void
public "prepareMobModel"(arg0: $MetalGolemEntity$Type, arg1: float, arg2: float, arg3: float): void
public "transformToHand"(arg0: $EquipmentSlot$Type, arg1: $PoseStack$Type): void
public "getHead"(): $ModelPart
public "getTextureLocationInternal"(arg0: $ResourceLocation$Type): $ResourceLocation
public "renderToBufferInternal"(arg0: $MetalGolemPartType$Type, arg1: $PoseStack$Type, arg2: $VertexConsumer$Type, arg3: integer, arg4: integer, arg5: float, arg6: float, arg7: float, arg8: float): void
public "getThis"(): $MetalGolemModel
get "head"(): $ModelPart
get "this"(): $MetalGolemModel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalGolemModel$Type = ($MetalGolemModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalGolemModel_ = $MetalGolemModel$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$AttributeEnchantment" {
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"

export interface $AttributeEnchantment {

 "addAttributes"(arg0: integer, arg1: $ItemAttributeModifierEvent$Type): void

(arg0: integer, arg1: $ItemAttributeModifierEvent$Type): void
}

export namespace $AttributeEnchantment {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeEnchantment$Type = ($AttributeEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeEnchantment_ = $AttributeEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/bag/$BagItemHandler" {
import {$FastBagItemHandler, $FastBagItemHandler$Type} from "packages/dev/xkmc/l2backpack/content/bag/$FastBagItemHandler"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AbstractBag, $AbstractBag$Type} from "packages/dev/xkmc/l2backpack/content/bag/$AbstractBag"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandlerModifiable, $IItemHandlerModifiable$Type} from "packages/net/minecraftforge/items/$IItemHandlerModifiable"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export class $BagItemHandler extends $Record implements $IItemHandlerModifiable {

constructor(bag: $AbstractBag$Type, bagStack: $ItemStack$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getSlots"(): integer
public "bag"(): $AbstractBag
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "bagStack"(): $ItemStack
public "toFast"(): $FastBagItemHandler
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "slots"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BagItemHandler$Type = ($BagItemHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BagItemHandler_ = $BagItemHandler$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestMenuPvd" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$StorageContainer, $StorageContainer$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$StorageContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$WorldChestItem, $WorldChestItem$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestItem"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $WorldChestMenuPvd extends $Record implements $MenuProvider {

constructor(player: $ServerPlayer$Type, stack: $ItemStack$Type, item: $WorldChestItem$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "open"(): void
public "item"(): $WorldChestItem
public "getDisplayName"(): $Component
public "player"(): $ServerPlayer
public "getContainer"(arg0: $ServerLevel$Type): $Optional<($StorageContainer)>
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldChestMenuPvd$Type = ($WorldChestMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldChestMenuPvd_ = $WorldChestMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/registrate/$LHTraits" {
import {$RegistrateTagsProvider$IntrinsicImpl, $RegistrateTagsProvider$IntrinsicImpl$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider$IntrinsicImpl"
import {$UndyingTrait, $UndyingTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$UndyingTrait"
import {$SplitTrait, $SplitTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/highlevel/$SplitTrait"
import {$L2Registrate$RegistryInstance, $L2Registrate$RegistryInstance$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate$RegistryInstance"
import {$CorrosionTrait, $CorrosionTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/highlevel/$CorrosionTrait"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$AdaptingTrait, $AdaptingTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$AdaptingTrait"
import {$InvisibleTrait, $InvisibleTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$InvisibleTrait"
import {$DementorTrait, $DementorTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$DementorTrait"
import {$ErosionTrait, $ErosionTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/highlevel/$ErosionTrait"
import {$ReflectTrait, $ReflectTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$ReflectTrait"
import {$TargetEffectTrait, $TargetEffectTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$TargetEffectTrait"
import {$AuraEffectTrait, $AuraEffectTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$AuraEffectTrait"
import {$RepellingTrait, $RepellingTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$RepellingTrait"
import {$DispellTrait, $DispellTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$DispellTrait"
import {$EnderTrait, $EnderTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/goals/$EnderTrait"
import {$PullingTrait, $PullingTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$PullingTrait"
import {$SelfEffectTrait, $SelfEffectTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$SelfEffectTrait"
import {$ProviderType, $ProviderType$Type} from "packages/com/tterrag/registrate/providers/$ProviderType"
import {$KillerAuraTrait, $KillerAuraTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$KillerAuraTrait"
import {$FieryTrait, $FieryTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$FieryTrait"
import {$ShulkerTrait, $ShulkerTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$ShulkerTrait"
import {$ArenaTrait, $ArenaTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/highlevel/$ArenaTrait"
import {$ReprintTrait, $ReprintTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/highlevel/$ReprintTrait"
import {$CounterStrikeTrait, $CounterStrikeTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/goals/$CounterStrikeTrait"
import {$DrainTrait, $DrainTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/highlevel/$DrainTrait"
import {$GravityTrait, $GravityTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$GravityTrait"
import {$MasterTrait, $MasterTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$MasterTrait"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$GrowthTrait, $GrowthTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/highlevel/$GrowthTrait"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$AttributeTrait, $AttributeTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$AttributeTrait"
import {$RegenTrait, $RegenTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$RegenTrait"
import {$RagnarokTrait, $RagnarokTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$RagnarokTrait"

export class $LHTraits {
static readonly "TRAITS": $L2Registrate$RegistryInstance<($MobTrait)>
static readonly "TRAIT_TAGS": $ProviderType<($RegistrateTagsProvider$IntrinsicImpl<($MobTrait)>)>
static readonly "POTION": $TagKey<($MobTrait)>
static readonly "TANK": $RegistryEntry<($AttributeTrait)>
static readonly "SPEEDY": $RegistryEntry<($AttributeTrait)>
static readonly "PROTECTION": $RegistryEntry<($SelfEffectTrait)>
static readonly "WEAKNESS": $RegistryEntry<($TargetEffectTrait)>
static readonly "SLOWNESS": $RegistryEntry<($TargetEffectTrait)>
static readonly "POISON": $RegistryEntry<($TargetEffectTrait)>
static readonly "WITHER": $RegistryEntry<($TargetEffectTrait)>
static readonly "BLIND": $RegistryEntry<($TargetEffectTrait)>
static readonly "CONFUSION": $RegistryEntry<($TargetEffectTrait)>
static readonly "LEVITATION": $RegistryEntry<($TargetEffectTrait)>
static readonly "SOUL_BURNER": $RegistryEntry<($TargetEffectTrait)>
static readonly "FREEZING": $RegistryEntry<($TargetEffectTrait)>
static readonly "CURSED": $RegistryEntry<($TargetEffectTrait)>
static readonly "INVISIBLE": $RegistryEntry<($InvisibleTrait)>
static readonly "SHULKER": $RegistryEntry<($ShulkerTrait)>
static readonly "GRENADE": $RegistryEntry<($ShulkerTrait)>
static readonly "FIERY": $RegistryEntry<($FieryTrait)>
static readonly "REGEN": $RegistryEntry<($RegenTrait)>
static readonly "DEMENTOR": $RegistryEntry<($DementorTrait)>
static readonly "DISPELL": $RegistryEntry<($DispellTrait)>
static readonly "ADAPTIVE": $RegistryEntry<($AdaptingTrait)>
static readonly "REFLECT": $RegistryEntry<($ReflectTrait)>
static readonly "UNDYING": $RegistryEntry<($UndyingTrait)>
static readonly "REPELLING": $RegistryEntry<($RepellingTrait)>
static readonly "PULLING": $RegistryEntry<($PullingTrait)>
static readonly "ENDER": $RegistryEntry<($EnderTrait)>
static readonly "CORROSION": $RegistryEntry<($CorrosionTrait)>
static readonly "EROSION": $RegistryEntry<($ErosionTrait)>
static readonly "KILLER_AURA": $RegistryEntry<($KillerAuraTrait)>
static readonly "RAGNAROK": $RegistryEntry<($RagnarokTrait)>
static readonly "GROWTH": $RegistryEntry<($GrowthTrait)>
static readonly "SPLIT": $RegistryEntry<($SplitTrait)>
static readonly "DRAIN": $RegistryEntry<($DrainTrait)>
static readonly "REPRINT": $RegistryEntry<($ReprintTrait)>
static readonly "STRIKE": $RegistryEntry<($CounterStrikeTrait)>
static readonly "GRAVITY": $RegistryEntry<($GravityTrait)>
static readonly "MOONWALK": $RegistryEntry<($AuraEffectTrait)>
static readonly "ARENA": $RegistryEntry<($ArenaTrait)>
static readonly "MASTER": $RegistryEntry<($MasterTrait)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHTraits$Type = ($LHTraits);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHTraits_ = $LHTraits$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemHotFixTrigger" {
import {$GolemHotFixTrigger$Ins, $GolemHotFixTrigger$Ins$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemHotFixTrigger$Ins"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GolemHotFixTrigger extends $BaseCriterion<($GolemHotFixTrigger$Ins), ($GolemHotFixTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type): void
public static "ins"(): $GolemHotFixTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemHotFixTrigger$Type = ($GolemHotFixTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemHotFixTrigger_ = $GolemHotFixTrigger$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/$BlockImplementor" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$SingletonBlockMethod, $SingletonBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$SingletonBlockMethod"
import {$BlockMethod, $BlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$BlockMethod"
import {$MultipleBlockMethod, $MultipleBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$MultipleBlockMethod"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"

export class $BlockImplementor {

constructor(arg0: $BlockBehaviour$Properties$Type)

/**
 * 
 * @deprecated
 */
public "execute"<T extends $MultipleBlockMethod>(arg0: $Class$Type<(T)>): $Stream<(T)>
public "forEach"<T extends $MultipleBlockMethod>(arg0: $Class$Type<(T)>, arg1: $Consumer$Type<(T)>): void
public "reduce"<T extends $MultipleBlockMethod, U>(arg0: $Class$Type<(T)>, arg1: U, arg2: $BiFunction$Type<(U), (T), (U)>): U
public "one"<T extends $SingletonBlockMethod>(arg0: $Class$Type<(T)>): $Optional<(T)>
public "addImpls"(...arg0: ($BlockMethod$Type)[]): $BlockImplementor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockImplementor$Type = ($BlockImplementor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockImplementor_ = $BlockImplementor$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/upgrades/$ArtifactUpgradeManager" {
import {$ArtifactStats, $ArtifactStats$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactStats"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Upgrade, $Upgrade$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$Upgrade"

export class $ArtifactUpgradeManager {

constructor()

public static "getExpForConversion"(arg0: integer, arg1: $ArtifactStats$Type): integer
public static "getMaxLevel"(arg0: integer): integer
public static "onUpgrade"(arg0: $ArtifactStats$Type, arg1: integer, arg2: $Upgrade$Type, arg3: $RandomSource$Type): void
public static "getExpForLevel"(arg0: integer, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactUpgradeManager$Type = ($ArtifactUpgradeManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactUpgradeManager_ = $ArtifactUpgradeManager$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$GenericShieldItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseShieldItem, $BaseShieldItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$BaseShieldItem"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LWTieredItem, $LWTieredItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$LWTieredItem"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $GenericShieldItem extends $BaseShieldItem implements $LWTieredItem {
static readonly "KEY_LAST_DAMAGE": string
static readonly "EFFECTIVE_BLOCK_DELAY": integer
static readonly "MINIMUM_DURABILITY_DAMAGE": float
static readonly "TAG_BASE_COLOR": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: $Item$Properties$Type, arg2: $ExtraToolConfig$Type, arg3: integer, arg4: double, arg5: boolean)

public "getExtraConfig"(): $ExtraToolConfig
public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type): float
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "canBeDepleted"(): boolean
public "mineBlock"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockState$Type, arg3: $BlockPos$Type, arg4: $LivingEntity$Type): boolean
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getEnchantmentValue"(): integer
public "isValidRepairItem"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
public "isHeavy"(): boolean
public "getDefenseRecover"(arg0: $ItemStack$Type): double
public "onReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
public "onBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "getMultiplier"(arg0: $AttackCache$Type): float
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public "isSharp"(): boolean
public static "get"(arg0: $ItemStack$Type): $Equipable
get "extraConfig"(): $ExtraToolConfig
get "enchantmentValue"(): integer
get "heavy"(): boolean
get "sharp"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericShieldItem$Type = ($GenericShieldItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericShieldItem_ = $GenericShieldItem$Type;
}}
declare module "packages/dev/xkmc/l2library/init/events/$ClientEffectRenderEvents" {
import {$RenderLevelStageEvent, $RenderLevelStageEvent$Type} from "packages/net/minecraftforge/client/event/$RenderLevelStageEvent"
import {$EffectToClient, $EffectToClient$Type} from "packages/dev/xkmc/l2library/base/effects/$EffectToClient"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderLivingEvent$Post, $RenderLivingEvent$Post$Type} from "packages/net/minecraftforge/client/event/$RenderLivingEvent$Post"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $ClientEffectRenderEvents {

constructor()

public static "sync"(arg0: $EffectToClient$Type): void
public static "get2DIcon"(arg0: $ResourceLocation$Type): $RenderType
public static "clientTick"(arg0: $TickEvent$ClientTickEvent$Type): void
public static "onLivingEntityRender"(arg0: $RenderLivingEvent$Post$Type<(any), (any)>): void
public static "onLivingRenderEvents"(arg0: $LivingEntity$Type): void
public static "levelRenderLast"(arg0: $RenderLevelStageEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEffectRenderEvents$Type = ($ClientEffectRenderEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEffectRenderEvents_ = $ClientEffectRenderEvents$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/immunes/$ProjectileRejectModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $ProjectileRejectModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProjectileRejectModifier$Type = ($ProjectileRejectModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProjectileRejectModifier_ = $ProjectileRejectModifier$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/core/$PersistentDataSetEffect" {
import {$SetEffectData, $SetEffectData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffectData"
import {$PlayerOnlySetEffect, $PlayerOnlySetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PlayerOnlySetEffect"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TokenProvider, $TokenProvider$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$TokenProvider"
import {$TokenKey, $TokenKey$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$TokenKey"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $PersistentDataSetEffect<T extends $SetEffectData> extends $PlayerOnlySetEffect implements $TokenProvider<(T), ($ArtifactSetConfig$Entry)> {
readonly "ids": integer

constructor(arg0: integer)

public "getKey"(): $TokenKey<(T)>
public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getData"(arg0: $ArtifactSetConfig$Entry$Type): T
get "key"(): $TokenKey<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PersistentDataSetEffect$Type<T> = ($PersistentDataSetEffect<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PersistentDataSetEffect_<T> = $PersistentDataSetEffect$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/spawner/$BaseTraitMethod" {
import {$StateDefinition$Builder, $StateDefinition$Builder$Type} from "packages/net/minecraft/world/level/block/state/$StateDefinition$Builder"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$CreateBlockStateBlockMethod, $CreateBlockStateBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$CreateBlockStateBlockMethod"
import {$LightBlockMethod, $LightBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$LightBlockMethod"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$DefaultStateBlockMethod, $DefaultStateBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$DefaultStateBlockMethod"

export class $BaseTraitMethod implements $CreateBlockStateBlockMethod, $DefaultStateBlockMethod, $LightBlockMethod {

constructor()

public "createBlockStateDefinition"(arg0: $StateDefinition$Builder$Type<($Block$Type), ($BlockState$Type)>): void
public "getDefaultState"(arg0: $BlockState$Type): $BlockState
public "getLightValue"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseTraitMethod$Type = ($BaseTraitMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseTraitMethod_ = $BaseTraitMethod$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$TraitConfig" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IntrinsicHolderTagsProvider$IntrinsicTagAppender, $IntrinsicHolderTagsProvider$IntrinsicTagAppender$Type} from "packages/net/minecraft/data/tags/$IntrinsicHolderTagsProvider$IntrinsicTagAppender"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $TraitConfig extends $BaseConfig {
static readonly "DEFAULT": $TraitConfig
 "min_level": integer
 "cost": integer
 "max_rank": integer
 "weight": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer)

public "allows"(arg0: $EntityType$Type<(any)>): boolean
public "addBlacklist"(arg0: $Consumer$Type<($IntrinsicHolderTagsProvider$IntrinsicTagAppender$Type<($EntityType$Type<(any)>)>)>): $TraitConfig
public "getBlacklistTag"(): $TagKey<($EntityType<(any)>)>
public "addWhitelist"(arg0: $Consumer$Type<($IntrinsicHolderTagsProvider$IntrinsicTagAppender$Type<($EntityType$Type<(any)>)>)>): $TraitConfig
public "getWhitelistTag"(): $TagKey<($EntityType<(any)>)>
get "blacklistTag"(): $TagKey<($EntityType<(any)>)>
get "whitelistTag"(): $TagKey<($EntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitConfig$Type = ($TraitConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitConfig_ = $TraitConfig$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData$AttributePair" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"

export class $AttributeSetData$AttributePair extends $Record {

constructor(attr: $Attribute$Type, id: $UUID$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $UUID
public "attr"(): $Attribute
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeSetData$AttributePair$Type = ($AttributeSetData$AttributePair);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeSetData$AttributePair_ = $AttributeSetData$AttributePair$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/special/$SonicModifier" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $SonicModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onRegisterGoals"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer, arg2: $BiConsumer$Type<(integer), ($Goal$Type)>): void
public "canExistOn"(arg0: $GolemPart$Type<(any), (any)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SonicModifier$Type = ($SonicModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SonicModifier_ = $SonicModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/curio/$GolemCuriosListScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseCuriosListScreen, $BaseCuriosListScreen$Type} from "packages/dev/xkmc/l2tabs/compat/$BaseCuriosListScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ITabScreen, $ITabScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$ITabScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemCuriosListMenu, $GolemCuriosListMenu$Type} from "packages/dev/xkmc/modulargolems/compat/curio/$GolemCuriosListMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $GolemCuriosListScreen extends $BaseCuriosListScreen<($GolemCuriosListMenu)> implements $ITabScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $GolemCuriosListMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "screenHeight"(): integer
public "screenWidth"(): integer
public "m_7856_"(): void
public "asScreen"(): $Screen
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemCuriosListScreen$Type = ($GolemCuriosListScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemCuriosListScreen_ = $GolemCuriosListScreen$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/curios/$EffectValidItem" {
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $EffectValidItem {

 "isEffectValid"(arg0: $MobEffectInstance$Type, arg1: $ItemStack$Type, arg2: $LivingEntity$Type): boolean

(arg0: $MobEffectInstance$Type, arg1: $ItemStack$Type, arg2: $LivingEntity$Type): boolean
}

export namespace $EffectValidItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectValidItem$Type = ($EffectValidItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectValidItem_ = $EffectValidItem$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/advancements/$ModLoadedAdv" {
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$JsonArray, $JsonArray$Type} from "packages/com/google/gson/$JsonArray"
import {$IAdvBuilder, $IAdvBuilder$Type} from "packages/dev/xkmc/l2library/serial/advancements/$IAdvBuilder"

export class $ModLoadedAdv extends $Record implements $IAdvBuilder {

constructor(...modid: (string)[])

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "addConditions"(arg0: $JsonArray$Type): void
public "modid"(): (string)[]
public "onBuild"(): void
public "modify"(arg0: string, arg1: $Advancement$Builder$Type): void
public "modifyJson"(arg0: $JsonObject$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModLoadedAdv$Type = ($ModLoadedAdv);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModLoadedAdv_ = $ModLoadedAdv$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/sync/$SyncedData$Serializer" {
import {$EntityDataSerializer, $EntityDataSerializer$Type} from "packages/net/minecraft/network/syncher/$EntityDataSerializer"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"

export class $SyncedData$Serializer<T> extends $Record {

constructor(ser: $EntityDataSerializer$Type<(T)>, write: $Function$Type<(T), ($Tag$Type)>, read: $Function$Type<($Tag$Type), (T)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "write"(): $Function<(T), ($Tag)>
public "write"(arg0: T): $Tag
public "read"(): $Function<($Tag), (T)>
public "read"(arg0: $Tag$Type): T
public "ser"(): $EntityDataSerializer<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncedData$Serializer$Type<T> = ($SyncedData$Serializer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncedData$Serializer_<T> = $SyncedData$Serializer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetBuilder" {
import {$AbstractBuilder, $AbstractBuilder$Type} from "packages/com/tterrag/registrate/builders/$AbstractBuilder"
import {$ArtifactRegistrate, $ArtifactRegistrate$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$ArtifactRegistrate"
import {$BuilderCallback, $BuilderCallback$Type} from "packages/com/tterrag/registrate/builders/$BuilderCallback"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ArtifactSetConfig$SetBuilder, $ArtifactSetConfig$SetBuilder$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$SetBuilder"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ArtifactSlot, $ArtifactSlot$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot"

export class $SetBuilder<T extends $ArtifactSet, I extends $BaseArtifact, P> extends $AbstractBuilder<($ArtifactSet), (T), (P), ($SetBuilder<(T), (I), (P)>)> {

constructor(arg0: $ArtifactRegistrate$Type, arg1: P, arg2: string, arg3: $BuilderCallback$Type, arg4: $NonNullSupplier$Type<(T)>, arg5: integer, arg6: integer)

public "register"(): $SetEntry<(T)>
public "lang"(arg0: string): $SetBuilder<(T), (I), (P)>
public "setSlots"(...arg0: ($RegistryEntry$Type<($ArtifactSlot$Type)>)[]): $SetBuilder<(T), (I), (P)>
public "regItems"(): $SetBuilder<(T), (I), (P)>
public "buildConfig"(arg0: $Consumer$Type<($ArtifactSetConfig$SetBuilder$Type)>): $SetBuilder<(T), (I), (P)>
public static "of"<T>(arg0: $Supplier$Type<(T)>, arg1: $NonNullSupplier$Type<(string)>): $NonNullSupplier<(T)>
public static "of"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
public static "lazy"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
set "slots"(value: ($RegistryEntry$Type<($ArtifactSlot$Type)>)[])
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetBuilder$Type<T, I, P> = ($SetBuilder<(T), (I), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetBuilder_<T, I, P> = $SetBuilder$Type<(T), (I), (P)>;
}}
declare module "packages/dev/xkmc/modulargolems/init/material/$IGolemWeaponMaterial" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"

export interface $IGolemWeaponMaterial {

 "getName"(): string
 "modify"(arg0: $Item$Properties$Type): $Item$Properties
 "getDamage"(): integer
 "fireResistant"(): boolean
 "getIngot"(): $Item
}

export namespace $IGolemWeaponMaterial {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IGolemWeaponMaterial$Type = ($IGolemWeaponMaterial);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IGolemWeaponMaterial_ = $IGolemWeaponMaterial$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/ranged/$GolemShooterHelper" {
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$GolemThrowableEvent, $GolemThrowableEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemThrowableEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GolemShooterHelper {

constructor()

public static "isValidThrowableWeapon"(arg0: $HumanoidGolemEntity$Type, arg1: $ItemStack$Type, arg2: $InteractionHand$Type): $GolemThrowableEvent
public static "arrowIsInfinite"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public static "shootAimHelper"(arg0: $LivingEntity$Type, arg1: $Projectile$Type): void
public static "shootAimHelper"(arg0: $LivingEntity$Type, arg1: $Projectile$Type, arg2: double, arg3: double): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemShooterHelper$Type = ($GolemShooterHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemShooterHelper_ = $GolemShooterHelper$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/config/$ConfigToggleTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$ConfigGroup"
import {$GolemTabBase, $GolemTabBase$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $ConfigToggleTab extends $GolemTabBase<($ConfigGroup), ($ConfigToggleTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $GolemTabToken<(G), (T)>
readonly "manager": $GolemTabManager<(G)>
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $GolemTabToken$Type<($ConfigGroup$Type), ($ConfigToggleTab$Type)>, arg2: $GolemTabManager$Type<($ConfigGroup$Type)>, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigToggleTab$Type = ($ConfigToggleTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigToggleTab_ = $ConfigToggleTab$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/$DiffuseRecipeCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$DiffusionRecipe, $DiffusionRecipe$Type} from "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipe"
import {$BaseRecipeCategory, $BaseRecipeCategory$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipeCategory"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $DiffuseRecipeCategory extends $BaseRecipeCategory<($DiffusionRecipe), ($DiffuseRecipeCategory)> {

constructor()

public "init"(arg0: $IGuiHelper$Type): $DiffuseRecipeCategory
public "getTitle"(): $Component
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $DiffusionRecipe$Type, arg2: $IFocusGroup$Type): void
get "title"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiffuseRecipeCategory$Type = ($DiffuseRecipeCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiffuseRecipeCategory_ = $DiffuseRecipeCategory$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$WrappedInstance" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$RectInstance, $RectInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$RectInstance"

export class $WrappedInstance extends $Record implements $BlockBreakerInstance {

constructor(modulator: $Function$Type<($BlockPos$Type), ($BlockPos$Type)>, ins: $RectInstance$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "find"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Predicate$Type<($BlockPos$Type)>): $List<($BlockPos)>
public "ins"(): $RectInstance
public "modulator"(): $Function<($BlockPos), ($BlockPos)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrappedInstance$Type = ($WrappedInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrappedInstance_ = $WrappedInstance$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/feature/$EnchantmentFeaturePredicate" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$FeaturePredicate, $FeaturePredicate$Type} from "packages/dev/xkmc/l2complements/content/feature/$FeaturePredicate"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EnchantmentFeaturePredicate extends $Record implements $FeaturePredicate {

constructor(e: $Supplier$Type<($Enchantment$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $LivingEntity$Type): boolean
public "e"(): $Supplier<($Enchantment)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentFeaturePredicate$Type = ($EnchantmentFeaturePredicate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentFeaturePredicate_ = $EnchantmentFeaturePredicate$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/loot/$ArtifactLootGen" {
import {$RegistrateLootTableProvider, $RegistrateLootTableProvider$Type} from "packages/com/tterrag/registrate/providers/loot/$RegistrateLootTableProvider"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ArtifactLootGen {
static readonly "DROP_FUNGUS": $ResourceLocation

constructor()

public static "onLootGen"(arg0: $RegistrateLootTableProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactLootGen$Type = ($ArtifactLootGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactLootGen_ = $ArtifactLootGen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ModifierInstance, $ModifierInstance$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$ModifierInstance"
import {$GolemType, $GolemType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UpgradeItem extends $Item {
static readonly "LIST": $List<($UpgradeItem)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any


public "get"(): $List<($ModifierInstance)>
public "fitsOn"(arg0: $GolemType$Type<(any), (any)>): boolean
public "isFoil"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeItem$Type = ($UpgradeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeItem_ = $UpgradeItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$MasterTrait" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$EntityConfig$MasterConfig, $EntityConfig$MasterConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$MasterConfig"
import {$LegendaryTrait, $LegendaryTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$LegendaryTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $MasterTrait extends $LegendaryTrait {

constructor(arg0: $ChatFormatting$Type)

public "allow"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer): boolean
public static "getConfig"(arg0: $EntityType$Type<(any)>): $EntityConfig$MasterConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MasterTrait$Type = ($MasterTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MasterTrait_ = $MasterTrait$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect" {
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$ShieldBlockEvent, $ShieldBlockEvent$Type} from "packages/net/minecraftforge/event/entity/living/$ShieldBlockEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $SetEffect extends $NamedEntry<($SetEffect)> {
readonly "ids": integer

constructor(arg0: integer)

public "update"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "tick"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "playerHurtEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
public "playerShieldBlock"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $ShieldBlockEvent$Type): void
public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerAttackedEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
public "playerKillOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $LivingDeathEvent$Type): void
public "playerDamageOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
public "playerAttackedCancel"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): boolean
public "playerAttackModifyEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $CriticalHitEvent$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetEffect$Type = ($SetEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetEffect_ = $SetEffect$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/screen/source/$SimpleSlotData" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ItemSourceData, $ItemSourceData$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$ItemSourceData"

export class $SimpleSlotData extends $Record implements $ItemSourceData<($SimpleSlotData)> {

constructor(slot: integer)

public "slot"(): integer
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleSlotData$Type = ($SimpleSlotData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleSlotData_ = $SimpleSlotData$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/conditionals/$ClientDataHandler" {
import {$ConditionalToken, $ConditionalToken$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$ConditionalToken"
import {$TokenKey, $TokenKey$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$TokenKey"

export class $ClientDataHandler {

constructor()

public static "handle"<T extends $ConditionalToken>(arg0: $TokenKey$Type<(T)>, arg1: T): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientDataHandler$Type = ($ClientDataHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientDataHandler_ = $ClientDataHandler$Type;
}}
declare module "packages/dev/xkmc/l2tabs/tabs/core/$FloatingButton" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$IntSupplier, $IntSupplier$Type} from "packages/java/util/function/$IntSupplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $FloatingButton extends $Button {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $IntSupplier$Type, arg1: $IntSupplier$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: $Component$Type, arg7: $Button$OnPress$Type)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setXRef"(arg0: $IntSupplier$Type, arg1: integer): void
public "setYRef"(arg0: $IntSupplier$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FloatingButton$Type = ($FloatingButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FloatingButton_ = $FloatingButton$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncBuilder" {
import {$SetRegHelper, $SetRegHelper$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetRegHelper"
import {$AbstractBuilder, $AbstractBuilder$Type} from "packages/com/tterrag/registrate/builders/$AbstractBuilder"
import {$ArtifactRegistrate, $ArtifactRegistrate$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$ArtifactRegistrate"
import {$BuilderCallback, $BuilderCallback$Type} from "packages/com/tterrag/registrate/builders/$BuilderCallback"
import {$LinearFuncHandle, $LinearFuncHandle$Type} from "packages/dev/xkmc/l2artifacts/content/core/$LinearFuncHandle"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $LinearFuncBuilder<P> extends $AbstractBuilder<($LinearFuncHandle), ($LinearFuncHandle), (P), ($LinearFuncBuilder<(P)>)> {

constructor(arg0: $ArtifactRegistrate$Type, arg1: P, arg2: string, arg3: $BuilderCallback$Type, arg4: $SetRegHelper$Type, arg5: $NonNullSupplier$Type<($LinearFuncHandle$Type)>, arg6: double, arg7: double)

public static "of"<T>(arg0: $Supplier$Type<(T)>, arg1: $NonNullSupplier$Type<(string)>): $NonNullSupplier<(T)>
public static "of"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
public static "lazy"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LinearFuncBuilder$Type<P> = ($LinearFuncBuilder<(P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LinearFuncBuilder_<P> = $LinearFuncBuilder$Type<(P)>;
}}
declare module "packages/dev/xkmc/l2backpack/content/tool/$IBagTool" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IBagTool {

 "click"(arg0: $ItemStack$Type): void

(arg0: $ItemStack$Type): void
}

export namespace $IBagTool {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBagTool$Type = ($IBagTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBagTool_ = $IBagTool$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/impl/$BlockEntityBlockMethodImpl" {
import {$OnClickBlockMethod, $OnClickBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$OnClickBlockMethod"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$AnalogOutputBlockMethod, $AnalogOutputBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$AnalogOutputBlockMethod"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockEntityBlockMethod, $BlockEntityBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$BlockEntityBlockMethod"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SetPlacedByBlockMethod, $SetPlacedByBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$SetPlacedByBlockMethod"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BlockEntityBlockMethodImpl<T extends $BlockEntity> implements $BlockEntityBlockMethod<(T)>, $OnClickBlockMethod, $SetPlacedByBlockMethod, $AnalogOutputBlockMethod {

constructor(arg0: $Supplier$Type<($BlockEntityType$Type<(T)>)>, arg1: $Class$Type<(T)>)

public "getType"(): $BlockEntityType<(T)>
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "onClick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "getEntityClass"(): $Class<(T)>
public "createTileEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): T
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
get "type"(): $BlockEntityType<(T)>
get "entityClass"(): $Class<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockEntityBlockMethodImpl$Type<T> = ($BlockEntityBlockMethodImpl<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockEntityBlockMethodImpl_<T> = $BlockEntityBlockMethodImpl$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitFlameTrigger$Ins" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$KillTraitFlameTrigger, $KillTraitFlameTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitFlameTrigger"
import {$KillTraitFlameTrigger$Type, $KillTraitFlameTrigger$Type$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitFlameTrigger$Type"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $KillTraitFlameTrigger$Ins extends $BaseCriterionInstance<($KillTraitFlameTrigger$Ins), ($KillTraitFlameTrigger)> {
 "trait": $MobTrait
 "effect": $KillTraitFlameTrigger$Type

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

public "matchAll"(arg0: $LivingEntity$Type, arg1: $MobTraitCap$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitFlameTrigger$Ins$Type = ($KillTraitFlameTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitFlameTrigger$Ins_ = $KillTraitFlameTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$FleshOvergrowth" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $FleshOvergrowth extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FleshOvergrowth$Type = ($FleshOvergrowth);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FleshOvergrowth_ = $FleshOvergrowth$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/vanilla/$GenItemVanillaType" {
import {$IMatToolType, $IMatToolType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatToolType"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$RegistrateItemModelProvider, $RegistrateItemModelProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateItemModelProvider"
import {$DataGenContext, $DataGenContext$Type} from "packages/com/tterrag/registrate/providers/$DataGenContext"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockEntry, $BlockEntry$Type} from "packages/com/tterrag/registrate/util/entry/$BlockEntry"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$ArmorConfig, $ArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ArmorConfig"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$ToolConfig, $ToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ToolConfig"
import {$ITool, $ITool$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ITool"

export class $GenItemVanillaType extends $Record {
static readonly "TOOL_GEN": $ToolConfig
static readonly "ARMOR_GEN": $ArmorConfig

constructor(modid: string, registrate: $L2Registrate$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "genItem"(arg0: ($IMatVanillaType$Type)[]): (($ItemEntry<($Item)>)[])[]
public static "genGenericTool"(arg0: $IMatToolType$Type, arg1: $ITool$Type, arg2: $Item$Properties$Type): $Item
public "registrate"(): $L2Registrate
public static "getBlockTag"(arg0: integer): $TagKey<($Block)>
public "genMats"(arg0: ($IMatVanillaType$Type)[], arg1: string, arg2: $TagKey$Type<($Item$Type)>): ($ItemEntry<($Item)>)[]
public "genBlockMats"(arg0: ($IMatVanillaType$Type)[]): ($BlockEntry<($Block)>)[]
public "generatedModel"<T extends $Item>(arg0: $DataGenContext$Type<($Item$Type), (T)>, arg1: $RegistrateItemModelProvider$Type, arg2: string, arg3: string): void
public "handHeld"<T extends $Item>(arg0: $DataGenContext$Type<($Item$Type), (T)>, arg1: $RegistrateItemModelProvider$Type, arg2: string, arg3: string): void
public "modid"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenItemVanillaType$Type = ($GenItemVanillaType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenItemVanillaType_ = $GenItemVanillaType$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LegendaryToolFactory, $LegendaryToolFactory$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LegendaryToolFactory"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$LegendaryTool, $LegendaryTool$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LegendaryTool"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$ITool, $ITool$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ITool"

export class $LWToolTypes extends $Enum<($LWToolTypes)> implements $ITool {
static readonly "CLAW": $LWToolTypes
static readonly "DAGGER": $LWToolTypes
static readonly "MACHETE": $LWToolTypes
static readonly "THROWING_AXE": $LWToolTypes
static readonly "HAMMER": $LWToolTypes
static readonly "BATTLE_AXE": $LWToolTypes
static readonly "SPEAR": $LWToolTypes
static readonly "JAVELIN": $LWToolTypes
static readonly "ROUND_SHIELD": $LWToolTypes
static readonly "PLATE_SHIELD": $LWToolTypes
static readonly "NUNCHAKU": $LWToolTypes
readonly "tag": $TagKey<($Item)>


public static "values"(): ($LWToolTypes)[]
public static "valueOf"(arg0: string): $LWToolTypes
public "create"(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type): $Item
public "getSpeed"(arg0: float): float
public "getDamage"(arg0: integer): integer
public "legendary"<T extends $Item>(arg0: $LegendaryToolFactory$Type<(T)>): $LegendaryTool<(T)>
public "getEnchs"(): $List<($EnchantmentInstance)>
public "customModel"(): string
get "enchs"(): $List<($EnchantmentInstance)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWToolTypes$Type = (("claw") | ("dagger") | ("spear") | ("round_shield") | ("javelin") | ("throwing_axe") | ("hammer") | ("battle_axe") | ("plate_shield") | ("machete") | ("nunchaku")) | ($LWToolTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWToolTypes_ = $LWToolTypes$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreaker" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DiggerContext, $DiggerContext$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext"

export interface $BlockBreaker {

 "getInstance"(arg0: $DiggerContext$Type): $BlockBreakerInstance
 "getMaxLevel"(): integer
 "ignoreHardness"(): boolean
 "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
}

export namespace $BlockBreaker {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockBreaker$Type = ($BlockBreaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockBreaker_ = $BlockBreaker$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/consumable/$BottleOfSanity" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DrinkableBottleItem, $DrinkableBottleItem$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$DrinkableBottleItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BottleOfSanity extends $DrinkableBottleItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BottleOfSanity$Type = ($BottleOfSanity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BottleOfSanity_ = $BottleOfSanity$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/weapon/$IceBladeEnchantment" {
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$AbstractBladeEnchantment, $AbstractBladeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/weapon/$AbstractBladeEnchantment"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $IceBladeEnchantment extends $AbstractBladeEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "getColor"(): $ChatFormatting
public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "color"(): $ChatFormatting
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IceBladeEnchantment$Type = ($IceBladeEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IceBladeEnchantment_ = $IceBladeEnchantment$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/path/$PathConfigMenuProvider" {
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$IMenuPvd, $IMenuPvd$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $PathConfigMenuProvider extends $Record implements $IMenuPvd {

constructor(id: $UUID$Type, color: integer, editor: $GolemConfigEditor$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $UUID
public "editor"(): $GolemConfigEditor
public "color"(): integer
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public static "fromPacket"(arg0: $ServerLevel$Type, arg1: $GolemConfigEntry$Type): $PathConfigMenuProvider
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathConfigMenuProvider$Type = ($PathConfigMenuProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathConfigMenuProvider_ = $PathConfigMenuProvider$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericPickaxeItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PickaxeItem, $PickaxeItem$Type} from "packages/net/minecraft/world/item/$PickaxeItem"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$GenericTieredItem, $GenericTieredItem$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericTieredItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GenericPickaxeItem extends $PickaxeItem implements $GenericTieredItem {
 "speed": float
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getExtraConfig"(): $ExtraToolConfig
public "getSweepHitBox"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $Entity$Type): $AABB
public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type): float
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "canBeDepleted"(): boolean
public "mineBlock"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockState$Type, arg3: $BlockPos$Type, arg4: $LivingEntity$Type): boolean
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
get "extraConfig"(): $ExtraToolConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericPickaxeItem$Type = ($GenericPickaxeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericPickaxeItem_ = $GenericPickaxeItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/spawner/$TraitSpawnerBlock" {
import {$BlockEntityBlockMethodImpl, $BlockEntityBlockMethodImpl$Type} from "packages/dev/xkmc/l2modularblock/impl/$BlockEntityBlockMethodImpl"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$ClickTraitMethod, $ClickTraitMethod$Type} from "packages/dev/xkmc/l2hostility/content/item/spawner/$ClickTraitMethod"
import {$BaseTraitMethod, $BaseTraitMethod$Type} from "packages/dev/xkmc/l2hostility/content/item/spawner/$BaseTraitMethod"
import {$BurstSpawnerBlockEntity, $BurstSpawnerBlockEntity$Type} from "packages/dev/xkmc/l2hostility/content/item/spawner/$BurstSpawnerBlockEntity"
import {$TraitSpawnerBlock$State, $TraitSpawnerBlock$State$Type} from "packages/dev/xkmc/l2hostility/content/item/spawner/$TraitSpawnerBlock$State"
import {$BurstTraitMethod, $BurstTraitMethod$Type} from "packages/dev/xkmc/l2hostility/content/item/spawner/$BurstTraitMethod"

export class $TraitSpawnerBlock {
static readonly "STATE": $EnumProperty<($TraitSpawnerBlock$State)>
static readonly "BE_BURST": $BlockEntityBlockMethodImpl<($BurstSpawnerBlockEntity)>
static readonly "BASE": $BaseTraitMethod
static readonly "BURST": $BurstTraitMethod
static readonly "CLICK": $ClickTraitMethod

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitSpawnerBlock$Type = ($TraitSpawnerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitSpawnerBlock_ = $TraitSpawnerBlock$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/conditionals/$TokenKey" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ConditionalToken, $ConditionalToken$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$ConditionalToken"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TokenKey<T extends $ConditionalToken> extends $Record {

constructor(type: string, id: string)

public "type"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"<T extends $ConditionalToken>(arg0: $ResourceLocation$Type): $TokenKey<(T)>
public "id"(): string
public "asLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TokenKey$Type<T> = ($TokenKey<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TokenKey_<T> = $TokenKey$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/weapon/$WindSweepEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $WindSweepEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WindSweepEnchantment$Type = ($WindSweepEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WindSweepEnchantment_ = $WindSweepEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/screen/base/$LayerPopType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $LayerPopType extends $Enum<($LayerPopType)> {
static readonly "FAIL": $LayerPopType
static readonly "CLEAR": $LayerPopType
static readonly "REMAIN": $LayerPopType


public static "values"(): ($LayerPopType)[]
public static "valueOf"(arg0: string): $LayerPopType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayerPopType$Type = (("fail") | ("remain") | ("clear")) | ($LayerPopType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayerPopType_ = $LayerPopType$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$BackpackTriggers" {
import {$RemoteHopperTrigger, $RemoteHopperTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$RemoteHopperTrigger"
import {$DrawerInteractTrigger, $DrawerInteractTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$DrawerInteractTrigger"
import {$SlotClickTrigger, $SlotClickTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$SlotClickTrigger"
import {$BagInteractTrigger, $BagInteractTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$BagInteractTrigger"
import {$AnalogSignalTrigger, $AnalogSignalTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$AnalogSignalTrigger"
import {$SharedDriveTrigger, $SharedDriveTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$SharedDriveTrigger"

export class $BackpackTriggers {
static readonly "SLOT_CLICK": $SlotClickTrigger
static readonly "INTERACT": $BagInteractTrigger
static readonly "DRAWER": $DrawerInteractTrigger
static readonly "REMOTE": $RemoteHopperTrigger
static readonly "ANALOG": $AnalogSignalTrigger
static readonly "SHARE": $SharedDriveTrigger

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackTriggers$Type = ($BackpackTriggers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackTriggers_ = $BackpackTriggers$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$ClawBlockEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $ClawBlockEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClawBlockEnchantment$Type = ($ClawBlockEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClawBlockEnchantment_ = $ClawBlockEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/registrate/$LCEffects" {
import {$EmeraldPopeEffect, $EmeraldPopeEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/skill/$EmeraldPopeEffect"
import {$FlameEffect, $FlameEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/force/$FlameEffect"
import {$ArmorReduceEffect, $ArmorReduceEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/force/$ArmorReduceEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseEffect, $CurseEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/force/$CurseEffect"
import {$StoneCageEffect, $StoneCageEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/force/$StoneCageEffect"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$CleanseEffect, $CleanseEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/skill/$CleanseEffect"
import {$IceEffect, $IceEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/force/$IceEffect"
import {$BleedEffect, $BleedEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/skill/$BleedEffect"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LCEffects {
static readonly "POTION_LIST": $List<($RegistryEntry<(any)>)>
static readonly "NAME_CACHE": $Map<(string), (string)>
static readonly "EMERALD": $RegistryEntry<($EmeraldPopeEffect)>
static readonly "FLAME": $RegistryEntry<($FlameEffect)>
static readonly "ICE": $RegistryEntry<($IceEffect)>
static readonly "ARMOR_REDUCE": $RegistryEntry<($ArmorReduceEffect)>
static readonly "STONE_CAGE": $RegistryEntry<($StoneCageEffect)>
static readonly "CURSE": $RegistryEntry<($CurseEffect)>
static readonly "BLEED": $RegistryEntry<($BleedEffect)>
static readonly "CLEANSE": $RegistryEntry<($CleanseEffect)>

constructor()

public static "register"(): void
public static "registerBrewingRecipe"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCEffects$Type = ($LCEffects);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCEffects_ = $LCEffects$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/jeed/$JeedEffectRecipeData" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $JeedEffectRecipeData extends $Record {

constructor(effect: $MobEffect$Type, providers: $ArrayList$Type<($Ingredient$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "providers"(): $ArrayList<($Ingredient)>
public "effect"(): $MobEffect
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JeedEffectRecipeData$Type = ($JeedEffectRecipeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JeedEffectRecipeData_ = $JeedEffectRecipeData$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$PartCraftTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PartCraftTrigger$Ins, $PartCraftTrigger$Ins$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$PartCraftTrigger$Ins"

export class $PartCraftTrigger extends $BaseCriterion<($PartCraftTrigger$Ins), ($PartCraftTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $ResourceLocation$Type): void
public static "ins"(): $PartCraftTrigger$Ins
public static "withMat"(arg0: $ResourceLocation$Type): $PartCraftTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PartCraftTrigger$Type = ($PartCraftTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PartCraftTrigger_ = $PartCraftTrigger$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/golem/$IGolemPartItem" {
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"

export interface $IGolemPartItem {

 "asPart"(): $GolemPart<(any), (any)>

(): $GolemPart<(any), (any)>
}

export namespace $IGolemPartItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IGolemPartItem$Type = ($IGolemPartItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IGolemPartItem_ = $IGolemPartItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactFilter" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$LangData, $LangData$Type} from "packages/dev/xkmc/l2artifacts/init/data/$LangData"
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$IArtifactPredicate, $IArtifactPredicate$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactPredicate"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IArtifactFeature, $IArtifactFeature$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$GenericItemStack, $GenericItemStack$Type} from "packages/dev/xkmc/l2library/util/code/$GenericItemStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$IArtifactFilter, $IArtifactFilter$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFilter"

export class $ArtifactFilter<T extends $IArtifactFeature> implements $IArtifactFilter {
readonly "allEntries": $List<(T)>

constructor(arg0: $IArtifactFilter$Type, arg1: $LangData$Type, arg2: $Collection$Type<(T)>, arg3: $IArtifactPredicate$Type<(T)>)

public "priority"(): integer
/**
 * 
 * @deprecated
 */
public "update"(): void
public "getPriority"(arg0: integer): integer
public "getDescription"(): $Component
public "getSelected"(arg0: integer): boolean
public "postInject"(): void
public "prioritize"(arg0: integer): void
public "getAvailability"(arg0: integer): boolean
public "toggle"(arg0: integer): void
public "getAvailableArtifacts"(): $Stream<($GenericItemStack<($BaseArtifact)>)>
public "getComparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
get "description"(): $Component
get "availableArtifacts"(): $Stream<($GenericItemStack<($BaseArtifact)>)>
get "comparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactFilter$Type<T> = ($ArtifactFilter<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactFilter_<T> = $ArtifactFilter$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/init/$L2Artifacts" {
import {$ArtifactRegistrate, $ArtifactRegistrate$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$ArtifactRegistrate"
import {$GatherDataEvent, $GatherDataEvent$Type} from "packages/net/minecraftforge/data/event/$GatherDataEvent"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$ArtifactSlotClickListener, $ArtifactSlotClickListener$Type} from "packages/dev/xkmc/l2artifacts/events/$ArtifactSlotClickListener"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"

export class $L2Artifacts {
static readonly "MODID": string
static readonly "LOGGER": $Logger
static readonly "REGISTRATE": $ArtifactRegistrate
static readonly "CLICK": $ArtifactSlotClickListener

constructor()

public static "gatherData"(arg0: $GatherDataEvent$Type): void
public static "commonInit"(arg0: $FMLCommonSetupEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Artifacts$Type = ($L2Artifacts);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Artifacts_ = $L2Artifacts$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/loot/$TraitLootModifier" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LootModifier, $LootModifier$Type} from "packages/net/minecraftforge/common/loot/$LootModifier"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$ITraitLootRecipe, $ITraitLootRecipe$Type} from "packages/dev/xkmc/l2hostility/compat/jei/$ITraitLootRecipe"

export class $TraitLootModifier extends $LootModifier implements $ITraitLootRecipe {
static readonly "CODEC": $Codec<($TraitLootModifier)>
readonly "trait": $MobTrait
readonly "chance": double
readonly "rankBonus": double
readonly "result": $ItemStack

constructor(arg0: $MobTrait$Type, arg1: double, arg2: double, arg3: $ItemStack$Type, ...arg4: ($LootItemCondition$Type)[])

public "getConditions"(): ($LootItemCondition)[]
public "getResults"(): $List<($ItemStack)>
public "getCurioRequired"(): $List<($ItemStack)>
public "getInputs"(): $List<($ItemStack)>
public "codec"(): $Codec<($TraitLootModifier)>
public "addTooltip"(arg0: $List$Type<($Component$Type)>): void
public static "getJson"<U>(arg0: $Dynamic$Type<(any)>): $JsonElement
get "conditions"(): ($LootItemCondition)[]
get "results"(): $List<($ItemStack)>
get "curioRequired"(): $List<($ItemStack)>
get "inputs"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitLootModifier$Type = ($TraitLootModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitLootModifier_ = $TraitLootModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/util/raytrace/$FastItem" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $FastItem {

 "isFast"(arg0: $ItemStack$Type): boolean

(arg0: $ItemStack$Type): boolean
}

export namespace $FastItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FastItem$Type = ($FastItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FastItem_ = $FastItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$HostilityTriggers" {
import {$KillTraitLevelTrigger, $KillTraitLevelTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitLevelTrigger"
import {$KillTraitsTrigger, $KillTraitsTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitsTrigger"
import {$KillTraitCountTrigger, $KillTraitCountTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitCountTrigger"
import {$KillTraitFlameTrigger, $KillTraitFlameTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitFlameTrigger"
import {$KillTraitEffectTrigger, $KillTraitEffectTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitEffectTrigger"

export class $HostilityTriggers {
static readonly "KILL_TRAITS": $KillTraitsTrigger
static readonly "TRAIT_LEVEL": $KillTraitLevelTrigger
static readonly "TRAIT_COUNT": $KillTraitCountTrigger
static readonly "TRAIT_EFFECT": $KillTraitEffectTrigger
static readonly "TRAIT_FLAME": $KillTraitFlameTrigger

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityTriggers$Type = ($HostilityTriggers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityTriggers_ = $HostilityTriggers$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$DeadCellParry" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$PlayerOnlySetEffect, $PlayerOnlySetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PlayerOnlySetEffect"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ShieldBlockEvent, $ShieldBlockEvent$Type} from "packages/net/minecraftforge/event/entity/living/$ShieldBlockEvent"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $DeadCellParry extends $PlayerOnlySetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "playerShieldBlock"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $ShieldBlockEvent$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadCellParry$Type = ($DeadCellParry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadCellParry_ = $DeadCellParry$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$ItemOnBackLayerRenderer" {
import {$HeadedModel, $HeadedModel$Type} from "packages/net/minecraft/client/model/$HeadedModel"
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$ItemInHandRenderer, $ItemInHandRenderer$Type} from "packages/net/minecraft/client/renderer/$ItemInHandRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ItemOnBackLayerRenderer<T extends $LivingEntity, M extends ($HumanoidModel<(T)>) & ($HeadedModel)> extends $RenderLayer<(T), (M)> {

constructor(arg0: $RenderLayerParent$Type<(T), (M)>, arg1: $EntityModelSet$Type, arg2: $ItemInHandRenderer$Type)
constructor(arg0: $RenderLayerParent$Type<(T), (M)>, arg1: $EntityModelSet$Type, arg2: float, arg3: float, arg4: float, arg5: $ItemInHandRenderer$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
public static "translateToHead"(arg0: $PoseStack$Type, arg1: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemOnBackLayerRenderer$Type<T, M> = ($ItemOnBackLayerRenderer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemOnBackLayerRenderer_<T, M> = $ItemOnBackLayerRenderer$Type<(T), (M)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/core/$StatEntry" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ArtifactSlot, $ArtifactSlot$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot"
import {$StatTypeConfig, $StatTypeConfig$Type} from "packages/dev/xkmc/l2artifacts/content/config/$StatTypeConfig"

export class $StatEntry {
 "type": $ResourceLocation
 "id": $UUID

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $ArtifactSlot$Type, arg1: $ResourceLocation$Type, arg2: double)

public "getName"(): string
public "getValue"(): double
public "getType"(): $StatTypeConfig
public "getTooltip"(): $Component
public "addMultiplier"(arg0: double): void
get "name"(): string
get "value"(): double
get "type"(): $StatTypeConfig
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatEntry$Type = ($StatEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatEntry_ = $StatEntry$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$FungusExplode" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $FungusExplode extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerDamageOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FungusExplode$Type = ($FungusExplode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FungusExplode_ = $FungusExplode$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/entity/$ThrowingAxeEntity" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$IntOpenHashSet, $IntOpenHashSet$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntOpenHashSet"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractArrow$Pickup, $AbstractArrow$Pickup$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow$Pickup"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ThrowingAxeEntity extends $BaseThrownWeaponEntity<($ThrowingAxeEntity)> {
 "remainingHit": integer
 "clientSideReturnTridentTickCount": integer
 "slot": integer
 "waterInertia": float
 "targetCache": $Entity
 "pickup": $AbstractArrow$Pickup
 "shakeTime": integer
 "piercingIgnoreEntityIds": $IntOpenHashSet
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<($ThrowingAxeEntity$Type)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThrowingAxeEntity$Type = ($ThrowingAxeEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThrowingAxeEntity_ = $ThrowingAxeEntity$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$ShulkerateTool" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"

export class $ShulkerateTool extends $ExtraToolConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "hideWithEffect"(): boolean
public "modify"(arg0: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg1: $EquipmentSlot$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T): integer
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShulkerateTool$Type = ($ShulkerateTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShulkerateTool_ = $ShulkerateTool$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/registrate/$LCEntities" {
import {$SoulFireball, $SoulFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$SoulFireball"
import {$BlackFireball, $BlackFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$BlackFireball"
import {$EntityAttributeCreationEvent, $EntityAttributeCreationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeCreationEvent"
import {$EntityEntry, $EntityEntry$Type} from "packages/com/tterrag/registrate/util/entry/$EntityEntry"
import {$StrongFireball, $StrongFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$StrongFireball"

export class $LCEntities {
static readonly "ETFB_SOUL": $EntityEntry<($SoulFireball)>
static readonly "ETFB_STRONG": $EntityEntry<($StrongFireball)>
static readonly "ETFB_BLACK": $EntityEntry<($BlackFireball)>

constructor()

public static "register"(): void
public static "registerEntityAttributes"(arg0: $EntityAttributeCreationEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCEntities$Type = ($LCEntities);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCEntities_ = $LCEntities$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconBlock" {
import {$BlockEntityBlockMethodImpl, $BlockEntityBlockMethodImpl$Type} from "packages/dev/xkmc/l2modularblock/impl/$BlockEntityBlockMethodImpl"
import {$RegistrateBlockstateProvider, $RegistrateBlockstateProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateBlockstateProvider"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$HostilityBeaconBlockEntity, $HostilityBeaconBlockEntity$Type} from "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DataGenContext, $DataGenContext$Type} from "packages/com/tterrag/registrate/providers/$DataGenContext"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BeaconBeamBlock, $BeaconBeamBlock$Type} from "packages/net/minecraft/world/level/block/$BeaconBeamBlock"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$DelegateEntityBlockImpl, $DelegateEntityBlockImpl$Type} from "packages/dev/xkmc/l2modularblock/$DelegateEntityBlockImpl"

export class $HostilityBeaconBlock extends $DelegateEntityBlockImpl implements $BeaconBeamBlock {
static readonly "BE": $BlockEntityBlockMethodImpl<($HostilityBeaconBlockEntity)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "getColor"(): $DyeColor
public static "buildModel"(arg0: $DataGenContext$Type<($Block$Type), ($HostilityBeaconBlock$Type)>, arg1: $RegistrateBlockstateProvider$Type): void
get "color"(): $DyeColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityBeaconBlock$Type = ($HostilityBeaconBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityBeaconBlock_ = $HostilityBeaconBlock$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISingleSwapHandler" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ISingleSwapHandler {

 "replace"(arg0: $ItemStack$Type): void
 "getStack"(): $ItemStack
}

export namespace $ISingleSwapHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISingleSwapHandler$Type = ($ISingleSwapHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISingleSwapHandler_ = $ISingleSwapHandler$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/curio/$CurioCompatRegistry" {
import {$MenuEntry, $MenuEntry$Type} from "packages/com/tterrag/registrate/util/entry/$MenuEntry"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$IMenuPvd, $IMenuPvd$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemCurioTab, $GolemCurioTab$Type} from "packages/dev/xkmc/modulargolems/compat/curio/$GolemCurioTab"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EquipmentGroup, $EquipmentGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$EquipmentGroup"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$GolemCuriosListMenu, $GolemCuriosListMenu$Type} from "packages/dev/xkmc/modulargolems/compat/curio/$GolemCuriosListMenu"

export class $CurioCompatRegistry {
static "INSTANCE": $CurioCompatRegistry
 "menuType": $MenuEntry<($GolemCuriosListMenu)>
 "tab": $GolemTabToken<($EquipmentGroup), ($GolemCurioTab)>

constructor()

public static "get"(): $CurioCompatRegistry
public static "register"(): void
public static "create"(arg0: $AbstractGolemEntity$Type<(any), (any)>): $IMenuPvd
public static "getItem"(arg0: $LivingEntity$Type, arg1: string): $Optional<($ItemStack)>
public static "tryOpen"(arg0: $ServerPlayer$Type, arg1: $LivingEntity$Type): void
public static "clientRegister"(): void
public "clientRegisterImpl"(): void
public "registerImpl"(): void
public "getSkin"(arg0: $HumanoidGolemEntity$Type): $ItemStack
public static "onJEIRegistry"<T>(arg0: $Consumer$Type<($Class$Type<(any)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioCompatRegistry$Type = ($CurioCompatRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioCompatRegistry_ = $CurioCompatRegistry$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$PredSlot, $PredSlot$Type} from "packages/dev/xkmc/l2library/base/menu/base/$PredSlot"

export class $BaseContainerMenu<T extends $BaseContainerMenu<(T)>> extends $AbstractContainerMenu {
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public static "clearSlot"(arg0: $Player$Type, arg1: $Container$Type, arg2: integer): void
public "getAsPredSlot"(arg0: string, arg1: integer, arg2: integer): $PredSlot
public "getAsPredSlot"(arg0: string): $PredSlot
public "stillValid"(arg0: $Player$Type): boolean
public "removed"(arg0: $Player$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "slotsChanged"(arg0: $Container$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseContainerMenu$Type<T> = ($BaseContainerMenu<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseContainerMenu_<T> = $BaseContainerMenu$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2backpack/init/$L2Backpack" {
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$GatherDataEvent, $GatherDataEvent$Type} from "packages/net/minecraftforge/data/event/$GatherDataEvent"
import {$BackpackSlotClickListener, $BackpackSlotClickListener$Type} from "packages/dev/xkmc/l2backpack/events/$BackpackSlotClickListener"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$RegisterCapabilitiesEvent, $RegisterCapabilitiesEvent$Type} from "packages/net/minecraftforge/common/capabilities/$RegisterCapabilitiesEvent"
import {$PacketHandler, $PacketHandler$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandler"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"

export class $L2Backpack {
static readonly "MODID": string
static readonly "LOGGER": $Logger
static readonly "REGISTRATE": $L2Registrate
static readonly "SLOT_CLICK": $BackpackSlotClickListener
static readonly "HANDLER": $PacketHandler

constructor()

public static "registerCaps"(arg0: $RegisterCapabilitiesEvent$Type): void
public static "gatherData"(arg0: $GatherDataEvent$Type): void
public static "commonSetup"(arg0: $FMLCommonSetupEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Backpack$Type = ($L2Backpack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Backpack_ = $L2Backpack$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$DelayedBlockBreaker" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $DelayedBlockBreaker {

constructor(arg0: $ServerPlayer$Type, arg1: $List$Type<($BlockPos$Type)>)

public "tick"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelayedBlockBreaker$Type = ($DelayedBlockBreaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelayedBlockBreaker_ = $DelayedBlockBreaker$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/command/$LHMobCommands" {
import {$HostilityCommands, $HostilityCommands$Type} from "packages/dev/xkmc/l2hostility/content/command/$HostilityCommands"

export class $LHMobCommands extends $HostilityCommands {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHMobCommands$Type = ($LHMobCommands);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHMobCommands_ = $LHMobCommands$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$DoubleWieldItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$GenericWeaponItem, $GenericWeaponItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$GenericWeaponItem"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DoubleWieldItem extends $GenericWeaponItem {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type, arg5: $TagKey$Type<($Block$Type)>)

public "accumulateDamage"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
public "getSweepHitBoxImpl"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $Entity$Type): $AABB
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleWieldItem$Type = ($DoubleWieldItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleWieldItem_ = $DoubleWieldItem$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$LWConfig$Common" {
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"

export class $LWConfig$Common {
readonly "dagger_bonus": $ForgeConfigSpec$DoubleValue
readonly "claw_bonus": $ForgeConfigSpec$DoubleValue
readonly "claw_max": $ForgeConfigSpec$IntValue
readonly "claw_timeout": $ForgeConfigSpec$IntValue
readonly "claw_block_time": $ForgeConfigSpec$IntValue
readonly "reflectCost": $ForgeConfigSpec$DoubleValue
readonly "diggerEnchantmentOnWeapon": $ForgeConfigSpec$BooleanValue
readonly "extraCompatibleEnchantmentCategories": $ForgeConfigSpec$ConfigValue<($List<(string)>)>
readonly "shadowHunterDistance": $ForgeConfigSpec$IntValue
readonly "hauntingDemonDistance": $ForgeConfigSpec$IntValue
readonly "hammerOfIncarcerationRadius": $ForgeConfigSpec$IntValue
readonly "hammerOfIncarcerationDuration": $ForgeConfigSpec$IntValue
readonly "dogmaticStandoffGain": $ForgeConfigSpec$DoubleValue
readonly "dogmaticStandoffMax": $ForgeConfigSpec$DoubleValue
readonly "determinationRate": $ForgeConfigSpec$DoubleValue
readonly "illusionRate": $ForgeConfigSpec$DoubleValue
readonly "heavySpeedReduction": $ForgeConfigSpec$DoubleValue
readonly "heavyCritBonus": $ForgeConfigSpec$DoubleValue
readonly "stealthChance": $ForgeConfigSpec$DoubleValue
readonly "stealthDamageReduction": $ForgeConfigSpec$DoubleValue
readonly "heavyShieldSpeedReduction": $ForgeConfigSpec$DoubleValue
readonly "heavyShieldDefenseBonus": $ForgeConfigSpec$DoubleValue
readonly "hardShieldDefenseBonus": $ForgeConfigSpec$DoubleValue
readonly "raisedSpiritSpeedBonus": $ForgeConfigSpec$DoubleValue
readonly "energizedWillReachBonus": $ForgeConfigSpec$DoubleValue
readonly "instantThrowCooldown": $ForgeConfigSpec$IntValue
readonly "knightmetalBonus": $ForgeConfigSpec$DoubleValue
readonly "knightmetalReflect": $ForgeConfigSpec$DoubleValue
readonly "fieryBonus": $ForgeConfigSpec$DoubleValue
readonly "fieryDuration": $ForgeConfigSpec$IntValue
readonly "steeleafBonus": $ForgeConfigSpec$DoubleValue
readonly "steeleafReflect": $ForgeConfigSpec$DoubleValue
readonly "steeleafChance": $ForgeConfigSpec$DoubleValue
readonly "ironwoodRegenDuration": $ForgeConfigSpec$IntValue
readonly "ironwoodEffectDuration": $ForgeConfigSpec$IntValue


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWConfig$Common$Type = ($LWConfig$Common);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWConfig$Common_ = $LWConfig$Common$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe$RecInv" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BaseRecipe, $BaseRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export interface $BaseRecipe$RecInv<R extends $BaseRecipe<(any), (R), (any)>> extends $Container {

 "kjs$self"(): $Container
 "setChanged"(): void
 "getBlock"(level: $Level$Type): $BlockContainerJS
 "getItem"(arg0: integer): $ItemStack
 "getContainerSize"(): integer
 "removeItemNoUpdate"(arg0: integer): $ItemStack
 "removeItem"(arg0: integer, arg1: integer): $ItemStack
 "isEmpty"(): boolean
 "startOpen"(arg0: $Player$Type): void
 "getMaxStackSize"(): integer
 "stillValid"(arg0: $Player$Type): boolean
 "stopOpen"(arg0: $Player$Type): void
 "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
 "countItem"(arg0: $Item$Type): integer
 "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
 "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
 "getSlots"(): integer
 "getStackInSlot"(slot: integer): $ItemStack
 "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
 "isMutable"(): boolean
 "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
 "setChanged"(): void
 "asContainer"(): $Container
 "getHeight"(): integer
 "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
 "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
 "getWidth"(): integer
 "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
 "getSlotLimit"(slot: integer): integer
 "clear"(): void
 "setItem"(arg0: integer, arg1: $ItemStack$Type): void
 "clearContent"(): void
 "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
 "countNonEmpty"(ingredient: $Ingredient$Type): integer
 "countNonEmpty"(): integer
 "getAllItems"(): $List<($ItemStack)>
 "find"(ingredient: $Ingredient$Type): integer
 "find"(): integer
 "clear"(ingredient: $Ingredient$Type): void
 "count"(ingredient: $Ingredient$Type): integer
 "count"(): integer
 "isEmpty"(): boolean
}

export namespace $BaseRecipe$RecInv {
function stillValidBlockEntity(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
function stillValidBlockEntity(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
function tryClear(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseRecipe$RecInv$Type<R> = ($BaseRecipe$RecInv<(R)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseRecipe$RecInv_<R> = $BaseRecipe$RecInv$Type<(R)>;
}}
declare module "packages/dev/xkmc/l2library/util/tools/$TeleportTool" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $TeleportTool {

constructor()

public static "performTeleport"(arg0: $Entity$Type, arg1: $ServerLevel$Type, arg2: double, arg3: double, arg4: double, arg5: float, arg6: float): void
public static "teleportHome"(arg0: $ServerLevel$Type, arg1: $ServerPlayer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeleportTool$Type = ($TeleportTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeleportTool_ = $TeleportTool$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$QuickSwapOverlay$BackpackSignature" {
import {$SideBar$Signature, $SideBar$Signature$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar$Signature"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SideBar, $SideBar$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar"

export class $QuickSwapOverlay$BackpackSignature extends $Record implements $SideBar$Signature<($QuickSwapOverlay$BackpackSignature)> {

constructor(backpackSelect: integer, ignoreOther: boolean, type: $QuickSwapType$Type, playerSelect: integer, stack: $ItemStack$Type)

public "backpackSelect"(): integer
public "playerSelect"(): integer
public "type"(): $QuickSwapType
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "shouldRefreshIdle"(arg0: $SideBar$Type<(any)>, arg1: $QuickSwapOverlay$BackpackSignature$Type): boolean
public "ignoreOther"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuickSwapOverlay$BackpackSignature$Type = ($QuickSwapOverlay$BackpackSignature);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuickSwapOverlay$BackpackSignature_ = $QuickSwapOverlay$BackpackSignature$Type;
}}
declare module "packages/dev/xkmc/l2backpack/network/$RequestTooltipUpdateEvent" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"

export class $RequestTooltipUpdateEvent extends $SerialPacketBase {
 "item": $Item
 "id": $UUID

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $Item$Type, arg1: $UUID$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RequestTooltipUpdateEvent$Type = ($RequestTooltipUpdateEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RequestTooltipUpdateEvent_ = $RequestTooltipUpdateEvent$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$ConfigCollect" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$CollectType, $CollectType$Type} from "packages/dev/xkmc/l2library/serial/config/$CollectType"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $ConfigCollect extends $Annotation {

 "value"(): $CollectType
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $ConfigCollect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigCollect$Type = ($ConfigCollect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigCollect_ = $ConfigCollect$Type;
}}
declare module "packages/dev/xkmc/l2library/base/$NamedEntry" {
import {$L2Registrate$RegistryInstance, $L2Registrate$RegistryInstance$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate$RegistryInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $NamedEntry<T extends $NamedEntry<(T)>> {

constructor(arg0: $L2Registrate$RegistryInstance$Type<(T)>)

public "getID"(): string
public "getDesc"(): $MutableComponent
public "getDescriptionId"(): string
public "getThis"(): T
public "getRegistryName"(): $ResourceLocation
get "iD"(): string
get "desc"(): $MutableComponent
get "descriptionId"(): string
get "this"(): T
get "registryName"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NamedEntry$Type<T> = ($NamedEntry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NamedEntry_<T> = $NamedEntry$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/consumable/$HostilityChargeItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$HostilityCharge, $HostilityCharge$Type} from "packages/dev/xkmc/l2hostility/content/entity/$HostilityCharge"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ChargeType, $ChargeType$Type} from "packages/dev/xkmc/l2hostility/content/entity/$ChargeType"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$FireChargeItem, $FireChargeItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$FireChargeItem"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $HostilityChargeItem extends $FireChargeItem<($HostilityCharge)> {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $ChargeType$Type, arg2: $Supplier$Type<($MutableComponent$Type)>)

public "getType"(): $ChargeType
get "type"(): $ChargeType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityChargeItem$Type = ($HostilityChargeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityChargeItem_ = $HostilityChargeItem$Type;
}}
declare module "packages/dev/xkmc/l2library/base/tile/$CombinedTankWrapper$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CombinedTankWrapper$Type extends $Enum<($CombinedTankWrapper$Type)> {
static readonly "INSERT": $CombinedTankWrapper$Type
static readonly "EXTRACT": $CombinedTankWrapper$Type
static readonly "ALL": $CombinedTankWrapper$Type


public static "values"(): ($CombinedTankWrapper$Type)[]
public static "valueOf"(arg0: string): $CombinedTankWrapper$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CombinedTankWrapper$Type$Type = (("all") | ("extract") | ("insert")) | ($CombinedTankWrapper$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CombinedTankWrapper$Type_ = $CombinedTankWrapper$Type$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/goals/$GolemSwimMoveControl" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$MoveControl, $MoveControl$Type} from "packages/net/minecraft/world/entity/ai/control/$MoveControl"

export class $GolemSwimMoveControl extends $MoveControl {
static readonly "MIN_SPEED": float
static readonly "MIN_SPEED_SQR": float

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>)

public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemSwimMoveControl$Type = ($GolemSwimMoveControl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemSwimMoveControl_ = $GolemSwimMoveControl$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$AbyssDagger" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DaggerItem, $DaggerItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$DaggerItem"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $AbyssDagger extends $DaggerItem implements $LegendaryWeapon {
static readonly "RANGE": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbyssDagger$Type = ($AbyssDagger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbyssDagger_ = $AbyssDagger$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$FieryModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $FieryModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onHurtTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FieryModifier$Type = ($FieryModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FieryModifier_ = $FieryModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/$GolemAttackListener" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$PlayerAttackCache, $PlayerAttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$PlayerAttackCache"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$AttackListener, $AttackListener$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackListener"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $GolemAttackListener implements $AttackListener {

constructor()

public "onCreateSource"(arg0: $CreateSourceEvent$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onPlayerAttack"(arg0: $PlayerAttackCache$Type): void
public "onCriticalHit"(arg0: $PlayerAttackCache$Type, arg1: $CriticalHitEvent$Type): boolean
public "postHurt"(arg0: $AttackCache$Type, arg1: $LivingHurtEvent$Type, arg2: $ItemStack$Type): void
public "onDamageFinalized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "setupProfile"(arg0: $AttackCache$Type, arg1: $BiConsumer$Type<($LivingEntity$Type), ($ItemStack$Type)>): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "postAttack"(arg0: $AttackCache$Type, arg1: $LivingAttackEvent$Type, arg2: $ItemStack$Type): void
public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onAttack"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemAttackListener$Type = ($GolemAttackListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemAttackListener_ = $GolemAttackListener$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/backpack/$BackpackMenu" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BaseBagMenu, $BaseBagMenu$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $BackpackMenu extends $BaseBagMenu<($BackpackMenu)> {
static readonly "MANAGERS": ($SpriteManager)[]
readonly "item_slot": $PlayerSlot<(any)>
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $PlayerSlot$Type<(any)>, arg3: $UUID$Type, arg4: integer, arg5: $Component$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($BackpackMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $BackpackMenu
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackMenu$Type = ($BackpackMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackMenu_ = $BackpackMenu$Type;
}}
declare module "packages/dev/xkmc/l2library/base/$L2Registrate$RegistryInstance" {
import {$IForgeRegistry, $IForgeRegistry$Type} from "packages/net/minecraftforge/registries/$IForgeRegistry"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"

export class $L2Registrate$RegistryInstance<E extends $NamedEntry<(E)>> extends $Record implements $Supplier<($IForgeRegistry<(E)>)> {

constructor(supplier: $Supplier$Type<($IForgeRegistry$Type<(E)>)>, key: $ResourceKey$Type<($Registry$Type<(E)>)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "key"(): $ResourceKey<($Registry<(E)>)>
public "supplier"(): $Supplier<($IForgeRegistry<(E)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Registrate$RegistryInstance$Type<E> = ($L2Registrate$RegistryInstance<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Registrate$RegistryInstance_<E> = $L2Registrate$RegistryInstance$Type<(E)>;
}}
declare module "packages/dev/xkmc/l2weaponry/init/materials/$LWGenItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$RegistrateItemModelProvider, $RegistrateItemModelProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateItemModelProvider"
import {$DataGenContext, $DataGenContext$Type} from "packages/com/tterrag/registrate/providers/$DataGenContext"
import {$ILWToolMats, $ILWToolMats$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$ILWToolMats"

export class $LWGenItem {

constructor()

public static "generate"(...arg0: ($ILWToolMats$Type)[]): (($ItemEntry<($Item)>)[])[]
public static "model"<T extends $Item>(arg0: $LWToolTypes$Type, arg1: $ILWToolMats$Type, arg2: $DataGenContext$Type<($Item$Type), (T)>, arg3: $RegistrateItemModelProvider$Type, arg4: string, arg5: string, arg6: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWGenItem$Type = ($LWGenItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWGenItem_ = $LWGenItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitCountTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$KillTraitCountTrigger$Ins, $KillTraitCountTrigger$Ins$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitCountTrigger$Ins"

export class $KillTraitCountTrigger extends $BaseCriterion<($KillTraitCountTrigger$Ins), ($KillTraitCountTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $MobTraitCap$Type): void
public static "ins"(arg0: integer): $KillTraitCountTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitCountTrigger$Type = ($KillTraitCountTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitCountTrigger_ = $KillTraitCountTrigger$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemSweepEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemItemUseEvent, $GolemItemUseEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemItemUseEvent"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $GolemSweepEvent extends $GolemItemUseEvent {

constructor(arg0: $HumanoidGolemEntity$Type, arg1: $ItemStack$Type, arg2: $Entity$Type, arg3: double)
constructor()

public "getTarget"(): $Entity
public "setBox"(arg0: $AABB$Type): void
public "getRange"(): double
public "getBox"(): $AABB
public "getListenerList"(): $ListenerList
get "target"(): $Entity
set "box"(value: $AABB$Type)
get "range"(): double
get "box"(): $AABB
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemSweepEvent$Type = ($GolemSweepEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemSweepEvent_ = $GolemSweepEvent$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/special/$BaseRangedAttackGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $BaseRangedAttackGoal extends $Goal {

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: $AbstractGolemEntity$Type<(any), (any)>, arg4: integer)

public "canUse"(): boolean
public "start"(): void
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseRangedAttackGoal$Type = ($BaseRangedAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseRangedAttackGoal_ = $BaseRangedAttackGoal$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISetSwapHandler" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ISetSwapHandler {

 "replace"(arg0: integer, arg1: $ItemStack$Type): void
 "getStack"(arg0: integer): $ItemStack
}

export namespace $ISetSwapHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISetSwapHandler$Type = ($ISetSwapHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISetSwapHandler_ = $ISetSwapHandler$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/wand/$TraitAdderWand" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseWand, $BaseWand$Type} from "packages/dev/xkmc/l2hostility/content/item/wand/$BaseWand"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TraitAdderWand extends $BaseWand {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public static "get"(arg0: $ItemStack$Type): $MobTrait
public static "set"(arg0: $ItemStack$Type, arg1: $MobTrait$Type): $ItemStack
public static "increase"(arg0: $MobTrait$Type, arg1: integer): integer
public "clickTarget"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type): void
public "clickNothing"(arg0: $ItemStack$Type, arg1: $Player$Type): void
public static "decrease"(arg0: $MobTrait$Type, arg1: integer): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitAdderWand$Type = ($TraitAdderWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitAdderWand_ = $TraitAdderWand$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/$ArtifactMenuRegistry" {
import {$DissolveMenu, $DissolveMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/dissolve/$DissolveMenu"
import {$ShapeMenu, $ShapeMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeMenu"
import {$MenuEntry, $MenuEntry$Type} from "packages/com/tterrag/registrate/util/entry/$MenuEntry"
import {$AugmentMenu, $AugmentMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/augment/$AugmentMenu"
import {$FilteredMenu, $FilteredMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/fitered/$FilteredMenu"
import {$RecycleMenu, $RecycleMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/recycle/$RecycleMenu"
import {$UpgradeMenu, $UpgradeMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/upgrade/$UpgradeMenu"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ArtifactSwapMenu, $ArtifactSwapMenu$Type} from "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapMenu"

export class $ArtifactMenuRegistry {
static readonly "MT_FILTER": $MenuEntry<($FilteredMenu)>
static readonly "MT_RECYCLE": $MenuEntry<($RecycleMenu)>
static readonly "MT_UPGRADE": $MenuEntry<($UpgradeMenu)>
static readonly "MT_DISSOLVE": $MenuEntry<($DissolveMenu)>
static readonly "MT_AUGMENT": $MenuEntry<($AugmentMenu)>
static readonly "MT_SHAPE": $MenuEntry<($ShapeMenu)>
static readonly "MT_SWAP": $MenuEntry<($ArtifactSwapMenu)>

constructor()

public static "register"(): void
public static "getLangKey"(arg0: $MenuType$Type<(any)>): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactMenuRegistry$Type = ($ArtifactMenuRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactMenuRegistry_ = $ArtifactMenuRegistry$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/wand/$GolemInteractItem" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $GolemInteractItem {

}

export namespace $GolemInteractItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemInteractItem$Type = ($GolemInteractItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemInteractItem_ = $GolemInteractItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/gateway/$GatewayToEternityCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GatewayToEternityCompat {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GatewayToEternityCompat$Type = ($GatewayToEternityCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GatewayToEternityCompat_ = $GatewayToEternityCompat$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/sync/$SyncedData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$SyncedData$Serializer, $SyncedData$Serializer$Type} from "packages/dev/xkmc/modulargolems/content/entity/sync/$SyncedData$Serializer"
import {$SyncedData$Definer, $SyncedData$Definer$Type} from "packages/dev/xkmc/modulargolems/content/entity/sync/$SyncedData$Definer"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$SynchedEntityData, $SynchedEntityData$Type} from "packages/net/minecraft/network/syncher/$SynchedEntityData"

export class $SyncedData {
static readonly "INT": $SyncedData$Serializer<(integer)>
static readonly "BLOCK_POS": $SyncedData$Serializer<($BlockPos)>
static readonly "UUID": $SyncedData$Serializer<($Optional<($UUID)>)>

constructor(arg0: $SyncedData$Definer$Type)

public "register"(arg0: $SynchedEntityData$Type): void
public "write"(arg0: $CompoundTag$Type, arg1: $SynchedEntityData$Type): void
public "read"(arg0: $CompoundTag$Type, arg1: $SynchedEntityData$Type): void
public "define"<T>(arg0: $SyncedData$Serializer$Type<(T)>, arg1: T, arg2: string): $EntityDataAccessor<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncedData$Type = ($SyncedData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncedData_ = $SyncedData$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/goals/$GolemRandomStrollGoal" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$RandomStrollGoal, $RandomStrollGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$RandomStrollGoal"

export class $GolemRandomStrollGoal extends $RandomStrollGoal {
static readonly "DEFAULT_INTERVAL": integer

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemRandomStrollGoal$Type = ($GolemRandomStrollGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemRandomStrollGoal_ = $GolemRandomStrollGoal$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/core/$LinearFuncHandle" {
import {$LinearFuncConfig$Entry, $LinearFuncConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$LinearFuncConfig$Entry"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"

export class $LinearFuncHandle extends $NamedEntry<($LinearFuncHandle)> {

constructor()

public "getValue"(arg0: double): double
public "getEntry"(): $LinearFuncConfig$Entry
get "entry"(): $LinearFuncConfig$Entry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LinearFuncHandle$Type = ($LinearFuncHandle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LinearFuncHandle_ = $LinearFuncHandle$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/enchantments/$HitTargetEnchantment" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export interface $HitTargetEnchantment {

 "hitMob"(arg0: $LivingEntity$Type, arg1: $MobTraitCap$Type, arg2: integer, arg3: $AttackCache$Type): void

(arg0: $LivingEntity$Type, arg1: $MobTraitCap$Type, arg2: integer, arg3: $AttackCache$Type): void
}

export namespace $HitTargetEnchantment {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HitTargetEnchantment$Type = ($HitTargetEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HitTargetEnchantment_ = $HitTargetEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/undergarden/$UteriumTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $UteriumTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UteriumTool$Type = ($UteriumTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UteriumTool_ = $UteriumTool$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerInvAccess" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderDrawerItem, $EnderDrawerItem$Type} from "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerItem"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BaseDrawerInvAccess, $BaseDrawerInvAccess$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$BaseDrawerInvAccess"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $EnderDrawerInvAccess extends $Record implements $BaseDrawerInvAccess {

constructor(drawerStack: $ItemStack$Type, drawerItem: $EnderDrawerItem$Type, player: $ServerPlayer$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "isEmpty"(): boolean
public "drawerItem"(): $EnderDrawerItem
public "player"(): $ServerPlayer
public "drawerStack"(): $ItemStack
public "getStoredCount"(): integer
public "setStoredCount"(arg0: integer): void
public "getMax"(arg0: $ItemStack$Type): integer
public "getSlots"(): integer
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "isItemValid"(arg0: $ItemStack$Type): boolean
public "setStoredItem"(arg0: $Item$Type): void
public "getStoredItem"(): $Item
public "mayStack"(arg0: $BaseDrawerInvAccess$Type, arg1: integer, arg2: $ItemStack$Type, arg3: $PickupConfig$Type): boolean
public "getStoredStack"(): $ItemStack
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "empty"(): boolean
get "storedCount"(): integer
set "storedCount"(value: integer)
get "slots"(): integer
set "storedItem"(value: $Item$Type)
get "storedItem"(): $Item
get "storedStack"(): $ItemStack
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderDrawerInvAccess$Type = ($EnderDrawerInvAccess);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderDrawerInvAccess_ = $EnderDrawerInvAccess$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/common/$ArtifactChestMenuPvd" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ArtifactChestMenuPvd$Factory, $ArtifactChestMenuPvd$Factory$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$ArtifactChestMenuPvd$Factory"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ArtifactChestMenuPvd extends $Record implements $MenuProvider {

constructor(fac: $ArtifactChestMenuPvd$Factory$Type, player: $ServerPlayer$Type, slot: integer, stack: $ItemStack$Type)

public "slot"(): integer
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "open"(): void
public "fac"(): $ArtifactChestMenuPvd$Factory
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public "player"(): $ServerPlayer
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactChestMenuPvd$Type = ($ArtifactChestMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactChestMenuPvd_ = $ArtifactChestMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$GenericArmorItem, $GenericArmorItem$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericArmorItem"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ExtraArmorConfig {
 "repair_chance": double
 "damage_chance": double
 "magic_immune": integer

constructor()

public "hideWithEffect"(): boolean
public "dampenVibration"(): boolean
public "setMagicImmune"(arg0: integer): $ExtraArmorConfig
public "getMagicImmune"(): integer
public "immuneToEffect"(arg0: $ItemStack$Type, arg1: $GenericArmorItem$Type, arg2: $MobEffectInstance$Type): boolean
public "damageChance"(arg0: double): $ExtraArmorConfig
public "repairChance"(arg0: double): $ExtraArmorConfig
public "modify"(arg0: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg1: $EquipmentSlot$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "onArmorTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Player$Type): void
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T): integer
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
set "magicImmune"(value: integer)
get "magicImmune"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtraArmorConfig$Type = ($ExtraArmorConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtraArmorConfig_ = $ExtraArmorConfig$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/client/tooltip/$ItemTooltip" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ItemTooltip extends $Record implements $TooltipComponent {

constructor(list: $NonNullList$Type<($ItemStack$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "list"(): $NonNullList<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTooltip$Type = ($ItemTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTooltip_ = $ItemTooltip$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$ImmuneEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $ImmuneEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, ...arg2: ($EquipmentSlot$Type)[])

public "getFullname"(arg0: integer): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImmuneEnchantment$Type = ($ImmuneEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImmuneEnchantment_ = $ImmuneEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$ConfigLoadOnStart" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $ConfigLoadOnStart extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $ConfigLoadOnStart {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigLoadOnStart$Type = ($ConfigLoadOnStart);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigLoadOnStart_ = $ConfigLoadOnStart$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/click/$SlotClickHandler" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ConcurrentHashMap, $ConcurrentHashMap$Type} from "packages/java/util/concurrent/$ConcurrentHashMap"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SlotClickHandler {
static readonly "MAP": $ConcurrentHashMap<($ResourceLocation), ($SlotClickHandler)>

constructor(arg0: $ResourceLocation$Type)

public "handle"(arg0: $ServerPlayer$Type, arg1: integer, arg2: integer, arg3: integer): void
public "isAllowed"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotClickHandler$Type = ($SlotClickHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotClickHandler_ = $SlotClickHandler$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/registrate/$LCBlocks" {
import {$BlockEntry, $BlockEntry$Type} from "packages/com/tterrag/registrate/util/entry/$BlockEntry"
import {$AnvilBlock, $AnvilBlock$Type} from "packages/net/minecraft/world/level/block/$AnvilBlock"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $LCBlocks {
static readonly "ETERNAL_ANVIL": $BlockEntry<($AnvilBlock)>
static readonly "GEN_BLOCK": ($BlockEntry<($Block)>)[]

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCBlocks$Type = ($LCBlocks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCBlocks_ = $LCBlocks$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$BaseBagMenu" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$DrawerQuickInsert, $DrawerQuickInsert$Type} from "packages/dev/xkmc/l2backpack/content/click/$DrawerQuickInsert"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $BaseBagMenu<T extends $BaseBagMenu<(T)>> extends $BaseContainerMenu<(T)> implements $DrawerQuickInsert {
readonly "item_slot": $PlayerSlot<(any)>
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: $MenuType$Type<(T)>, arg1: integer, arg2: $Inventory$Type, arg3: $SpriteManager$Type, arg4: $PlayerSlot$Type<(any)>, arg5: $UUID$Type, arg6: integer)

public "getStack"(): $ItemStack
public "stillValid"(arg0: $Player$Type): boolean
public "quickMove"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer): boolean
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
get "stack"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseBagMenu$Type<T> = ($BaseBagMenu<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseBagMenu_<T> = $BaseBagMenu$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/base/$BaseEntity" {
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseEntity extends $Entity implements $IEntityAdditionalSpawnData {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseEntity$Type = ($BaseEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseEntity_ = $BaseEntity$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/gateway/$WaveData" {
import {$GatewayCondition, $GatewayCondition$Type} from "packages/dev/xkmc/l2hostility/compat/gateway/$GatewayCondition"
import {$WaveId, $WaveId$Type} from "packages/dev/xkmc/l2hostility/compat/gateway/$WaveId"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WaveData {
readonly "id": $WaveId
 "appliedCount": $Map<($GatewayCondition), (integer)>

constructor(arg0: $WaveId$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaveData$Type = ($WaveData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaveData_ = $WaveData$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/card/$UuidFilterCard" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ClickEntityFilterCard, $ClickEntityFilterCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$ClickEntityFilterCard"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UuidFilterCard extends $ClickEntityFilterCard<($UUID)> {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getList"(arg0: $ItemStack$Type): $List<($UUID)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "setList"(arg0: $ItemStack$Type, arg1: $List$Type<($UUID$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UuidFilterCard$Type = ($UuidFilterCard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UuidFilterCard_ = $UuidFilterCard$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$UndyingTrait" {
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$LegendaryTrait, $LegendaryTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$LegendaryTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $UndyingTrait extends $LegendaryTrait {

constructor(arg0: $ChatFormatting$Type)

public "allow"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer): boolean
public "validTarget"(arg0: $LivingEntity$Type): boolean
public "onDeath"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingDeathEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UndyingTrait$Type = ($UndyingTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UndyingTrait_ = $UndyingTrait$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/menu/equipments/$EquipmentsMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$PredSlot, $PredSlot$Type} from "packages/dev/xkmc/l2library/base/menu/base/$PredSlot"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $EquipmentsMenu extends $BaseContainerMenu<($EquipmentsMenu)> {
static "SLOTS": ($EquipmentSlot)[]
static readonly "MANAGER": $SpriteManager
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public "getAsPredSlot"(arg0: string, arg1: integer, arg2: integer): $PredSlot
public static "fromNetwork"(arg0: $MenuType$Type<($EquipmentsMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $EquipmentsMenu
public "stillValid"(arg0: $Player$Type): boolean
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentsMenu$Type = ($EquipmentsMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentsMenu_ = $EquipmentsMenu$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/menu/tab/$DifficultyOverlay" {
import {$SideBar$IntSignature, $SideBar$IntSignature$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar$IntSignature"
import {$InfoSideBar, $InfoSideBar$Type} from "packages/dev/xkmc/l2library/base/overlay/$InfoSideBar"

export class $DifficultyOverlay extends $InfoSideBar<($SideBar$IntSignature)> {

constructor()

public "isScreenOn"(): boolean
get "screenOn"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DifficultyOverlay$Type = ($DifficultyOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DifficultyOverlay_ = $DifficultyOverlay$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/mobeffects/$IOverlayRenderEffect" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$IconOverlayEffect, $IconOverlayEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$IconOverlayEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $IOverlayRenderEffect extends $IconOverlayEffect {

 "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
 "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender

(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
}

export namespace $IOverlayRenderEffect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IOverlayRenderEffect$Type = ($IOverlayRenderEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IOverlayRenderEffect_ = $IOverlayRenderEffect$Type;
}}
declare module "packages/dev/xkmc/l2complements/events/event/$EnderPickupEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $EnderPickupEvent extends $Event {

constructor(arg0: $ServerPlayer$Type, arg1: $ItemStack$Type)
constructor()

public "getStack"(): $ItemStack
public "isCancelable"(): boolean
public "getPlayer"(): $ServerPlayer
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "stack"(): $ItemStack
get "cancelable"(): boolean
get "player"(): $ServerPlayer
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderPickupEvent$Type = ($EnderPickupEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderPickupEvent_ = $EnderPickupEvent$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/bag/$BagUtils" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $BagUtils {

constructor()

public static "placeItemBackInInventory"(arg0: $Inventory$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BagUtils$Type = ($BagUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BagUtils_ = $BagUtils$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$SharedDriveTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SharedDriveTrigger$Ins, $SharedDriveTrigger$Ins$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$SharedDriveTrigger$Ins"

export class $SharedDriveTrigger extends $BaseCriterion<($SharedDriveTrigger$Ins), ($SharedDriveTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type): void
public static "ins"(): $SharedDriveTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SharedDriveTrigger$Type = ($SharedDriveTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SharedDriveTrigger_ = $SharedDriveTrigger$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$ILCTotem" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TotemHelper$TotemSlot, $TotemHelper$TotemSlot$Type} from "packages/dev/xkmc/l2damagetracker/contents/curios/$TotemHelper$TotemSlot"
import {$L2Totem, $L2Totem$Type} from "packages/dev/xkmc/l2damagetracker/contents/curios/$L2Totem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ILCTotem extends $L2Totem {

 "trigger"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $Consumer$Type<($ItemStack$Type)>): void
 "allow"(arg0: $LivingEntity$Type, arg1: $DamageSource$Type): boolean
 "onClientTrigger"(arg0: $Entity$Type, arg1: $ItemStack$Type): void
 "trigger"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $TotemHelper$TotemSlot$Type, arg3: $DamageSource$Type): void
 "allow"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $DamageSource$Type): boolean
 "isValid"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $TotemHelper$TotemSlot$Type): boolean
}

export namespace $ILCTotem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILCTotem$Type = ($ILCTotem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILCTotem_ = $ILCTotem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/consumable/$HostilityOrb" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $HostilityOrb extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityOrb$Type = ($HostilityOrb);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityOrb_ = $HostilityOrb$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/ghost/$ReadOnlyContainer" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"

export interface $ReadOnlyContainer extends $Container {

 "setChanged"(): void
 "removeItemNoUpdate"(arg0: integer): $ItemStack
 "removeItem"(arg0: integer, arg1: integer): $ItemStack
 "clearContent"(): void
 "stillValid"(arg0: $Player$Type): boolean
 "setItem"(arg0: integer, arg1: $ItemStack$Type): void
 "kjs$self"(): $Container
 "getBlock"(level: $Level$Type): $BlockContainerJS
 "getItem"(arg0: integer): $ItemStack
 "getContainerSize"(): integer
 "isEmpty"(): boolean
 "startOpen"(arg0: $Player$Type): void
 "getMaxStackSize"(): integer
 "stopOpen"(arg0: $Player$Type): void
 "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
 "countItem"(arg0: $Item$Type): integer
 "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
 "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
 "getSlots"(): integer
 "getStackInSlot"(slot: integer): $ItemStack
 "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
 "isMutable"(): boolean
 "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
 "setChanged"(): void
 "asContainer"(): $Container
 "getHeight"(): integer
 "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
 "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
 "getWidth"(): integer
 "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
 "getSlotLimit"(slot: integer): integer
 "clear"(): void
 "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
 "countNonEmpty"(ingredient: $Ingredient$Type): integer
 "countNonEmpty"(): integer
 "getAllItems"(): $List<($ItemStack)>
 "find"(ingredient: $Ingredient$Type): integer
 "find"(): integer
 "clear"(ingredient: $Ingredient$Type): void
 "count"(ingredient: $Ingredient$Type): integer
 "count"(): integer
 "isEmpty"(): boolean
}

export namespace $ReadOnlyContainer {
function stillValidBlockEntity(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
function stillValidBlockEntity(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
function tryClear(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReadOnlyContainer$Type = ($ReadOnlyContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReadOnlyContainer_ = $ReadOnlyContainer$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$HumanoidSkinEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$SpecialRenderSkin, $SpecialRenderSkin$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/skin/$SpecialRenderSkin"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $HumanoidSkinEvent extends $Event {

constructor()
constructor(arg0: $HumanoidGolemEntity$Type, arg1: $ItemStack$Type)

public "getStack"(): $ItemStack
public "isCancelable"(): boolean
public "getSkin"(): $SpecialRenderSkin
public "getGolem"(): $HumanoidGolemEntity
public "setSkin"(arg0: $SpecialRenderSkin$Type): void
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "stack"(): $ItemStack
get "cancelable"(): boolean
get "skin"(): $SpecialRenderSkin
get "golem"(): $HumanoidGolemEntity
set "skin"(value: $SpecialRenderSkin$Type)
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HumanoidSkinEvent$Type = ($HumanoidSkinEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HumanoidSkinEvent_ = $HumanoidSkinEvent$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/$EffectBuilder" {
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $EffectBuilder {
readonly "ins": $MobEffectInstance

constructor(arg0: $MobEffectInstance$Type)
constructor(arg0: $MobEffect$Type)

public "setVisible"(arg0: boolean): $EffectBuilder
public "setAmbient"(arg0: boolean): $EffectBuilder
public "setShowIcon"(arg0: boolean): $EffectBuilder
public "setAmplifier"(arg0: integer): $EffectBuilder
public "setDuration"(arg0: integer): $EffectBuilder
set "visible"(value: boolean)
set "ambient"(value: boolean)
set "showIcon"(value: boolean)
set "amplifier"(value: integer)
set "duration"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectBuilder$Type = ($EffectBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectBuilder_ = $EffectBuilder$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemPartType" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $MetalGolemPartType extends $Enum<($MetalGolemPartType)> implements $IGolemPart<($MetalGolemPartType)> {
static readonly "RIGHT": $MetalGolemPartType
static readonly "BODY": $MetalGolemPartType
static readonly "LEFT": $MetalGolemPartType
static readonly "LEG": $MetalGolemPartType


public static "values"(): ($MetalGolemPartType)[]
public static "valueOf"(arg0: string): $MetalGolemPartType
public "getDesc"(arg0: $MutableComponent$Type): $MutableComponent
public "setupItemRender"(arg0: $PoseStack$Type, arg1: $ItemDisplayContext$Type, arg2: $MetalGolemPartType$Type): void
public "toItem"(): $GolemPart<(any), ($MetalGolemPartType)>
public "ordinal"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalGolemPartType$Type = (("left") | ("right") | ("body") | ("leg")) | ($MetalGolemPartType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalGolemPartType_ = $MetalGolemPartType$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$WarpStone" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WarpStone extends $Item {
readonly "fragile": boolean
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: boolean)

public "use"(arg0: $ServerPlayer$Type, arg1: $ItemStack$Type): void
public static "setPos"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: double, arg3: double, arg4: double): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "isFoil"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "getPos"(arg0: $ItemStack$Type): $Optional<($Pair<($ResourceKey<($Level)>), ($Vec3)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WarpStone$Type = ($WarpStone);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WarpStone_ = $WarpStone$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/entries/$ArtifactRegistrate" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetRegHelper, $SetRegHelper$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetRegHelper"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TreeMap, $TreeMap$Type} from "packages/java/util/$TreeMap"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"

export class $ArtifactRegistrate extends $L2Registrate {
readonly "SET_MAP": $TreeMap<($ResourceLocation), ($SetEntry<(any)>)>
readonly "SET_LIST": $List<($SetEntry<(any)>)>
readonly "LINEAR_LIST": $Multimap<($ResourceLocation), ($LinearFuncEntry)>

constructor()

public "getSetHelper"(arg0: string): $SetRegHelper
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactRegistrate$Type = ($ArtifactRegistrate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactRegistrate_ = $ArtifactRegistrate$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/attribute/$AttributeTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EquipmentGroup, $EquipmentGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$EquipmentGroup"
import {$GolemTabBase, $GolemTabBase$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $AttributeTab extends $GolemTabBase<($EquipmentGroup), ($AttributeTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $GolemTabToken<(G), (T)>
readonly "manager": $GolemTabManager<(G)>
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $GolemTabToken$Type<($EquipmentGroup$Type), ($AttributeTab$Type)>, arg2: $GolemTabManager$Type<($EquipmentGroup$Type)>, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeTab$Type = ($AttributeTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeTab_ = $AttributeTab$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/events/$ArtifactAttackListener" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$PlayerAttackCache, $PlayerAttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$PlayerAttackCache"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$AttackListener, $AttackListener$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackListener"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $ArtifactAttackListener implements $AttackListener {

constructor()

public "onCriticalHit"(arg0: $PlayerAttackCache$Type, arg1: $CriticalHitEvent$Type): boolean
public "onDamageFinalized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onAttack"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onPlayerAttack"(arg0: $PlayerAttackCache$Type): void
public "postHurt"(arg0: $AttackCache$Type, arg1: $LivingHurtEvent$Type, arg2: $ItemStack$Type): void
public "setupProfile"(arg0: $AttackCache$Type, arg1: $BiConsumer$Type<($LivingEntity$Type), ($ItemStack$Type)>): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "postAttack"(arg0: $AttackCache$Type, arg1: $LivingAttackEvent$Type, arg2: $ItemStack$Type): void
public "onCreateSource"(arg0: $CreateSourceEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactAttackListener$Type = ($ArtifactAttackListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactAttackListener_ = $ArtifactAttackListener$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe$Serializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$AbstractShapedRecipe$RecipeFactory, $AbstractShapedRecipe$RecipeFactory$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe$RecipeFactory"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractShapedRecipe, $AbstractShapedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$ShapedRecipe$Serializer, $ShapedRecipe$Serializer$Type} from "packages/net/minecraft/world/item/crafting/$ShapedRecipe$Serializer"

export class $AbstractShapedRecipe$Serializer<T extends $AbstractShapedRecipe<(T)>> extends $ShapedRecipe$Serializer {

constructor(arg0: $AbstractShapedRecipe$RecipeFactory$Type<(T)>)

public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): T
public "toJson"(arg0: T, arg1: $JsonObject$Type): void
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): T
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractShapedRecipe$Serializer$Type<T> = ($AbstractShapedRecipe$Serializer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractShapedRecipe$Serializer_<T> = $AbstractShapedRecipe$Serializer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$ContentTransfer$Quad" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export interface $ContentTransfer$Quad {

 "click"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: boolean, arg3: boolean, arg4: boolean, arg5: $IItemHandler$Type): void

(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: boolean, arg3: boolean, arg4: boolean, arg5: $IItemHandler$Type): void
}

export namespace $ContentTransfer$Quad {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContentTransfer$Quad$Type = ($ContentTransfer$Quad);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContentTransfer$Quad_ = $ContentTransfer$Quad$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/network/$SetFilterToServer$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SetFilterToServer$Type extends $Enum<($SetFilterToServer$Type)> {
static readonly "FILTER": $SetFilterToServer$Type
static readonly "RECYCLE": $SetFilterToServer$Type
static readonly "UPGRADE": $SetFilterToServer$Type
static readonly "DISSOLVE": $SetFilterToServer$Type
static readonly "AUGMENT": $SetFilterToServer$Type
static readonly "SHAPE": $SetFilterToServer$Type


public static "values"(): ($SetFilterToServer$Type)[]
public static "valueOf"(arg0: string): $SetFilterToServer$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetFilterToServer$Type$Type = (("filter") | ("augment") | ("upgrade") | ("shape") | ("recycle") | ("dissolve")) | ($SetFilterToServer$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetFilterToServer$Type_ = $SetFilterToServer$Type$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitEffectTrigger$Ins" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$KillTraitEffectTrigger, $KillTraitEffectTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitEffectTrigger"

export class $KillTraitEffectTrigger$Ins extends $BaseCriterionInstance<($KillTraitEffectTrigger$Ins), ($KillTraitEffectTrigger)> {
 "trait": $MobTrait
 "effect": $MobEffect

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

public "matchAll"(arg0: $LivingEntity$Type, arg1: $MobTraitCap$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitEffectTrigger$Ins$Type = ($KillTraitEffectTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitEffectTrigger$Ins_ = $KillTraitEffectTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeMenuScreen" {
import {$ShapeMenu, $ShapeMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeMenu"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IFilterScreen, $IFilterScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$IFilterScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$MenuLayoutConfig$ScreenRenderer, $MenuLayoutConfig$ScreenRenderer$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$ScreenRenderer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ShapeSlots, $ShapeSlots$Type} from "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeSlots"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ShapeMenuScreen extends $BaseContainerScreen<($ShapeMenu)> implements $IFilterScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ShapeMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "screenHeight"(): integer
public "screenWidth"(): integer
public "drawDisable"(arg0: $MenuLayoutConfig$ScreenRenderer$Type, arg1: $GuiGraphics$Type, arg2: $ShapeSlots$Type, arg3: integer, arg4: string): void
public "asScreen"(): $Screen
public "onSwitch"(): void
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeMenuScreen$Type = ($ShapeMenuScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeMenuScreen_ = $ShapeMenuScreen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IntOpenHashSet, $IntOpenHashSet$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntOpenHashSet"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractArrow$Pickup, $AbstractArrow$Pickup$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow$Pickup"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseThrownWeaponEntity<T extends $BaseThrownWeaponEntity<(T)>> extends $AbstractArrow implements $IEntityAdditionalSpawnData {
 "remainingHit": integer
 "clientSideReturnTridentTickCount": integer
 "slot": integer
 "waterInertia": float
 "targetCache": $Entity
 "pickup": $AbstractArrow$Pickup
 "shakeTime": integer
 "piercingIgnoreEntityIds": $IntOpenHashSet
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(T)>, arg1: $Level$Type)
constructor(arg0: $EntityType$Type<(T)>, arg1: $Level$Type, arg2: $LivingEntity$Type, arg3: $ItemStack$Type, arg4: integer)

public "getItem"(): $ItemStack
public "tick"(): void
public "playerTouch"(arg0: $Player$Type): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "setPierceLevel"(arg0: byte): void
public "m_6901_"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "shouldRender"(arg0: double, arg1: double, arg2: double): boolean
public "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "isFoil"(): boolean
get "item"(): $ItemStack
set "pierceLevel"(value: byte)
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "foil"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseThrownWeaponEntity$Type<T> = ($BaseThrownWeaponEntity<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseThrownWeaponEntity_<T> = $BaseThrownWeaponEntity$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/serial/conditions/$ListStringValueCondition" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $ListStringValueCondition extends $Record implements $ICondition {
static readonly "ID": $ResourceLocation

constructor(path: string, line: $ArrayList$Type<(string)>, key: string)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $ICondition$IContext$Type): boolean
public static "of"(arg0: string, arg1: $ForgeConfigSpec$ConfigValue$Type<($List$Type<(string)>)>, arg2: string): $ListStringValueCondition
public "line"(): $ArrayList<(string)>
public "key"(): string
public "path"(): string
public "getID"(): $ResourceLocation
public static "shouldRegisterEntry"(arg0: $JsonElement$Type): boolean
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListStringValueCondition$Type = ($ListStringValueCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListStringValueCondition_ = $ListStringValueCondition$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/registrate/$LWRegistrate" {
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"

export class $LWRegistrate extends $L2Registrate {

constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWRegistrate$Type = ($LWRegistrate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWRegistrate_ = $LWRegistrate$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestAnalogBlockEntity" {
import {$BlockEntityBlockMethodImpl, $BlockEntityBlockMethodImpl$Type} from "packages/dev/xkmc/l2modularblock/impl/$BlockEntityBlockMethodImpl"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockEntityEntry, $BlockEntityEntry$Type} from "packages/com/tterrag/registrate/util/entry/$BlockEntityEntry"

export class $WorldChestAnalogBlockEntity<T extends $BlockEntity> extends $BlockEntityBlockMethodImpl<(T)> {

constructor(arg0: $BlockEntityEntry$Type<(T)>, arg1: $Class$Type<(T)>)

public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "onClick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldChestAnalogBlockEntity$Type<T> = ($WorldChestAnalogBlockEntity<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldChestAnalogBlockEntity_<T> = $WorldChestAnalogBlockEntity$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$GreedOfNidhoggur" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$PlayerDifficulty, $PlayerDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/player/$PlayerDifficulty"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GreedOfNidhoggur extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getExtraLevel"(): integer
public "getLootFactor"(arg0: $ItemStack$Type, arg1: $PlayerDifficulty$Type, arg2: $MobTraitCap$Type): double
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
get "extraLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GreedOfNidhoggur$Type = ($GreedOfNidhoggur);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GreedOfNidhoggur_ = $GreedOfNidhoggur$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$SharedDriveTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"
import {$SharedDriveTrigger, $SharedDriveTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$SharedDriveTrigger"

export class $SharedDriveTrigger$Ins extends $BaseCriterionInstance<($SharedDriveTrigger$Ins), ($SharedDriveTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SharedDriveTrigger$Ins$Type = ($SharedDriveTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SharedDriveTrigger$Ins_ = $SharedDriveTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2library/util/data/$LootTableTemplate" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LootItemBlockStatePropertyCondition$Builder, $LootItemBlockStatePropertyCondition$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemBlockStatePropertyCondition$Builder"
import {$LootPool$Builder, $LootPool$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootPool$Builder"
import {$LootPoolSingletonContainer$Builder, $LootPoolSingletonContainer$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolSingletonContainer$Builder"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Property, $Property$Type} from "packages/net/minecraft/world/level/block/state/properties/$Property"
import {$LootTable$Builder, $LootTable$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable$Builder"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LootItemCondition$Builder, $LootItemCondition$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition$Builder"
import {$EnchantmentPredicate, $EnchantmentPredicate$Type} from "packages/net/minecraft/advancements/critereon/$EnchantmentPredicate"

export class $LootTableTemplate {

constructor()

public static "withBlockState"(arg0: $Block$Type, arg1: $Property$Type<(integer)>, arg2: integer): $LootItemBlockStatePropertyCondition$Builder
public static "withBlockState"(arg0: $Block$Type, arg1: $Property$Type<(boolean)>, arg2: boolean): $LootItemBlockStatePropertyCondition$Builder
public static "withBlockState"(arg0: $Block$Type, arg1: $Property$Type<(any)>, arg2: string): $LootItemBlockStatePropertyCondition$Builder
public static "withBlockState"(arg0: $Block$Type, arg1: $Property$Type<(integer)>, arg2: integer, arg3: integer): $LootItemBlockStatePropertyCondition$Builder
public static "getPool"(arg0: integer, arg1: integer): $LootPool$Builder
public static "getItem"(arg0: $Item$Type, arg1: integer, arg2: integer): $LootPoolSingletonContainer$Builder<(any)>
public static "getItem"(arg0: $Item$Type, arg1: integer, arg2: integer, arg3: integer): $LootPoolSingletonContainer$Builder<(any)>
public static "getItem"(arg0: $Item$Type, arg1: integer): $LootPoolSingletonContainer$Builder<(any)>
public static "byPlayer"(): $LootItemCondition$Builder
public static "hasEnchantment"(arg0: $Enchantment$Type, arg1: integer): $EnchantmentPredicate
public static "chance"(arg0: float, arg1: float): $LootItemCondition$Builder
public static "chance"(arg0: float): $LootItemCondition$Builder
public static "shearOrSilk"(arg0: boolean): $LootItemCondition$Builder
public static "cropDrop"(arg0: $Item$Type): $LootPoolSingletonContainer$Builder<(any)>
public static "selfOrOther"(arg0: $Block$Type, arg1: $Block$Type, arg2: $Item$Type, arg3: integer): $LootTable$Builder
public static "silk"(arg0: boolean): $LootItemCondition$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootTableTemplate$Type = ($LootTableTemplate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootTableTemplate_ = $LootTableTemplate$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/armors/$StableBodyEnchantment" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$AttributeEnchantment, $AttributeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$AttributeEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$SingleLevelEnchantment, $SingleLevelEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SingleLevelEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"

export class $StableBodyEnchantment extends $SingleLevelEnchantment implements $AttributeEnchantment {
static readonly "ID": $UUID
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "addAttributes"(arg0: integer, arg1: $ItemAttributeModifierEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StableBodyEnchantment$Type = ($StableBodyEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StableBodyEnchantment_ = $StableBodyEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$PoseiditeTool" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PoseiditeTool extends $ExtraToolConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "modify"(arg0: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg1: $EquipmentSlot$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type, arg2: float): float
public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoseiditeTool$Type = ($PoseiditeTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoseiditeTool_ = $PoseiditeTool$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/entity/$BulletRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ShulkerBulletRenderer, $ShulkerBulletRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$ShulkerBulletRenderer"

export class $BulletRenderer extends $ShulkerBulletRenderer {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BulletRenderer$Type = ($BulletRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BulletRenderer_ = $BulletRenderer$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$SimpleMenuPvd$BagMenuFactory" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export interface $SimpleMenuPvd$BagMenuFactory {

 "create"(arg0: integer, arg1: $Inventory$Type, arg2: $PlayerSlot$Type<(any)>, arg3: $UUID$Type, arg4: $Component$Type): $AbstractContainerMenu

(arg0: integer, arg1: $Inventory$Type, arg2: $PlayerSlot$Type<(any)>, arg3: $UUID$Type, arg4: $Component$Type): $AbstractContainerMenu
}

export namespace $SimpleMenuPvd$BagMenuFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleMenuPvd$BagMenuFactory$Type = ($SimpleMenuPvd$BagMenuFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleMenuPvd$BagMenuFactory_ = $SimpleMenuPvd$BagMenuFactory$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$IGolemModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $IGolemModel<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>, M extends ($EntityModel<(T)>) & ($IGolemModel<(T), (P), (M)>)> {

 "getThis"(): M
 "getTextureLocationInternal"(arg0: $ResourceLocation$Type): $ResourceLocation
 "renderToBufferInternal"(arg0: P, arg1: $PoseStack$Type, arg2: $VertexConsumer$Type, arg3: integer, arg4: integer, arg5: float, arg6: float, arg7: float, arg8: float): void
}

export namespace $IGolemModel {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IGolemModel$Type<T, P, M> = ($IGolemModel<(T), (P), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IGolemModel_<T, P, M> = $IGolemModel$Type<(T), (P), (M)>;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$RecordRecipeFinished" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $RecordRecipeFinished<T extends $Record> extends $Record implements $FinishedRecipe {

constructor(id: $ResourceLocation$Type, serializer: $RecipeSerializer$Type<(any)>, recipe: T)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $ResourceLocation
public "recipe"(): T
public "serializeRecipeData"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "getAdvancementId"(): $ResourceLocation
public "serializer"(): $RecipeSerializer<(any)>
public "getId"(): $ResourceLocation
public "serializeAdvancement"(): $JsonObject
public "serializeRecipe"(): $JsonObject
get "type"(): $RecipeSerializer<(any)>
get "advancementId"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecordRecipeFinished$Type<T> = ($RecordRecipeFinished<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecordRecipeFinished_<T> = $RecordRecipeFinished$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/compat/$LCEmiPlugin" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$UidContext, $UidContext$Type} from "packages/mezz/jei/api/ingredients/subtypes/$UidContext"

export class $LCEmiPlugin {

constructor()

public static "partSubType"(arg0: $ItemStack$Type, arg1: $UidContext$Type): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCEmiPlugin$Type = ($LCEmiPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCEmiPlugin_ = $LCEmiPlugin$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$SlotGen" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$RecordDataProvider, $RecordDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$RecordDataProvider"

export class $SlotGen extends $RecordDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $BiConsumer$Type<(string), ($Record$Type)>): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotGen$Type = ($SlotGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotGen_ = $SlotGen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/attribute/$SimpleCASetEffect" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$AttributeSetData, $AttributeSetData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AbstractConditionalAttributeSetEffect, $AbstractConditionalAttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AbstractConditionalAttributeSetEffect"

export class $SimpleCASetEffect extends $AbstractConditionalAttributeSetEffect<($AttributeSetData)> {
readonly "ids": integer

constructor(arg0: $Predicate$Type<($Player$Type)>, ...arg1: ($AttrSetEntry$Type)[])

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getData"(): $AttributeSetData
get "data"(): $AttributeSetData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleCASetEffect$Type = ($SimpleCASetEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleCASetEffect_ = $SimpleCASetEffect$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageTypeRoot" {
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$DamageTypeWrapper, $DamageTypeWrapper$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageTypeWrapper"
import {$TreeMap, $TreeMap$Type} from "packages/java/util/$TreeMap"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$DamageState, $DamageState$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageState"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DamageTypeRoot$GenConfig, $DamageTypeRoot$GenConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageTypeRoot$GenConfig"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$DamageWrapperTagProvider, $DamageWrapperTagProvider$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageWrapperTagProvider"

export class $DamageTypeRoot implements $DamageTypeWrapper {
static readonly "ROOTS": $TreeMap<($ResourceKey<($DamageType)>), ($DamageTypeRoot)>

constructor(arg0: string, arg1: $ResourceKey$Type<($DamageType$Type)>, arg2: $List$Type<($TagKey$Type<($DamageType$Type)>)>, arg3: $Function$Type<($DamageTypeWrapper$Type), ($DamageType$Type)>)

public "add"(arg0: $DamageState$Type): void
public "type"(): $ResourceKey<($DamageType)>
public static "of"(arg0: $ResourceKey$Type<($DamageType$Type)>): $DamageTypeRoot
public "getObject"(): $DamageType
public "generate"(arg0: $DamageTypeRoot$GenConfig$Type): void
public "enable"(arg0: $DamageState$Type): $DamageTypeWrapper
public "isEnabled"(arg0: $DamageState$Type): boolean
public "states"(): $Set<($DamageState)>
public "toRoot"(): $DamageTypeWrapper
public static "generateAll"(): void
public static "configureGeneration"(arg0: $Set$Type<(string)>, arg1: string, arg2: $List$Type<($DamageTypeWrapper$Type)>): void
public "validState"(arg0: $DamageState$Type): boolean
public "gen"(arg0: $DamageWrapperTagProvider$Type, arg1: $HolderLookup$Provider$Type): void
public "getHolder"(arg0: $Level$Type): $Holder<($DamageType)>
get "object"(): $DamageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageTypeRoot$Type = ($DamageTypeRoot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageTypeRoot_ = $DamageTypeRoot$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/click/$DrawerQuickInsert" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $DrawerQuickInsert {

 "quickMove"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer): boolean

(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer): boolean
}

export namespace $DrawerQuickInsert {
function moveItemStackTo(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
function moveItemStackTo(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerQuickInsert$Type = ($DrawerQuickInsert);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerQuickInsert_ = $DrawerQuickInsert$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/click/$ReadOnlyStackClickHandler" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ConcurrentHashMap, $ConcurrentHashMap$Type} from "packages/java/util/concurrent/$ConcurrentHashMap"
import {$SlotClickHandler, $SlotClickHandler$Type} from "packages/dev/xkmc/l2screentracker/click/$SlotClickHandler"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ReadOnlyStackClickHandler extends $SlotClickHandler {
static readonly "MAP": $ConcurrentHashMap<($ResourceLocation), ($SlotClickHandler)>

constructor(arg0: $ResourceLocation$Type)

public "handle"(arg0: $ServerPlayer$Type, arg1: integer, arg2: integer, arg3: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReadOnlyStackClickHandler$Type = ($ReadOnlyStackClickHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReadOnlyStackClickHandler_ = $ReadOnlyStackClickHandler$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $FilterTabType extends $Enum<($FilterTabType)> {
static readonly "ABOVE": $FilterTabType
static readonly "BELOW": $FilterTabType
static readonly "LEFT": $FilterTabType
static readonly "RIGHT": $FilterTabType
static readonly "MAX_TABS": integer


public static "values"(): ($FilterTabType)[]
public static "valueOf"(arg0: string): $FilterTabType
public "getY"(arg0: integer): integer
public "draw"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: boolean, arg4: integer): void
public "getX"(arg0: integer): integer
public "drawIcon"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "isMouseOver"(arg0: integer, arg1: integer, arg2: integer, arg3: double, arg4: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilterTabType$Type = (("below") | ("left") | ("above") | ("right")) | ($FilterTabType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilterTabType_ = $FilterTabType$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/logic/$DifficultyLevel" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $DifficultyLevel {
 "level": integer
 "extraLevel": integer

constructor()

public static "merge"(arg0: $DifficultyLevel$Type, arg1: integer): $DifficultyLevel
public "grow"(arg0: double, arg1: $MobTraitCap$Type): void
public "getLevel"(): integer
public "getMaxExp"(): long
public "decay"(): void
public "getStr"(): string
public static "ofAny"(arg0: $LivingEntity$Type): integer
public "getExp"(): long
get "level"(): integer
get "maxExp"(): long
get "str"(): string
get "exp"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DifficultyLevel$Type = ($DifficultyLevel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DifficultyLevel_ = $DifficultyLevel$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$BaseConfigType" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$PacketHandlerWithConfig, $PacketHandlerWithConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig"

export class $BaseConfigType<T extends $BaseConfig> {
readonly "cls": $Class<(T)>
readonly "id": string
readonly "parent": $PacketHandlerWithConfig


public "beforeReload"(): void
public "afterReload"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseConfigType$Type<T> = ($BaseConfigType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseConfigType_<T> = $BaseConfigType$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CurioItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)
constructor(arg0: $Item$Properties$Type, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioItem$Type = ($CurioItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioItem_ = $CurioItem$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/stacked/$CellEntry" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $CellEntry extends $Record {

constructor(x: integer, y: integer, w: integer, h: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "x"(): integer
public "h"(): integer
public "w"(): integer
public "y"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CellEntry$Type = ($CellEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CellEntry_ = $CellEntry$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/misc/$ExpItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$RankedItem, $RankedItem$Type} from "packages/dev/xkmc/l2artifacts/content/core/$RankedItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ExpItem extends $RankedItem {
readonly "rank": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpItem$Type = ($ExpItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpItem_ = $ExpItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactPredicate" {
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$GenericItemStack, $GenericItemStack$Type} from "packages/dev/xkmc/l2library/util/code/$GenericItemStack"

export interface $IArtifactPredicate<T> {

 "test"(arg0: $GenericItemStack$Type<($BaseArtifact$Type)>, arg1: T): boolean

(arg0: $GenericItemStack$Type<($BaseArtifact$Type)>, arg1: T): boolean
}

export namespace $IArtifactPredicate {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IArtifactPredicate$Type<T> = ($IArtifactPredicate<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IArtifactPredicate_<T> = $IArtifactPredicate$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/config/$GolemMaterialConfig$Builder" {
import {$GolemMaterialConfig, $GolemMaterialConfig$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemMaterialConfig"
import {$GolemStatType, $GolemStatType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemStatType"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $GolemMaterialConfig$Builder {


public "end"(): $GolemMaterialConfig
public "addStat"(arg0: $GolemStatType$Type, arg1: double): $GolemMaterialConfig$Builder
public "addModifier"(arg0: $GolemModifier$Type, arg1: integer): $GolemMaterialConfig$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemMaterialConfig$Builder$Type = ($GolemMaterialConfig$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemMaterialConfig$Builder_ = $GolemMaterialConfig$Builder$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/equipments/$MetalGolemArmorItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$GolemModelItem, $GolemModelItem$Type} from "packages/dev/xkmc/modulargolems/content/item/equipments/$GolemModelItem"
import {$GolemEquipmentItem, $GolemEquipmentItem$Type} from "packages/dev/xkmc/modulargolems/content/item/equipments/$GolemEquipmentItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export class $MetalGolemArmorItem extends $GolemEquipmentItem implements $GolemModelItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $ArmorItem$Type$Type, arg2: integer, arg3: float, arg4: $ResourceLocation$Type)

public "getModelTexture"(): $ResourceLocation
public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "getEnchantmentValue"(): integer
public "isEnchantable"(arg0: $ItemStack$Type): boolean
public "getModelPath"(): $ResourceLocation
get "modelTexture"(): $ResourceLocation
get "enchantmentValue"(): integer
get "modelPath"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalGolemArmorItem$Type = ($MetalGolemArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalGolemArmorItem_ = $MetalGolemArmorItem$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$BaseMacheteEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $BaseMacheteEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory


public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseMacheteEnchantment$Type = ($BaseMacheteEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseMacheteEnchantment_ = $BaseMacheteEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/consumable/$BookCopy" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BookCopy extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public static "cost"(arg0: $Enchantment$Type, arg1: integer): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookCopy$Type = ($BookCopy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookCopy_ = $BookCopy$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/curios/$CurioCompat" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntitySlotAccess, $EntitySlotAccess$Type} from "packages/dev/xkmc/l2hostility/compat/curios/$EntitySlotAccess"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CurioCompat {

constructor()

public static "decode"(arg0: string, arg1: $LivingEntity$Type): $EntitySlotAccess
public static "getItemAccess"(arg0: $LivingEntity$Type): $List<($EntitySlotAccess)>
public static "hasItemInCurioOrSlot"(arg0: $LivingEntity$Type, arg1: $Item$Type): boolean
public static "isSlotAdder"(arg0: $EntitySlotAccess$Type): boolean
public static "getItems"(arg0: $LivingEntity$Type, arg1: $Predicate$Type<($ItemStack$Type)>): $List<($ItemStack)>
public static "hasItemInCurio"(arg0: $LivingEntity$Type, arg1: $Item$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioCompat$Type = ($CurioCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioCompat_ = $CurioCompat$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeGolemModifier$AttrEntry, $AttributeGolemModifier$AttrEntry$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier$AttrEntry"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AttributeGolemModifier extends $GolemModifier {
readonly "entries": ($AttributeGolemModifier$AttrEntry)[]
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: integer, ...arg1: ($AttributeGolemModifier$AttrEntry$Type)[])

public "getDetail"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeGolemModifier$Type = ($AttributeGolemModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeGolemModifier_ = $AttributeGolemModifier$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$FleshAttack" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $FleshAttack extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FleshAttack$Type = ($FleshAttack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FleshAttack_ = $FleshAttack$Type;
}}
declare module "packages/dev/xkmc/l2library/util/math/$RenderUtils" {
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $RenderUtils {

constructor()

public static "renderItemAbove"(arg0: $ItemStack$Type, arg1: double, arg2: $Level$Type, arg3: float, arg4: $PoseStack$Type, arg5: $MultiBufferSource$Type, arg6: integer, arg7: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderUtils$Type = ($RenderUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderUtils_ = $RenderUtils$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$LCConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $LCConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCConfigGen$Type = ($LCConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCConfigGen_ = $LCConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2library/base/$L2Registrate$GenericBuilder" {
import {$AbstractBuilder, $AbstractBuilder$Type} from "packages/com/tterrag/registrate/builders/$AbstractBuilder"
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $L2Registrate$GenericBuilder<T extends $NamedEntry<(T)>, P extends T> extends $AbstractBuilder<(T), (P), ($L2Registrate), ($L2Registrate$GenericBuilder<(T), (P)>)> {


public "defaultLang"(): $L2Registrate$GenericBuilder<(T), (P)>
public static "of"<T>(arg0: $Supplier$Type<(T)>, arg1: $NonNullSupplier$Type<(string)>): $NonNullSupplier<(T)>
public static "of"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
public static "lazy"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Registrate$GenericBuilder$Type<T, P> = ($L2Registrate$GenericBuilder<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Registrate$GenericBuilder_<T, P> = $L2Registrate$GenericBuilder$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/modulargolems/compat/curio/$GolemCuriosListMenu" {
import {$BaseCuriosWrapper, $BaseCuriosWrapper$Type} from "packages/dev/xkmc/l2tabs/compat/$BaseCuriosWrapper"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseCuriosListMenu, $BaseCuriosListMenu$Type} from "packages/dev/xkmc/l2tabs/compat/$BaseCuriosListMenu"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"

export class $GolemCuriosListMenu extends $BaseCuriosListMenu<($GolemCuriosListMenu)> {
static readonly "MANAGER": ($SpriteManager)[]
readonly "curios": $BaseCuriosWrapper
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public static "fromNetwork"(arg0: $MenuType$Type<($GolemCuriosListMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $GolemCuriosListMenu
public "switchPage"(arg0: $ServerPlayer$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemCuriosListMenu$Type = ($GolemCuriosListMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemCuriosListMenu_ = $GolemCuriosListMenu$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$WindBottle" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$TooltipItem, $TooltipItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$TooltipItem"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $WindBottle extends $TooltipItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MutableComponent$Type)>)

public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WindBottle$Type = ($WindBottle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WindBottle_ = $WindBottle$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$AbyssAttackEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $AbyssAttackEffect extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type, arg2: $LinearFuncEntry$Type, arg3: integer)

public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbyssAttackEffect$Type = ($AbyssAttackEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbyssAttackEffect_ = $AbyssAttackEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/mode/$GolemModes" {
import {$GolemMode, $GolemMode$Type} from "packages/dev/xkmc/modulargolems/content/entity/mode/$GolemMode"
import {$List, $List$Type} from "packages/java/util/$List"

export class $GolemModes {
static readonly "LIST": $List<($GolemMode)>
static readonly "FOLLOW": $GolemMode
static readonly "GUARD": $GolemMode
static readonly "STAND": $GolemMode
static readonly "FREE_WANDER": $GolemMode
static readonly "SQUAD": $GolemMode
static readonly "ROUTE": $GolemMode

constructor()

public static "get"(arg0: integer): $GolemMode
public static "register"(): void
public static "nextMode"(arg0: $GolemMode$Type): $GolemMode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemModes$Type = ($GolemModes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemModes_ = $GolemModes$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$ConfigSyncToClient" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"

export class $ConfigSyncToClient extends $SerialPacketBase {
 "id": $UUID
 "color": integer
 "entry": $GolemConfigEntry

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $GolemConfigEntry$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigSyncToClient$Type = ($ConfigSyncToClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigSyncToClient_ = $ConfigSyncToClient$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$DaggerItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$GenericWeaponItem, $GenericWeaponItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$GenericWeaponItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $DaggerItem extends $GenericWeaponItem {
static readonly "RANGE": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getMultiplier"(arg0: $AttackCache$Type): float
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DaggerItem$Type = ($DaggerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DaggerItem_ = $DaggerItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$DeadCellDodge" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$PlayerOnlySetEffect, $PlayerOnlySetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PlayerOnlySetEffect"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $DeadCellDodge extends $PlayerOnlySetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerAttackedCancel"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeadCellDodge$Type = ($DeadCellDodge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeadCellDodge_ = $DeadCellDodge$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfDivinity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RingOfDivinity extends $CurioItem implements $ICurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "hasCurioCapability"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "canUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type, arg1: $ItemStack$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "writeSyncData"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public "writeSyncData"(arg0: $ItemStack$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: $ItemStack$Type): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "canEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type, arg2: $ItemStack$Type): boolean
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type, arg2: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RingOfDivinity$Type = ($RingOfDivinity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RingOfDivinity_ = $RingOfDivinity$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemMassSummonTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$GolemMassSummonTrigger, $GolemMassSummonTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemMassSummonTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $GolemMassSummonTrigger$Ins extends $BaseCriterionInstance<($GolemMassSummonTrigger$Ins), ($GolemMassSummonTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemMassSummonTrigger$Ins$Type = ($GolemMassSummonTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemMassSummonTrigger$Ins_ = $GolemMassSummonTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/path/$PathConfigScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$PathConfigMenu, $PathConfigMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/path/$PathConfigMenu"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$GhostItemScreen, $GhostItemScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$GhostItemScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $PathConfigScreen extends $GhostItemScreen<($PathConfigMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $PathConfigMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathConfigScreen$Type = ($PathConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathConfigScreen_ = $PathConfigScreen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/$RecipeGen" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InventoryChangeTrigger$TriggerInstance, $InventoryChangeTrigger$TriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$InventoryChangeTrigger$TriggerInstance"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"

export class $RecipeGen {

constructor()

public static "unlock"<T>(arg0: $RegistrateRecipeProvider$Type, arg1: $BiFunction$Type<(string), ($InventoryChangeTrigger$TriggerInstance$Type), (T)>, arg2: $Item$Type): T
public static "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeGen$Type = ($RecipeGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeGen_ = $RecipeGen$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$WeaponConfig$ItemConfig" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $WeaponConfig$ItemConfig extends $Record {

constructor(stack: $ArrayList$Type<($ItemStack$Type)>, level: integer, weight: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ArrayList<($ItemStack)>
public "level"(): integer
public "weight"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeaponConfig$ItemConfig$Type = ($WeaponConfig$ItemConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeaponConfig$ItemConfig_ = $WeaponConfig$ItemConfig$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/core/$ArtifactStats" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$StatEntry, $StatEntry$Type} from "packages/dev/xkmc/l2artifacts/content/core/$StatEntry"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Upgrade, $Upgrade$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$Upgrade"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ArtifactSlot, $ArtifactSlot$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ArtifactStats {
 "slot": $ArtifactSlot
 "rank": integer
 "level": integer
 "exp": integer
 "old_level": integer
 "main_stat": $StatEntry
 "sub_stats": $ArrayList<($StatEntry)>
readonly "map": $Map<($ResourceLocation), ($StatEntry)>

constructor(arg0: $ArtifactSlot$Type, arg1: integer)
/**
 * 
 * @deprecated
 */
constructor()

public "add"(arg0: $ResourceLocation$Type, arg1: double): void
public "add"(arg0: $StatEntry$Type): void
public static "generate"(arg0: $ArtifactSlot$Type, arg1: integer, arg2: $Upgrade$Type, arg3: $RandomSource$Type): $ArtifactStats
public "addExp"(arg0: integer, arg1: $RandomSource$Type): void
public "onInject"(): void
public "buildAttributes"(arg0: string): $Multimap<($Attribute), ($AttributeModifier)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactStats$Type = ($ArtifactStats);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactStats_ = $ArtifactStats$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilitySerializer" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$PlayerCapabilityHolder, $PlayerCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerCapabilityTemplate, $PlayerCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$GeneralCapabilityTemplate, $GeneralCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityTemplate"
import {$GeneralCapabilityHolder, $GeneralCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityHolder"
import {$GeneralCapabilitySerializer, $GeneralCapabilitySerializer$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilitySerializer"

export class $PlayerCapabilitySerializer<C extends $PlayerCapabilityTemplate<(C)>> extends $GeneralCapabilitySerializer<($Player), (C)> {
readonly "player": $Player
readonly "level": $Level
readonly "holder": $GeneralCapabilityHolder<(E), (C)>
 "handler": C
 "lo": $LazyOptional<(C)>

constructor(arg0: $Player$Type, arg1: $PlayerCapabilityHolder$Type<(C)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerCapabilitySerializer$Type<C> = ($PlayerCapabilitySerializer<(C)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerCapabilitySerializer_<C> = $PlayerCapabilitySerializer$Type<(C)>;
}}
declare module "packages/dev/xkmc/l2complements/events/$ClientEventHandler" {
import {$GenericKeyEvent, $GenericKeyEvent$Type} from "packages/dev/xkmc/l2itemselector/events/$GenericKeyEvent"
import {$RenderBlockScreenEffectEvent, $RenderBlockScreenEffectEvent$Type} from "packages/net/minecraftforge/client/event/$RenderBlockScreenEffectEvent"
import {$ItemTooltipEvent, $ItemTooltipEvent$Type} from "packages/net/minecraftforge/event/entity/player/$ItemTooltipEvent"

export class $ClientEventHandler {

constructor()

public static "onScreenEffect"(arg0: $RenderBlockScreenEffectEvent$Type): void
public static "onInput"(arg0: $GenericKeyEvent$Type): void
public static "modifyItemTooltip"(arg0: $ItemTooltipEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEventHandler$Type = ($ClientEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEventHandler_ = $ClientEventHandler$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/insert/$CapInsertItem" {
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$OverlayInsertItem, $OverlayInsertItem$Type} from "packages/dev/xkmc/l2backpack/content/insert/$OverlayInsertItem"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export interface $CapInsertItem extends $OverlayInsertItem {

 "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
 "isValidContent"(arg0: $ItemStack$Type): boolean
 "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
 "getInvCap"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $IItemHandler
 "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
 "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
 "mayClientTake"(): boolean
 "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
}

export namespace $CapInsertItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapInsertItem$Type = ($CapInsertItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapInsertItem_ = $CapInsertItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/client/override/$ModelOverride" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ModelOverride {
static readonly "DEFAULT": $ModelOverride

constructor()

public "getTexture"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $ResourceLocation$Type): $ResourceLocation
public static "texturePredicate"(arg0: $Function$Type<($AbstractGolemEntity$Type<(any), (any)>), (string)>): $ModelOverride
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelOverride$Type = ($ModelOverride);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelOverride_ = $ModelOverride$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$TFHealingModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$GolemModifier$HealingContext, $GolemModifier$HealingContext$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier$HealingContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TFHealingModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onInventoryHealTick"(arg0: double, arg1: $GolemModifier$HealingContext$Type, arg2: integer): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TFHealingModifier$Type = ($TFHealingModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TFHealingModifier_ = $TFHealingModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/$EffectProperties" {
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"

export class $EffectProperties {
 "ambient": boolean
 "visible": boolean
 "showIcon": boolean

constructor()

public "set"(arg0: $MobEffectInstance$Type): $MobEffectInstance
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectProperties$Type = ($EffectProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectProperties_ = $EffectProperties$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$LWTieredItem" {
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$GenericTieredItem, $GenericTieredItem$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericTieredItem"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $LWTieredItem extends $GenericTieredItem {

 "getMultiplier"(arg0: $AttackCache$Type): float
 "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
 "isSharp"(): boolean
 "isHeavy"(): boolean
 "getExtraConfig"(): $ExtraToolConfig

(arg0: $AttackCache$Type): float
}

export namespace $LWTieredItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWTieredItem$Type = ($LWTieredItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWTieredItem_ = $LWTieredItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/registrate/$LHBlocks" {
import {$HostilityBeaconMenu, $HostilityBeaconMenu$Type} from "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconMenu"
import {$BlockEntry, $BlockEntry$Type} from "packages/com/tterrag/registrate/util/entry/$BlockEntry"
import {$HostilityBeaconBlock, $HostilityBeaconBlock$Type} from "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconBlock"
import {$MenuEntry, $MenuEntry$Type} from "packages/com/tterrag/registrate/util/entry/$MenuEntry"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$HostilityBeaconBlockEntity, $HostilityBeaconBlockEntity$Type} from "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconBlockEntity"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$DelegateBlock, $DelegateBlock$Type} from "packages/dev/xkmc/l2modularblock/$DelegateBlock"
import {$BurstSpawnerBlockEntity, $BurstSpawnerBlockEntity$Type} from "packages/dev/xkmc/l2hostility/content/item/spawner/$BurstSpawnerBlockEntity"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockEntityEntry, $BlockEntityEntry$Type} from "packages/com/tterrag/registrate/util/entry/$BlockEntityEntry"

export class $LHBlocks {
static readonly "TAB": $RegistryEntry<($CreativeModeTab)>
static readonly "CHAOS": $BlockEntry<($Block)>
static readonly "MIRACLE": $BlockEntry<($Block)>
static readonly "BURST_SPAWNER": $BlockEntry<($DelegateBlock)>
static readonly "BE_BURST": $BlockEntityEntry<($BurstSpawnerBlockEntity)>
static readonly "HOSTILITY_BEACON": $BlockEntry<($HostilityBeaconBlock)>
static readonly "BE_BEACON": $BlockEntityEntry<($HostilityBeaconBlockEntity)>
static readonly "MT_BEACON": $MenuEntry<($HostilityBeaconMenu)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHBlocks$Type = ($LHBlocks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHBlocks_ = $LHBlocks$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/ars/$ArsFinished" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$ArsRecipeBuilder, $ArsRecipeBuilder$Type} from "packages/dev/xkmc/l2complements/compat/ars/$ArsRecipeBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $ArsFinished extends $Record implements $FinishedRecipe {

constructor(builder: $ArsRecipeBuilder$Type, id: $ResourceLocation$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "builder"(): $ArsRecipeBuilder
public "id"(): $ResourceLocation
public "serializeRecipeData"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "getAdvancementId"(): $ResourceLocation
public "getId"(): $ResourceLocation
public "serializeAdvancement"(): $JsonObject
public "serializeRecipe"(): $JsonObject
get "type"(): $RecipeSerializer<(any)>
get "advancementId"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArsFinished$Type = ($ArsFinished);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArsFinished_ = $ArsFinished$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemHotFixTrigger$Ins" {
import {$GolemHotFixTrigger, $GolemHotFixTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemHotFixTrigger"
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $GolemHotFixTrigger$Ins extends $BaseCriterionInstance<($GolemHotFixTrigger$Ins), ($GolemHotFixTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemHotFixTrigger$Ins$Type = ($GolemHotFixTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemHotFixTrigger$Ins_ = $GolemHotFixTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2hostility/events/$LHAttackListener" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$PlayerAttackCache, $PlayerAttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$PlayerAttackCache"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$AttackListener, $AttackListener$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackListener"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $LHAttackListener implements $AttackListener {

constructor()

public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onCreateSource"(arg0: $CreateSourceEvent$Type): void
public "onAttack"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onPlayerAttack"(arg0: $PlayerAttackCache$Type): void
public "onCriticalHit"(arg0: $PlayerAttackCache$Type, arg1: $CriticalHitEvent$Type): boolean
public "postHurt"(arg0: $AttackCache$Type, arg1: $LivingHurtEvent$Type, arg2: $ItemStack$Type): void
public "onDamageFinalized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "setupProfile"(arg0: $AttackCache$Type, arg1: $BiConsumer$Type<($LivingEntity$Type), ($ItemStack$Type)>): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "postAttack"(arg0: $AttackCache$Type, arg1: $LivingAttackEvent$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHAttackListener$Type = ($LHAttackListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHAttackListener_ = $LHAttackListener$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/registrate/$BackpackMisc" {
import {$BackpackUpgradeRecipe, $BackpackUpgradeRecipe$Type} from "packages/dev/xkmc/l2backpack/content/recipe/$BackpackUpgradeRecipe"
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$DrawerUpgradeRecipe, $DrawerUpgradeRecipe$Type} from "packages/dev/xkmc/l2backpack/content/recipe/$DrawerUpgradeRecipe"
import {$AbstractShapedRecipe$Serializer, $AbstractShapedRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe$Serializer"
import {$BackpackDyeRecipe, $BackpackDyeRecipe$Type} from "packages/dev/xkmc/l2backpack/content/recipe/$BackpackDyeRecipe"
import {$AbstractSmithingRecipe$Serializer, $AbstractSmithingRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe$Serializer"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$MultiSwitchCraftRecipe, $MultiSwitchCraftRecipe$Type} from "packages/dev/xkmc/l2backpack/content/recipe/$MultiSwitchCraftRecipe"
import {$DimensionItemSource, $DimensionItemSource$Type} from "packages/dev/xkmc/l2backpack/content/restore/$DimensionItemSource"
import {$BackpackLootModifier, $BackpackLootModifier$Type} from "packages/dev/xkmc/l2backpack/init/loot/$BackpackLootModifier"
import {$AbstractShapelessRecipe$Serializer, $AbstractShapelessRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe$Serializer"
import {$DimensionTrace, $DimensionTrace$Type} from "packages/dev/xkmc/l2backpack/content/restore/$DimensionTrace"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$BackpackTrace, $BackpackTrace$Type} from "packages/dev/xkmc/l2backpack/content/restore/$BackpackTrace"

export class $BackpackMisc {
static readonly "RSC_BAG_DYE": $RegistryEntry<($AbstractShapelessRecipe$Serializer<($BackpackDyeRecipe)>)>
static readonly "RSC_BAG_UPGRADE": $RegistryEntry<($AbstractSmithingRecipe$Serializer<($BackpackUpgradeRecipe)>)>
static readonly "RSC_DRAWER_UPGRADE": $RegistryEntry<($AbstractSmithingRecipe$Serializer<($DrawerUpgradeRecipe)>)>
static readonly "RSC_BAG_CRAFT": $RegistryEntry<($AbstractShapedRecipe$Serializer<($MultiSwitchCraftRecipe)>)>
static readonly "SER": $RegistryEntry<($Codec<($BackpackLootModifier)>)>
static readonly "IS_DIM": $RegistryEntry<($DimensionItemSource)>
static readonly "TE_DIM": $RegistryEntry<($DimensionTrace)>
static readonly "TE_BAG": $RegistryEntry<($BackpackTrace)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
public static "commonSetup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackMisc$Type = ($BackpackMisc);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackMisc_ = $BackpackMisc$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$UpgradeApplyTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$UpgradeApplyTrigger, $UpgradeApplyTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$UpgradeApplyTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $UpgradeApplyTrigger$Ins extends $BaseCriterionInstance<($UpgradeApplyTrigger$Ins), ($UpgradeApplyTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeApplyTrigger$Ins$Type = ($UpgradeApplyTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeApplyTrigger$Ins_ = $UpgradeApplyTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier$Type$Start" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $DamageModifier$Type$Start {

 "start"(arg0: float): float

(arg0: float): float
}

export namespace $DamageModifier$Type$Start {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageModifier$Type$Start$Type = ($DamageModifier$Type$Start);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageModifier$Type$Start_ = $DamageModifier$Type$Start$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/core/$IGolemPart" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $IGolemPart<P extends $IGolemPart<(P)>> {

 "ordinal"(): integer
 "getDesc"(arg0: $MutableComponent$Type): $MutableComponent
 "setupItemRender"(arg0: $PoseStack$Type, arg1: $ItemDisplayContext$Type, arg2: P): void
 "toItem"(): $GolemPart<(any), (P)>
}

export namespace $IGolemPart {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IGolemPart$Type<P> = ($IGolemPart<(P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IGolemPart_<P> = $IGolemPart$Type<(P)>;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$TextBox" {
import {$Vector2ic, $Vector2ic$Type} from "packages/org/joml/$Vector2ic"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$OverlayUtil, $OverlayUtil$Type} from "packages/dev/xkmc/l2library/base/overlay/$OverlayUtil"

export class $TextBox extends $OverlayUtil {
 "bg": integer
 "bs": integer
 "be": integer
 "tc": integer

constructor(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer)

public "positionTooltip"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer): $Vector2ic
public "getMaxWidth"(): integer
get "maxWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextBox$Type = ($TextBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextBox_ = $TextBox$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$BannableEnchantment" {
import {$ImmuneEnchantment, $ImmuneEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$ImmuneEnchantment"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $BannableEnchantment extends $ImmuneEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, ...arg2: ($EquipmentSlot$Type)[])

public "getFullname"(arg0: integer): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BannableEnchantment$Type = ($BannableEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BannableEnchantment_ = $BannableEnchantment$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/jei/$GuiProperties" {
import {$ImmutableRect2i, $ImmutableRect2i$Type} from "packages/mezz/jei/common/util/$ImmutableRect2i"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$IGuiProperties, $IGuiProperties$Type} from "packages/mezz/jei/api/gui/handlers/$IGuiProperties"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $GuiProperties implements $IGuiProperties {

constructor(arg0: $Class$Type<(any)>, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer)

public static "create"(arg0: $AbstractContainerScreen$Type<(any)>): $GuiProperties
public static "areEqual"(arg0: $IGuiProperties$Type, arg1: $IGuiProperties$Type): boolean
public "getScreenWidth"(): integer
public "getScreenHeight"(): integer
public "getScreenClass"(): $Class<(any)>
public "getGuiXSize"(): integer
public "getGuiYSize"(): integer
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public static "getScreenRectangle"(arg0: $IGuiProperties$Type): $ImmutableRect2i
public static "getGuiRight"(arg0: $IGuiProperties$Type): integer
public static "getGuiBottom"(arg0: $IGuiProperties$Type): integer
public static "getGuiRectangle"(arg0: $IGuiProperties$Type): $ImmutableRect2i
get "screenWidth"(): integer
get "screenHeight"(): integer
get "screenClass"(): $Class<(any)>
get "guiXSize"(): integer
get "guiYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuiProperties$Type = ($GuiProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuiProperties_ = $GuiProperties$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$SimpleStorageMenuPvd" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$StorageContainer, $StorageContainer$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$StorageContainer"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $SimpleStorageMenuPvd extends $Record implements $MenuProvider {

constructor(comp: $Component$Type, cont: $StorageContainer$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "comp"(): $Component
public "getDisplayName"(): $Component
public "cont"(): $StorageContainer
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleStorageMenuPvd$Type = ($SimpleStorageMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleStorageMenuPvd_ = $SimpleStorageMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/upgrades/$Upgrade" {
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Upgrade$Type, $Upgrade$Type$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$Upgrade$Type"

export class $Upgrade {
 "main": integer
 "sub": integer
 "stats": $ArrayList<($ResourceLocation)>

constructor()

public "add"(arg0: $Upgrade$Type$Type): void
public "removeMain"(): boolean
public "removeSub"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Upgrade$Type = ($Upgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Upgrade_ = $Upgrade$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/conditionals/$TokenToClient" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ConditionalToken, $ConditionalToken$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$ConditionalToken"
import {$TokenKey, $TokenKey$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$TokenKey"

export class $TokenToClient extends $SerialPacketBase {
 "id": $ResourceLocation
 "token": $ConditionalToken

constructor(arg0: $ResourceLocation$Type, arg1: $ConditionalToken$Type)
/**
 * 
 * @deprecated
 */
constructor()

public static "of"<T extends $ConditionalToken>(arg0: $TokenKey$Type<(T)>, arg1: T): $TokenToClient
public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TokenToClient$Type = ($TokenToClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TokenToClient_ = $TokenToClient$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/curios/$CurioSlotBuilder" {
import {$CurioSlotBuilder$Operation, $CurioSlotBuilder$Operation$Type} from "packages/dev/xkmc/l2library/compat/curios/$CurioSlotBuilder$Operation"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$SlotCondition, $SlotCondition$Type} from "packages/dev/xkmc/l2library/compat/curios/$SlotCondition"

export class $CurioSlotBuilder extends $Record {

constructor(order: integer, icon: string, size: integer, operation: $CurioSlotBuilder$Operation$Type, add_cosmetic: boolean, use_native_gui: boolean, render_toggle: boolean, replace: boolean, conditions: $ArrayList$Type<($SlotCondition$Type)>)
constructor(arg0: integer, arg1: string, arg2: integer, arg3: $CurioSlotBuilder$Operation$Type)
constructor(arg0: integer, arg1: string)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "replace"(): boolean
public "size"(): integer
public "order"(): integer
public "operation"(): $CurioSlotBuilder$Operation
public "icon"(): string
public "conditions"(): $ArrayList<($SlotCondition)>
public "add_cosmetic"(): boolean
public "render_toggle"(): boolean
public "use_native_gui"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioSlotBuilder$Type = ($CurioSlotBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioSlotBuilder_ = $CurioSlotBuilder$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/patchouli/$PatchouliHelper" {
import {$ProviderType, $ProviderType$Type} from "packages/com/tterrag/registrate/providers/$ProviderType"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$LootTable$Builder, $LootTable$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable$Builder"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ShapelessPatchouliBuilder, $ShapelessPatchouliBuilder$Type} from "packages/dev/xkmc/l2library/compat/patchouli/$ShapelessPatchouliBuilder"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$PatchouliProvider, $PatchouliProvider$Type} from "packages/dev/xkmc/l2library/compat/patchouli/$PatchouliProvider"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$ShapedPatchouliBuilder, $ShapedPatchouliBuilder$Type} from "packages/dev/xkmc/l2library/compat/patchouli/$ShapedPatchouliBuilder"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"

export class $PatchouliHelper {
static readonly "PATCHOULI": $ProviderType<($PatchouliProvider)>

constructor(arg0: $L2Registrate$Type, arg1: string)

public static "getBook"(arg0: $ResourceLocation$Type): $ItemStack
public "buildModel"(arg0: string): $PatchouliHelper
public "buildModel"(): $PatchouliHelper
public "buildBook"(arg0: string, arg1: string, arg2: integer, arg3: $ResourceKey$Type<($CreativeModeTab$Type)>): $PatchouliHelper
public "buildShapedRecipe"(arg0: $Consumer$Type<($ShapedPatchouliBuilder$Type)>, arg1: $Supplier$Type<($Item$Type)>): $PatchouliHelper
public static "getBookLoot"(arg0: $ResourceLocation$Type): $LootTable$Builder
public "buildShapelessRecipe"(arg0: $Consumer$Type<($ShapelessPatchouliBuilder$Type)>, arg1: $Supplier$Type<($Item$Type)>): $PatchouliHelper
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatchouliHelper$Type = ($PatchouliHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatchouliHelper_ = $PatchouliHelper$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/highlevel/$SplitTrait" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$InheritContext, $InheritContext$Type} from "packages/dev/xkmc/l2hostility/content/logic/$InheritContext"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SplitTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "allow"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer): boolean
public "inherited"(arg0: $MobTraitCap$Type, arg1: integer, arg2: $InheritContext$Type): integer
public "onDeath"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingDeathEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SplitTrait$Type = ($SplitTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SplitTrait_ = $SplitTrait$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$EnderJavelin" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$JavelinItem, $JavelinItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$JavelinItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $EnderJavelin extends $JavelinItem implements $LegendaryWeapon {
static readonly "RANGE": $AttributeModifier
static readonly "REACH": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onHitBlock"(arg0: $BaseThrownWeaponEntity$Type<(any)>, arg1: $ItemStack$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "thunderHit"(arg0: $BaseThrownWeaponEntity$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderJavelin$Type = ($EnderJavelin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderJavelin_ = $EnderJavelin$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/entity/$JavelinEntity" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$IntOpenHashSet, $IntOpenHashSet$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntOpenHashSet"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractArrow$Pickup, $AbstractArrow$Pickup$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow$Pickup"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $JavelinEntity extends $BaseThrownWeaponEntity<($JavelinEntity)> {
 "remainingHit": integer
 "clientSideReturnTridentTickCount": integer
 "slot": integer
 "waterInertia": float
 "targetCache": $Entity
 "pickup": $AbstractArrow$Pickup
 "shakeTime": integer
 "piercingIgnoreEntityIds": $IntOpenHashSet
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<($JavelinEntity$Type)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JavelinEntity$Type = ($JavelinEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JavelinEntity_ = $JavelinEntity$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$PacketHandler" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$BasePacketHandler$LoadedPacket, $BasePacketHandler$LoadedPacket$Type} from "packages/dev/xkmc/l2serial/network/$BasePacketHandler$LoadedPacket"
import {$BasePacketHandler, $BasePacketHandler$Type} from "packages/dev/xkmc/l2serial/network/$BasePacketHandler"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"
import {$SimpleChannel, $SimpleChannel$Type} from "packages/net/minecraftforge/network/simple/$SimpleChannel"

export class $PacketHandler extends $BasePacketHandler {
readonly "CHANNEL_NAME": $ResourceLocation
readonly "NETWORK_VERSION": integer
readonly "NETWORK_VERSION_STR": string
 "channel": $SimpleChannel

constructor(arg0: $ResourceLocation$Type, arg1: integer, ...arg2: ($Function$Type<($BasePacketHandler$Type), ($BasePacketHandler$LoadedPacket$Type<(any)>)>)[])

public static "setup"(arg0: $FMLCommonSetupEvent$Type): void
set "up"(value: $FMLCommonSetupEvent$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketHandler$Type = ($PacketHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketHandler_ = $PacketHandler$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$IExtendedRecipe" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"

export interface $IExtendedRecipe {

 "addAdditional"(arg0: $JsonObject$Type): void
 "getType"(): $RecipeSerializer<(any)>
}

export namespace $IExtendedRecipe {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IExtendedRecipe$Type = ($IExtendedRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IExtendedRecipe_ = $IExtendedRecipe$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$BackpackModel" {
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BackpackModel<T extends $LivingEntity> extends $HumanoidModel<(T)> {
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "setupAnim"(arg0: T, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackModel$Type<T> = ($BackpackModel<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackModel_<T> = $BackpackModel$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/common/$GravityTrait" {
import {$AuraEffectTrait, $AuraEffectTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/common/$AuraEffectTrait"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $GravityTrait extends $AuraEffectTrait {

constructor(arg0: $Supplier$Type<($MobEffect$Type)>)

public "onDamaged"(arg0: integer, arg1: $LivingEntity$Type, arg2: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GravityTrait$Type = ($GravityTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GravityTrait_ = $GravityTrait$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/loot/$MobCapLootCondition" {
import {$LootContextParam, $LootContextParam$Type} from "packages/net/minecraft/world/level/storage/loot/parameters/$LootContextParam"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$ValidationContext, $ValidationContext$Type} from "packages/net/minecraft/world/level/storage/loot/$ValidationContext"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"

export class $MobCapLootCondition implements $LootItemCondition {
 "minLevel": integer
 "maxLevel": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: integer)

public "test"(arg0: $LootContext$Type): boolean
public "getType"(): $LootItemConditionType
public "validate"(arg0: $ValidationContext$Type): void
public "getReferencedContextParams"(): $Set<($LootContextParam<(any)>)>
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public "negate"(): $Predicate<($LootContext)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "isEqual"<T>(arg0: any): $Predicate<($LootContext)>
public "applyLootHandler"(context: $LootContext$Type, loot: $List$Type<($ItemStack$Type)>): boolean
get "type"(): $LootItemConditionType
get "referencedContextParams"(): $Set<($LootContextParam<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobCapLootCondition$Type = ($MobCapLootCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobCapLootCondition_ = $MobCapLootCondition$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/$XEnchCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $XEnchCompat {

constructor()

public static "onInit"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XEnchCompat$Type = ($XEnchCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XEnchCompat_ = $XEnchCompat$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/loot/$PlayerHasItemCondition" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LootContextParam, $LootContextParam$Type} from "packages/net/minecraft/world/level/storage/loot/parameters/$LootContextParam"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$ValidationContext, $ValidationContext$Type} from "packages/net/minecraft/world/level/storage/loot/$ValidationContext"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"

export class $PlayerHasItemCondition implements $LootItemCondition {
 "item": $Item

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $Item$Type)

public "test"(arg0: $LootContext$Type): boolean
public "getType"(): $LootItemConditionType
public "validate"(arg0: $ValidationContext$Type): void
public "getReferencedContextParams"(): $Set<($LootContextParam<(any)>)>
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public "negate"(): $Predicate<($LootContext)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "isEqual"<T>(arg0: any): $Predicate<($LootContext)>
public "applyLootHandler"(context: $LootContext$Type, loot: $List$Type<($ItemStack$Type)>): boolean
get "type"(): $LootItemConditionType
get "referencedContextParams"(): $Set<($LootContextParam<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerHasItemCondition$Type = ($PlayerHasItemCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerHasItemCondition_ = $PlayerHasItemCondition$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfReflection" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RingOfReflection extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "reflectTrait"(arg0: $MobTrait$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RingOfReflection$Type = ($RingOfReflection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RingOfReflection_ = $RingOfReflection$Type;
}}
declare module "packages/dev/xkmc/l2backpack/compat/$MouseTweakCompat$Click" {
import {$MouseButton, $MouseButton$Type} from "packages/yalter/mousetweaks/$MouseButton"

export interface $MouseTweakCompat$Click {

 "click"(arg0: $MouseButton$Type): void

(arg0: $MouseButton$Type): void
}

export namespace $MouseTweakCompat$Click {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MouseTweakCompat$Click$Type = ($MouseTweakCompat$Click);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MouseTweakCompat$Click_ = $MouseTweakCompat$Click$Type;
}}
declare module "packages/dev/xkmc/l2hostility/events/$ClientGlowingHandler" {
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClientGlowingHandler {

constructor()

public static "getColor"(arg0: $Entity$Type): integer
public static "isGlowing"(arg0: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientGlowingHandler$Type = ($ClientGlowingHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientGlowingHandler_ = $ClientGlowingHandler$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$MenuLayoutConfig, $MenuLayoutConfig$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig"

export class $SpriteManager extends $Record {

constructor(modid: string, path: string)

public "get"(): $MenuLayoutConfig
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "path"(): string
public "modid"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpriteManager$Type = ($SpriteManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpriteManager_ = $SpriteManager$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/jeed/$JeedDataGenerator" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $JeedDataGenerator {

constructor(arg0: string, ...arg1: (string)[])

public "add"(arg0: $Ingredient$Type, ...arg1: ($MobEffect$Type)[]): void
public "add"(arg0: $Item$Type, ...arg1: ($MobEffect$Type)[]): void
public "generate"(arg0: $RegistrateRecipeProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JeedDataGenerator$Type = ($JeedDataGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JeedDataGenerator_ = $JeedDataGenerator$Type;
}}
declare module "packages/dev/xkmc/l2tabs/compat/$BaseCuriosListMenu" {
import {$BaseCuriosWrapper, $BaseCuriosWrapper$Type} from "packages/dev/xkmc/l2tabs/compat/$BaseCuriosWrapper"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $BaseCuriosListMenu<T extends $BaseContainerMenu<(T)>> extends $BaseContainerMenu<(T)> {
static readonly "MANAGER": ($SpriteManager)[]
readonly "curios": $BaseCuriosWrapper
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public "switchPage"(arg0: $ServerPlayer$Type, arg1: integer): void
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseCuriosListMenu$Type<T> = ($BaseCuriosListMenu<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseCuriosListMenu_<T> = $BaseCuriosListMenu$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/util/code/$GenericItemStack" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $GenericItemStack<I extends $Item> extends $Record {

constructor(item: I, stack: $ItemStack$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"<T extends $Item>(arg0: $ItemStack$Type): $GenericItemStack<(T)>
public static "from"<T extends $Item>(arg0: T): $GenericItemStack<(T)>
public "stack"(): $ItemStack
public "item"(): I
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericItemStack$Type<I> = ($GenericItemStack<(I)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericItemStack_<I> = $GenericItemStack$Type<(I)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/tool/$WitchWand" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WitchWand extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WitchWand$Type = ($WitchWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WitchWand_ = $WitchWand$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/gateway/$PlaceboCodecDataGen" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$DataProvider, $DataProvider$Type} from "packages/net/minecraft/data/$DataProvider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$CodecProvider, $CodecProvider$Type} from "packages/dev/shadowsoffire/placebo/codec/$CodecProvider"

export class $PlaceboCodecDataGen<T extends $CodecProvider<(T)>> implements $DataProvider {

constructor(arg0: $DataGenerator$Type, arg1: string)

public "add"(arg0: $BiConsumer$Type<(string), (T)>): void
public "run"(arg0: $CachedOutput$Type): $CompletableFuture<(any)>
public "getName"(): string
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaceboCodecDataGen$Type<T> = ($PlaceboCodecDataGen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaceboCodecDataGen_<T> = $PlaceboCodecDataGen$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$BaseBagInvWrapper" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MergedInvBackpackCap, $MergedInvBackpackCap$Type} from "packages/dev/xkmc/l2backpack/content/capability/$MergedInvBackpackCap"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $BaseBagInvWrapper extends $MergedInvBackpackCap implements $ICapabilityProvider {

constructor(arg0: $ItemStack$Type)

public "getSignature"(): integer
public "attachEnv"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>): void
public "getPickupMode"(): $PickupConfig
public "getSlots"(): integer
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
public static "register"(): void
get "signature"(): integer
get "pickupMode"(): $PickupConfig
get "slots"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseBagInvWrapper$Type = ($BaseBagInvWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseBagInvWrapper_ = $BaseBagInvWrapper$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$LWConfig" {
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$LWConfig$Common, $LWConfig$Common$Type} from "packages/dev/xkmc/l2weaponry/init/data/$LWConfig$Common"
import {$LWConfig$Client, $LWConfig$Client$Type} from "packages/dev/xkmc/l2weaponry/init/data/$LWConfig$Client"

export class $LWConfig {
static readonly "CLIENT_SPEC": $ForgeConfigSpec
static readonly "CLIENT": $LWConfig$Client
static readonly "COMMON_SPEC": $ForgeConfigSpec
static readonly "COMMON": $LWConfig$Common

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWConfig$Type = ($LWConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWConfig_ = $LWConfig$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/blazegear/$BlazeAttackGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $BlazeAttackGoal extends $Goal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer)

public "canUse"(): boolean
public "start"(): void
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlazeAttackGoal$Type = ($BlazeAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlazeAttackGoal_ = $BlazeAttackGoal$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/api/$FirstPlayerRenderEffect" {
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"

export interface $FirstPlayerRenderEffect {

 "onClientLevelRender"(arg0: $AbstractClientPlayer$Type, arg1: $MobEffectInstance$Type): void

(arg0: $AbstractClientPlayer$Type, arg1: $MobEffectInstance$Type): void
}

export namespace $FirstPlayerRenderEffect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FirstPlayerRenderEffect$Type = ($FirstPlayerRenderEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FirstPlayerRenderEffect_ = $FirstPlayerRenderEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/client/override/$ModelOverrides" {
import {$ModelOverride, $ModelOverride$Type} from "packages/dev/xkmc/modulargolems/content/client/override/$ModelOverride"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ModelOverrides {

constructor()

public static "registerOverride"(arg0: $ResourceLocation$Type, arg1: $ModelOverride$Type): void
public static "getOverride"(arg0: $ResourceLocation$Type): $ModelOverride
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelOverrides$Type = ($ModelOverrides);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelOverrides_ = $ModelOverrides$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/ingredients/$EnchantmentIngredient" {
import {$Ingredient$Value, $Ingredient$Value$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient$Value"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$IntList, $IntList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntList"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$BaseIngredient, $BaseIngredient$Type} from "packages/dev/xkmc/l2library/serial/ingredients/$BaseIngredient"
import {$BaseIngredient$Serializer, $BaseIngredient$Serializer$Type} from "packages/dev/xkmc/l2library/serial/ingredients/$BaseIngredient$Serializer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $EnchantmentIngredient extends $BaseIngredient<($EnchantmentIngredient)> {
static readonly "INSTANCE": $BaseIngredient$Serializer<($EnchantmentIngredient)>
 "enchantment": $Enchantment
 "min_level": integer
static readonly "EMPTY": $Ingredient
 "values": ($Ingredient$Value)[]
 "itemStacks": ($ItemStack)[]
 "stackingIds": $IntList

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $Enchantment$Type, arg1: integer)

public "test"(arg0: $ItemStack$Type): boolean
public "getSerializer"(): $BaseIngredient$Serializer<($EnchantmentIngredient)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<(T)>
public static "isEqual"<T>(arg0: any): $Predicate<(T)>
get "serializer"(): $BaseIngredient$Serializer<($EnchantmentIngredient)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentIngredient$Type = ($EnchantmentIngredient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentIngredient_ = $EnchantmentIngredient$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$HostilityDamageState" {
import {$DamageState, $DamageState$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageState"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TreeSet, $TreeSet$Type} from "packages/java/util/$TreeSet"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $HostilityDamageState extends $Enum<($HostilityDamageState)> implements $DamageState {
static readonly "BYPASS_COOLDOWN": $HostilityDamageState


public static "values"(): ($HostilityDamageState)[]
public static "valueOf"(arg0: string): $HostilityDamageState
public "getId"(): $ResourceLocation
public "removeTags"(arg0: $Consumer$Type<($TagKey$Type<($DamageType$Type)>)>): void
public "gatherTags"(arg0: $Consumer$Type<($TagKey$Type<($DamageType$Type)>)>): void
public "overrides"(arg0: $DamageState$Type): boolean
public static "newSet"(): $TreeSet<($DamageState)>
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityDamageState$Type = (("bypass_cooldown")) | ($HostilityDamageState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityDamageState_ = $HostilityDamageState$Type;
}}
declare module "packages/dev/xkmc/l2library/util/nbt/$ItemListTag" {
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$ItemCompoundTag, $ItemCompoundTag$Type} from "packages/dev/xkmc/l2library/util/nbt/$ItemCompoundTag"

export class $ItemListTag {


public "clear"(): void
public "isPresent"(): boolean
public "getOrCreate"(): $ListTag
public "setTag"(arg0: $ListTag$Type): void
public "addCompound"(): $ItemCompoundTag
get "present"(): boolean
get "orCreate"(): $ListTag
set "tag"(value: $ListTag$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemListTag$Type = ($ItemListTag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemListTag_ = $ItemListTag$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/entity/fireball/$StrongFireball" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BaseFireball, $BaseFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$BaseFireball"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $StrongFireball extends $BaseFireball<($StrongFireball)> {
 "lifetime": integer
 "xPower": double
 "yPower": double
 "zPower": double
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $LivingEntity$Type, arg1: double, arg2: double, arg3: double, arg4: $Level$Type)
constructor(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: $Level$Type)
constructor(arg0: $EntityType$Type<($StrongFireball$Type)>, arg1: $Level$Type)

public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StrongFireball$Type = ($StrongFireball);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StrongFireball_ = $StrongFireball$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"

export class $PickupTrace {
readonly "simulate": boolean
readonly "level": $ServerLevel
readonly "player": $ServerPlayer

constructor(arg0: boolean, arg1: $ServerLevel$Type)
constructor(arg0: boolean, arg1: $ServerPlayer$Type)

public "push"(arg0: integer, arg1: $PickupConfig$Type): boolean
public "pop"(): void
public "getMode"(): $PickupConfig
get "mode"(): $PickupConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupTrace$Type = ($PickupTrace);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupTrace_ = $PickupTrace$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$ClientEventHandler" {
import {$ScreenEvent$MouseButtonReleased$Pre, $ScreenEvent$MouseButtonReleased$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$MouseButtonReleased$Pre"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$GenericKeyEvent, $GenericKeyEvent$Type} from "packages/dev/xkmc/l2itemselector/events/$GenericKeyEvent"
import {$ScreenEvent$MouseButtonPressed$Pre, $ScreenEvent$MouseButtonPressed$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$MouseButtonPressed$Pre"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $ClientEventHandler {

constructor()

public static "keyEvent"(arg0: $GenericKeyEvent$Type): void
public static "onScreenRightClick"(arg0: $ScreenEvent$MouseButtonPressed$Pre$Type): void
public static "onScreenLeftClick"(arg0: $ScreenEvent$MouseButtonReleased$Pre$Type): void
public static "clientDrawerInsert"(arg0: $AbstractContainerScreen$Type<(any)>, arg1: $Slot$Type, arg2: integer): boolean
public static "clientDrawerTake"(arg0: $AbstractContainerScreen$Type<(any)>, arg1: $Slot$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEventHandler$Type = ($ClientEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEventHandler_ = $ClientEventHandler$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/$ArtifactSlotCuriosType" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$CurioSlotBuilder, $CurioSlotBuilder$Type} from "packages/dev/xkmc/l2artifacts/init/data/slot/$CurioSlotBuilder"

export class $ArtifactSlotCuriosType extends $Enum<($ArtifactSlotCuriosType)> {
static readonly "HEAD": $ArtifactSlotCuriosType
static readonly "NECKLACE": $ArtifactSlotCuriosType
static readonly "BRACELET": $ArtifactSlotCuriosType
static readonly "BODY": $ArtifactSlotCuriosType
static readonly "BELT": $ArtifactSlotCuriosType


public static "values"(): ($ArtifactSlotCuriosType)[]
public static "valueOf"(arg0: string): $ArtifactSlotCuriosType
public "getDesc"(): string
public "getIdentifier"(): string
public "buildConfig"(arg0: $BiConsumer$Type<(string), ($CurioSlotBuilder$Type)>): void
public "getDefTranslation"(): string
get "desc"(): string
get "identifier"(): string
get "defTranslation"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSlotCuriosType$Type = (("head") | ("belt") | ("necklace") | ("bracelet") | ("body")) | ($ArtifactSlotCuriosType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSlotCuriosType_ = $ArtifactSlotCuriosType$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/skin/$SpecialRenderProfile" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$SpecialRenderSkin, $SpecialRenderSkin$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/skin/$SpecialRenderSkin"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $SpecialRenderProfile extends $Record implements $SpecialRenderSkin {

constructor(slim: boolean, texture: $ResourceLocation$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "render"(arg0: $HumanoidGolemEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "slim"(): boolean
public "texture"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialRenderProfile$Type = ($SpecialRenderProfile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialRenderProfile_ = $SpecialRenderProfile$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/api/$IconOverlayEffect" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$ClientRenderEffect, $ClientRenderEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ClientRenderEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $IconOverlayEffect extends $ClientRenderEffect {

 "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
 "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender

(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
}

export namespace $IconOverlayEffect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconOverlayEffect$Type = ($IconOverlayEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconOverlayEffect_ = $IconOverlayEffect$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$PoisonAttack" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $PoisonAttack extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonAttack$Type = ($PoisonAttack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonAttack_ = $PoisonAttack$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$EnderSpear" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SpearItem, $SpearItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$SpearItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$IGlowingTarget, $IGlowingTarget$Type} from "packages/dev/xkmc/l2library/util/raytrace/$IGlowingTarget"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $EnderSpear extends $SpearItem implements $LegendaryWeapon, $IGlowingTarget {
static readonly "RANGE": $AttributeModifier
static readonly "REACH": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getDistance"(arg0: $ItemStack$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderSpear$Type = ($EnderSpear);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderSpear_ = $EnderSpear$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestBlockEntity" {
import {$ContainerListener, $ContainerListener$Type} from "packages/net/minecraft/world/$ContainerListener"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$NameSetable, $NameSetable$Type} from "packages/dev/xkmc/l2modularblock/tile_api/$NameSetable"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BaseBlockEntity, $BaseBlockEntity$Type} from "packages/dev/xkmc/l2library/base/tile/$BaseBlockEntity"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $WorldChestBlockEntity extends $BaseBlockEntity implements $MenuProvider, $NameSetable, $ContainerListener {
 "owner_id": $UUID
 "owner_name": string
 "color": integer
 "config": $PickupConfig
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "setColor"(arg0: integer): void
public "getName"(): $Component
public "getDisplayName"(): $Component
public "onLoad"(): void
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "setCustomName"(arg0: $Component$Type): void
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "addToListener"(): void
public "setPickupMode"(arg0: $PickupConfig$Type): void
public "removeFromListener"(): void
public "stillValid"(arg0: $Player$Type): boolean
public "containerChanged"(arg0: $Container$Type): void
public "onChunkUnloaded"(): void
public "setRemoved"(): void
public "hasCustomName"(): boolean
public "getCustomName"(): $Component
set "color"(value: integer)
get "name"(): $Component
get "displayName"(): $Component
set "customName"(value: $Component$Type)
set "pickupMode"(value: $PickupConfig$Type)
get "customName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldChestBlockEntity$Type = ($WorldChestBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldChestBlockEntity_ = $WorldChestBlockEntity$Type;
}}
declare module "packages/dev/xkmc/l2library/util/raytrace/$EntityTarget" {
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EntityTarget {
static readonly "LIST": $ArrayList<($EntityTarget)>
readonly "max_distance": double
readonly "max_angle": double
readonly "max_time": integer
 "time": integer
 "target": $Entity

constructor(arg0: double, arg1: double, arg2: integer)

public "tickRender"(): void
public "onChange"(arg0: $Entity$Type): void
public "updateTarget"(arg0: $Entity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityTarget$Type = ($EntityTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityTarget_ = $EntityTarget$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/curios/$CurioSlotBuilder$Operation" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CurioSlotBuilder$Operation extends $Enum<($CurioSlotBuilder$Operation)> {
static readonly "SET": $CurioSlotBuilder$Operation
static readonly "ADD": $CurioSlotBuilder$Operation
static readonly "REMOVE": $CurioSlotBuilder$Operation


public static "values"(): ($CurioSlotBuilder$Operation)[]
public static "valueOf"(arg0: string): $CurioSlotBuilder$Operation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioSlotBuilder$Operation$Type = (("add") | ("set") | ("remove")) | ($CurioSlotBuilder$Operation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioSlotBuilder$Operation_ = $CurioSlotBuilder$Operation$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$MasterConfig" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$EntityConfig$Minion, $EntityConfig$Minion$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$Minion"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"

export class $EntityConfig$MasterConfig extends $Record {

constructor(maxTotalCount: integer, spawnInterval: integer, minions: $ArrayList$Type<($EntityConfig$Minion$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "minions"(): $ArrayList<($EntityConfig$Minion)>
public "maxTotalCount"(): integer
public "spawnInterval"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityConfig$MasterConfig$Type = ($EntityConfig$MasterConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityConfig$MasterConfig_ = $EntityConfig$MasterConfig$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/advancements/$IAdvBuilder" {
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonArray, $JsonArray$Type} from "packages/com/google/gson/$JsonArray"

export interface $IAdvBuilder {

 "onBuild"(): void
 "addConditions"(arg0: $JsonArray$Type): void
 "modify"(arg0: string, arg1: $Advancement$Builder$Type): void
 "modifyJson"(arg0: $JsonObject$Type): void
}

export namespace $IAdvBuilder {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAdvBuilder$Type = ($IAdvBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAdvBuilder_ = $IAdvBuilder$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType" {
import {$ISwapEntry, $ISwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISwapEntry"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$SelectionSideBar$Context, $SelectionSideBar$Context$Type} from "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar$Context"

export class $QuickSwapType {

constructor(arg0: string)

public "getName"(): string
public "getIndex"(): integer
public static "color"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): integer
public "isAvailable"(arg0: $Player$Type, arg1: $ISwapEntry$Type<(any)>, arg2: integer): boolean
public "isAvailable"(arg0: $Player$Type, arg1: $ISwapEntry$Type<(any)>): boolean
public "getSignatureItem"(arg0: $Player$Type): $ItemStack
public static "renderSelection"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: boolean, arg5: boolean): void
public "activePopup"(): boolean
public "renderSelected"(arg0: $SelectionSideBar$Context$Type, arg1: $Player$Type, arg2: $ISwapEntry$Type<(any)>, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): void
get "name"(): string
get "index"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuickSwapType$Type = ($QuickSwapType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuickSwapType_ = $QuickSwapType$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$MergedConfigType" {
import {$BaseConfigType, $BaseConfigType$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfigType"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$PacketHandlerWithConfig, $PacketHandlerWithConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig"

export class $MergedConfigType<T extends $BaseConfig> extends $BaseConfigType<(T)> {
readonly "cls": $Class<(T)>
readonly "id": string
readonly "parent": $PacketHandlerWithConfig


public "afterReload"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MergedConfigType$Type<T> = ($MergedConfigType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MergedConfigType_<T> = $MergedConfigType$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2backpack/content/restore/$DimensionSourceData" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ItemSourceData, $ItemSourceData$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$ItemSourceData"

export class $DimensionSourceData extends $Record implements $ItemSourceData<($DimensionSourceData)> {

constructor(color: integer, slot: integer, uuid: $UUID$Type)

public "slot"(): integer
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "color"(): integer
public "uuid"(): $UUID
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DimensionSourceData$Type = ($DimensionSourceData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DimensionSourceData_ = $DimensionSourceData$Type;
}}
declare module "packages/dev/xkmc/l2tabs/compat/$BaseCuriosListScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseCuriosListMenu, $BaseCuriosListMenu$Type} from "packages/dev/xkmc/l2tabs/compat/$BaseCuriosListMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $BaseCuriosListScreen<T extends $BaseCuriosListMenu<(T)>> extends $BaseContainerScreen<(T)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: T, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseCuriosListScreen$Type<T> = ($BaseCuriosListScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseCuriosListScreen_<T> = $BaseCuriosListScreen$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/golem/$GolemHolder" {
import {$CreativeModeTabModifier, $CreativeModeTabModifier$Type} from "packages/com/tterrag/registrate/util/$CreativeModeTabModifier"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$GolemType, $GolemType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$GolemMaterial, $GolemMaterial$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemMaterial"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GolemHolder<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>> extends $Item {
static readonly "KEY_MATERIAL": string
static readonly "KEY_UPGRADES": string
static readonly "KEY_ENTITY": string
static readonly "KEY_DISPLAY": string
static readonly "KEY_ICON": string
static readonly "KEY_CONFIG": string
static readonly "KEY_PART": string
static readonly "KEY_MAT": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $RegistryEntry$Type<($GolemType$Type<(T), (P)>)>)

public "getRemaining"(arg0: $ArrayList$Type<($GolemMaterial$Type)>, arg1: $ArrayList$Type<($UpgradeItem$Type)>): integer
public "withUniformMaterial"(arg0: $ResourceLocation$Type): $ItemStack
public static "getHealth"(arg0: $ItemStack$Type): float
public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "getEntityType"(): $GolemType<(T), (P)>
public "canGrindstoneRepair"(arg0: $ItemStack$Type): boolean
public static "getMaterial"(arg0: $ItemStack$Type): $ArrayList<($GolemMaterial)>
public "createDummy"(arg0: $ItemStack$Type, arg1: $Level$Type): T
public "getBarColor"(arg0: $ItemStack$Type): integer
public "isBarVisible"(arg0: $ItemStack$Type): boolean
public "getBarWidth"(arg0: $ItemStack$Type): integer
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onItemUseFirst"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "fillItemCategory"(arg0: $CreativeModeTabModifier$Type): void
public static "getGolemConfig"(arg0: $ItemStack$Type): $Optional<($Pair<($UUID), (integer)>)>
public static "toEntityIcon"(arg0: $ItemStack$Type, ...arg1: ($ItemStack$Type)[]): $ItemStack
public static "setGolemConfig"(arg0: $ItemStack$Type, arg1: $UUID$Type, arg2: integer): void
public static "getMaxHealth"(arg0: $ItemStack$Type): float
public static "getUpgrades"(arg0: $ItemStack$Type): $ArrayList<($UpgradeItem)>
public static "setEntity"<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>>(arg0: T): $ItemStack
public static "addUpgrade"(arg0: $ItemStack$Type, arg1: $UpgradeItem$Type): $ItemStack
public "onDestroyed"(arg0: $ItemEntity$Type, arg1: $DamageSource$Type): void
public static "setHealth"(arg0: $ItemStack$Type, arg1: float): void
public "summon"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Vec3$Type, arg3: $Player$Type, arg4: $Consumer$Type<($AbstractGolemEntity$Type<(any), (any)>)>): boolean
public static "addMaterial"(arg0: $ItemStack$Type, arg1: $GolemPart$Type<(any), (any)>, arg2: $ResourceLocation$Type): void
get "entityType"(): $GolemType<(T), (P)>
set "entity"(value: T)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemHolder$Type<T, P> = ($GolemHolder<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemHolder_<T, P> = $GolemHolder$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$AdvGen" {
import {$RegistrateAdvancementProvider, $RegistrateAdvancementProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateAdvancementProvider"

export class $AdvGen {

constructor()

public static "genAdvancements"(arg0: $RegistrateAdvancementProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvGen$Type = ($AdvGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvGen_ = $AdvGen$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericAxeItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$AxeItem, $AxeItem$Type} from "packages/net/minecraft/world/item/$AxeItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$GenericTieredItem, $GenericTieredItem$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericTieredItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GenericAxeItem extends $AxeItem implements $GenericTieredItem {
static "STRIPPABLES": $Map<($Block), ($Block)>
 "speed": float
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getExtraConfig"(): $ExtraToolConfig
public "getSweepHitBox"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $Entity$Type): $AABB
public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type): float
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "canBeDepleted"(): boolean
public "mineBlock"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockState$Type, arg3: $BlockPos$Type, arg4: $LivingEntity$Type): boolean
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
get "extraConfig"(): $ExtraToolConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericAxeItem$Type = ($GenericAxeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericAxeItem_ = $GenericAxeItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v1/$PerfectionProtection" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $PerfectionProtection extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PerfectionProtection$Type = ($PerfectionProtection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PerfectionProtection_ = $PerfectionProtection$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature$ItemIcon" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$IArtifactFeature, $IArtifactFeature$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $IArtifactFeature$ItemIcon extends $IArtifactFeature {

 "getItemIcon"(): $Item
 "getDesc"(): $MutableComponent
 "getTooltipItems"(): $NonNullList<($ItemStack)>
}

export namespace $IArtifactFeature$ItemIcon {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IArtifactFeature$ItemIcon$Type = ($IArtifactFeature$ItemIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IArtifactFeature$ItemIcon_ = $IArtifactFeature$ItemIcon$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/create/$RefinedRadianceItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$NoGravMagicalDohickyItem, $NoGravMagicalDohickyItem$Type} from "packages/dev/xkmc/l2complements/content/item/create/$NoGravMagicalDohickyItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RefinedRadianceItem extends $NoGravMagicalDohickyItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MutableComponent$Type)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RefinedRadianceItem$Type = ($RefinedRadianceItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RefinedRadianceItem_ = $RefinedRadianceItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/logic/$InheritContext" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $InheritContext extends $Record {

constructor(parent: $LivingEntity$Type, parentCap: $MobTraitCap$Type, child: $LivingEntity$Type, childCap: $MobTraitCap$Type, isPrimary: boolean)

public "parent"(): $LivingEntity
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "child"(): $LivingEntity
public "isPrimary"(): boolean
public "childCap"(): $MobTraitCap
public "parentCap"(): $MobTraitCap
get "primary"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InheritContext$Type = ($InheritContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InheritContext_ = $InheritContext$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechForceEffect" {
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $MechForceEffect extends $InherentEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getAttributeModifierValue"(arg0: integer, arg1: $AttributeModifier$Type): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MechForceEffect$Type = ($MechForceEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MechForceEffect_ = $MechForceEffect$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/persistent/$AbstractConditionalPersistentSetEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$PersistentDataSetEffect, $PersistentDataSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PersistentDataSetEffect"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PeriodicData, $PeriodicData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/persistent/$PeriodicData"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $AbstractConditionalPersistentSetEffect<T extends $PeriodicData> extends $PersistentDataSetEffect<(T)> {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractConditionalPersistentSetEffect$Type<T> = ($AbstractConditionalPersistentSetEffect<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractConditionalPersistentSetEffect_<T> = $AbstractConditionalPersistentSetEffect$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/ghost/$ItemTarget" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ItemTarget extends $Record {

constructor(x: integer, y: integer, w: integer, h: integer, con: $Consumer$Type<($ItemStack$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "x"(): integer
public "h"(): integer
public "con"(): $Consumer<($ItemStack)>
public "w"(): integer
public "y"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTarget$Type = ($ItemTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTarget_ = $ItemTarget$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$ShulkerateArmor" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ExtraArmorConfig, $ExtraArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ShulkerateArmor extends $ExtraArmorConfig {
 "repair_chance": double
 "damage_chance": double
 "magic_immune": integer

constructor()

public "hideWithEffect"(): boolean
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T): integer
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShulkerateArmor$Type = ($ShulkerateArmor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShulkerateArmor_ = $ShulkerateArmor$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/tool/$DetectorGlasses" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DetectorGlasses extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getEquipmentSlot"(arg0: $ItemStack$Type): $EquipmentSlot
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DetectorGlasses$Type = ($DetectorGlasses);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DetectorGlasses_ = $DetectorGlasses$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemBreakToolTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$GolemBreakToolTrigger, $GolemBreakToolTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemBreakToolTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $GolemBreakToolTrigger$Ins extends $BaseCriterionInstance<($GolemBreakToolTrigger$Ins), ($GolemBreakToolTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemBreakToolTrigger$Ins$Type = ($GolemBreakToolTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemBreakToolTrigger$Ins_ = $GolemBreakToolTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$DiggerAndSwordEnchantment" {
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SingleLevelEnchantment, $SingleLevelEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SingleLevelEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $DiggerAndSwordEnchantment extends $SingleLevelEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "canEnchant"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiggerAndSwordEnchantment$Type = ($DiggerAndSwordEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiggerAndSwordEnchantment_ = $DiggerAndSwordEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/ars/$ArsRecipeCompat" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EnchantmentRecipeBuilder, $EnchantmentRecipeBuilder$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$EnchantmentRecipeBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $ArsRecipeCompat {

constructor()

public static "saveCompat"(arg0: $EnchantmentRecipeBuilder$Type, arg1: $Consumer$Type<($FinishedRecipe$Type)>, arg2: $ResourceLocation$Type): $Consumer<($FinishedRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArsRecipeCompat$Type = ($ArsRecipeCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArsRecipeCompat_ = $ArsRecipeCompat$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/$DDCompat" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"

export class $DDCompat {

constructor()

public static "onRecipeGen"(arg0: $RegistrateRecipeProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DDCompat$Type = ($DDCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DDCompat_ = $DDCompat$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$BaseConfig" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$HashSet, $HashSet$Type} from "packages/java/util/$HashSet"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BaseConfig {

constructor()

public "getID"(): $ResourceLocation
public static "collectSet"<T, C>(arg0: $List$Type<(C)>, arg1: $Function$Type<(C), ($Set$Type<(T)>)>): $HashSet<(T)>
public static "collectList"<T, C>(arg0: $List$Type<(C)>, arg1: $Function$Type<(C), ($List$Type<(T)>)>): $ArrayList<(T)>
public static "collectMap"<T, C, K>(arg0: $List$Type<(C)>, arg1: $Function$Type<(C), ($Map$Type<(K), (T)>)>, arg2: $Supplier$Type<(T)>, arg3: $BiConsumer$Type<(T), (T)>): $HashMap<(K), (T)>
public static "overrideMap"<C, K, T>(arg0: $List$Type<(C)>, arg1: $Function$Type<(C), ($HashMap$Type<(K), (T)>)>): $HashMap<(K), (T)>
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseConfig$Type = ($BaseConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseConfig_ = $BaseConfig$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatArmorType" {
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$ArmorConfig, $ArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ArmorConfig"
import {$ExtraArmorConfig, $ExtraArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig"

export interface $IMatArmorType {

 "getArmorConfig"(): $ArmorConfig
 "getArmorMaterial"(): $ArmorMaterial
 "getExtraArmorConfig"(): $ExtraArmorConfig
}

export namespace $IMatArmorType {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMatArmorType$Type = ($IMatArmorType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMatArmorType_ = $IMatArmorType$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/capability/$InvPickupCap" {
import {$PickupTrace, $PickupTrace$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$PickupModeCap, $PickupModeCap$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupModeCap"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandlerModifiable, $IItemHandlerModifiable$Type} from "packages/net/minecraftforge/items/$IItemHandlerModifiable"

export class $InvPickupCap<T extends $IItemHandlerModifiable> implements $PickupModeCap {

constructor()

public "isValid"(arg0: $ItemStack$Type): boolean
public "doPickup"(arg0: $ItemStack$Type, arg1: $PickupTrace$Type): integer
public "getInv"(arg0: $PickupTrace$Type): T
public "mayStack"(arg0: T, arg1: integer, arg2: $ItemStack$Type, arg3: $PickupConfig$Type): boolean
public static "register"(): void
public "getSignature"(): integer
public "getPickupMode"(): $PickupConfig
get "signature"(): integer
get "pickupMode"(): $PickupConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvPickupCap$Type<T> = ($InvPickupCap<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvPickupCap_<T> = $InvPickupCap$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$TFCompatRegistry" {
import {$TFHealingModifier, $TFHealingModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$TFHealingModifier"
import {$CarminiteModifier, $CarminiteModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$CarminiteModifier"
import {$TFDamageModifier, $TFDamageModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$TFDamageModifier"
import {$FieryModifier, $FieryModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$FieryModifier"
import {$AttributeGolemModifier, $AttributeGolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$SimpleUpgradeItem, $SimpleUpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$SimpleUpgradeItem"

export class $TFCompatRegistry {
static readonly "FIERY": $RegistryEntry<($FieryModifier)>
static readonly "TF_DAMAGE": $RegistryEntry<($TFDamageModifier)>
static readonly "TF_HEALING": $RegistryEntry<($TFHealingModifier)>
static readonly "CARMINITE": $RegistryEntry<($CarminiteModifier)>
static readonly "NAGA": $RegistryEntry<($AttributeGolemModifier)>
static readonly "UP_CARMINITE": $RegistryEntry<($SimpleUpgradeItem)>
static readonly "UP_STEELEAF": $RegistryEntry<($SimpleUpgradeItem)>
static readonly "UP_FIERY": $RegistryEntry<($SimpleUpgradeItem)>
static readonly "UP_IRONWOOD": $RegistryEntry<($SimpleUpgradeItem)>
static readonly "UP_KNIGHTMETAL": $RegistryEntry<($SimpleUpgradeItem)>
static readonly "UP_NAGA": $RegistryEntry<($SimpleUpgradeItem)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TFCompatRegistry$Type = ($TFCompatRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TFCompatRegistry_ = $TFCompatRegistry$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$SlotClickTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$SlotClickTrigger, $SlotClickTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$SlotClickTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $SlotClickTrigger$Ins extends $BaseCriterionInstance<($SlotClickTrigger$Ins), ($SlotClickTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotClickTrigger$Ins$Type = ($SlotClickTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotClickTrigger$Ins_ = $SlotClickTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$StormJavelin" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$JavelinItem, $JavelinItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$JavelinItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $StormJavelin extends $JavelinItem implements $LegendaryWeapon {
static readonly "RANGE": $AttributeModifier
static readonly "REACH": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "causeThunder"(arg0: $BaseThrownWeaponEntity$Type<(any)>): boolean
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "thunderHit"(arg0: $BaseThrownWeaponEntity$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StormJavelin$Type = ($StormJavelin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StormJavelin_ = $StormJavelin$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$AnalogSignalTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AnalogSignalTrigger$Ins, $AnalogSignalTrigger$Ins$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$AnalogSignalTrigger$Ins"

export class $AnalogSignalTrigger extends $BaseCriterion<($AnalogSignalTrigger$Ins), ($AnalogSignalTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type): void
public static "ins"(): $AnalogSignalTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnalogSignalTrigger$Type = ($AnalogSignalTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnalogSignalTrigger_ = $AnalogSignalTrigger$Type;
}}
declare module "packages/dev/xkmc/l2tabs/tabs/contents/$BaseTextScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $BaseTextScreen extends $Screen {
 "imageWidth": integer
 "imageHeight": integer
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "m_7856_"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isPauseScreen"(): boolean
get "pauseScreen"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseTextScreen$Type = ($BaseTextScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseTextScreen_ = $BaseTextScreen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$FrozenSpear" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SpearItem, $SpearItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$SpearItem"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $FrozenSpear extends $SpearItem implements $LegendaryWeapon {
static readonly "RANGE": $AttributeModifier
static readonly "REACH": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "cancelFreeze"(): boolean
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrozenSpear$Type = ($FrozenSpear);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrozenSpear_ = $FrozenSpear$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemEquipTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$GolemEquipTrigger$Ins, $GolemEquipTrigger$Ins$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemEquipTrigger$Ins"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GolemEquipTrigger extends $BaseCriterion<($GolemEquipTrigger$Ins), ($GolemEquipTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: integer): void
public static "ins"(arg0: integer): $GolemEquipTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemEquipTrigger$Type = ($GolemEquipTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemEquipTrigger_ = $GolemEquipTrigger$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/mob/$CapStorageData" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CapStorageData {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapStorageData$Type = ($CapStorageData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapStorageData_ = $CapStorageData$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe" {
import {$ShapedRecipe, $ShapedRecipe$Type} from "packages/net/minecraft/world/item/crafting/$ShapedRecipe"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$AbstractShapedRecipe$Serializer, $AbstractShapedRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe$Serializer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $AbstractShapedRecipe<T extends $AbstractShapedRecipe<(T)>> extends $ShapedRecipe {
readonly "width": integer
readonly "height": integer
readonly "result": $ItemStack

constructor(arg0: $ResourceLocation$Type, arg1: string, arg2: integer, arg3: integer, arg4: $NonNullList$Type<($Ingredient$Type)>, arg5: $ItemStack$Type)

public "getSerializer"(): $AbstractShapedRecipe$Serializer<(T)>
get "serializer"(): $AbstractShapedRecipe$Serializer<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractShapedRecipe$Type<T> = ($AbstractShapedRecipe<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractShapedRecipe_<T> = $AbstractShapedRecipe$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/blazegear/$BGCompatRegistry" {
import {$BlazingModifier, $BlazingModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/blazegear/$BlazingModifier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"

export class $BGCompatRegistry {
static readonly "BLAZING": $RegistryEntry<($BlazingModifier)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BGCompatRegistry$Type = ($BGCompatRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BGCompatRegistry_ = $BGCompatRegistry$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$TooltipInvItem" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $TooltipInvItem {

 "getInvSize"(arg0: $ItemStack$Type): integer
 "getInvItems"(arg0: $ItemStack$Type, arg1: $Player$Type): $List<($ItemStack)>
 "getRowSize"(): integer
}

export namespace $TooltipInvItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipInvItem$Type = ($TooltipInvItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipInvItem_ = $TooltipInvItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/wand/$DiffusionWand" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$WandItem, $WandItem$Type} from "packages/dev/xkmc/l2complements/content/item/wand/$WandItem"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DiffusionWand extends $WandItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiffusionWand$Type = ($DiffusionWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiffusionWand_ = $DiffusionWand$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$CoatingModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $CoatingModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onDamaged"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingDamageEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoatingModifier$Type = ($CoatingModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoatingModifier_ = $CoatingModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigCapability" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$GolemConfigStorage, $GolemConfigStorage$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigStorage"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ICapabilitySerializable, $ICapabilitySerializable$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilitySerializable"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $GolemConfigCapability implements $ICapabilitySerializable<($CompoundTag)> {
readonly "w": $ServerLevel
readonly "handler": $GolemConfigStorage
readonly "lo": $LazyOptional<($GolemConfigStorage)>

constructor(arg0: $ServerLevel$Type)

public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemConfigCapability$Type = ($GolemConfigCapability);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemConfigCapability_ = $GolemConfigCapability$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$SingleSwapItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$IQuickSwapItem, $IQuickSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BaseBagItem, $BaseBagItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SingleSwapItem extends $BaseBagItem implements $IQuickSwapItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public static "getSelected"(arg0: $ItemStack$Type): integer
public static "setSelected"(arg0: $ItemStack$Type, arg1: integer): void
public "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SingleSwapItem$Type = ($SingleSwapItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SingleSwapItem_ = $SingleSwapItem$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/events/$LWGeneralEvents" {
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$EntityStruckByLightningEvent, $EntityStruckByLightningEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityStruckByLightningEvent"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"

export class $LWGeneralEvents {
static readonly "LIGHTNING": string

constructor()

public static "onAttackPost"(arg0: $LivingAttackEvent$Type): void
public static "onEntityStruck"(arg0: $EntityStruckByLightningEvent$Type): void
public static "onDeath"(arg0: $LivingDeathEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWGeneralEvents$Type = ($LWGeneralEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWGeneralEvents_ = $LWGeneralEvents$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/golem/$BEWLRHandle" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $BEWLRHandle extends $Record {

constructor(stack: $ItemStack$Type, type: $ItemDisplayContext$Type, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, light: integer, overlay: integer)

public "type"(): $ItemDisplayContext
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "overlay"(): integer
public "light"(): integer
public "bufferSource"(): $MultiBufferSource
public "poseStack"(): $PoseStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BEWLRHandle$Type = ($BEWLRHandle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BEWLRHandle_ = $BEWLRHandle$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$DementorTrait" {
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$LegendaryTrait, $LegendaryTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$LegendaryTrait"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $DementorTrait extends $LegendaryTrait {

constructor(arg0: $ChatFormatting$Type)

public "onCreateSource"(arg0: integer, arg1: $LivingEntity$Type, arg2: $CreateSourceEvent$Type): void
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DementorTrait$Type = ($DementorTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DementorTrait_ = $DementorTrait$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$DataProvider, $DataProvider$Type} from "packages/net/minecraft/data/$DataProvider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"

export class $ConfigDataProvider implements $DataProvider {

constructor(arg0: $DataGenerator$Type, arg1: string)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public "run"(arg0: $CachedOutput$Type): $CompletableFuture<(any)>
public "getName"(): string
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigDataProvider$Type = ($ConfigDataProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigDataProvider_ = $ConfigDataProvider$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/logic/$TraitManager" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$MobDifficultyCollector, $MobDifficultyCollector$Type} from "packages/dev/xkmc/l2hostility/content/logic/$MobDifficultyCollector"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier$Operation, $AttributeModifier$Operation$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier$Operation"
import {$DifficultyLevel, $DifficultyLevel$Type} from "packages/dev/xkmc/l2hostility/content/logic/$DifficultyLevel"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TraitManager {

constructor()

public static "scale"(arg0: $LivingEntity$Type, arg1: integer): void
public static "fill"(arg0: $MobTraitCap$Type, arg1: $LivingEntity$Type, arg2: $HashMap$Type<($MobTrait$Type), (integer)>, arg3: $MobDifficultyCollector$Type): integer
public static "addAttribute"(arg0: $LivingEntity$Type, arg1: $Attribute$Type, arg2: string, arg3: double, arg4: $AttributeModifier$Operation$Type): void
public static "getTraitCap"(arg0: integer, arg1: $DifficultyLevel$Type): integer
public static "getMaxLevel"(): integer
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitManager$Type = ($TraitManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitManager_ = $TraitManager$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/card/$PathRecordCard" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$PathRecordCard$Pos, $PathRecordCard$Pos$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$PathRecordCard$Pos"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PathRecordCard extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public static "getList"(arg0: $ItemStack$Type): $List<($PathRecordCard$Pos)>
public static "addPos"(arg0: $ItemStack$Type, arg1: $PathRecordCard$Pos$Type): void
public static "togglePos"(arg0: $ItemStack$Type, arg1: $PathRecordCard$Pos$Type): boolean
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "setList"(arg0: $ItemStack$Type, arg1: $List$Type<($PathRecordCard$Pos$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathRecordCard$Type = ($PathRecordCard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathRecordCard_ = $PathRecordCard$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemCrackinessLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$MetalGolemEntity, $MetalGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemEntity"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MetalGolemModel, $MetalGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $MetalGolemCrackinessLayer extends $RenderLayer<($MetalGolemEntity), ($MetalGolemModel)> {

constructor(arg0: $RenderLayerParent$Type<($MetalGolemEntity$Type), ($MetalGolemModel$Type)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $MetalGolemEntity$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalGolemCrackinessLayer$Type = ($MetalGolemCrackinessLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalGolemCrackinessLayer_ = $MetalGolemCrackinessLayer$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/equipment/$EquipmentsMenuPvd" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$IMenuPvd, $IMenuPvd$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $EquipmentsMenuPvd extends $Record implements $IMenuPvd {

constructor(e: $AbstractGolemEntity$Type<(any), (any)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $AbstractGolemEntity<(any), (any)>
public "open"(arg0: $ServerPlayer$Type): void
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentsMenuPvd$Type = ($EquipmentsMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentsMenuPvd_ = $EquipmentsMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$ToolSwapType" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$ISingleSwapHandler, $ISingleSwapHandler$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISingleSwapHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ISingleSwapAction, $ISingleSwapAction$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$ISingleSwapAction"

export class $ToolSwapType extends $QuickSwapType implements $ISingleSwapAction {

constructor(arg0: string, arg1: integer)

public "getSignatureItem"(arg0: $Player$Type): $ItemStack
public "activePopup"(): boolean
public "swapSingle"(arg0: $Player$Type, arg1: $ISingleSwapHandler$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolSwapType$Type = ($ToolSwapType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolSwapType_ = $ToolSwapType$Type;
}}
declare module "packages/dev/xkmc/l2library/util/raytrace/$RayTraceUtil$ServerTarget" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"

export class $RayTraceUtil$ServerTarget {
 "target": $UUID
 "time": integer

constructor(arg0: $UUID$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RayTraceUtil$ServerTarget$Type = ($RayTraceUtil$ServerTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RayTraceUtil$ServerTarget_ = $RayTraceUtil$ServerTarget$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/compat/$ArtifactJEIPlugin" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IFilterScreen, $IFilterScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$IFilterScreen"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$IGuiProperties, $IGuiProperties$Type} from "packages/mezz/jei/api/gui/handlers/$IGuiProperties"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $ArtifactJEIPlugin implements $IModPlugin {
static readonly "ID": $ResourceLocation

constructor()

public static "create"(arg0: $IFilterScreen$Type): $IGuiProperties
public "registerGuiHandlers"(arg0: $IGuiHandlerRegistration$Type): void
public "getPluginUid"(): $ResourceLocation
public "registerItemSubtypes"(arg0: $ISubtypeRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "onRuntimeUnavailable"(): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipeCatalysts"(arg0: $IRecipeCatalystRegistration$Type): void
public "registerRecipes"(arg0: $IRecipeRegistration$Type): void
public "registerAdvanced"(arg0: $IAdvancedRegistration$Type): void
public "onRuntimeAvailable"(arg0: $IJeiRuntime$Type): void
public "registerCategories"(arg0: $IRecipeCategoryRegistration$Type): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactJEIPlugin$Type = ($ArtifactJEIPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactJEIPlugin_ = $ArtifactJEIPlugin$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/card/$NameFilterCard" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TargetFilterCard, $TargetFilterCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$TargetFilterCard"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $NameFilterCard extends $TargetFilterCard {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "mayTarget"(arg0: $ItemStack$Type): $Predicate<($LivingEntity)>
public static "getFriendly"(): $ItemStack
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "setList"(arg0: $ItemStack$Type, arg1: $List$Type<($Either$Type<($EntityType$Type<(any)>), ($TagKey$Type<($EntityType$Type<(any)>)>)>)>): void
get "friendly"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NameFilterCard$Type = ($NameFilterCard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NameFilterCard_ = $NameFilterCard$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/traits/$EnchantmentDisabler" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EnchantmentDisabler {

constructor()

public static "modifyTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>, arg2: $Level$Type): void
public static "tickStack"(arg0: $Level$Type, arg1: $Entity$Type, arg2: $ItemStack$Type): void
public static "disableEnchantment"(arg0: $Level$Type, arg1: $ItemStack$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentDisabler$Type = ($EnchantmentDisabler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentDisabler_ = $EnchantmentDisabler$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/ingredients/$BaseIngredient" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$AbstractIngredient, $AbstractIngredient$Type} from "packages/net/minecraftforge/common/crafting/$AbstractIngredient"
import {$Ingredient$Value, $Ingredient$Value$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient$Value"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$IntList, $IntList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntList"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $BaseIngredient<T extends $BaseIngredient<(T)>> extends $AbstractIngredient {
static readonly "EMPTY": $Ingredient
 "values": ($Ingredient$Value)[]
 "itemStacks": ($ItemStack)[]
 "stackingIds": $IntList

constructor(arg0: $ItemStack$Type)

public "test"(arg0: $ItemStack$Type): boolean
public "isSimple"(): boolean
public "toJson"(): $JsonElement
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<(T)>
public static "isEqual"<T>(arg0: any): $Predicate<(T)>
get "simple"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseIngredient$Type<T> = ($BaseIngredient<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseIngredient_<T> = $BaseIngredient$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/capability/conditionals/$ConditionalToken" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $ConditionalToken {

constructor()

public "tick"(arg0: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConditionalToken$Type = ($ConditionalToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConditionalToken_ = $ConditionalToken$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/registrate/$LHMiscs" {
import {$MenuEntry, $MenuEntry$Type} from "packages/com/tterrag/registrate/util/entry/$MenuEntry"
import {$EquipmentsMenu, $EquipmentsMenu$Type} from "packages/dev/xkmc/l2hostility/content/menu/equipments/$EquipmentsMenu"
import {$EntityCuriosListMenu, $EntityCuriosListMenu$Type} from "packages/dev/xkmc/l2hostility/compat/curios/$EntityCuriosListMenu"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$WrappedAttribute, $WrappedAttribute$Type} from "packages/dev/xkmc/l2damagetracker/contents/attributes/$WrappedAttribute"

export class $LHMiscs {
static readonly "EQUIPMENTS": $MenuEntry<($EquipmentsMenu)>
static readonly "CURIOS": $MenuEntry<($EntityCuriosListMenu)>
static readonly "ADD_LEVEL": $RegistryEntry<($WrappedAttribute)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHMiscs$Type = ($LHMiscs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHMiscs_ = $LHMiscs$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/conditions/$DoubleValueCondition" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $DoubleValueCondition extends $Record implements $ICondition {
static readonly "ID": $ResourceLocation

constructor(path: string, line: $ArrayList$Type<(string)>, low: double, high: double)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $ICondition$IContext$Type): boolean
public static "of"(arg0: string, arg1: $ForgeConfigSpec$ConfigValue$Type<(double)>, arg2: double, arg3: double): $DoubleValueCondition
public "line"(): $ArrayList<(string)>
public "path"(): string
public "high"(): double
public "low"(): double
public "getID"(): $ResourceLocation
public static "shouldRegisterEntry"(arg0: $JsonElement$Type): boolean
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleValueCondition$Type = ($DoubleValueCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleValueCondition_ = $DoubleValueCondition$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$ImmobileData" {
import {$SetEffectData, $SetEffectData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffectData"

export class $ImmobileData extends $SetEffectData {
 "x": double
 "y": double
 "z": double
 "time": integer
 "life": integer
 "rank": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImmobileData$Type = ($ImmobileData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImmobileData_ = $ImmobileData$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ForceEffect {

}

export namespace $ForceEffect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForceEffect$Type = ($ForceEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForceEffect_ = $ForceEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$NetheriteMonstrosityEarthquakeModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AttributeGolemModifier, $AttributeGolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$AttributeGolemModifier$AttrEntry, $AttributeGolemModifier$AttrEntry$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier$AttrEntry"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $NetheriteMonstrosityEarthquakeModifier extends $AttributeGolemModifier {
static readonly "RANGE": double
readonly "entries": ($AttributeGolemModifier$AttrEntry)[]
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "handleEvent"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer, arg2: byte): void
public static "earthQuake"(arg0: $LivingEntity$Type): void
public static "performEarthQuake"(arg0: $AbstractGolemEntity$Type<(any), (any)>): void
public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
public static "makeParticles"(arg0: $LivingEntity$Type, arg1: float, arg2: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetheriteMonstrosityEarthquakeModifier$Type = ($NetheriteMonstrosityEarthquakeModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetheriteMonstrosityEarthquakeModifier_ = $NetheriteMonstrosityEarthquakeModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/menu/equipments/$EquipmentsScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$EquipmentsMenu, $EquipmentsMenu$Type} from "packages/dev/xkmc/l2hostility/content/menu/equipments/$EquipmentsMenu"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $EquipmentsScreen extends $BaseContainerScreen<($EquipmentsMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $EquipmentsMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentsScreen$Type = ($EquipmentsScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentsScreen_ = $EquipmentsScreen$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackListener" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$PlayerAttackCache, $PlayerAttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$PlayerAttackCache"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export interface $AttackListener {

 "onPlayerAttack"(arg0: $PlayerAttackCache$Type): void
 "onCriticalHit"(arg0: $PlayerAttackCache$Type, arg1: $CriticalHitEvent$Type): boolean
 "postHurt"(arg0: $AttackCache$Type, arg1: $LivingHurtEvent$Type, arg2: $ItemStack$Type): void
 "onDamageFinalized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
 "setupProfile"(arg0: $AttackCache$Type, arg1: $BiConsumer$Type<($LivingEntity$Type), ($ItemStack$Type)>): void
 "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
 "postAttack"(arg0: $AttackCache$Type, arg1: $LivingAttackEvent$Type, arg2: $ItemStack$Type): void
 "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
 "onCreateSource"(arg0: $CreateSourceEvent$Type): void
 "onAttack"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
 "onHurt"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
}

export namespace $AttackListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttackListener$Type = ($AttackListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttackListener_ = $AttackListener$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$DrawerInteractTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$DrawerInteractTrigger, $DrawerInteractTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$DrawerInteractTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $DrawerInteractTrigger$Ins extends $BaseCriterionInstance<($DrawerInteractTrigger$Ins), ($DrawerInteractTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerInteractTrigger$Ins$Type = ($DrawerInteractTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerInteractTrigger$Ins_ = $DrawerInteractTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$BackpackLayerRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BackpackLayerRenderer<T extends $LivingEntity, M extends $HumanoidModel<(T)>> extends $RenderLayer<(T), (M)> {
static readonly "MLL": $ModelLayerLocation

constructor(arg0: $RenderLayerParent$Type<(T), (M)>, arg1: $EntityModelSet$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackLayerRenderer$Type<T, M> = ($BackpackLayerRenderer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackLayerRenderer_<T, M> = $BackpackLayerRenderer$Type<(T), (M)>;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$ProjectionEnchantment" {
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$SingleLevelEnchantment, $SingleLevelEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SingleLevelEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $ProjectionEnchantment extends $SingleLevelEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, ...arg2: ($EquipmentSlot$Type)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProjectionEnchantment$Type = ($ProjectionEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProjectionEnchantment_ = $ProjectionEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/jade/$JadeCompat" {
import {$IWailaClientRegistration, $IWailaClientRegistration$Type} from "packages/snownee/jade/api/$IWailaClientRegistration"
import {$IWailaPlugin, $IWailaPlugin$Type} from "packages/snownee/jade/api/$IWailaPlugin"
import {$IWailaCommonRegistration, $IWailaCommonRegistration$Type} from "packages/snownee/jade/api/$IWailaCommonRegistration"

export class $JadeCompat implements $IWailaPlugin {

constructor()

public "registerClient"(arg0: $IWailaClientRegistration$Type): void
public "register"(arg0: $IWailaCommonRegistration$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JadeCompat$Type = ($JadeCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JadeCompat_ = $JadeCompat$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$BackpackSel" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SetSelectedToServer, $SetSelectedToServer$Type} from "packages/dev/xkmc/l2itemselector/select/$SetSelectedToServer"
import {$L2Keys, $L2Keys$Type} from "packages/dev/xkmc/l2itemselector/init/data/$L2Keys"
import {$ISelectionListener, $ISelectionListener$Type} from "packages/dev/xkmc/l2itemselector/select/$ISelectionListener"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BackpackSel implements $ISelectionListener {
static readonly "INSTANCE": $BackpackSel
static readonly "UP": integer
static readonly "DOWN": integer
static readonly "SWAP": integer

constructor()

public "getID"(): $ResourceLocation
public "handleClientScroll"(arg0: integer, arg1: $Player$Type): boolean
public "isClientActive"(arg0: $Player$Type): boolean
public "handleClientKey"(arg0: $L2Keys$Type, arg1: $Player$Type): void
public "handleClientNumericKey"(arg0: integer, arg1: $BooleanSupplier$Type): boolean
public "handleServerSetSelection"(arg0: $SetSelectedToServer$Type, arg1: $Player$Type): void
public "scrollBypassShift"(): boolean
public "toServer"(arg0: integer): void
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackSel$Type = ($BackpackSel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackSel_ = $BackpackSel$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/mode/$PatrolMode" {
import {$GolemMode, $GolemMode$Type} from "packages/dev/xkmc/modulargolems/content/entity/mode/$GolemMode"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $PatrolMode extends $GolemMode {


public "tick"(arg0: $AbstractGolemEntity$Type<(any), (any)>): void
public "getStartFollowDistance"(arg0: $AbstractGolemEntity$Type<(any), (any)>): double
public "getStopDistance"(): double
get "stopDistance"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatrolMode$Type = ($PatrolMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatrolMode_ = $PatrolMode$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/target/$TargetConfigMenuProvider" {
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$IMenuPvd, $IMenuPvd$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TargetConfigMenuProvider extends $Record implements $IMenuPvd {

constructor(id: $UUID$Type, color: integer, editor: $GolemConfigEditor$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $UUID
public "editor"(): $GolemConfigEditor
public "color"(): integer
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public static "fromPacket"(arg0: $ServerLevel$Type, arg1: $GolemConfigEntry$Type): $TargetConfigMenuProvider
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetConfigMenuProvider$Type = ($TargetConfigMenuProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetConfigMenuProvider_ = $TargetConfigMenuProvider$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/materials/$LWToolMats" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$IMatToolType, $IMatToolType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatToolType"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ItemModelBuilder, $ItemModelBuilder$Type} from "packages/net/minecraftforge/client/model/generators/$ItemModelBuilder"
import {$ShapedRecipeBuilder, $ShapedRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$ShapedRecipeBuilder"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$ILWToolMats, $ILWToolMats$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$ILWToolMats"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $LWToolMats extends $Enum<($LWToolMats)> implements $ILWToolMats {
static readonly "IRON": $LWToolMats
static readonly "GOLD": $LWToolMats
static readonly "DIAMOND": $LWToolMats
static readonly "NETHERITE": $LWToolMats
static readonly "TOTEMIC_GOLD": $LWToolMats
static readonly "POSEIDITE": $LWToolMats
static readonly "SHULKERATE": $LWToolMats
static readonly "SCULKIUM": $LWToolMats
static readonly "ETERNIUM": $LWToolMats
readonly "type": $IMatToolType


public "type"(): $IMatToolType
public static "values"(): ($LWToolMats)[]
public static "valueOf"(arg0: string): $LWToolMats
public "getBlock"(): $Item
public "getIngot"(): $Item
public "getToolIngot"(): $Item
public "getNugget"(): $Item
public "getTool"(arg0: $LWToolTypes$Type): $Item
public "is3D"(arg0: $LWToolTypes$Type): boolean
public "fireRes"(): boolean
public "getBaseUpgrade"(): $ILWToolMats
public "getStick"(): $Item
public "name"(): string
public "prefix"(): string
public "getProvider"(arg0: $RegistrateRecipeProvider$Type, ...arg1: ($ICondition$Type)[]): $Consumer<($FinishedRecipe)>
public "isOptional"(): boolean
public "getChain"(): $Item
public "saveRecipe"(arg0: $ShapedRecipeBuilder$Type, arg1: $RegistrateRecipeProvider$Type, arg2: $LWToolTypes$Type, arg3: $ResourceLocation$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type): void
public "emissive"(): boolean
public "englishName"(): string
public "hasTool"(arg0: $LWToolTypes$Type): boolean
public "getToolEnchanted"(arg0: $LWToolTypes$Type): $ItemStack
public "model"(arg0: $LWToolTypes$Type, arg1: $ItemModelBuilder$Type): $ItemModelBuilder
get "block"(): $Item
get "ingot"(): $Item
get "toolIngot"(): $Item
get "nugget"(): $Item
get "baseUpgrade"(): $ILWToolMats
get "stick"(): $Item
get "optional"(): boolean
get "chain"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWToolMats$Type = (("gold") | ("poseidite") | ("diamond") | ("eternium") | ("shulkerate") | ("sculkium") | ("iron") | ("totemic_gold") | ("netherite")) | ($LWToolMats);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWToolMats_ = $LWToolMats$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitsTrigger$Ins" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$KillTraitsTrigger, $KillTraitsTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitsTrigger"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $KillTraitsTrigger$Ins extends $BaseCriterionInstance<($KillTraitsTrigger$Ins), ($KillTraitsTrigger)> {
 "traits": ($MobTrait)[]

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

public "matchAll"(arg0: $MobTraitCap$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitsTrigger$Ins$Type = ($KillTraitsTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitsTrigger$Ins_ = $KillTraitsTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/tile_api/$TickableBlockEntity" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $TickableBlockEntity {

 "tick"(): void

(): void
}

export namespace $TickableBlockEntity {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickableBlockEntity$Type = ($TickableBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickableBlockEntity_ = $TickableBlockEntity$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/$L2WeaponryClient" {
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$RegisterItemDecorationsEvent, $RegisterItemDecorationsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterItemDecorationsEvent"
import {$ModelEvent$RegisterAdditional, $ModelEvent$RegisterAdditional$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$RegisterAdditional"
import {$RegisterParticleProvidersEvent, $RegisterParticleProvidersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterParticleProvidersEvent"
import {$RegisterClientReloadListenersEvent, $RegisterClientReloadListenersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientReloadListenersEvent"

export class $L2WeaponryClient {

constructor()

public static "clientSetup"(arg0: $FMLClientSetupEvent$Type): void
public static "onResourceReload"(arg0: $RegisterClientReloadListenersEvent$Type): void
public static "onParticleRegistryEvent"(arg0: $RegisterParticleProvidersEvent$Type): void
public static "registerItemDecoration"(arg0: $RegisterItemDecorationsEvent$Type): void
public static "onModelLoad"(arg0: $ModelEvent$RegisterAdditional$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2WeaponryClient$Type = ($L2WeaponryClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2WeaponryClient_ = $L2WeaponryClient$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/wand/$AiConfigWand" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseWand, $BaseWand$Type} from "packages/dev/xkmc/l2hostility/content/item/wand/$BaseWand"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AiConfigWand extends $BaseWand {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "clickTarget"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AiConfigWand$Type = ($AiConfigWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AiConfigWand_ = $AiConfigWand$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$PlaneChunkBreaker" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleNumberDesc, $SimpleNumberDesc$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$SimpleNumberDesc"
import {$DiggerContext, $DiggerContext$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext"

export class $PlaneChunkBreaker extends $Record implements $SimpleNumberDesc {

constructor(h: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "h"(): integer
public "getInstance"(arg0: $DiggerContext$Type): $BlockBreakerInstance
public "range"(arg0: integer): integer
public "getMaxLevel"(): integer
public "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
public "ignoreHardness"(): boolean
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaneChunkBreaker$Type = ($PlaneChunkBreaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaneChunkBreaker_ = $PlaneChunkBreaker$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/wand/$RiderWandItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$GolemInteractItem, $GolemInteractItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$GolemInteractItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BaseWandItem, $BaseWandItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$BaseWandItem"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RiderWandItem extends $BaseWandItem implements $GolemInteractItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $ItemEntry$Type<(any)>)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RiderWandItem$Type = ($RiderWandItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RiderWandItem_ = $RiderWandItem$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/click/writable/$WritableStackClickHandler" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ConcurrentHashMap, $ConcurrentHashMap$Type} from "packages/java/util/concurrent/$ConcurrentHashMap"
import {$SlotClickHandler, $SlotClickHandler$Type} from "packages/dev/xkmc/l2screentracker/click/$SlotClickHandler"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $WritableStackClickHandler extends $SlotClickHandler {
static readonly "MAP": $ConcurrentHashMap<($ResourceLocation), ($SlotClickHandler)>

constructor(arg0: $ResourceLocation$Type)

public "handle"(arg0: $ServerPlayer$Type, arg1: integer, arg2: integer, arg3: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WritableStackClickHandler$Type = ($WritableStackClickHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WritableStackClickHandler_ = $WritableStackClickHandler$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$HomeTotem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ILCTotem, $ILCTotem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$ILCTotem"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TotemHelper$TotemSlot, $TotemHelper$TotemSlot$Type} from "packages/dev/xkmc/l2damagetracker/contents/curios/$TotemHelper$TotemSlot"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $HomeTotem extends $Item implements $ILCTotem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "trigger"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $Consumer$Type<($ItemStack$Type)>): void
public "allow"(arg0: $LivingEntity$Type, arg1: $DamageSource$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onClientTrigger"(arg0: $Entity$Type, arg1: $ItemStack$Type): void
public "trigger"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $TotemHelper$TotemSlot$Type, arg3: $DamageSource$Type): void
public "allow"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $DamageSource$Type): boolean
public "isValid"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $TotemHelper$TotemSlot$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HomeTotem$Type = ($HomeTotem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HomeTotem_ = $HomeTotem$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier$Type" {
import {$DamageModifier$Type$Start, $DamageModifier$Type$Start$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier$Type$Start"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$DamageModifier$Type$End, $DamageModifier$Type$End$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier$Type$End"

export class $DamageModifier$Type extends $Enum<($DamageModifier$Type)> {
static readonly "ADDITIVE": $DamageModifier$Type
static readonly "MULTIPLICATIVE": $DamageModifier$Type
static readonly "NONLINEAR": $DamageModifier$Type
readonly "start": $DamageModifier$Type$Start
readonly "end": $DamageModifier$Type$End


public static "values"(): ($DamageModifier$Type)[]
public static "valueOf"(arg0: string): $DamageModifier$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageModifier$Type$Type = (("multiplicative") | ("nonlinear") | ("additive")) | ($DamageModifier$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageModifier$Type_ = $DamageModifier$Type$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$GenericItemStack, $GenericItemStack$Type} from "packages/dev/xkmc/l2library/util/code/$GenericItemStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RankToken, $RankToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$RankToken"
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$IArtifactFilter, $IArtifactFilter$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFilter"
import {$ArtifactFilter, $ArtifactFilter$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactFilter"
import {$ArtifactSlot, $ArtifactSlot$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot"
import {$StatTypeConfig, $StatTypeConfig$Type} from "packages/dev/xkmc/l2artifacts/content/config/$StatTypeConfig"

export class $ArtifactChestToken implements $IArtifactFilter {
readonly "stack": $ItemStack
readonly "invSlot": integer
readonly "list": $List<($ItemStack)>
readonly "filters": $List<($ArtifactFilter<(any)>)>
readonly "rank": $ArtifactFilter<($RankToken)>
readonly "set": $ArtifactFilter<($ArtifactSet)>
readonly "slot": $ArtifactFilter<($ArtifactSlot)>
readonly "stat": $ArtifactFilter<($StatTypeConfig)>
 "exp": integer


public "update"(): void
public static "of"(arg0: $Player$Type, arg1: integer): $ArtifactChestToken
public "save"(): void
public "getComparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
public "prioritize"(arg0: integer): void
public "getFiltered"(): $List<($GenericItemStack<($BaseArtifact)>)>
/**
 * 
 * @deprecated
 */
public "getAvailableArtifacts"(): $Stream<($GenericItemStack<($BaseArtifact)>)>
get "comparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
get "filtered"(): $List<($GenericItemStack<($BaseArtifact)>)>
get "availableArtifacts"(): $Stream<($GenericItemStack<($BaseArtifact)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactChestToken$Type = ($ArtifactChestToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactChestToken_ = $ArtifactChestToken$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/mobeffects/$FungusInfection" {
import {$IOverlayRenderEffect, $IOverlayRenderEffect$Type} from "packages/dev/xkmc/l2artifacts/content/mobeffects/$IOverlayRenderEffect"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $FungusInfection extends $InherentEffect implements $IOverlayRenderEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender
public "getAttributeModifierValue"(arg0: integer, arg1: $AttributeModifier$Type): double
public "getCurativeItems"(): $List<($ItemStack)>
public "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
get "curativeItems"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FungusInfection$Type = ($FungusInfection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FungusInfection_ = $FungusInfection$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapManager" {
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $QuickSwapManager {

constructor()

public static "getToken"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: boolean): $IQuickSwapToken<(any)>
public static "getToken"(arg0: $LivingEntity$Type, arg1: boolean): $IQuickSwapToken<(any)>
public static "getValidType"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: boolean): $QuickSwapType
public static "getValidType"(arg0: $LivingEntity$Type, arg1: boolean): $QuickSwapType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuickSwapManager$Type = ($QuickSwapManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuickSwapManager_ = $QuickSwapManager$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/wand/$DispenseWand" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$GolemInteractItem, $GolemInteractItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$GolemInteractItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BaseWandItem, $BaseWandItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$BaseWandItem"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DispenseWand extends $BaseWandItem implements $GolemInteractItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $ItemEntry$Type<(any)>)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispenseWand$Type = ($DispenseWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispenseWand_ = $DispenseWand$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$ArrowBagEvents$ArrowFindEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$IntConsumer, $IntConsumer$Type} from "packages/java/util/function/$IntConsumer"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ArrowBagEvents$ArrowFindEvent extends $Event {

constructor()
constructor(arg0: $ItemStack$Type, arg1: $ProjectileWeaponItem$Type, arg2: $LivingEntity$Type)

public "getStack"(): $ItemStack
public "isCancelable"(): boolean
public "setProjectile"(arg0: $Pair$Type<($ItemStack$Type), ($IntConsumer$Type)>): boolean
public "getEntity"(): $LivingEntity
public "getArrow"(): $Pair<($ItemStack), ($IntConsumer)>
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "stack"(): $ItemStack
get "cancelable"(): boolean
set "projectile"(value: $Pair$Type<($ItemStack$Type), ($IntConsumer$Type)>)
get "entity"(): $LivingEntity
get "arrow"(): $Pair<($ItemStack), ($IntConsumer)>
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowBagEvents$ArrowFindEvent$Type = ($ArrowBagEvents$ArrowFindEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowBagEvents$ArrowFindEvent_ = $ArrowBagEvents$ArrowFindEvent$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$BackpackKeys" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$RegisterKeyMappingsEvent, $RegisterKeyMappingsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterKeyMappingsEvent"

export class $BackpackKeys extends $Enum<($BackpackKeys)> {
static readonly "OPEN": $BackpackKeys
readonly "id": string
readonly "key": integer
readonly "map": $KeyMapping


public static "values"(): ($BackpackKeys)[]
public static "valueOf"(arg0: string): $BackpackKeys
public static "registerKeys"(arg0: $RegisterKeyMappingsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackKeys$Type = (("open")) | ($BackpackKeys);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackKeys_ = $BackpackKeys$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier$Type$End" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $DamageModifier$Type$End {

 "end"(arg0: float, arg1: float): float

(arg0: float, arg1: float): float
}

export namespace $DamageModifier$Type$End {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageModifier$Type$End$Type = ($DamageModifier$Type$End);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageModifier$Type$End_ = $DamageModifier$Type$End$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/config/$GolemMaterialConfig" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$GolemStatType, $GolemStatType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemStatType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$GolemMaterialConfig$Builder, $GolemMaterialConfig$Builder$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemMaterialConfig$Builder"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GolemMaterialConfig extends $BaseConfig {
 "stats": $HashMap<($ResourceLocation), ($HashMap<($GolemStatType), (double)>)>
 "modifiers": $HashMap<($ResourceLocation), ($HashMap<($GolemModifier), (integer)>)>
 "ingredients": $HashMap<($ResourceLocation), ($Ingredient)>

constructor()

public static "get"(): $GolemMaterialConfig
public "addMaterial"(arg0: $ResourceLocation$Type, arg1: $Ingredient$Type): $GolemMaterialConfig$Builder
public "getAllMaterials"(): $Set<($ResourceLocation)>
get "allMaterials"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemMaterialConfig$Type = ($GolemMaterialConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemMaterialConfig_ = $GolemMaterialConfig$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$LongShooterEffect" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$AttributeSetData, $AttributeSetData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AbstractConditionalAttributeSetEffect, $AbstractConditionalAttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AbstractConditionalAttributeSetEffect"

export class $LongShooterEffect extends $AbstractConditionalAttributeSetEffect<($AttributeSetData)> {
readonly "ids": integer

constructor(...arg0: ($AttrSetEntry$Type)[])

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getData"(): $AttributeSetData
get "data"(): $AttributeSetData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongShooterEffect$Type = ($LongShooterEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongShooterEffect_ = $LongShooterEffect$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/$ForceAddEffectEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$MobEffectEvent, $MobEffectEvent$Type} from "packages/net/minecraftforge/event/entity/living/$MobEffectEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ForceAddEffectEvent extends $MobEffectEvent {

constructor()
constructor(arg0: $LivingEntity$Type, arg1: $MobEffectInstance$Type)

public "getEffectInstance"(): $MobEffectInstance
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "effectInstance"(): $MobEffectInstance
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForceAddEffectEvent$Type = ($ForceAddEffectEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForceAddEffectEvent_ = $ForceAddEffectEvent$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$AttackStrikeEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$AttackStrikeData, $AttackStrikeData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$AttackStrikeData"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$AbstractConditionalAttributeSetEffect, $AbstractConditionalAttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AbstractConditionalAttributeSetEffect"

export class $AttackStrikeEffect extends $AbstractConditionalAttributeSetEffect<($AttackStrikeData)> {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type, ...arg2: ($AttrSetEntry$Type)[])

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "playerHurtOpponentEvent"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttackStrikeEffect$Type = ($AttackStrikeEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttackStrikeEffect_ = $AttackStrikeEffect$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/effect/$MoonwalkEffect" {
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $MoonwalkEffect extends $InherentEffect implements $ForceEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getAttributeModifierValue"(arg0: integer, arg1: $AttributeModifier$Type): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoonwalkEffect$Type = ($MoonwalkEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoonwalkEffect_ = $MoonwalkEffect$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/init/data/$DamageTypeAndTagsGen" {
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"

export class $DamageTypeAndTagsGen {

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg2: $ExistingFileHelper$Type, arg3: string)

public "generate"(arg0: boolean, arg1: $DataGenerator$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageTypeAndTagsGen$Type = ($DamageTypeAndTagsGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageTypeAndTagsGen_ = $DamageTypeAndTagsGen$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$LHConfig$Client" {
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"

export class $LHConfig$Client {
readonly "showTraitOverHead": $ForgeConfigSpec$BooleanValue
readonly "showLevelOverHead": $ForgeConfigSpec$BooleanValue
readonly "overHeadRenderDistance": $ForgeConfigSpec$IntValue
readonly "overHeadRenderFullBright": $ForgeConfigSpec$BooleanValue
readonly "overHeadLevelColor": $ForgeConfigSpec$IntValue
readonly "overHeadLevelColorAbyss": $ForgeConfigSpec$IntValue
readonly "overHeadRenderOffset": $ForgeConfigSpec$DoubleValue
readonly "showOnlyWhenHovered": $ForgeConfigSpec$BooleanValue
readonly "glowingRangeHidden": $ForgeConfigSpec$IntValue
readonly "glowingRangeNear": $ForgeConfigSpec$IntValue
readonly "showUndyingParticles": $ForgeConfigSpec$BooleanValue


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHConfig$Client$Type = ($LHConfig$Client);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHConfig$Client_ = $LHConfig$Client$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $BaseContainerScreen<T extends $BaseContainerMenu<(T)>> extends $AbstractContainerScreen<(T)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: T, arg1: $Inventory$Type, arg2: $Component$Type)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseContainerScreen$Type<T> = ($BaseContainerScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseContainerScreen_<T> = $BaseContainerScreen$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/skin/$SpecialRenderSkin" {
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export interface $SpecialRenderSkin {

 "render"(arg0: $HumanoidGolemEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void

(arg0: $HumanoidGolemEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
}

export namespace $SpecialRenderSkin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialRenderSkin$Type = ($SpecialRenderSkin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialRenderSkin_ = $SpecialRenderSkin$Type;
}}
declare module "packages/dev/xkmc/l2backpack/compat/$PatchouliCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PatchouliCompat {

constructor()

public static "gen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatchouliCompat$Type = ($PatchouliCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatchouliCompat_ = $PatchouliCompat$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$RecipeGen" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LCMats, $LCMats$Type} from "packages/dev/xkmc/l2complements/init/materials/$LCMats"
import {$InventoryChangeTrigger$TriggerInstance, $InventoryChangeTrigger$TriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$InventoryChangeTrigger$TriggerInstance"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $RecipeGen {

constructor()

public static "unlock"<T>(arg0: $RegistrateRecipeProvider$Type, arg1: $BiFunction$Type<(string), ($InventoryChangeTrigger$TriggerInstance$Type), (T)>, arg2: $Item$Type): T
public static "smithing"(arg0: $RegistrateRecipeProvider$Type, arg1: $TagKey$Type<($Item$Type)>, arg2: $Item$Type, arg3: $Item$Type): void
public static "smithing"(arg0: $RegistrateRecipeProvider$Type, arg1: $TagKey$Type<($Item$Type)>, arg2: $Item$Type, arg3: $Item$Type, arg4: $Consumer$Type<($FinishedRecipe$Type)>): void
public static "smithing"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: $Item$Type): void
public static "smelting"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: float): void
public static "blasting"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: float): void
public static "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public static "storage"(arg0: $RegistrateRecipeProvider$Type, arg1: $NonNullSupplier$Type<($ItemLike$Type)>, arg2: $NonNullSupplier$Type<($ItemLike$Type)>): void
public static "genTools"(arg0: $RegistrateRecipeProvider$Type, arg1: $LCMats$Type, arg2: ($ItemEntry$Type<(any)>)[]): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeGen$Type = ($RecipeGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeGen_ = $RecipeGen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/immunes/$PlayerImmuneModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $PlayerImmuneModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerImmuneModifier$Type = ($PlayerImmuneModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerImmuneModifier_ = $PlayerImmuneModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/highlevel/$SlotIterateDamageTrait" {
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SlotIterateDamageTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "postHurtImpl"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotIterateDamageTrait$Type = ($SlotIterateDamageTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotIterateDamageTrait_ = $SlotIterateDamageTrait$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/entity/$ISizedItemEntity" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ISizedItemEntity {

 "getSize"(): float

(): float
}

export namespace $ISizedItemEntity {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISizedItemEntity$Type = ($ISizedItemEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISizedItemEntity_ = $ISizedItemEntity$Type;
}}
declare module "packages/dev/xkmc/l2tabs/tabs/core/$TabManager" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TabToken, $TabToken$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabToken"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TabManager {
 "tabPage": integer
 "maxPages": integer
 "selected": $TabToken<(any)>

constructor(arg0: $Screen$Type)

public "init"(arg0: $Consumer$Type<($AbstractWidget$Type)>, arg1: $TabToken$Type<(any)>): void
public "getScreen"(): $Screen
public "onToolTipRender"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer): void
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TabManager$Type = ($TabManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TabManager_ = $TabManager$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/botania/$ManaBoostModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$ManaModifier, $ManaModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/botania/$ManaModifier"

export class $ManaBoostModifier extends $ManaModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "modifyDamage"(arg0: $AttackCache$Type, arg1: $AbstractGolemEntity$Type<(any), (any)>, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaBoostModifier$Type = ($ManaBoostModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaBoostModifier_ = $ManaBoostModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/enchantments/$HostilityEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $HostilityEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[], arg3: integer)

public "getMaxLevel"(): integer
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityEnchantment$Type = ($HostilityEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityEnchantment_ = $HostilityEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2hostility/events/$MiscHandlers" {
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$PlayerInteractEvent$EntityInteract, $PlayerInteractEvent$EntityInteract$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteract"
import {$AnvilUpdateEvent, $AnvilUpdateEvent$Type} from "packages/net/minecraftforge/event/$AnvilUpdateEvent"
import {$EntityJoinLevelEvent, $EntityJoinLevelEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityJoinLevelEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $MiscHandlers {

constructor()

public static "onTargetCardClick"(arg0: $PlayerInteractEvent$EntityInteract$Type): void
public static "predicateSlotValid"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public static "onAnvilCraft"(arg0: $AnvilUpdateEvent$Type): void
public static "useOnSkip"(arg0: $UseOnContext$Type, arg1: $ItemStack$Type): boolean
public static "copyCap"(arg0: $LivingEntity$Type, arg1: $LivingEntity$Type): void
public static "onEntityJoinLevel"(arg0: $EntityJoinLevelEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MiscHandlers$Type = ($MiscHandlers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MiscHandlers_ = $MiscHandlers$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemAnvilFixTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$GolemAnvilFixTrigger$Ins, $GolemAnvilFixTrigger$Ins$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemAnvilFixTrigger$Ins"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GolemAnvilFixTrigger extends $BaseCriterion<($GolemAnvilFixTrigger$Ins), ($GolemAnvilFixTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $ResourceLocation$Type): void
public static "ins"(): $GolemAnvilFixTrigger$Ins
public static "withMat"(arg0: $ResourceLocation$Type): $GolemAnvilFixTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemAnvilFixTrigger$Type = ($GolemAnvilFixTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemAnvilFixTrigger_ = $GolemAnvilFixTrigger$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/events/$LWAttackEventListener" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$PlayerAttackCache, $PlayerAttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$PlayerAttackCache"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$AttackListener, $AttackListener$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackListener"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $LWAttackEventListener implements $AttackListener {

constructor()

public "onCriticalHit"(arg0: $PlayerAttackCache$Type, arg1: $CriticalHitEvent$Type): boolean
public "onDamageFinalized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "setupProfile"(arg0: $AttackCache$Type, arg1: $BiConsumer$Type<($LivingEntity$Type), ($ItemStack$Type)>): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "postAttack"(arg0: $AttackCache$Type, arg1: $LivingAttackEvent$Type, arg2: $ItemStack$Type): void
public "onCreateSource"(arg0: $CreateSourceEvent$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onPlayerAttack"(arg0: $PlayerAttackCache$Type): void
public "postHurt"(arg0: $AttackCache$Type, arg1: $LivingHurtEvent$Type, arg2: $ItemStack$Type): void
public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onAttack"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWAttackEventListener$Type = ($LWAttackEventListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWAttackEventListener_ = $LWAttackEventListener$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/gateway/$GatewayRecipe" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $GatewayRecipe extends $Record implements $FinishedRecipe {

constructor(r: $FinishedRecipe$Type, gate: $ResourceLocation$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "gate"(): $ResourceLocation
public "r"(): $FinishedRecipe
public "serializeRecipeData"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "getAdvancementId"(): $ResourceLocation
public "getId"(): $ResourceLocation
public "serializeAdvancement"(): $JsonObject
public "serializeRecipe"(): $JsonObject
get "type"(): $RecipeSerializer<(any)>
get "advancementId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GatewayRecipe$Type = ($GatewayRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GatewayRecipe_ = $GatewayRecipe$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeResultSlot" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$PredSlot, $PredSlot$Type} from "packages/dev/xkmc/l2library/base/menu/base/$PredSlot"

export class $ShapeResultSlot extends $PredSlot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer, arg4: $Predicate$Type<($ItemStack$Type)>)

public "remove"(arg0: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeResultSlot$Type = ($ShapeResultSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeResultSlot_ = $ShapeResultSlot$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/client/armor/$GolemEquipmentModels" {
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityRenderersEvent$RegisterLayerDefinitions, $EntityRenderersEvent$RegisterLayerDefinitions$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$RegisterLayerDefinitions"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$MeshDefinition, $MeshDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$MeshDefinition"

export class $GolemEquipmentModels {
static readonly "LIST": $List<($ModelLayerLocation)>
static readonly "HELMET_LAYER": $ModelLayerLocation
static readonly "CHESTPLATE_LAYER": $ModelLayerLocation
static readonly "SHINGUARD_LAYER": $ModelLayerLocation
static readonly "METALGOLEM": $ModelLayerLocation

constructor()

public static "createChestplateLayer"(): $LayerDefinition
public static "buildGolemBaseLayers"(): $MeshDefinition
public static "registerArmorLayer"(arg0: $EntityRenderersEvent$RegisterLayerDefinitions$Type): void
public static "createHelmetLayer"(): $LayerDefinition
public static "createShinGuard"(): $LayerDefinition
public static "createGolemLayer"(): $LayerDefinition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemEquipmentModels$Type = ($GolemEquipmentModels);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemEquipmentModels_ = $GolemEquipmentModels$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/automation/$ConditionalSARecipeBuilder" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SequencedAssemblyRecipeBuilder, $SequencedAssemblyRecipeBuilder$Type} from "packages/com/simibubi/create/content/processing/sequenced/$SequencedAssemblyRecipeBuilder"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $ConditionalSARecipeBuilder extends $SequencedAssemblyRecipeBuilder {

constructor(arg0: $ResourceLocation$Type)

public "withCondition"(arg0: $ICondition$Type): $ConditionalSARecipeBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConditionalSARecipeBuilder$Type = ($ConditionalSARecipeBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConditionalSARecipeBuilder_ = $ConditionalSARecipeBuilder$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/logic/$LevelEditor" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$DifficultyLevel, $DifficultyLevel$Type} from "packages/dev/xkmc/l2hostility/content/logic/$DifficultyLevel"

export class $LevelEditor extends $Record {

constructor(difficulty: $DifficultyLevel$Type, extra: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "extra"(): integer
public "getBase"(): integer
public "getTotal"(): integer
public "addBase"(arg0: integer): boolean
public "difficulty"(): $DifficultyLevel
public "setBase"(arg0: integer): boolean
public "setTotal"(arg0: integer): boolean
public "addTotal"(arg0: integer): boolean
get "base"(): integer
get "total"(): integer
set "base"(value: integer)
set "total"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LevelEditor$Type = ($LevelEditor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LevelEditor_ = $LevelEditor$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/one/$LightBlockMethod" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$SingletonBlockMethod, $SingletonBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$SingletonBlockMethod"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $LightBlockMethod extends $SingletonBlockMethod {

 "getLightValue"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer

(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
}

export namespace $LightBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightBlockMethod$Type = ($LightBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightBlockMethod_ = $LightBlockMethod$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/registry/$OpenConfigMenuToServer$Type" {
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$IMenuPvd, $IMenuPvd$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd"

export class $OpenConfigMenuToServer$Type extends $Enum<($OpenConfigMenuToServer$Type)> {
static readonly "TOGGLE": $OpenConfigMenuToServer$Type
static readonly "ITEM": $OpenConfigMenuToServer$Type
static readonly "TARGET": $OpenConfigMenuToServer$Type
static readonly "PATH": $OpenConfigMenuToServer$Type


public static "values"(): ($OpenConfigMenuToServer$Type)[]
public static "valueOf"(arg0: string): $OpenConfigMenuToServer$Type
public "construct"(arg0: $ServerLevel$Type, arg1: $GolemConfigEntry$Type): $IMenuPvd
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenConfigMenuToServer$Type$Type = (("path") | ("item") | ("toggle") | ("target")) | ($OpenConfigMenuToServer$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenConfigMenuToServer$Type_ = $OpenConfigMenuToServer$Type$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/registrate/$LWItemBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemBuilder, $ItemBuilder$Type} from "packages/com/tterrag/registrate/builders/$ItemBuilder"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $LWItemBuilder<T extends $Item, P> extends $ItemBuilder<(T), (P)> {


public "optionalTag"(arg0: boolean, arg1: $TagKey$Type<($Item$Type)>): $LWItemBuilder<(T), (P)>
public static "of"<T>(arg0: $Supplier$Type<(T)>, arg1: $NonNullSupplier$Type<(string)>): $NonNullSupplier<(T)>
public static "of"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
public static "lazy"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWItemBuilder$Type<T, P> = ($LWItemBuilder<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWItemBuilder_<T, P> = $LWItemBuilder$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/ghost/$IGhostContainer" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ReadOnlyContainer, $ReadOnlyContainer$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$ReadOnlyContainer"

export interface $IGhostContainer extends $ReadOnlyContainer {

 "set"(arg0: integer, arg1: $ItemStack$Type): void
 "getItem"(arg0: integer): $ItemStack
 "getContainerSize"(): integer
 "listSize"(): integer
 "isEmpty"(): boolean
 "internalMatch"(arg0: $ItemStack$Type): boolean
 "setChanged"(): void
 "removeItemNoUpdate"(arg0: integer): $ItemStack
 "removeItem"(arg0: integer, arg1: integer): $ItemStack
 "clearContent"(): void
 "stillValid"(arg0: $Player$Type): boolean
 "setItem"(arg0: integer, arg1: $ItemStack$Type): void
 "kjs$self"(): $Container
 "getBlock"(level: $Level$Type): $BlockContainerJS
 "startOpen"(arg0: $Player$Type): void
 "getMaxStackSize"(): integer
 "stopOpen"(arg0: $Player$Type): void
 "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
 "countItem"(arg0: $Item$Type): integer
 "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
 "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
 "getSlots"(): integer
 "getStackInSlot"(slot: integer): $ItemStack
 "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
 "isMutable"(): boolean
 "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
 "setChanged"(): void
 "asContainer"(): $Container
 "getHeight"(): integer
 "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
 "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
 "getWidth"(): integer
 "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
 "getSlotLimit"(slot: integer): integer
 "clear"(): void
 "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
 "countNonEmpty"(ingredient: $Ingredient$Type): integer
 "countNonEmpty"(): integer
 "getAllItems"(): $List<($ItemStack)>
 "find"(ingredient: $Ingredient$Type): integer
 "find"(): integer
 "clear"(ingredient: $Ingredient$Type): void
 "count"(ingredient: $Ingredient$Type): integer
 "count"(): integer
 "isEmpty"(): boolean
}

export namespace $IGhostContainer {
function stillValidBlockEntity(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
function stillValidBlockEntity(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
function tryClear(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IGhostContainer$Type = ($IGhostContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IGhostContainer_ = $IGhostContainer$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/merged/$MultiSwitchScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$BaseOpenableScreen, $BaseOpenableScreen$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseOpenableScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $MultiSwitchScreen<T extends $BaseContainerMenu<(T)>> extends $BaseOpenableScreen<(T)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: T, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiSwitchScreen$Type<T> = ($MultiSwitchScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiSwitchScreen_<T> = $MultiSwitchScreen$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/events/$MaterialDamageListener" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$HashSet, $HashSet$Type} from "packages/java/util/$HashSet"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$PlayerAttackCache, $PlayerAttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$PlayerAttackCache"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$AttackListener, $AttackListener$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackListener"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $MaterialDamageListener implements $AttackListener {
static readonly "BAN_SPACE_SHARD": $HashSet<(string)>

constructor()

public static "isSpaceShardBanned"(): boolean
public "postHurt"(arg0: $AttackCache$Type, arg1: $LivingHurtEvent$Type, arg2: $ItemStack$Type): void
public "onDamageFinalized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "postAttack"(arg0: $AttackCache$Type, arg1: $LivingAttackEvent$Type, arg2: $ItemStack$Type): void
public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onCreateSource"(arg0: $CreateSourceEvent$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onPlayerAttack"(arg0: $PlayerAttackCache$Type): void
public "onCriticalHit"(arg0: $PlayerAttackCache$Type, arg1: $CriticalHitEvent$Type): boolean
public "setupProfile"(arg0: $AttackCache$Type, arg1: $BiConsumer$Type<($LivingEntity$Type), ($ItemStack$Type)>): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "onAttack"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
get "spaceShardBanned"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MaterialDamageListener$Type = ($MaterialDamageListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MaterialDamageListener_ = $MaterialDamageListener$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/card/$ClickEntityFilterCard" {
import {$TargetFilterCard, $TargetFilterCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$TargetFilterCard"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ClickEntityFilterCard<T> extends $TargetFilterCard {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "mayTarget"(arg0: $ItemStack$Type): $Predicate<($LivingEntity)>
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClickEntityFilterCard$Type<T> = ($ClickEntityFilterCard<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClickEntityFilterCard_<T> = $ClickEntityFilterCard$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IGolemModel, $IGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$IGolemModel"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MobRenderer, $MobRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$MobRenderer"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $AbstractGolemRenderer<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>, M extends ($EntityModel<(T)>) & ($IGolemModel<(T), (P), (M)>)> extends $MobRenderer<(T), (M)> {
static readonly "LIST": $List<($Function<($AbstractGolemRenderer<(any), (any), (any)>), ($RenderLayer<(any), (any)>)>)>
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: M, arg2: float, arg3: $Supplier$Type<((P)[])>)

public "render"(arg0: T, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: T): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractGolemRenderer$Type<T, P, M> = ($AbstractGolemRenderer<(T), (P), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractGolemRenderer_<T, P, M> = $AbstractGolemRenderer$Type<(T), (P), (M)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/traits/$ReprintHandler" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ReprintHandler {

constructor()

public static "reprint"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReprintHandler$Type = ($ReprintHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReprintHandler_ = $ReprintHandler$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$CheaterClaw" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ClawItem, $ClawItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$ClawItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CheaterClaw extends $ClawItem implements $LegendaryWeapon {
static readonly "RANGE": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CheaterClaw$Type = ($CheaterClaw);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CheaterClaw_ = $CheaterClaw$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$EnderMachete" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MacheteItem, $MacheteItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$MacheteItem"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EnderMachete extends $MacheteItem implements $LegendaryWeapon {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderMachete$Type = ($EnderMachete);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderMachete_ = $EnderMachete$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$RecipeGen" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"

export class $RecipeGen {

constructor()

public static "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeGen$Type = ($RecipeGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeGen_ = $RecipeGen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/client/tab/$SetEffectScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$BaseTextScreen, $BaseTextScreen$Type} from "packages/dev/xkmc/l2tabs/tabs/contents/$BaseTextScreen"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $SetEffectScreen extends $BaseTextScreen {
 "imageWidth": integer
 "imageHeight": integer
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "m_7856_"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetEffectScreen$Type = ($SetEffectScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetEffectScreen_ = $SetEffectScreen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/core/$GolemStatType$Kind" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $GolemStatType$Kind extends $Enum<($GolemStatType$Kind)> {
static readonly "BASE": $GolemStatType$Kind
static readonly "ADD": $GolemStatType$Kind
static readonly "PERCENT": $GolemStatType$Kind


public static "values"(): ($GolemStatType$Kind)[]
public static "valueOf"(arg0: string): $GolemStatType$Kind
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemStatType$Kind$Type = (("add") | ("percent") | ("base")) | ($GolemStatType$Kind);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemStatType$Kind_ = $GolemStatType$Kind$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/data/$MGLangData" {
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $MGLangData extends $Enum<($MGLangData)> {
static readonly "HEALTH": $MGLangData
static readonly "SLOT": $MGLangData
static readonly "SHIFT": $MGLangData
static readonly "POTION_ATTACK": $MGLangData
static readonly "POTION_DEFENSE": $MGLangData
static readonly "GOLEM_EQUIPMENT": $MGLangData
static readonly "UPGRADE_COUNT": $MGLangData
static readonly "TARGET_UUID_ADD": $MGLangData
static readonly "TARGET_UUID_REMOVE": $MGLangData
static readonly "TARGET_TYPE_ADD": $MGLangData
static readonly "TARGET_TYPE_REMOVE": $MGLangData
static readonly "TARGET_NAME": $MGLangData
static readonly "TARGET_DEFAULT": $MGLangData
static readonly "TARGET_REMOVE": $MGLangData
static readonly "TARGET_SHIFT": $MGLangData
static readonly "TARGET_MSG_ADDED": $MGLangData
static readonly "TARGET_MSG_REMOVED": $MGLangData
static readonly "MODE_FOLLOW": $MGLangData
static readonly "MODE_GUARD": $MGLangData
static readonly "MODE_STAND": $MGLangData
static readonly "MODE_WANDER": $MGLangData
static readonly "MODE_SQUAD": $MGLangData
static readonly "MODE_PATROL": $MGLangData
static readonly "MODE_FOLLOWING": $MGLangData
static readonly "MODE_GUARDING": $MGLangData
static readonly "MODE_STANDING": $MGLangData
static readonly "MODE_WANDERING": $MGLangData
static readonly "MODE_TEAMING": $MGLangData
static readonly "MODE_PATROLLING": $MGLangData
static readonly "WAND_SWITCH": $MGLangData
static readonly "WAND_MODE": $MGLangData
static readonly "WAND_RIGHT": $MGLangData
static readonly "WAND_SHIFT": $MGLangData
static readonly "WAND_RETRIEVE_RIGHT": $MGLangData
static readonly "WAND_RETRIEVE_SHIFT": $MGLangData
static readonly "WAND_COMMAND_RIGHT": $MGLangData
static readonly "WAND_COMMAND_SHIFT": $MGLangData
static readonly "WAND_SUMMON_RIGHT": $MGLangData
static readonly "WAND_SUMMON_SHIFT": $MGLangData
static readonly "WAND_RIDER": $MGLangData
static readonly "WAND_SQUAD": $MGLangData
static readonly "CONFIG_CARD": $MGLangData
static readonly "CONFIG_INIT": $MGLangData
static readonly "CONFIG_OTHER": $MGLangData
static readonly "PATH": $MGLangData
static readonly "PATH_ADD": $MGLangData
static readonly "PATH_REMOVE": $MGLangData
static readonly "PATH_COUNT": $MGLangData
static readonly "DESTROY_ITEM": $MGLangData
static readonly "DESTROY_EXP": $MGLangData
static readonly "CALL_ATTACK": $MGLangData
static readonly "LOADING": $MGLangData
static readonly "NO_CONFIG": $MGLangData
static readonly "SUMMON_FAILED": $MGLangData
static readonly "SUMMON_FAR": $MGLangData
static readonly "SLOT_MAIN": $MGLangData
static readonly "SLOT_OFF": $MGLangData
static readonly "SLOT_BACKUP": $MGLangData
static readonly "SLOT_ARROW": $MGLangData
static readonly "SLOT_MAIN_DESC": $MGLangData
static readonly "SLOT_BACKUP_DESC": $MGLangData
static readonly "SLOT_BACKUP_INFO": $MGLangData
static readonly "SLOT_ARROW_DESC": $MGLangData
static readonly "CONFIG_SET": $MGLangData
static readonly "CONFIG_MODE": $MGLangData
static readonly "CONFIG_POS": $MGLangData
static readonly "CONFIG_LOCK": $MGLangData
static readonly "CONFIG_TO_POSITION": $MGLangData
static readonly "CONFIG_TO_TARGET": $MGLangData
static readonly "CONFIG_MODE_TOOLTIP": $MGLangData
static readonly "CONFIG_TO_POSITION_TOOLTIP": $MGLangData
static readonly "CONFIG_TO_TARGET_TOOLTIP": $MGLangData
static readonly "UI_WHITELIST": $MGLangData
static readonly "UI_BLACKLIST": $MGLangData
static readonly "UI_MATCH_ITEM": $MGLangData
static readonly "UI_MATCH_TAG": $MGLangData
static readonly "UI_TARGET_HOSTILE": $MGLangData
static readonly "UI_TARGET_FRIENDLY": $MGLangData
static readonly "UI_TARGET_RESET": $MGLangData
static readonly "TAB_TOGGLE": $MGLangData
static readonly "TAB_PICKUP": $MGLangData
static readonly "TAB_TARGET": $MGLangData
static readonly "TAB_PATH": $MGLangData
static readonly "TAB_EQUIPMENT": $MGLangData
static readonly "TAB_ATTRIBUTE": $MGLangData
static readonly "BOT_MANA": $MGLangData
static readonly "BOT_NO_RING": $MGLangData


public "get"(...arg0: (any)[]): $MutableComponent
public static "values"(): ($MGLangData)[]
public static "valueOf"(arg0: string): $MGLangData
public static "getTranslate"(arg0: string): $MutableComponent
public static "asId"(arg0: string): string
public static "genLang"(arg0: $RegistrateLangProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MGLangData$Type = (("ui_blacklist") | ("target_uuid_remove") | ("destroy_exp") | ("wand_retrieve_right") | ("slot_main_desc") | ("shift") | ("config_mode") | ("mode_teaming") | ("tab_pickup") | ("slot_backup_info") | ("mode_patrol") | ("config_lock") | ("path") | ("ui_target_reset") | ("path_count") | ("mode_wander") | ("potion_defense") | ("ui_match_item") | ("path_add") | ("target_type_remove") | ("golem_equipment") | ("wand_mode") | ("target_uuid_add") | ("target_remove") | ("destroy_item") | ("target_msg_added") | ("tab_toggle") | ("mode_standing") | ("slot_main") | ("loading") | ("wand_rider") | ("tab_target") | ("mode_following") | ("wand_summon_shift") | ("tab_attribute") | ("mode_guard") | ("mode_patrolling") | ("wand_switch") | ("ui_target_friendly") | ("wand_summon_right") | ("no_config") | ("slot_backup") | ("wand_command_right") | ("config_pos") | ("target_name") | ("path_remove") | ("config_to_position") | ("tab_equipment") | ("config_other") | ("config_to_target_tooltip") | ("slot") | ("wand_right") | ("bot_no_ring") | ("wand_squad") | ("wand_retrieve_shift") | ("slot_arrow_desc") | ("mode_stand") | ("bot_mana") | ("mode_follow") | ("config_to_target") | ("wand_shift") | ("tab_path") | ("potion_attack") | ("upgrade_count") | ("config_to_position_tooltip") | ("ui_match_tag") | ("health") | ("target_type_add") | ("summon_far") | ("mode_guarding") | ("config_init") | ("mode_wandering") | ("config_card") | ("slot_backup_desc") | ("slot_off") | ("target_default") | ("config_set") | ("slot_arrow") | ("config_mode_tooltip") | ("ui_whitelist") | ("call_attack") | ("ui_target_hostile") | ("wand_command_shift") | ("target_shift") | ("mode_squad") | ("target_msg_removed") | ("summon_failed")) | ($MGLangData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MGLangData_ = $MGLangData$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/$CurioCompat" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CurioCompat {

constructor()

public static "testEffect"(arg0: $MobEffectInstance$Type, arg1: $LivingEntity$Type): boolean
public static "getAllSlots"(arg0: $LivingEntity$Type): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioCompat$Type = ($CurioCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioCompat_ = $CurioCompat$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/blazegear/$BGDispatch" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$ModDispatch, $ModDispatch$Type} from "packages/dev/xkmc/modulargolems/compat/materials/common/$ModDispatch"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $BGDispatch extends $ModDispatch {
static readonly "MODID": string

constructor()

public "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public "genLang"(arg0: $RegistrateLangProvider$Type): void
public "dispatchClientSetup"(): void
public "getDataGen"(arg0: $DataGenerator$Type): $ConfigDataProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BGDispatch$Type = ($BGDispatch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BGDispatch_ = $BGDispatch$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestScreen" {
import {$WorldChestContainer, $WorldChestContainer$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestContainer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$BaseOpenableScreen, $BaseOpenableScreen$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseOpenableScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $WorldChestScreen extends $BaseOpenableScreen<($WorldChestContainer)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $WorldChestContainer$Type, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldChestScreen$Type = ($WorldChestScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldChestScreen_ = $WorldChestScreen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/capability/$IShieldData" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IShieldData {

 "canReflect"(): boolean
 "setShieldDefense"(arg0: double): void
 "getReflectTimer"(): integer
 "getShieldDefense"(): double
 "popRetain"(): double
}

export namespace $IShieldData {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IShieldData$Type = ($IShieldData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IShieldData_ = $IShieldData$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/config/$ConfigMenuProvider" {
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$IMenuPvd, $IMenuPvd$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ConfigMenuProvider extends $Record implements $IMenuPvd {

constructor(id: $UUID$Type, color: integer, editor: $GolemConfigEditor$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $UUID
public "editor"(): $GolemConfigEditor
public "color"(): integer
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public static "fromPacket"(arg0: $ServerLevel$Type, arg1: $GolemConfigEntry$Type): $ConfigMenuProvider
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigMenuProvider$Type = ($ConfigMenuProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigMenuProvider_ = $ConfigMenuProvider$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/traits/$DurabilityEater" {
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $DurabilityEater {

constructor()

public static "corrosion"(arg0: $LivingEntity$Type, arg1: $EquipmentSlot$Type): void
public static "erosion"(arg0: $LivingEntity$Type, arg1: $EquipmentSlot$Type): void
public static "flat"(arg0: $LivingEntity$Type, arg1: $EquipmentSlot$Type, arg2: double): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DurabilityEater$Type = ($DurabilityEater);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DurabilityEater_ = $DurabilityEater$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/loot/$BackpackGLMProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$GlobalLootModifierProvider, $GlobalLootModifierProvider$Type} from "packages/net/minecraftforge/common/data/$GlobalLootModifierProvider"

export class $BackpackGLMProvider extends $GlobalLootModifierProvider {

constructor(arg0: $PackOutput$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackGLMProvider$Type = ($BackpackGLMProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackGLMProvider_ = $BackpackGLMProvider$Type;
}}
declare module "packages/dev/xkmc/l2serial/serialization/codec/$AliasCollection" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $AliasCollection<T> {

 "clear"(): void
 "set"(arg0: integer, arg1: integer, arg2: T): void
 "getAsList"(): $List<(T)>
 "setRaw"(arg0: integer, arg1: integer, arg2: any): void
 "getElemClass"(): $Class<(T)>
}

export namespace $AliasCollection {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AliasCollection$Type<T> = ($AliasCollection<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AliasCollection_<T> = $AliasCollection$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/base/$SimpleFlagModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $SimpleFlagModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $StatFilterType$Type, arg1: $GolemFlags$Type)

public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleFlagModifier$Type = ($SimpleFlagModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleFlagModifier_ = $SimpleFlagModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/jei/$ItemFilterHandler" {
import {$IGhostIngredientHandler$Target, $IGhostIngredientHandler$Target$Type} from "packages/mezz/jei/api/gui/handlers/$IGhostIngredientHandler$Target"
import {$ItemConfigScreen, $ItemConfigScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/filter/$ItemConfigScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IGhostIngredientHandler, $IGhostIngredientHandler$Type} from "packages/mezz/jei/api/gui/handlers/$IGhostIngredientHandler"
import {$ITypedIngredient, $ITypedIngredient$Type} from "packages/mezz/jei/api/ingredients/$ITypedIngredient"

export class $ItemFilterHandler implements $IGhostIngredientHandler<($ItemConfigScreen)> {

constructor()

public "onComplete"(): void
public "getTargetsTyped"<I>(arg0: $ItemConfigScreen$Type, arg1: $ITypedIngredient$Type<(I)>, arg2: boolean): $List<($IGhostIngredientHandler$Target<(I)>)>
public "shouldHighlightTargets"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemFilterHandler$Type = ($ItemFilterHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemFilterHandler_ = $ItemFilterHandler$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$TooltipUpdateEvents" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"

export class $TooltipUpdateEvents {

constructor()

public static "getCount"(arg0: $UUID$Type, arg1: $Item$Type): integer
public static "onEnderSync"(arg0: integer, arg1: $ItemStack$Type): void
public static "onClientTick"(arg0: $TickEvent$ClientTickEvent$Type): void
public static "updateInfo"(arg0: $Item$Type, arg1: $UUID$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipUpdateEvents$Type = ($TooltipUpdateEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipUpdateEvents_ = $TooltipUpdateEvents$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/entity/fireball/$SoulFireball" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BaseFireball, $BaseFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$BaseFireball"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SoulFireball extends $BaseFireball<($SoulFireball)> {
 "lifetime": integer
 "xPower": double
 "yPower": double
 "zPower": double
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $LivingEntity$Type, arg1: double, arg2: double, arg3: double, arg4: $Level$Type)
constructor(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: $Level$Type)
constructor(arg0: $EntityType$Type<($SoulFireball$Type)>, arg1: $Level$Type)

public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulFireball$Type = ($SoulFireball);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulFireball_ = $SoulFireball$Type;
}}
declare module "packages/dev/xkmc/l2library/init/data/$L2TagGen" {
import {$ProviderType, $ProviderType$Type} from "packages/com/tterrag/registrate/providers/$ProviderType"
import {$RegistrateTagsProvider$IntrinsicImpl, $RegistrateTagsProvider$IntrinsicImpl$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider$IntrinsicImpl"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $L2TagGen {
static readonly "ENCH_TAGS": $ProviderType<($RegistrateTagsProvider$IntrinsicImpl<($Enchantment)>)>
static readonly "EFF_TAGS": $ProviderType<($RegistrateTagsProvider$IntrinsicImpl<($MobEffect)>)>
static readonly "TRACKED_EFFECTS": $TagKey<($MobEffect)>

constructor()

public static "onEffectTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($MobEffect$Type)>): void
public static "effectTag"(arg0: $ResourceLocation$Type): $TagKey<($MobEffect)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2TagGen$Type = ($L2TagGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2TagGen_ = $L2TagGen$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$RectInstance" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $RectInstance extends $Record implements $BlockBreakerInstance {

constructor(x0: integer, x1: integer, y0: integer, y1: integer, z0: integer, z1: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "find"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Predicate$Type<($BlockPos$Type)>): $List<($BlockPos)>
public "x1"(): integer
public "y1"(): integer
public "z1"(): integer
public "z0"(): integer
public "x0"(): integer
public "y0"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RectInstance$Type = ($RectInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RectInstance_ = $RectInstance$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/feature/$EntityFeature" {
import {$FeaturePredicate, $FeaturePredicate$Type} from "packages/dev/xkmc/l2complements/content/feature/$FeaturePredicate"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EntityFeature extends $Enum<($EntityFeature)> {
static readonly "STABLE_BODY": $EntityFeature
static readonly "PROJECTILE_REJECT": $EntityFeature
static readonly "EXPLOSION_REJECT": $EntityFeature
static readonly "FIRE_REJECT": $EntityFeature
static readonly "ENVIRONMENTAL_REJECT": $EntityFeature
static readonly "MAGIC_REJECT": $EntityFeature
static readonly "OWNER_PROTECTION": $EntityFeature
static readonly "INVINCIBLE": $EntityFeature
static readonly "SNOW_WALKER": $EntityFeature
static readonly "LAVA_WALKER": $EntityFeature


public "add"(arg0: $FeaturePredicate$Type): void
public static "values"(): ($EntityFeature)[]
public "test"(arg0: $LivingEntity$Type): boolean
public static "valueOf"(arg0: string): $EntityFeature
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityFeature$Type = (("fire_reject") | ("environmental_reject") | ("lava_walker") | ("invincible") | ("projectile_reject") | ("explosion_reject") | ("magic_reject") | ("owner_protection") | ("stable_body") | ("snow_walker")) | ($EntityFeature);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityFeature_ = $EntityFeature$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/config/$StatTypeConfig" {
import {$ImmutableMultimap$Builder, $ImmutableMultimap$Builder$Type} from "packages/com/google/common/collect/$ImmutableMultimap$Builder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$IArtifactFeature$Sprite, $IArtifactFeature$Sprite$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature$Sprite"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$StatEntry, $StatEntry$Type} from "packages/dev/xkmc/l2artifacts/content/core/$StatEntry"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier$Operation, $AttributeModifier$Operation$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier$Operation"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"

export class $StatTypeConfig extends $BaseConfig implements $IArtifactFeature$Sprite {
 "base": double
 "base_low": double
 "base_high": double
 "main_low": double
 "main_high": double
 "sub_low": double
 "sub_high": double
 "attr": $Attribute
 "op": $AttributeModifier$Operation
 "usePercent": boolean
 "icon": $ResourceLocation

constructor()

public static "get"(arg0: $ResourceLocation$Type): $StatTypeConfig
public "getDesc"(): $MutableComponent
public "getIcon"(): $ResourceLocation
public "getBaseValue"(): double
public "getValueText"(arg0: double): $MutableComponent
public "getMainValue"(arg0: $RandomSource$Type, arg1: boolean): double
public "getTooltip"(arg0: double): $Component
public "getInitialValue"(arg0: $RandomSource$Type, arg1: boolean): double
public "getSubValue"(arg0: $RandomSource$Type, arg1: boolean): double
public "getModifier"(arg0: $ImmutableMultimap$Builder$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg1: $StatEntry$Type, arg2: $UUID$Type): void
public static "getValues"(): $Collection<($StatTypeConfig)>
public "getTooltipItems"(): $NonNullList<($ItemStack)>
get "desc"(): $MutableComponent
get "icon"(): $ResourceLocation
get "baseValue"(): double
get "values"(): $Collection<($StatTypeConfig)>
get "tooltipItems"(): $NonNullList<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatTypeConfig$Type = ($StatTypeConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatTypeConfig_ = $StatTypeConfig$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v3/$Photosynthesisffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$PlayerOnlySetEffect, $PlayerOnlySetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PlayerOnlySetEffect"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $Photosynthesisffect extends $PlayerOnlySetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type, arg2: $LinearFuncEntry$Type)

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Photosynthesisffect$Type = ($Photosynthesisffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Photosynthesisffect_ = $Photosynthesisffect$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$AbyssMachete" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MacheteItem, $MacheteItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$MacheteItem"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $AbyssMachete extends $MacheteItem implements $LegendaryWeapon {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbyssMachete$Type = ($AbyssMachete);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbyssMachete_ = $AbyssMachete$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/curios/$TotemHelper$TotemSlot" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $TotemHelper$TotemSlot extends $Consumer<($ItemStack)> {

 "add"(arg0: $List$Type<($TotemHelper$TotemSlot$Type)>): void
 "stack"(): $ItemStack
 "user"(): $LivingEntity
 "accept"(arg0: $ItemStack$Type): void
 "andThen"(arg0: $Consumer$Type<(any)>): $Consumer<($ItemStack)>
}

export namespace $TotemHelper$TotemSlot {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TotemHelper$TotemSlot$Type = ($TotemHelper$TotemSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TotemHelper$TotemSlot_ = $TotemHelper$TotemSlot$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/common/$WorldStorage" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$DrawerAccess, $DrawerAccess$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$DrawerAccess"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$StorageContainer, $StorageContainer$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$StorageContainer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $WorldStorage {
static "CAPABILITY": $Capability<($WorldStorage)>
readonly "level": $ServerLevel

constructor(arg0: $ServerLevel$Type)

public static "get"(arg0: $ServerLevel$Type): $WorldStorage
public "init"(): void
public "getStorageWithoutPassword"(arg0: $UUID$Type, arg1: integer): $Optional<($StorageContainer)>
public "getOrCreateStorage"(arg0: $UUID$Type, arg1: integer, arg2: long, arg3: $ServerPlayer$Type, arg4: $ResourceLocation$Type, arg5: long): $Optional<($StorageContainer)>
public "changePassword"(arg0: $UUID$Type, arg1: integer, arg2: long): $StorageContainer
public "getOrCreateDrawer"(arg0: $UUID$Type, arg1: $Item$Type): $DrawerAccess
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldStorage$Type = ($WorldStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldStorage_ = $WorldStorage$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$LHConfig" {
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$LHConfig$Common, $LHConfig$Common$Type} from "packages/dev/xkmc/l2hostility/init/data/$LHConfig$Common"
import {$LHConfig$Client, $LHConfig$Client$Type} from "packages/dev/xkmc/l2hostility/init/data/$LHConfig$Client"

export class $LHConfig {
static readonly "CLIENT_SPEC": $ForgeConfigSpec
static readonly "CLIENT": $LHConfig$Client
static readonly "COMMON_SPEC": $ForgeConfigSpec
static readonly "COMMON": $LHConfig$Common

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHConfig$Type = ($LHConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHConfig_ = $LHConfig$Type;
}}
declare module "packages/dev/xkmc/l2library/base/tile/$BaseContainer" {
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$AliasCollection, $AliasCollection$Type} from "packages/dev/xkmc/l2serial/serialization/codec/$AliasCollection"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BaseContainerListener, $BaseContainerListener$Type} from "packages/dev/xkmc/l2library/base/tile/$BaseContainerListener"

export class $BaseContainer<T extends $BaseContainer<(T)>> extends $SimpleContainer implements $AliasCollection<($ItemStack)> {

constructor(arg0: integer)

public "add"(arg0: $BaseContainerListener$Type): T
public "clear"(): void
public "set"(arg0: integer, arg1: integer, arg2: $ItemStack$Type): void
public "canAddWhileHaveSpace"(arg0: $ItemStack$Type, arg1: integer): boolean
public "getThis"(): T
public "getMaxStackSize"(): integer
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "setMax"(arg0: integer): T
public "canRecipeAddItem"(arg0: $ItemStack$Type): boolean
public "canAddItem"(arg0: $ItemStack$Type): boolean
public "getAsList"(): $List<($ItemStack)>
public "getElemClass"(): $Class<($ItemStack)>
public "setPredicate"(arg0: $Predicate$Type<($ItemStack$Type)>): T
public "setRaw"(arg0: integer, arg1: integer, arg2: any): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "this"(): T
get "maxStackSize"(): integer
set "max"(value: integer)
get "asList"(): $List<($ItemStack)>
get "elemClass"(): $Class<($ItemStack)>
set "predicate"(value: $Predicate$Type<($ItemStack$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseContainer$Type<T> = ($BaseContainer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseContainer_<T> = $BaseContainer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetEffect" {
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $AttributeSetEffect extends $SetEffect {
readonly "ids": integer

constructor(...arg0: ($AttrSetEntry$Type)[])

public "update"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeSetEffect$Type = ($AttributeSetEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeSetEffect_ = $AttributeSetEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/registrate/$GolemTypes" {
import {$L2Registrate$RegistryInstance, $L2Registrate$RegistryInstance$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate$RegistryInstance"
import {$MetalGolemPartType, $MetalGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemPartType"
import {$HumaniodGolemPartType, $HumaniodGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumaniodGolemPartType"
import {$GolemType, $GolemType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemType"
import {$DogGolemEntity, $DogGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemEntity"
import {$EntityEntry, $EntityEntry$Type} from "packages/com/tterrag/registrate/util/entry/$EntityEntry"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$GolemStatType, $GolemStatType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemStatType"
import {$MetalGolemEntity, $MetalGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemEntity"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$DogGolemPartType, $DogGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemPartType"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"

export class $GolemTypes {
static readonly "MODIFIERS": $L2Registrate$RegistryInstance<($GolemModifier)>
static readonly "STAT_TYPES": $L2Registrate$RegistryInstance<($GolemStatType)>
static readonly "TYPES": $L2Registrate$RegistryInstance<($GolemType<(any), (any)>)>
static "GOLEM_REGEN": $RegistryEntry<($Attribute)>
static "GOLEM_SWEEP": $RegistryEntry<($Attribute)>
static "GOLEM_SIZE": $RegistryEntry<($Attribute)>
static "GOLEM_JUMP": $RegistryEntry<($Attribute)>
static readonly "STAT_HEALTH": $RegistryEntry<($GolemStatType)>
static readonly "STAT_ATTACK": $RegistryEntry<($GolemStatType)>
static readonly "STAT_REGEN": $RegistryEntry<($GolemStatType)>
static readonly "STAT_SWEEP": $RegistryEntry<($GolemStatType)>
static readonly "STAT_ARMOR": $RegistryEntry<($GolemStatType)>
static readonly "STAT_TOUGH": $RegistryEntry<($GolemStatType)>
static readonly "STAT_KBRES": $RegistryEntry<($GolemStatType)>
static readonly "STAT_ATKKB": $RegistryEntry<($GolemStatType)>
static readonly "STAT_WEIGHT": $RegistryEntry<($GolemStatType)>
static readonly "STAT_SPEED": $RegistryEntry<($GolemStatType)>
static readonly "STAT_JUMP": $RegistryEntry<($GolemStatType)>
static readonly "STAT_HEALTH_P": $RegistryEntry<($GolemStatType)>
static readonly "STAT_SIZE": $RegistryEntry<($GolemStatType)>
static readonly "STAT_RANGE": $RegistryEntry<($GolemStatType)>
static readonly "ENTITY_GOLEM": $EntityEntry<($MetalGolemEntity)>
static readonly "ENTITY_HUMANOID": $EntityEntry<($HumanoidGolemEntity)>
static readonly "ENTITY_DOG": $EntityEntry<($DogGolemEntity)>
static readonly "TYPE_GOLEM": $RegistryEntry<($GolemType<($MetalGolemEntity), ($MetalGolemPartType)>)>
static readonly "TYPE_HUMANOID": $RegistryEntry<($GolemType<($HumanoidGolemEntity), ($HumaniodGolemPartType)>)>
static readonly "TYPE_DOG": $RegistryEntry<($GolemType<($DogGolemEntity), ($DogGolemPartType)>)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTypes$Type = ($GolemTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTypes_ = $GolemTypes$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$EnderDagger" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$DaggerItem, $DaggerItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$DaggerItem"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$IGlowingTarget, $IGlowingTarget$Type} from "packages/dev/xkmc/l2library/util/raytrace/$IGlowingTarget"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $EnderDagger extends $DaggerItem implements $LegendaryWeapon, $IGlowingTarget {
static readonly "RANGE": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getDistance"(arg0: $ItemStack$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderDagger$Type = ($EnderDagger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderDagger_ = $EnderDagger$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/capability/$DestroyMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $DestroyMode extends $Enum<($DestroyMode)> {
static readonly "NONE": $DestroyMode
static readonly "EXCESS": $DestroyMode
static readonly "MATCH": $DestroyMode
static readonly "ALL": $DestroyMode
readonly "attemptInsert": boolean


public static "values"(): ($DestroyMode)[]
public static "valueOf"(arg0: string): $DestroyMode
public "getTooltip"(): $MutableComponent
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DestroyMode$Type = (("all") | ("excess") | ("match") | ("none")) | ($DestroyMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DestroyMode_ = $DestroyMode$Type;
}}
declare module "packages/dev/xkmc/l2library/util/raytrace/$TargetSetPacket" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"

export class $TargetSetPacket extends $SerialPacketBase {
 "player": $UUID
 "target": $UUID

constructor(arg0: $UUID$Type, arg1: $UUID$Type)
/**
 * 
 * @deprecated
 */
constructor()

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetSetPacket$Type = ($TargetSetPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetSetPacket_ = $TargetSetPacket$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$IDrawerHandler" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export interface $IDrawerHandler extends $IItemHandler {

 "kjs$self"(): $IItemHandler
 "getBlock"(level: $Level$Type): $BlockContainerJS
 "getSlots"(): integer
 "getStackInSlot"(arg0: integer): $ItemStack
 "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
 "getSlotLimit"(arg0: integer): integer
 "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
 "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
 "getSlots"(): integer
 "getStackInSlot"(i: integer): $ItemStack
 "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
 "isMutable"(): boolean
 "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
 "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
 "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
 "getSlotLimit"(i: integer): integer
 "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
 "setChanged"(): void
 "asContainer"(): $Container
 "countNonEmpty"(ingredient: $Ingredient$Type): integer
 "countNonEmpty"(): integer
 "getAllItems"(): $List<($ItemStack)>
 "getHeight"(): integer
 "find"(ingredient: $Ingredient$Type): integer
 "find"(): integer
 "getWidth"(): integer
 "clear"(): void
 "clear"(ingredient: $Ingredient$Type): void
 "count"(ingredient: $Ingredient$Type): integer
 "count"(): integer
 "isEmpty"(): boolean
}

export namespace $IDrawerHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IDrawerHandler$Type = ($IDrawerHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IDrawerHandler_ = $IDrawerHandler$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/registrate/$LCItems" {
import {$SpecialRenderItem, $SpecialRenderItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$SpecialRenderItem"
import {$WinterStormWand, $WinterStormWand$Type} from "packages/dev/xkmc/l2complements/content/item/wand/$WinterStormWand"
import {$FireChargeItem, $FireChargeItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$FireChargeItem"
import {$TooltipItem, $TooltipItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$TooltipItem"
import {$SonicShooter, $SonicShooter$Type} from "packages/dev/xkmc/l2complements/content/item/wand/$SonicShooter"
import {$HellfireWand, $HellfireWand$Type} from "packages/dev/xkmc/l2complements/content/item/wand/$HellfireWand"
import {$WarpStone, $WarpStone$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$WarpStone"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$TransformItem, $TransformItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$TransformItem"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$HomeTotem, $HomeTotem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$HomeTotem"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$PoseiditeTotem, $PoseiditeTotem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$PoseiditeTotem"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$SoulFireball, $SoulFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$SoulFireball"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$StrongFireball, $StrongFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$StrongFireball"
import {$Rarity, $Rarity$Type} from "packages/net/minecraft/world/item/$Rarity"
import {$DiffusionWand, $DiffusionWand$Type} from "packages/dev/xkmc/l2complements/content/item/wand/$DiffusionWand"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EnchantedGoldenAppleItem, $EnchantedGoldenAppleItem$Type} from "packages/net/minecraft/world/item/$EnchantedGoldenAppleItem"
import {$BurntItem, $BurntItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$BurntItem"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$BlackFireball, $BlackFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$BlackFireball"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"

export class $LCItems {
static readonly "TAB_ITEM": $RegistryEntry<($CreativeModeTab)>
static readonly "TAB_ENCHMIN": $RegistryEntry<($CreativeModeTab)>
static readonly "TAB_ENCHMAX": $RegistryEntry<($CreativeModeTab)>
static readonly "WIND_BOTTLE": $ItemEntry<($TooltipItem)>
static readonly "VOID_EYE": $ItemEntry<($TooltipItem)>
static readonly "SUN_MEMBRANE": $ItemEntry<($TooltipItem)>
static readonly "SOUL_FLAME": $ItemEntry<($TooltipItem)>
static readonly "CAPTURED_WIND": $ItemEntry<($TooltipItem)>
static readonly "CAPTURED_BULLET": $ItemEntry<($TooltipItem)>
static readonly "EXPLOSION_SHARD": $ItemEntry<($TooltipItem)>
static readonly "HARD_ICE": $ItemEntry<($TooltipItem)>
static readonly "STORM_CORE": $ItemEntry<($TooltipItem)>
static readonly "BLACKSTONE_CORE": $ItemEntry<($TooltipItem)>
static readonly "RESONANT_FEATHER": $ItemEntry<($TooltipItem)>
static readonly "SPACE_SHARD": $ItemEntry<($TooltipItem)>
static readonly "WARDEN_BONE_SHARD": $ItemEntry<($TooltipItem)>
static readonly "GUARDIAN_EYE": $ItemEntry<($TooltipItem)>
static readonly "GUARDIAN_RUNE": $ItemEntry<($TransformItem)>
static readonly "PIGLIN_RUNE": $ItemEntry<($TransformItem)>
static readonly "EMERALD": $ItemEntry<($BurntItem)>
static readonly "CURSED_DROPLET": $ItemEntry<($BurntItem)>
static readonly "LIFE_ESSENCE": $ItemEntry<($BurntItem)>
static readonly "FORCE_FIELD": $ItemEntry<($SpecialRenderItem)>
static readonly "FRAGILE_WARP_STONE": $ItemEntry<($WarpStone)>
static readonly "REINFORCED_WARP_STONE": $ItemEntry<($WarpStone)>
static readonly "TOTEM_OF_DREAM": $ItemEntry<($HomeTotem)>
static readonly "TOTEM_OF_THE_SEA": $ItemEntry<($PoseiditeTotem)>
static readonly "SOUL_CHARGE": $ItemEntry<($FireChargeItem<($SoulFireball)>)>
static readonly "STRONG_CHARGE": $ItemEntry<($FireChargeItem<($StrongFireball)>)>
static readonly "BLACK_CHARGE": $ItemEntry<($FireChargeItem<($BlackFireball)>)>
static readonly "SONIC_SHOOTER": $ItemEntry<($SonicShooter)>
static readonly "HELLFIRE_WAND": $ItemEntry<($HellfireWand)>
static readonly "WINTERSTORM_WAND": $ItemEntry<($WinterStormWand)>
static readonly "DIFFUSION_WAND": $ItemEntry<($DiffusionWand)>
static readonly "TOTEMIC_CARROT": $ItemEntry<($Item)>
static readonly "TOTEMIC_APPLE": $ItemEntry<($Item)>
static readonly "ENCHANT_TOTEMIC_CARROT": $ItemEntry<($EnchantedGoldenAppleItem)>
static readonly "ENCHANTED_TOTEMIC_APPLE": $ItemEntry<($EnchantedGoldenAppleItem)>
static readonly "MAT_INGOTS": ($ItemEntry<($Item)>)[]
static readonly "MAT_NUGGETS": ($ItemEntry<($Item)>)[]
static readonly "GEN_ITEM": (($ItemEntry<($Item)>)[])[]

constructor()

public static "register"(): void
public static "simpleItem"<T extends $Item>(arg0: string, arg1: string, arg2: $BiFunction$Type<($Item$Properties$Type), ($Supplier$Type<($MutableComponent$Type)>), (T)>, arg3: $Rarity$Type, arg4: $Supplier$Type<($MutableComponent$Type)>): $ItemEntry<(T)>
public static "getTooltip"(arg0: $MobEffectInstance$Type): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCItems$Type = ($LCItems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCItems_ = $LCItems$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/loot/$LootGen$HiddenPlayer" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $LootGen$HiddenPlayer extends $Enum<($LootGen$HiddenPlayer)> {
static readonly "UNNAMED": $LootGen$HiddenPlayer
readonly "id": string
readonly "pname": string
readonly "bname": string
readonly "uuid": $UUID


public static "values"(): ($LootGen$HiddenPlayer)[]
public static "valueOf"(arg0: string): $LootGen$HiddenPlayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootGen$HiddenPlayer$Type = (("unnamed")) | ($LootGen$HiddenPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootGen$HiddenPlayer_ = $LootGen$HiddenPlayer$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/network/$LootDataToClient" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$TraitLootModifier, $TraitLootModifier$Type} from "packages/dev/xkmc/l2hostility/init/loot/$TraitLootModifier"
import {$ITraitLootRecipe, $ITraitLootRecipe$Type} from "packages/dev/xkmc/l2hostility/compat/jei/$ITraitLootRecipe"

export class $LootDataToClient extends $SerialPacketBase {
static "LIST_CACHE": $List<($ITraitLootRecipe)>
 "list": $ArrayList<($CompoundTag)>

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $List$Type<($TraitLootModifier$Type)>)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootDataToClient$Type = ($LootDataToClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootDataToClient_ = $LootDataToClient$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken" {
import {$ISwapEntry, $ISwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISwapEntry"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $IQuickSwapToken<T extends $ISwapEntry<(T)>> {

 "type"(): $QuickSwapType
 "swap"(arg0: $Player$Type): void
 "getList"(): $List<(T)>
 "getSelected"(): integer
 "setSelected"(arg0: integer): void
 "shrink"(arg0: integer): void
}

export namespace $IQuickSwapToken {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IQuickSwapToken$Type<T> = ($IQuickSwapToken<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IQuickSwapToken_<T> = $IQuickSwapToken$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$ResultTagShapedBuilder" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ShapedRecipeBuilder, $ShapedRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$ShapedRecipeBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$IExtendedRecipe, $IExtendedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$IExtendedRecipe"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ResultTagShapedBuilder extends $ShapedRecipeBuilder implements $IExtendedRecipe {
readonly "result": $Item
readonly "count": integer
readonly "rows": $List<(string)>
readonly "key": $Map<(character), ($Ingredient)>
readonly "advancement": $Advancement$Builder
 "group": string

constructor(arg0: $ItemStack$Type)

public "addAdditional"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
get "type"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResultTagShapedBuilder$Type = ($ResultTagShapedBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResultTagShapedBuilder_ = $ResultTagShapedBuilder$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$BurntItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BurntItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "isFoil"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BurntItem$Type = ($BurntItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BurntItem_ = $BurntItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/$GolemEventListeners" {
import {$GolemEquipEvent, $GolemEquipEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemEquipEvent"
import {$GolemThrowableEvent, $GolemThrowableEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemThrowableEvent"

export class $GolemEventListeners {

constructor()

public static "onEquip"(arg0: $GolemEquipEvent$Type): void
public static "isThrowable"(arg0: $GolemThrowableEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemEventListeners$Type = ($GolemEventListeners);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemEventListeners_ = $GolemEventListeners$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/restore/$DimensionTrace" {
import {$DimensionTraceData, $DimensionTraceData$Type} from "packages/dev/xkmc/l2backpack/content/restore/$DimensionTraceData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$LayerPopType, $LayerPopType$Type} from "packages/dev/xkmc/l2screentracker/screen/base/$LayerPopType"
import {$TrackedEntryType, $TrackedEntryType$Type} from "packages/dev/xkmc/l2screentracker/screen/track/$TrackedEntryType"

export class $DimensionTrace extends $TrackedEntryType<($DimensionTraceData)> {

constructor()

public "restoreMenuNotifyClient"(arg0: $ServerPlayer$Type, arg1: $DimensionTraceData$Type, arg2: $Component$Type): $LayerPopType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DimensionTrace$Type = ($DimensionTrace);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DimensionTrace_ = $DimensionTrace$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipeBuilder" {
import {$BaseRecipe, $BaseRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$BaseRecipe$RecType, $BaseRecipe$RecType$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe$RecType"
import {$CriterionTriggerInstance, $CriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/$CriterionTriggerInstance"

export class $BaseRecipeBuilder<T extends $BaseRecipeBuilder<(T), (Rec), (SRec), (Inv)>, Rec extends SRec, SRec extends $BaseRecipe<(any), (SRec), (Inv)>, Inv extends $Container> {

constructor(arg0: $BaseRecipe$RecType$Type<(Rec), (SRec), (Inv)>)

public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public "unlockedBy"(arg0: string, arg1: $CriterionTriggerInstance$Type): T
public "getThis"(): T
get "this"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseRecipeBuilder$Type<T, Rec, SRec, Inv> = ($BaseRecipeBuilder<(T), (Rec), (SRec), (Inv)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseRecipeBuilder_<T, Rec, SRec, Inv> = $BaseRecipeBuilder$Type<(T), (Rec), (SRec), (Inv)>;
}}
declare module "packages/dev/xkmc/l2library/serial/advancements/$CriterionBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$JsonArray, $JsonArray$Type} from "packages/com/google/gson/$JsonArray"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$CriterionTriggerInstance, $CriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/$CriterionTriggerInstance"
import {$IAdvBuilder, $IAdvBuilder$Type} from "packages/dev/xkmc/l2library/serial/advancements/$IAdvBuilder"

export class $CriterionBuilder implements $IAdvBuilder {


public "add"(arg0: $CriterionTriggerInstance$Type): $CriterionBuilder
public "add"(arg0: string, arg1: $CriterionTriggerInstance$Type): $CriterionBuilder
public static "or"(): $CriterionBuilder
public static "one"(arg0: $CriterionTriggerInstance$Type): $CriterionBuilder
public static "and"(): $CriterionBuilder
public static "item"(arg0: $Item$Type): $CriterionBuilder
public static "item"(arg0: $TagKey$Type<($Item$Type)>, arg1: $CompoundTag$Type): $CriterionBuilder
public static "item"(arg0: $ItemLike$Type, arg1: $CompoundTag$Type): $CriterionBuilder
public static "item"(arg0: $TagKey$Type<($Item$Type)>): $CriterionBuilder
public static "items"(...arg0: ($Item$Type)[]): $CriterionBuilder
/**
 * 
 * @deprecated
 */
public static "none"(): $CriterionBuilder
public "modify"(arg0: string, arg1: $Advancement$Builder$Type): void
public static "book"(arg0: $Enchantment$Type): $CriterionBuilder
public static "enchanted"(arg0: $ItemLike$Type, arg1: $Enchantment$Type): $CriterionBuilder
public static "enchanted"(arg0: $Enchantment$Type): $CriterionBuilder
public static "enchanted"(arg0: $TagKey$Type<($Item$Type)>, arg1: $Enchantment$Type): $CriterionBuilder
public "onBuild"(): void
public "addConditions"(arg0: $JsonArray$Type): void
public "modifyJson"(arg0: $JsonObject$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CriterionBuilder$Type = ($CriterionBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CriterionBuilder_ = $CriterionBuilder$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerItemHandler" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$DrawerAccess, $DrawerAccess$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$DrawerAccess"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$IDrawerHandler, $IDrawerHandler$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$IDrawerHandler"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export class $EnderDrawerItemHandler extends $Record implements $IDrawerHandler {

constructor(access: $DrawerAccess$Type, logistics: boolean)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "access"(): $DrawerAccess
public "getSlots"(): integer
public "logistics"(): boolean
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "slots"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderDrawerItemHandler$Type = ($EnderDrawerItemHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderDrawerItemHandler_ = $EnderDrawerItemHandler$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v3/$VampireBurn" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $VampireBurn extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "tick"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VampireBurn$Type = ($VampireBurn);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VampireBurn_ = $VampireBurn$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$BloodClaw" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ClawItem, $ClawItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$ClawItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BloodClaw extends $ClawItem implements $LegendaryWeapon {
static readonly "RANGE": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getMaxStack"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BloodClaw$Type = ($BloodClaw);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BloodClaw_ = $BloodClaw$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$TagGen" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistrateTagsProvider$IntrinsicImpl, $RegistrateTagsProvider$IntrinsicImpl$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider$IntrinsicImpl"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $TagGen {
static readonly "BACKPACKS": $TagKey<($Item)>
static readonly "BAGS": $TagKey<($Item)>
static readonly "DRAWERS": $TagKey<($Item)>
static readonly "SWAPS": $TagKey<($Item)>
static readonly "ENDER_CHEST": $TagKey<($Item)>
static readonly "DIMENSIONAL_STORAGES": $TagKey<($Item)>

constructor()

public static "onItemTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($Item$Type)>): void
public static "onBlockTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($Block$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TagGen$Type = ($TagGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TagGen_ = $TagGen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/sort/$SortScreen" {
import {$StackedScreen, $StackedScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$StackedScreen"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SortScreen extends $StackedScreen {
readonly "token": $ArtifactChestToken
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SortScreen$Type = ($SortScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SortScreen_ = $SortScreen$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$CustomDescEnchantment" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $CustomDescEnchantment {

 "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>

(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
}

export namespace $CustomDescEnchantment {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomDescEnchantment$Type = ($CustomDescEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomDescEnchantment_ = $CustomDescEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/curios/$CurioEntityBuilder" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SlotCondition, $SlotCondition$Type} from "packages/dev/xkmc/l2library/compat/curios/$SlotCondition"

export class $CurioEntityBuilder extends $Record {

constructor(entities: $ArrayList$Type<($ResourceLocation$Type)>, slots: $ArrayList$Type<(string)>, conditions: $ArrayList$Type<($SlotCondition$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "slots"(): $ArrayList<(string)>
public "entities"(): $ArrayList<($ResourceLocation)>
public "conditions"(): $ArrayList<($SlotCondition)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioEntityBuilder$Type = ($CurioEntityBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioEntityBuilder_ = $CurioEntityBuilder$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilitySerializer" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$GeneralCapabilityTemplate, $GeneralCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityTemplate"
import {$ICapabilitySerializable, $ICapabilitySerializable$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilitySerializable"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$GeneralCapabilityHolder, $GeneralCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityHolder"

export class $GeneralCapabilitySerializer<E extends $ICapabilityProvider, C extends $GeneralCapabilityTemplate<(E), (C)>> implements $ICapabilitySerializable<($CompoundTag)> {
readonly "holder": $GeneralCapabilityHolder<(E), (C)>
 "handler": C
 "lo": $LazyOptional<(C)>

constructor(arg0: $GeneralCapabilityHolder$Type<(E), (C)>)

public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeneralCapabilitySerializer$Type<E, C> = ($GeneralCapabilitySerializer<(E), (C)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeneralCapabilitySerializer_<E, C> = $GeneralCapabilitySerializer$Type<(E), (C)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$Config" {
import {$EntityConfig$ItemPool, $EntityConfig$ItemPool$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$ItemPool"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$SpecialConfigCondition, $SpecialConfigCondition$Type} from "packages/dev/xkmc/l2hostility/content/config/$SpecialConfigCondition"
import {$EntityConfig$Minion, $EntityConfig$Minion$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$Minion"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$EntityConfig$MasterConfig, $EntityConfig$MasterConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$MasterConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$EntityConfig$TraitBase, $EntityConfig$TraitBase$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$TraitBase"
import {$WorldDifficultyConfig$DifficultyConfig, $WorldDifficultyConfig$DifficultyConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$WorldDifficultyConfig$DifficultyConfig"

export class $EntityConfig$Config {
readonly "items": $ArrayList<($EntityConfig$ItemPool)>
 "minSpawnLevel": integer
 "maxLevel": integer
 "asMaster": $EntityConfig$MasterConfig

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $List$Type<($EntityType$Type<(any)>)>, arg1: $WorldDifficultyConfig$DifficultyConfig$Type)

public "item"(arg0: $List$Type<($EntityConfig$ItemPool$Type)>): $EntityConfig$Config
public "traits"(): $List<($EntityConfig$TraitBase)>
public "trait"(arg0: $List$Type<($EntityConfig$TraitBase$Type)>): $EntityConfig$Config
public "master"(arg0: integer, arg1: integer, ...arg2: ($EntityConfig$Minion$Type)[]): $EntityConfig$Config
public "minLevel"(arg0: integer): $EntityConfig$Config
public "conditions"(arg0: $SpecialConfigCondition$Type<(any)>): $EntityConfig$Config
public "difficulty"(): $WorldDifficultyConfig$DifficultyConfig
public "blacklist"(...arg0: ($MobTrait$Type)[]): $EntityConfig$Config
public "blacklist"(): $Set<($MobTrait)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityConfig$Config$Type = ($EntityConfig$Config);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityConfig$Config_ = $EntityConfig$Config$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$BaseShieldItem" {
import {$IShieldData, $IShieldData$Type} from "packages/dev/xkmc/l2weaponry/content/capability/$IShieldData"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$ShieldItem, $ShieldItem$Type} from "packages/net/minecraft/world/item/$ShieldItem"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BaseShieldItem extends $ShieldItem {
static readonly "KEY_LAST_DAMAGE": string
static readonly "EFFECTIVE_BLOCK_DELAY": integer
static readonly "MINIMUM_DURABILITY_DAMAGE": float
static readonly "TAG_BASE_COLOR": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer, arg2: double, arg3: boolean)

public "takeDamage"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: integer): void
public "damageShield"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: double): integer
public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "onUseTick"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "releaseUsing"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type, arg3: integer): void
public "reflect"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type): double
public "getDefenseRecover"(arg0: $ItemStack$Type): double
public "reflectImpl"(arg0: $ItemStack$Type, arg1: $DamageSource$Type, arg2: double, arg3: $IShieldData$Type, arg4: $LivingEntity$Type): double
public "getMaxDefense"(arg0: $LivingEntity$Type): double
public "lightWeight"(arg0: $ItemStack$Type): boolean
public "damageShieldImpl"(arg0: $LivingEntity$Type, arg1: $IShieldData$Type, arg2: $ItemStack$Type, arg3: double): integer
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseShieldItem$Type = ($BaseShieldItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseShieldItem_ = $BaseShieldItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken$TabFactory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export interface $FilterTabToken$TabFactory<T extends $FilterTabBase<(T)>> {

 "create"(arg0: integer, arg1: $FilterTabToken$Type<(T)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type): T

(arg0: integer, arg1: $FilterTabToken$Type<(T)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type): T
}

export namespace $FilterTabToken$TabFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilterTabToken$TabFactory$Type<T> = ($FilterTabToken$TabFactory<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilterTabToken$TabFactory_<T> = $FilterTabToken$TabFactory$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/consumable/$DrinkableBottleItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DrinkableBottleItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getUseDuration"(arg0: $ItemStack$Type): integer
public "finishUsingItem"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type): $ItemStack
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "getUseAnimation"(arg0: $ItemStack$Type): $UseAnim
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrinkableBottleItem$Type = ($DrinkableBottleItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrinkableBottleItem_ = $DrinkableBottleItem$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$SimpleMenuPvd" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$BaseBagItem, $BaseBagItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagItem"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$SimpleMenuPvd$BagMenuFactory, $SimpleMenuPvd$BagMenuFactory$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$SimpleMenuPvd$BagMenuFactory"

export class $SimpleMenuPvd implements $MenuProvider {

constructor(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $BaseBagItem$Type, arg3: $ItemStack$Type, arg4: $SimpleMenuPvd$BagMenuFactory$Type)

public "open"(): void
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleMenuPvd$Type = ($SimpleMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleMenuPvd_ = $SimpleMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2serial/network/$BasePacketHandler$LoadedPacket" {
import {$SimplePacketBase, $SimplePacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SimplePacketBase"

export class $BasePacketHandler$LoadedPacket<T extends $SimplePacketBase> {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasePacketHandler$LoadedPacket$Type<T> = ($BasePacketHandler$LoadedPacket<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasePacketHandler$LoadedPacket_<T> = $BasePacketHandler$LoadedPacket$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$LangData" {
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $LangData extends $Enum<($LangData)> {
static readonly "SHIFT": $LangData
static readonly "LV": $LangData
static readonly "TOOLTIP_DISABLE": $LangData
static readonly "TOOLTIP_SELF_EFFECT": $LangData
static readonly "TOOLTIP_TARGET_EFFECT": $LangData
static readonly "TOOLTIP_LEGENDARY": $LangData
static readonly "TOOLTIP_MIN_LEVEL": $LangData
static readonly "TOOLTIP_LEVEL_COST": $LangData
static readonly "TOOLTIP_WEIGHT": $LangData
static readonly "TOOLTIP_BANNED": $LangData
static readonly "TOOLTIP_SEAL_DATA": $LangData
static readonly "TOOLTIP_SEAL_TIME": $LangData
static readonly "TOOLTIP_WITCH_CHARGE": $LangData
static readonly "TOOLTIP_WITCH_ETERNAL": $LangData
static readonly "TOOLTIP_WITCH_BOTTLE": $LangData
static readonly "ITEM_WAND_AI": $LangData
static readonly "ITEM_WAND_EQUIPMENT": $LangData
static readonly "ITEM_WAND_TARGET": $LangData
static readonly "ITEM_WAND_ADDER": $LangData
static readonly "ITEM_GLASSES": $LangData
static readonly "ITEM_DETECTOR": $LangData
static readonly "ITEM_SECTION_RENDER": $LangData
static readonly "ITEM_ORB_USE": $LangData
static readonly "ITEM_SPAWNER": $LangData
static readonly "ITEM_ORB": $LangData
static readonly "ITEM_BOTTLE_CURSE": $LangData
static readonly "ITEM_BOTTLE_SANITY": $LangData
static readonly "ITEM_BOOK_COPY": $LangData
static readonly "ITEM_BOOK_EVERYTHING_SHIFT": $LangData
static readonly "ITEM_BOOK_EVERYTHING_USE": $LangData
static readonly "ITEM_BOOK_EVERYTHING_INVALID": $LangData
static readonly "ITEM_BOOK_EVERYTHING_READY": $LangData
static readonly "ITEM_BOOK_EVERYTHING_FORBIDDEN": $LangData
static readonly "ITEM_CHARM_ENVY": $LangData
static readonly "ITEM_CHARM_GLUTTONY": $LangData
static readonly "ITEM_CHARM_GREED": $LangData
static readonly "ITEM_CHARM_LUST": $LangData
static readonly "ITEM_CHARM_PRIDE": $LangData
static readonly "ITEM_CHARM_SLOTH": $LangData
static readonly "ITEM_CHARM_WRATH": $LangData
static readonly "ITEM_CHARM_ADD_LEVEL": $LangData
static readonly "ITEM_CHARM_NO_DROP": $LangData
static readonly "ITEM_CHARM_TRAIT_CHEAP": $LangData
static readonly "ITEM_RING_OCEAN": $LangData
static readonly "ITEM_RING_LIFE": $LangData
static readonly "ITEM_RING_DIVINITY": $LangData
static readonly "ITEM_RING_REFLECTION": $LangData
static readonly "ITEM_FLAME_THORN": $LangData
static readonly "ITEM_IMAGINE_BREAKER": $LangData
static readonly "ITEM_PLATINUM_STAR": $LangData
static readonly "ITEM_WITCH_WAND": $LangData
static readonly "ITEM_RING_CORROSION": $LangData
static readonly "ITEM_RING_CORROSION_NEG": $LangData
static readonly "ITEM_RING_INCARCERATION": $LangData
static readonly "ITEM_RING_HEALING": $LangData
static readonly "ABRAHADABRA": $LangData
static readonly "NIDHOGGUR": $LangData
static readonly "POCKET_OF_RESTORATION": $LangData
static readonly "LOOTING_CHARM": $LangData
static readonly "ABYSSAL_THORN": $LangData
static readonly "DIVINITY_CROSS": $LangData
static readonly "DIVINITY_LIGHT": $LangData
static readonly "MSG_AI": $LangData
static readonly "MSG_SET_TARGET": $LangData
static readonly "MSG_TARGET_FAIL": $LangData
static readonly "MSG_TARGET_RECORD": $LangData
static readonly "MSG_SET_TRAIT": $LangData
static readonly "MSG_SELECT_TRAIT": $LangData
static readonly "MSG_ERR_MAX": $LangData
static readonly "MSG_ERR_DISALLOW": $LangData
static readonly "INFO_PLAYER_LEVEL": $LangData
static readonly "INFO_PLAYER_EXP": $LangData
static readonly "INFO_PLAYER_CAP": $LangData
static readonly "INFO_CHUNK_LEVEL": $LangData
static readonly "INFO_CHUNK_SCALE": $LangData
static readonly "INFO_CHUNK_CLEAR": $LangData
static readonly "INFO_TAB_TITLE": $LangData
static readonly "INFO_REWARD": $LangData
static readonly "INFO_PLAYER_ADAPTIVE_LEVEL": $LangData
static readonly "INFO_PLAYER_DIM_LEVEL": $LangData
static readonly "INFO_PLAYER_ITEM_LEVEL": $LangData
static readonly "INFO_PLAYER_EXT_LEVEL": $LangData
static readonly "INFO_SECTION_DIM_LEVEL": $LangData
static readonly "INFO_SECTION_BIOME_LEVEL": $LangData
static readonly "INFO_SECTION_ADAPTIVE_LEVEL": $LangData
static readonly "INFO_SECTION_DISTANCE_LEVEL": $LangData
static readonly "BOSS_EVENT": $LangData
static readonly "LOOT_TITLE": $LangData
static readonly "LOOT_CHANCE": $LangData
static readonly "LOOT_MIN_LEVEL": $LangData
static readonly "LOOT_MIN_HEALTH": $LangData
static readonly "LOOT_NO_TRAIT": $LangData
static readonly "LOOT_OTHER_TRAIT": $LangData
static readonly "TOOLTIP_JEI_ENVY": $LangData
static readonly "TOOLTIP_JEI_GLUTTONY": $LangData
static readonly "TOOLTIP_JEI_REQUIRED": $LangData
static readonly "COMMAND_PLAYER_SUCCEED": $LangData
static readonly "COMMAND_PLAYER_FAIL": $LangData
static readonly "COMMAND_PLAYER_GET_BASE": $LangData
static readonly "COMMAND_PLAYER_GET_TOTAL": $LangData
static readonly "COMMAND_PLAYER_GET_DIM": $LangData
static readonly "COMMAND_PLAYER_GET_TRAIT_CAP": $LangData
static readonly "COMMAND_REGION_SUCCEED": $LangData
static readonly "COMMAND_REGION_LOCAL_OFF": $LangData
static readonly "COMMAND_REGION_COUNT": $LangData
static readonly "COMMAND_REGION_GET_BASE": $LangData
static readonly "COMMAND_REGION_GET_TOTAL": $LangData
static readonly "COMMAND_REGION_GET_SCALE": $LangData
static readonly "COMMAND_REGION_CLEAR": $LangData
static readonly "COMMAND_REGION_NOT_CLEAR": $LangData
static readonly "COMMAND_MOB_SUCCEED": $LangData
static readonly "COMMAND_INVALID_TRAIT": $LangData
static readonly "PATCHOULI_TITLE": $LangData
static readonly "PATCHOULI_LANDING": $LangData


public "get"(...arg0: (any)[]): $MutableComponent
public static "values"(): ($LangData)[]
public static "valueOf"(arg0: string): $LangData
public static "item"(arg0: $ItemStack$Type): $MutableComponent
public static "asId"(arg0: string): string
public static "addTranslations"(arg0: $RegistrateLangProvider$Type): void
public static "translate"(arg0: string, ...arg1: (any)[]): $MutableComponent
public static "orbUse"(): $MutableComponent
public static "sectionRender"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LangData$Type = (("command_region_succeed") | ("shift") | ("boss_event") | ("item_charm_sloth") | ("patchouli_landing") | ("info_section_dim_level") | ("command_region_get_scale") | ("item_book_everything_invalid") | ("item_ring_reflection") | ("command_player_get_total") | ("msg_set_target") | ("info_player_level") | ("item_bottle_sanity") | ("msg_ai") | ("msg_target_fail") | ("abyssal_thorn") | ("item_book_everything_forbidden") | ("command_region_get_total") | ("item_charm_add_level") | ("command_region_not_clear") | ("tooltip_jei_gluttony") | ("item_ring_incarceration") | ("tooltip_banned") | ("item_charm_trait_cheap") | ("tooltip_min_level") | ("nidhoggur") | ("info_tab_title") | ("info_player_adaptive_level") | ("divinity_light") | ("loot_min_health") | ("abrahadabra") | ("item_ring_divinity") | ("info_section_adaptive_level") | ("command_region_clear") | ("loot_title") | ("item_ring_corrosion_neg") | ("tooltip_jei_required") | ("tooltip_witch_charge") | ("command_player_get_dim") | ("item_glasses") | ("item_flame_thorn") | ("item_wand_target") | ("looting_charm") | ("info_player_ext_level") | ("item_charm_envy") | ("info_chunk_clear") | ("item_wand_ai") | ("item_book_copy") | ("item_book_everything_shift") | ("command_region_local_off") | ("tooltip_target_effect") | ("item_book_everything_use") | ("loot_min_level") | ("item_spawner") | ("loot_other_trait") | ("patchouli_title") | ("item_book_everything_ready") | ("item_ring_life") | ("tooltip_self_effect") | ("command_player_fail") | ("command_region_count") | ("item_orb") | ("lv") | ("item_charm_gluttony") | ("msg_err_max") | ("tooltip_seal_data") | ("tooltip_witch_bottle") | ("command_region_get_base") | ("item_charm_wrath") | ("info_section_biome_level") | ("item_charm_greed") | ("item_charm_lust") | ("tooltip_seal_time") | ("tooltip_disable") | ("item_ring_ocean") | ("tooltip_legendary") | ("item_platinum_star") | ("item_charm_pride") | ("item_charm_no_drop") | ("item_section_render") | ("info_player_exp") | ("msg_err_disallow") | ("loot_no_trait") | ("item_wand_adder") | ("item_imagine_breaker") | ("msg_select_trait") | ("command_player_get_trait_cap") | ("pocket_of_restoration") | ("info_chunk_scale") | ("msg_target_record") | ("command_mob_succeed") | ("msg_set_trait") | ("item_witch_wand") | ("item_ring_healing") | ("item_ring_corrosion") | ("command_player_succeed") | ("tooltip_level_cost") | ("tooltip_jei_envy") | ("tooltip_weight") | ("info_chunk_level") | ("item_wand_equipment") | ("info_reward") | ("item_orb_use") | ("loot_chance") | ("info_player_item_level") | ("command_invalid_trait") | ("item_detector") | ("info_player_cap") | ("command_player_get_base") | ("divinity_cross") | ("info_section_distance_level") | ("item_bottle_curse") | ("info_player_dim_level") | ("tooltip_witch_eternal")) | ($LangData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LangData_ = $LangData$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/advancements/$AdvancementGenerator" {
import {$RegistrateAdvancementProvider, $RegistrateAdvancementProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateAdvancementProvider"

export class $AdvancementGenerator {

constructor(arg0: $RegistrateAdvancementProvider$Type, arg1: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancementGenerator$Type = ($AdvancementGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancementGenerator_ = $AdvancementGenerator$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$FireChargeItem$BlockFire" {
import {$BaseFireball, $BaseFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$BaseFireball"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export interface $FireChargeItem$BlockFire<T extends $BaseFireball<(T)>> {

 "create"(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: $Level$Type): T

(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: $Level$Type): T
}

export namespace $FireChargeItem$BlockFire {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireChargeItem$BlockFire$Type<T> = ($FireChargeItem$BlockFire<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireChargeItem$BlockFire_<T> = $FireChargeItem$BlockFire$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$IronGolem$Crackiness, $IronGolem$Crackiness$Type} from "packages/net/minecraft/world/entity/animal/$IronGolem$Crackiness"
import {$MetalGolemPartType, $MetalGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemPartType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SweepGolemEntity, $SweepGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$SweepGolemEntity"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MetalGolemEntity extends $SweepGolemEntity<($MetalGolemEntity), ($MetalGolemPartType)> {
 "inventoryTick": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<($MetalGolemEntity$Type)>, arg1: $Level$Type)

public "handleEntityEvent"(arg0: byte): void
public "aiStep"(): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "checkSpawnObstruction"(arg0: $LevelReader$Type): boolean
public "getAttackAnimationTick"(): integer
public "getCrackiness"(): $IronGolem$Crackiness
public "getLeashOffset"(): $Vec3
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "getTarget"(): $LivingEntity
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "attackAnimationTick"(): integer
get "crackiness"(): $IronGolem$Crackiness
get "leashOffset"(): $Vec3
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalGolemEntity$Type = ($MetalGolemEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalGolemEntity_ = $MetalGolemEntity$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$TripleStripCape" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TripleStripCape extends $CurioItem implements $ICurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "hasCurioCapability"(arg0: $ItemStack$Type): boolean
public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "canUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type, arg1: $ItemStack$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "writeSyncData"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public "writeSyncData"(arg0: $ItemStack$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: $ItemStack$Type): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "canEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type, arg2: $ItemStack$Type): boolean
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type, arg2: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TripleStripCape$Type = ($TripleStripCape);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TripleStripCape_ = $TripleStripCape$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$ISideInfoRenderer" {
import {$ISwapEntry, $ISwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISwapEntry"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SelectionSideBar$Context, $SelectionSideBar$Context$Type} from "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar$Context"

export interface $ISideInfoRenderer {

 "renderSide"(arg0: $SelectionSideBar$Context$Type, arg1: integer, arg2: integer, arg3: $Player$Type, arg4: $ISwapEntry$Type<(any)>): void

(arg0: $SelectionSideBar$Context$Type, arg1: integer, arg2: integer, arg3: $Player$Type, arg4: $ISwapEntry$Type<(any)>): void
}

export namespace $ISideInfoRenderer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISideInfoRenderer$Type = ($ISideInfoRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISideInfoRenderer_ = $ISideInfoRenderer$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$ForceFieldLayer" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EnergySwirlLayer, $EnergySwirlLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$EnergySwirlLayer"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ForceFieldLayer<T extends $AbstractGolemEntity<(T), (any)>, M extends $EntityModel<(T)>> extends $EnergySwirlLayer<(T), (M)> {

constructor(arg0: $RenderLayerParent$Type<(T), (M)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
public static "registerLayer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForceFieldLayer$Type<T, M> = ($ForceFieldLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForceFieldLayer_<T, M> = $ForceFieldLayer$Type<(T), (M)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/skin/$PlayerSkinRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractGolemRenderer, $AbstractGolemRenderer$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$HumanoidGolemRenderer, $HumanoidGolemRenderer$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemRenderer"

export class $PlayerSkinRenderer extends $HumanoidGolemRenderer {
static "REGULAR": $PlayerSkinRenderer
static "SLIM": $PlayerSkinRenderer
static readonly "LIST": $List<($Function<($AbstractGolemRenderer<(any), (any), (any)>), ($RenderLayer<(any), (any)>)>)>
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: boolean)

public "render"(arg0: $HumanoidGolemEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $HumanoidGolemEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerSkinRenderer$Type = ($PlayerSkinRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerSkinRenderer_ = $PlayerSkinRenderer$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$LCConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $LCConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCConfigGen$Type = ($LCConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCConfigGen_ = $LCConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/entries/$TraitEntry" {
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$LHRegistrate, $LHRegistrate$Type} from "packages/dev/xkmc/l2hostility/init/entries/$LHRegistrate"

export class $TraitEntry<T extends $MobTrait> extends $RegistryEntry<(T)> {

constructor(arg0: $LHRegistrate$Type, arg1: $RegistryObject$Type<(T)>)

public static "of"<T>(arg0: $Supplier$Type<(T)>, arg1: $NonNullSupplier$Type<(string)>): $NonNullSupplier<(T)>
public static "of"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
public static "lazy"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitEntry$Type<T> = ($TraitEntry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitEntry_<T> = $TraitEntry$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/misc/$ArtifactChestItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ArtifactChestItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public static "getContent"(arg0: $ItemStack$Type): $List<($ItemStack)>
public static "getFilter"(arg0: $ItemStack$Type): $CompoundTag
public static "setFilter"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): void
public static "setContent"(arg0: $ItemStack$Type, arg1: $List$Type<($ItemStack$Type)>): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "canFitInsideContainerItems"(): boolean
public static "getExp"(arg0: $ItemStack$Type): integer
public static "setExp"(arg0: $ItemStack$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactChestItem$Type = ($ArtifactChestItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactChestItem_ = $ArtifactChestItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapData" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ArtifactSwapData$SwapSlot, $ArtifactSwapData$SwapSlot$Type} from "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapData$SwapSlot"

export class $ArtifactSwapData {
readonly "contents": ($ArtifactSwapData$SwapSlot)[]
 "select": integer

constructor()

public "swap"(arg0: $Player$Type): void
public "onInject"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSwapData$Type = ($ArtifactSwapData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSwapData_ = $ArtifactSwapData$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IToolStats" {
import {$ITool, $ITool$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ITool"

export interface $IToolStats {

 "durability"(): integer
 "getSpeed"(arg0: $ITool$Type): float
 "getDamage"(arg0: $ITool$Type): integer
 "enchant"(): integer
 "speed"(): integer
}

export namespace $IToolStats {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IToolStats$Type = ($IToolStats);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IToolStats_ = $IToolStats$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attributes/$WrappedAttribute" {
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$RangedAttribute, $RangedAttribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$RangedAttribute"
import {$AttributeModifier$Operation, $AttributeModifier$Operation$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier$Operation"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $WrappedAttribute extends $RangedAttribute {
static readonly "MAX_NAME_LENGTH": integer

constructor(arg0: string, arg1: double, arg2: double, arg3: double)

public "getWrappedValue"(arg0: $LivingEntity$Type): double
public "setSyncable"(arg0: boolean): $WrappedAttribute
public static "isNullOrAddition"(arg0: $AttributeModifier$Operation$Type): boolean
public static "toValueComponent"(arg0: $Attribute$Type, arg1: $AttributeModifier$Operation$Type, arg2: double, arg3: $TooltipFlag$Type): $MutableComponent
public static "toComponent"(arg0: $Attribute$Type, arg1: $AttributeModifier$Type, arg2: $TooltipFlag$Type): $MutableComponent
public static "toBaseComponent"(arg0: $Attribute$Type, arg1: double, arg2: double, arg3: boolean, arg4: $TooltipFlag$Type): $MutableComponent
set "syncable"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrappedAttribute$Type = ($WrappedAttribute);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrappedAttribute_ = $WrappedAttribute$Type;
}}
declare module "packages/dev/xkmc/l2library/util/nbt/$NBTList" {
import {$NBTObj, $NBTObj$Type} from "packages/dev/xkmc/l2library/util/nbt/$NBTObj"

export class $NBTList<T> {


public "add"(): $NBTObj
public "get"(arg0: integer): $NBTObj
public "size"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTList$Type<T> = ($NBTList<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTList_<T> = $NBTList$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe" {
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSmithingRecipe$Serializer, $AbstractSmithingRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe$Serializer"
import {$SmithingTransformRecipe, $SmithingTransformRecipe$Type} from "packages/net/minecraft/world/item/crafting/$SmithingTransformRecipe"

export class $AbstractSmithingRecipe<T extends $AbstractSmithingRecipe<(T)>> extends $SmithingTransformRecipe {
static readonly "TEMPLATE_PLACEHOLDER": $Ingredient
readonly "template": $Ingredient
readonly "base": $Ingredient
readonly "addition": $Ingredient
readonly "result": $ItemStack

constructor(arg0: $ResourceLocation$Type, arg1: $Ingredient$Type, arg2: $Ingredient$Type, arg3: $ItemStack$Type)

public "getSerializer"(): $AbstractSmithingRecipe$Serializer<(T)>
get "serializer"(): $AbstractSmithingRecipe$Serializer<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSmithingRecipe$Type<T> = ($AbstractSmithingRecipe<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSmithingRecipe_<T> = $AbstractSmithingRecipe$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/twilightforest/$IronwoodTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $IronwoodTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronwoodTool$Type = ($IronwoodTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronwoodTool_ = $IronwoodTool$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/recipe/$MultiSwitchCraftRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$AbstractShapedRecipe$Serializer, $AbstractShapedRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe$Serializer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$AbstractShapedRecipe, $AbstractShapedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $MultiSwitchCraftRecipe extends $AbstractShapedRecipe<($MultiSwitchCraftRecipe)> {
readonly "width": integer
readonly "height": integer
readonly "result": $ItemStack

constructor(arg0: $ResourceLocation$Type, arg1: string, arg2: integer, arg3: integer, arg4: $NonNullList$Type<($Ingredient$Type)>, arg5: $ItemStack$Type)

public "getSerializer"(): $AbstractShapedRecipe$Serializer<($MultiSwitchCraftRecipe)>
public "assemble"(arg0: $CraftingContainer$Type, arg1: $RegistryAccess$Type): $ItemStack
get "serializer"(): $AbstractShapedRecipe$Serializer<($MultiSwitchCraftRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiSwitchCraftRecipe$Type = ($MultiSwitchCraftRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiSwitchCraftRecipe_ = $MultiSwitchCraftRecipe$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/special/$PickupGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $PickupGoal extends $Goal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer)

public "canUse"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupGoal$Type = ($PickupGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupGoal_ = $PickupGoal$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry" {
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ArtifactSetConfig$SetBuilder, $ArtifactSetConfig$SetBuilder$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$SetBuilder"
import {$ArtifactRegistrate, $ArtifactRegistrate$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$ArtifactRegistrate"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $SetEntry<T extends $ArtifactSet> extends $RegistryEntry<(T)> {
readonly "items": (($ItemEntry<($BaseArtifact)>)[])[]
readonly "builder": $Consumer<($ArtifactSetConfig$SetBuilder)>

constructor(arg0: $ArtifactRegistrate$Type, arg1: $RegistryObject$Type<(T)>, arg2: (($ItemEntry$Type<($BaseArtifact$Type)>)[])[], arg3: $Consumer$Type<($ArtifactSetConfig$SetBuilder$Type)>)

public "getItem"(arg0: integer, arg1: integer): $ItemStack
public "hasRank"(arg0: integer): boolean
public static "of"<T>(arg0: $Supplier$Type<(T)>, arg1: $NonNullSupplier$Type<(string)>): $NonNullSupplier<(T)>
public static "of"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
public static "lazy"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetEntry$Type<T> = ($SetEntry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetEntry_<T> = $SetEntry$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/content/item/create/$ShadowSteelItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$NoGravMagicalDohickyItem, $NoGravMagicalDohickyItem$Type} from "packages/dev/xkmc/l2complements/content/item/create/$NoGravMagicalDohickyItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ShadowSteelItem extends $NoGravMagicalDohickyItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MutableComponent$Type)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShadowSteelItem$Type = ($ShadowSteelItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShadowSteelItem_ = $ShadowSteelItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/upgrade/$UpgradeMenu" {
import {$IntDataSlot, $IntDataSlot$Type} from "packages/dev/xkmc/l2library/base/menu/data/$IntDataSlot"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$IFilterMenu, $IFilterMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$IFilterMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $UpgradeMenu extends $BaseContainerMenu<($UpgradeMenu)> implements $IFilterMenu {
readonly "token": $ArtifactChestToken
readonly "player": $Player
readonly "experience": $IntDataSlot
readonly "exp_cost": $IntDataSlot
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $ArtifactChestToken$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($UpgradeMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $UpgradeMenu
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
public "slotsChanged"(arg0: $Container$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeMenu$Type = ($UpgradeMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeMenu_ = $UpgradeMenu$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/immunes/$DamageCapModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $DamageCapModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onDamaged"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingDamageEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageCapModifier$Type = ($DamageCapModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageCapModifier_ = $DamageCapModifier$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/type/$BlockMethod" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $BlockMethod {

}

export namespace $BlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockMethod$Type = ($BlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockMethod_ = $BlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2library/util/$Proxy" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$LocalPlayer, $LocalPlayer$Type} from "packages/net/minecraft/client/player/$LocalPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export class $Proxy {

constructor()

public static "getClientWorld"(): $ClientLevel
/**
 * 
 * @deprecated
 */
public static "getWorld"(): $Level
public static "getClientPlayer"(): $LocalPlayer
public static "getServer"(): $Optional<($MinecraftServer)>
/**
 * 
 * @deprecated
 */
public static "getPlayer"(): $Player
get "clientWorld"(): $ClientLevel
get "world"(): $Level
get "clientPlayer"(): $LocalPlayer
get "server"(): $Optional<($MinecraftServer)>
get "player"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Proxy$Type = ($Proxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Proxy_ = $Proxy$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ArtifactStats, $ArtifactStats$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactStats"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Upgrade, $Upgrade$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$Upgrade"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$RankedItem, $RankedItem$Type} from "packages/dev/xkmc/l2artifacts/content/core/$RankedItem"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ArtifactSlot, $ArtifactSlot$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BaseArtifact extends $RankedItem {
static readonly "KEY": string
static readonly "UPGRADE": string
readonly "set": $Supplier<($ArtifactSet)>
readonly "slot": $Supplier<($ArtifactSlot)>
readonly "rank": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($ArtifactSet$Type)>, arg2: $Supplier$Type<($ArtifactSlot$Type)>, arg3: integer)

public "resolve"(arg0: $ItemStack$Type, arg1: boolean, arg2: $RandomSource$Type): $InteractionResultHolder<($ItemStack)>
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
public static "getStats"(arg0: $ItemStack$Type): $Optional<($ArtifactStats)>
public static "upgrade"(arg0: $ItemStack$Type, arg1: integer, arg2: $RandomSource$Type): void
public static "getUpgrade"(arg0: $ItemStack$Type): $Optional<($Upgrade)>
public static "setUpgrade"(arg0: $ItemStack$Type, arg1: $Upgrade$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseArtifact$Type = ($BaseArtifact);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseArtifact_ = $BaseArtifact$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$GeneralCapabilityTemplate, $GeneralCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityTemplate"

export class $PlayerCapabilityTemplate<T extends $PlayerCapabilityTemplate<(T)>> extends $GeneralCapabilityTemplate<($Player), (T)> {
 "player": $Player
 "world": $Level

constructor()

public "init"(): void
public "tick"(): void
public "onClone"(arg0: boolean): void
public "preInject"(): void
public "getThis"(): T
get "this"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerCapabilityTemplate$Type<T> = ($PlayerCapabilityTemplate<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerCapabilityTemplate_<T> = $PlayerCapabilityTemplate$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$AncientRemnantSandstormModifier" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $AncientRemnantSandstormModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onRegisterGoals"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer, arg2: $BiConsumer$Type<(integer), ($Goal$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AncientRemnantSandstormModifier$Type = ($AncientRemnantSandstormModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AncientRemnantSandstormModifier_ = $AncientRemnantSandstormModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/client/pose/$MetalGolemPose" {
import {$MetalGolemEntity, $MetalGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemEntity"
import {$MetalGolemModel, $MetalGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemModel"

export class $MetalGolemPose {
static readonly "DEFAULT": $MetalGolemPose

constructor()

public "aggressive"(arg0: $MetalGolemEntity$Type, arg1: $MetalGolemModel$Type, arg2: float, arg3: float, arg4: float): void
public "attackModel"(arg0: $MetalGolemEntity$Type, arg1: $MetalGolemModel$Type, arg2: float): void
public "walking"(arg0: $MetalGolemEntity$Type, arg1: $MetalGolemModel$Type, arg2: float, arg3: float, arg4: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalGolemPose$Type = ($MetalGolemPose);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalGolemPose_ = $MetalGolemPose$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/data/$MowzieData" {
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"

export class $MowzieData {

constructor()

public static "genConfig"(arg0: $ConfigDataProvider$Collector$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MowzieData$Type = ($MowzieData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MowzieData_ = $MowzieData$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatToolType" {
import {$IToolStats, $IToolStats$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IToolStats"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$ToolConfig, $ToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ToolConfig"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"

export interface $IMatToolType {

 "getToolStats"(): $IToolStats
 "getExtraToolConfig"(): $ExtraToolConfig
 "getToolConfig"(): $ToolConfig
 "getTier"(): $Tier
}

export namespace $IMatToolType {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMatToolType$Type = ($IMatToolType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMatToolType_ = $IMatToolType$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfEnvy" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CurseOfEnvy extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getExtraLevel"(): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
get "extraLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseOfEnvy$Type = ($CurseOfEnvy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseOfEnvy_ = $CurseOfEnvy$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$LHDamageTypes" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$DamageTypeAndTagsGen, $DamageTypeAndTagsGen$Type} from "packages/dev/xkmc/l2damagetracker/init/data/$DamageTypeAndTagsGen"

export class $LHDamageTypes extends $DamageTypeAndTagsGen {
static readonly "KILLER_AURA": $ResourceKey<($DamageType)>

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg2: $ExistingFileHelper$Type)

public static "register"(): void
public static "forKey"(arg0: $Level$Type, arg1: $ResourceKey$Type<($DamageType$Type)>): $Holder<($DamageType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHDamageTypes$Type = ($LHDamageTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHDamageTypes_ = $LHDamageTypes$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/merged/$MultiSwitchMenu" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BaseBagMenu, $BaseBagMenu$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $MultiSwitchMenu extends $BaseBagMenu<($MultiSwitchMenu)> {
static readonly "MANAGERS": $SpriteManager
readonly "item_slot": $PlayerSlot<(any)>
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $PlayerSlot$Type<(any)>, arg3: $UUID$Type, arg4: $Component$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($MultiSwitchMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $MultiSwitchMenu
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiSwitchMenu$Type = ($MultiSwitchMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiSwitchMenu_ = $MultiSwitchMenu$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$DivinityLight" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$PlayerDifficulty, $PlayerDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/player/$PlayerDifficulty"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DivinityLight extends $CurseCurioItem implements $ICurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getGrowFactor"(arg0: $ItemStack$Type, arg1: $PlayerDifficulty$Type, arg2: $MobTraitCap$Type): double
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DivinityLight$Type = ($DivinityLight);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DivinityLight_ = $DivinityLight$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$SetBuilder" {
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"

export interface $ArtifactSetConfig$SetBuilder {

 "add"(arg0: integer, arg1: $SetEffect$Type): $ArtifactSetConfig$SetBuilder
 "add_impl"(arg0: integer, arg1: $SetEffect$Type): void

(arg0: integer, arg1: $SetEffect$Type): $ArtifactSetConfig$SetBuilder
}

export namespace $ArtifactSetConfig$SetBuilder {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSetConfig$SetBuilder$Type = ($ArtifactSetConfig$SetBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSetConfig$SetBuilder_ = $ArtifactSetConfig$SetBuilder$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/config/$GolemPartConfig" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$GolemStatType, $GolemStatType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemStatType"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$GolemType, $GolemType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GolemPartConfig$PartBuilder, $GolemPartConfig$PartBuilder$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemPartConfig$PartBuilder"
import {$GolemPartConfig$HolderBuilder, $GolemPartConfig$HolderBuilder$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemPartConfig$HolderBuilder"

export class $GolemPartConfig extends $BaseConfig {
 "filters": $HashMap<($Item), ($HashMap<($StatFilterType), (double)>)>
 "magnifiers": $HashMap<($ResourceLocation), ($HashMap<($GolemStatType), (double)>)>

constructor()

public static "get"(): $GolemPartConfig
public "getFilter"(arg0: $GolemPart$Type<(any), (any)>): $HashMap<($StatFilterType), (double)>
public "addPart"(arg0: $GolemPart$Type<(any), (any)>): $GolemPartConfig$PartBuilder
public "getMagnifier"(arg0: $GolemType$Type<(any), (any)>): $HashMap<($GolemStatType), (double)>
public "addEntity"(arg0: $GolemType$Type<(any), (any)>): $GolemPartConfig$HolderBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemPartConfig$Type = ($GolemPartConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemPartConfig_ = $GolemPartConfig$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/wand/$TargetSelectWand" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseWand, $BaseWand$Type} from "packages/dev/xkmc/l2hostility/content/item/wand/$BaseWand"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TargetSelectWand extends $BaseWand {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "clickTarget"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetSelectWand$Type = ($TargetSelectWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetSelectWand_ = $TargetSelectWand$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/one/$AnalogOutputBlockMethod" {
import {$SingletonBlockMethod, $SingletonBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$SingletonBlockMethod"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $AnalogOutputBlockMethod extends $SingletonBlockMethod {

 "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
 "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean

(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
}

export namespace $AnalogOutputBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnalogOutputBlockMethod$Type = ($AnalogOutputBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnalogOutputBlockMethod_ = $AnalogOutputBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2library/init/$L2LibraryConfig$Client" {
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"

export class $L2LibraryConfig$Client {
readonly "infoAlpha": $ForgeConfigSpec$DoubleValue
readonly "infoAnchor": $ForgeConfigSpec$IntValue
readonly "infoMaxWidth": $ForgeConfigSpec$DoubleValue
readonly "selectionDisplayRequireShift": $ForgeConfigSpec$BooleanValue
readonly "selectionScrollRequireShift": $ForgeConfigSpec$BooleanValue


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2LibraryConfig$Client$Type = ($L2LibraryConfig$Client);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2LibraryConfig$Client_ = $L2LibraryConfig$Client$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/mobeffects/$EffectDesc" {
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $EffectDesc {

constructor()

public static "getDesc"(arg0: $MobEffectInstance$Type, arg1: boolean): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectDesc$Type = ($EffectDesc);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectDesc_ = $EffectDesc$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/registrate/$LCRecipes" {
import {$BurntRecipe, $BurntRecipe$Type} from "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipe"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$DiffusionRecipe$Inv, $DiffusionRecipe$Inv$Type} from "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipe$Inv"
import {$DiffusionRecipe, $DiffusionRecipe$Type} from "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipe"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$BurntRecipe$Inv, $BurntRecipe$Inv$Type} from "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipe$Inv"
import {$BaseRecipe$RecType, $BaseRecipe$RecType$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe$RecType"

export class $LCRecipes {
static "RT_BURNT": $RegistryEntry<($RecipeType<($BurntRecipe)>)>
static "RT_DIFFUSION": $RegistryEntry<($RecipeType<($DiffusionRecipe)>)>
static readonly "RS_BURNT": $RegistryEntry<($BaseRecipe$RecType<($BurntRecipe), ($BurntRecipe), ($BurntRecipe$Inv)>)>
static readonly "RS_DIFFUSION": $RegistryEntry<($BaseRecipe$RecType<($DiffusionRecipe), ($DiffusionRecipe), ($DiffusionRecipe$Inv)>)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCRecipes$Type = ($LCRecipes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCRecipes_ = $LCRecipes$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/materials/$LegendaryTool" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$LegendaryToolFactory, $LegendaryToolFactory$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LegendaryToolFactory"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$LWToolMats, $LWToolMats$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolMats"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$ITool, $ITool$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ITool"

export class $LegendaryTool<T extends $Item> extends $Record implements $ITool {

constructor(type: $LWToolTypes$Type, tool: $LegendaryToolFactory$Type<(T)>)

public "type"(): $LWToolTypes
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "create"(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type): $Item
public "parse"(arg0: $LWToolMats$Type, arg1: $Item$Properties$Type): T
public "getSpeed"(arg0: float): float
public "getDamage"(arg0: integer): integer
public "tool"(): $LegendaryToolFactory<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LegendaryTool$Type<T> = ($LegendaryTool<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LegendaryTool_<T> = $LegendaryTool$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$AnalogSignalTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"
import {$AnalogSignalTrigger, $AnalogSignalTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$AnalogSignalTrigger"

export class $AnalogSignalTrigger$Ins extends $BaseCriterionInstance<($AnalogSignalTrigger$Ins), ($AnalogSignalTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnalogSignalTrigger$Ins$Type = ($AnalogSignalTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnalogSignalTrigger$Ins_ = $AnalogSignalTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$BaseDrawerItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PickupBagItem, $PickupBagItem$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupBagItem"
import {$OverlayInsertItem, $OverlayInsertItem$Type} from "packages/dev/xkmc/l2backpack/content/insert/$OverlayInsertItem"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $BaseDrawerItem extends $PickupBagItem, $OverlayInsertItem {

 "insert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $Player$Type): void
 "backgroundLoc"(): $ResourceLocation
 "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
 "takeItem"(arg0: $ItemStack$Type, arg1: integer, arg2: $Player$Type, arg3: boolean): $ItemStack
 "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
 "canSetNewItem"(arg0: $ItemStack$Type): boolean
 "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
 "mayClientTake"(): boolean
 "setItem"(arg0: $ItemStack$Type, arg1: $Item$Type, arg2: $Player$Type): void
 "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
 "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
}

export namespace $BaseDrawerItem {
const KEY: string
const STACKING: string
const MAX_FACTOR: integer
function getItem(arg0: $ItemStack$Type): $Item
function getStacking(arg0: $CompoundTag$Type): integer
function getStacking(): integer
function getStacking(arg0: $ItemStack$Type): integer
function loadFromInventory(arg0: integer, arg1: integer, arg2: $Item$Type, arg3: $Player$Type): integer
function getStackingFactor(arg0: $ItemStack$Type): integer
function setStackingFactor(arg0: $ItemStack$Type, arg1: integer): $ItemStack
function canAccept(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseDrawerItem$Type = ($BaseDrawerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseDrawerItem_ = $BaseDrawerItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/loot/$TraitGLMProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$EnvyLootModifier, $EnvyLootModifier$Type} from "packages/dev/xkmc/l2hostility/init/loot/$EnvyLootModifier"
import {$GluttonyLootModifier, $GluttonyLootModifier$Type} from "packages/dev/xkmc/l2hostility/init/loot/$GluttonyLootModifier"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$GlobalLootModifierProvider, $GlobalLootModifierProvider$Type} from "packages/net/minecraftforge/common/data/$GlobalLootModifierProvider"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$TraitLootModifier, $TraitLootModifier$Type} from "packages/dev/xkmc/l2hostility/init/loot/$TraitLootModifier"

export class $TraitGLMProvider extends $GlobalLootModifierProvider {
static readonly "TRAIT_AND_LEVEL": $RegistryEntry<($LootItemConditionType)>
static readonly "MOB_LEVEL": $RegistryEntry<($LootItemConditionType)>
static readonly "HAS_ITEM": $RegistryEntry<($LootItemConditionType)>
static readonly "MIN_HEALTH": $RegistryEntry<($LootItemConditionType)>
static readonly "TRAIT_SCALED": $RegistryEntry<($Codec<($TraitLootModifier)>)>
static readonly "LOOT_ENVY": $RegistryEntry<($Codec<($EnvyLootModifier)>)>
static readonly "LOOT_GLUTTONY": $RegistryEntry<($Codec<($GluttonyLootModifier)>)>

constructor(arg0: $DataGenerator$Type)

public static "register"(): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitGLMProvider$Type = ($TraitGLMProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitGLMProvider_ = $TraitGLMProvider$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestCaps" {
import {$WorldChestInvWrapper, $WorldChestInvWrapper$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestInvWrapper"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$PickupTrace, $PickupTrace$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$InvPickupCap, $InvPickupCap$Type} from "packages/dev/xkmc/l2backpack/content/capability/$InvPickupCap"

export class $WorldChestCaps extends $InvPickupCap<($WorldChestInvWrapper)> implements $ICapabilityProvider {

constructor(arg0: $ItemStack$Type)

public "getSignature"(): integer
public "getPickupMode"(): $PickupConfig
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "getInv"(arg0: $PickupTrace$Type): $WorldChestInvWrapper
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
public static "register"(): void
get "signature"(): integer
get "pickupMode"(): $PickupConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldChestCaps$Type = ($WorldChestCaps);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldChestCaps_ = $WorldChestCaps$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$IDrawerBlockEntity" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BaseBlockEntity, $BaseBlockEntity$Type} from "packages/dev/xkmc/l2library/base/tile/$BaseBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $IDrawerBlockEntity extends $BaseBlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "getItem"(): $Item
get "item"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IDrawerBlockEntity$Type = ($IDrawerBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IDrawerBlockEntity_ = $IDrawerBlockEntity$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/common/$FieryTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraitEffectCache, $TraitEffectCache$Type} from "packages/dev/xkmc/l2hostility/content/logic/$TraitEffectCache"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$SelfEffectTrait, $SelfEffectTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$SelfEffectTrait"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $FieryTrait extends $SelfEffectTrait {
readonly "effect": $Supplier<($MobEffect)>

constructor()

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
public "onHurtTarget"(arg0: integer, arg1: $LivingEntity$Type, arg2: $AttackCache$Type, arg3: $TraitEffectCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FieryTrait$Type = ($FieryTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FieryTrait_ = $FieryTrait$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$InsertOnlyItem, $InsertOnlyItem$Type} from "packages/dev/xkmc/l2backpack/content/insert/$InsertOnlyItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BackpackModelItem, $BackpackModelItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BackpackModelItem"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$PickupBagItem, $PickupBagItem$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupBagItem"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$StorageContainer, $StorageContainer$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$StorageContainer"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WorldChestItem extends $BlockItem implements $BackpackModelItem, $PickupBagItem, $InsertOnlyItem {
readonly "color": $DyeColor
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $DyeColor$Type, arg1: $Item$Properties$Type)

public static "getName"(arg0: string): $Component
public static "getOwner"(arg0: $ItemStack$Type): $Optional<($UUID)>
public static "initLootGen"(arg0: $ItemStack$Type, arg1: $UUID$Type, arg2: string, arg3: $DyeColor$Type, arg4: $ResourceLocation$Type): $ItemStack
public "getModelTexture"(arg0: $ItemStack$Type): $ResourceLocation
public "getDescriptionId"(): string
public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "getContainer"(arg0: $ItemStack$Type, arg1: $ServerLevel$Type): $Optional<($StorageContainer)>
public "getInvCap"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $IItemHandler
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "canEquip"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
public "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
public "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
public "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
public "mayClientTake"(): boolean
public "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
public "isValidContent"(arg0: $ItemStack$Type): boolean
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
public "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
get "descriptionId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldChestItem$Type = ($WorldChestItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldChestItem_ = $WorldChestItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/registrate/$LHEntities" {
import {$HostilityCharge, $HostilityCharge$Type} from "packages/dev/xkmc/l2hostility/content/entity/$HostilityCharge"
import {$HostilityBullet, $HostilityBullet$Type} from "packages/dev/xkmc/l2hostility/content/entity/$HostilityBullet"
import {$EntityAttributeCreationEvent, $EntityAttributeCreationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeCreationEvent"
import {$EntityEntry, $EntityEntry$Type} from "packages/com/tterrag/registrate/util/entry/$EntityEntry"

export class $LHEntities {
static readonly "BULLET": $EntityEntry<($HostilityBullet)>
static readonly "CHARGE": $EntityEntry<($HostilityCharge)>

constructor()

public static "register"(): void
public static "registerEntityAttributes"(arg0: $EntityAttributeCreationEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHEntities$Type = ($LHEntities);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHEntities_ = $LHEntities$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/one/$BlockEntityBlockMethod" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$SingletonBlockMethod, $SingletonBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$SingletonBlockMethod"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $BlockEntityBlockMethod<T extends $BlockEntity> extends $SingletonBlockMethod {

 "getType"(): $BlockEntityType<(T)>
 "getEntityClass"(): $Class<(T)>
 "createTileEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
}

export namespace $BlockEntityBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockEntityBlockMethod$Type<T> = ($BlockEntityBlockMethod<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockEntityBlockMethod_<T> = $BlockEntityBlockMethod$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/mob/$ClientCapHandler" {
import {$MobCapSyncToClient, $MobCapSyncToClient$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobCapSyncToClient"

export class $ClientCapHandler {

constructor()

public static "handle"(arg0: $MobCapSyncToClient$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientCapHandler$Type = ($ClientCapHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientCapHandler_ = $ClientCapHandler$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry" {
import {$SetRegHelper, $SetRegHelper$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetRegHelper"
import {$ArtifactRegistrate, $ArtifactRegistrate$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$ArtifactRegistrate"
import {$LinearFuncHandle, $LinearFuncHandle$Type} from "packages/dev/xkmc/l2artifacts/content/core/$LinearFuncHandle"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $LinearFuncEntry extends $RegistryEntry<($LinearFuncHandle)> {
readonly "set": $SetRegHelper
readonly "base": double
readonly "slope": double

constructor(arg0: $ArtifactRegistrate$Type, arg1: $SetRegHelper$Type, arg2: $RegistryObject$Type<($LinearFuncHandle$Type)>, arg3: double, arg4: double)

public "getFromRank"(arg0: integer): double
public static "of"<T>(arg0: $Supplier$Type<(T)>, arg1: $NonNullSupplier$Type<(string)>): $NonNullSupplier<(T)>
public static "of"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
public static "lazy"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LinearFuncEntry$Type = ($LinearFuncEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LinearFuncEntry_ = $LinearFuncEntry$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export class $ShapeTab extends $FilterTabBase<($ShapeTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $FilterTabToken<(T)>
readonly "manager": $FilterTabManager
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $FilterTabToken$Type<($ShapeTab$Type)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeTab$Type = ($ShapeTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeTab_ = $ShapeTab$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/wand/$EquipmentWand" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BaseWand, $BaseWand$Type} from "packages/dev/xkmc/l2hostility/content/item/wand/$BaseWand"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EquipmentWand extends $BaseWand {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "clickTarget"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentWand$Type = ($EquipmentWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentWand_ = $EquipmentWand$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/loot/$MobHealthCondition" {
import {$LootContextParam, $LootContextParam$Type} from "packages/net/minecraft/world/level/storage/loot/parameters/$LootContextParam"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$ValidationContext, $ValidationContext$Type} from "packages/net/minecraft/world/level/storage/loot/$ValidationContext"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"

export class $MobHealthCondition implements $LootItemCondition {
 "minHealth": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: integer)

public "test"(arg0: $LootContext$Type): boolean
public "getType"(): $LootItemConditionType
public "validate"(arg0: $ValidationContext$Type): void
public "getReferencedContextParams"(): $Set<($LootContextParam<(any)>)>
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public "negate"(): $Predicate<($LootContext)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "isEqual"<T>(arg0: any): $Predicate<($LootContext)>
public "applyLootHandler"(context: $LootContext$Type, loot: $List$Type<($ItemStack$Type)>): boolean
get "type"(): $LootItemConditionType
get "referencedContextParams"(): $Set<($LootContextParam<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobHealthCondition$Type = ($MobHealthCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobHealthCondition_ = $MobHealthCondition$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemThunderTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$GolemThunderTrigger$Ins, $GolemThunderTrigger$Ins$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemThunderTrigger$Ins"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GolemThunderTrigger extends $BaseCriterion<($GolemThunderTrigger$Ins), ($GolemThunderTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type): void
public static "ins"(): $GolemThunderTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemThunderTrigger$Type = ($GolemThunderTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemThunderTrigger_ = $GolemThunderTrigger$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$PickupFilterConfig" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $PickupFilterConfig {
static readonly "SIZE": integer

constructor()

public "internalMatch"(arg0: $ItemStack$Type): boolean
public "allowPickup"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupFilterConfig$Type = ($PickupFilterConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupFilterConfig_ = $PickupFilterConfig$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfPride" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $CurseOfPride extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $UUID$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onHurtTarget"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseOfPride$Type = ($CurseOfPride);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseOfPride_ = $CurseOfPride$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/botania/$ManaMendingModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ManaModifier, $ManaModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/botania/$ManaModifier"

export class $ManaMendingModifier extends $ManaModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onHealTick"(arg0: double, arg1: $AbstractGolemEntity$Type<(any), (any)>, arg2: integer): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaMendingModifier$Type = ($ManaMendingModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaMendingModifier_ = $ManaMendingModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/advancements/$AdvProviderWrapper" {
import {$RegistrateAdvancementProvider, $RegistrateAdvancementProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateAdvancementProvider"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Advancement, $Advancement$Type} from "packages/net/minecraft/advancements/$Advancement"
import {$IAdvBuilder, $IAdvBuilder$Type} from "packages/dev/xkmc/l2library/serial/advancements/$IAdvBuilder"

export class $AdvProviderWrapper {

constructor()

public static "save"(arg0: $RegistrateAdvancementProvider$Type, arg1: $List$Type<($IAdvBuilder$Type)>, arg2: $Advancement$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvProviderWrapper$Type = ($AdvProviderWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvProviderWrapper_ = $AdvProviderWrapper$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$EnderPreviewOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $EnderPreviewOverlay implements $IGuiOverlay {

constructor()

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderPreviewOverlay$Type = ($EnderPreviewOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderPreviewOverlay_ = $EnderPreviewOverlay$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/data/$IntDataSlot" {
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"

export class $IntDataSlot {

constructor(arg0: $AbstractContainerMenu$Type)

public "get"(): integer
public "set"(arg0: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntDataSlot$Type = ($IntDataSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntDataSlot_ = $IntDataSlot$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/curios/$EquipmentSlotAccess" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$EntitySlotAccess, $EntitySlotAccess$Type} from "packages/dev/xkmc/l2hostility/compat/curios/$EntitySlotAccess"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EquipmentSlotAccess extends $Record implements $EntitySlotAccess {

constructor(le: $LivingEntity$Type, slot: $EquipmentSlot$Type)

public "slot"(): $EquipmentSlot
public "get"(): $ItemStack
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "set"(arg0: $ItemStack$Type): void
public "le"(): $LivingEntity
public "getID"(): string
public "modify"(arg0: $Function$Type<($ItemStack$Type), ($ItemStack$Type)>): void
get "iD"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentSlotAccess$Type = ($EquipmentSlotAccess);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentSlotAccess_ = $EquipmentSlotAccess$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$LCDatapackRegistriesGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$DatapackBuiltinEntriesProvider, $DatapackBuiltinEntriesProvider$Type} from "packages/net/minecraftforge/common/data/$DatapackBuiltinEntriesProvider"

export class $LCDatapackRegistriesGen extends $DatapackBuiltinEntriesProvider {

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>)

public "getName"(): string
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCDatapackRegistriesGen$Type = ($LCDatapackRegistriesGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCDatapackRegistriesGen_ = $LCDatapackRegistriesGen$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$ConfigEntry" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ConfigTypeEntry, $ConfigTypeEntry$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigTypeEntry"

export class $ConfigDataProvider$ConfigEntry<T extends $BaseConfig> extends $Record {

constructor(type: $ConfigTypeEntry$Type<(T)>, id: $ResourceLocation$Type, config: T)

public "type"(): $ConfigTypeEntry<(T)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $ResourceLocation
public "config"(): T
public "serialize"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigDataProvider$ConfigEntry$Type<T> = ($ConfigDataProvider$ConfigEntry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigDataProvider$ConfigEntry_<T> = $ConfigDataProvider$ConfigEntry$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/config/$ToggleGolemConfigMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $ToggleGolemConfigMenu extends $BaseContainerMenu<($ToggleGolemConfigMenu)> {
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public static "fromNetwork"(arg0: $MenuType$Type<($ToggleGolemConfigMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $ToggleGolemConfigMenu
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToggleGolemConfigMenu$Type = ($ToggleGolemConfigMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToggleGolemConfigMenu_ = $ToggleGolemConfigMenu$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/equipments/$GolemModelItem" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $GolemModelItem {

 "getModelTexture"(): $ResourceLocation
 "getModelPath"(): $ResourceLocation
}

export namespace $GolemModelItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemModelItem$Type = ($GolemModelItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemModelItem_ = $GolemModelItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/feature/$SlotEnchantmentFeaturePredicate" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$FeaturePredicate, $FeaturePredicate$Type} from "packages/dev/xkmc/l2complements/content/feature/$FeaturePredicate"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SlotEnchantmentFeaturePredicate extends $Record implements $FeaturePredicate {

constructor(slot: $EquipmentSlot$Type, e: $Supplier$Type<($Enchantment$Type)>)

public "slot"(): $EquipmentSlot
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $LivingEntity$Type): boolean
public "e"(): $Supplier<($Enchantment)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotEnchantmentFeaturePredicate$Type = ($SlotEnchantmentFeaturePredicate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotEnchantmentFeaturePredicate_ = $SlotEnchantmentFeaturePredicate$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$RoundShieldItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FastItem, $FastItem$Type} from "packages/dev/xkmc/l2library/util/raytrace/$FastItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$GenericShieldItem, $GenericShieldItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$GenericShieldItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RoundShieldItem extends $GenericShieldItem implements $FastItem {
static readonly "KEY_LAST_DAMAGE": string
static readonly "EFFECTIVE_BLOCK_DELAY": integer
static readonly "MINIMUM_DURABILITY_DAMAGE": float
static readonly "TAG_BASE_COLOR": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "isFast"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RoundShieldItem$Type = ($RoundShieldItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RoundShieldItem_ = $RoundShieldItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/goals/$GolemMeleeGoal" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$MeleeAttackGoal, $MeleeAttackGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$MeleeAttackGoal"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GolemMeleeGoal extends $MeleeAttackGoal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>)

public static "getTargetResetTime"(): integer
public "canReachTarget"(arg0: $LivingEntity$Type): boolean
public static "calculateDistSqr"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingEntity$Type): double
public static "getTargetDistanceDelta"(): double
public "tick"(): void
public "m_6639_"(arg0: $LivingEntity$Type): double
get "targetResetTime"(): integer
get "targetDistanceDelta"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemMeleeGoal$Type = ($GolemMeleeGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemMeleeGoal_ = $GolemMeleeGoal$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/mult/$SetPlacedByBlockMethod" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MultipleBlockMethod, $MultipleBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$MultipleBlockMethod"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $SetPlacedByBlockMethod extends $MultipleBlockMethod {

 "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
}

export namespace $SetPlacedByBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetPlacedByBlockMethod$Type = ($SetPlacedByBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetPlacedByBlockMethod_ = $SetPlacedByBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$DrawerBlock" {
import {$SpecialDropBlockMethod, $SpecialDropBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$SpecialDropBlockMethod"
import {$OnClickBlockMethod, $OnClickBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$OnClickBlockMethod"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GetBlockItemBlockMethod, $GetBlockItemBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$GetBlockItemBlockMethod"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntityBlockMethod, $BlockEntityBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$BlockEntityBlockMethod"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$SetPlacedByBlockMethod, $SetPlacedByBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$SetPlacedByBlockMethod"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DrawerBlockEntity, $DrawerBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$DrawerBlockEntity"

export class $DrawerBlock implements $OnClickBlockMethod, $GetBlockItemBlockMethod, $SpecialDropBlockMethod, $SetPlacedByBlockMethod {
static readonly "INSTANCE": $DrawerBlock
static readonly "BLOCK_ENTITY": $BlockEntityBlockMethod<($DrawerBlockEntity)>

constructor()

public "onClick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getDrops"(arg0: $BlockState$Type, arg1: $LootParams$Builder$Type): $List<($ItemStack)>
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerBlock$Type = ($DrawerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerBlock_ = $DrawerBlock$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/special/$LifeMendingEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $LifeMendingEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "getColor"(): $ChatFormatting
public "getMaxLevel"(): integer
public "getMinCost"(arg0: integer): integer
get "color"(): $ChatFormatting
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LifeMendingEnchantment$Type = ($LifeMendingEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LifeMendingEnchantment_ = $LifeMendingEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/slot/$CurioEntityBuilder" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $CurioEntityBuilder extends $Record {

constructor(entities: $ArrayList$Type<($ResourceLocation$Type)>, slots: $ArrayList$Type<(string)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "slots"(): $ArrayList<(string)>
public "entities"(): $ArrayList<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioEntityBuilder$Type = ($CurioEntityBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioEntityBuilder_ = $CurioEntityBuilder$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/vanilla/$Tools" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$ITool, $ITool$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ITool"

export class $Tools extends $Enum<($Tools)> implements $ITool {
static readonly "SWORD": $Tools
static readonly "AXE": $Tools
static readonly "SHOVEL": $Tools
static readonly "PICKAXE": $Tools
static readonly "HOE": $Tools


public static "values"(): ($Tools)[]
public static "valueOf"(arg0: string): $Tools
public "create"(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type): $Item
public "getSpeed"(arg0: float): float
public "getDamage"(arg0: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Tools$Type = (("sword") | ("pickaxe") | ("shovel") | ("axe") | ("hoe")) | ($Tools);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Tools_ = $Tools$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemMassSummonTrigger" {
import {$GolemMassSummonTrigger$Ins, $GolemMassSummonTrigger$Ins$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemMassSummonTrigger$Ins"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GolemMassSummonTrigger extends $BaseCriterion<($GolemMassSummonTrigger$Ins), ($GolemMassSummonTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: integer): void
public static "ins"(): $GolemMassSummonTrigger$Ins
public static "atLeast"(arg0: integer): $GolemMassSummonTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemMassSummonTrigger$Type = ($GolemMassSummonTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemMassSummonTrigger_ = $GolemMassSummonTrigger$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/conditionals/$TokenProvider" {
import {$Context, $Context$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$Context"
import {$ConditionalToken, $ConditionalToken$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$ConditionalToken"
import {$TokenKey, $TokenKey$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$TokenKey"

export interface $TokenProvider<T extends $ConditionalToken, C extends $Context> {

 "getKey"(): $TokenKey<(T)>
 "getData"(arg0: C): T
}

export namespace $TokenProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TokenProvider$Type<T, C> = ($TokenProvider<(T), (C)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TokenProvider_<T, C> = $TokenProvider$Type<(T), (C)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/special/$SonicAttackGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $SonicAttackGoal extends $Goal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer)

public "canUse"(): boolean
public "start"(): void
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SonicAttackGoal$Type = ($SonicAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SonicAttackGoal_ = $SonicAttackGoal$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$IconRenderRegion, $IconRenderRegion$Type} from "packages/dev/xkmc/l2library/base/effects/api/$IconRenderRegion"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $DelayedEntityRender extends $Record {

constructor(entity: $LivingEntity$Type, region: $IconRenderRegion$Type, rl: $ResourceLocation$Type, tx: float, ty: float, tw: float, th: float)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "th"(): float
public "resize"(arg0: $IconRenderRegion$Type): $DelayedEntityRender
public "rl"(): $ResourceLocation
public "region"(): $IconRenderRegion
public "tw"(): float
public "entity"(): $LivingEntity
public static "icon"(arg0: $LivingEntity$Type, arg1: $ResourceLocation$Type): $DelayedEntityRender
public static "icon"(arg0: $LivingEntity$Type, arg1: $IconRenderRegion$Type, arg2: $ResourceLocation$Type): $DelayedEntityRender
public "tx"(): float
public "ty"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelayedEntityRender$Type = ($DelayedEntityRender);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelayedEntityRender_ = $DelayedEntityRender$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/data/$MGTagGen" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistrateTagsProvider$IntrinsicImpl, $RegistrateTagsProvider$IntrinsicImpl$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider$IntrinsicImpl"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RegistrateTagsProvider, $RegistrateTagsProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$RegistrateItemTagsProvider, $RegistrateItemTagsProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateItemTagsProvider"

export class $MGTagGen {
static readonly "SCULK_MATS": $TagKey<($Item)>
static readonly "GOLEM_PARTS": $TagKey<($Item)>
static readonly "GOLEM_HOLDERS": $TagKey<($Item)>
static readonly "GOLEM_UPGRADES": $TagKey<($Item)>
static readonly "BLUE_UPGRADES": $TagKey<($Item)>
static readonly "POTION_UPGRADES": $TagKey<($Item)>
static readonly "CONFIG_CARD": $TagKey<($Item)>
static readonly "SPECIAL_CRAFT": $TagKey<($Item)>
static readonly "GOLEM_INTERACT": $TagKey<($Item)>
static readonly "CURIO_SKIN": $TagKey<($Item)>
static readonly "CURIO_PATH": $TagKey<($Item)>
static readonly "PLAYER_SKIN": $TagKey<($Item)>
static readonly "GOLEM_FRIENDLY": $TagKey<($EntityType<(any)>)>
static readonly "POTENTIAL_DST": $TagKey<($Block)>
static readonly "OPTIONAL_ITEM": $List<($Consumer<($RegistrateItemTagsProvider)>)>
static readonly "OPTIONAL_BLOCK": $List<($Consumer<($RegistrateTagsProvider<($Block)>)>)>
static readonly "OPTIONAL_EFF": $List<($Consumer<($RegistrateTagsProvider<($MobEffect)>)>)>

constructor()

public static "onItemTagGen"(arg0: $RegistrateItemTagsProvider$Type): void
public static "onBlockTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($Block$Type)>): void
public static "onEffTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($MobEffect$Type)>): void
public static "onEntityTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($EntityType$Type<(any)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MGTagGen$Type = ($MGTagGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MGTagGen_ = $MGTagGen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/twilightforest/$FieryTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $FieryTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "onDamage"(arg0: $AttackCache$Type, arg1: $ItemStack$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FieryTool$Type = ($FieryTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FieryTool_ = $FieryTool$Type;
}}
declare module "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $DrawerInteractToServer$Type extends $Enum<($DrawerInteractToServer$Type)> {
static readonly "INSERT": $DrawerInteractToServer$Type
static readonly "TAKE": $DrawerInteractToServer$Type
static readonly "QUICK_MOVE": $DrawerInteractToServer$Type
static readonly "PICKUP": $DrawerInteractToServer$Type


public static "values"(): ($DrawerInteractToServer$Type)[]
public static "valueOf"(arg0: string): $DrawerInteractToServer$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerInteractToServer$Type$Type = (("take") | ("insert") | ("quick_move") | ("pickup")) | ($DrawerInteractToServer$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerInteractToServer$Type_ = $DrawerInteractToServer$Type$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/recycle/$RecycleTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export class $RecycleTab extends $FilterTabBase<($RecycleTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $FilterTabToken<(T)>
readonly "manager": $FilterTabManager
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $FilterTabToken$Type<($RecycleTab$Type)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecycleTab$Type = ($RecycleTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecycleTab_ = $RecycleTab$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$LegendaryTrait" {
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $LegendaryTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "allow"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer): boolean
public "isBanned"(): boolean
get "banned"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LegendaryTrait$Type = ($LegendaryTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LegendaryTrait_ = $LegendaryTrait$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$TagGen" {
import {$ProviderType, $ProviderType$Type} from "packages/com/tterrag/registrate/providers/$ProviderType"
import {$RegistrateTagsProvider$IntrinsicImpl, $RegistrateTagsProvider$IntrinsicImpl$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider$IntrinsicImpl"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$RegistrateItemTagsProvider, $RegistrateItemTagsProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateItemTagsProvider"

export class $TagGen {
static readonly "ENCH_TAGS": $ProviderType<($RegistrateTagsProvider$IntrinsicImpl<($Enchantment)>)>
static readonly "EFF_TAGS": $ProviderType<($RegistrateTagsProvider$IntrinsicImpl<($MobEffect)>)>
static readonly "REQUIRES_SCULK_TOOL": $TagKey<($Block)>
static readonly "AS_LEAF": $TagKey<($Block)>
static readonly "SCULK_MATS": $TagKey<($Item)>
static readonly "SPECIAL_ITEM": $TagKey<($Item)>
static readonly "DELICATE_BONE": $TagKey<($Item)>
static readonly "SKILL_EFFECT": $TagKey<($MobEffect)>
static readonly "DIGGER_ENCH": $TagKey<($Enchantment)>
static readonly "WAND_ENCH": $TagKey<($Enchantment)>

constructor()

public static "onEffectTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($MobEffect$Type)>): void
public static "onItemTagGen"(arg0: $RegistrateItemTagsProvider$Type): void
public static "onBlockTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($Block$Type)>): void
public static "onEnchTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($Enchantment$Type)>): void
public static "onEntityTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($EntityType$Type<(any)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TagGen$Type = ($TagGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TagGen_ = $TagGen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/client/select/$AbstractSelectScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $AbstractSelectScreen extends $Screen {
readonly "manager": $SpriteManager
readonly "slots": (string)[]
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSelectScreen$Type = ($AbstractSelectScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSelectScreen_ = $AbstractSelectScreen$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitFlameTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$KillTraitFlameTrigger$Ins, $KillTraitFlameTrigger$Ins$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitFlameTrigger$Ins"
import {$KillTraitFlameTrigger$Type, $KillTraitFlameTrigger$Type$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitFlameTrigger$Type"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $KillTraitFlameTrigger extends $BaseCriterion<($KillTraitFlameTrigger$Ins), ($KillTraitFlameTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $LivingEntity$Type, arg2: $MobTraitCap$Type): void
public static "ins"(arg0: $MobTrait$Type, arg1: $KillTraitFlameTrigger$Type$Type): $KillTraitFlameTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitFlameTrigger$Type = ($KillTraitFlameTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitFlameTrigger_ = $KillTraitFlameTrigger$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$TransformItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$TooltipItem, $TooltipItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$TooltipItem"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TransformItem extends $TooltipItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MutableComponent$Type)>, arg2: $Supplier$Type<($EntityType$Type<(any)>)>, arg3: $Supplier$Type<($EntityType$Type<(any)>)>)

public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TransformItem$Type = ($TransformItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TransformItem_ = $TransformItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/target/$TargetConfigMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$GhostItemMenu, $GhostItemMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$GhostItemMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$MenuLayoutConfig, $MenuLayoutConfig$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig"

export class $TargetConfigMenu extends $GhostItemMenu {
static readonly "MANAGER": $SpriteManager
readonly "sprite": $MenuLayoutConfig
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public static "fromNetwork"(arg0: $MenuType$Type<($TargetConfigMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $TargetConfigMenu
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetConfigMenu$Type = ($TargetConfigMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetConfigMenu_ = $TargetConfigMenu$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/common/$StorageContainer" {
import {$ContainerListener, $ContainerListener$Type} from "packages/net/minecraft/world/$ContainerListener"
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $StorageContainer implements $ContainerListener {
readonly "id": $UUID
readonly "container": $SimpleContainer
readonly "color": integer


public "isValid"(): boolean
public "containerChanged"(arg0: $Container$Type): void
get "valid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StorageContainer$Type = ($StorageContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StorageContainer_ = $StorageContainer$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/spawner/$BurstSpawnerBlockEntity" {
import {$TraitSpawnerData, $TraitSpawnerData$Type} from "packages/dev/xkmc/l2hostility/content/item/spawner/$TraitSpawnerData"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$TraitSpawnerBlockEntity, $TraitSpawnerBlockEntity$Type} from "packages/dev/xkmc/l2hostility/content/item/spawner/$TraitSpawnerBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BurstSpawnerBlockEntity extends $TraitSpawnerBlockEntity {
readonly "data": $TraitSpawnerData
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public static "getMaxTrials"(): integer
public static "getSpawnGroup"(): integer
public static "getBonusFactor"(): double
get "maxTrials"(): integer
get "spawnGroup"(): integer
get "bonusFactor"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BurstSpawnerBlockEntity$Type = ($BurstSpawnerBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BurstSpawnerBlockEntity_ = $BurstSpawnerBlockEntity$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/enchantments/$VanishEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $VanishEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "getColor"(): $ChatFormatting
public "getCraftableLevels"(): $Set<(integer)>
get "color"(): $ChatFormatting
get "craftableLevels"(): $Set<(integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanishEnchantment$Type = ($VanishEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanishEnchantment_ = $VanishEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v2/$ExecutorSelfHurtEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeSetEffect, $AttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetEffect"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $ExecutorSelfHurtEffect extends $AttributeSetEffect {
readonly "ids": integer

constructor(arg0: $AttrSetEntry$Type, arg1: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerKillOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $LivingDeathEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExecutorSelfHurtEffect$Type = ($ExecutorSelfHurtEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExecutorSelfHurtEffect_ = $ExecutorSelfHurtEffect$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/force/$ArmorReduceEffect" {
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $ArmorReduceEffect extends $MobEffect implements $ForceEffect {
static readonly "ID": $UUID

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getAttributeModifierValue"(arg0: integer, arg1: $AttributeModifier$Type): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorReduceEffect$Type = ($ArmorReduceEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorReduceEffect_ = $ArmorReduceEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/material/$GolemWeaponType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$IGolemWeaponMaterial, $IGolemWeaponMaterial$Type} from "packages/dev/xkmc/modulargolems/init/material/$IGolemWeaponMaterial"
import {$MetalGolemWeaponItem, $MetalGolemWeaponItem$Type} from "packages/dev/xkmc/modulargolems/content/item/equipments/$MetalGolemWeaponItem"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$ShapedRecipeBuilder, $ShapedRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$ShapedRecipeBuilder"

export class $GolemWeaponType extends $Enum<($GolemWeaponType)> {
static readonly "SPEAR": $GolemWeaponType
static readonly "AXE": $GolemWeaponType
static readonly "SWORD": $GolemWeaponType


public "getName"(): string
public static "values"(): ($GolemWeaponType)[]
public static "valueOf"(arg0: string): $GolemWeaponType
public static "build"(arg0: ($IGolemWeaponMaterial$Type)[]): (($ItemEntry<($MetalGolemWeaponItem)>)[])[]
public "pattern"(arg0: $ShapedRecipeBuilder$Type): $ShapedRecipeBuilder
public "buildItem"(arg0: $IGolemWeaponMaterial$Type): $ItemEntry<($MetalGolemWeaponItem)>
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemWeaponType$Type = (("spear") | ("sword") | ("axe")) | ($GolemWeaponType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemWeaponType_ = $GolemWeaponType$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$BaseClawItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$DoubleWieldItem, $DoubleWieldItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$DoubleWieldItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseClawItem extends $DoubleWieldItem {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getMultiplier"(arg0: $AttackCache$Type): float
public "getMaxStack"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): integer
public "getBlockTime"(arg0: $LivingEntity$Type): float
public static "getLastTime"(arg0: $ItemStack$Type): long
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "accumulateDamage"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
public static "getHitCount"(arg0: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseClawItem$Type = ($BaseClawItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseClawItem_ = $BaseClawItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/events/$CapabilityEvents" {
import {$LevelChunk, $LevelChunk$Type} from "packages/net/minecraft/world/level/chunk/$LevelChunk"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$ChunkDifficulty, $ChunkDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkDifficulty"
import {$MobSpawnEvent$FinalizeSpawn, $MobSpawnEvent$FinalizeSpawn$Type} from "packages/net/minecraftforge/event/entity/living/$MobSpawnEvent$FinalizeSpawn"
import {$PlayerEvent$StartTracking, $PlayerEvent$StartTracking$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$StartTracking"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$ChunkWatchEvent$Watch, $ChunkWatchEvent$Watch$Type} from "packages/net/minecraftforge/event/level/$ChunkWatchEvent$Watch"
import {$LivingEvent$LivingTickEvent, $LivingEvent$LivingTickEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent$LivingTickEvent"

export class $CapabilityEvents {

constructor()

public static "onAttachChunkCapabilities"(arg0: $AttachCapabilitiesEvent$Type<($LevelChunk$Type)>): void
public static "onStartTrackingChunk"(arg0: $ChunkWatchEvent$Watch$Type): void
public static "onStartTracking"(arg0: $PlayerEvent$StartTracking$Type): void
public static "onEntityDeath"(arg0: $LivingDeathEvent$Type): void
public static "onServerTick"(arg0: $TickEvent$ServerTickEvent$Type): void
public static "markDirty"(arg0: $ChunkDifficulty$Type): void
public static "livingTickEvent"(arg0: $LivingEvent$LivingTickEvent$Type): void
public static "onEntitySpawn"(arg0: $MobSpawnEvent$FinalizeSpawn$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapabilityEvents$Type = ($CapabilityEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapabilityEvents_ = $CapabilityEvents$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$SourceModifierEnchantment" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"

export interface $SourceModifierEnchantment {

 "modify"(arg0: $CreateSourceEvent$Type, arg1: $ItemStack$Type, arg2: integer): void

(arg0: $CreateSourceEvent$Type, arg1: $ItemStack$Type, arg2: integer): void
}

export namespace $SourceModifierEnchantment {
function modifySource(arg0: $ItemStack$Type, arg1: $CreateSourceEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SourceModifierEnchantment$Type = ($SourceModifierEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SourceModifierEnchantment_ = $SourceModifierEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2library/util/nbt/$NBTObj" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$NBTList, $NBTList$Type} from "packages/dev/xkmc/l2library/util/nbt/$NBTList"

export class $NBTObj {
static readonly "BASE": string
static readonly "TYPE_STRING": integer
readonly "tag": $CompoundTag

constructor(arg0: $CompoundTag$Type)
constructor(arg0: $ItemStack$Type, arg1: string)
constructor()

public "getList"<T>(arg0: string): $NBTList<(T)>
public "getRL"(arg0: string): $ResourceLocation
public "getSub"(arg0: string): $NBTObj
public "fromBlockPos"(arg0: $BlockPos$Type): void
public "toBlockPos"(): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTObj$Type = ($NBTObj);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTObj_ = $NBTObj$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/base/$ModifierInstance" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $ModifierInstance extends $Record {

constructor(mod: $GolemModifier$Type, level: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "mod"(): $GolemModifier
public "level"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModifierInstance$Type = ($ModifierInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModifierInstance_ = $ModifierInstance$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$SoulFlameModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $SoulFlameModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
public "onHurtTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
public "onHurt"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulFlameModifier$Type = ($SoulFlameModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulFlameModifier_ = $SoulFlameModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/$CraftEventListeners" {
import {$AnvilRepairEvent, $AnvilRepairEvent$Type} from "packages/net/minecraftforge/event/entity/player/$AnvilRepairEvent"
import {$GolemHolder, $GolemHolder$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemHolder"
import {$GrindstoneEvent$OnPlaceItem, $GrindstoneEvent$OnPlaceItem$Type} from "packages/net/minecraftforge/event/$GrindstoneEvent$OnPlaceItem"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$AnvilUpdateEvent, $AnvilUpdateEvent$Type} from "packages/net/minecraftforge/event/$AnvilUpdateEvent"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"

export class $CraftEventListeners {

constructor()

public static "onGrindStone"(arg0: $GrindstoneEvent$OnPlaceItem$Type): void
public static "onAnvilCraft"(arg0: $AnvilUpdateEvent$Type): void
public static "onAnvilFinish"(arg0: $AnvilRepairEvent$Type): void
public static "appendUpgrade"<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>>(arg0: $ItemStack$Type, arg1: $GolemHolder$Type<(T), (P)>, arg2: $UpgradeItem$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CraftEventListeners$Type = ($CraftEventListeners);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CraftEventListeners_ = $CraftEventListeners$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/conditionals/$NetworkSensitiveToken" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ConditionalToken, $ConditionalToken$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$ConditionalToken"
import {$TokenKey, $TokenKey$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$TokenKey"

export interface $NetworkSensitiveToken<T extends $ConditionalToken> {

 "sync"(arg0: $TokenKey$Type<(T)>, arg1: T, arg2: $ServerPlayer$Type): void
 "onSync"(arg0: T, arg1: $Player$Type): void

(arg0: $TokenKey$Type<(T)>, arg1: T, arg2: $ServerPlayer$Type): void
}

export namespace $NetworkSensitiveToken {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkSensitiveToken$Type<T> = ($NetworkSensitiveToken<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkSensitiveToken_<T> = $NetworkSensitiveToken$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/recipe/$GolemAssembleBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$GolemAssembleRecipe, $GolemAssembleRecipe$Type} from "packages/dev/xkmc/modulargolems/content/recipe/$GolemAssembleRecipe"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CustomShapedBuilder, $CustomShapedBuilder$Type} from "packages/dev/xkmc/l2library/serial/recipe/$CustomShapedBuilder"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GolemAssembleBuilder extends $CustomShapedBuilder<($GolemAssembleRecipe)> {
readonly "result": $Item
readonly "count": integer
readonly "rows": $List<(string)>
readonly "key": $Map<(character), ($Ingredient)>
readonly "advancement": $Advancement$Builder
 "group": string

constructor(arg0: $ItemLike$Type, arg1: integer)

public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemAssembleBuilder$Type = ($GolemAssembleBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemAssembleBuilder_ = $GolemAssembleBuilder$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/effect/$GravityEffect" {
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $GravityEffect extends $InherentEffect implements $ForceEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getAttributeModifierValue"(arg0: integer, arg1: $AttributeModifier$Type): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GravityEffect$Type = ($GravityEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GravityEffect_ = $GravityEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/registry/$ConfigGroup" {
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$GolemTabGroup, $GolemTabGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabGroup"

export class $ConfigGroup extends $GolemTabGroup<($ConfigGroup)> {
readonly "editor": $GolemConfigEditor

constructor(arg0: $GolemConfigEditor$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigGroup$Type = ($ConfigGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigGroup_ = $ConfigGroup$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/$ArtifactConfig$Common" {
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"

export class $ArtifactConfig$Common {
readonly "maxRank": $ForgeConfigSpec$IntValue
readonly "maxLevelPerRank": $ForgeConfigSpec$IntValue
readonly "levelPerSubStat": $ForgeConfigSpec$IntValue
readonly "storageSmall": $ForgeConfigSpec$IntValue
readonly "storageLarge": $ForgeConfigSpec$IntValue
readonly "expConsumptionRankFactor": $ForgeConfigSpec$DoubleValue
readonly "expLevelFactor": $ForgeConfigSpec$DoubleValue
readonly "baseExpConsumption": $ForgeConfigSpec$IntValue
readonly "expRetention": $ForgeConfigSpec$DoubleValue
readonly "baseExpConversion": $ForgeConfigSpec$IntValue
readonly "expConversionRankFactor": $ForgeConfigSpec$DoubleValue
readonly "enableArtifactRankUpRecipe": $ForgeConfigSpec$BooleanValue


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactConfig$Common$Type = ($ArtifactConfig$Common);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactConfig$Common_ = $ArtifactConfig$Common$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/highlevel/$ReprintTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraitEffectCache, $TraitEffectCache$Type} from "packages/dev/xkmc/l2hostility/content/logic/$TraitEffectCache"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $ReprintTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onHurtTarget"(arg0: integer, arg1: $LivingEntity$Type, arg2: $AttackCache$Type, arg3: $TraitEffectCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReprintTrait$Type = ($ReprintTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReprintTrait_ = $ReprintTrait$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemItemUseEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$HumanoidGolemEvent, $HumanoidGolemEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$HumanoidGolemEvent"

export class $GolemItemUseEvent extends $HumanoidGolemEvent {

constructor()
constructor(arg0: $HumanoidGolemEntity$Type, arg1: $ItemStack$Type, arg2: $InteractionHand$Type)

public "getStack"(): $ItemStack
public "getHand"(): $InteractionHand
public "getListenerList"(): $ListenerList
get "stack"(): $ItemStack
get "hand"(): $InteractionHand
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemItemUseEvent$Type = ($GolemItemUseEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemItemUseEvent_ = $GolemItemUseEvent$Type;
}}
declare module "packages/dev/xkmc/l2library/util/raytrace/$RayTraceUtil" {
import {$ConcurrentMap, $ConcurrentMap$Type} from "packages/java/util/concurrent/$ConcurrentMap"
import {$EntityHitResult, $EntityHitResult$Type} from "packages/net/minecraft/world/phys/$EntityHitResult"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$EntityTarget, $EntityTarget$Type} from "packages/dev/xkmc/l2library/util/raytrace/$EntityTarget"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TargetSetPacket, $TargetSetPacket$Type} from "packages/dev/xkmc/l2library/util/raytrace/$TargetSetPacket"
import {$RayTraceUtil$ServerTarget, $RayTraceUtil$ServerTarget$Type} from "packages/dev/xkmc/l2library/util/raytrace/$RayTraceUtil$ServerTarget"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RayTraceUtil {
static readonly "CLIENT_TIMEOUT": integer
static readonly "SERVER_TIMEOUT": integer
static readonly "TARGET": $EntityTarget
static readonly "TARGET_MAP": $ConcurrentMap<($UUID), ($RayTraceUtil$ServerTarget)>

constructor()

public static "sync"(arg0: $TargetSetPacket$Type): void
public static "clientUpdateTarget"(arg0: $Player$Type, arg1: double): void
public static "serverGetTarget"(arg0: $Player$Type): $LivingEntity
public static "getRayTerm"(arg0: $Vec3$Type, arg1: float, arg2: float, arg3: double): $Vec3
public static "rayTraceEntity"(arg0: $Player$Type, arg1: double, arg2: $Predicate$Type<($Entity$Type)>): $EntityHitResult
public static "rayTraceBlock"(arg0: $Level$Type, arg1: $Player$Type, arg2: double): $BlockHitResult
public static "serverTick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RayTraceUtil$Type = ($RayTraceUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RayTraceUtil_ = $RayTraceUtil$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$DrillBlockBreaker" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleNumberDesc, $SimpleNumberDesc$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$SimpleNumberDesc"
import {$DiggerContext, $DiggerContext$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext"

export class $DrillBlockBreaker extends $Record implements $SimpleNumberDesc {

constructor(radius: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getInstance"(arg0: $DiggerContext$Type): $BlockBreakerInstance
public "range"(arg0: integer): integer
public "radius"(): integer
public "getMaxLevel"(): integer
public "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
public "ignoreHardness"(): boolean
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrillBlockBreaker$Type = ($DrillBlockBreaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrillBlockBreaker_ = $DrillBlockBreaker$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$PlateShieldItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$GenericShieldItem, $GenericShieldItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$GenericShieldItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$DoubleHandItem, $DoubleHandItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$DoubleHandItem"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PlateShieldItem extends $GenericShieldItem implements $DoubleHandItem {
static readonly "KEY_LAST_DAMAGE": string
static readonly "EFFECTIVE_BLOCK_DELAY": integer
static readonly "MINIMUM_DURABILITY_DAMAGE": float
static readonly "TAG_BASE_COLOR": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "shouldCauseReequipAnimation"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public "disableOffHand"(arg0: $Player$Type, arg1: $ItemStack$Type): boolean
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlateShieldItem$Type = ($PlateShieldItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlateShieldItem_ = $PlateShieldItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $BlockBreakerInstance {

 "find"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Predicate$Type<($BlockPos$Type)>): $List<($BlockPos)>

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Predicate$Type<($BlockPos$Type)>): $List<($BlockPos)>
}

export namespace $BlockBreakerInstance {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockBreakerInstance$Type = ($BlockBreakerInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockBreakerInstance_ = $BlockBreakerInstance$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericSwordItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SwordItem, $SwordItem$Type} from "packages/net/minecraft/world/item/$SwordItem"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$GenericTieredItem, $GenericTieredItem$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericTieredItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GenericSwordItem extends $SwordItem implements $GenericTieredItem {
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getExtraConfig"(): $ExtraToolConfig
public "getSweepHitBox"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $Entity$Type): $AABB
public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type): float
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "canBeDepleted"(): boolean
public "mineBlock"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockState$Type, arg3: $BlockPos$Type, arg4: $LivingEntity$Type): boolean
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
get "extraConfig"(): $ExtraToolConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericSwordItem$Type = ($GenericSwordItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericSwordItem_ = $GenericSwordItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/botania/$ManaProductionModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ManaModifier, $ManaModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/botania/$ManaModifier"

export class $ManaProductionModifier extends $ManaModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onHealTick"(arg0: double, arg1: $AbstractGolemEntity$Type<(any), (any)>, arg2: integer): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaProductionModifier$Type = ($ManaProductionModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaProductionModifier_ = $ManaProductionModifier$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$EnergizedWillEnchantment" {
import {$AttributeEnchantment, $AttributeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$AttributeEnchantment"
import {$BaseMacheteEnchantment, $BaseMacheteEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$BaseMacheteEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"

export class $EnergizedWillEnchantment extends $BaseMacheteEnchantment implements $AttributeEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "addAttributes"(arg0: integer, arg1: $ItemAttributeModifierEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnergizedWillEnchantment$Type = ($EnergizedWillEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnergizedWillEnchantment_ = $EnergizedWillEnchantment$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/blazegear/$BGConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $BGConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BGConfigGen$Type = ($BGConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BGConfigGen_ = $BGConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/registrate/$LHEffects" {
import {$AntiBuildEffect, $AntiBuildEffect$Type} from "packages/dev/xkmc/l2hostility/content/effect/$AntiBuildEffect"
import {$MoonwalkEffect, $MoonwalkEffect$Type} from "packages/dev/xkmc/l2hostility/content/effect/$MoonwalkEffect"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$GravityEffect, $GravityEffect$Type} from "packages/dev/xkmc/l2hostility/content/effect/$GravityEffect"

export class $LHEffects {
static readonly "GRAVITY": $RegistryEntry<($GravityEffect)>
static readonly "MOONWALK": $RegistryEntry<($MoonwalkEffect)>
static readonly "ANTIBUILD": $RegistryEntry<($AntiBuildEffect)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHEffects$Type = ($LHEffects);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHEffects_ = $LHEffects$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/entries/$LHRegistrate" {
import {$TraitBuilder, $TraitBuilder$Type} from "packages/dev/xkmc/l2hostility/init/entries/$TraitBuilder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$TraitConfig, $TraitConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$TraitConfig"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$NonNullFunction, $NonNullFunction$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullFunction"

export class $LHRegistrate extends $L2Registrate {
readonly "CONFIGS": $List<($Consumer<($ConfigDataProvider$Collector)>)>

constructor(arg0: string)

public "getList"(): $List<(string)>
public "addTraitConfig"(arg0: $Consumer$Type<($ConfigDataProvider$Collector$Type)>): void
public "regTrait"<T extends $MobTrait>(arg0: string, arg1: $NonNullSupplier$Type<(T)>, arg2: $NonNullFunction$Type<($ResourceLocation$Type), ($TraitConfig$Type)>): $TraitBuilder<(T), ($LHRegistrate)>
get "list"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHRegistrate$Type = ($LHRegistrate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHRegistrate_ = $LHRegistrate$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/equipment/$EquipmentsContainer" {
import {$BaseContainerMenu$BaseContainer, $BaseContainerMenu$BaseContainer$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu$BaseContainer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$EquipmentsMenu, $EquipmentsMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/equipment/$EquipmentsMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $EquipmentsContainer extends $BaseContainerMenu$BaseContainer<($EquipmentsMenu)> {

constructor(arg0: $EquipmentsMenu$Type)

public "getItem"(arg0: integer): $ItemStack
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentsContainer$Type = ($EquipmentsContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentsContainer_ = $EquipmentsContainer$Type;
}}
declare module "packages/dev/xkmc/l2library/base/tile/$BaseContainerListener" {
import {$ContainerListener, $ContainerListener$Type} from "packages/net/minecraft/world/$ContainerListener"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export interface $BaseContainerListener extends $ContainerListener {

 "containerChanged"(arg0: $Container$Type): void
 "notifyTile"(): void

(arg0: $Container$Type): void
}

export namespace $BaseContainerListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseContainerListener$Type = ($BaseContainerListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseContainerListener_ = $BaseContainerListener$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ArtifactSet$SetContext, $ArtifactSet$SetContext$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet$SetContext"
import {$ArtifactEffectEvents$EventConsumer, $ArtifactEffectEvents$EventConsumer$Type} from "packages/dev/xkmc/l2artifacts/events/$ArtifactEffectEvents$EventConsumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$ArtifactEffectEvents$EventPredicate, $ArtifactEffectEvents$EventPredicate$Type} from "packages/dev/xkmc/l2artifacts/events/$ArtifactEffectEvents$EventPredicate"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$IArtifactFeature$ItemIcon, $IArtifactFeature$ItemIcon$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature$ItemIcon"

export class $ArtifactSet extends $NamedEntry<($ArtifactSet)> implements $IArtifactFeature$ItemIcon {

constructor()

public "update"(arg0: $SlotContext$Type): void
public "tick"(arg0: $SlotContext$Type): void
public "getCountAndIndex"(arg0: $SlotContext$Type): $Optional<($ArtifactSet$SetContext)>
public "propagateEvent"<T>(arg0: $SlotContext$Type, arg1: T, arg2: $ArtifactEffectEvents$EventConsumer$Type<(T)>): void
public "propagateEvent"<T>(arg0: $SlotContext$Type, arg1: T, arg2: $ArtifactEffectEvents$EventPredicate$Type<(T)>): boolean
public "getSetCount"(arg0: $LivingEntity$Type): $Optional<($ArtifactSet$SetContext)>
public "getAllDescs"(arg0: $ItemStack$Type, arg1: boolean): $List<($MutableComponent)>
public "getItemIcon"(): $Item
public "addComponents"(arg0: $ArtifactSet$SetContext$Type): $List<($Pair<($List<($Component)>), ($List<($Component)>)>)>
public "getTooltipItems"(): $NonNullList<($ItemStack)>
get "itemIcon"(): $Item
get "tooltipItems"(): $NonNullList<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSet$Type = ($ArtifactSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSet_ = $ArtifactSet$Type;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar$Context" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $SelectionSideBar$Context extends $Record {

constructor(gui: $ForgeGui$Type, g: $GuiGraphics$Type, pTick: float, font: $Font$Type, x0: integer, y0: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "g"(): $GuiGraphics
public "x0"(): integer
public "renderItem"(arg0: $ItemStack$Type, arg1: integer, arg2: integer): void
public "y0"(): integer
public "gui"(): $ForgeGui
public "font"(): $Font
public "pTick"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectionSideBar$Context$Type = ($SelectionSideBar$Context);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectionSideBar$Context_ = $SelectionSideBar$Context$Type;
}}
declare module "packages/dev/xkmc/l2library/util/annotation/$DoubleSidedCall" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $DoubleSidedCall extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $DoubleSidedCall {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleSidedCall$Type = ($DoubleSidedCall);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleSidedCall_ = $DoubleSidedCall$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/botania/$ManaBurstModifier" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ManaModifier, $ManaModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/botania/$ManaModifier"

export class $ManaBurstModifier extends $ManaModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onRegisterGoals"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer, arg2: $BiConsumer$Type<(integer), ($Goal$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaBurstModifier$Type = ($ManaBurstModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaBurstModifier_ = $ManaBurstModifier$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/common/$AbstractScrollerMenu" {
import {$IntDataSlot, $IntDataSlot$Type} from "packages/dev/xkmc/l2library/base/menu/data/$IntDataSlot"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$IFilterMenu, $IFilterMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$IFilterMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ScrollerMenu, $ScrollerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/scroller/$ScrollerMenu"
import {$DataSlot, $DataSlot$Type} from "packages/net/minecraft/world/inventory/$DataSlot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $AbstractScrollerMenu<T extends $AbstractScrollerMenu<(T)>> extends $BaseContainerMenu<(T)> implements $ScrollerMenu, $IFilterMenu {
readonly "token": $ArtifactChestToken
readonly "total_count": $IntDataSlot
readonly "current_count": $IntDataSlot
readonly "experience": $IntDataSlot
readonly "max_row": $DataSlot
readonly "row": $DataSlot
readonly "extra": integer
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: $MenuType$Type<(any)>, arg1: integer, arg2: $Inventory$Type, arg3: $SpriteManager$Type, arg4: integer, arg5: $ArtifactChestToken$Type, arg6: boolean)

public "stillValid"(arg0: $Player$Type): boolean
public "getScroll"(): integer
public "getMaxScroll"(): integer
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
get "scroll"(): integer
get "maxScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractScrollerMenu$Type<T> = ($AbstractScrollerMenu<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractScrollerMenu_<T> = $AbstractScrollerMenu$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/events/$L2ComplementsClick" {
import {$ConcurrentHashMap, $ConcurrentHashMap$Type} from "packages/java/util/concurrent/$ConcurrentHashMap"
import {$WritableStackClickHandler, $WritableStackClickHandler$Type} from "packages/dev/xkmc/l2screentracker/click/writable/$WritableStackClickHandler"
import {$SlotClickHandler, $SlotClickHandler$Type} from "packages/dev/xkmc/l2screentracker/click/$SlotClickHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $L2ComplementsClick extends $WritableStackClickHandler {
static readonly "MAP": $ConcurrentHashMap<($ResourceLocation), ($SlotClickHandler)>

constructor(arg0: $ResourceLocation$Type)

public "isAllowed"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2ComplementsClick$Type = ($L2ComplementsClick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2ComplementsClick_ = $L2ComplementsClick$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$ExtendedRecipeResult" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$IExtendedRecipe, $IExtendedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$IExtendedRecipe"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $ExtendedRecipeResult extends $Record implements $FinishedRecipe {

constructor(impl: $FinishedRecipe$Type, parent: $IExtendedRecipe$Type)

public "parent"(): $IExtendedRecipe
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "impl"(): $FinishedRecipe
public "serializeRecipeData"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "getAdvancementId"(): $ResourceLocation
public "getId"(): $ResourceLocation
public "serializeAdvancement"(): $JsonObject
public "serializeRecipe"(): $JsonObject
get "type"(): $RecipeSerializer<(any)>
get "advancementId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedRecipeResult$Type = ($ExtendedRecipeResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedRecipeResult_ = $ExtendedRecipeResult$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/ars/$ArsRecipeBuilder$WrappedIngredient" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"

export class $ArsRecipeBuilder$WrappedIngredient extends $Record {

constructor(item: $Ingredient$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "item"(): $Ingredient
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArsRecipeBuilder$WrappedIngredient$Type = ($ArsRecipeBuilder$WrappedIngredient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArsRecipeBuilder$WrappedIngredient_ = $ArsRecipeBuilder$WrappedIngredient$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/automation/$DummyFurnace" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DummyFurnace extends $ProjectileWeaponItem {
static readonly "ARROW_ONLY": $Predicate<($ItemStack)>
static readonly "ARROW_OR_FIREWORK": $Predicate<($ItemStack)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "getAllSupportedProjectiles"(): $Predicate<($ItemStack)>
public "getDefaultProjectileRange"(): integer
get "allSupportedProjectiles"(): $Predicate<($ItemStack)>
get "defaultProjectileRange"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummyFurnace$Type = ($DummyFurnace);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummyFurnace_ = $DummyFurnace$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$SyncPacket" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$PacketHandlerWithConfig$ConfigInstance, $PacketHandlerWithConfig$ConfigInstance$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig$ConfigInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SyncPacket extends $SerialPacketBase {
 "id": $ResourceLocation
 "map": $ArrayList<($PacketHandlerWithConfig$ConfigInstance)>

/**
 * 
 * @deprecated
 */
constructor()

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncPacket$Type = ($SyncPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncPacket_ = $SyncPacket$Type;
}}
declare module "packages/dev/xkmc/l2library/util/code/$TextWrapper" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"

export class $TextWrapper {

constructor()

public static "wrapText"(arg0: $Font$Type, arg1: $List$Type<($Component$Type)>, arg2: integer): $List<($FormattedCharSequence)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextWrapper$Type = ($TextWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextWrapper_ = $TextWrapper$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapOverlay" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$SideBar$IntSignature, $SideBar$IntSignature$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar$IntSignature"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$SelectionSideBar, $SelectionSideBar$Type} from "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$SelectionSideBar$Context, $SelectionSideBar$Context$Type} from "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar$Context"

export class $ArtifactSwapOverlay extends $SelectionSideBar<(integer), ($SideBar$IntSignature)> {
static readonly "INSTANCE": $ArtifactSwapOverlay


public "getSignature"(): $SideBar$IntSignature
public "isAvailable"(arg0: integer): boolean
public "renderSelection"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: boolean, arg5: boolean): void
public "onCenter"(): boolean
public "renderArmorSlot"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: boolean): void
public "isScreenOn"(): boolean
public "renderContent"(arg0: $SelectionSideBar$Context$Type): void
public "getItems"(): $Pair<($List<(integer)>), (integer)>
get "signature"(): $SideBar$IntSignature
get "screenOn"(): boolean
get "items"(): $Pair<($List<(integer)>), (integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSwapOverlay$Type = ($ArtifactSwapOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSwapOverlay_ = $ArtifactSwapOverlay$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/wand/$HellfireWand" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$WandItem, $WandItem$Type} from "packages/dev/xkmc/l2complements/content/item/wand/$WandItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $HellfireWand extends $WandItem {
static readonly "RANGE": integer
static readonly "CHARGE": integer
static readonly "SIZE": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getUseDuration"(arg0: $ItemStack$Type): integer
public "onUseTick"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "releaseUsing"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type, arg3: integer): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getUseAnimation"(arg0: $ItemStack$Type): $UseAnim
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HellfireWand$Type = ($HellfireWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HellfireWand_ = $HellfireWand$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/$ItemWrapper" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ItemWrapper {

 "getItem"(): $ItemStack
 "setItem"(arg0: $ItemStack$Type): void
}

export namespace $ItemWrapper {
const EMPTY: $ItemWrapper
function simple(arg0: $Supplier$Type<($ItemStack$Type)>, arg1: $Consumer$Type<($ItemStack$Type)>): $ItemWrapper
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemWrapper$Type = ($ItemWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemWrapper_ = $ItemWrapper$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityTemplate" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GeneralCapabilityTemplate<E, T extends $GeneralCapabilityTemplate<(E), (T)>> {

constructor()

public "check"(): T
public "getThis"(): T
get "this"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeneralCapabilityTemplate$Type<E, T> = ($GeneralCapabilityTemplate<(E), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeneralCapabilityTemplate_<E, T> = $GeneralCapabilityTemplate$Type<(E), (T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/base/$PotionDefenseModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $PotionDefenseModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: integer, arg1: $Supplier$Type<($MobEffect$Type)>)

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onAiStep"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotionDefenseModifier$Type = ($PotionDefenseModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotionDefenseModifier_ = $PotionDefenseModifier$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$PoseiditeArmor" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ExtraArmorConfig, $ExtraArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $PoseiditeArmor extends $ExtraArmorConfig {
 "repair_chance": double
 "damage_chance": double
 "magic_immune": integer

constructor()

public "modify"(arg0: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>, arg1: $EquipmentSlot$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "onArmorTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Player$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoseiditeArmor$Type = ($PoseiditeArmor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoseiditeArmor_ = $PoseiditeArmor$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$GildedAttack" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $GildedAttack extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GildedAttack$Type = ($GildedAttack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GildedAttack_ = $GildedAttack$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/menu/equipments/$EquipmentsMenuPvd" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $EquipmentsMenuPvd extends $Record implements $MenuProvider {

constructor(e: $Mob$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $Mob
public "open"(arg0: $ServerPlayer$Type): void
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentsMenuPvd$Type = ($EquipmentsMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentsMenuPvd_ = $EquipmentsMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/registrate/$LHItems" {
import {$BottleOfSanity, $BottleOfSanity$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$BottleOfSanity"
import {$AiConfigWand, $AiConfigWand$Type} from "packages/dev/xkmc/l2hostility/content/item/wand/$AiConfigWand"
import {$BookCopy, $BookCopy$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$BookCopy"
import {$RingOfCorrosion, $RingOfCorrosion$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfCorrosion"
import {$InfinityGlove, $InfinityGlove$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$InfinityGlove"
import {$CurseOfSloth, $CurseOfSloth$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfSloth"
import {$RingOfReflection, $RingOfReflection$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfReflection"
import {$OddeyesGlasses, $OddeyesGlasses$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$OddeyesGlasses"
import {$CurseOfGluttony, $CurseOfGluttony$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfGluttony"
import {$RingOfHealing, $RingOfHealing$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfHealing"
import {$PocketOfRestoration, $PocketOfRestoration$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$PocketOfRestoration"
import {$AbyssalThorn, $AbyssalThorn$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$AbyssalThorn"
import {$CurseOfGreed, $CurseOfGreed$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfGreed"
import {$CurseOfWrath, $CurseOfWrath$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfWrath"
import {$RingOfDivinity, $RingOfDivinity$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfDivinity"
import {$DivinityCross, $DivinityCross$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$DivinityCross"
import {$RingOfLife, $RingOfLife$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfLife"
import {$PlatinumStar, $PlatinumStar$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$PlatinumStar"
import {$DetectorGlasses, $DetectorGlasses$Type} from "packages/dev/xkmc/l2hostility/content/item/tool/$DetectorGlasses"
import {$ImagineBreaker, $ImagineBreaker$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$ImagineBreaker"
import {$Abrahadabra, $Abrahadabra$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$Abrahadabra"
import {$TripleStripCape, $TripleStripCape$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$TripleStripCape"
import {$SealedItem, $SealedItem$Type} from "packages/dev/xkmc/l2hostility/content/item/traits/$SealedItem"
import {$EquipmentWand, $EquipmentWand$Type} from "packages/dev/xkmc/l2hostility/content/item/wand/$EquipmentWand"
import {$EffectBoosterBottle, $EffectBoosterBottle$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$EffectBoosterBottle"
import {$CurseOfEnvy, $CurseOfEnvy$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfEnvy"
import {$FlamingThorn, $FlamingThorn$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$FlamingThorn"
import {$BottleOfCurse, $BottleOfCurse$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$BottleOfCurse"
import {$TraitAdderWand, $TraitAdderWand$Type} from "packages/dev/xkmc/l2hostility/content/item/wand/$TraitAdderWand"
import {$CurseOfLust, $CurseOfLust$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfLust"
import {$HostilityChargeItem, $HostilityChargeItem$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$HostilityChargeItem"
import {$WitchWand, $WitchWand$Type} from "packages/dev/xkmc/l2hostility/content/item/tool/$WitchWand"
import {$RingOfIncarceration, $RingOfIncarceration$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfIncarceration"
import {$SimpleFoiledItem, $SimpleFoiledItem$Type} from "packages/net/minecraft/world/item/$SimpleFoiledItem"
import {$GreedOfNidhoggur, $GreedOfNidhoggur$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$GreedOfNidhoggur"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BookEverything, $BookEverything$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$BookEverything"
import {$LootingCharm, $LootingCharm$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$LootingCharm"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$HostilityOrb, $HostilityOrb$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$HostilityOrb"
import {$DivinityLight, $DivinityLight$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/misc/$DivinityLight"
import {$CurseOfPride, $CurseOfPride$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfPride"
import {$TargetSelectWand, $TargetSelectWand$Type} from "packages/dev/xkmc/l2hostility/content/item/wand/$TargetSelectWand"
import {$Detector, $Detector$Type} from "packages/dev/xkmc/l2hostility/content/item/tool/$Detector"
import {$RingOfOcean, $RingOfOcean$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfOcean"

export class $LHItems {
static readonly "HOSTILITY_ORB": $ItemEntry<($HostilityOrb)>
static readonly "BOTTLE_CURSE": $ItemEntry<($BottleOfCurse)>
static readonly "BOTTLE_SANITY": $ItemEntry<($BottleOfSanity)>
static readonly "WITCH_DROPLET": $ItemEntry<($Item)>
static readonly "BOOSTER_POTION": $ItemEntry<($EffectBoosterBottle)>
static readonly "WITCH_CHARGE": $ItemEntry<($HostilityChargeItem)>
static readonly "ETERNAL_WITCH_CHARGE": $ItemEntry<($HostilityChargeItem)>
static readonly "DETECTOR": $ItemEntry<($Detector)>
static readonly "DETECTOR_GLASSES": $ItemEntry<($DetectorGlasses)>
static readonly "WITCH_WAND": $ItemEntry<($WitchWand)>
static readonly "BOOK_COPY": $ItemEntry<($BookCopy)>
static readonly "BOOK_OMNISCIENCE": $ItemEntry<($BookEverything)>
static readonly "CHAOS_INGOT": $ItemEntry<($Item)>
static readonly "HOSTILITY_ESSENCE": $ItemEntry<($SimpleFoiledItem)>
static readonly "MIRACLE_POWDER": $ItemEntry<($SimpleFoiledItem)>
static readonly "MIRACLE_INGOT": $ItemEntry<($SimpleFoiledItem)>
static readonly "CURSE_ENVY": $ItemEntry<($CurseOfEnvy)>
static readonly "CURSE_GLUTTONY": $ItemEntry<($CurseOfGluttony)>
static readonly "CURSE_GREED": $ItemEntry<($CurseOfGreed)>
static readonly "CURSE_LUST": $ItemEntry<($CurseOfLust)>
static readonly "CURSE_PRIDE": $ItemEntry<($CurseOfPride)>
static readonly "CURSE_SLOTH": $ItemEntry<($CurseOfSloth)>
static readonly "CURSE_WRATH": $ItemEntry<($CurseOfWrath)>
static readonly "RING_OCEAN": $ItemEntry<($RingOfOcean)>
static readonly "RING_LIFE": $ItemEntry<($RingOfLife)>
static readonly "RING_DIVINITY": $ItemEntry<($RingOfDivinity)>
static readonly "RING_REFLECTION": $ItemEntry<($RingOfReflection)>
static readonly "RING_INCARCERATION": $ItemEntry<($RingOfIncarceration)>
static readonly "RING_CORROSION": $ItemEntry<($RingOfCorrosion)>
static readonly "RING_HEALING": $ItemEntry<($RingOfHealing)>
static readonly "FLAMING_THORN": $ItemEntry<($FlamingThorn)>
static readonly "IMAGINE_BREAKER": $ItemEntry<($ImagineBreaker)>
static readonly "PLATINUM_STAR": $ItemEntry<($PlatinumStar)>
static readonly "INFINITY_GLOVE": $ItemEntry<($InfinityGlove)>
static readonly "ODDEYES_GLASSES": $ItemEntry<($OddeyesGlasses)>
static readonly "TRIPLE_STRIP_CAPE": $ItemEntry<($TripleStripCape)>
static readonly "ABRAHADABRA": $ItemEntry<($Abrahadabra)>
static readonly "NIDHOGGUR": $ItemEntry<($GreedOfNidhoggur)>
static readonly "RESTORATION": $ItemEntry<($PocketOfRestoration)>
static readonly "ABYSSAL_THORN": $ItemEntry<($AbyssalThorn)>
static readonly "DIVINITY_CROSS": $ItemEntry<($DivinityCross)>
static readonly "DIVINITY_LIGHT": $ItemEntry<($DivinityLight)>
static readonly "LOOT_1": $ItemEntry<($LootingCharm)>
static readonly "LOOT_2": $ItemEntry<($LootingCharm)>
static readonly "LOOT_3": $ItemEntry<($LootingCharm)>
static readonly "LOOT_4": $ItemEntry<($LootingCharm)>
static readonly "ADDER": $ItemEntry<($TraitAdderWand)>
static readonly "TARGET": $ItemEntry<($TargetSelectWand)>
static readonly "AI": $ItemEntry<($AiConfigWand)>
static readonly "EQUIPMENT": $ItemEntry<($EquipmentWand)>
static readonly "SEAL": $ItemEntry<($SealedItem)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHItems$Type = ($LHItems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHItems_ = $LHItems$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/events/$ArtifactEffectEvents$EventConsumer" {
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export interface $ArtifactEffectEvents$EventConsumer<T> {

 "apply"(arg0: $SetEffect$Type, arg1: $LivingEntity$Type, arg2: $ArtifactSetConfig$Entry$Type, arg3: integer, arg4: T): void

(arg0: $SetEffect$Type, arg1: $LivingEntity$Type, arg2: $ArtifactSetConfig$Entry$Type, arg3: integer, arg4: T): void
}

export namespace $ArtifactEffectEvents$EventConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactEffectEvents$EventConsumer$Type<T> = ($ArtifactEffectEvents$EventConsumer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactEffectEvents$EventConsumer_<T> = $ArtifactEffectEvents$EventConsumer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/skill/$StackingEffect" {
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$EffectUtil$AddReason, $EffectUtil$AddReason$Type} from "packages/dev/xkmc/l2library/base/effects/$EffectUtil$AddReason"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $StackingEffect<T extends $InherentEffect> {

 "addTo"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer, arg3: $EffectUtil$AddReason$Type, arg4: $Entity$Type): void
 "getThis"(): T
}

export namespace $StackingEffect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StackingEffect$Type<T> = ($StackingEffect<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StackingEffect_<T> = $StackingEffect$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$SpearItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$GenericWeaponItem, $GenericWeaponItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$GenericWeaponItem"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SpearItem extends $GenericWeaponItem {
static readonly "RANGE": $AttributeModifier
static readonly "REACH": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getSweepHitBoxImpl"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $Entity$Type): $AABB
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpearItem$Type = ($SpearItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpearItem_ = $SpearItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/force/$FlameEffect" {
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$IconOverlayEffect, $IconOverlayEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$IconOverlayEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $FlameEffect extends $InherentEffect implements $ForceEffect, $IconOverlayEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
public "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlameEffect$Type = ($FlameEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlameEffect_ = $FlameEffect$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export interface $LegendaryWeapon {

 "cancelFreeze"(): boolean
 "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
 "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
 "isImmuneTo"(arg0: $DamageSource$Type): boolean
 "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
 "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
 "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}

export namespace $LegendaryWeapon {
function getTarget(arg0: $Entity$Type): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LegendaryWeapon$Type = ($LegendaryWeapon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LegendaryWeapon_ = $LegendaryWeapon$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFilter" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$GenericItemStack, $GenericItemStack$Type} from "packages/dev/xkmc/l2library/util/code/$GenericItemStack"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"

export interface $IArtifactFilter {

 "update"(): void
 "getComparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
 "getAvailableArtifacts"(): $Stream<($GenericItemStack<($BaseArtifact)>)>
}

export namespace $IArtifactFilter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IArtifactFilter$Type = ($IArtifactFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IArtifactFilter_ = $IArtifactFilter$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$SetSwapToken" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ISetSwapItem, $ISetSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$ISetSwapItem"
import {$SetSwapEntry, $SetSwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$SetSwapEntry"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"

export class $SetSwapToken extends $Record implements $IQuickSwapToken<($SetSwapEntry)> {

constructor(item: $ISetSwapItem$Type, stack: $ItemStack$Type, type: $QuickSwapType$Type)

public "type"(): $QuickSwapType
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "swap"(arg0: $Player$Type): void
public "item"(): $ISetSwapItem
public "getList"(): $List<($SetSwapEntry)>
public "getSelected"(): integer
public "setSelected"(arg0: integer): void
public "shrink"(arg0: integer): void
get "list"(): $List<($SetSwapEntry)>
get "selected"(): integer
set "selected"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetSwapToken$Type = ($SetSwapToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetSwapToken_ = $SetSwapToken$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/curio/$GolemCurioTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EquipmentGroup, $EquipmentGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$EquipmentGroup"
import {$GolemTabBase, $GolemTabBase$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $GolemCurioTab extends $GolemTabBase<($EquipmentGroup), ($GolemCurioTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $GolemTabToken<(G), (T)>
readonly "manager": $GolemTabManager<(G)>
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $GolemTabToken$Type<($EquipmentGroup$Type), ($GolemCurioTab$Type)>, arg2: $GolemTabManager$Type<($EquipmentGroup$Type)>, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemCurioTab$Type = ($GolemCurioTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemCurioTab_ = $GolemCurioTab$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/data/$MutantMonsterData" {
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"

export class $MutantMonsterData {

constructor()

public static "genConfig"(arg0: $ConfigDataProvider$Collector$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MutantMonsterData$Type = ($MutantMonsterData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MutantMonsterData_ = $MutantMonsterData$Type;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$SideBar$IntSignature" {
import {$SideBar$Signature, $SideBar$Signature$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar$Signature"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$SideBar, $SideBar$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar"

export class $SideBar$IntSignature extends $Record implements $SideBar$Signature<($SideBar$IntSignature)> {

constructor(val: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "val"(): integer
public "shouldRefreshIdle"(arg0: $SideBar$Type<(any)>, arg1: $SideBar$IntSignature$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SideBar$IntSignature$Type = ($SideBar$IntSignature);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SideBar$IntSignature_ = $SideBar$IntSignature$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/client/$ShieldItemDecorationRenderer" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IItemDecorator, $IItemDecorator$Type} from "packages/net/minecraftforge/client/$IItemDecorator"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ShieldItemDecorationRenderer implements $IItemDecorator {

constructor()

public "render"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShieldItemDecorationRenderer$Type = ($ShieldItemDecorationRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShieldItemDecorationRenderer_ = $ShieldItemDecorationRenderer$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$ISingleSwapAction" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ISingleSwapHandler, $ISingleSwapHandler$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISingleSwapHandler"

export interface $ISingleSwapAction {

 "swapSingle"(arg0: $Player$Type, arg1: $ISingleSwapHandler$Type): void

(arg0: $Player$Type, arg1: $ISingleSwapHandler$Type): void
}

export namespace $ISingleSwapAction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISingleSwapAction$Type = ($ISingleSwapAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISingleSwapAction_ = $ISingleSwapAction$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/registrate/$GolemMiscs" {
import {$GolemAssembleRecipe, $GolemAssembleRecipe$Type} from "packages/dev/xkmc/modulargolems/content/recipe/$GolemAssembleRecipe"
import {$MenuEntry, $MenuEntry$Type} from "packages/com/tterrag/registrate/util/entry/$MenuEntry"
import {$PathConfigMenu, $PathConfigMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/path/$PathConfigMenu"
import {$ItemConfigMenu, $ItemConfigMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/filter/$ItemConfigMenu"
import {$AbstractShapedRecipe$Serializer, $AbstractShapedRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe$Serializer"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$EquipmentsMenu, $EquipmentsMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/equipment/$EquipmentsMenu"
import {$TargetConfigMenu, $TargetConfigMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/target/$TargetConfigMenu"
import {$ToggleGolemConfigMenu, $ToggleGolemConfigMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/config/$ToggleGolemConfigMenu"

export class $GolemMiscs {
static readonly "ASSEMBLE": $RegistryEntry<($AbstractShapedRecipe$Serializer<($GolemAssembleRecipe)>)>
static readonly "EQUIPMENTS": $MenuEntry<($EquipmentsMenu)>
static readonly "CONFIG_TOGGLE": $MenuEntry<($ToggleGolemConfigMenu)>
static readonly "CONFIG_PICKUP": $MenuEntry<($ItemConfigMenu)>
static readonly "CONFIG_TARGET": $MenuEntry<($TargetConfigMenu)>
static readonly "CONFIG_PATH": $MenuEntry<($PathConfigMenu)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemMiscs$Type = ($GolemMiscs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemMiscs_ = $GolemMiscs$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/equipment/$EquipmentsMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$PredSlot, $PredSlot$Type} from "packages/dev/xkmc/l2library/base/menu/base/$PredSlot"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $EquipmentsMenu extends $BaseContainerMenu<($EquipmentsMenu)> {
static "SLOTS": ($EquipmentSlot)[]
static readonly "MANAGER": $SpriteManager
static readonly "EXTRA": $SpriteManager
readonly "golem": $AbstractGolemEntity<(any), (any)>
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public "getAsPredSlot"(arg0: string, arg1: integer, arg2: integer): $PredSlot
public static "fromNetwork"(arg0: $MenuType$Type<($EquipmentsMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $EquipmentsMenu
public "stillValid"(arg0: $Player$Type): boolean
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "getSlotForItem"(arg0: $ItemStack$Type): $EquipmentSlot
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentsMenu$Type = ($EquipmentsMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentsMenu_ = $EquipmentsMenu$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$PushPullTrait" {
import {$LegendaryTrait, $LegendaryTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$LegendaryTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $PushPullTrait extends $LegendaryTrait {

constructor(arg0: $ChatFormatting$Type)

public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PushPullTrait$Type = ($PushPullTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PushPullTrait_ = $PushPullTrait$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/core/$GolemStatType" {
import {$GolemStatType$Kind, $GolemStatType$Kind$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemStatType$Kind"
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GolemStatType extends $NamedEntry<($GolemStatType)> {
readonly "kind": $GolemStatType$Kind
readonly "type": $StatFilterType

constructor(arg0: $Supplier$Type<($Attribute$Type)>, arg1: $GolemStatType$Kind$Type, arg2: $StatFilterType$Type)

public "getAttribute"(): $Attribute
public "getAdderTooltip"(arg0: double): $MutableComponent
public "getTotalTooltip"(arg0: double): $MutableComponent
public "applyToEntity"(arg0: $LivingEntity$Type, arg1: double): void
get "attribute"(): $Attribute
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemStatType$Type = ($GolemStatType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemStatType_ = $GolemStatType$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/data/$RecipeGen" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InventoryChangeTrigger$TriggerInstance, $InventoryChangeTrigger$TriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$InventoryChangeTrigger$TriggerInstance"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"

export class $RecipeGen {

constructor()

public static "unlock"<T>(arg0: $RegistrateRecipeProvider$Type, arg1: $BiFunction$Type<(string), ($InventoryChangeTrigger$TriggerInstance$Type), (T)>, arg2: $Item$Type): T
public static "smithing"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: $Item$Type): void
public static "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeGen$Type = ($RecipeGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeGen_ = $RecipeGen$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BaseDrawerItem, $BaseDrawerItem$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$BaseDrawerItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EnderDrawerItem extends $BlockItem implements $BaseDrawerItem {
static readonly "KEY_OWNER_ID": string
static readonly "KEY_OWNER_NAME": string
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Block$Type, arg1: $Item$Properties$Type)

public "insert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $Player$Type): void
public static "getOwner"(arg0: $ItemStack$Type): $Optional<($UUID)>
public "backgroundLoc"(): $ResourceLocation
public "takeItem"(arg0: $ItemStack$Type, arg1: integer, arg2: $Player$Type, arg3: boolean): $ItemStack
public "canSetNewItem"(arg0: $ItemStack$Type): boolean
public "getDescriptionId"(): string
public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
public "setItem"(arg0: $ItemStack$Type, arg1: $Item$Type, arg2: $Player$Type): void
public static "getItem"(arg0: $ItemStack$Type): $Item
public static "getStacking"(arg0: $CompoundTag$Type): integer
public static "getStacking"(): integer
public static "getStacking"(arg0: $ItemStack$Type): integer
public static "loadFromInventory"(arg0: integer, arg1: integer, arg2: $Item$Type, arg3: $Player$Type): integer
public static "getStackingFactor"(arg0: $ItemStack$Type): integer
public static "setStackingFactor"(arg0: $ItemStack$Type, arg1: integer): $ItemStack
public static "canAccept"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
public "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
public "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
public "mayClientTake"(): boolean
public "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "descriptionId"(): string
get "stacking"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderDrawerItem$Type = ($EnderDrawerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderDrawerItem_ = $EnderDrawerItem$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/$GolemCompat" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$GolemSweepEvent, $GolemSweepEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemSweepEvent"
import {$GolemEquipEvent, $GolemEquipEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemEquipEvent"
import {$GolemThrowableEvent, $GolemThrowableEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemThrowableEvent"
import {$GolemDisableShieldEvent, $GolemDisableShieldEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemDisableShieldEvent"
import {$EntityAttributeModificationEvent, $EntityAttributeModificationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeModificationEvent"
import {$GolemDamageShieldEvent, $GolemDamageShieldEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemDamageShieldEvent"

export class $GolemCompat {

constructor()

public static "register"(arg0: $IEventBus$Type): void
public static "onEquip"(arg0: $GolemEquipEvent$Type): void
public static "onThrow"(arg0: $GolemThrowableEvent$Type): void
public static "onSweep"(arg0: $GolemSweepEvent$Type): void
public static "onDamageShield"(arg0: $GolemDamageShieldEvent$Type): void
public static "onGolemSpawn"(arg0: $EntityAttributeModificationEvent$Type): void
public static "onBlock"(arg0: $GolemDisableShieldEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemCompat$Type = ($GolemCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemCompat_ = $GolemCompat$Type;
}}
declare module "packages/dev/xkmc/l2complements/events/$SpecialEquipmentEvents" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$LivingDropsEvent, $LivingDropsEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDropsEvent"
import {$Operation, $Operation$Type} from "packages/com/llamalad7/mixinextras/injector/wrapoperation/$Operation"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Stack, $Stack$Type} from "packages/java/util/$Stack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ThreadLocal, $ThreadLocal$Type} from "packages/java/lang/$ThreadLocal"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$EntityJoinLevelEvent, $EntityJoinLevelEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityJoinLevelEvent"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SpecialEquipmentEvents {
static "PLAYER": $ThreadLocal<($Stack<($Pair<($ServerPlayer), ($BlockState)>)>)>

constructor()

public static "pushPlayer"(arg0: $ServerPlayer$Type, arg1: $BlockPos$Type): void
public static "isVisible"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): boolean
public static "canWalkOn"(arg0: $FluidState$Type, arg1: $LivingEntity$Type): boolean
public static "popPlayer"(arg0: $ServerPlayer$Type): void
public static "onEntityJoinLevel"(arg0: $EntityJoinLevelEvent$Type): void
public static "onEntityDrop"(arg0: $LivingDropsEvent$Type): void
public static "canSee"(arg0: $Entity$Type, arg1: $Operation$Type<(boolean)>): boolean
public static "blockSound"(arg0: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialEquipmentEvents$Type = ($SpecialEquipmentEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialEquipmentEvents_ = $SpecialEquipmentEvents$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/golem/$GolemBEWLR" {
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$BlockEntityRenderDispatcher, $BlockEntityRenderDispatcher$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderDispatcher"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

export class $GolemBEWLR extends $BlockEntityWithoutLevelRenderer {
static readonly "INSTANCE": $Supplier<($BlockEntityWithoutLevelRenderer)>
static readonly "EXTENSIONS": $IClientItemExtensions

constructor(arg0: $BlockEntityRenderDispatcher$Type, arg1: $EntityModelSet$Type)

public "onResourceManagerReload"(arg0: $ResourceManager$Type): void
public "renderByItem"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemBEWLR$Type = ($GolemBEWLR);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemBEWLR_ = $GolemBEWLR$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/spawner/$BurstTraitMethod" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$PlacementBlockMethod, $PlacementBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$PlacementBlockMethod"
import {$ToolTipBlockMethod, $ToolTipBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$ToolTipBlockMethod"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $BurstTraitMethod implements $PlacementBlockMethod, $ToolTipBlockMethod {

constructor()

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getStateForPlacement"(arg0: $BlockState$Type, arg1: $BlockPlaceContext$Type): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BurstTraitMethod$Type = ($BurstTraitMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BurstTraitMethod_ = $BurstTraitMethod$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/data/$LHConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$EntityConfig$TraitBase, $EntityConfig$TraitBase$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$TraitBase"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityConfig$ItemPool, $EntityConfig$ItemPool$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$ItemPool"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"

export class $LHConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "addEntity"<T extends $LivingEntity>(arg0: $ConfigDataProvider$Collector$Type, arg1: integer, arg2: integer, arg3: $RegistryObject$Type<($EntityType$Type<(T)>)>, arg4: $List$Type<($EntityConfig$TraitBase$Type)>, arg5: $List$Type<($EntityConfig$ItemPool$Type)>): void
public static "addEntity"<T extends $LivingEntity>(arg0: $ConfigDataProvider$Collector$Type, arg1: integer, arg2: integer, arg3: $RegistryObject$Type<($EntityType$Type<(T)>)>, ...arg4: ($EntityConfig$TraitBase$Type)[]): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHConfigGen$Type = ($LHConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHConfigGen_ = $LHConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$HolyHammer" {
import {$HammerItem, $HammerItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$HammerItem"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $HolyHammer extends $HammerItem implements $LegendaryWeapon {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HolyHammer$Type = ($HolyHammer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HolyHammer_ = $HolyHammer$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/mob/$PerformanceConstants" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PerformanceConstants {
static readonly "REMOVE": integer
static readonly "AURA": integer
static readonly "NAN_FIX": integer
static readonly "SELF_EFFECT": integer
static readonly "CHUNK_RENDER": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PerformanceConstants$Type = ($PerformanceConstants);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PerformanceConstants_ = $PerformanceConstants$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$ScreenRenderer" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$MenuLayoutConfig, $MenuLayoutConfig$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $MenuLayoutConfig$ScreenRenderer {

constructor(arg0: $MenuLayoutConfig$Type, arg1: $Screen$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer)

public "start"(arg0: $GuiGraphics$Type): void
public "draw"(arg0: $GuiGraphics$Type, arg1: string, arg2: string, arg3: integer, arg4: integer): void
public "draw"(arg0: $GuiGraphics$Type, arg1: string, arg2: string): void
public "drawLeftRight"(arg0: $GuiGraphics$Type, arg1: string, arg2: string, arg3: integer, arg4: integer): void
public "drawLiquid"(arg0: $GuiGraphics$Type, arg1: string, arg2: double, arg3: integer, arg4: integer, arg5: integer): void
public "drawBottomUp"(arg0: $GuiGraphics$Type, arg1: string, arg2: string, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuLayoutConfig$ScreenRenderer$Type = ($MenuLayoutConfig$ScreenRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuLayoutConfig$ScreenRenderer_ = $MenuLayoutConfig$ScreenRenderer$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/mixin/$TargetGoalAccessor" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $TargetGoalAccessor {

 "setTargetMob"(arg0: $LivingEntity$Type): void

(arg0: $LivingEntity$Type): void
}

export namespace $TargetGoalAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetGoalAccessor$Type = ($TargetGoalAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetGoalAccessor_ = $TargetGoalAccessor$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/client/$WeaponBEWLR" {
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$NunchakuItem, $NunchakuItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$NunchakuItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$BlockEntityRenderDispatcher, $BlockEntityRenderDispatcher$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderDispatcher"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $WeaponBEWLR extends $BlockEntityWithoutLevelRenderer {
static readonly "INSTANCE": $Supplier<($BlockEntityWithoutLevelRenderer)>
static readonly "EXTENSIONS": $IClientItemExtensions

constructor(arg0: $BlockEntityRenderDispatcher$Type, arg1: $EntityModelSet$Type)

public "render"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: boolean, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer, arg6: integer, arg7: $BakedModel$Type, arg8: $Consumer$Type<($PoseStack$Type)>): void
public "renderByItem"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "renderNunchaku"(arg0: $NunchakuItem$Type, arg1: $ItemStack$Type, arg2: $ItemDisplayContext$Type, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer, arg6: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeaponBEWLR$Type = ($WeaponBEWLR);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeaponBEWLR_ = $WeaponBEWLR$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$ModelProvider" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ModelProvider {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelProvider$Type = ($ModelProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelProvider_ = $ModelProvider$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/core/$RankedItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RankedItem extends $Item {
readonly "rank": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RankedItem$Type = ($RankedItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RankedItem_ = $RankedItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$ConfigUpdateToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export class $ConfigUpdateToServer extends $SerialPacketBase {
 "id": $UUID
 "color": integer
 "entry": $GolemConfigEntry

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $Level$Type, arg1: $GolemConfigEntry$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigUpdateToServer$Type = ($ConfigUpdateToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigUpdateToServer_ = $ConfigUpdateToServer$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/backpack/$BackpackMenuPvd" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$BaseBagItem, $BaseBagItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagItem"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $BackpackMenuPvd implements $MenuProvider {

constructor(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $BaseBagItem$Type, arg3: $ItemStack$Type)

public "open"(): void
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackMenuPvd$Type = ($BackpackMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackMenuPvd_ = $BackpackMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem" {
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$GenericItemStack, $GenericItemStack$Type} from "packages/dev/xkmc/l2library/util/code/$GenericItemStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$PlayerDifficulty, $PlayerDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/player/$PlayerDifficulty"
import {$MultiSlotItem, $MultiSlotItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$MultiSlotItem"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $CurseCurioItem extends $MultiSlotItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "reflectTrait"(arg0: $MobTrait$Type): boolean
public "getExtraLevel"(): integer
public "getLootFactor"(arg0: $ItemStack$Type, arg1: $PlayerDifficulty$Type, arg2: $MobTraitCap$Type): double
public "getGrowFactor"(arg0: $ItemStack$Type, arg1: $PlayerDifficulty$Type, arg2: $MobTraitCap$Type): double
public static "getFromPlayer"(arg0: $LivingEntity$Type): $List<($GenericItemStack<($CurseCurioItem)>)>
public "onDamage"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingDamageEvent$Type): void
public "onHurtTarget"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $AttackCache$Type): void
get "extraLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseCurioItem$Type = ($CurseCurioItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseCurioItem_ = $CurseCurioItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$DogGolemPartType, $DogGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemPartType"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$AgeableListModel, $AgeableListModel$Type} from "packages/net/minecraft/client/model/$AgeableListModel"
import {$DogGolemEntity, $DogGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemEntity"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IGolemModel, $IGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$IGolemModel"

export class $DogGolemModel extends $AgeableListModel<($DogGolemEntity)> implements $IGolemModel<($DogGolemEntity), ($DogGolemPartType), ($DogGolemModel)> {
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $EntityModelSet$Type)
constructor(arg0: $ModelPart$Type)

public "root"(): $ModelPart
public "setupAnim"(arg0: $DogGolemEntity$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public "prepareMobModel"(arg0: $DogGolemEntity$Type, arg1: float, arg2: float, arg3: float): void
public "getTextureLocationInternal"(arg0: $ResourceLocation$Type): $ResourceLocation
public "renderToBufferInternal"(arg0: $DogGolemPartType$Type, arg1: $PoseStack$Type, arg2: $VertexConsumer$Type, arg3: integer, arg4: integer, arg5: float, arg6: float, arg7: float, arg8: float): void
public "getThis"(): $DogGolemModel
get "this"(): $DogGolemModel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DogGolemModel$Type = ($DogGolemModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DogGolemModel_ = $DogGolemModel$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/client/select/$RankSelectScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$AbstractSelectScreen, $AbstractSelectScreen$Type} from "packages/dev/xkmc/l2artifacts/content/client/select/$AbstractSelectScreen"

export class $RankSelectScreen extends $AbstractSelectScreen {
readonly "manager": $SpriteManager
readonly "slots": (string)[]
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RankSelectScreen$Type = ($RankSelectScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RankSelectScreen_ = $RankSelectScreen$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapItem" {
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $IQuickSwapItem {

 "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>

(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
}

export namespace $IQuickSwapItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IQuickSwapItem$Type = ($IQuickSwapItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IQuickSwapItem_ = $IQuickSwapItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$HostilityCoreModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"

export class $HostilityCoreModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $StatFilterType$Type, arg1: integer)

public "addSlot"(arg0: $List$Type<($UpgradeItem$Type)>, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityCoreModifier$Type = ($HostilityCoreModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityCoreModifier_ = $HostilityCoreModifier$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/mult/$AnimateTickBlockMethod" {
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MultipleBlockMethod, $MultipleBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$MultipleBlockMethod"

export interface $AnimateTickBlockMethod extends $MultipleBlockMethod {

 "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void

(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
}

export namespace $AnimateTickBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimateTickBlockMethod$Type = ($AnimateTickBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimateTickBlockMethod_ = $AnimateTickBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/type/$MultipleBlockMethod" {
import {$BlockMethod, $BlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$BlockMethod"

export interface $MultipleBlockMethod extends $BlockMethod {

}

export namespace $MultipleBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultipleBlockMethod$Type = ($MultipleBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultipleBlockMethod_ = $MultipleBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/$ArtifactConfig" {
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$ArtifactConfig$Client, $ArtifactConfig$Client$Type} from "packages/dev/xkmc/l2artifacts/init/data/$ArtifactConfig$Client"
import {$ArtifactConfig$Common, $ArtifactConfig$Common$Type} from "packages/dev/xkmc/l2artifacts/init/data/$ArtifactConfig$Common"

export class $ArtifactConfig {
static readonly "CLIENT_SPEC": $ForgeConfigSpec
static readonly "CLIENT": $ArtifactConfig$Client
static readonly "COMMON_SPEC": $ForgeConfigSpec
static readonly "COMMON": $ArtifactConfig$Common
static "COMMON_PATH": string

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactConfig$Type = ($ArtifactConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactConfig_ = $ArtifactConfig$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$ConditionalRecipeWrapper" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $ConditionalRecipeWrapper extends $Record implements $FinishedRecipe {

constructor(base: $FinishedRecipe$Type, ...conditions: ($ICondition$Type)[])

public "base"(): $FinishedRecipe
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"(arg0: $RegistrateRecipeProvider$Type, ...arg1: ($ICondition$Type)[]): $Consumer<($FinishedRecipe)>
public static "mod"(arg0: $RegistrateRecipeProvider$Type, ...arg1: (string)[]): $Consumer<($FinishedRecipe)>
public "serializeRecipeData"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "getAdvancementId"(): $ResourceLocation
public "getId"(): $ResourceLocation
public "serializeRecipe"(): $JsonObject
public "serializeAdvancement"(): $JsonObject
public "conditions"(): ($ICondition)[]
get "type"(): $RecipeSerializer<(any)>
get "advancementId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConditionalRecipeWrapper$Type = ($ConditionalRecipeWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConditionalRecipeWrapper_ = $ConditionalRecipeWrapper$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$TagGen" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistrateTagsProvider$IntrinsicImpl, $RegistrateTagsProvider$IntrinsicImpl$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider$IntrinsicImpl"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$RegistrateTagsProvider, $RegistrateTagsProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateTagsProvider"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $TagGen {
static readonly "CLAW": $TagKey<($Item)>
static readonly "DAGGER": $TagKey<($Item)>
static readonly "HAMMER": $TagKey<($Item)>
static readonly "BATTLE_AXE": $TagKey<($Item)>
static readonly "SPEAR": $TagKey<($Item)>
static readonly "MACHETE": $TagKey<($Item)>
static readonly "ROUND_SHIELD": $TagKey<($Item)>
static readonly "PLATE_SHIELD": $TagKey<($Item)>
static readonly "THROWING_AXE": $TagKey<($Item)>
static readonly "JAVELIN": $TagKey<($Item)>
static readonly "THROWABLE": $TagKey<($Item)>
static readonly "NUNCHAKU": $TagKey<($Item)>

constructor()

public static "onItemTagGen"(arg0: $RegistrateTagsProvider$Type<($Item$Type)>): void
public static "onBlockTagGen"(arg0: $RegistrateTagsProvider$Type<($Block$Type)>): void
public static "addItem"(arg0: $TagKey$Type<($Item$Type)>, arg1: $ResourceLocation$Type): void
public static "onEntityTagGen"(arg0: $RegistrateTagsProvider$IntrinsicImpl$Type<($EntityType$Type<(any)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TagGen$Type = ($TagGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TagGen_ = $TagGen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/modifier/$MechMobileEffect" {
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $MechMobileEffect extends $InherentEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getAttributeModifierValue"(arg0: integer, arg1: $AttributeModifier$Type): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MechMobileEffect$Type = ($MechMobileEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MechMobileEffect_ = $MechMobileEffect$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$LCBEWLR" {
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$BlockEntityRenderDispatcher, $BlockEntityRenderDispatcher$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderDispatcher"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

export class $LCBEWLR extends $BlockEntityWithoutLevelRenderer {
static readonly "INSTANCE": $Supplier<($BlockEntityWithoutLevelRenderer)>
static readonly "EXTENSIONS": $IClientItemExtensions

constructor(arg0: $BlockEntityRenderDispatcher$Type, arg1: $EntityModelSet$Type)

public "onResourceManagerReload"(arg0: $ResourceManager$Type): void
public "renderByItem"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCBEWLR$Type = ($LCBEWLR);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCBEWLR_ = $LCBEWLR$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/enchantments/$RemoveTraitEnchantment" {
import {$HostilityEnchantment, $HostilityEnchantment$Type} from "packages/dev/xkmc/l2hostility/content/enchantments/$HostilityEnchantment"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$HitTargetEnchantment, $HitTargetEnchantment$Type} from "packages/dev/xkmc/l2hostility/content/enchantments/$HitTargetEnchantment"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $RemoveTraitEnchantment extends $HostilityEnchantment implements $HitTargetEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[], arg3: $Supplier$Type<($MobTrait$Type)>)

public "hitMob"(arg0: $LivingEntity$Type, arg1: $MobTraitCap$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RemoveTraitEnchantment$Type = ($RemoveTraitEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RemoveTraitEnchantment_ = $RemoveTraitEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/weapon/$AbstractBladeEnchantment" {
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$BattleEnchantment, $BattleEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$BattleEnchantment"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AbstractBladeEnchantment extends $BattleEnchantment {
readonly "category": $EnchantmentCategory


public "doPostAttack"(arg0: $LivingEntity$Type, arg1: $Entity$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractBladeEnchantment$Type = ($AbstractBladeEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractBladeEnchantment_ = $AbstractBladeEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$CustomShapedBuilder" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$AbstractShapedRecipe$Serializer, $AbstractShapedRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe$Serializer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$AbstractShapedRecipe, $AbstractShapedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapedRecipe"
import {$ShapedRecipeBuilder, $ShapedRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$ShapedRecipeBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$IExtendedRecipe, $IExtendedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$IExtendedRecipe"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CustomShapedBuilder<T extends $AbstractShapedRecipe<(T)>> extends $ShapedRecipeBuilder implements $IExtendedRecipe {
readonly "result": $Item
readonly "count": integer
readonly "rows": $List<(string)>
readonly "key": $Map<(character), ($Ingredient)>
readonly "advancement": $Advancement$Builder
 "group": string

constructor(arg0: $RegistryEntry$Type<($AbstractShapedRecipe$Serializer$Type<(T)>)>, arg1: $ItemLike$Type, arg2: integer)

public "addAdditional"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public "unlockedBy"(arg0: $RegistrateRecipeProvider$Type, arg1: $ItemLike$Type): $CustomShapedBuilder<(T)>
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
get "type"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomShapedBuilder$Type<T> = ($CustomShapedBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomShapedBuilder_<T> = $CustomShapedBuilder$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$Minion" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $EntityConfig$Minion extends $Record {

constructor(type: $EntityType$Type<(any)>, maxCount: integer, minLevel: integer, maxHealthPercentage: double, spawnRange: integer, cooldown: integer, copyLevel: boolean, copyTrait: boolean, linkDistance: double, protectMaster: boolean, discardOnUnlink: boolean)

public "type"(): $EntityType<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "spawnRange"(): integer
public "protectMaster"(): boolean
public "copyTrait"(): boolean
public "copyLevel"(): boolean
public "minLevel"(): integer
public "maxCount"(): integer
public "cooldown"(): integer
public "discardOnUnlink"(): boolean
public "linkDistance"(): double
public "maxHealthPercentage"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityConfig$Minion$Type = ($EntityConfig$Minion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityConfig$Minion_ = $EntityConfig$Minion$Type;
}}
declare module "packages/dev/xkmc/l2tabs/tabs/core/$TabType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TabType extends $Enum<($TabType)> {
static readonly "ABOVE": $TabType
static readonly "MAX_TABS": integer


public static "values"(): ($TabType)[]
public static "valueOf"(arg0: string): $TabType
public "getY"(arg0: integer): integer
public "draw"(arg0: $GuiGraphics$Type, arg1: $ResourceLocation$Type, arg2: integer, arg3: integer, arg4: boolean, arg5: integer): void
public "getX"(arg0: integer): integer
public "drawIcon"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: $ItemStack$Type): void
public "isMouseOver"(arg0: integer, arg1: integer, arg2: integer, arg3: double, arg4: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TabType$Type = (("above")) | ($TabType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TabType_ = $TabType$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/base/$AttributeTrait$AttributeEntry" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier$Operation, $AttributeModifier$Operation$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier$Operation"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$DoubleSupplier, $DoubleSupplier$Type} from "packages/java/util/function/$DoubleSupplier"

export class $AttributeTrait$AttributeEntry extends $Record {

constructor(name: string, attribute: $Supplier$Type<($Attribute$Type)>, factor: $DoubleSupplier$Type, op: $AttributeModifier$Operation$Type)

public "name"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "op"(): $AttributeModifier$Operation
public "attribute"(): $Supplier<($Attribute)>
public "factor"(): $DoubleSupplier
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeTrait$AttributeEntry$Type = ($AttributeTrait$AttributeEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeTrait$AttributeEntry_ = $AttributeTrait$AttributeEntry$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ArmorFactory" {
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ArmorItem, $ArmorItem$Type} from "packages/net/minecraft/world/item/$ArmorItem"
import {$IMatArmorType, $IMatArmorType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatArmorType"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"

export interface $ArmorFactory {

 "get"(arg0: $IMatArmorType$Type, arg1: $ArmorItem$Type$Type, arg2: $Item$Properties$Type): $ArmorItem

(arg0: $IMatArmorType$Type, arg1: $ArmorItem$Type$Type, arg2: $Item$Properties$Type): $ArmorItem
}

export namespace $ArmorFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorFactory$Type = ($ArmorFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorFactory_ = $ArmorFactory$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$BattleEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $BattleEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory


public "getColor"(): $ChatFormatting
public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "color"(): $ChatFormatting
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BattleEnchantment$Type = ($BattleEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BattleEnchantment_ = $BattleEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/materials/$LegendaryToolFactory" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"

export interface $LegendaryToolFactory<T extends $Item> {

 "get"(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type): T

(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type): T
}

export namespace $LegendaryToolFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LegendaryToolFactory$Type<T> = ($LegendaryToolFactory<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LegendaryToolFactory_<T> = $LegendaryToolFactory$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/botania/$ManaModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $ManaModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $StatFilterType$Type, arg1: integer)

public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManaModifier$Type = ($ManaModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManaModifier_ = $ManaModifier$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$DamageTypeGen" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$DamageTypeAndTagsGen, $DamageTypeAndTagsGen$Type} from "packages/dev/xkmc/l2damagetracker/init/data/$DamageTypeAndTagsGen"

export class $DamageTypeGen extends $DamageTypeAndTagsGen {
static readonly "EMERALD": $ResourceKey<($DamageType)>
static readonly "SOUL_FLAME": $ResourceKey<($DamageType)>
static readonly "BLEED": $ResourceKey<($DamageType)>
static readonly "LIFE_SYNC": $ResourceKey<($DamageType)>
static readonly "VOID_EYE": $ResourceKey<($DamageType)>

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg2: $ExistingFileHelper$Type)

public static "forKey"(arg0: $Level$Type, arg1: $ResourceKey$Type<($DamageType$Type)>): $Holder<($DamageType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageTypeGen$Type = ($DamageTypeGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageTypeGen_ = $DamageTypeGen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$EnderGuardianVoidRuneAttackGoal" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$BaseRangedAttackGoal, $BaseRangedAttackGoal$Type} from "packages/dev/xkmc/modulargolems/content/modifier/special/$BaseRangedAttackGoal"

export class $EnderGuardianVoidRuneAttackGoal extends $BaseRangedAttackGoal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderGuardianVoidRuneAttackGoal$Type = ($EnderGuardianVoidRuneAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderGuardianVoidRuneAttackGoal_ = $EnderGuardianVoidRuneAttackGoal$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v2/$ExecutorLimitEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $ExecutorLimitEffect extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExecutorLimitEffect$Type = ($ExecutorLimitEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExecutorLimitEffect_ = $ExecutorLimitEffect$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$CollectType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CollectType extends $Enum<($CollectType)> {
static readonly "OVERWRITE": $CollectType
static readonly "COLLECT": $CollectType
static readonly "MAP_COLLECT": $CollectType
static readonly "MAP_OVERWRITE": $CollectType


public static "values"(): ($CollectType)[]
public static "valueOf"(arg0: string): $CollectType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CollectType$Type = (("map_overwrite") | ("map_collect") | ("overwrite") | ("collect")) | ($CollectType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CollectType_ = $CollectType$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$RecipeGen" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InventoryChangeTrigger$TriggerInstance, $InventoryChangeTrigger$TriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$InventoryChangeTrigger$TriggerInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ILWToolMats, $ILWToolMats$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$ILWToolMats"

export class $RecipeGen {

constructor()

public static "unlock"<T>(arg0: $RegistrateRecipeProvider$Type, arg1: $BiFunction$Type<(string), ($InventoryChangeTrigger$TriggerInstance$Type), (T)>, arg2: $Item$Type): T
public static "getID"(arg0: $Item$Type): $ResourceLocation
public static "smithing"(arg0: $RegistrateRecipeProvider$Type, arg1: $TagKey$Type<($Item$Type)>, arg2: $Item$Type, arg3: $Item$Type): void
public static "smithing"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: $Item$Type): void
public static "smelting"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: float): void
public static "blasting"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: float): void
public static "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public static "tools"(arg0: $RegistrateRecipeProvider$Type, arg1: $Item$Type, arg2: $Item$Type, arg3: $ILWToolMats$Type): void
public static "upgrade"(arg0: $RegistrateRecipeProvider$Type, arg1: $ILWToolMats$Type, arg2: $ILWToolMats$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeGen$Type = ($RecipeGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeGen_ = $RecipeGen$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$BagInteractTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BagInteractTrigger, $BagInteractTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$BagInteractTrigger"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $BagInteractTrigger$Ins extends $BaseCriterionInstance<($BagInteractTrigger$Ins), ($BagInteractTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BagInteractTrigger$Ins$Type = ($BagInteractTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BagInteractTrigger$Ins_ = $BagInteractTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$PoisonTouch" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $PoisonTouch extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonTouch$Type = ($PoisonTouch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonTouch_ = $PoisonTouch$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconScreen" {
import {$HostilityBeaconMenu, $HostilityBeaconMenu$Type} from "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconMenu"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ContainerListener, $ContainerListener$Type} from "packages/net/minecraft/world/inventory/$ContainerListener"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $HostilityBeaconScreen extends $AbstractContainerScreen<($HostilityBeaconMenu)> implements $ContainerListener {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $HostilityBeaconMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "m_181908_"(): void
public "slotChanged"(arg0: $AbstractContainerMenu$Type, arg1: integer, arg2: $ItemStack$Type): void
public "dataChanged"(arg0: $AbstractContainerMenu$Type, arg1: integer, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityBeaconScreen$Type = ($HostilityBeaconScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityBeaconScreen_ = $HostilityBeaconScreen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$ThrowingAxeItem" {
import {$BaseThrownWeaponEntity, $BaseThrownWeaponEntity$Type} from "packages/dev/xkmc/l2weaponry/content/entity/$BaseThrownWeaponEntity"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BaseThrowableWeaponItem, $BaseThrowableWeaponItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$BaseThrowableWeaponItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ThrowingAxeItem extends $BaseThrowableWeaponItem {
static readonly "RANGE": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "canDisableShield"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $LivingEntity$Type, arg3: $LivingEntity$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isHeavy"(): boolean
public static "thunderHit"(arg0: $BaseThrownWeaponEntity$Type<(any)>): void
get "heavy"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThrowingAxeItem$Type = ($ThrowingAxeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThrowingAxeItem_ = $ThrowingAxeItem$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/common/$AnalogTrigger" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export class $AnalogTrigger {

constructor()

public static "trigger"(arg0: $Level$Type, arg1: $UUID$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnalogTrigger$Type = ($AnalogTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnalogTrigger_ = $AnalogTrigger$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$CheaterMachete" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MacheteItem, $MacheteItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$MacheteItem"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CheaterMachete extends $MacheteItem implements $LegendaryWeapon {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CheaterMachete$Type = ($CheaterMachete);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CheaterMachete_ = $CheaterMachete$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$SlowWieldItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$DoubleHandItem, $DoubleHandItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$DoubleHandItem"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$GenericWeaponItem, $GenericWeaponItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$GenericWeaponItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SlowWieldItem extends $GenericWeaponItem implements $DoubleHandItem {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type, arg5: $TagKey$Type<($Block$Type)>)

public "shouldCauseReequipAnimation"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "isSwordLike"(): boolean
public "isHeavy"(): boolean
public "disableOffHand"(arg0: $Player$Type, arg1: $ItemStack$Type): boolean
get "swordLike"(): boolean
get "heavy"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlowWieldItem$Type = ($SlowWieldItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlowWieldItem_ = $SlowWieldItem$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/registrate/$LWEnchantments" {
import {$StealthEnchantment, $StealthEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$StealthEnchantment"
import {$HeavyEnchantment, $HeavyEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$HeavyEnchantment"
import {$ProjectionEnchantment, $ProjectionEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$ProjectionEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$HeavyShieldEnchantment, $HeavyShieldEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$HeavyShieldEnchantment"
import {$ClawBlockEnchantment, $ClawBlockEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$ClawBlockEnchantment"
import {$EnderHandEnchantment, $EnderHandEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$EnderHandEnchantment"
import {$HardShieldEnchantment, $HardShieldEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$HardShieldEnchantment"
import {$EnergizedWillEnchantment, $EnergizedWillEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$EnergizedWillEnchantment"
import {$RaisedSpiritEnchantment, $RaisedSpiritEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$RaisedSpiritEnchantment"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$SingleLevelEnchantment, $SingleLevelEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SingleLevelEnchantment"

export class $LWEnchantments {
static readonly "THROWABLE": $EnchantmentCategory
static readonly "DAGGER": $EnchantmentCategory
static readonly "HEAVY_WEAPON": $EnchantmentCategory
static readonly "SHIELDS": $EnchantmentCategory
static readonly "MACHETES": $EnchantmentCategory
static readonly "DOUBLE_WIELD": $EnchantmentCategory
static readonly "CLAW": $EnchantmentCategory
static readonly "ENDER_HAND": $RegistryEntry<($EnderHandEnchantment)>
static readonly "PROJECTION": $RegistryEntry<($ProjectionEnchantment)>
static readonly "INSTANT_THROWING": $RegistryEntry<($SingleLevelEnchantment)>
static readonly "NO_AGGRO": $RegistryEntry<($StealthEnchantment)>
static readonly "HEAVY": $RegistryEntry<($HeavyEnchantment)>
static readonly "HARD_SHIELD": $RegistryEntry<($HardShieldEnchantment)>
static readonly "HEAVY_SHIELD": $RegistryEntry<($HeavyShieldEnchantment)>
static readonly "ENERGIZED_WILL": $RegistryEntry<($EnergizedWillEnchantment)>
static readonly "RAISED_SPIRIT": $RegistryEntry<($RaisedSpiritEnchantment)>
static readonly "GHOST_SLASH": $RegistryEntry<($SingleLevelEnchantment)>
static readonly "CLAW_BLOCK": $RegistryEntry<($ClawBlockEnchantment)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWEnchantments$Type = ($LWEnchantments);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWEnchantments_ = $LWEnchantments$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $GolemTabType extends $Enum<($GolemTabType)> {
static readonly "ABOVE": $GolemTabType
static readonly "BELOW": $GolemTabType
static readonly "LEFT": $GolemTabType
static readonly "RIGHT": $GolemTabType
static readonly "MAX_TABS": integer


public static "values"(): ($GolemTabType)[]
public static "valueOf"(arg0: string): $GolemTabType
public "getY"(arg0: integer): integer
public "draw"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: boolean, arg4: integer): void
public "getX"(arg0: integer): integer
public "drawIcon"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "isMouseOver"(arg0: integer, arg1: integer, arg2: integer, arg3: double, arg4: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTabType$Type = (("below") | ("left") | ("above") | ("right")) | ($GolemTabType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTabType_ = $GolemTabType$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/equipments/$GolemEquipmentItem" {
import {$ImmutableMultimap$Builder, $ImmutableMultimap$Builder$Type} from "packages/com/google/common/collect/$ImmutableMultimap$Builder"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $GolemEquipmentItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $EquipmentSlot$Type, arg2: $Supplier$Type<($EntityType$Type<(any)>)>, arg3: $Consumer$Type<($ImmutableMultimap$Builder$Type<($Attribute$Type), ($AttributeModifier$Type)>)>)

public "getSlot"(): $EquipmentSlot
public "getGolemModifiers"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isFor"(arg0: $EntityType$Type<(any)>): boolean
get "slot"(): $EquipmentSlot
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemEquipmentItem$Type = ($GolemEquipmentItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemEquipmentItem_ = $GolemEquipmentItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$TFDamageModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $TFDamageModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "modifyDamage"(arg0: $AttackCache$Type, arg1: $AbstractGolemEntity$Type<(any), (any)>, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TFDamageModifier$Type = ($TFDamageModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TFDamageModifier_ = $TFDamageModifier$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$DrawerInteractTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$DrawerInteractToServer$Type, $DrawerInteractToServer$Type$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Type"
import {$DrawerInteractTrigger$Ins, $DrawerInteractTrigger$Ins$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$DrawerInteractTrigger$Ins"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DrawerInteractTrigger extends $BaseCriterion<($DrawerInteractTrigger$Ins), ($DrawerInteractTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $DrawerInteractToServer$Type$Type): void
public static "fromType"(arg0: $DrawerInteractToServer$Type$Type): $DrawerInteractTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerInteractTrigger$Type = ($DrawerInteractTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerInteractTrigger_ = $DrawerInteractTrigger$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractGolemRenderer, $AbstractGolemRenderer$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemRenderer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DogGolemPartType, $DogGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemPartType"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$DogGolemEntity, $DogGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemEntity"
import {$DogGolemModel, $DogGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemModel"

export class $DogGolemRenderer extends $AbstractGolemRenderer<($DogGolemEntity), ($DogGolemPartType), ($DogGolemModel)> {
static readonly "LIST": $List<($Function<($AbstractGolemRenderer<(any), (any), (any)>), ($RenderLayer<(any), (any)>)>)>
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DogGolemRenderer$Type = ($DogGolemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DogGolemRenderer_ = $DogGolemRenderer$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/special/$PickupModifier" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $PickupModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
public "onRegisterGoals"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer, arg2: $BiConsumer$Type<(integer), ($Goal$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupModifier$Type = ($PickupModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupModifier_ = $PickupModifier$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$ThermalShield" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $ThermalShield extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerAttackedCancel"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThermalShield$Type = ($ThermalShield);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThermalShield_ = $ThermalShield$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$NunchakuItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FastItem, $FastItem$Type} from "packages/dev/xkmc/l2library/util/raytrace/$FastItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GenericWeaponItem, $GenericWeaponItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$GenericWeaponItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $NunchakuItem extends $GenericWeaponItem implements $FastItem {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public static "check"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): boolean
public static "delegate"(arg0: $Player$Type): boolean
public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "getUseDuration"(arg0: $ItemStack$Type): integer
public "isFast"(arg0: $ItemStack$Type): boolean
public "onUseTick"(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isSharp"(): boolean
get "sharp"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NunchakuItem$Type = ($NunchakuItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NunchakuItem_ = $NunchakuItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapMenu" {
import {$BoolArrayDataSlot, $BoolArrayDataSlot$Type} from "packages/dev/xkmc/l2library/base/menu/data/$BoolArrayDataSlot"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$ArtifactSwapData, $ArtifactSwapData$Type} from "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $ArtifactSwapMenu extends $BaseContainerMenu<($ArtifactSwapMenu)> {
static readonly "MANAGER": $SpriteManager
readonly "data": $ArtifactSwapData
readonly "disable": $BoolArrayDataSlot
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public static "fromNetwork"(arg0: $MenuType$Type<($ArtifactSwapMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $ArtifactSwapMenu
public "stillValid"(arg0: $Player$Type): boolean
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSwapMenu$Type = ($ArtifactSwapMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSwapMenu_ = $ArtifactSwapMenu$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/player/$EnderSyncCap" {
import {$PlayerCapabilityHolder, $PlayerCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PlayerCapabilityTemplate, $PlayerCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"

export class $EnderSyncCap extends $PlayerCapabilityTemplate<($EnderSyncCap)> {
static readonly "CAPABILITY": $Capability<($EnderSyncCap)>
static readonly "HOLDER": $PlayerCapabilityHolder<($EnderSyncCap)>
 "clientEnderInv": $NonNullList<($ItemStack)>
 "player": $Player
 "world": $Level

constructor()

public static "register"(): void
public "tick"(): void
public "getToken"(arg0: $QuickSwapType$Type): $IQuickSwapToken<(any)>
public "getItems"(): $List<($ItemStack)>
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
get "items"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderSyncCap$Type = ($EnderSyncCap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderSyncCap_ = $EnderSyncCap$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/base/$TargetEffectTrait" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TargetEffectTrait extends $MobTrait {
readonly "func": $Function<(integer), ($MobEffectInstance)>

constructor(arg0: $Function$Type<(integer), ($MobEffectInstance$Type)>)

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "postHurtImpl"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetEffectTrait$Type = ($TargetEffectTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetEffectTrait_ = $TargetEffectTrait$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemThunderTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"
import {$GolemThunderTrigger, $GolemThunderTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemThunderTrigger"

export class $GolemThunderTrigger$Ins extends $BaseCriterionInstance<($GolemThunderTrigger$Ins), ($GolemThunderTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemThunderTrigger$Ins$Type = ($GolemThunderTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemThunderTrigger$Ins_ = $GolemThunderTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/player/$EnderBackpackItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$InsertOnlyItem, $InsertOnlyItem$Type} from "packages/dev/xkmc/l2backpack/content/insert/$InsertOnlyItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BackpackModelItem, $BackpackModelItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BackpackModelItem"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IQuickSwapItem, $IQuickSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$PickupBagItem, $PickupBagItem$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupBagItem"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$TooltipInvItem, $TooltipInvItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$TooltipInvItem"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EnderBackpackItem extends $Item implements $BackpackModelItem, $PickupBagItem, $InsertOnlyItem, $TooltipInvItem, $IQuickSwapItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getModelTexture"(arg0: $ItemStack$Type): $ResourceLocation
public "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "getInvSize"(arg0: $ItemStack$Type): integer
public "getInvItems"(arg0: $ItemStack$Type, arg1: $Player$Type): $List<($ItemStack)>
public "getInvCap"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $IItemHandler
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "getTooltipImage"(arg0: $ItemStack$Type): $Optional<($TooltipComponent)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "canEquip"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
public "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
public "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
public "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
public "mayClientTake"(): boolean
public "getRowSize"(): integer
public "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
public "isValidContent"(arg0: $ItemStack$Type): boolean
public "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
get "rowSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderBackpackItem$Type = ($EnderBackpackItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderBackpackItem_ = $EnderBackpackItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$CubicChunkBreaker" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleNumberDesc, $SimpleNumberDesc$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$SimpleNumberDesc"
import {$DiggerContext, $DiggerContext$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CubicChunkBreaker extends $Record implements $SimpleNumberDesc {

constructor(rank: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getInstance"(arg0: $DiggerContext$Type): $BlockBreakerInstance
public "range"(arg0: integer): integer
public "rank"(): integer
public "getMaxLevel"(): integer
public "modulate"(arg0: integer, arg1: $BlockPos$Type): $BlockPos
public "ignoreHardness"(): boolean
public "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CubicChunkBreaker$Type = ($CubicChunkBreaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CubicChunkBreaker_ = $CubicChunkBreaker$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/registry/$OpenEquipmentMenuToServer$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$IMenuPvd, $IMenuPvd$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd"

export class $OpenEquipmentMenuToServer$Type extends $Enum<($OpenEquipmentMenuToServer$Type)> {
static readonly "EQUIPMENT": $OpenEquipmentMenuToServer$Type
static readonly "CURIOS": $OpenEquipmentMenuToServer$Type


public static "values"(): ($OpenEquipmentMenuToServer$Type)[]
public static "valueOf"(arg0: string): $OpenEquipmentMenuToServer$Type
public "construct"(arg0: $AbstractGolemEntity$Type<(any), (any)>): $IMenuPvd
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenEquipmentMenuToServer$Type$Type = (("curios") | ("equipment")) | ($OpenEquipmentMenuToServer$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenEquipmentMenuToServer$Type_ = $OpenEquipmentMenuToServer$Type$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/materials/$LCMats" {
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Tools, $Tools$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/vanilla/$Tools"
import {$IToolStats, $IToolStats$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IToolStats"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$ArmorConfig, $ArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ArmorConfig"
import {$ExtraArmorConfig, $ExtraArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$ToolConfig, $ToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ToolConfig"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $LCMats extends $Enum<($LCMats)> implements $IMatVanillaType {
static readonly "TOTEMIC_GOLD": $LCMats
static readonly "POSEIDITE": $LCMats
static readonly "SHULKERATE": $LCMats
static readonly "SCULKIUM": $LCMats
static readonly "ETERNIUM": $LCMats
readonly "trim_text_color": $ChatFormatting


public static "values"(): ($LCMats)[]
public static "valueOf"(arg0: string): $LCMats
public "getID"(): string
public "getBlock"(): $Block
public "getToolStats"(): $IToolStats
public "getExtraToolConfig"(): $ExtraToolConfig
public "getArmorConfig"(): $ArmorConfig
public "getArmorMaterial"(): $ArmorMaterial
public "getToolConfig"(): $ToolConfig
public "getIngot"(): $Item
public "armorPrefix"(): string
public "getNugget"(): $Item
public "getGenerated"(): (($ItemEntry<($Item)>)[])[]
public "getExtraArmorConfig"(): $ExtraArmorConfig
public "getTier"(): $Tier
public "ordinal"(): integer
public "getToolIngot"(): $Item
public "getToolStick"(): $Item
public "getTool"(arg0: $Tools$Type): $Item
public "getArmor"(arg0: $EquipmentSlot$Type): $Item
get "iD"(): string
get "block"(): $Block
get "toolStats"(): $IToolStats
get "extraToolConfig"(): $ExtraToolConfig
get "armorConfig"(): $ArmorConfig
get "armorMaterial"(): $ArmorMaterial
get "toolConfig"(): $ToolConfig
get "ingot"(): $Item
get "nugget"(): $Item
get "generated"(): (($ItemEntry<($Item)>)[])[]
get "extraArmorConfig"(): $ExtraArmorConfig
get "tier"(): $Tier
get "toolIngot"(): $Item
get "toolStick"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCMats$Type = (("poseidite") | ("eternium") | ("shulkerate") | ("sculkium") | ("totemic_gold")) | ($LCMats);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCMats_ = $LCMats$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/capability/$PickupModeCap" {
import {$PickupTrace, $PickupTrace$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export interface $PickupModeCap {

 "getSignature"(): integer
 "getPickupMode"(): $PickupConfig
 "doPickup"(arg0: $ItemStack$Type, arg1: $PickupTrace$Type): integer
}

export namespace $PickupModeCap {
const TOKEN: $Capability<($PickupModeCap)>
function register(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupModeCap$Type = ($PickupModeCap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupModeCap_ = $PickupModeCap$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/wand/$SquadWandItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$GolemInteractItem, $GolemInteractItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$GolemInteractItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BaseWandItem, $BaseWandItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$BaseWandItem"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$IGlowingTarget, $IGlowingTarget$Type} from "packages/dev/xkmc/l2library/util/raytrace/$IGlowingTarget"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SquadWandItem extends $BaseWandItem implements $GolemInteractItem, $IGlowingTarget {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $ItemEntry$Type<(any)>)

public "getDistance"(arg0: $ItemStack$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SquadWandItem$Type = ($SquadWandItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SquadWandItem_ = $SquadWandItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/attribute/$TimedCASetEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$TimedCAData, $TimedCAData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$TimedCAData"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AbstractConditionalAttributeSetEffect, $AbstractConditionalAttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AbstractConditionalAttributeSetEffect"

export class $TimedCASetEffect extends $AbstractConditionalAttributeSetEffect<($TimedCAData)> {
readonly "ids": integer

constructor(arg0: $Predicate$Type<($Player$Type)>, arg1: $LinearFuncEntry$Type, ...arg2: ($AttrSetEntry$Type)[])

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimedCASetEffect$Type = ($TimedCASetEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimedCASetEffect_ = $TimedCASetEffect$Type;
}}
declare module "packages/dev/xkmc/l2library/init/events/$FineScrollEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"

export class $FineScrollEvent extends $Event {
 "diff": integer

constructor()
constructor(arg0: integer)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FineScrollEvent$Type = ($FineScrollEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FineScrollEvent_ = $FineScrollEvent$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/blazegear/$BlazingModifier" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $BlazingModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onRegisterGoals"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer, arg2: $BiConsumer$Type<(integer), ($Goal$Type)>): void
public "onClientTick"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlazingModifier$Type = ($BlazingModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlazingModifier_ = $BlazingModifier$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/client/tooltip/$ClientItemTooltip" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$ItemTooltip, $ItemTooltip$Type} from "packages/dev/xkmc/l2artifacts/content/client/tooltip/$ItemTooltip"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"

export class $ClientItemTooltip extends $Record implements $ClientTooltipComponent {

constructor(items: $ItemTooltip$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "items"(): $ItemTooltip
public "getWidth"(arg0: $Font$Type): integer
public "getHeight"(): integer
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public "renderImage"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientItemTooltip$Type = ($ClientItemTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientItemTooltip_ = $ClientItemTooltip$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/player/$EnderBackpackCaps" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$PickupTrace, $PickupTrace$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$InvWrapper, $InvWrapper$Type} from "packages/net/minecraftforge/items/wrapper/$InvWrapper"
import {$InvPickupCap, $InvPickupCap$Type} from "packages/dev/xkmc/l2backpack/content/capability/$InvPickupCap"

export class $EnderBackpackCaps extends $InvPickupCap<($InvWrapper)> implements $ICapabilityProvider {

constructor(arg0: $ItemStack$Type)

public "getSignature"(): integer
public "getPickupMode"(): $PickupConfig
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "getInv"(arg0: $PickupTrace$Type): $InvWrapper
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
public static "register"(): void
get "signature"(): integer
get "pickupMode"(): $PickupConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderBackpackCaps$Type = ($EnderBackpackCaps);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderBackpackCaps_ = $EnderBackpackCaps$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/data/$MGAdvGen" {
import {$RegistrateAdvancementProvider, $RegistrateAdvancementProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateAdvancementProvider"

export class $MGAdvGen {

constructor()

public static "genAdvancements"(arg0: $RegistrateAdvancementProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MGAdvGen$Type = ($MGAdvGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MGAdvGen_ = $MGAdvGen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$LHDispatch" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$ModDispatch, $ModDispatch$Type} from "packages/dev/xkmc/modulargolems/compat/materials/common/$ModDispatch"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $LHDispatch extends $ModDispatch {
static readonly "MODID": string

constructor()

public "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public "genLang"(arg0: $RegistrateLangProvider$Type): void
public "dispatchClientSetup"(): void
public "getDataGen"(arg0: $DataGenerator$Type): $ConfigDataProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHDispatch$Type = ($LHDispatch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHDispatch_ = $LHDispatch$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/conditions/$StringValueCondition" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $StringValueCondition extends $Record implements $ICondition {
static readonly "ID": $ResourceLocation

constructor(path: string, line: $ArrayList$Type<(string)>, key: string)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $ICondition$IContext$Type): boolean
public static "of"(arg0: string, arg1: $ForgeConfigSpec$ConfigValue$Type<(string)>, arg2: string): $StringValueCondition
public "line"(): $ArrayList<(string)>
public "key"(): string
public "path"(): string
public "getID"(): $ResourceLocation
public static "shouldRegisterEntry"(arg0: $JsonElement$Type): boolean
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringValueCondition$Type = ($StringValueCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringValueCondition_ = $StringValueCondition$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/filter/$FilterScreen" {
import {$StackedScreen, $StackedScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$StackedScreen"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FilterScreen extends $StackedScreen {
readonly "token": $ArtifactChestToken
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilterScreen$Type = ($FilterScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilterScreen_ = $FilterScreen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AbstractConditionalAttributeSetEffect" {
import {$PersistentDataSetEffect, $PersistentDataSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PersistentDataSetEffect"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$AttributeSetData, $AttributeSetData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AbstractConditionalAttributeSetEffect<T extends $AttributeSetData> extends $PersistentDataSetEffect<(T)> {
readonly "ids": integer

constructor(...arg0: ($AttrSetEntry$Type)[])

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractConditionalAttributeSetEffect$Type<T> = ($AbstractConditionalAttributeSetEffect<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractConditionalAttributeSetEffect_<T> = $AbstractConditionalAttributeSetEffect$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfGluttony" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CurseOfGluttony extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseOfGluttony$Type = ($CurseOfGluttony);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseOfGluttony_ = $CurseOfGluttony$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$AbyssHammer" {
import {$HammerItem, $HammerItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$HammerItem"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $AbyssHammer extends $HammerItem implements $LegendaryWeapon {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbyssHammer$Type = ($AbyssHammer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbyssHammer_ = $AbyssHammer$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/$DelegateBlockImpl" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockImplementor, $BlockImplementor$Type} from "packages/dev/xkmc/l2modularblock/$BlockImplementor"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$DelegateBlock, $DelegateBlock$Type} from "packages/dev/xkmc/l2modularblock/$DelegateBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $DelegateBlockImpl extends $DelegateBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getImpl"(): $BlockImplementor
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "fallOn"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Entity$Type, arg4: float): void
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "onPlace"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "isSignalSource"(arg0: $BlockState$Type): boolean
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "getDrops"(arg0: $BlockState$Type, arg1: $LootParams$Builder$Type): $List<($ItemStack)>
public "getBlockSupportShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): $VoxelShape
public "getCollisionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getVisualShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "randomTick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "attack"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type): void
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "getSignal"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "entityInside"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): void
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
get "impl"(): $BlockImplementor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelegateBlockImpl$Type = ($DelegateBlockImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelegateBlockImpl_ = $DelegateBlockImpl$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfGreed" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$PlayerDifficulty, $PlayerDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/player/$PlayerDifficulty"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CurseOfGreed extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getExtraLevel"(): integer
public "getLootFactor"(arg0: $ItemStack$Type, arg1: $PlayerDifficulty$Type, arg2: $MobTraitCap$Type): double
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
get "extraLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseOfGreed$Type = ($CurseOfGreed);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseOfGreed_ = $CurseOfGreed$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/gateway/$WaveId" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $WaveId extends $Record {

constructor(id: $ResourceLocation$Type, wave: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $ResourceLocation
public "wave"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaveId$Type = ($WaveId);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaveId_ = $WaveId$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$FlamingThorn" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $FlamingThorn extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onHurtTarget"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlamingThorn$Type = ($FlamingThorn);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlamingThorn_ = $FlamingThorn$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$SetSwapItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BaseBagItem, $BaseBagItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagItem"
import {$ISetSwapItem, $ISetSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$ISetSwapItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SetSwapItem extends $BaseBagItem implements $ISetSwapItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer)

public "getRows"(arg0: $ItemStack$Type): integer
public "getRows"(): integer
public "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
get "rows"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetSwapItem$Type = ($SetSwapItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetSwapItem_ = $SetSwapItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/mob/$MasterData" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$MasterData$Minion, $MasterData$Minion$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MasterData$Minion"

export class $MasterData {
 "data": $ArrayList<($MasterData$Minion)>

constructor()

public "tick"(arg0: $MobTraitCap$Type, arg1: $Mob$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MasterData$Type = ($MasterData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MasterData_ = $MasterData$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/force/$CurseEffect" {
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$IconOverlayEffect, $IconOverlayEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$IconOverlayEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CurseEffect extends $InherentEffect implements $ForceEffect, $IconOverlayEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender
public "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseEffect$Type = ($CurseEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseEffect_ = $CurseEffect$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/common/$DrawerAccess" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EnderDrawerBlockEntity, $EnderDrawerBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerBlockEntity"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $DrawerAccess {
readonly "listener": $List<($EnderDrawerBlockEntity)>


public static "of"(arg0: $Level$Type, arg1: $ItemStack$Type): $DrawerAccess
public static "of"(arg0: $Level$Type, arg1: $UUID$Type, arg2: $Item$Type): $DrawerAccess
public "getOwner"(): $Optional<($ServerPlayer)>
public "getCount"(): integer
public "item"(): $Item
public "setCount"(arg0: integer): void
get "owner"(): $Optional<($ServerPlayer)>
get "count"(): integer
set "count"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerAccess$Type = ($DrawerAccess);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerAccess_ = $DrawerAccess$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$BlackHammer" {
import {$HammerItem, $HammerItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$HammerItem"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $BlackHammer extends $HammerItem implements $LegendaryWeapon {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackHammer$Type = ($BlackHammer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackHammer_ = $BlackHammer$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/mobeffects/$FleshOvergrowth" {
import {$IOverlayRenderEffect, $IOverlayRenderEffect$Type} from "packages/dev/xkmc/l2artifacts/content/mobeffects/$IOverlayRenderEffect"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $FleshOvergrowth extends $InherentEffect implements $IOverlayRenderEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender
public "getCurativeItems"(): $List<($ItemStack)>
public "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
get "curativeItems"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FleshOvergrowth$Type = ($FleshOvergrowth);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FleshOvergrowth_ = $FleshOvergrowth$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/mult/$DefaultStateBlockMethod" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$MultipleBlockMethod, $MultipleBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$MultipleBlockMethod"

export interface $DefaultStateBlockMethod extends $MultipleBlockMethod {

 "getDefaultState"(arg0: $BlockState$Type): $BlockState

(arg0: $BlockState$Type): $BlockState
}

export namespace $DefaultStateBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultStateBlockMethod$Type = ($DefaultStateBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultStateBlockMethod_ = $DefaultStateBlockMethod$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/immunes/$ExplosionResistanceModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ExplosionResistanceModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onHurt"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExplosionResistanceModifier$Type = ($ExplosionResistanceModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExplosionResistanceModifier_ = $ExplosionResistanceModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/config/$ToggleGolemConfigScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ITabScreen, $ITabScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$ITabScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ToggleGolemConfigMenu, $ToggleGolemConfigMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/config/$ToggleGolemConfigMenu"

export class $ToggleGolemConfigScreen extends $BaseContainerScreen<($ToggleGolemConfigMenu)> implements $ITabScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ToggleGolemConfigMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "screenHeight"(): integer
public "screenWidth"(): integer
public "asScreen"(): $Screen
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToggleGolemConfigScreen$Type = ($ToggleGolemConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToggleGolemConfigScreen_ = $ToggleGolemConfigScreen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/upgrades/$StatContainerItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$UpgradeEnhanceItem, $UpgradeEnhanceItem$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$UpgradeEnhanceItem"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $StatContainerItem extends $UpgradeEnhanceItem {
readonly "rank": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer)

public static "getType"(arg0: $ItemStack$Type): $Optional<($ResourceLocation)>
public "isFoil"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "setStat"(arg0: $ItemStack$Type, arg1: $ResourceLocation$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatContainerItem$Type = ($StatContainerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatContainerItem_ = $StatContainerItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$OreDigger" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleNumberDesc, $SimpleNumberDesc$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$SimpleNumberDesc"
import {$DiggerContext, $DiggerContext$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext"

export class $OreDigger extends $Record implements $SimpleNumberDesc {

constructor(r: integer, max: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "max"(): integer
public "getInstance"(arg0: $DiggerContext$Type): $BlockBreakerInstance
public "r"(): integer
public "range"(arg0: integer): integer
public "getMaxLevel"(): integer
public "descFull"(arg0: integer, arg1: string, arg2: boolean, arg3: boolean): $List<($Component)>
public "ignoreHardness"(): boolean
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OreDigger$Type = ($OreDigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OreDigger_ = $OreDigger$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Context, $Context$Type} from "packages/dev/xkmc/l2library/capability/conditionals/$Context"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"

export class $ArtifactSetConfig$Entry implements $Comparable<($ArtifactSetConfig$Entry)>, $Context {
 "count": integer
 "effect": $SetEffect
 "id": ($UUID)[]

/**
 * 
 * @deprecated
 */
constructor()

public "getName"(): string
public "compareTo"(arg0: $ArtifactSetConfig$Entry$Type): integer
public "validate"(arg0: $ArtifactSet$Type): void
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSetConfig$Entry$Type = ($ArtifactSetConfig$Entry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSetConfig$Entry_ = $ArtifactSetConfig$Entry$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$LCDispatch" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$ModDispatch, $ModDispatch$Type} from "packages/dev/xkmc/modulargolems/compat/materials/common/$ModDispatch"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$GolemSweepEvent, $GolemSweepEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemSweepEvent"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $LCDispatch extends $ModDispatch {
static readonly "MODID": string

constructor()

public "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public "genLang"(arg0: $RegistrateLangProvider$Type): void
public static "onGolemSweep"(arg0: $GolemSweepEvent$Type): void
public "dispatchClientSetup"(): void
public "getDataGen"(arg0: $DataGenerator$Type): $ConfigDataProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCDispatch$Type = ($LCDispatch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCDispatch_ = $LCDispatch$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfOcean" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RingOfOcean extends $CurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RingOfOcean$Type = ($RingOfOcean);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RingOfOcean_ = $RingOfOcean$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier" {
import {$DamageModifier$Order, $DamageModifier$Order$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$DamageModifier$Order"
import {$Float2FloatFunction, $Float2FloatFunction$Type} from "packages/it/unimi/dsi/fastutil/floats/$Float2FloatFunction"

export interface $DamageModifier {

 "priority"(): integer
 "info"(arg0: float): string
 "order"(): $DamageModifier$Order
 "modify"(arg0: float): float
}

export namespace $DamageModifier {
function add(arg0: float): $DamageModifier
function addExtra(arg0: float): $DamageModifier
function nonlinearMiddle(arg0: integer, arg1: $Float2FloatFunction$Type): $DamageModifier
function multAttr(arg0: float): $DamageModifier
function multTotal(arg0: float): $DamageModifier
function multBase(arg0: float): $DamageModifier
function nonlinearFinal(arg0: integer, arg1: $Float2FloatFunction$Type): $DamageModifier
function nonlinearPre(arg0: integer, arg1: $Float2FloatFunction$Type): $DamageModifier
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageModifier$Type = ($DamageModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageModifier_ = $DamageModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$GolemBannerLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ItemInHandRenderer, $ItemInHandRenderer$Type} from "packages/net/minecraft/client/renderer/$ItemInHandRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IHeadedModel, $IHeadedModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$IHeadedModel"

export class $GolemBannerLayer<T extends $AbstractGolemEntity<(any), (any)>, M extends ($EntityModel<(T)>) & ($IHeadedModel)> extends $RenderLayer<(T), (M)> {

constructor(arg0: $RenderLayerParent$Type<(T), (M)>, arg1: $ItemInHandRenderer$Type)
constructor(arg0: $RenderLayerParent$Type<(T), (M)>, arg1: float, arg2: float, arg3: float, arg4: $ItemInHandRenderer$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
public "getBanner"(arg0: T): $ItemStack
public "renders"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemBannerLayer$Type<T, M> = ($GolemBannerLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemBannerLayer_<T, M> = $GolemBannerLayer$Type<(T), (M)>;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$HostilityPotionModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"

export class $HostilityPotionModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $StatFilterType$Type, arg1: integer)

public "addSlot"(arg0: $List$Type<($UpgradeItem$Type)>, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityPotionModifier$Type = ($HostilityPotionModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityPotionModifier_ = $HostilityPotionModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$SquadEditor" {
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"

export class $SquadEditor extends $Record {

constructor(editor: $GolemConfigEditor$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "editor"(): $GolemConfigEditor
public "setCaptainId"(arg0: $UUID$Type): void
public "getCaptainId"(): $UUID
public "getRadius"(): double
public "setRadius"(arg0: double): void
set "captainId"(value: $UUID$Type)
get "captainId"(): $UUID
get "radius"(): double
set "radius"(value: double)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SquadEditor$Type = ($SquadEditor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SquadEditor_ = $SquadEditor$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$RemoteHopperTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$RemoteHopperTrigger, $RemoteHopperTrigger$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$RemoteHopperTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $RemoteHopperTrigger$Ins extends $BaseCriterionInstance<($RemoteHopperTrigger$Ins), ($RemoteHopperTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RemoteHopperTrigger$Ins$Type = ($RemoteHopperTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RemoteHopperTrigger$Ins_ = $RemoteHopperTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/recipe/$BackpackDyeRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$AbstractShapelessRecipe, $AbstractShapelessRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$AbstractShapelessRecipe$Serializer, $AbstractShapelessRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe$Serializer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BackpackDyeRecipe extends $AbstractShapelessRecipe<($BackpackDyeRecipe)> {
readonly "group": string
readonly "result": $ItemStack
readonly "ingredients": $NonNullList<($Ingredient)>

constructor(arg0: $ResourceLocation$Type, arg1: string, arg2: $ItemStack$Type, arg3: $NonNullList$Type<($Ingredient$Type)>)

public "getSerializer"(): $AbstractShapelessRecipe$Serializer<($BackpackDyeRecipe)>
public "assemble"(arg0: $CraftingContainer$Type, arg1: $RegistryAccess$Type): $ItemStack
get "serializer"(): $AbstractShapelessRecipe$Serializer<($BackpackDyeRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackDyeRecipe$Type = ($BackpackDyeRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackDyeRecipe_ = $BackpackDyeRecipe$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/blazegear/$BGClientEvents" {
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$EntityRenderersEvent$RegisterLayerDefinitions, $EntityRenderersEvent$RegisterLayerDefinitions$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$RegisterLayerDefinitions"

export class $BGClientEvents {
static "BLAZE_ARMS_LAYER": $ModelLayerLocation

constructor()

public static "registerLayer"(arg0: $EntityRenderersEvent$RegisterLayerDefinitions$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BGClientEvents$Type = ($BGClientEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BGClientEvents_ = $BGClientEvents$Type;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$OverlayUtil" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Vector2ic, $Vector2ic$Type} from "packages/org/joml/$Vector2ic"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"
import {$ClientTooltipPositioner, $ClientTooltipPositioner$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipPositioner"

export class $OverlayUtil implements $ClientTooltipPositioner {
 "bg": integer
 "bs": integer
 "be": integer
 "tc": integer

constructor(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer)

public "renderLongText"(arg0: $Font$Type, arg1: $List$Type<($Component$Type)>): void
public static "drawRect"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer): void
public "positionTooltip"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer): $Vector2ic
public static "fillRect"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer): void
public "getMaxWidth"(): integer
public "renderTooltipInternal"(arg0: $Font$Type, arg1: $List$Type<($ClientTooltipComponent$Type)>): void
get "maxWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OverlayUtil$Type = ($OverlayUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OverlayUtil_ = $OverlayUtil$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/$ConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ArtifactSlot, $ArtifactSlot$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot"

export class $ConfigGen extends $ConfigDataProvider {
static readonly "HEALTH_ADD": $ResourceLocation
static readonly "ARMOR_ADD": $ResourceLocation
static readonly "TOUGH_ADD": $ResourceLocation
static readonly "ATK_ADD": $ResourceLocation
static readonly "REACH_ADD": $ResourceLocation
static readonly "CR_ADD": $ResourceLocation
static readonly "CD_ADD": $ResourceLocation
static readonly "ATK_MULT": $ResourceLocation
static readonly "SPEED_MULT": $ResourceLocation
static readonly "ATK_SPEED_MULT": $ResourceLocation
static readonly "BOW_ADD": $ResourceLocation
static readonly "EXPLOSION_ADD": $ResourceLocation
static readonly "MAGIC_ADD": $ResourceLocation

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "register"(): void
public static "addSlotStat"(arg0: $ConfigDataProvider$Collector$Type, arg1: $ArtifactSlot$Type, arg2: $ArrayList$Type<($ResourceLocation$Type)>, arg3: $ArrayList$Type<($ResourceLocation$Type)>): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigGen$Type = ($ConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigGen_ = $ConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/common/$StackedScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$IFilterScreen, $IFilterScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$IFilterScreen"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $StackedScreen extends $Screen implements $IFilterScreen {
readonly "token": $ArtifactChestToken
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "screenHeight"(): integer
public "screenWidth"(): integer
public "onSwitch"(): void
public static "renderHighlight"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isPauseScreen"(): boolean
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
public "asScreen"(): $Screen
get "pauseScreen"(): boolean
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StackedScreen$Type = ($StackedScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StackedScreen_ = $StackedScreen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/recycle/$RecycleMenuScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$RecycleMenu, $RecycleMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/recycle/$RecycleMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractScrollerScreen, $AbstractScrollerScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$AbstractScrollerScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $RecycleMenuScreen extends $AbstractScrollerScreen<($RecycleMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $RecycleMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public static "formatNumber"(arg0: integer): string
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecycleMenuScreen$Type = ($RecycleMenuScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecycleMenuScreen_ = $RecycleMenuScreen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/automation/$CreateRecipeEvents" {
import {$DeployerRecipeSearchEvent, $DeployerRecipeSearchEvent$Type} from "packages/com/simibubi/create/content/kinetics/deployer/$DeployerRecipeSearchEvent"

export class $CreateRecipeEvents {

constructor()

public static "addRecipe"(arg0: $DeployerRecipeSearchEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateRecipeEvents$Type = ($CreateRecipeEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateRecipeEvents_ = $CreateRecipeEvents$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/attribute/$TimedCAData" {
import {$AttributeSetData, $AttributeSetData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$AttributeSetData$AttributePair, $AttributeSetData$AttributePair$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData$AttributePair"

export class $TimedCAData extends $AttributeSetData {
 "time": integer
 "list": $ArrayList<($AttributeSetData$AttributePair)>
 "life": integer
 "rank": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimedCAData$Type = ($TimedCAData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimedCAData_ = $TimedCAData$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/special/$SoulBindingEnchantment" {
import {$LegendaryEnchantment, $LegendaryEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/special/$LegendaryEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $SoulBindingEnchantment extends $LegendaryEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulBindingEnchantment$Type = ($SoulBindingEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulBindingEnchantment_ = $SoulBindingEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/wand/$WandItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WandItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "isEnchantable"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WandItem$Type = ($WandItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WandItem_ = $WandItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v1/$PerfectionAbsorption" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $PerfectionAbsorption extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "tick"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PerfectionAbsorption$Type = ($PerfectionAbsorption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PerfectionAbsorption_ = $PerfectionAbsorption$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$EterniumTool" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EterniumTool extends $ExtraToolConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EterniumTool$Type = ($EterniumTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EterniumTool_ = $EterniumTool$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/config/$LinearFuncConfig" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$LinearFuncConfig$Entry, $LinearFuncConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$LinearFuncConfig$Entry"
import {$LinearFuncHandle, $LinearFuncHandle$Type} from "packages/dev/xkmc/l2artifacts/content/core/$LinearFuncHandle"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"

export class $LinearFuncConfig extends $BaseConfig {
 "map": $HashMap<($LinearFuncHandle), ($LinearFuncConfig$Entry)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LinearFuncConfig$Type = ($LinearFuncConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LinearFuncConfig_ = $LinearFuncConfig$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/highlevel/$ErosionTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraitEffectCache, $TraitEffectCache$Type} from "packages/dev/xkmc/l2hostility/content/logic/$TraitEffectCache"
import {$SlotIterateDamageTrait, $SlotIterateDamageTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/highlevel/$SlotIterateDamageTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $ErosionTrait extends $SlotIterateDamageTrait {

constructor(arg0: $ChatFormatting$Type)

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onHurtTarget"(arg0: integer, arg1: $LivingEntity$Type, arg2: $AttackCache$Type, arg3: $TraitEffectCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ErosionTrait$Type = ($ErosionTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ErosionTrait_ = $ErosionTrait$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemHandleExpEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$ExperienceOrb, $ExperienceOrb$Type} from "packages/net/minecraft/world/entity/$ExperienceOrb"
import {$GolemEvent, $GolemEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemEvent"

export class $GolemHandleExpEvent extends $GolemEvent {

constructor()
constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $ExperienceOrb$Type)

public "getOrb"(): $ExperienceOrb
public "getListenerList"(): $ListenerList
get "orb"(): $ExperienceOrb
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemHandleExpEvent$Type = ($GolemHandleExpEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemHandleExpEvent_ = $GolemHandleExpEvent$Type;
}}
declare module "packages/dev/xkmc/l2tabs/compat/$CuriosSlotWrapper" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ICurioStacksHandler, $ICurioStacksHandler$Type} from "packages/top/theillusivec4/curios/api/type/inventory/$ICurioStacksHandler"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CuriosSlotWrapper extends $Record {

constructor(player: $LivingEntity$Type, cap: $ICurioStacksHandler$Type, index: integer, identifier: string)

public "index"(): integer
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "cap"(): $ICurioStacksHandler
public "player"(): $LivingEntity
public "identifier"(): string
public "toSlot"(arg0: integer, arg1: integer): $Slot
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CuriosSlotWrapper$Type = ($CuriosSlotWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CuriosSlotWrapper_ = $CuriosSlotWrapper$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$LWDamageTypeGen" {
import {$DamageTypeRoot, $DamageTypeRoot$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageTypeRoot"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$DamageTypeAndTagsGen, $DamageTypeAndTagsGen$Type} from "packages/dev/xkmc/l2damagetracker/init/data/$DamageTypeAndTagsGen"

export class $LWDamageTypeGen extends $DamageTypeAndTagsGen {
static readonly "TRIDENT": $DamageTypeRoot

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg2: $ExistingFileHelper$Type)

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWDamageTypeGen$Type = ($LWDamageTypeGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWDamageTypeGen_ = $LWDamageTypeGen$Type;
}}
declare module "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$DrawerInteractToServer$Type, $DrawerInteractToServer$Type$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Type"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $DrawerInteractToServer extends $SerialPacketBase {
 "type": $DrawerInteractToServer$Type
 "wid": integer
 "slot": integer
 "limit": integer
 "stack": $ItemStack
 "suppress": $DrawerInteractToServer$Callback

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $DrawerInteractToServer$Type$Type, arg1: integer, arg2: integer, arg3: $ItemStack$Type, arg4: $DrawerInteractToServer$Callback$Type, arg5: integer)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerInteractToServer$Type = ($DrawerInteractToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerInteractToServer_ = $DrawerInteractToServer$Type;
}}
declare module "packages/dev/xkmc/l2complements/events/$ItemUseEventHandler$ItemClickHandler" {
import {$PlayerInteractEvent$RightClickEmpty, $PlayerInteractEvent$RightClickEmpty$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickEmpty"
import {$PlayerInteractEvent$EntityInteract, $PlayerInteractEvent$EntityInteract$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteract"
import {$AttackEntityEvent, $AttackEntityEvent$Type} from "packages/net/minecraftforge/event/entity/player/$AttackEntityEvent"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$PlayerInteractEvent$LeftClickBlock, $PlayerInteractEvent$LeftClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$LeftClickBlock"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"
import {$PlayerInteractEvent$RightClickBlock, $PlayerInteractEvent$RightClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickBlock"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$PlayerInteractEvent$LeftClickEmpty, $PlayerInteractEvent$LeftClickEmpty$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$LeftClickEmpty"

export interface $ItemUseEventHandler$ItemClickHandler {

 "predicate"(arg0: $ItemStack$Type, arg1: $Class$Type<(any)>, arg2: $PlayerEvent$Type): boolean
 "onPlayerRightClickEmpty"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$RightClickEmpty$Type): void
 "onPlayerRightClickBlock"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$RightClickBlock$Type): void
 "onPlayerLeftClickBlock"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$LeftClickBlock$Type): void
 "onPlayerRightClickEntity"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$EntityInteract$Type): void
 "onPlayerLeftClickEmpty"(arg0: $ItemStack$Type, arg1: $PlayerInteractEvent$LeftClickEmpty$Type): void
 "onPlayerLeftClickEntity"(arg0: $ItemStack$Type, arg1: $AttackEntityEvent$Type): void
 "onCriticalHit"(arg0: $ItemStack$Type, arg1: $CriticalHitEvent$Type): void

(arg0: $ItemStack$Type, arg1: $Class$Type<(any)>, arg2: $PlayerEvent$Type): boolean
}

export namespace $ItemUseEventHandler$ItemClickHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemUseEventHandler$ItemClickHandler$Type = ($ItemUseEventHandler$ItemClickHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemUseEventHandler$ItemClickHandler_ = $ItemUseEventHandler$ItemClickHandler$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/sort/$SortTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export class $SortTab extends $FilterTabBase<($SortTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $FilterTabToken<(T)>
readonly "manager": $FilterTabManager
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $FilterTabToken$Type<($SortTab$Type)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SortTab$Type = ($SortTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SortTab_ = $SortTab$Type;
}}
declare module "packages/dev/xkmc/l2complements/events/$MaterialEventHandler" {
import {$GrindstoneEvent$OnPlaceItem, $GrindstoneEvent$OnPlaceItem$Type} from "packages/net/minecraftforge/event/$GrindstoneEvent$OnPlaceItem"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$PlayerInteractEvent$EntityInteract, $PlayerInteractEvent$EntityInteract$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteract"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MaterialEventHandler {

constructor()

public static "onEntityDeath"(arg0: $LivingDeathEvent$Type): void
public static "onInteract"(arg0: $PlayerInteractEvent$EntityInteract$Type): void
public static "onGrind"(arg0: $GrindstoneEvent$OnPlaceItem$Type): void
public static "onItemKill"(arg0: $Level$Type, arg1: $Entity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MaterialEventHandler$Type = ($MaterialEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MaterialEventHandler_ = $MaterialEventHandler$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/jei/$GolemJEIPlugin" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$IGuiProperties, $IGuiProperties$Type} from "packages/mezz/jei/api/gui/handlers/$IGuiProperties"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$ITabScreen, $ITabScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$ITabScreen"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $GolemJEIPlugin implements $IModPlugin {
static readonly "ID": $ResourceLocation

constructor()

public static "create"(arg0: $ITabScreen$Type): $IGuiProperties
public "registerItemSubtypes"(arg0: $ISubtypeRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerGuiHandlers"(arg0: $IGuiHandlerRegistration$Type): void
public "getPluginUid"(): $ResourceLocation
public "registerRecipes"(arg0: $IRecipeRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "onRuntimeUnavailable"(): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipeCatalysts"(arg0: $IRecipeCatalystRegistration$Type): void
public "registerAdvanced"(arg0: $IAdvancedRegistration$Type): void
public "onRuntimeAvailable"(arg0: $IJeiRuntime$Type): void
public "registerCategories"(arg0: $IRecipeCategoryRegistration$Type): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemJEIPlugin$Type = ($GolemJEIPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemJEIPlugin_ = $GolemJEIPlugin$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/one/$SpecialDropBlockMethod" {
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SingletonBlockMethod, $SingletonBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$SingletonBlockMethod"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $SpecialDropBlockMethod extends $SingletonBlockMethod {

 "getDrops"(arg0: $BlockState$Type, arg1: $LootParams$Builder$Type): $List<($ItemStack)>

(arg0: $BlockState$Type, arg1: $LootParams$Builder$Type): $List<($ItemStack)>
}

export namespace $SpecialDropBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialDropBlockMethod$Type = ($SpecialDropBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialDropBlockMethod_ = $SpecialDropBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/screen/track/$TrackedEntryData" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export interface $TrackedEntryData<T extends ($Record) & ($TrackedEntryData<(T)>)> {

}

export namespace $TrackedEntryData {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrackedEntryData$Type<T> = ($TrackedEntryData<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrackedEntryData_<T> = $TrackedEntryData$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$DrawerInvAccess" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$DrawerItem, $DrawerItem$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$DrawerItem"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BaseDrawerInvAccess, $BaseDrawerInvAccess$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$BaseDrawerInvAccess"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $DrawerInvAccess extends $Record implements $BaseDrawerInvAccess {

constructor(drawerStack: $ItemStack$Type, drawerItem: $DrawerItem$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "isEmpty"(): boolean
public "drawerItem"(): $DrawerItem
public "player"(): $ServerPlayer
public "drawerStack"(): $ItemStack
public "getStoredCount"(): integer
public "setStoredCount"(arg0: integer): void
public "getMax"(arg0: $ItemStack$Type): integer
public "getSlots"(): integer
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "isItemValid"(arg0: $ItemStack$Type): boolean
public "setStoredItem"(arg0: $Item$Type): void
public "getStoredItem"(): $Item
public "mayStack"(arg0: $BaseDrawerInvAccess$Type, arg1: integer, arg2: $ItemStack$Type, arg3: $PickupConfig$Type): boolean
public "getStoredStack"(): $ItemStack
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "empty"(): boolean
get "storedCount"(): integer
set "storedCount"(value: integer)
get "slots"(): integer
set "storedItem"(value: $Item$Type)
get "storedItem"(): $Item
get "storedStack"(): $ItemStack
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerInvAccess$Type = ($DrawerInvAccess);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerInvAccess_ = $DrawerInvAccess$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$HarbingerHomingMissileAttackGoal" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$BaseRangedAttackGoal, $BaseRangedAttackGoal$Type} from "packages/dev/xkmc/modulargolems/content/modifier/special/$BaseRangedAttackGoal"

export class $HarbingerHomingMissileAttackGoal extends $BaseRangedAttackGoal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HarbingerHomingMissileAttackGoal$Type = ($HarbingerHomingMissileAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HarbingerHomingMissileAttackGoal_ = $HarbingerHomingMissileAttackGoal$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/data/$MGConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $MGConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MGConfigGen$Type = ($MGConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MGConfigGen_ = $MGConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$ArtifactSetConfig$SetBuilder, $ArtifactSetConfig$SetBuilder$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$SetBuilder"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $ArtifactSetConfig extends $BaseConfig {
 "map": $HashMap<($ArtifactSet), ($ArrayList<($ArtifactSetConfig$Entry)>)>

constructor()

public static "getInstance"(): $ArtifactSetConfig
public static "construct"(arg0: $ArtifactSet$Type, arg1: $Consumer$Type<($ArtifactSetConfig$SetBuilder$Type)>): $ArtifactSetConfig
get "instance"(): $ArtifactSetConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSetConfig$Type = ($ArtifactSetConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSetConfig_ = $ArtifactSetConfig$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/ingredients/$BaseIngredient$Serializer" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IIngredientSerializer, $IIngredientSerializer$Type} from "packages/net/minecraftforge/common/crafting/$IIngredientSerializer"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$BaseIngredient, $BaseIngredient$Type} from "packages/dev/xkmc/l2library/serial/ingredients/$BaseIngredient"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BaseIngredient$Serializer<T extends $BaseIngredient<(T)>> extends $Record implements $IIngredientSerializer<(T)> {

constructor(cls: $Class$Type<(T)>, id: $ResourceLocation$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $ResourceLocation
public "cls"(): $Class<(T)>
public "write"(arg0: $FriendlyByteBuf$Type, arg1: T): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseIngredient$Serializer$Type<T> = ($BaseIngredient$Serializer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseIngredient$Serializer_<T> = $BaseIngredient$Serializer$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/wand/$IMobClickItem" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMobClickItem {

}

export namespace $IMobClickItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMobClickItem$Type = ($IMobClickItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMobClickItem_ = $IMobClickItem$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/screen/track/$ItemBasedTrace" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ItemBasedTraceData, $ItemBasedTraceData$Type} from "packages/dev/xkmc/l2screentracker/screen/track/$ItemBasedTraceData"
import {$LayerPopType, $LayerPopType$Type} from "packages/dev/xkmc/l2screentracker/screen/base/$LayerPopType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TrackedEntryType, $TrackedEntryType$Type} from "packages/dev/xkmc/l2screentracker/screen/track/$TrackedEntryType"

export class $ItemBasedTrace extends $TrackedEntryType<($ItemBasedTraceData)> {

constructor()

public "restore"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type, arg3: $Component$Type): $LayerPopType
public "restoreMenuNotifyClient"(arg0: $ServerPlayer$Type, arg1: $ItemBasedTraceData$Type, arg2: $Component$Type): $LayerPopType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemBasedTrace$Type = ($ItemBasedTrace);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemBasedTrace_ = $ItemBasedTrace$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/jei/$CustomRecipeEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"

export class $CustomRecipeEvent extends $Event {
readonly "registration": $IRecipeRegistration

constructor()
constructor(arg0: $IRecipeRegistration$Type)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomRecipeEvent$Type = ($CustomRecipeEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomRecipeEvent_ = $CustomRecipeEvent$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/dragons/$DragonCompat" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"

export class $DragonCompat {
static readonly "ITEMS": (($ItemEntry<($Item)>)[])[]

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DragonCompat$Type = ($DragonCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DragonCompat_ = $DragonCompat$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/spawner/$TraitSpawnerData" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TraitSpawnerData {

constructor()

public "onDeath"(arg0: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitSpawnerData$Type = ($TraitSpawnerData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitSpawnerData_ = $TraitSpawnerData$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/persistent/$PeriodicData" {
import {$SetEffectData, $SetEffectData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffectData"

export class $PeriodicData extends $SetEffectData {
 "tick_count": integer
 "life": integer
 "rank": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PeriodicData$Type = ($PeriodicData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PeriodicData_ = $PeriodicData$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$DrawerBlockEntity" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$DrawerHandler, $DrawerHandler$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$DrawerHandler"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IDrawerBlockEntity, $IDrawerBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$IDrawerBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $DrawerBlockEntity extends $IDrawerBlockEntity {
readonly "handler": $DrawerHandler
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "getItem"(): $Item
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
get "item"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerBlockEntity$Type = ($DrawerBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerBlockEntity_ = $DrawerBlockEntity$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/registrate/$BackpackBlocks" {
import {$BlockEntry, $BlockEntry$Type} from "packages/com/tterrag/registrate/util/entry/$BlockEntry"
import {$EnderDrawerBlockEntity, $EnderDrawerBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerBlockEntity"
import {$DelegateBlock, $DelegateBlock$Type} from "packages/dev/xkmc/l2modularblock/$DelegateBlock"
import {$BlockEntityEntry, $BlockEntityEntry$Type} from "packages/com/tterrag/registrate/util/entry/$BlockEntityEntry"
import {$WorldChestBlockEntity, $WorldChestBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestBlockEntity"
import {$DrawerBlockEntity, $DrawerBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$DrawerBlockEntity"

export class $BackpackBlocks {
static readonly "WORLD_CHEST": $BlockEntry<($DelegateBlock)>
static readonly "TE_WORLD_CHEST": $BlockEntityEntry<($WorldChestBlockEntity)>
static readonly "ENDER_DRAWER": $BlockEntry<($DelegateBlock)>
static readonly "TE_ENDER_DRAWER": $BlockEntityEntry<($EnderDrawerBlockEntity)>
static readonly "DRAWER": $BlockEntry<($DelegateBlock)>
static readonly "TE_DRAWER": $BlockEntityEntry<($DrawerBlockEntity)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackBlocks$Type = ($BackpackBlocks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackBlocks_ = $BackpackBlocks$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$LCKeys" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $LCKeys extends $Enum<($LCKeys)> {
static readonly "DIG": $LCKeys
readonly "id": string
readonly "def": string
readonly "key": integer
readonly "map": $KeyMapping


public static "values"(): ($LCKeys)[]
public static "valueOf"(arg0: string): $LCKeys
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCKeys$Type = (("dig")) | ($LCKeys);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCKeys_ = $LCKeys$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/$LayerWrapper" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $LayerWrapper<T extends $HumanoidGolemEntity, M extends $EntityModel<(T)>> extends $RenderLayer<(T), (M)> {

constructor(arg0: $RenderLayerParent$Type<(T), (M)>, arg1: $RenderLayer$Type<(T), (M)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayerWrapper$Type<T, M> = ($LayerWrapper<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayerWrapper_<T, M> = $LayerWrapper$Type<(T), (M)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/ranged/$GolemTridentAttackGoal" {
import {$RangedAttackGoal, $RangedAttackGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$RangedAttackGoal"
import {$GolemMeleeGoal, $GolemMeleeGoal$Type} from "packages/dev/xkmc/modulargolems/content/entity/goals/$GolemMeleeGoal"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $GolemTridentAttackGoal extends $RangedAttackGoal {

constructor(arg0: $HumanoidGolemEntity$Type, arg1: double, arg2: integer, arg3: float, arg4: $GolemMeleeGoal$Type)

public "canUse"(): boolean
public "start"(): void
public "stop"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTridentAttackGoal$Type = ($GolemTridentAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTridentAttackGoal_ = $GolemTridentAttackGoal$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$PathEditor" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathConfig, $PathConfig$Type} from "packages/dev/xkmc/modulargolems/content/capability/$PathConfig"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IGhostContainer, $IGhostContainer$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$IGhostContainer"

export class $PathEditor extends $Record implements $IGhostContainer {

constructor(editor: $GolemConfigEditor$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "set"(arg0: integer, arg1: $ItemStack$Type): void
public "editor"(): $GolemConfigEditor
public "getFilter"(): $PathConfig
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "listSize"(): integer
public "internalMatch"(arg0: $ItemStack$Type): boolean
public "isEmpty"(): boolean
public "setChanged"(): void
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "stillValid"(arg0: $Player$Type): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "filter"(): $PathConfig
get "containerSize"(): integer
get "empty"(): boolean
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathEditor$Type = ($PathEditor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathEditor_ = $PathEditor$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$LuckAttackEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$LuckAttackData, $LuckAttackData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$LuckAttackData"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$AbstractConditionalAttributeSetEffect, $AbstractConditionalAttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AbstractConditionalAttributeSetEffect"

export class $LuckAttackEffect extends $AbstractConditionalAttributeSetEffect<($LuckAttackData)> {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type, ...arg2: ($AttrSetEntry$Type)[])

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "playerHurtOpponentEvent"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LuckAttackEffect$Type = ($LuckAttackEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LuckAttackEffect_ = $LuckAttackEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$IgnisFireballAttackGoal" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$BaseRangedAttackGoal, $BaseRangedAttackGoal$Type} from "packages/dev/xkmc/modulargolems/content/modifier/special/$BaseRangedAttackGoal"

export class $IgnisFireballAttackGoal extends $BaseRangedAttackGoal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IgnisFireballAttackGoal$Type = ($IgnisFireballAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IgnisFireballAttackGoal_ = $IgnisFireballAttackGoal$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/data/$MGConfig$Client" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $MGConfig$Client {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MGConfig$Client$Type = ($MGConfig$Client);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MGConfig$Client_ = $MGConfig$Client$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/backpack/$BackpackItem" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BaseBagItem, $BaseBagItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagItem"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BackpackModelItem, $BackpackModelItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BackpackModelItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BackpackItem extends $BaseBagItem implements $BackpackModelItem {
static readonly "MAX_ROW": integer
readonly "color": $DyeColor
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $DyeColor$Type, arg1: $Item$Properties$Type)

public "open"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type): void
public static "initLootGen"(arg0: $ItemStack$Type, arg1: $ResourceLocation$Type): $ItemStack
public "getModelTexture"(arg0: $ItemStack$Type): $ResourceLocation
public "getRows"(arg0: $ItemStack$Type): integer
public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public static "setRow"(arg0: $ItemStack$Type, arg1: integer): $ItemStack
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "canFitInsideContainerItems"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackItem$Type = ($BackpackItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackItem_ = $BackpackItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/loot/$GluttonyLootModifier" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$LootModifier, $LootModifier$Type} from "packages/net/minecraftforge/common/loot/$LootModifier"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $GluttonyLootModifier extends $LootModifier {
static readonly "CODEC": $Codec<($GluttonyLootModifier)>

constructor(...arg0: ($LootItemCondition$Type)[])

public "getConditions"(): ($LootItemCondition)[]
public "codec"(): $Codec<($GluttonyLootModifier)>
public static "getJson"<U>(arg0: $Dynamic$Type<(any)>): $JsonElement
get "conditions"(): ($LootItemCondition)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GluttonyLootModifier$Type = ($GluttonyLootModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GluttonyLootModifier_ = $GluttonyLootModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/common/$InvisibleTrait" {
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$SelfEffectTrait, $SelfEffectTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$SelfEffectTrait"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $InvisibleTrait extends $SelfEffectTrait {
readonly "effect": $Supplier<($MobEffect)>

constructor()

public "allow"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer): boolean
public "postInit"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvisibleTrait$Type = ($InvisibleTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvisibleTrait_ = $InvisibleTrait$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$RagnarokTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LegendaryTrait, $LegendaryTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$LegendaryTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $RagnarokTrait extends $LegendaryTrait {

constructor(arg0: $ChatFormatting$Type)

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "postHurtImpl"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RagnarokTrait$Type = ($RagnarokTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RagnarokTrait_ = $RagnarokTrait$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CrossbowAttackMob, $CrossbowAttackMob$Type} from "packages/net/minecraft/world/entity/monster/$CrossbowAttackMob"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemWrapper, $ItemWrapper$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$ItemWrapper"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$SweepGolemEntity, $SweepGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$SweepGolemEntity"
import {$HumaniodGolemPartType, $HumaniodGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumaniodGolemPartType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $HumanoidGolemEntity extends $SweepGolemEntity<($HumanoidGolemEntity), ($HumaniodGolemPartType)> implements $CrossbowAttackMob {
 "shieldCooldown": integer
 "inventoryTick": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<($HumanoidGolemEntity$Type)>, arg1: $Level$Type)

public "getProjectile"(arg0: $ItemStack$Type): $ItemStack
public "tick"(): void
public "handleEntityEvent"(arg0: byte): void
public "aiStep"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "setItemSlot"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): void
public "getMyRidingOffset"(): double
public "getUseItem"(): $ItemStack
public "isBlocking"(): boolean
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "broadcastBreakEvent"(arg0: $EquipmentSlot$Type): void
public "performRangedAttack"(arg0: $LivingEntity$Type, arg1: float): void
public "shieldSlot"(): $InteractionHand
public "attackStep"(): void
public "getBackupHand"(): $ItemWrapper
public "getArrowSlot"(): $ItemWrapper
public "canFireProjectileWeapon"(arg0: $ProjectileWeaponItem$Type): boolean
public "checkRide"(arg0: $LivingEntity$Type): void
public "setChargingCrossbow"(arg0: boolean): void
public "onCrossbowAttackPerformed"(): void
public "performCrossbowAttack"(arg0: $LivingEntity$Type, arg1: float): void
public "shootCrossbowProjectile"(arg0: $LivingEntity$Type, arg1: $LivingEntity$Type, arg2: $Projectile$Type, arg3: float, arg4: float): void
public "shootCrossbowProjectile"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $Projectile$Type, arg3: float): void
public "reassessWeaponGoal"(): void
public "isChargingCrossbow"(): boolean
public "getWeaponHand"(): $InteractionHand
public "getProjectileShotVector"(arg0: $LivingEntity$Type, arg1: $Vec3$Type, arg2: float): $Vector3f
public "getTarget"(): $LivingEntity
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "myRidingOffset"(): double
get "useItem"(): $ItemStack
get "blocking"(): boolean
get "backupHand"(): $ItemWrapper
get "arrowSlot"(): $ItemWrapper
set "chargingCrossbow"(value: boolean)
get "chargingCrossbow"(): boolean
get "weaponHand"(): $InteractionHand
get "target"(): $LivingEntity
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HumanoidGolemEntity$Type = ($HumanoidGolemEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HumanoidGolemEntity_ = $HumanoidGolemEntity$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/$L2BackpackClient" {
import {$RegisterGuiOverlaysEvent, $RegisterGuiOverlaysEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterGuiOverlaysEvent"
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$RegisterItemDecorationsEvent, $RegisterItemDecorationsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterItemDecorationsEvent"
import {$RegisterClientTooltipComponentFactoriesEvent, $RegisterClientTooltipComponentFactoriesEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientTooltipComponentFactoriesEvent"
import {$EntityRenderersEvent$RegisterLayerDefinitions, $EntityRenderersEvent$RegisterLayerDefinitions$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$RegisterLayerDefinitions"
import {$RegisterKeyMappingsEvent, $RegisterKeyMappingsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterKeyMappingsEvent"
import {$RegisterClientReloadListenersEvent, $RegisterClientReloadListenersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientReloadListenersEvent"

export class $L2BackpackClient {

constructor()

public static "clientSetup"(arg0: $FMLClientSetupEvent$Type): void
public static "registerKeys"(arg0: $RegisterKeyMappingsEvent$Type): void
public static "registerDeco"(arg0: $RegisterItemDecorationsEvent$Type): void
public static "registerLayer"(arg0: $EntityRenderersEvent$RegisterLayerDefinitions$Type): void
public static "registerClientTooltip"(arg0: $RegisterClientTooltipComponentFactoriesEvent$Type): void
public static "registerOverlay"(arg0: $RegisterGuiOverlaysEvent$Type): void
public static "registerReloadListener"(arg0: $RegisterClientReloadListenersEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2BackpackClient$Type = ($L2BackpackClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2BackpackClient_ = $L2BackpackClient$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/path/$ConfigPathTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$ConfigGroup"
import {$GolemTabBase, $GolemTabBase$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $ConfigPathTab extends $GolemTabBase<($ConfigGroup), ($ConfigPathTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $GolemTabToken<(G), (T)>
readonly "manager": $GolemTabManager<(G)>
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $GolemTabToken$Type<($ConfigGroup$Type), ($ConfigPathTab$Type)>, arg2: $GolemTabManager$Type<($ConfigGroup$Type)>, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigPathTab$Type = ($ConfigPathTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigPathTab_ = $ConfigPathTab$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$CustomShapelessBuilder" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$AbstractShapelessRecipe, $AbstractShapelessRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ShapelessRecipeBuilder, $ShapelessRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$ShapelessRecipeBuilder"
import {$AbstractShapelessRecipe$Serializer, $AbstractShapelessRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe$Serializer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$IExtendedRecipe, $IExtendedRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$IExtendedRecipe"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $CustomShapelessBuilder<T extends $AbstractShapelessRecipe<(T)>> extends $ShapelessRecipeBuilder implements $IExtendedRecipe {
readonly "result": $Item
readonly "count": integer
readonly "ingredients": $List<($Ingredient)>
readonly "advancement": $Advancement$Builder
 "group": string

constructor(arg0: $RegistryEntry$Type<($AbstractShapelessRecipe$Serializer$Type<(T)>)>, arg1: $ItemLike$Type, arg2: integer)

public "addAdditional"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public "unlockedBy"(arg0: $RegistrateRecipeProvider$Type, arg1: $ItemLike$Type): $CustomShapelessBuilder<(T)>
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
get "type"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomShapelessBuilder$Type<T> = ($CustomShapelessBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomShapelessBuilder_<T> = $CustomShapelessBuilder$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$PlayerCapabilitySerializer, $PlayerCapabilitySerializer$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilitySerializer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerCapabilityTemplate, $PlayerCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$PlayerCapabilityNetworkHandler, $PlayerCapabilityNetworkHandler$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityNetworkHandler"
import {$GeneralCapabilityHolder, $GeneralCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityHolder"

export class $PlayerCapabilityHolder<T extends $PlayerCapabilityTemplate<(T)>> extends $GeneralCapabilityHolder<($Player), (T)> {
static readonly "INTERNAL_MAP": $Map<($ResourceLocation), ($PlayerCapabilityHolder<(any)>)>
readonly "network": $PlayerCapabilityNetworkHandler<(T)>
readonly "capability": $Capability<(T)>
readonly "id": $ResourceLocation
readonly "holder_class": $Class<(T)>
readonly "entity_class": $Class<(E)>
readonly "sup": $Supplier<(T)>

constructor(arg0: $ResourceLocation$Type, arg1: $Capability$Type<(T)>, arg2: $Class$Type<(T)>, arg3: $Supplier$Type<(T)>, arg4: $Function$Type<($PlayerCapabilityHolder$Type<(T)>), ($PlayerCapabilityNetworkHandler$Type<(T)>)>)

public "get"(arg0: $Player$Type): T
public "getCache"(arg0: $Player$Type): $CompoundTag
public "generateSerializer"(arg0: $Player$Type): $PlayerCapabilitySerializer<(T)>
public "cacheSet"(arg0: $CompoundTag$Type, arg1: boolean): void
public "updateTracked"(arg0: $CompoundTag$Type, arg1: $Player$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerCapabilityHolder$Type<T> = ($PlayerCapabilityHolder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerCapabilityHolder_<T> = $PlayerCapabilityHolder$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/command/$LHPlayerCommands" {
import {$HostilityCommands, $HostilityCommands$Type} from "packages/dev/xkmc/l2hostility/content/command/$HostilityCommands"

export class $LHPlayerCommands extends $HostilityCommands {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHPlayerCommands$Type = ($LHPlayerCommands);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHPlayerCommands_ = $LHPlayerCommands$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/card/$DefaultFilterCard" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TargetFilterCard, $TargetFilterCard$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$TargetFilterCard"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DefaultFilterCard extends $TargetFilterCard {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "mayTarget"(arg0: $ItemStack$Type): $Predicate<($LivingEntity)>
public static "defaultPredicate"(arg0: $LivingEntity$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultFilterCard$Type = ($DefaultFilterCard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultFilterCard_ = $DefaultFilterCard$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$SlotLocked" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $SlotLocked extends $Slot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Inventory$Type, arg1: integer, arg2: integer, arg3: integer)

public "mayPlace"(arg0: $ItemStack$Type): boolean
public "mayPickup"(arg0: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotLocked$Type = ($SlotLocked);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotLocked_ = $SlotLocked$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/entity/$HostilityCharge" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BaseFireball, $BaseFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$BaseFireball"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $HostilityCharge extends $BaseFireball<($HostilityCharge)> {
 "lifetime": integer
 "xPower": double
 "yPower": double
 "zPower": double
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $LivingEntity$Type, arg1: double, arg2: double, arg3: double, arg4: $Level$Type)
constructor(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: $Level$Type)
constructor(arg0: $EntityType$Type<($HostilityCharge$Type)>, arg1: $Level$Type)

public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityCharge$Type = ($HostilityCharge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityCharge_ = $HostilityCharge$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$RenderHandle" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $RenderHandle<T> extends $Record {

constructor(entity: T, f1: float, f2: float, stack: $PoseStack$Type, source: $MultiBufferSource$Type, i: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "i"(): integer
public "source"(): $MultiBufferSource
public "stack"(): $PoseStack
public "f1"(): float
public "f2"(): float
public "entity"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderHandle$Type<T> = ($RenderHandle<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderHandle_<T> = $RenderHandle$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/spawner/$TraitSpawnerBlockEntity" {
import {$TraitSpawnerData, $TraitSpawnerData$Type} from "packages/dev/xkmc/l2hostility/content/item/spawner/$TraitSpawnerData"
import {$TickableBlockEntity, $TickableBlockEntity$Type} from "packages/dev/xkmc/l2modularblock/tile_api/$TickableBlockEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BaseBlockEntity, $BaseBlockEntity$Type} from "packages/dev/xkmc/l2library/base/tile/$BaseBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TraitSpawnerBlockEntity extends $BaseBlockEntity implements $TickableBlockEntity {
readonly "data": $TraitSpawnerData
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "stop"(): void
public "tick"(): void
public "deactivate"(): void
public "activate"(): void
public "track"(arg0: $Player$Type): void
public "setRemoved"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitSpawnerBlockEntity$Type = ($TraitSpawnerBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitSpawnerBlockEntity_ = $TraitSpawnerBlockEntity$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/armors/$AbstractThornEnchantment" {
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$BattleEnchantment, $BattleEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$BattleEnchantment"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AbstractThornEnchantment extends $BattleEnchantment {
readonly "category": $EnchantmentCategory


public "doPostHurt"(arg0: $LivingEntity$Type, arg1: $Entity$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractThornEnchantment$Type = ($AbstractThornEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractThornEnchantment_ = $AbstractThornEnchantment$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/immunes/$FireImmuneModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $FireImmuneModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireImmuneModifier$Type = ($FireImmuneModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireImmuneModifier_ = $FireImmuneModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$TargetFilterEditor" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$TargetFilterLine, $TargetFilterLine$Type} from "packages/dev/xkmc/modulargolems/content/capability/$TargetFilterLine"
import {$ReadOnlyContainer, $ReadOnlyContainer$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$ReadOnlyContainer"

export class $TargetFilterEditor extends $Record implements $ReadOnlyContainer {

constructor(editor: $GolemConfigEditor$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "editor"(): $GolemConfigEditor
public "resetHostile"(): void
public "resetFriendly"(): void
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "isEmpty"(): boolean
public "targetFriendly"(): $TargetFilterLine
public "targetHostile"(): $TargetFilterLine
public "setChanged"(): void
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "stillValid"(arg0: $Player$Type): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "containerSize"(): integer
get "empty"(): boolean
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetFilterEditor$Type = ($TargetFilterEditor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetFilterEditor_ = $TargetFilterEditor$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericTieredItem" {
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"

export interface $GenericTieredItem {

 "getExtraConfig"(): $ExtraToolConfig

(): $ExtraToolConfig
}

export namespace $GenericTieredItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericTieredItem$Type = ($GenericTieredItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericTieredItem_ = $GenericTieredItem$Type;
}}
declare module "packages/dev/xkmc/l2library/init/$L2LibraryConfig" {
import {$L2LibraryConfig$Client, $L2LibraryConfig$Client$Type} from "packages/dev/xkmc/l2library/init/$L2LibraryConfig$Client"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$L2LibraryConfig$Common, $L2LibraryConfig$Common$Type} from "packages/dev/xkmc/l2library/init/$L2LibraryConfig$Common"

export class $L2LibraryConfig {
static readonly "CLIENT_SPEC": $ForgeConfigSpec
static readonly "CLIENT": $L2LibraryConfig$Client
static readonly "COMMON_SPEC": $ForgeConfigSpec
static readonly "COMMON": $L2LibraryConfig$Common

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2LibraryConfig$Type = ($L2LibraryConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2LibraryConfig_ = $L2LibraryConfig$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/spawner/$ClickTraitMethod" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$OnClickBlockMethod, $OnClickBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$OnClickBlockMethod"
import {$ToolTipBlockMethod, $ToolTipBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$ToolTipBlockMethod"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ClickTraitMethod implements $OnClickBlockMethod, $ToolTipBlockMethod {

constructor()

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onClick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClickTraitMethod$Type = ($ClickTraitMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClickTraitMethod_ = $ClickTraitMethod$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/entity/fireball/$BaseFireball" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ISizedItemEntity, $ISizedItemEntity$Type} from "packages/dev/xkmc/l2complements/content/entity/$ISizedItemEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Fireball, $Fireball$Type} from "packages/net/minecraft/world/entity/projectile/$Fireball"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseFireball<T extends $BaseFireball<(T)>> extends $Fireball implements $ISizedItemEntity {
 "lifetime": integer
 "xPower": double
 "yPower": double
 "zPower": double
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(T)>, arg1: $LivingEntity$Type, arg2: double, arg3: double, arg4: double, arg5: $Level$Type)
constructor(arg0: $EntityType$Type<(T)>, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double, arg7: $Level$Type)
constructor(arg0: $EntityType$Type<(T)>, arg1: $Level$Type)

public "getSize"(): float
public "isPickable"(): boolean
public "tick"(): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
get "size"(): float
get "pickable"(): boolean
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseFireball$Type<T> = ($BaseFireball<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseFireball_<T> = $BaseFireball$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/undergarden/$FroststeelTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $FroststeelTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FroststeelTool$Type = ($FroststeelTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FroststeelTool_ = $FroststeelTool$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$InvTooltip" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BaseBagItem, $BaseBagItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagItem"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EnderBackpackItem, $EnderBackpackItem$Type} from "packages/dev/xkmc/l2backpack/content/remote/player/$EnderBackpackItem"
import {$TooltipInvItem, $TooltipInvItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$TooltipInvItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$AbstractBag, $AbstractBag$Type} from "packages/dev/xkmc/l2backpack/content/bag/$AbstractBag"

export class $InvTooltip extends $Record implements $TooltipComponent {

constructor(item: $TooltipInvItem$Type, stack: $ItemStack$Type)

public static "get"(arg0: $AbstractBag$Type, arg1: $ItemStack$Type): $Optional<($TooltipComponent)>
public static "get"(arg0: $EnderBackpackItem$Type, arg1: $ItemStack$Type): $Optional<($TooltipComponent)>
public static "get"(arg0: $BaseBagItem$Type, arg1: $ItemStack$Type): $Optional<($TooltipComponent)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "item"(): $TooltipInvItem
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvTooltip$Type = ($InvTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvTooltip_ = $InvTooltip$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/menu/equipments/$EquipmentsContainer" {
import {$EquipmentsMenu, $EquipmentsMenu$Type} from "packages/dev/xkmc/l2hostility/content/menu/equipments/$EquipmentsMenu"
import {$BaseContainerMenu$BaseContainer, $BaseContainerMenu$BaseContainer$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu$BaseContainer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $EquipmentsContainer extends $BaseContainerMenu$BaseContainer<($EquipmentsMenu)> {

constructor(arg0: $EquipmentsMenu$Type)

public "getItem"(arg0: integer): $ItemStack
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentsContainer$Type = ($EquipmentsContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentsContainer_ = $EquipmentsContainer$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$HumanoidGolemEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$GolemEvent, $GolemEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemEvent"

export class $HumanoidGolemEvent extends $GolemEvent {

constructor()
constructor(arg0: $HumanoidGolemEntity$Type)

public "getListenerList"(): $ListenerList
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HumanoidGolemEvent$Type = ($HumanoidGolemEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HumanoidGolemEvent_ = $HumanoidGolemEvent$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/wand/$BaseWand" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IMobClickItem, $IMobClickItem$Type} from "packages/dev/xkmc/l2hostility/content/item/wand/$IMobClickItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$IGlowingTarget, $IGlowingTarget$Type} from "packages/dev/xkmc/l2library/util/raytrace/$IGlowingTarget"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseWand extends $Item implements $IGlowingTarget, $IMobClickItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getDistance"(arg0: $ItemStack$Type): integer
public "clickTarget"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type): void
public "clickNothing"(arg0: $ItemStack$Type, arg1: $Player$Type): void
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseWand$Type = ($BaseWand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseWand_ = $BaseWand$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$ConfigMerger" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"

export class $ConfigMerger<T extends $BaseConfig> {

constructor(arg0: $Class$Type<(T)>)

public "apply"(arg0: $Collection$Type<(T)>): T
public "merge"(arg0: $List$Type<(T)>): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigMerger$Type<T> = ($ConfigMerger<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigMerger_<T> = $ConfigMerger$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ToolConfig" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ToolFactory, $ToolFactory$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$ToolFactory"

export class $ToolConfig extends $Record {

constructor(sup: $ToolFactory$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "sup"(): $ToolFactory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolConfig$Type = ($ToolConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolConfig_ = $ToolConfig$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/blazegear/$DuplicateBlazeArmsLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$LivingEntityRenderer, $LivingEntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$LivingEntityRenderer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DuplicateBlazeArmsLayer<T extends $AbstractGolemEntity<(any), (any)>, M extends $EntityModel<(T)>> extends $RenderLayer<(T), (M)> {
static readonly "TEXTURE_BLAZE_ARMS": $ResourceLocation

constructor(arg0: $LivingEntityRenderer$Type<(T), (M)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
public static "registerLayer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DuplicateBlazeArmsLayer$Type<T, M> = ($DuplicateBlazeArmsLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DuplicateBlazeArmsLayer_<T, M> = $DuplicateBlazeArmsLayer$Type<(T), (M)>;
}}
declare module "packages/dev/xkmc/l2hostility/compat/data/$TFData" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"

export class $TFData {

constructor()

public static "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public static "genConfig"(arg0: $ConfigDataProvider$Collector$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TFData$Type = ($TFData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TFData_ = $TFData$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export interface $LWExtraConfig {

 "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
 "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
 "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
 "getReflectSource"(arg0: $Player$Type): $DamageSource
 "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
}

export namespace $LWExtraConfig {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWExtraConfig$Type = ($LWExtraConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWExtraConfig_ = $LWExtraConfig$Type;
}}
declare module "packages/dev/xkmc/l2tabs/tabs/contents/$AttributeEntry" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"

export class $AttributeEntry extends $Record {

constructor(attr: $Attribute$Type, usePercent: boolean, order: integer, intrinsic: double)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "attr"(): $Attribute
public "order"(): integer
public "intrinsic"(): double
public "usePercent"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeEntry$Type = ($AttributeEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeEntry_ = $AttributeEntry$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$DiggerContext" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $DiggerContext extends $Record {

constructor(player: $Player$Type, dire: $Direction$Type, stack: $ItemStack$Type, level: integer, pos: $BlockPos$Type, state: $BlockState$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "pos"(): $BlockPos
public "state"(): $BlockState
public "level"(): integer
public "player"(): $Player
public "dire"(): $Direction
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiggerContext$Type = ($DiggerContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiggerContext_ = $DiggerContext$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/common/$ModDispatch" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InventoryChangeTrigger$TriggerInstance, $InventoryChangeTrigger$TriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$InventoryChangeTrigger$TriggerInstance"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"

export class $ModDispatch {

constructor()

public "lateRegister"(): void
public "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public "dispatchClientSetup"(): void
public "getDataGen"(arg0: $DataGenerator$Type): $ConfigDataProvider
public static "safeUpgrade"<T>(arg0: $RegistrateRecipeProvider$Type, arg1: $BiFunction$Type<(string), ($InventoryChangeTrigger$TriggerInstance$Type), (T)>, arg2: $Item$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModDispatch$Type = ($ModDispatch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModDispatch_ = $ModDispatch$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/common/$WorldStorageCapability" {
import {$WorldStorage, $WorldStorage$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$WorldStorage"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ICapabilitySerializable, $ICapabilitySerializable$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilitySerializable"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $WorldStorageCapability implements $ICapabilitySerializable<($CompoundTag)> {
readonly "w": $ServerLevel
readonly "handler": $WorldStorage
readonly "lo": $LazyOptional<($WorldStorage)>

constructor(arg0: $ServerLevel$Type)

public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldStorageCapability$Type = ($WorldStorageCapability);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldStorageCapability_ = $WorldStorageCapability$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$LWNegateStates" {
import {$DamageState, $DamageState$Type} from "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageState"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TreeSet, $TreeSet$Type} from "packages/java/util/$TreeSet"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $LWNegateStates extends $Enum<($LWNegateStates)> implements $DamageState {
static readonly "NO_PROJECTILE": $LWNegateStates


public static "values"(): ($LWNegateStates)[]
public static "valueOf"(arg0: string): $LWNegateStates
public "getId"(): $ResourceLocation
public "removeTags"(arg0: $Consumer$Type<($TagKey$Type<($DamageType$Type)>)>): void
public "gatherTags"(arg0: $Consumer$Type<($TagKey$Type<($DamageType$Type)>)>): void
public static "newSet"(): $TreeSet<($DamageState)>
public "overrides"(arg0: $DamageState$Type): boolean
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWNegateStates$Type = (("no_projectile")) | ($LWNegateStates);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWNegateStates_ = $LWNegateStates$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/scabbard/$ScabbardMenu" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BaseBagMenu, $BaseBagMenu$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ScabbardMenu extends $BaseBagMenu<($ScabbardMenu)> {
static readonly "MANAGERS": $SpriteManager
readonly "item_slot": $PlayerSlot<(any)>
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $PlayerSlot$Type<(any)>, arg3: $UUID$Type, arg4: $Component$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($ScabbardMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $ScabbardMenu
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScabbardMenu$Type = ($ScabbardMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScabbardMenu_ = $ScabbardMenu$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/curios/$EntityCuriosListMenu" {
import {$BaseCuriosWrapper, $BaseCuriosWrapper$Type} from "packages/dev/xkmc/l2tabs/compat/$BaseCuriosWrapper"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseCuriosListMenu, $BaseCuriosListMenu$Type} from "packages/dev/xkmc/l2tabs/compat/$BaseCuriosListMenu"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"

export class $EntityCuriosListMenu extends $BaseCuriosListMenu<($EntityCuriosListMenu)> {
static readonly "MANAGER": ($SpriteManager)[]
readonly "curios": $BaseCuriosWrapper
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public static "fromNetwork"(arg0: $MenuType$Type<($EntityCuriosListMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $EntityCuriosListMenu
public "switchPage"(arg0: $ServerPlayer$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityCuriosListMenu$Type = ($EntityCuriosListMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityCuriosListMenu_ = $EntityCuriosListMenu$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestContainer" {
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$StorageContainer, $StorageContainer$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$StorageContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$DrawerQuickInsert, $DrawerQuickInsert$Type} from "packages/dev/xkmc/l2backpack/content/click/$DrawerQuickInsert"
import {$WorldChestBlockEntity, $WorldChestBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestBlockEntity"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $WorldChestContainer extends $BaseContainerMenu<($WorldChestContainer)> implements $DrawerQuickInsert {
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $SimpleContainer$Type, arg3: $StorageContainer$Type, arg4: $WorldChestBlockEntity$Type)

public "getOwner"(): $UUID
public static "fromNetwork"(arg0: $MenuType$Type<($WorldChestContainer$Type)>, arg1: integer, arg2: $Inventory$Type): $WorldChestContainer
public "stillValid"(arg0: $Player$Type): boolean
public "quickMove"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer): boolean
public "getColor"(): integer
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
get "owner"(): $UUID
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldChestContainer$Type = ($WorldChestContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldChestContainer_ = $WorldChestContainer$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/path/$PathConfigMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$GhostItemMenu, $GhostItemMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$GhostItemMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$MenuLayoutConfig, $MenuLayoutConfig$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig"

export class $PathConfigMenu extends $GhostItemMenu {
static readonly "MANAGER": $SpriteManager
readonly "sprite": $MenuLayoutConfig
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public static "fromNetwork"(arg0: $MenuType$Type<($PathConfigMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $PathConfigMenu
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathConfigMenu$Type = ($PathConfigMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathConfigMenu_ = $PathConfigMenu$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfCorrosion" {
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $RingOfCorrosion extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onDamage"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingDamageEvent$Type): void
public "onHurtTarget"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RingOfCorrosion$Type = ($RingOfCorrosion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RingOfCorrosion_ = $RingOfCorrosion$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$EnderTeleportGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $EnderTeleportGoal extends $Goal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>)

public "canUse"(): boolean
public "start"(): void
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderTeleportGoal$Type = ($EnderTeleportGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderTeleportGoal_ = $EnderTeleportGoal$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$EnderTeleportModifier" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EnderTeleportModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public static "resetCooldown"(arg0: $AbstractGolemEntity$Type<(any), (any)>): void
public static "mayTeleport"(arg0: $AbstractGolemEntity$Type<(any), (any)>): boolean
public static "teleportTowards"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $Entity$Type): boolean
public "onRegisterGoals"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer, arg2: $BiConsumer$Type<(integer), ($Goal$Type)>): void
public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
public static "teleport"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: double, arg2: double, arg3: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderTeleportModifier$Type = ($EnderTeleportModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderTeleportModifier_ = $EnderTeleportModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/stacked/$TextButtonHandle" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CellEntry, $CellEntry$Type} from "packages/dev/xkmc/l2library/base/menu/stacked/$CellEntry"

export class $TextButtonHandle {


public "drawText"(arg0: $CellEntry$Type, arg1: $Component$Type, arg2: boolean): void
public "addButton"(arg0: string): $CellEntry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextButtonHandle$Type = ($TextButtonHandle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextButtonHandle_ = $TextButtonHandle$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemThrowableEvent" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemItemUseEvent, $GolemItemUseEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemItemUseEvent"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $GolemThrowableEvent extends $GolemItemUseEvent {

constructor()
constructor(arg0: $HumanoidGolemEntity$Type, arg1: $ItemStack$Type, arg2: $InteractionHand$Type)

public "createProjectile"(arg0: $Level$Type): $Projectile
public "setThrowable"(arg0: $Function$Type<($Level$Type), ($Projectile$Type)>): void
public "isThrowable"(): boolean
public "getListenerList"(): $ListenerList
set "throwable"(value: $Function$Type<($Level$Type), ($Projectile$Type)>)
get "throwable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemThrowableEvent$Type = ($GolemThrowableEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemThrowableEvent_ = $GolemThrowableEvent$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/scabbard/$Scabbard" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$SingleSwapItem, $SingleSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$SingleSwapItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemOnBackItem, $ItemOnBackItem$Type} from "packages/dev/xkmc/l2backpack/content/render/$ItemOnBackItem"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Scabbard extends $SingleSwapItem implements $ItemOnBackItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "open"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type): void
public static "isValidItem"(arg0: $ItemStack$Type): boolean
public "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
public "isValidContent"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "shouldRender"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Scabbard$Type = ($Scabbard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Scabbard_ = $Scabbard$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe$RecipeFactory" {
import {$AbstractShapelessRecipe, $AbstractShapelessRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractShapelessRecipe"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $AbstractShapelessRecipe$RecipeFactory<T extends $AbstractShapelessRecipe<(T)>> {

 "create"(arg0: $ResourceLocation$Type, arg1: string, arg2: $ItemStack$Type, arg3: $NonNullList$Type<($Ingredient$Type)>): T

(arg0: $ResourceLocation$Type, arg1: string, arg2: $ItemStack$Type, arg3: $NonNullList$Type<($Ingredient$Type)>): T
}

export namespace $AbstractShapelessRecipe$RecipeFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractShapelessRecipe$RecipeFactory$Type<T> = ($AbstractShapelessRecipe$RecipeFactory<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractShapelessRecipe$RecipeFactory_<T> = $AbstractShapelessRecipe$RecipeFactory$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetRegHelper" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$ArtifactRegistrate, $ArtifactRegistrate$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$ArtifactRegistrate"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$SetBuilder, $SetBuilder$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetBuilder"
import {$SetEffectBuilder, $SetEffectBuilder$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEffectBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SetRegHelper {

constructor(arg0: $ArtifactRegistrate$Type, arg1: string)

public "getId"(): $ResourceLocation
public "regSet"(arg0: integer, arg1: integer, arg2: string): $SetBuilder<($ArtifactSet), ($BaseArtifact), ($ArtifactRegistrate)>
public "setEffect"<T extends $SetEffect>(arg0: string, arg1: $NonNullSupplier$Type<(T)>): $SetEffectBuilder<(T), ($ArtifactRegistrate)>
public "regLinear"<I extends $BaseArtifact>(arg0: string, arg1: double, arg2: double): $LinearFuncEntry
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetRegHelper$Type = ($SetRegHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetRegHelper_ = $SetRegHelper$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/data/$CataclysmData" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"

export class $CataclysmData {

constructor()

public static "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public static "genSlot"(arg0: $BiConsumer$Type<(string), ($Record$Type)>): void
public static "genConfig"(arg0: $ConfigDataProvider$Collector$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CataclysmData$Type = ($CataclysmData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CataclysmData_ = $CataclysmData$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitsTrigger" {
import {$KillTraitsTrigger$Ins, $KillTraitsTrigger$Ins$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitsTrigger$Ins"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $KillTraitsTrigger extends $BaseCriterion<($KillTraitsTrigger$Ins), ($KillTraitsTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $MobTraitCap$Type): void
public static "ins"(...arg0: ($MobTrait$Type)[]): $KillTraitsTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitsTrigger$Type = ($KillTraitsTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitsTrigger_ = $KillTraitsTrigger$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$BaseRecipe, $BaseRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe"
import {$DiffusionRecipe$Inv, $DiffusionRecipe$Inv$Type} from "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipe$Inv"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $DiffusionRecipe extends $BaseRecipe<($DiffusionRecipe), ($DiffusionRecipe), ($DiffusionRecipe$Inv)> {
 "ingredient": $Block
 "base": $Block
 "result": $Block
 "id": $ResourceLocation

constructor(arg0: $ResourceLocation$Type)

public "matches"(arg0: $DiffusionRecipe$Inv$Type, arg1: $Level$Type): boolean
public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "assemble"(arg0: $DiffusionRecipe$Inv$Type, arg1: $RegistryAccess$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiffusionRecipe$Type = ($DiffusionRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiffusionRecipe_ = $DiffusionRecipe$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/patchouli/$ShapelessPatchouliBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ShapelessRecipeBuilder, $ShapelessRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$ShapelessRecipeBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $ShapelessPatchouliBuilder extends $ShapelessRecipeBuilder {
readonly "result": $Item
readonly "count": integer
readonly "ingredients": $List<($Ingredient)>
readonly "advancement": $Advancement$Builder
 "group": string

constructor(arg0: $ResourceLocation$Type)

public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapelessPatchouliBuilder$Type = ($ShapelessPatchouliBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapelessPatchouliBuilder_ = $ShapelessPatchouliBuilder$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemKillTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GolemKillTrigger, $GolemKillTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemKillTrigger"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $GolemKillTrigger$Ins extends $BaseCriterionInstance<($GolemKillTrigger$Ins), ($GolemKillTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemKillTrigger$Ins$Type = ($GolemKillTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemKillTrigger$Ins_ = $GolemKillTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/recipe/$BackpackUpgradeRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$AbstractSmithingRecipe, $AbstractSmithingRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSmithingRecipe$Serializer, $AbstractSmithingRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe$Serializer"

export class $BackpackUpgradeRecipe extends $AbstractSmithingRecipe<($BackpackUpgradeRecipe)> {
static readonly "TEMPLATE_PLACEHOLDER": $Ingredient
readonly "template": $Ingredient
readonly "base": $Ingredient
readonly "addition": $Ingredient
readonly "result": $ItemStack

constructor(arg0: $ResourceLocation$Type, arg1: $Ingredient$Type, arg2: $Ingredient$Type, arg3: $ItemStack$Type)

public "getSerializer"(): $AbstractSmithingRecipe$Serializer<($BackpackUpgradeRecipe)>
public "assemble"(arg0: $Container$Type, arg1: $RegistryAccess$Type): $ItemStack
public "matches"(arg0: $Container$Type, arg1: $Level$Type): boolean
get "serializer"(): $AbstractSmithingRecipe$Serializer<($BackpackUpgradeRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackUpgradeRecipe$Type = ($BackpackUpgradeRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackUpgradeRecipe_ = $BackpackUpgradeRecipe$Type;
}}
declare module "packages/dev/xkmc/l2itemselector/init/data/$L2Keys" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $L2Keys extends $Enum<($L2Keys)> {
static readonly "UP": $L2Keys
static readonly "DOWN": $L2Keys
static readonly "LEFT": $L2Keys
static readonly "RIGHT": $L2Keys
static readonly "SWAP": $L2Keys
static readonly "SHIFT": $L2Keys
static readonly "ALT": $L2Keys
readonly "id": string
readonly "def": string
readonly "key": integer
readonly "map": $KeyMapping


public static "values"(): ($L2Keys)[]
public static "valueOf"(arg0: string): $L2Keys
public static "hasCtrlDown"(): boolean
public static "hasShiftDown"(): boolean
public static "hasAltDown"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Keys$Type = (("left") | ("swap") | ("shift") | ("alt") | ("up") | ("right") | ("down")) | ($L2Keys);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Keys_ = $L2Keys$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/highlevel/$GrowthTrait" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$InheritContext, $InheritContext$Type} from "packages/dev/xkmc/l2hostility/content/logic/$InheritContext"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GrowthTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "allow"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer): boolean
public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
public "postInit"(arg0: $LivingEntity$Type, arg1: integer): void
public "inherited"(arg0: $MobTraitCap$Type, arg1: integer, arg2: $InheritContext$Type): integer
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GrowthTrait$Type = ($GrowthTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GrowthTrait_ = $GrowthTrait$Type;
}}
declare module "packages/dev/xkmc/l2backpack/$LCCompat" {
import {$EnderPickupEvent, $EnderPickupEvent$Type} from "packages/dev/xkmc/l2complements/events/event/$EnderPickupEvent"

export class $LCCompat {

constructor()

public static "onEnderPickup"(arg0: $EnderPickupEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCCompat$Type = ($LCCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCCompat_ = $LCCompat$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$PoseiditeTotem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ILCTotem, $ILCTotem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$ILCTotem"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TotemHelper$TotemSlot, $TotemHelper$TotemSlot$Type} from "packages/dev/xkmc/l2damagetracker/contents/curios/$TotemHelper$TotemSlot"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PoseiditeTotem extends $Item implements $ILCTotem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "allow"(arg0: $LivingEntity$Type, arg1: $DamageSource$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "trigger"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $Consumer$Type<($ItemStack$Type)>): void
public "onClientTrigger"(arg0: $Entity$Type, arg1: $ItemStack$Type): void
public "trigger"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $TotemHelper$TotemSlot$Type, arg3: $DamageSource$Type): void
public "allow"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $DamageSource$Type): boolean
public "isValid"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $TotemHelper$TotemSlot$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoseiditeTotem$Type = ($PoseiditeTotem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoseiditeTotem_ = $PoseiditeTotem$Type;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$ItemSelSideBar" {
import {$SideBar$Signature, $SideBar$Signature$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar$Signature"
import {$SelectionSideBar, $SelectionSideBar$Type} from "packages/dev/xkmc/l2library/base/overlay/$SelectionSideBar"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ItemSelSideBar<S extends $SideBar$Signature<(S)>> extends $SelectionSideBar<($ItemStack), (S)> {

constructor(arg0: float, arg1: float)

public static "color"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): integer
public "renderSelection"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: boolean, arg5: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemSelSideBar$Type<S> = ($ItemSelSideBar<(S)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemSelSideBar_<S> = $ItemSelSideBar$Type<(S)>;
}}
declare module "packages/dev/xkmc/l2library/util/annotation/$ServerOnly" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $ServerOnly extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $ServerOnly {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerOnly$Type = ($ServerOnly);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerOnly_ = $ServerOnly$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$WeaponConfig" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$WeaponConfig$EnchConfig, $WeaponConfig$EnchConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$WeaponConfig$EnchConfig"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$WeaponConfig$ItemConfig, $WeaponConfig$ItemConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$WeaponConfig$ItemConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $WeaponConfig extends $BaseConfig {
readonly "melee_weapons": $ArrayList<($WeaponConfig$ItemConfig)>
readonly "armors": $ArrayList<($WeaponConfig$ItemConfig)>
readonly "ranged_weapons": $ArrayList<($WeaponConfig$ItemConfig)>
readonly "weapon_enchantments": $ArrayList<($WeaponConfig$EnchConfig)>
readonly "armor_enchantments": $ArrayList<($WeaponConfig$EnchConfig)>

constructor()

public "putArmor"(arg0: integer, arg1: integer, ...arg2: ($Item$Type)[]): $WeaponConfig
public "putArmorEnch"(arg0: integer, arg1: float, ...arg2: ($Enchantment$Type)[]): $WeaponConfig
public "putRangedWeapon"(arg0: integer, arg1: integer, ...arg2: ($Item$Type)[]): $WeaponConfig
public "putMeleeWeapon"(arg0: integer, arg1: integer, ...arg2: ($Item$Type)[]): $WeaponConfig
public static "getRandomArmor"(arg0: $EquipmentSlot$Type, arg1: integer, arg2: $RandomSource$Type): $ItemStack
public "putWeaponEnch"(arg0: integer, arg1: float, ...arg2: ($Enchantment$Type)[]): $WeaponConfig
public static "getRandomRangedWeapon"(arg0: integer, arg1: $RandomSource$Type): $ItemStack
public static "getRandomMeleeWeapon"(arg0: integer, arg1: $RandomSource$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeaponConfig$Type = ($WeaponConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeaponConfig_ = $WeaponConfig$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeSlots" {
import {$ShapeMenu, $ShapeMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeMenu"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$PredSlot, $PredSlot$Type} from "packages/dev/xkmc/l2library/base/menu/base/$PredSlot"

export class $ShapeSlots extends $Enum<($ShapeSlots)> {
static readonly "OUTPUT": $ShapeSlots
static readonly "ARTIFACT_MAIN": $ShapeSlots
static readonly "BOOST_MAIN": $ShapeSlots
static readonly "ARTIFACT_SUB": $ShapeSlots
static readonly "STAT_SUB": $ShapeSlots
static readonly "BOOST_SUB": $ShapeSlots


public "slot"(): string
public "get"(arg0: $ShapeMenu$Type, arg1: integer): $PredSlot
public "get"(arg0: $ShapeMenu$Type): $PredSlot
public static "values"(): ($ShapeSlots)[]
public static "valueOf"(arg0: string): $ShapeSlots
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeSlots$Type = (("output") | ("artifact_sub") | ("boost_sub") | ("artifact_main") | ("stat_sub") | ("boost_main")) | ($ShapeSlots);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeSlots_ = $ShapeSlots$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/logic/$TraitEffectCache" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TraitEffectCache {
readonly "target": $LivingEntity

constructor(arg0: $LivingEntity$Type)

public "reflectTrait"(arg0: $MobTrait$Type): boolean
public "getTargets"(): $List<($Mob)>
get "targets"(): $List<($Mob)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitEffectCache$Type = ($TraitEffectCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitEffectCache_ = $TraitEffectCache$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$ImmobileEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$PersistentDataSetEffect, $PersistentDataSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PersistentDataSetEffect"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ImmobileData, $ImmobileData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$ImmobileData"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $ImmobileEffect extends $PersistentDataSetEffect<($ImmobileData)> {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getData"(arg0: $ArtifactSetConfig$Entry$Type): $ImmobileData
public "playerReduceDamage"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImmobileEffect$Type = ($ImmobileEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImmobileEffect_ = $ImmobileEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/equipments/$MetalGolemWeaponItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$GolemEquipmentItem, $GolemEquipmentItem$Type} from "packages/dev/xkmc/modulargolems/content/item/equipments/$GolemEquipmentItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MetalGolemWeaponItem extends $GolemEquipmentItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer, arg2: double, arg3: float, arg4: float)

public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "getEnchantmentValue"(): integer
public "isEnchantable"(arg0: $ItemStack$Type): boolean
get "enchantmentValue"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalGolemWeaponItem$Type = ($MetalGolemWeaponItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalGolemWeaponItem_ = $MetalGolemWeaponItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/force/$StoneCageEffect" {
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$IconOverlayEffect, $IconOverlayEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$IconOverlayEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $StoneCageEffect extends $InherentEffect implements $ForceEffect, $IconOverlayEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
public "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StoneCageEffect$Type = ($StoneCageEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StoneCageEffect_ = $StoneCageEffect$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/core/$PlayerOnlySetEffect" {
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"
import {$ShieldBlockEvent, $ShieldBlockEvent$Type} from "packages/net/minecraftforge/event/entity/living/$ShieldBlockEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $PlayerOnlySetEffect extends $SetEffect {
readonly "ids": integer

constructor(arg0: integer)

public "update"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "update"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "tick"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "playerShieldBlock"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $ShieldBlockEvent$Type): void
public "playerShieldBlock"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $ShieldBlockEvent$Type): void
public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "playerReduceDamage"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
public "playerHurtOpponentEvent"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
public "playerKillOpponentEvent"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $LivingDeathEvent$Type): void
public "playerKillOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $LivingDeathEvent$Type): void
public "playerDamageOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
public "playerDamageOpponentEvent"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
public "playerAttackedCancel"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): boolean
public "playerAttackedCancel"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): boolean
public "playerAttackModifyEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $CriticalHitEvent$Type): boolean
public "playerAttackModifyEvent"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $CriticalHitEvent$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerOnlySetEffect$Type = ($PlayerOnlySetEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerOnlySetEffect_ = $PlayerOnlySetEffect$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/consumable/$BottleOfCurse" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DrinkableBottleItem, $DrinkableBottleItem$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$DrinkableBottleItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BottleOfCurse extends $DrinkableBottleItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BottleOfCurse$Type = ($BottleOfCurse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BottleOfCurse_ = $BottleOfCurse$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/$LASets" {
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"

export class $LASets {
static readonly "SET_GAMBLER": $SetEntry<($ArtifactSet)>
static readonly "SET_BERSERKER": $SetEntry<($ArtifactSet)>
static readonly "SET_ARCHER": $SetEntry<($ArtifactSet)>
static readonly "SET_SAINT": $SetEntry<($ArtifactSet)>
static readonly "SET_PERFECTION": $SetEntry<($ArtifactSet)>
static readonly "SET_DAMOCLES": $SetEntry<($ArtifactSet)>
static readonly "SET_PROTECTION": $SetEntry<($ArtifactSet)>
static readonly "SET_FROZE": $SetEntry<($ArtifactSet)>
static readonly "SET_EXECUTOR": $SetEntry<($ArtifactSet)>
static readonly "SET_PHYSICAL": $SetEntry<($ArtifactSet)>
static readonly "SET_WRATH": $SetEntry<($ArtifactSet)>
static readonly "SET_PHOTOSYN": $SetEntry<($ArtifactSet)>
static readonly "SET_VAMPIRE": $SetEntry<($ArtifactSet)>
static readonly "SET_SUN_BLOCK": $SetEntry<($ArtifactSet)>
static readonly "SET_GLUTTONY": $SetEntry<($ArtifactSet)>
static readonly "SET_FALLEN": $SetEntry<($ArtifactSet)>
static readonly "SET_ANCIENT": $SetEntry<($ArtifactSet)>
static readonly "SET_LUCKCLOVER": $SetEntry<($ArtifactSet)>
static readonly "SET_ABYSSMEDAL": $SetEntry<($ArtifactSet)>
static readonly "SET_LONGSHOOTER": $SetEntry<($ArtifactSet)>
static readonly "SET_CELL": $SetEntry<($ArtifactSet)>
static readonly "SET_FLESH": $SetEntry<($ArtifactSet)>
static readonly "SET_FUNGUS": $SetEntry<($ArtifactSet)>
static readonly "SET_GILDED": $SetEntry<($ArtifactSet)>
static readonly "SET_POISONOUS": $SetEntry<($ArtifactSet)>
static readonly "SET_SLIMY": $SetEntry<($ArtifactSet)>
static readonly "SET_THERMAL": $SetEntry<($ArtifactSet)>
static readonly "SET_MAGE": $SetEntry<($ArtifactSet)>
static readonly "SET_PIRATE": $SetEntry<($ArtifactSet)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LASets$Type = ($LASets);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LASets_ = $LASets$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/filter/$ItemConfigScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GhostItemScreen, $GhostItemScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$GhostItemScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ItemConfigMenu, $ItemConfigMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/filter/$ItemConfigMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ItemTarget, $ItemTarget$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$ItemTarget"

export class $ItemConfigScreen extends $GhostItemScreen<($ItemConfigMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ItemConfigMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "getTargets"(): $List<($ItemTarget)>
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "targets"(): $List<($ItemTarget)>
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemConfigScreen$Type = ($ItemConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemConfigScreen_ = $ItemConfigScreen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/mode/$GolemMode" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $GolemMode {


public "getName"(): $Component
public "getID"(): integer
public "tick"(arg0: $AbstractGolemEntity$Type<(any), (any)>): void
public "getDesc"(arg0: $AbstractGolemEntity$Type<(any), (any)>): $Component
public "hasPos"(): boolean
public "couldRandomStroll"(): boolean
public "getStartFollowDistance"(arg0: $AbstractGolemEntity$Type<(any), (any)>): double
public "isMovable"(): boolean
public "canChangeDimensions"(): boolean
public "getStopDistance"(): double
get "name"(): $Component
get "iD"(): integer
get "movable"(): boolean
get "stopDistance"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemMode$Type = ($GolemMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemMode_ = $GolemMode$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/capability/$PickupMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $PickupMode extends $Enum<($PickupMode)> {
static readonly "NONE": $PickupMode
static readonly "STACKING": $PickupMode
static readonly "ALL": $PickupMode


public static "values"(): ($PickupMode)[]
public static "valueOf"(arg0: string): $PickupMode
public "getTooltip"(): $MutableComponent
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickupMode$Type = (("all") | ("none") | ("stacking")) | ($PickupMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickupMode_ = $PickupMode$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestBlock" {
import {$OnClickBlockMethod, $OnClickBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$OnClickBlockMethod"
import {$CreateBlockStateBlockMethod, $CreateBlockStateBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$CreateBlockStateBlockMethod"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$DefaultStateBlockMethod, $DefaultStateBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$DefaultStateBlockMethod"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SetPlacedByBlockMethod, $SetPlacedByBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$SetPlacedByBlockMethod"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$StateDefinition$Builder, $StateDefinition$Builder$Type} from "packages/net/minecraft/world/level/block/state/$StateDefinition$Builder"
import {$SpecialDropBlockMethod, $SpecialDropBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$SpecialDropBlockMethod"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$GetBlockItemBlockMethod, $GetBlockItemBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$GetBlockItemBlockMethod"
import {$ShapeBlockMethod, $ShapeBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$ShapeBlockMethod"
import {$BlockEntityBlockMethod, $BlockEntityBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$BlockEntityBlockMethod"
import {$PlacementBlockMethod, $PlacementBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$PlacementBlockMethod"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$WorldChestBlockEntity, $WorldChestBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestBlockEntity"

export class $WorldChestBlock implements $CreateBlockStateBlockMethod, $DefaultStateBlockMethod, $PlacementBlockMethod, $OnClickBlockMethod, $GetBlockItemBlockMethod, $SpecialDropBlockMethod, $SetPlacedByBlockMethod, $ShapeBlockMethod {
static readonly "INSTANCE": $WorldChestBlock
static readonly "TILE_ENTITY_SUPPLIER_BUILDER": $BlockEntityBlockMethod<($WorldChestBlockEntity)>
static readonly "COLOR": $EnumProperty<($DyeColor)>

constructor()

public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "createBlockStateDefinition"(arg0: $StateDefinition$Builder$Type<($Block$Type), ($BlockState$Type)>): void
public "getDefaultState"(arg0: $BlockState$Type): $BlockState
public "onClick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getDrops"(arg0: $BlockState$Type, arg1: $LootParams$Builder$Type): $List<($ItemStack)>
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public static "buildStack"(arg0: $BlockState$Type, arg1: $WorldChestBlockEntity$Type): $ItemStack
public "getStateForPlacement"(arg0: $BlockState$Type, arg1: $BlockPlaceContext$Type): $BlockState
public "getBlockSupportShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): $VoxelShape
public "getVisualShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getCollisionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldChestBlock$Type = ($WorldChestBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldChestBlock_ = $WorldChestBlock$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$Abrahadabra" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Abrahadabra extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "reflectTrait"(arg0: $MobTrait$Type): boolean
public "getExtraLevel"(): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
get "extraLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Abrahadabra$Type = ($Abrahadabra);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Abrahadabra_ = $Abrahadabra$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemEquipEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$HumanoidGolemEvent, $HumanoidGolemEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$HumanoidGolemEvent"

export class $GolemEquipEvent extends $HumanoidGolemEvent {

constructor()
constructor(arg0: $HumanoidGolemEntity$Type, arg1: $ItemStack$Type)

public "getSlot"(): $EquipmentSlot
public "getStack"(): $ItemStack
public "setSlot"(arg0: $EquipmentSlot$Type, arg1: integer): void
public "getAmount"(): integer
public "canEquip"(): boolean
public "getListenerList"(): $ListenerList
get "slot"(): $EquipmentSlot
get "stack"(): $ItemStack
get "amount"(): integer
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemEquipEvent$Type = ($GolemEquipEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemEquipEvent_ = $GolemEquipEvent$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/upgrades/$UpgradeBoostItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$UpgradeEnhanceItem, $UpgradeEnhanceItem$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$UpgradeEnhanceItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Upgrade$Type, $Upgrade$Type$Type} from "packages/dev/xkmc/l2artifacts/content/upgrades/$Upgrade$Type"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UpgradeBoostItem extends $UpgradeEnhanceItem {
readonly "type": $Upgrade$Type
readonly "rank": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: integer, arg2: $Upgrade$Type$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeBoostItem$Type = ($UpgradeBoostItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeBoostItem_ = $UpgradeBoostItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData" {
import {$SetEffectData, $SetEffectData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffectData"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$AttributeSetData$AttributePair, $AttributeSetData$AttributePair$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData$AttributePair"

export class $AttributeSetData extends $SetEffectData {
 "list": $ArrayList<($AttributeSetData$AttributePair)>
 "life": integer
 "rank": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeSetData$Type = ($AttributeSetData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeSetData_ = $AttributeSetData$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/immunes/$MagicResistanceModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $MagicResistanceModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onHurt"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicResistanceModifier$Type = ($MagicResistanceModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicResistanceModifier_ = $MagicResistanceModifier$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$TotemicArmor" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ExtraArmorConfig, $ExtraArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TotemicArmor extends $ExtraArmorConfig {
 "repair_chance": double
 "damage_chance": double
 "magic_immune": integer

constructor()

public "onArmorTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Player$Type): void
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T): integer
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TotemicArmor$Type = ($TotemicArmor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TotemicArmor_ = $TotemicArmor$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/core/$MultiSlotItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MultiSlotItem extends $CurioItem implements $ICurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "hasCurioCapability"(arg0: $ItemStack$Type): boolean
public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "canUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type, arg1: $ItemStack$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "writeSyncData"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public "writeSyncData"(arg0: $ItemStack$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: $ItemStack$Type): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "canEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type, arg2: $ItemStack$Type): boolean
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type, arg2: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiSlotItem$Type = ($MultiSlotItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiSlotItem_ = $MultiSlotItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/ars/$NotConditionalRecipeWrapper" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $NotConditionalRecipeWrapper extends $Record implements $FinishedRecipe {

constructor(base: $FinishedRecipe$Type, modid: (string)[])

public "base"(): $FinishedRecipe
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "mod"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, ...arg1: (string)[]): $Consumer<($FinishedRecipe)>
public "serializeRecipeData"(arg0: $JsonObject$Type): void
public "getType"(): $RecipeSerializer<(any)>
public "getAdvancementId"(): $ResourceLocation
public "modid"(): (string)[]
public "getId"(): $ResourceLocation
public "serializeRecipe"(): $JsonObject
public "serializeAdvancement"(): $JsonObject
get "type"(): $RecipeSerializer<(any)>
get "advancementId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotConditionalRecipeWrapper$Type = ($NotConditionalRecipeWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotConditionalRecipeWrapper_ = $NotConditionalRecipeWrapper$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/recycle/$RecycleMenu" {
import {$IntDataSlot, $IntDataSlot$Type} from "packages/dev/xkmc/l2library/base/menu/data/$IntDataSlot"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$AbstractScrollerMenu, $AbstractScrollerMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$AbstractScrollerMenu"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$DataSlot, $DataSlot$Type} from "packages/net/minecraft/world/inventory/$DataSlot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $RecycleMenu extends $AbstractScrollerMenu<($RecycleMenu)> {
readonly "select_count": $IntDataSlot
readonly "to_gain": $IntDataSlot
readonly "token": $ArtifactChestToken
readonly "total_count": $IntDataSlot
readonly "current_count": $IntDataSlot
readonly "experience": $IntDataSlot
readonly "max_row": $DataSlot
readonly "row": $DataSlot
readonly "extra": integer
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $ArtifactChestToken$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($RecycleMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $RecycleMenu
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
public "slotsChanged"(arg0: $Container$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecycleMenu$Type = ($RecycleMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecycleMenu_ = $RecycleMenu$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/config/$GolemMaterial" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$GolemStatType, $GolemStatType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemStatType"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GolemMaterial extends $Record {
static readonly "EMPTY": $ResourceLocation

constructor(stats: $HashMap$Type<($GolemStatType$Type), (double)>, modifiers: $HashMap$Type<($GolemModifier$Type), (integer)>, id: $ResourceLocation$Type, part: $Item$Type)

public "modifiers"(): $HashMap<($GolemModifier), (integer)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $ResourceLocation
public "part"(): $Item
public static "addAttributes"<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>>(arg0: $List$Type<($GolemMaterial$Type)>, arg1: $List$Type<($UpgradeItem$Type)>, arg2: T): void
public "getDesc"(): $MutableComponent
public static "getMaterial"(arg0: $ItemStack$Type): $Optional<($ResourceLocation)>
public static "collectAttributes"(arg0: $List$Type<($GolemMaterial$Type)>, arg1: $List$Type<($UpgradeItem$Type)>): $Map<($Attribute), ($Pair<($GolemStatType), (double)>)>
public "stats"(): $HashMap<($GolemStatType), (double)>
public static "collectModifiers"(arg0: $Collection$Type<($GolemMaterial$Type)>, arg1: $Collection$Type<($UpgradeItem$Type)>): $HashMap<($GolemModifier), (integer)>
public "getPart"(): $GolemPart<(any), (any)>
get "desc"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemMaterial$Type = ($GolemMaterial);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemMaterial_ = $GolemMaterial$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/data/$IaFData" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$EntityConfig$TraitBase, $EntityConfig$TraitBase$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$TraitBase"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $IaFData {

constructor()

public static "addEntity"<T extends $LivingEntity>(arg0: $ConfigDataProvider$Collector$Type, arg1: integer, arg2: integer, arg3: $RegistryObject$Type<($EntityType$Type<(T)>)>, arg4: $List$Type<($EntityConfig$TraitBase$Type)>, arg5: $List$Type<($MobTrait$Type)>): void
public static "genConfig"(arg0: $ConfigDataProvider$Collector$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IaFData$Type = ($IaFData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IaFData_ = $IaFData$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitLevelTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$KillTraitLevelTrigger$Ins, $KillTraitLevelTrigger$Ins$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitLevelTrigger$Ins"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $KillTraitLevelTrigger extends $BaseCriterion<($KillTraitLevelTrigger$Ins), ($KillTraitLevelTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $MobTraitCap$Type): void
public static "ins"(arg0: $MobTrait$Type, arg1: integer): $KillTraitLevelTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitLevelTrigger$Type = ($KillTraitLevelTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitLevelTrigger_ = $KillTraitLevelTrigger$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/player/$PlayerCapToClient" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$PlayerCapabilityHolder, $PlayerCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PlayerCapToClient$Action, $PlayerCapToClient$Action$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapToClient$Action"
import {$PlayerCapabilityTemplate, $PlayerCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PlayerCapToClient extends $SerialPacketBase {
 "action": $PlayerCapToClient$Action
 "holderID": $ResourceLocation
 "tag": $CompoundTag
 "playerID": $UUID

/**
 * 
 * @deprecated
 */
constructor()
constructor<T extends $PlayerCapabilityTemplate<(T)>>(arg0: $PlayerCapToClient$Action$Type, arg1: $PlayerCapabilityHolder$Type<(T)>, arg2: T)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerCapToClient$Type = ($PlayerCapToClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerCapToClient_ = $PlayerCapToClient$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/$ArtifactTypeRegistry" {
import {$ArtifactLootModifier, $ArtifactLootModifier$Type} from "packages/dev/xkmc/l2artifacts/init/data/loot/$ArtifactLootModifier"
import {$L2Registrate$RegistryInstance, $L2Registrate$RegistryInstance$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate$RegistryInstance"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$LinearFuncHandle, $LinearFuncHandle$Type} from "packages/dev/xkmc/l2artifacts/content/core/$LinearFuncHandle"
import {$AddLootTableModifier, $AddLootTableModifier$Type} from "packages/dev/xkmc/l2artifacts/init/data/loot/$AddLootTableModifier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$ArtifactSlot, $ArtifactSlot$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $ArtifactTypeRegistry {
static readonly "SLOT": $L2Registrate$RegistryInstance<($ArtifactSlot)>
static readonly "SET": $L2Registrate$RegistryInstance<($ArtifactSet)>
static readonly "SET_EFFECT": $L2Registrate$RegistryInstance<($SetEffect)>
static readonly "LINEAR": $L2Registrate$RegistryInstance<($LinearFuncHandle)>
static readonly "SLOT_HEAD": $RegistryEntry<($ArtifactSlot)>
static readonly "SLOT_NECKLACE": $RegistryEntry<($ArtifactSlot)>
static readonly "SLOT_BRACELET": $RegistryEntry<($ArtifactSlot)>
static readonly "SLOT_BODY": $RegistryEntry<($ArtifactSlot)>
static readonly "SLOT_BELT": $RegistryEntry<($ArtifactSlot)>
static readonly "SER": $RegistryEntry<($Codec<($ArtifactLootModifier)>)>
static readonly "ADD_TABLE": $RegistryEntry<($Codec<($AddLootTableModifier)>)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactTypeRegistry$Type = ($ArtifactTypeRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactTypeRegistry_ = $ArtifactTypeRegistry$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$TFConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $TFConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TFConfigGen$Type = ($TFConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TFConfigGen_ = $TFConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/capability/$MergedInvBackpackCap" {
import {$PickupTrace, $PickupTrace$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IItemHandlerModifiable, $IItemHandlerModifiable$Type} from "packages/net/minecraftforge/items/$IItemHandlerModifiable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$InvPickupCap, $InvPickupCap$Type} from "packages/dev/xkmc/l2backpack/content/capability/$InvPickupCap"

export class $MergedInvBackpackCap extends $InvPickupCap<($IItemHandlerModifiable)> implements $IItemHandlerModifiable {

constructor()

public "getInv"(arg0: $PickupTrace$Type): $IItemHandlerModifiable
public "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public static "register"(): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "slots"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MergedInvBackpackCap$Type = ($MergedInvBackpackCap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MergedInvBackpackCap_ = $MergedInvBackpackCap$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/skill/$CleanseEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$SkillEffect, $SkillEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/skill/$SkillEffect"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$IconOverlayEffect, $IconOverlayEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$IconOverlayEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CleanseEffect extends $InherentEffect implements $ForceEffect, $IconOverlayEffect, $SkillEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender
public "addAttributeModifiers"(arg0: $LivingEntity$Type, arg1: $AttributeMap$Type, arg2: integer): void
public static "clearOnEntity"(arg0: $LivingEntity$Type): void
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
public "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CleanseEffect$Type = ($CleanseEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CleanseEffect_ = $CleanseEffect$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$TooltipProcessor" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$HashMultimap, $HashMultimap$Type} from "packages/com/google/common/collect/$HashMultimap"

export class $TooltipProcessor {

constructor()

public static "processTooltip"(arg0: $Multimap$Type<($Attribute$Type), ($AttributeModifier$Type)>): $HashMultimap<($Attribute), ($AttributeModifier)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipProcessor$Type = ($TooltipProcessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipProcessor_ = $TooltipProcessor$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/conditionals/$Context" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $Context {

}

export namespace $Context {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Context$Type = ($Context);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Context_ = $Context$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$AbyssalThorn" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$MultiSlotItem, $MultiSlotItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$MultiSlotItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AbyssalThorn extends $MultiSlotItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbyssalThorn$Type = ($AbyssalThorn);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbyssalThorn_ = $AbyssalThorn$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$IgnisAttackModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"

export class $IgnisAttackModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $StatFilterType$Type, arg1: integer)

public "modifySource"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $CreateSourceEvent$Type, arg2: integer): void
public "onHurtTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IgnisAttackModifier$Type = ($IgnisAttackModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IgnisAttackModifier_ = $IgnisAttackModifier$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/entry/$SetSwapEntry" {
import {$ISwapEntry, $ISwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISwapEntry"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"

export class $SetSwapEntry extends $Record implements $ISwapEntry<($SetSwapEntry)> {

constructor(token: $IQuickSwapToken$Type<($SetSwapEntry$Type)>, list: $List$Type<($ItemStack$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "list"(): $List<($ItemStack)>
public "asList"(): $List<($ItemStack)>
public "getStack"(): $ItemStack
public static "parse"(arg0: $IQuickSwapToken$Type<($SetSwapEntry$Type)>, arg1: $List$Type<($ItemStack$Type)>, arg2: integer): $List<($SetSwapEntry)>
public "token"(): $IQuickSwapToken<($SetSwapEntry)>
get "stack"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetSwapEntry$Type = ($SetSwapEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetSwapEntry_ = $SetSwapEntry$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$BackpackSlotClickListener" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ConcurrentHashMap, $ConcurrentHashMap$Type} from "packages/java/util/concurrent/$ConcurrentHashMap"
import {$WritableStackClickHandler, $WritableStackClickHandler$Type} from "packages/dev/xkmc/l2screentracker/click/writable/$WritableStackClickHandler"
import {$SlotClickHandler, $SlotClickHandler$Type} from "packages/dev/xkmc/l2screentracker/click/$SlotClickHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BackpackSlotClickListener extends $WritableStackClickHandler {
static readonly "MAP": $ConcurrentHashMap<($ResourceLocation), ($SlotClickHandler)>

constructor()

public "handle"(arg0: $ServerPlayer$Type, arg1: integer, arg2: integer, arg3: integer): void
public static "canOpen"(arg0: $ItemStack$Type): boolean
public "keyBind"(): void
public "isAllowed"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackSlotClickListener$Type = ($BackpackSlotClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackSlotClickListener_ = $BackpackSlotClickListener$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/conditions/$IntValueCondition" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $IntValueCondition extends $Record implements $ICondition {
static readonly "ID": $ResourceLocation

constructor(path: string, line: $ArrayList$Type<(string)>, low: integer, high: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $ICondition$IContext$Type): boolean
public static "of"(arg0: string, arg1: $ForgeConfigSpec$ConfigValue$Type<(integer)>, arg2: integer, arg3: integer): $IntValueCondition
public "line"(): $ArrayList<(string)>
public "path"(): string
public "high"(): integer
public "low"(): integer
public "getID"(): $ResourceLocation
public static "shouldRegisterEntry"(arg0: $JsonElement$Type): boolean
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntValueCondition$Type = ($IntValueCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntValueCondition_ = $IntValueCondition$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$ReflectiveModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ReflectiveModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $StatFilterType$Type, arg1: integer)

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onHurt"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReflectiveModifier$Type = ($ReflectiveModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReflectiveModifier_ = $ReflectiveModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier$HealingContext" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $GolemModifier$HealingContext extends $Record {

constructor(health: float, maxHealth: float, owner: $Entity$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "owner"(): $Entity
public "maxHealth"(): float
public "health"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemModifier$HealingContext$Type = ($GolemModifier$HealingContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemModifier$HealingContext_ = $GolemModifier$HealingContext$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$RegenModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$GolemModifier$HealingContext, $GolemModifier$HealingContext$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier$HealingContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $RegenModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $StatFilterType$Type, arg1: integer)

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onInventoryHealTick"(arg0: double, arg1: $GolemModifier$HealingContext$Type, arg2: integer): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegenModifier$Type = ($RegenModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegenModifier_ = $RegenModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $InherentEffect extends $MobEffect {


public "getCurativeItems"(): $List<($ItemStack)>
get "curativeItems"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InherentEffect$Type = ($InherentEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InherentEffect_ = $InherentEffect$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/menu/tab/$DifficultyTab" {
import {$BaseTab, $BaseTab$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$BaseTab"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TabToken, $TabToken$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TabManager, $TabManager$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $DifficultyTab extends $BaseTab<($DifficultyTab)> {
readonly "stack": $ItemStack
readonly "token": $TabToken<(T)>
readonly "manager": $TabManager
 "page": integer
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $TabToken$Type<($DifficultyTab$Type)>, arg1: $TabManager$Type, arg2: $ItemStack$Type, arg3: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DifficultyTab$Type = ($DifficultyTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DifficultyTab_ = $DifficultyTab$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/consumable/$BookEverything" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BookEverything extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public static "allow"(arg0: $Enchantment$Type): boolean
public static "cost"(arg0: $Enchantment$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookEverything$Type = ($BookEverything);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookEverything_ = $BookEverything$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$EnderHandEnchantment" {
import {$SourceModifierEnchantment, $SourceModifierEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SourceModifierEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SingleLevelEnchantment, $SingleLevelEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SingleLevelEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"

export class $EnderHandEnchantment extends $SingleLevelEnchantment implements $SourceModifierEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, ...arg2: ($EquipmentSlot$Type)[])

public "modify"(arg0: $CreateSourceEvent$Type, arg1: $ItemStack$Type, arg2: integer): void
public static "modifySource"(arg0: $ItemStack$Type, arg1: $CreateSourceEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderHandEnchantment$Type = ($EnderHandEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderHandEnchantment_ = $EnderHandEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$LangData" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $LangData extends $Enum<($LangData)> {
static readonly "TOOL_DAGGER": $LangData
static readonly "TOOL_CLAW": $LangData
static readonly "TOOL_CLAW_EXTRA": $LangData
static readonly "TOOL_HAMMER": $LangData
static readonly "TOOL_BATTLE_AXE": $LangData
static readonly "TOOL_SPEAR": $LangData
static readonly "TOOL_MACHETE": $LangData
static readonly "TOOL_MACHETE_EXTRA": $LangData
static readonly "TOOL_ROUND_SHIELD": $LangData
static readonly "TOOL_PLATE_SHIELD": $LangData
static readonly "TOOL_PLATE_SHIELD_EXTRA": $LangData
static readonly "TOOL_THROWING_AXE": $LangData
static readonly "TOOL_JAVELIN": $LangData
static readonly "TOOL_NUNCHAKU": $LangData
static readonly "FLAME_AXE": $LangData
static readonly "BLACK_HAMMER": $LangData
static readonly "FROZEN_SPEAR": $LangData
static readonly "STORM_JAVELIN": $LangData
static readonly "ENDER_DAGGER": $LangData
static readonly "ENDER_JAVELIN": $LangData
static readonly "ENDER_SPEAR": $LangData
static readonly "ABYSS_DAGGER": $LangData
static readonly "ABYSS_MACHETE": $LangData
static readonly "ABYSS_HAMMER": $LangData
static readonly "ABYSS_AXE": $LangData
static readonly "BLOOD_CLAW": $LangData
static readonly "BLACK_AXE": $LangData
static readonly "ENDER_MACHETE": $LangData
static readonly "CHEATER_CLAW": $LangData
static readonly "CHEATER_MACHETE": $LangData
static readonly "HOLY_AXE": $LangData
static readonly "HOLY_HAMMER": $LangData
static readonly "MATS_FIERY": $LangData
static readonly "MATS_KNIGHTMETAL": $LangData
static readonly "MATS_REFLECT": $LangData
static readonly "MATS_STEELEAF": $LangData
static readonly "MATS_IRONWOOD": $LangData
static readonly "MATS_EFFECT": $LangData
static readonly "MATS_AH_ARSON": $LangData
static readonly "MATS_AH_ARSON_SHIELD": $LangData
static readonly "MATS_AH_VOLUCITE": $LangData
static readonly "MATS_AH_VOLUCITE_SHIELD": $LangData
static readonly "STAT_KILL": $LangData
static readonly "STAT_BONUS_CLAW": $LangData


public "get"(...arg0: (any)[]): $MutableComponent
public static "values"(): ($LangData)[]
public static "valueOf"(arg0: string): $LangData
public static "asId"(arg0: string): string
public static "addTranslations"(arg0: $RegistrateLangProvider$Type): void
public static "translate"(arg0: string, ...arg1: (any)[]): $MutableComponent
public static "getTooltip"(arg0: $MobEffectInstance$Type): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LangData$Type = (("tool_claw_extra") | ("abyss_dagger") | ("blood_claw") | ("frozen_spear") | ("stat_kill") | ("mats_effect") | ("tool_claw") | ("holy_axe") | ("ender_dagger") | ("mats_fiery") | ("mats_ironwood") | ("tool_dagger") | ("black_hammer") | ("mats_ah_volucite_shield") | ("abyss_axe") | ("ender_machete") | ("tool_round_shield") | ("mats_ah_arson_shield") | ("tool_hammer") | ("ender_javelin") | ("mats_reflect") | ("black_axe") | ("storm_javelin") | ("ender_spear") | ("abyss_hammer") | ("tool_nunchaku") | ("tool_machete_extra") | ("tool_throwing_axe") | ("tool_battle_axe") | ("cheater_claw") | ("abyss_machete") | ("tool_spear") | ("holy_hammer") | ("mats_knightmetal") | ("tool_javelin") | ("cheater_machete") | ("mats_ah_arson") | ("tool_machete") | ("tool_plate_shield_extra") | ("mats_ah_volucite") | ("stat_bonus_claw") | ("flame_axe") | ("mats_steeleaf") | ("tool_plate_shield")) | ($LangData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LangData_ = $LangData$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemPartType" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $DogGolemPartType extends $Enum<($DogGolemPartType)> implements $IGolemPart<($DogGolemPartType)> {
static readonly "BODY": $DogGolemPartType
static readonly "LEGS": $DogGolemPartType


public static "values"(): ($DogGolemPartType)[]
public static "valueOf"(arg0: string): $DogGolemPartType
public "getDesc"(arg0: $MutableComponent$Type): $MutableComponent
public "setupItemRender"(arg0: $PoseStack$Type, arg1: $ItemDisplayContext$Type, arg2: $DogGolemPartType$Type): void
public "toItem"(): $GolemPart<(any), ($DogGolemPartType)>
public "ordinal"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DogGolemPartType$Type = (("legs") | ("body")) | ($DogGolemPartType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DogGolemPartType_ = $DogGolemPartType$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$KillerAuraTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LegendaryTrait, $LegendaryTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$LegendaryTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $KillerAuraTrait extends $LegendaryTrait {

constructor(arg0: $ChatFormatting$Type)

public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
public "addDetail"(arg0: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillerAuraTrait$Type = ($KillerAuraTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillerAuraTrait_ = $KillerAuraTrait$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitFlameTrigger$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $KillTraitFlameTrigger$Type extends $Enum<($KillTraitFlameTrigger$Type)> {
static readonly "FLAME": $KillTraitFlameTrigger$Type


public static "values"(): ($KillTraitFlameTrigger$Type)[]
public static "valueOf"(arg0: string): $KillTraitFlameTrigger$Type
public "match"(arg0: $LivingEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitFlameTrigger$Type$Type = (("flame")) | ($KillTraitFlameTrigger$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitFlameTrigger$Type_ = $KillTraitFlameTrigger$Type$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$HeavyEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$AttributeEnchantment, $AttributeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$AttributeEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $HeavyEnchantment extends $UnobtainableEnchantment implements $AttributeEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "addAttributes"(arg0: integer, arg1: $ItemAttributeModifierEvent$Type): void
public "getColor"(): $ChatFormatting
public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "color"(): $ChatFormatting
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeavyEnchantment$Type = ($HeavyEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeavyEnchantment_ = $HeavyEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2complements/events/$MagicEventHandler" {
import {$MobEffectEvent$Applicable, $MobEffectEvent$Applicable$Type} from "packages/net/minecraftforge/event/entity/living/$MobEffectEvent$Applicable"
import {$LivingHealEvent, $LivingHealEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHealEvent"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$EntityTeleportEvent, $EntityTeleportEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityTeleportEvent"
import {$BlockEvent$BreakEvent, $BlockEvent$BreakEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent$BreakEvent"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$LivingDropsEvent, $LivingDropsEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDropsEvent"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ForceAddEffectEvent, $ForceAddEffectEvent$Type} from "packages/dev/xkmc/l2library/base/effects/$ForceAddEffectEvent"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"
import {$MobEffectEvent$Added, $MobEffectEvent$Added$Type} from "packages/net/minecraftforge/event/entity/living/$MobEffectEvent$Added"
import {$LivingEvent$LivingTickEvent, $LivingEvent$LivingTickEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent$LivingTickEvent"

export class $MagicEventHandler {

constructor()

/**
 * 
 * @deprecated
 */
public static "schedulePersistent"(arg0: $BooleanSupplier$Type): void
public static "onPotionTest"(arg0: $MobEffectEvent$Applicable$Type): void
/**
 * 
 * @deprecated
 */
public static "schedule"(arg0: $Runnable$Type): void
public static "onBlockBreak"(arg0: $BlockEvent$BreakEvent$Type): void
public static "onLivingAttack"(arg0: $LivingAttackEvent$Type): void
public static "onLivingTick"(arg0: $LivingEvent$LivingTickEvent$Type): void
public static "isSkill"(arg0: $MobEffectInstance$Type, arg1: $LivingEntity$Type): boolean
public static "onHeal"(arg0: $LivingHealEvent$Type): void
public static "onInventoryDrop"(arg0: $LivingDropsEvent$Type): void
public static "onTeleport"(arg0: $EntityTeleportEvent$Type): void
public static "onForceAdd"(arg0: $ForceAddEffectEvent$Type): void
public static "onPotionAdded"(arg0: $MobEffectEvent$Added$Type): void
public static "onItemAttributes"(arg0: $ItemAttributeModifierEvent$Type): void
public static "onTick"(arg0: $TickEvent$ServerTickEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicEventHandler$Type = ($MagicEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicEventHandler_ = $MagicEventHandler$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/humanoid/skin/$ClientSkinDispatch" {
import {$SpecialRenderSkin, $SpecialRenderSkin$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/skin/$SpecialRenderSkin"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $ClientSkinDispatch {

constructor()

public static "get"(arg0: $HumanoidGolemEntity$Type): $SpecialRenderSkin
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientSkinDispatch$Type = ($ClientSkinDispatch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientSkinDispatch_ = $ClientSkinDispatch$Type;
}}
declare module "packages/dev/xkmc/l2library/init/explosion/$BaseExplosionContext" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export class $BaseExplosionContext extends $Record {

constructor(level: $Level$Type, x: double, y: double, z: double, r: float)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "x"(): double
public "z"(): double
public "r"(): float
public "y"(): double
public "level"(): $Level
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseExplosionContext$Type = ($BaseExplosionContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseExplosionContext_ = $BaseExplosionContext$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/patchouli/$PatchouliProvider" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RegistrateProvider, $RegistrateProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateProvider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$RecordDataProvider, $RecordDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$RecordDataProvider"
import {$AbstractRegistrate, $AbstractRegistrate$Type} from "packages/com/tterrag/registrate/$AbstractRegistrate"
import {$LogicalSide, $LogicalSide$Type} from "packages/net/minecraftforge/fml/$LogicalSide"

export class $PatchouliProvider extends $RecordDataProvider implements $RegistrateProvider, $BiConsumer<(string), ($Record)> {

constructor(arg0: $AbstractRegistrate$Type<(any)>, arg1: $DataGenerator$Type)

public "add"(arg0: $BiConsumer$Type<(string), ($Record$Type)>): void
public "accept"(arg0: string, arg1: $Record$Type): void
public "getSide"(): $LogicalSide
public "andThen"(arg0: $BiConsumer$Type<(any), (any)>): $BiConsumer<(string), ($Record)>
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
get "side"(): $LogicalSide
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatchouliProvider$Type = ($PatchouliProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatchouliProvider_ = $PatchouliProvider$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/api/$ClientRenderEffect" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ClientRenderEffect {

 "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void

(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
}

export namespace $ClientRenderEffect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientRenderEffect$Type = ($ClientRenderEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientRenderEffect_ = $ClientRenderEffect$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/$LangData" {
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $LangData extends $Enum<($LangData)> {
static readonly "RAW_ARTIFACT": $LangData
static readonly "ARTIFACT_LEVEL": $LangData
static readonly "ARTIFACT_EXP": $LangData
static readonly "UPGRADE": $LangData
static readonly "MAIN_STAT": $LangData
static readonly "SUB_STAT": $LangData
static readonly "EXP_CONVERSION": $LangData
static readonly "SHIFT_TEXT": $LangData
static readonly "SET": $LangData
static readonly "STAT_CAPTURE_INFO": $LangData
static readonly "STAT_USE_INFO": $LangData
static readonly "STAT_INFO": $LangData
static readonly "BOOST_MAIN": $LangData
static readonly "BOOST_SUB": $LangData
static readonly "UPGRADE_STAT": $LangData
static readonly "UPGRADE_MAIN": $LangData
static readonly "UPGRADE_SUB": $LangData
static readonly "ALL_SET_EFFECTS": $LangData
static readonly "TITLE_SELECT_SET": $LangData
static readonly "TITLE_SELECT_SLOT": $LangData
static readonly "TITLE_SELECT_RANK": $LangData
static readonly "TAB_FILTERED": $LangData
static readonly "TAB_FILTER": $LangData
static readonly "TAB_SORT": $LangData
static readonly "TAB_RECYCLE": $LangData
static readonly "TAB_UPGRADE": $LangData
static readonly "TAB_DISSOLVE": $LangData
static readonly "TAB_AUGMENT": $LangData
static readonly "TAB_SHAPE": $LangData
static readonly "FILTER_RANK": $LangData
static readonly "FILTER_SLOT": $LangData
static readonly "FILTER_SET": $LangData
static readonly "FILTER_STAT": $LangData
static readonly "TAB_INFO_TOTAL": $LangData
static readonly "TAB_INFO_MATCHED": $LangData
static readonly "TAB_INFO_EXP": $LangData
static readonly "TAB_INFO_SELECTED": $LangData
static readonly "TAB_INFO_EXP_GAIN": $LangData
static readonly "TAB_INFO_EXP_COST": $LangData
static readonly "RANK_1": $LangData
static readonly "RANK_2": $LangData
static readonly "RANK_3": $LangData
static readonly "RANK_4": $LangData
static readonly "RANK_5": $LangData
static readonly "PLAYER_ONLY": $LangData
static readonly "LOOT_POOL": $LangData
static readonly "LOOT_POOL_ALL": $LangData
static readonly "TOOL_SWAP": $LangData


public "get"(...arg0: (any)[]): $MutableComponent
public static "values"(): ($LangData)[]
public static "valueOf"(arg0: string): $LangData
public static "getTranslate"(arg0: string, ...arg1: (any)[]): $MutableComponent
public static "asId"(arg0: string): string
public static "genLang"(arg0: $RegistrateLangProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LangData$Type = (("artifact_exp") | ("tab_filter") | ("title_select_slot") | ("title_select_set") | ("raw_artifact") | ("upgrade_stat") | ("tab_dissolve") | ("rank_1") | ("rank_2") | ("upgrade_sub") | ("shift_text") | ("stat_capture_info") | ("filter_stat") | ("boost_sub") | ("filter_slot") | ("artifact_level") | ("main_stat") | ("title_select_rank") | ("tab_info_total") | ("all_set_effects") | ("stat_info") | ("tab_upgrade") | ("tab_info_selected") | ("tab_augment") | ("filter_rank") | ("set") | ("upgrade") | ("loot_pool") | ("filter_set") | ("tab_recycle") | ("tab_filtered") | ("boost_main") | ("tab_info_exp_gain") | ("tool_swap") | ("tab_shape") | ("rank_5") | ("upgrade_main") | ("tab_info_exp_cost") | ("rank_3") | ("exp_conversion") | ("rank_4") | ("loot_pool_all") | ("sub_stat") | ("tab_sort") | ("player_only") | ("stat_use_info") | ("tab_info_matched") | ("tab_info_exp")) | ($LangData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LangData_ = $LangData$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$PlatinumStar" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PlatinumStar extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlatinumStar$Type = ($PlatinumStar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlatinumStar_ = $PlatinumStar$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconBlockEntity$Section" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $HostilityBeaconBlockEntity$Section {

constructor(arg0: (float)[])

public "getHeight"(): integer
public "getColor"(): (float)[]
get "height"(): integer
get "color"(): (float)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityBeaconBlockEntity$Section$Type = ($HostilityBeaconBlockEntity$Section);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityBeaconBlockEntity$Section_ = $HostilityBeaconBlockEntity$Section$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/common/$ISetSwapItem" {
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$IQuickSwapItem, $IQuickSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ISetSwapItem extends $IQuickSwapItem {

 "getRows"(): integer
 "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
}

export namespace $ISetSwapItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISetSwapItem$Type = ($ISetSwapItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISetSwapItem_ = $ISetSwapItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/highlevel/$DrainTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraitEffectCache, $TraitEffectCache$Type} from "packages/dev/xkmc/l2hostility/content/logic/$TraitEffectCache"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $DrainTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "postInit"(arg0: $LivingEntity$Type, arg1: integer): void
public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "postHurtImpl"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "onHurtTarget"(arg0: integer, arg1: $LivingEntity$Type, arg2: $AttackCache$Type, arg3: $TraitEffectCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrainTrait$Type = ($DrainTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrainTrait_ = $DrainTrait$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/$ArtifactClient" {
import {$RegisterGuiOverlaysEvent, $RegisterGuiOverlaysEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterGuiOverlaysEvent"
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$TabToken, $TabToken$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabToken"
import {$RegisterClientTooltipComponentFactoriesEvent, $RegisterClientTooltipComponentFactoriesEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientTooltipComponentFactoriesEvent"
import {$TabSetEffects, $TabSetEffects$Type} from "packages/dev/xkmc/l2artifacts/content/client/tab/$TabSetEffects"
import {$RegisterKeyMappingsEvent, $RegisterKeyMappingsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterKeyMappingsEvent"
import {$RegisterClientReloadListenersEvent, $RegisterClientReloadListenersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientReloadListenersEvent"

export class $ArtifactClient {
static "TAB_SET_EFFECTS": $TabToken<($TabSetEffects)>

constructor()

public static "clientSetup"(arg0: $FMLClientSetupEvent$Type): void
public static "registerKeys"(arg0: $RegisterKeyMappingsEvent$Type): void
public static "registerTooltip"(arg0: $RegisterClientTooltipComponentFactoriesEvent$Type): void
public static "registerOverlay"(arg0: $RegisterGuiOverlaysEvent$Type): void
public static "registerReloadListener"(arg0: $RegisterClientReloadListenersEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactClient$Type = ($ArtifactClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactClient_ = $ArtifactClient$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISwapEntry" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"

export interface $ISwapEntry<T extends $ISwapEntry<(T)>> {

 "asList"(): $List<($ItemStack)>
 "getStack"(): $ItemStack
 "token"(): $IQuickSwapToken<(T)>
}

export namespace $ISwapEntry {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISwapEntry$Type<T> = ($ISwapEntry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISwapEntry_<T> = $ISwapEntry$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$RecordDataProvider" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$DataProvider, $DataProvider$Type} from "packages/net/minecraft/data/$DataProvider"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"

export class $RecordDataProvider implements $DataProvider {

constructor(arg0: $DataGenerator$Type, arg1: string)

public "add"(arg0: $BiConsumer$Type<(string), ($Record$Type)>): void
public "run"(arg0: $CachedOutput$Type): $CompletableFuture<(any)>
public "getName"(): string
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecordDataProvider$Type = ($RecordDataProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecordDataProvider_ = $RecordDataProvider$Type;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$InfoSideBar" {
import {$SideBar$Signature, $SideBar$Signature$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar$Signature"
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$SideBar, $SideBar$Type} from "packages/dev/xkmc/l2library/base/overlay/$SideBar"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $InfoSideBar<S extends $SideBar$Signature<(S)>> extends $SideBar<(S)> implements $IGuiOverlay {

constructor(arg0: float, arg1: float)

public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InfoSideBar$Type<S> = ($InfoSideBar<(S)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InfoSideBar_<S> = $InfoSideBar$Type<(S)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$MetalGolemPartType, $MetalGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemPartType"
import {$AbstractGolemRenderer, $AbstractGolemRenderer$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemRenderer"
import {$MetalGolemEntity, $MetalGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MetalGolemModel, $MetalGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemModel"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"

export class $MetalGolemRenderer extends $AbstractGolemRenderer<($MetalGolemEntity), ($MetalGolemPartType), ($MetalGolemModel)> {
static readonly "LIST": $List<($Function<($AbstractGolemRenderer<(any), (any), (any)>), ($RenderLayer<(any), (any)>)>)>
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalGolemRenderer$Type = ($MetalGolemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalGolemRenderer_ = $MetalGolemRenderer$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/core/$StatFilterType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $StatFilterType extends $Enum<($StatFilterType)> {
static readonly "HEALTH": $StatFilterType
static readonly "ATTACK": $StatFilterType
static readonly "MOVEMENT": $StatFilterType
static readonly "MASS": $StatFilterType
static readonly "HEAD": $StatFilterType


public static "values"(): ($StatFilterType)[]
public static "valueOf"(arg0: string): $StatFilterType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatFilterType$Type = (("head") | ("attack") | ("mass") | ("health") | ("movement")) | ($StatFilterType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatFilterType_ = $StatFilterType$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/common/$IFilterMenu" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IFilterMenu {

}

export namespace $IFilterMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IFilterMenu$Type = ($IFilterMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IFilterMenu_ = $IFilterMenu$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/stacked/$StackedRenderHandle" {
import {$TextButtonHandle, $TextButtonHandle$Type} from "packages/dev/xkmc/l2library/base/menu/stacked/$TextButtonHandle"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$CellEntry, $CellEntry$Type} from "packages/dev/xkmc/l2library/base/menu/stacked/$CellEntry"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MenuLayoutConfig, $MenuLayoutConfig$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig"

export class $StackedRenderHandle {

constructor(arg0: $Screen$Type, arg1: $GuiGraphics$Type, arg2: integer, arg3: integer, arg4: $MenuLayoutConfig$Type, arg5: integer)
constructor(arg0: $Screen$Type, arg1: $GuiGraphics$Type, arg2: integer, arg3: integer, arg4: $MenuLayoutConfig$Type)
constructor(arg0: $Screen$Type, arg1: $GuiGraphics$Type, arg2: $MenuLayoutConfig$Type, arg3: integer)
constructor(arg0: $Screen$Type, arg1: $GuiGraphics$Type, arg2: $MenuLayoutConfig$Type)

public "addCell"(arg0: boolean, arg1: boolean): $CellEntry
public "drawText"(arg0: $Component$Type, arg1: boolean): void
public "drawTable"(arg0: (($Component$Type)[])[], arg1: integer, arg2: boolean): void
public "flushText"(): void
public "drawTextWithButtons"(arg0: $Component$Type, arg1: boolean): $TextButtonHandle
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StackedRenderHandle$Type = ($StackedRenderHandle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StackedRenderHandle_ = $StackedRenderHandle$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/card/$TargetFilterCard" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$GolemInteractItem, $GolemInteractItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$GolemInteractItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TargetFilterCard extends $Item implements $GolemInteractItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "mayTarget"(arg0: $ItemStack$Type): $Predicate<($LivingEntity)>
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetFilterCard$Type = ($TargetFilterCard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetFilterCard_ = $TargetFilterCard$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/data/$SlotGen" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$RecordDataProvider, $RecordDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$RecordDataProvider"

export class $SlotGen extends $RecordDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $BiConsumer$Type<(string), ($Record$Type)>): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotGen$Type = ($SlotGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotGen_ = $SlotGen$Type;
}}
declare module "packages/dev/xkmc/l2library/init/events/$ClientGeneralEventHandler" {
import {$ClientPlayerNetworkEvent$Clone, $ClientPlayerNetworkEvent$Clone$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$Clone"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"

export class $ClientGeneralEventHandler {

constructor()

public static "clientTick"(arg0: $TickEvent$ClientTickEvent$Type): void
public static "onPlayerRespawn"(arg0: $ClientPlayerNetworkEvent$Clone$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientGeneralEventHandler$Type = ($ClientGeneralEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientGeneralEventHandler_ = $ClientGeneralEventHandler$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/fitered/$FilteredMenu" {
import {$IntDataSlot, $IntDataSlot$Type} from "packages/dev/xkmc/l2library/base/menu/data/$IntDataSlot"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$AbstractScrollerMenu, $AbstractScrollerMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$AbstractScrollerMenu"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$DataSlot, $DataSlot$Type} from "packages/net/minecraft/world/inventory/$DataSlot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $FilteredMenu extends $AbstractScrollerMenu<($FilteredMenu)> {
readonly "token": $ArtifactChestToken
readonly "total_count": $IntDataSlot
readonly "current_count": $IntDataSlot
readonly "experience": $IntDataSlot
readonly "max_row": $DataSlot
readonly "row": $DataSlot
readonly "extra": integer
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $ArtifactChestToken$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($FilteredMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $FilteredMenu
public "slotsChanged"(arg0: $Container$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilteredMenu$Type = ($FilteredMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilteredMenu_ = $FilteredMenu$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapTypes" {
import {$ToolSwapType, $ToolSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$ToolSwapType"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArmorSwapType, $ArmorSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$ArmorSwapType"
import {$ArrowSwapType, $ArrowSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$ArrowSwapType"
import {$MatcherSwapType, $MatcherSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$MatcherSwapType"

export class $QuickSwapTypes {
static readonly "ARROW": $ArrowSwapType
static readonly "TOOL": $ToolSwapType
static readonly "ARMOR": $ArmorSwapType
static readonly "MATCHER": $List<($MatcherSwapType)>

constructor()

public static "register"(arg0: $QuickSwapType$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuickSwapTypes$Type = ($QuickSwapTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuickSwapTypes_ = $QuickSwapTypes$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$FlameAxe" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$BattleAxeItem, $BattleAxeItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$BattleAxeItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FlameAxe extends $BattleAxeItem implements $LegendaryWeapon {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlameAxe$Type = ($FlameAxe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlameAxe_ = $FlameAxe$Type;
}}
declare module "packages/dev/xkmc/l2library/init/events/$EffectSyncEvents" {
import {$MobEffectEvent$Remove, $MobEffectEvent$Remove$Type} from "packages/net/minecraftforge/event/entity/living/$MobEffectEvent$Remove"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$PlayerEvent$PlayerLoggedOutEvent, $PlayerEvent$PlayerLoggedOutEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedOutEvent"
import {$PlayerEvent$StartTracking, $PlayerEvent$StartTracking$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$StartTracking"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$MobEffectEvent$Expired, $MobEffectEvent$Expired$Type} from "packages/net/minecraftforge/event/entity/living/$MobEffectEvent$Expired"
import {$MobEffectEvent$Added, $MobEffectEvent$Added$Type} from "packages/net/minecraftforge/event/entity/living/$MobEffectEvent$Added"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$PlayerEvent$StopTracking, $PlayerEvent$StopTracking$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$StopTracking"

export class $EffectSyncEvents {
/**
 * 
 * @deprecated
 */
static readonly "TRACKED": $Set<($MobEffect)>

constructor()

public static "onPlayerStartTracking"(arg0: $PlayerEvent$StartTracking$Type): void
public static "onPotionRemoveEvent"(arg0: $MobEffectEvent$Remove$Type): void
public static "onPotionExpiryEvent"(arg0: $MobEffectEvent$Expired$Type): void
public static "onPlayerStopTracking"(arg0: $PlayerEvent$StopTracking$Type): void
public static "onServerPlayerLeave"(arg0: $PlayerEvent$PlayerLoggedOutEvent$Type): void
public static "tracked"(arg0: $MobEffect$Type): boolean
public static "onPotionAddedEvent"(arg0: $MobEffectEvent$Added$Type): void
public static "onServerPlayerJoin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectSyncEvents$Type = ($EffectSyncEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectSyncEvents_ = $EffectSyncEvents$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/dissolve/$DissolveTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export class $DissolveTab extends $FilterTabBase<($DissolveTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $FilterTabToken<(T)>
readonly "manager": $FilterTabManager
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $FilterTabToken$Type<($DissolveTab$Type)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DissolveTab$Type = ($DissolveTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DissolveTab_ = $DissolveTab$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/registry/$GolemTabRegistry" {
import {$ConfigItemTab, $ConfigItemTab$Type} from "packages/dev/xkmc/modulargolems/content/menu/filter/$ConfigItemTab"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$ConfigGroup"
import {$EquipmentGroup, $EquipmentGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$EquipmentGroup"
import {$ConfigToggleTab, $ConfigToggleTab$Type} from "packages/dev/xkmc/modulargolems/content/menu/config/$ConfigToggleTab"
import {$AttributeTab, $AttributeTab$Type} from "packages/dev/xkmc/modulargolems/content/menu/attribute/$AttributeTab"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigPathTab, $ConfigPathTab$Type} from "packages/dev/xkmc/modulargolems/content/menu/path/$ConfigPathTab"
import {$EquipmentTab, $EquipmentTab$Type} from "packages/dev/xkmc/modulargolems/content/menu/equipment/$EquipmentTab"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$ConfigTargetTab, $ConfigTargetTab$Type} from "packages/dev/xkmc/modulargolems/content/menu/target/$ConfigTargetTab"

export class $GolemTabRegistry {
static readonly "LIST_CONFIG": $List<($GolemTabToken<($ConfigGroup), (any)>)>
static readonly "LIST_EQUIPMENT": $List<($GolemTabToken<($EquipmentGroup), (any)>)>
static readonly "CONFIG_TOGGLE": $GolemTabToken<($ConfigGroup), ($ConfigToggleTab)>
static readonly "CONFIG_ITEM": $GolemTabToken<($ConfigGroup), ($ConfigItemTab)>
static readonly "CONFIG_TARGET": $GolemTabToken<($ConfigGroup), ($ConfigTargetTab)>
static readonly "CONFIG_PATH": $GolemTabToken<($ConfigGroup), ($ConfigPathTab)>
static readonly "EQUIPMENT": $GolemTabToken<($EquipmentGroup), ($EquipmentTab)>
static readonly "ATTRIBUTE": $GolemTabToken<($EquipmentGroup), ($AttributeTab)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTabRegistry$Type = ($GolemTabRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTabRegistry_ = $GolemTabRegistry$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$LongShooterPersistentData" {
import {$AttributeSetData, $AttributeSetData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$AttributeSetData$AttributePair, $AttributeSetData$AttributePair$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData$AttributePair"

export class $LongShooterPersistentData extends $AttributeSetData {
 "old": boolean
 "list": $ArrayList<($AttributeSetData$AttributePair)>
 "life": integer
 "rank": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongShooterPersistentData$Type = ($LongShooterPersistentData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongShooterPersistentData_ = $LongShooterPersistentData$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/feature/$CurioFeaturePredicate" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$FeaturePredicate, $FeaturePredicate$Type} from "packages/dev/xkmc/l2complements/content/feature/$FeaturePredicate"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CurioFeaturePredicate extends $Record implements $FeaturePredicate {

constructor(item: $Supplier$Type<($Item$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $LivingEntity$Type): boolean
public "item"(): $Supplier<($Item)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurioFeaturePredicate$Type = ($CurioFeaturePredicate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurioFeaturePredicate_ = $CurioFeaturePredicate$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/material/$VanillaGolemWeaponMaterial" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$IGolemWeaponMaterial, $IGolemWeaponMaterial$Type} from "packages/dev/xkmc/modulargolems/init/material/$IGolemWeaponMaterial"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"

export class $VanillaGolemWeaponMaterial extends $Enum<($VanillaGolemWeaponMaterial)> implements $IGolemWeaponMaterial {
static readonly "IRON": $VanillaGolemWeaponMaterial
static readonly "DIAMOND": $VanillaGolemWeaponMaterial
static readonly "NETHERITE": $VanillaGolemWeaponMaterial


public "getName"(): string
public static "values"(): ($VanillaGolemWeaponMaterial)[]
public static "valueOf"(arg0: string): $VanillaGolemWeaponMaterial
public "getDamage"(): integer
public "fireResistant"(): boolean
public "getIngot"(): $Item
public "modify"(arg0: $Item$Properties$Type): $Item$Properties
get "name"(): string
get "damage"(): integer
get "ingot"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaGolemWeaponMaterial$Type = (("diamond") | ("iron") | ("netherite")) | ($VanillaGolemWeaponMaterial);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaGolemWeaponMaterial_ = $VanillaGolemWeaponMaterial$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/type/$MatcherSwapType" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $MatcherSwapType extends $QuickSwapType {

constructor(arg0: string, arg1: boolean)

public "match"(arg0: $ItemStack$Type): boolean
public "getSignatureItem"(arg0: $Player$Type): $ItemStack
public "allowsOffhand"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatcherSwapType$Type = ($MatcherSwapType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatcherSwapType_ = $MatcherSwapType$Type;
}}
declare module "packages/dev/xkmc/l2library/util/annotation/$DataGenOnly" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $DataGenOnly extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $DataGenOnly {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataGenOnly$Type = ($DataGenOnly);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataGenOnly_ = $DataGenOnly$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/wand/$SonicShooter" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$WandItem, $WandItem$Type} from "packages/dev/xkmc/l2complements/content/item/wand/$WandItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$IGlowingTarget, $IGlowingTarget$Type} from "packages/dev/xkmc/l2library/util/raytrace/$IGlowingTarget"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SonicShooter extends $WandItem implements $IGlowingTarget {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getDistance"(arg0: $ItemStack$Type): integer
public "getUseDuration"(arg0: $ItemStack$Type): integer
public "finishUsingItem"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type): $ItemStack
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getUseAnimation"(arg0: $ItemStack$Type): $UseAnim
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SonicShooter$Type = ($SonicShooter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SonicShooter_ = $SonicShooter$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ConfigTypeEntry, $ConfigTypeEntry$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigTypeEntry"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ConfigDataProvider$ConfigEntry, $ConfigDataProvider$ConfigEntry$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$ConfigEntry"

export class $ConfigDataProvider$Collector extends $Record {

constructor(map: $Map$Type<(string), ($ConfigDataProvider$ConfigEntry$Type<(any)>)>)

public "add"<T extends $BaseConfig>(arg0: $ConfigTypeEntry$Type<(T)>, arg1: $ResourceLocation$Type, arg2: T): void
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "map"(): $Map<(string), ($ConfigDataProvider$ConfigEntry<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigDataProvider$Collector$Type = ($ConfigDataProvider$Collector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigDataProvider$Collector_ = $ConfigDataProvider$Collector$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/attribute/$AttributeScreen" {
import {$AttributeEntry, $AttributeEntry$Type} from "packages/dev/xkmc/l2tabs/tabs/contents/$AttributeEntry"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BaseTextScreen, $BaseTextScreen$Type} from "packages/dev/xkmc/l2tabs/tabs/contents/$BaseTextScreen"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Lazy, $Lazy$Type} from "packages/net/minecraftforge/common/util/$Lazy"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ITabScreen, $ITabScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$ITabScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"

export class $AttributeScreen extends $BaseTextScreen implements $ITabScreen {
static readonly "ATTRIBUTES": $Lazy<($List<($AttributeEntry)>)>
 "imageWidth": integer
 "imageHeight": integer
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $Component$Type)

public "screenHeight"(): integer
public "screenWidth"(): integer
public "m_7856_"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getAttributeDetail"(arg0: $Attribute$Type): $List<($Component)>
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
public "asScreen"(): $Screen
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeScreen$Type = ($AttributeScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeScreen_ = $AttributeScreen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/network/$SetFilterToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SetFilterToServer$Type, $SetFilterToServer$Type$Type} from "packages/dev/xkmc/l2artifacts/network/$SetFilterToServer$Type"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"

export class $SetFilterToServer extends $SerialPacketBase {

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $ArtifactChestToken$Type, arg1: $SetFilterToServer$Type$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetFilterToServer$Type = ($SetFilterToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetFilterToServer_ = $SetFilterToServer$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/damage/$DamageState" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TreeSet, $TreeSet$Type} from "packages/java/util/$TreeSet"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export interface $DamageState {

 "getId"(): $ResourceLocation
 "removeTags"(arg0: $Consumer$Type<($TagKey$Type<($DamageType$Type)>)>): void
 "gatherTags"(arg0: $Consumer$Type<($TagKey$Type<($DamageType$Type)>)>): void
 "overrides"(arg0: $DamageState$Type): boolean
}

export namespace $DamageState {
function newSet(): $TreeSet<($DamageState)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageState$Type = ($DamageState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageState_ = $DamageState$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/botania/$BotConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $BotConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BotConfigGen$Type = ($BotConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BotConfigGen_ = $BotConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfLust" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CurseOfLust extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getExtraLevel"(): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
get "extraLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseOfLust$Type = ($CurseOfLust);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseOfLust_ = $CurseOfLust$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/force/$IceEffect" {
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$IconOverlayEffect, $IconOverlayEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$IconOverlayEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $IceEffect extends $InherentEffect implements $ForceEffect, $IconOverlayEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
public "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IceEffect$Type = ($IceEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IceEffect_ = $IceEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/filter/$ItemConfigMenuProvider" {
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GolemConfigEntry, $GolemConfigEntry$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$IMenuPvd, $IMenuPvd$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ItemConfigMenuProvider extends $Record implements $IMenuPvd {

constructor(id: $UUID$Type, color: integer, editor: $GolemConfigEditor$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $UUID
public "editor"(): $GolemConfigEditor
public "color"(): integer
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public static "fromPacket"(arg0: $ServerLevel$Type, arg1: $GolemConfigEntry$Type): $ItemConfigMenuProvider
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemConfigMenuProvider$Type = ($ItemConfigMenuProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemConfigMenuProvider_ = $ItemConfigMenuProvider$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/base/$ScreenBook" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ScreenBook extends $Item {
 "sup": $Supplier<($Supplier<(any)>)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($Supplier$Type<(any)>)>)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenBook$Type = ($ScreenBook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenBook_ = $ScreenBook$Type;
}}
declare module "packages/dev/xkmc/l2tabs/tabs/core/$TabToken$TabFactory" {
import {$BaseTab, $BaseTab$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$BaseTab"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TabToken, $TabToken$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabToken"
import {$TabManager, $TabManager$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabManager"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $TabToken$TabFactory<T extends $BaseTab<(T)>> {

 "create"(arg0: $TabToken$Type<(T)>, arg1: $TabManager$Type, arg2: $ItemStack$Type, arg3: $Component$Type): T

(arg0: $TabToken$Type<(T)>, arg1: $TabManager$Type, arg2: $ItemStack$Type, arg3: $Component$Type): T
}

export namespace $TabToken$TabFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TabToken$TabFactory$Type<T> = ($TabToken$TabFactory<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TabToken$TabFactory_<T> = $TabToken$TabFactory$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/events/$ArtifactSel" {
import {$ArtifactSwapData, $ArtifactSwapData$Type} from "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapData"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Pair, $Pair$Type} from "packages/it/unimi/dsi/fastutil/$Pair"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SetSelectedToServer, $SetSelectedToServer$Type} from "packages/dev/xkmc/l2itemselector/select/$SetSelectedToServer"
import {$L2Keys, $L2Keys$Type} from "packages/dev/xkmc/l2itemselector/init/data/$L2Keys"
import {$ISelectionListener, $ISelectionListener$Type} from "packages/dev/xkmc/l2itemselector/select/$ISelectionListener"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ArtifactSel implements $ISelectionListener {
static readonly "INSTANCE": $ArtifactSel
static readonly "UP": integer
static readonly "DOWN": integer
static readonly "SWAP": integer

constructor()

public "getID"(): $ResourceLocation
public static "getData"(arg0: $Player$Type): $Pair<($ItemStack), ($ArtifactSwapData)>
public "handleClientScroll"(arg0: integer, arg1: $Player$Type): boolean
public "isClientActive"(arg0: $Player$Type): boolean
public "handleClientKey"(arg0: $L2Keys$Type, arg1: $Player$Type): void
public "handleClientNumericKey"(arg0: integer, arg1: $BooleanSupplier$Type): boolean
public "handleServerSetSelection"(arg0: $SetSelectedToServer$Type, arg1: $Player$Type): void
public "scrollBypassShift"(): boolean
public "toServer"(arg0: integer): void
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSel$Type = ($ArtifactSel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSel_ = $ArtifactSel$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/ingredients/$MobEffectIngredient" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Ingredient$Value, $Ingredient$Value$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient$Value"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$IntList, $IntList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntList"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$BaseIngredient, $BaseIngredient$Type} from "packages/dev/xkmc/l2library/serial/ingredients/$BaseIngredient"
import {$BaseIngredient$Serializer, $BaseIngredient$Serializer$Type} from "packages/dev/xkmc/l2library/serial/ingredients/$BaseIngredient$Serializer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $MobEffectIngredient extends $BaseIngredient<($MobEffectIngredient)> {
static readonly "INSTANCE": $BaseIngredient$Serializer<($MobEffectIngredient)>
 "item": $Item
 "effect": $MobEffect
 "min_level": integer
 "min_time": integer
static readonly "EMPTY": $Ingredient
 "values": ($Ingredient$Value)[]
 "itemStacks": ($ItemStack)[]
 "stackingIds": $IntList

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $Item$Type, arg1: $MobEffect$Type, arg2: integer, arg3: integer)

public "test"(arg0: $ItemStack$Type): boolean
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<(T)>
public static "isEqual"<T>(arg0: any): $Predicate<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobEffectIngredient$Type = ($MobEffectIngredient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobEffectIngredient_ = $MobEffectIngredient$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v1/$SaintRestoration" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$PlayerOnlySetEffect, $PlayerOnlySetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$PlayerOnlySetEffect"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"

export class $SaintRestoration extends $PlayerOnlySetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SaintRestoration$Type = ($SaintRestoration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SaintRestoration_ = $SaintRestoration$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactExtractor" {
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$IArtifactFeature, $IArtifactFeature$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature"

export interface $IArtifactExtractor<T extends $IArtifactFeature> {

 "get"(arg0: $BaseArtifact$Type): T

(arg0: $BaseArtifact$Type): T
}

export namespace $IArtifactExtractor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IArtifactExtractor$Type<T> = ($IArtifactExtractor<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IArtifactExtractor_<T> = $IArtifactExtractor$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v2/$FrozeSlowEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $FrozeSlowEffect extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type, arg2: $LinearFuncEntry$Type)

public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrozeSlowEffect$Type = ($FrozeSlowEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrozeSlowEffect_ = $FrozeSlowEffect$Type;
}}
declare module "packages/dev/xkmc/l2library/base/tile/$BaseBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BaseBlockEntity extends $BlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "sync"(): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
public "getUpdateTag"(): $CompoundTag
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseBlockEntity$Type = ($BaseBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseBlockEntity_ = $BaseBlockEntity$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/common/$CompatManager" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$ModDispatch, $ModDispatch$Type} from "packages/dev/xkmc/modulargolems/compat/materials/common/$ModDispatch"
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$GatherDataEvent, $GatherDataEvent$Type} from "packages/net/minecraftforge/data/event/$GatherDataEvent"
import {$List, $List$Type} from "packages/java/util/$List"

export class $CompatManager {
static readonly "LIST": $List<($ModDispatch)>

constructor()

public static "register"(): void
public static "lateRegister"(): void
public static "gatherData"(arg0: $GatherDataEvent$Type): void
public static "dispatchClientSetup"(): void
public static "dispatchGenLang"(arg0: $RegistrateLangProvider$Type): void
public static "dispatchGenRecipe"(arg0: $RegistrateRecipeProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatManager$Type = ($CompatManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatManager_ = $CompatManager$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/logic/$MobDifficultyCollector" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$DifficultyLevel, $DifficultyLevel$Type} from "packages/dev/xkmc/l2hostility/content/logic/$DifficultyLevel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$WorldDifficultyConfig$DifficultyConfig, $WorldDifficultyConfig$DifficultyConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$WorldDifficultyConfig$DifficultyConfig"

export class $MobDifficultyCollector {
 "min": integer
 "base": integer
 "count": integer
 "difficulty": integer
 "cap": integer
 "traitCap": integer
 "scale": double
 "varSq": double
 "apply_chance": double
 "trait_chance": double
 "trait_cost": double
 "finalFactor": double

constructor()

public "getBase"(): integer
public "getDifficulty"(arg0: $RandomSource$Type): integer
public static "noTrait"(arg0: integer): $MobDifficultyCollector
public "isFullDrop"(): boolean
public "setTraitCap"(arg0: integer): void
public "traitCostFactor"(arg0: double): void
public "setFullDrop"(): void
public "acceptBonus"(arg0: $DifficultyLevel$Type): void
public "setCap"(arg0: integer): void
public "acceptBonusFactor"(arg0: double): void
public "setFullChance"(): void
public "setPlayer"(arg0: $Player$Type): void
public "acceptConfig"(arg0: $WorldDifficultyConfig$DifficultyConfig$Type): void
public "delegateTrait"(): void
public "acceptBonusLevel"(arg0: integer): void
public "trait_chance"(arg0: integer): double
public "apply_chance"(): double
public "isFullChance"(): boolean
public "getMaxTraitLevel"(): integer
public "hasAdvancement"(arg0: $ResourceLocation$Type): boolean
get "base"(): integer
get "fullDrop"(): boolean
set "traitCap"(value: integer)
set "cap"(value: integer)
set "player"(value: $Player$Type)
get "fullChance"(): boolean
get "maxTraitLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobDifficultyCollector$Type = ($MobDifficultyCollector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobDifficultyCollector_ = $MobDifficultyCollector$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/upgrades/$Upgrade$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Upgrade$Type extends $Enum<($Upgrade$Type)> {
static readonly "BOOST_MAIN_STAT": $Upgrade$Type
static readonly "BOOST_SUB_STAT": $Upgrade$Type
static readonly "SET_SUB_STAT": $Upgrade$Type


public static "values"(): ($Upgrade$Type)[]
public static "valueOf"(arg0: string): $Upgrade$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Upgrade$Type$Type = (("set_sub_stat") | ("boost_sub_stat") | ("boost_main_stat")) | ($Upgrade$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Upgrade$Type_ = $Upgrade$Type$Type;
}}
declare module "packages/dev/xkmc/l2complements/mixin/$LevelAccessor" {
import {$LevelEntityGetter, $LevelEntityGetter$Type} from "packages/net/minecraft/world/level/entity/$LevelEntityGetter"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $LevelAccessor {

 "callGetEntities"(): $LevelEntityGetter<($Entity)>

(): $LevelEntityGetter<($Entity)>
}

export namespace $LevelAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LevelAccessor$Type = ($LevelAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LevelAccessor_ = $LevelAccessor$Type;
}}
declare module "packages/dev/xkmc/l2library/init/$L2LibraryConfig$Common" {
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"

export class $L2LibraryConfig$Common {
readonly "restoreFullHealthOnRespawn": $ForgeConfigSpec$BooleanValue


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2LibraryConfig$Common$Type = ($L2LibraryConfig$Common);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2LibraryConfig$Common_ = $L2LibraryConfig$Common$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$WorldDifficultyConfig" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$WorldDifficultyConfig$DifficultyConfig, $WorldDifficultyConfig$DifficultyConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$WorldDifficultyConfig$DifficultyConfig"

export class $WorldDifficultyConfig extends $BaseConfig {
readonly "levelMap": $HashMap<($ResourceLocation), ($WorldDifficultyConfig$DifficultyConfig)>
readonly "biomeMap": $HashMap<($ResourceLocation), ($WorldDifficultyConfig$DifficultyConfig)>

constructor()

public static "defaultLevel"(): $WorldDifficultyConfig$DifficultyConfig
public "putDim"(arg0: $ResourceKey$Type<($Level$Type)>, arg1: integer, arg2: integer, arg3: double, arg4: double): $WorldDifficultyConfig
public "putBiome"(arg0: integer, arg1: integer, arg2: double, arg3: double, ...arg4: ($ResourceKey$Type<($Biome$Type)>)[]): $WorldDifficultyConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldDifficultyConfig$Type = ($WorldDifficultyConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldDifficultyConfig_ = $WorldDifficultyConfig$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$LHConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $LHConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHConfigGen$Type = ($LHConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHConfigGen_ = $LHConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/screen/track/$TrackedEntryType" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$LayerPopType, $LayerPopType$Type} from "packages/dev/xkmc/l2screentracker/screen/base/$LayerPopType"
import {$TrackedEntryData, $TrackedEntryData$Type} from "packages/dev/xkmc/l2screentracker/screen/track/$TrackedEntryData"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"

export class $TrackedEntryType<T extends ($Record) & ($TrackedEntryData<(T)>)> extends $NamedEntry<($TrackedEntryType<(any)>)> {

constructor()

public "restoreMenuNotifyClient"(arg0: $ServerPlayer$Type, arg1: T, arg2: $Component$Type): $LayerPopType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrackedEntryType$Type<T> = ($TrackedEntryType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrackedEntryType_<T> = $TrackedEntryType$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/armors/$DurableArmorEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $DurableArmorEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "getCraftableLevels"(): $Set<(integer)>
public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "craftableLevels"(): $Set<(integer)>
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DurableArmorEnchantment$Type = ($DurableArmorEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DurableArmorEnchantment_ = $DurableArmorEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/weapon/$SharpBladeEnchantment" {
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$BattleEnchantment, $BattleEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$BattleEnchantment"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SharpBladeEnchantment extends $BattleEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "doPostAttack"(arg0: $LivingEntity$Type, arg1: $Entity$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SharpBladeEnchantment$Type = ($SharpBladeEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SharpBladeEnchantment_ = $SharpBladeEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/events/$ArtifactEffectEvents" {
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$ArtifactEffectEvents$EventConsumer, $ArtifactEffectEvents$EventConsumer$Type} from "packages/dev/xkmc/l2artifacts/events/$ArtifactEffectEvents$EventConsumer"
import {$ArtifactEffectEvents$EventPredicate, $ArtifactEffectEvents$EventPredicate$Type} from "packages/dev/xkmc/l2artifacts/events/$ArtifactEffectEvents$EventPredicate"
import {$ShieldBlockEvent, $ShieldBlockEvent$Type} from "packages/net/minecraftforge/event/entity/living/$ShieldBlockEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ArtifactEffectEvents {

constructor()

public static "postEvent"<T>(arg0: $LivingEntity$Type, arg1: T, arg2: $ArtifactEffectEvents$EventPredicate$Type<(T)>): boolean
public static "postEvent"<T>(arg0: $LivingEntity$Type, arg1: T, arg2: $ArtifactEffectEvents$EventConsumer$Type<(T)>): void
public static "onShieldBlock"(arg0: $ShieldBlockEvent$Type): void
public static "onKillEvent"(arg0: $LivingDeathEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactEffectEvents$Type = ($ArtifactEffectEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactEffectEvents_ = $ArtifactEffectEvents$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/materials/$ILWToolMats" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$IMatToolType, $IMatToolType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatToolType"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ItemModelBuilder, $ItemModelBuilder$Type} from "packages/net/minecraftforge/client/model/generators/$ItemModelBuilder"
import {$ShapedRecipeBuilder, $ShapedRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$ShapedRecipeBuilder"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export interface $ILWToolMats {

 "name"(): string
 "type"(): $IMatToolType
 "prefix"(): string
 "getProvider"(arg0: $RegistrateRecipeProvider$Type, ...arg1: ($ICondition$Type)[]): $Consumer<($FinishedRecipe)>
 "getBlock"(): $Item
 "isOptional"(): boolean
 "getChain"(): $Item
 "getIngot"(): $Item
 "getTool"(arg0: $LWToolTypes$Type): $Item
 "is3D"(arg0: $LWToolTypes$Type): boolean
 "saveRecipe"(arg0: $ShapedRecipeBuilder$Type, arg1: $RegistrateRecipeProvider$Type, arg2: $LWToolTypes$Type, arg3: $ResourceLocation$Type): void
 "fireRes"(): boolean
 "getBaseUpgrade"(): $ILWToolMats
 "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type): void
 "emissive"(): boolean
 "englishName"(): string
 "hasTool"(arg0: $LWToolTypes$Type): boolean
 "getStick"(): $Item
 "getToolEnchanted"(arg0: $LWToolTypes$Type): $ItemStack
 "model"(arg0: $LWToolTypes$Type, arg1: $ItemModelBuilder$Type): $ItemModelBuilder
}

export namespace $ILWToolMats {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILWToolMats$Type = ($ILWToolMats);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILWToolMats_ = $ILWToolMats$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/common/$IHeadedModel" {
import {$HeadedModel, $HeadedModel$Type} from "packages/net/minecraft/client/model/$HeadedModel"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"

export interface $IHeadedModel extends $HeadedModel {

 "translateToHead"(arg0: $PoseStack$Type): void
 "getHead"(): $ModelPart
}

export namespace $IHeadedModel {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IHeadedModel$Type = ($IHeadedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IHeadedModel_ = $IHeadedModel$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v2/$WrathEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $WrathEffect extends $SetEffect {
readonly "ids": integer

constructor(arg0: $Predicate$Type<($LivingEntity$Type)>, arg1: $LinearFuncEntry$Type, arg2: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrathEffect$Type = ($WrathEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrathEffect_ = $WrathEffect$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$DrawerHandler" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$IDrawerHandler, $IDrawerHandler$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$IDrawerHandler"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$DrawerBlockEntity, $DrawerBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$DrawerBlockEntity"

export class $DrawerHandler implements $IDrawerHandler {
 "item": $Item
 "count": integer
 "config": $CompoundTag

constructor(arg0: $DrawerBlockEntity$Type)

public "getSlots"(): integer
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "slots"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerHandler$Type = ($DrawerHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerHandler_ = $DrawerHandler$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$DoubleHandItem" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $DoubleHandItem {

 "disableOffHand"(arg0: $Player$Type, arg1: $ItemStack$Type): boolean
}

export namespace $DoubleHandItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleHandItem$Type = ($DoubleHandItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleHandItem_ = $DoubleHandItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/registry/$OpenConfigMenuToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$OpenConfigMenuToServer$Type, $OpenConfigMenuToServer$Type$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$OpenConfigMenuToServer$Type"

export class $OpenConfigMenuToServer extends $SerialPacketBase {
 "type": $OpenConfigMenuToServer$Type
 "uuid": $UUID
 "color": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $UUID$Type, arg1: integer, arg2: $OpenConfigMenuToServer$Type$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenConfigMenuToServer$Type = ($OpenConfigMenuToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenConfigMenuToServer_ = $OpenConfigMenuToServer$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabGroup" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"

export class $GolemTabGroup<G extends $GolemTabGroup<(G)>> {

constructor(arg0: $List$Type<($GolemTabToken$Type<(G), (any)>)>)

public "getList"(): $List<($GolemTabToken<(G), (any)>)>
get "list"(): $List<($GolemTabToken<(G), (any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTabGroup$Type<G> = ($GolemTabGroup<(G)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTabGroup_<G> = $GolemTabGroup$Type<(G)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/common/$AbstractScrollerScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IFilterScreen, $IFilterScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$IFilterScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractScrollerMenu, $AbstractScrollerMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$AbstractScrollerMenu"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ScrollerScreen, $ScrollerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/scroller/$ScrollerScreen"

export class $AbstractScrollerScreen<T extends $AbstractScrollerMenu<(T)>> extends $BaseContainerScreen<(T)> implements $ScrollerScreen, $IFilterScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: T, arg1: $Inventory$Type, arg2: $Component$Type, arg3: $FilterTabToken$Type<(any)>)

public "screenHeight"(): integer
public "screenWidth"(): integer
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "scrollTo"(arg0: integer): void
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "asScreen"(): $Screen
public "onSwitch"(): void
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractScrollerScreen$Type<T> = ($AbstractScrollerScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractScrollerScreen_<T> = $AbstractScrollerScreen$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/init/loot/$EnvyLootModifier" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$LootModifier, $LootModifier$Type} from "packages/net/minecraftforge/common/loot/$LootModifier"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $EnvyLootModifier extends $LootModifier {
static readonly "CODEC": $Codec<($EnvyLootModifier)>

constructor(...arg0: ($LootItemCondition$Type)[])

public "getConditions"(): ($LootItemCondition)[]
public "codec"(): $Codec<($EnvyLootModifier)>
public static "getJson"<U>(arg0: $Dynamic$Type<(any)>): $JsonElement
get "conditions"(): ($LootItemCondition)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnvyLootModifier$Type = ($EnvyLootModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnvyLootModifier_ = $EnvyLootModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/curse/$CurseOfSloth" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$PlayerDifficulty, $PlayerDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/player/$PlayerDifficulty"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CurseOfSloth extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getLootFactor"(arg0: $ItemStack$Type, arg1: $PlayerDifficulty$Type, arg2: $MobTraitCap$Type): double
public "getGrowFactor"(arg0: $ItemStack$Type, arg1: $PlayerDifficulty$Type, arg2: $MobTraitCap$Type): double
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseOfSloth$Type = ($CurseOfSloth);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseOfSloth_ = $CurseOfSloth$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/wand/$RetrievalWandItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$GolemInteractItem, $GolemInteractItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$GolemInteractItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BaseWandItem, $BaseWandItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$BaseWandItem"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RetrievalWandItem extends $BaseWandItem implements $GolemInteractItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $ItemEntry$Type<(any)>)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RetrievalWandItem$Type = ($RetrievalWandItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RetrievalWandItem_ = $RetrievalWandItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$LongShooterPersistentEffect" {
import {$LongShooterPersistentData, $LongShooterPersistentData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$LongShooterPersistentData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AbstractConditionalAttributeSetEffect, $AbstractConditionalAttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AbstractConditionalAttributeSetEffect"

export class $LongShooterPersistentEffect extends $AbstractConditionalAttributeSetEffect<($LongShooterPersistentData)> {
readonly "ids": integer

constructor(...arg0: ($AttrSetEntry$Type)[])

public "tick"(arg0: $Player$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getData"(): $LongShooterPersistentData
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
get "data"(): $LongShooterPersistentData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongShooterPersistentEffect$Type = ($LongShooterPersistentEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongShooterPersistentEffect_ = $LongShooterPersistentEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/golem/$NBTAnalytic" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $NBTAnalytic {

constructor()

public static "analyze"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTAnalytic$Type = ($NBTAnalytic);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTAnalytic_ = $NBTAnalytic$Type;
}}
declare module "packages/dev/xkmc/l2tabs/tabs/core/$BaseTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FloatingButton, $FloatingButton$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$FloatingButton"
import {$TabToken, $TabToken$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TabManager, $TabManager$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $BaseTab<T extends $BaseTab<(T)>> extends $FloatingButton {
readonly "stack": $ItemStack
readonly "token": $TabToken<(T)>
readonly "manager": $TabManager
 "page": integer
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $TabToken$Type<(T)>, arg1: $TabManager$Type, arg2: $ItemStack$Type, arg3: $Component$Type)

public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "onTabClicked"(): void
public "renderBackground"(arg0: $GuiGraphics$Type): void
public "onTooltip"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseTab$Type<T> = ($BaseTab<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseTab_<T> = $BaseTab$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2library/base/menu/data/$DoubleDataSlot" {
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"

export class $DoubleDataSlot {

constructor(arg0: $AbstractContainerMenu$Type)

public "get"(): double
public "set"(arg0: double): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleDataSlot$Type = ($DoubleDataSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleDataSlot_ = $DoubleDataSlot$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/config/$GolemPartConfig$HolderBuilder" {
import {$GolemStatType, $GolemStatType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemStatType"
import {$GolemPartConfig, $GolemPartConfig$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemPartConfig"

export class $GolemPartConfig$HolderBuilder {


public "end"(): $GolemPartConfig
public "addFilter"(arg0: $GolemStatType$Type, arg1: double): $GolemPartConfig$HolderBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemPartConfig$HolderBuilder$Type = ($GolemPartConfig$HolderBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemPartConfig$HolderBuilder_ = $GolemPartConfig$HolderBuilder$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/mult/$OnClickBlockMethod" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MultipleBlockMethod, $MultipleBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$MultipleBlockMethod"

export interface $OnClickBlockMethod extends $MultipleBlockMethod {

 "onClick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult

(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
}

export namespace $OnClickBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OnClickBlockMethod$Type = ($OnClickBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OnClickBlockMethod_ = $OnClickBlockMethod$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/special/$PotionMetaModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"

export class $PotionMetaModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "addSlot"(arg0: $List$Type<($UpgradeItem$Type)>, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotionMetaModifier$Type = ($PotionMetaModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotionMetaModifier_ = $PotionMetaModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/util/math/$Frac" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"

export class $Frac implements $Comparable<($Frac)> {
 "num": long
 "den": long
 "val": double
 "isFrac": boolean

constructor(arg0: long, arg1: long)

public "getVal"(): double
public "add"(arg0: $Frac$Type): void
public "equals"(arg0: any): boolean
public "toString"(): string
public "compareTo"(arg0: $Frac$Type): integer
public static "mult"(arg0: $Frac$Type, arg1: $Frac$Type): $Frac
public "times"(arg0: $Frac$Type): void
public "revert"(): $Frac
get "val"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Frac$Type = ($Frac);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Frac_ = $Frac$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/merged/$EnderSwitch" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BackpackModelItem, $BackpackModelItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BackpackModelItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$MultiSwitch, $MultiSwitch$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/merged/$MultiSwitch"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EnderSwitch extends $MultiSwitch implements $BackpackModelItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "open"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type): void
public "getModelTexture"(arg0: $ItemStack$Type): $ResourceLocation
public "shouldRender"(): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderSwitch$Type = ($EnderSwitch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderSwitch_ = $EnderSwitch$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/init/data/$LWAttributeConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $LWAttributeConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LWAttributeConfigGen$Type = ($LWAttributeConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LWAttributeConfigGen_ = $LWAttributeConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/network/$ChooseArtifactToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"

export class $ChooseArtifactToServer extends $SerialPacketBase {
 "set": integer
 "slot": integer
 "rank": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: integer, arg1: integer, arg2: integer)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChooseArtifactToServer$Type = ($ChooseArtifactToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChooseArtifactToServer_ = $ChooseArtifactToServer$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v1/$DamoclesSword" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $DamoclesSword extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "tick"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: boolean): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamoclesSword$Type = ($DamoclesSword);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamoclesSword_ = $DamoclesSword$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$PathConfig" {
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathRecordCard$Pos, $PathRecordCard$Pos$Type} from "packages/dev/xkmc/modulargolems/content/item/card/$PathRecordCard$Pos"

export class $PathConfig {

constructor()

public static "getPath"(arg0: $AbstractGolemEntity$Type<(any), (any)>): $List<($PathRecordCard$Pos)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathConfig$Type = ($PathConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathConfig_ = $PathConfig$Type;
}}
declare module "packages/dev/xkmc/l2library/init/explosion/$ExplosionHandler" {
import {$BaseExplosion, $BaseExplosion$Type} from "packages/dev/xkmc/l2library/init/explosion/$BaseExplosion"

export class $ExplosionHandler {

constructor()

public static "explode"(arg0: $BaseExplosion$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExplosionHandler$Type = ($ExplosionHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExplosionHandler_ = $ExplosionHandler$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/player/$PlayerCapToClient$Action" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$PlayerCapabilityHolder, $PlayerCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder"
import {$PlayerCapToClient, $PlayerCapToClient$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapToClient"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $PlayerCapToClient$Action extends $Enum<($PlayerCapToClient$Action)> {
static readonly "ALL": $PlayerCapToClient$Action
static readonly "CLONE": $PlayerCapToClient$Action
static readonly "TRACK": $PlayerCapToClient$Action
readonly "server": $Function<(any), ($CompoundTag)>
readonly "client": $BiConsumer<($PlayerCapabilityHolder<(any)>), ($PlayerCapToClient)>


public static "values"(): ($PlayerCapToClient$Action)[]
public static "valueOf"(arg0: string): $PlayerCapToClient$Action
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerCapToClient$Action$Type = (("all") | ("clone") | ("track")) | ($PlayerCapToClient$Action);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerCapToClient$Action_ = $PlayerCapToClient$Action$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$SlimyBuffer" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $SlimyBuffer extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "playerReduceDamage"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $DamageSource$Type, arg4: $AttackCache$Type): void
public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlimyBuffer$Type = ($SlimyBuffer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlimyBuffer_ = $SlimyBuffer$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/tool/$DestroyTweakerTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TweakerTool, $TweakerTool$Type} from "packages/dev/xkmc/l2backpack/content/tool/$TweakerTool"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DestroyTweakerTool extends $TweakerTool {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "message"(arg0: $PickupConfig$Type): $Component
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "click"(arg0: $ItemStack$Type): void
public "click"(arg0: $PickupConfig$Type): $PickupConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DestroyTweakerTool$Type = ($DestroyTweakerTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DestroyTweakerTool_ = $DestroyTweakerTool$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$SimpleCriterionTrigger, $SimpleCriterionTrigger$Type} from "packages/net/minecraft/advancements/critereon/$SimpleCriterionTrigger"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $BaseCriterion<T extends $BaseCriterionInstance<(T), (R)>, R extends $BaseCriterion<(T), (R)>> extends $SimpleCriterionTrigger<(T)> {

constructor(arg0: $ResourceLocation$Type, arg1: $BiFunction$Type<($ResourceLocation$Type), ($ContextAwarePredicate$Type), (T)>, arg2: $Class$Type<(T)>)

public "getId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseCriterion$Type<T, R> = ($BaseCriterion<(T), (R)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseCriterion_<T, R> = $BaseCriterion$Type<(T), (R)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/client/armor/$GolemModelPath" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GolemModelPath extends $Record {
static readonly "MAP": $Map<($ResourceLocation), ($GolemModelPath)>

constructor(models: $ModelLayerLocation$Type, paths: $List$Type<($List$Type<(string)>)>)

public static "get"(arg0: $ResourceLocation$Type): $GolemModelPath
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "register"(arg0: $ResourceLocation$Type, arg1: $GolemModelPath$Type): $GolemModelPath
public "paths"(): $List<($List<(string)>)>
public "models"(): $ModelLayerLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemModelPath$Type = ($GolemModelPath);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemModelPath_ = $GolemModelPath$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$BaseRecipe, $BaseRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BurntRecipe$Inv, $BurntRecipe$Inv$Type} from "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipe$Inv"

export class $BurntRecipe extends $BaseRecipe<($BurntRecipe), ($BurntRecipe), ($BurntRecipe$Inv)> {
 "ingredient": $Ingredient
 "result": $ItemStack
 "chance": integer
 "id": $ResourceLocation

constructor(arg0: $ResourceLocation$Type)

public "matches"(arg0: $BurntRecipe$Inv$Type, arg1: $Level$Type): boolean
public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "assemble"(arg0: $BurntRecipe$Inv$Type, arg1: $RegistryAccess$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BurntRecipe$Type = ($BurntRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BurntRecipe_ = $BurntRecipe$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/base/$TargetBonusModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TargetBonusModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $Predicate$Type<($LivingEntity$Type)>)

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onHurtTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetBonusModifier$Type = ($TargetBonusModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetBonusModifier_ = $TargetBonusModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/scroller/$ScrollerScreen" {
import {$ScrollerMenu, $ScrollerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/scroller/$ScrollerMenu"

export interface $ScrollerScreen {

 "getMenu"(): $ScrollerMenu
 "scrollTo"(arg0: integer): void
 "getGuiLeft"(): integer
 "getGuiTop"(): integer
}

export namespace $ScrollerScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollerScreen$Type = ($ScrollerScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollerScreen_ = $ScrollerScreen$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/$ArtifactConfig$Client" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ArtifactConfig$Client {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactConfig$Client$Type = ($ArtifactConfig$Client);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactConfig$Client_ = $ArtifactConfig$Client$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$SlotClickTrigger" {
import {$SlotClickTrigger$Ins, $SlotClickTrigger$Ins$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$SlotClickTrigger$Ins"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$ItemSource, $ItemSource$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$ItemSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SlotClickTrigger extends $BaseCriterion<($SlotClickTrigger$Ins), ($SlotClickTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $ItemSource$Type<(any)>, arg2: boolean): void
public static "fromKeyBind"(): $SlotClickTrigger$Ins
public static "fromBackpack"(arg0: $ItemSource$Type<(any)>): $SlotClickTrigger$Ins
public static "fromGUI"(): $SlotClickTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotClickTrigger$Type = ($SlotClickTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotClickTrigger_ = $SlotClickTrigger$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericShovelItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ShovelItem, $ShovelItem$Type} from "packages/net/minecraft/world/item/$ShovelItem"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$GenericTieredItem, $GenericTieredItem$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericTieredItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GenericShovelItem extends $ShovelItem implements $GenericTieredItem {
static "FLATTENABLES": $Map<($Block), ($BlockState)>
 "speed": float
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getExtraConfig"(): $ExtraToolConfig
public "getSweepHitBox"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $Entity$Type): $AABB
public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type): float
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "canBeDepleted"(): boolean
public "mineBlock"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockState$Type, arg3: $BlockPos$Type, arg4: $LivingEntity$Type): boolean
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
get "extraConfig"(): $ExtraToolConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericShovelItem$Type = ($GenericShovelItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericShovelItem_ = $GenericShovelItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/registrate/$LCEnchantments" {
import {$IceBladeEnchantment, $IceBladeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/weapon/$IceBladeEnchantment"
import {$IceThornEnchantment, $IceThornEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/armors/$IceThornEnchantment"
import {$LifeMendingEnchantment, $LifeMendingEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/special/$LifeMendingEnchantment"
import {$DiggerAndSwordEnchantment, $DiggerAndSwordEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$DiggerAndSwordEnchantment"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$CurseBladeEnchantment, $CurseBladeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/weapon/$CurseBladeEnchantment"
import {$RangeDiggingEnchantment, $RangeDiggingEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$RangeDiggingEnchantment"
import {$ImmuneEnchantment, $ImmuneEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$ImmuneEnchantment"
import {$DurableArmorEnchantment, $DurableArmorEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/armors/$DurableArmorEnchantment"
import {$LegendaryEnchantment, $LegendaryEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/special/$LegendaryEnchantment"
import {$WindSweepEnchantment, $WindSweepEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/weapon/$WindSweepEnchantment"
import {$StableBodyEnchantment, $StableBodyEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/armors/$StableBodyEnchantment"
import {$SoulBindingEnchantment, $SoulBindingEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/special/$SoulBindingEnchantment"
import {$BannableEnchantment, $BannableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$BannableEnchantment"
import {$SoulFlameBladeEnchantment, $SoulFlameBladeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/weapon/$SoulFlameBladeEnchantment"
import {$SharpBladeEnchantment, $SharpBladeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/weapon/$SharpBladeEnchantment"
import {$LifeSyncEnchantment, $LifeSyncEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/special/$LifeSyncEnchantment"
import {$VoidTouchEnchantment, $VoidTouchEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/weapon/$VoidTouchEnchantment"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$SingleLevelEnchantment, $SingleLevelEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$SingleLevelEnchantment"
import {$FlameThornEnchantment, $FlameThornEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/armors/$FlameThornEnchantment"

export class $LCEnchantments {
static readonly "ALL": $EnchantmentCategory
static readonly "ENCH_PROJECTILE": $RegistryEntry<($BannableEnchantment)>
static readonly "ENCH_FIRE": $RegistryEntry<($BannableEnchantment)>
static readonly "ENCH_ENVIRONMENT": $RegistryEntry<($BannableEnchantment)>
static readonly "ENCH_EXPLOSION": $RegistryEntry<($BannableEnchantment)>
static readonly "ENCH_MAGIC": $RegistryEntry<($BannableEnchantment)>
static readonly "ENCH_INVINCIBLE": $RegistryEntry<($BannableEnchantment)>
static readonly "ENCH_MATES": $RegistryEntry<($ImmuneEnchantment)>
static readonly "SHULKER_ARMOR": $RegistryEntry<($SingleLevelEnchantment)>
static readonly "ENDER_MASK": $RegistryEntry<($SingleLevelEnchantment)>
static readonly "SHINNY": $RegistryEntry<($SingleLevelEnchantment)>
static readonly "SNOW_WALKER": $RegistryEntry<($SingleLevelEnchantment)>
static readonly "DAMPENED": $RegistryEntry<($SingleLevelEnchantment)>
static readonly "SAFEGUARD": $RegistryEntry<($SingleLevelEnchantment)>
static readonly "ENDER": $RegistryEntry<($DiggerAndSwordEnchantment)>
static readonly "SMELT": $RegistryEntry<($DiggerAndSwordEnchantment)>
static readonly "STABLE_BODY": $RegistryEntry<($StableBodyEnchantment)>
static readonly "LIFE_SYNC": $RegistryEntry<($LifeSyncEnchantment)>
static readonly "LIFE_MENDING": $RegistryEntry<($LifeMendingEnchantment)>
static readonly "ETERNAL": $RegistryEntry<($LegendaryEnchantment)>
static readonly "HARDENED": $RegistryEntry<($LegendaryEnchantment)>
static readonly "WIND_SWEEP": $RegistryEntry<($WindSweepEnchantment)>
static readonly "SOUL_BOUND": $RegistryEntry<($SoulBindingEnchantment)>
static readonly "ICE_BLADE": $RegistryEntry<($IceBladeEnchantment)>
static readonly "FLAME_BLADE": $RegistryEntry<($SoulFlameBladeEnchantment)>
static readonly "CURSE_BLADE": $RegistryEntry<($CurseBladeEnchantment)>
static readonly "SHARP_BLADE": $RegistryEntry<($SharpBladeEnchantment)>
static readonly "ICE_THORN": $RegistryEntry<($IceThornEnchantment)>
static readonly "FLAME_THORN": $RegistryEntry<($FlameThornEnchantment)>
static readonly "DURABLE_ARMOR": $RegistryEntry<($DurableArmorEnchantment)>
static readonly "VOID_TOUCH": $RegistryEntry<($VoidTouchEnchantment)>
static readonly "CUBIC": $RegistryEntry<($RangeDiggingEnchantment)>
static readonly "PLANE": $RegistryEntry<($RangeDiggingEnchantment)>
static readonly "DRILL": $RegistryEntry<($RangeDiggingEnchantment)>
static readonly "VIEN": $RegistryEntry<($RangeDiggingEnchantment)>
static readonly "TREE": $RegistryEntry<($RangeDiggingEnchantment)>
static readonly "CHUNK_CUBIC": $RegistryEntry<($RangeDiggingEnchantment)>
static readonly "CHUNK_PLANE": $RegistryEntry<($RangeDiggingEnchantment)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCEnchantments$Type = ($LCEnchantments);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCEnchantments_ = $LCEnchantments$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$DrawerInvWrapper" {
import {$PickupTrace, $PickupTrace$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$BaseDrawerInvAccess, $BaseDrawerInvAccess$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$BaseDrawerInvAccess"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$InvPickupCap, $InvPickupCap$Type} from "packages/dev/xkmc/l2backpack/content/capability/$InvPickupCap"

export class $DrawerInvWrapper extends $InvPickupCap<($BaseDrawerInvAccess)> implements $ICapabilityProvider {

constructor(arg0: $ItemStack$Type, arg1: $Function$Type<($PickupTrace$Type), ($BaseDrawerInvAccess$Type)>)

public "getSignature"(): integer
public "getPickupMode"(): $PickupConfig
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "mayStack"(arg0: $BaseDrawerInvAccess$Type, arg1: integer, arg2: $ItemStack$Type, arg3: $PickupConfig$Type): boolean
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
public static "register"(): void
get "signature"(): integer
get "pickupMode"(): $PickupConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerInvWrapper$Type = ($DrawerInvWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerInvWrapper_ = $DrawerInvWrapper$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/entry/$SingleSwapHandler" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ISingleSwapHandler, $ISingleSwapHandler$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISingleSwapHandler"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $SingleSwapHandler extends $Record implements $ISingleSwapHandler {

constructor(list: $List$Type<($ItemStack$Type)>, index: integer)

public "index"(): integer
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "replace"(arg0: $ItemStack$Type): void
public "list"(): $List<($ItemStack)>
public "getStack"(): $ItemStack
get "stack"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SingleSwapHandler$Type = ($SingleSwapHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SingleSwapHandler_ = $SingleSwapHandler$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$SimpleArtifactFilter" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$LangData, $LangData$Type} from "packages/dev/xkmc/l2artifacts/init/data/$LangData"
import {$BaseArtifact, $BaseArtifact$Type} from "packages/dev/xkmc/l2artifacts/content/core/$BaseArtifact"
import {$IArtifactFeature, $IArtifactFeature$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature"
import {$GenericItemStack, $GenericItemStack$Type} from "packages/dev/xkmc/l2library/util/code/$GenericItemStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IArtifactFilter, $IArtifactFilter$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFilter"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$ArtifactFilter, $ArtifactFilter$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactFilter"
import {$IArtifactExtractor, $IArtifactExtractor$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactExtractor"

export class $SimpleArtifactFilter<T extends $IArtifactFeature> extends $ArtifactFilter<(T)> {
readonly "allEntries": $List<(T)>

constructor(arg0: $IArtifactFilter$Type, arg1: $LangData$Type, arg2: $Iterable$Type<(T)>, arg3: $IArtifactExtractor$Type<(T)>)

public "getComparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
get "comparator"(): $Comparator<($GenericItemStack<($BaseArtifact)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleArtifactFilter$Type<T> = ($SimpleArtifactFilter<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleArtifactFilter_<T> = $SimpleArtifactFilter$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/logic/$ItemPopulator" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ItemPopulator {

constructor()

public static "postFill"(arg0: $MobTraitCap$Type, arg1: $LivingEntity$Type): void
public static "fillEnch"(arg0: integer, arg1: $RandomSource$Type, arg2: $ItemStack$Type, arg3: $EquipmentSlot$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemPopulator$Type = ($ItemPopulator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemPopulator_ = $ItemPopulator$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitLevelTrigger$Ins" {
import {$KillTraitLevelTrigger, $KillTraitLevelTrigger$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitLevelTrigger"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $KillTraitLevelTrigger$Ins extends $BaseCriterionInstance<($KillTraitLevelTrigger$Ins), ($KillTraitLevelTrigger)> {
 "trait": $MobTrait
 "rank": integer

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

public "matchAll"(arg0: $MobTraitCap$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitLevelTrigger$Ins$Type = ($KillTraitLevelTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitLevelTrigger$Ins_ = $KillTraitLevelTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/scroller/$ScrollerMenu" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ScrollerMenu {

 "getScroll"(): integer
 "getMaxScroll"(): integer
}

export namespace $ScrollerMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollerMenu$Type = ($ScrollerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollerMenu_ = $ScrollerMenu$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/$TFCompat" {
import {$RegistrateItemTagsProvider, $RegistrateItemTagsProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateItemTagsProvider"

export class $TFCompat {

constructor()

public static "onItemTagGen"(arg0: $RegistrateItemTagsProvider$Type): void
public static "onItemTagGenImpl"(arg0: $RegistrateItemTagsProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TFCompat$Type = ($TFCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TFCompat_ = $TFCompat$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/command/$LHRegionCommands" {
import {$HostilityCommands, $HostilityCommands$Type} from "packages/dev/xkmc/l2hostility/content/command/$HostilityCommands"

export class $LHRegionCommands extends $HostilityCommands {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHRegionCommands$Type = ($LHRegionCommands);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHRegionCommands_ = $LHRegionCommands$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/immunes/$ImmunityModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $ImmunityModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImmunityModifier$Type = ($ImmunityModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImmunityModifier_ = $ImmunityModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/common/$AuraEffectTrait" {
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AuraEffectTrait extends $MobTrait {

constructor(arg0: $Supplier$Type<($MobEffect$Type)>)

public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuraEffectTrait$Type = ($AuraEffectTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuraEffectTrait_ = $AuraEffectTrait$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/legendary/$RepellingTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PushPullTrait, $PushPullTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$PushPullTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $RepellingTrait extends $PushPullTrait {

constructor(arg0: $ChatFormatting$Type)

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RepellingTrait$Type = ($RepellingTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RepellingTrait_ = $RepellingTrait$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$CataDispatch" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$ModDispatch, $ModDispatch$Type} from "packages/dev/xkmc/modulargolems/compat/materials/common/$ModDispatch"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $CataDispatch extends $ModDispatch {
static readonly "MODID": string

constructor()

public "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public "genLang"(arg0: $RegistrateLangProvider$Type): void
public "dispatchClientSetup"(): void
public "getDataGen"(arg0: $DataGenerator$Type): $ConfigDataProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CataDispatch$Type = ($CataDispatch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CataDispatch_ = $CataDispatch$Type;
}}
declare module "packages/dev/xkmc/l2backpack/network/$CreativeSetCarryToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CreativeSetCarryToServer extends $SerialPacketBase {
 "stack": $ItemStack
 "count": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $ItemStack$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreativeSetCarryToServer$Type = ($CreativeSetCarryToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreativeSetCarryToServer_ = $CreativeSetCarryToServer$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature$Sprite" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$IArtifactFeature, $IArtifactFeature$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$IArtifactFeature"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $IArtifactFeature$Sprite extends $IArtifactFeature {

 "getIcon"(): $ResourceLocation
 "getDesc"(): $MutableComponent
 "getTooltipItems"(): $NonNullList<($ItemStack)>
}

export namespace $IArtifactFeature$Sprite {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IArtifactFeature$Sprite$Type = ($IArtifactFeature$Sprite);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IArtifactFeature$Sprite_ = $IArtifactFeature$Sprite$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/beacon/$HostilityBeaconMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ContainerData, $ContainerData$Type} from "packages/net/minecraft/world/inventory/$ContainerData"
import {$ContainerLevelAccess, $ContainerLevelAccess$Type} from "packages/net/minecraft/world/inventory/$ContainerLevelAccess"

export class $HostilityBeaconMenu extends $AbstractContainerMenu {
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: $MenuType$Type<($HostilityBeaconMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type)
constructor(arg0: $MenuType$Type<($HostilityBeaconMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $ContainerData$Type, arg4: $ContainerLevelAccess$Type)

public "getLevels"(): integer
public "stillValid"(arg0: $Player$Type): boolean
public "removed"(arg0: $Player$Type): void
public "getPrimaryEffect"(): integer
public "updateEffects"(arg0: integer): void
public "hasPayment"(): boolean
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "setData"(arg0: integer, arg1: integer): void
get "levels"(): integer
get "primaryEffect"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityBeaconMenu$Type = ($HostilityBeaconMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityBeaconMenu_ = $HostilityBeaconMenu$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$AttackStrikeData" {
import {$AttributeSetData, $AttributeSetData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$AttributeSetData$AttributePair, $AttributeSetData$AttributePair$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData$AttributePair"

export class $AttackStrikeData extends $AttributeSetData {
 "count": integer
 "list": $ArrayList<($AttributeSetData$AttributePair)>
 "life": integer
 "rank": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttackStrikeData$Type = ($AttackStrikeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttackStrikeData_ = $AttackStrikeData$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $FilterTabBase<T extends $FilterTabBase<(T)>> extends $Button {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $FilterTabToken<(T)>
readonly "manager": $FilterTabManager
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $FilterTabToken$Type<(T)>, arg2: $FilterTabManager$Type, arg3: $ItemStack$Type, arg4: $Component$Type)

public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "onTabClicked"(): void
public "onTooltip"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilterTabBase$Type<T> = ($FilterTabBase<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilterTabBase_<T> = $FilterTabBase$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/mob/$MobCapSyncToClient" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $MobCapSyncToClient extends $SerialPacketBase {
 "tag": $CompoundTag
 "id": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $LivingEntity$Type, arg1: $MobTraitCap$Type)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobCapSyncToClient$Type = ($MobCapSyncToClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobCapSyncToClient_ = $MobCapSyncToClient$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/render/$BaseItemRenderer" {
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$BlockEntityRenderDispatcher, $BlockEntityRenderDispatcher$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderDispatcher"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $BaseItemRenderer extends $BlockEntityWithoutLevelRenderer {
static readonly "INSTANCE": $Supplier<($BlockEntityWithoutLevelRenderer)>
static readonly "EXTENSIONS": $IClientItemExtensions

constructor(arg0: $BlockEntityRenderDispatcher$Type, arg1: $EntityModelSet$Type)

public "renderByItem"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public static "renderItemInside"(arg0: $ItemStack$Type, arg1: double, arg2: $PoseStack$Type, arg3: $ItemDisplayContext$Type, arg4: $MultiBufferSource$Type, arg5: integer, arg6: integer): void
public static "renderDrawer"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseItemRenderer$Type = ($BaseItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseItemRenderer_ = $BaseItemRenderer$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$CraftableEnchantment" {
import {$Set, $Set$Type} from "packages/java/util/$Set"

export interface $CraftableEnchantment {

 "getCraftableLevels"(): $Set<(integer)>
}

export namespace $CraftableEnchantment {
const DEF: $Set<(integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CraftableEnchantment$Type = ($CraftableEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CraftableEnchantment_ = $CraftableEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/loot/$TraitLootCondition" {
import {$LootContextParam, $LootContextParam$Type} from "packages/net/minecraft/world/level/storage/loot/parameters/$LootContextParam"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$ValidationContext, $ValidationContext$Type} from "packages/net/minecraft/world/level/storage/loot/$ValidationContext"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"

export class $TraitLootCondition implements $LootItemCondition {
 "trait": $MobTrait
 "minLevel": integer
 "maxLevel": integer

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $MobTrait$Type, arg1: integer, arg2: integer)

public "test"(arg0: $LootContext$Type): boolean
public "getType"(): $LootItemConditionType
public "validate"(arg0: $ValidationContext$Type): void
public "getReferencedContextParams"(): $Set<($LootContextParam<(any)>)>
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public "negate"(): $Predicate<($LootContext)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "isEqual"<T>(arg0: any): $Predicate<($LootContext)>
public "applyLootHandler"(context: $LootContext$Type, loot: $List$Type<($ItemStack$Type)>): boolean
get "type"(): $LootItemConditionType
get "referencedContextParams"(): $Set<($LootContextParam<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitLootCondition$Type = ($TraitLootCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitLootCondition_ = $TraitLootCondition$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$WorldDifficultyConfig$DifficultyConfig" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $WorldDifficultyConfig$DifficultyConfig extends $Record {

constructor(min: integer, base: integer, variation: double, scale: double, apply_chance: double, trait_chance: double)

public "base"(): integer
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "min"(): integer
public "scale"(): double
public "trait_chance"(): double
public "apply_chance"(): double
public "variation"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldDifficultyConfig$DifficultyConfig$Type = ($WorldDifficultyConfig$DifficultyConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldDifficultyConfig$DifficultyConfig_ = $WorldDifficultyConfig$DifficultyConfig$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/backpack/$BackpackScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$BaseOpenableScreen, $BaseOpenableScreen$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseOpenableScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$BackpackMenu, $BackpackMenu$Type} from "packages/dev/xkmc/l2backpack/content/backpack/$BackpackMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $BackpackScreen extends $BaseOpenableScreen<($BackpackMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $BackpackMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackScreen$Type = ($BackpackScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackScreen_ = $BackpackScreen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/legendary/$HolyAxe" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$BattleAxeItem, $BattleAxeItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/types/$BattleAxeItem"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LegendaryWeapon, $LegendaryWeapon$Type} from "packages/dev/xkmc/l2weaponry/content/item/legendary/$LegendaryWeapon"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $HolyAxe extends $BattleAxeItem implements $LegendaryWeapon {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public static "getTarget"(arg0: $Entity$Type): $LivingEntity
public "cancelFreeze"(): boolean
public "onCrit"(arg0: $Player$Type, arg1: $Entity$Type): void
public "onKill"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "isImmuneTo"(arg0: $DamageSource$Type): boolean
public "onDamageFinal"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
public "onHurtMaximized"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HolyAxe$Type = ($HolyAxe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HolyAxe_ = $HolyAxe$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/jei/$GolemAssemblyExtension" {
import {$GolemAssembleRecipe, $GolemAssembleRecipe$Type} from "packages/dev/xkmc/modulargolems/content/recipe/$GolemAssembleRecipe"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ICraftingCategoryExtension, $ICraftingCategoryExtension$Type} from "packages/mezz/jei/api/recipe/category/extensions/vanilla/crafting/$ICraftingCategoryExtension"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICraftingGridHelper, $ICraftingGridHelper$Type} from "packages/mezz/jei/api/gui/ingredient/$ICraftingGridHelper"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $GolemAssemblyExtension extends $Record implements $ICraftingCategoryExtension {

constructor(recipe: $GolemAssembleRecipe$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "recipe"(): $GolemAssembleRecipe
public "getWidth"(): integer
public "getHeight"(): integer
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $ICraftingGridHelper$Type, arg2: $IFocusGroup$Type): void
public "getRegistryName"(): $ResourceLocation
public "drawInfo"(arg0: integer, arg1: integer, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "handleInput"(arg0: double, arg1: double, arg2: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: double, arg1: double): $List<($Component)>
get "width"(): integer
get "height"(): integer
get "registryName"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemAssemblyExtension$Type = ($GolemAssemblyExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemAssemblyExtension_ = $GolemAssemblyExtension$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/merged/$EnderSwitchMenu" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BaseBagMenu, $BaseBagMenu$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $EnderSwitchMenu extends $BaseBagMenu<($EnderSwitchMenu)> {
static readonly "MANAGERS": $SpriteManager
readonly "item_slot": $PlayerSlot<(any)>
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $Container$Type, arg3: $PlayerSlot$Type<(any)>, arg4: $UUID$Type, arg5: $Component$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($EnderSwitchMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $EnderSwitchMenu
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderSwitchMenu$Type = ($EnderSwitchMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderSwitchMenu_ = $EnderSwitchMenu$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/data/$BoolArrayDataSlot" {
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"

export class $BoolArrayDataSlot {

constructor(arg0: $AbstractContainerMenu$Type, arg1: integer)

public "get"(arg0: integer): boolean
public "set"(arg0: boolean, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BoolArrayDataSlot$Type = ($BoolArrayDataSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BoolArrayDataSlot_ = $BoolArrayDataSlot$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkClearRenderer" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ChunkDifficulty, $ChunkDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkDifficulty"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"

export class $ChunkClearRenderer {


public static "render"(arg0: $PoseStack$Type, arg1: $Player$Type, arg2: $ChunkDifficulty$Type, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChunkClearRenderer$Type = ($ChunkClearRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChunkClearRenderer_ = $ChunkClearRenderer$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/registrate/$BackpackMenus" {
import {$EnderSwitchMenu, $EnderSwitchMenu$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/merged/$EnderSwitchMenu"
import {$WorldChestContainer, $WorldChestContainer$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestContainer"
import {$ArmorSetBagMenu, $ArmorSetBagMenu$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/armorswap/$ArmorSetBagMenu"
import {$MultiSwitchMenu, $MultiSwitchMenu$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/merged/$MultiSwitchMenu"
import {$MenuEntry, $MenuEntry$Type} from "packages/com/tterrag/registrate/util/entry/$MenuEntry"
import {$ScabbardMenu, $ScabbardMenu$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/scabbard/$ScabbardMenu"
import {$BackpackMenu, $BackpackMenu$Type} from "packages/dev/xkmc/l2backpack/content/backpack/$BackpackMenu"
import {$QuiverMenu, $QuiverMenu$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/quiver/$QuiverMenu"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ArmorBagMenu, $ArmorBagMenu$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/armorswap/$ArmorBagMenu"

export class $BackpackMenus {
static readonly "MT_BACKPACK": $MenuEntry<($BackpackMenu)>
static readonly "MT_WORLD_CHEST": $MenuEntry<($WorldChestContainer)>
static readonly "MT_ARROW": $MenuEntry<($QuiverMenu)>
static readonly "MT_TOOL": $MenuEntry<($ScabbardMenu)>
static readonly "MT_ARMOR": $MenuEntry<($ArmorBagMenu)>
static readonly "MT_ARMOR_SET": $MenuEntry<($ArmorSetBagMenu)>
static readonly "MT_MULTI": $MenuEntry<($MultiSwitchMenu)>
static readonly "MT_ES": $MenuEntry<($EnderSwitchMenu)>

constructor()

public static "register"(): void
public static "getLangKey"(arg0: $MenuType$Type<(any)>): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackMenus$Type = ($BackpackMenus);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackMenus_ = $BackpackMenus$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/common/$ShulkerTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$IntSupplier, $IntSupplier$Type} from "packages/java/util/function/$IntSupplier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BulletType, $BulletType$Type} from "packages/dev/xkmc/l2hostility/content/entity/$BulletType"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ShulkerTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type, arg1: $IntSupplier$Type, arg2: $BulletType$Type, arg3: integer)

public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShulkerTrait$Type = ($ShulkerTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShulkerTrait_ = $ShulkerTrait$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/force/$NoSelfRenderEffect" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$IconOverlayEffect, $IconOverlayEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$IconOverlayEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

/**
 * 
 * @deprecated
 */
export interface $NoSelfRenderEffect extends $IconOverlayEffect {

 "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
 "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender

(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
}

export namespace $NoSelfRenderEffect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoSelfRenderEffect$Type = ($NoSelfRenderEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoSelfRenderEffect_ = $NoSelfRenderEffect$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$ClawItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BaseClawItem, $BaseClawItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$BaseClawItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ClawItem extends $BaseClawItem {
static readonly "RANGE": $AttributeModifier
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getBlockTime"(arg0: $LivingEntity$Type): float
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClawItem$Type = ($ClawItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClawItem_ = $ClawItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/$BurntRecipeCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$BurntRecipe, $BurntRecipe$Type} from "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipe"
import {$BaseRecipeCategory, $BaseRecipeCategory$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipeCategory"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $BurntRecipeCategory extends $BaseRecipeCategory<($BurntRecipe), ($BurntRecipeCategory)> {

constructor()

public "init"(arg0: $IGuiHelper$Type): $BurntRecipeCategory
public "getTitle"(): $Component
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $BurntRecipe$Type, arg2: $IFocusGroup$Type): void
get "title"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BurntRecipeCategory$Type = ($BurntRecipeCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BurntRecipeCategory_ = $BurntRecipeCategory$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$LHCompatRegistry" {
import {$ReflectiveModifier, $ReflectiveModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$ReflectiveModifier"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$AttributeGolemModifier, $AttributeGolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier"
import {$HostilityCoreModifier, $HostilityCoreModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$HostilityCoreModifier"
import {$RegenModifier, $RegenModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$RegenModifier"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$PotionDefenseModifier, $PotionDefenseModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$PotionDefenseModifier"
import {$HostilityPotionModifier, $HostilityPotionModifier$Type} from "packages/dev/xkmc/modulargolems/compat/materials/l2hostility/$HostilityPotionModifier"
import {$SimpleUpgradeItem, $SimpleUpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$SimpleUpgradeItem"

export class $LHCompatRegistry {
static readonly "LH_CORE": $RegistryEntry<($HostilityCoreModifier)>
static readonly "LH_POTION": $RegistryEntry<($HostilityPotionModifier)>
static readonly "LH_TANK": $RegistryEntry<($AttributeGolemModifier)>
static readonly "LH_SPEED": $RegistryEntry<($AttributeGolemModifier)>
static readonly "LH_PROTECTION": $RegistryEntry<($PotionDefenseModifier)>
static readonly "LH_REGEN": $RegistryEntry<($RegenModifier)>
static readonly "LH_REFLECTIVE": $RegistryEntry<($ReflectiveModifier)>
static readonly "CORE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "POTION": $ItemEntry<($SimpleUpgradeItem)>
static readonly "TANK": $ItemEntry<($SimpleUpgradeItem)>
static readonly "SPEED": $ItemEntry<($SimpleUpgradeItem)>
static readonly "PROTECTION": $ItemEntry<($SimpleUpgradeItem)>
static readonly "REGEN": $ItemEntry<($SimpleUpgradeItem)>
static readonly "REFLECTIVE": $ItemEntry<($SimpleUpgradeItem)>
static readonly "HOSTILITY_UPGRADE": $TagKey<($Item)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LHCompatRegistry$Type = ($LHCompatRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LHCompatRegistry_ = $LHCompatRegistry$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/base/$AttributeTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AttributeTrait$AttributeEntry, $AttributeTrait$AttributeEntry$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$AttributeTrait$AttributeEntry"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AttributeTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type, ...arg1: ($AttributeTrait$AttributeEntry$Type)[])

public "initialize"(arg0: $LivingEntity$Type, arg1: integer): void
public "addDetail"(arg0: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeTrait$Type = ($AttributeTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeTrait_ = $AttributeTrait$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/cataclysm/$CataConfigGen" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider$Collector, $ConfigDataProvider$Collector$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider$Collector"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $CataConfigGen extends $ConfigDataProvider {

constructor(arg0: $DataGenerator$Type)

public "add"(arg0: $ConfigDataProvider$Collector$Type): void
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CataConfigGen$Type = ($CataConfigGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CataConfigGen_ = $CataConfigGen$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$RemoteHopperTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$RemoteHopperTrigger$Ins, $RemoteHopperTrigger$Ins$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$RemoteHopperTrigger$Ins"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $RemoteHopperTrigger extends $BaseCriterion<($RemoteHopperTrigger$Ins), ($RemoteHopperTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type): void
public static "ins"(): $RemoteHopperTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RemoteHopperTrigger$Type = ($RemoteHopperTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RemoteHopperTrigger_ = $RemoteHopperTrigger$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/swap/$ArtifactSwapData$SwapSlot" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ArtifactSlot, $ArtifactSlot$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSlot"

export class $ArtifactSwapData$SwapSlot {
 "slot": $ArtifactSlot

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $ArtifactSlot$Type)

public "getStack"(): $ItemStack
public "isLocked"(): boolean
public "canAccept"(arg0: $ItemStack$Type): boolean
public "setStack"(arg0: $ItemStack$Type): void
public "toggle"(): void
get "stack"(): $ItemStack
get "locked"(): boolean
set "stack"(value: $ItemStack$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSwapData$SwapSlot$Type = ($ArtifactSwapData$SwapSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSwapData$SwapSlot_ = $ArtifactSwapData$SwapSlot$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$SimpleSlotData, $SimpleSlotData$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$SimpleSlotData"
import {$ItemSource, $ItemSource$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$ItemSource"
import {$ItemSourceData, $ItemSourceData$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$ItemSourceData"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $PlayerSlot<T extends ($Record) & ($ItemSourceData<(T)>)> extends $Record {

constructor(type: $ItemSource$Type<(T)>, data: T)

public "type"(): $ItemSource<(T)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "data"(): T
public "write"(arg0: $FriendlyByteBuf$Type): void
public static "read"(arg0: $FriendlyByteBuf$Type): $PlayerSlot<(any)>
public "getItem"(arg0: $Player$Type): $ItemStack
public static "ofOtherInventory"(arg0: integer, arg1: integer, arg2: integer, arg3: $AbstractContainerMenu$Type): $PlayerSlot<(any)>
public static "ofInventory"(arg0: integer): $PlayerSlot<($SimpleSlotData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerSlot$Type<T> = ($PlayerSlot<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerSlot_<T> = $PlayerSlot$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$TraitBase" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$EntityConfig$TraitCondition, $EntityConfig$TraitCondition$Type} from "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$TraitCondition"

export class $EntityConfig$TraitBase extends $Record {

constructor(trait: $MobTrait$Type, free: integer, min: integer, condition: $EntityConfig$TraitCondition$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "min"(): integer
public "condition"(): $EntityConfig$TraitCondition
public "free"(): integer
public "trait"(): $MobTrait
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityConfig$TraitBase$Type = ($EntityConfig$TraitBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityConfig$TraitBase_ = $EntityConfig$TraitBase$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/logic/$PlayerFinder" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $PlayerFinder {

constructor()

public static "getNearestPlayer"(arg0: $Level$Type, arg1: $LivingEntity$Type): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerFinder$Type = ($PlayerFinder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerFinder_ = $PlayerFinder$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/click/$VanillaQuickInsert" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $VanillaQuickInsert {

 "l2backpack$quickMove"(arg0: $ServerPlayer$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer): void

(arg0: $ServerPlayer$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer): void
}

export namespace $VanillaQuickInsert {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaQuickInsert$Type = ($VanillaQuickInsert);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaQuickInsert_ = $VanillaQuickInsert$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/insert/$OverlayInsertItem" {
import {$DrawerInteractToServer$Callback, $DrawerInteractToServer$Callback$Type} from "packages/dev/xkmc/l2backpack/network/$DrawerInteractToServer$Callback"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $OverlayInsertItem {

 "takeItem"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): $ItemStack
 "attemptInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ServerPlayer$Type): void
 "clientInsert"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer, arg3: $Slot$Type, arg4: boolean, arg5: integer, arg6: $DrawerInteractToServer$Callback$Type, arg7: integer): boolean
 "sendInsertPacket"(arg0: integer, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $DrawerInteractToServer$Callback$Type, arg4: integer): void
 "mayClientTake"(): boolean
 "serverTrigger"(arg0: $ItemStack$Type, arg1: $ServerPlayer$Type): void
}

export namespace $OverlayInsertItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OverlayInsertItem$Type = ($OverlayInsertItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OverlayInsertItem_ = $OverlayInsertItem$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/stacked/$TextEntry" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $TextEntry extends $Record {

constructor(text: $Component$Type, x: integer, y: integer, color: integer, shadow: boolean)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "x"(): integer
public "y"(): integer
public "color"(): integer
public "text"(): $Component
public "shadow"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEntry$Type = ($TextEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEntry_ = $TextEntry$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/particle/$EmeraldParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $EmeraldParticle extends $TextureSheetParticle {
static readonly "LIFE": integer
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmeraldParticle$Type = ($EmeraldParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmeraldParticle_ = $EmeraldParticle$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/jei/$GLMRecipeCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$BaseRecipeCategory, $BaseRecipeCategory$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipeCategory"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$ITraitLootRecipe, $ITraitLootRecipe$Type} from "packages/dev/xkmc/l2hostility/compat/jei/$ITraitLootRecipe"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $GLMRecipeCategory extends $BaseRecipeCategory<($ITraitLootRecipe), ($GLMRecipeCategory)> {

constructor()

public "init"(arg0: $IGuiHelper$Type): $GLMRecipeCategory
public "getTitle"(): $Component
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $ITraitLootRecipe$Type, arg2: $IFocusGroup$Type): void
get "title"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLMRecipeCategory$Type = ($GLMRecipeCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLMRecipeCategory_ = $GLMRecipeCategory$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/base/$WeaponItem" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$TieredItem, $TieredItem$Type} from "packages/net/minecraft/world/item/$TieredItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $WeaponItem extends $TieredItem {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $TagKey$Type<($Block$Type)>)

public "getSweepHitBox"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $Entity$Type): $AABB
public "isCorrectToolForDrops"(arg0: $ItemStack$Type, arg1: $BlockState$Type): boolean
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type): float
public "canAttackBlock"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
/**
 * 
 * @deprecated
 */
public "isCorrectToolForDrops"(arg0: $BlockState$Type): boolean
public "mineBlock"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockState$Type, arg3: $BlockPos$Type, arg4: $LivingEntity$Type): boolean
public "getDefaultAttributeModifiers"(arg0: $EquipmentSlot$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getSweepHitBoxImpl"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $Entity$Type): $AABB
public "isSwordLike"(): boolean
get "swordLike"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeaponItem$Type = ($WeaponItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeaponItem_ = $WeaponItem$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe$RecipeFactory" {
import {$AbstractSmithingRecipe, $AbstractSmithingRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $AbstractSmithingRecipe$RecipeFactory<T extends $AbstractSmithingRecipe<(T)>> {

 "create"(arg0: $ResourceLocation$Type, arg1: $Ingredient$Type, arg2: $Ingredient$Type, arg3: $ItemStack$Type): T

(arg0: $ResourceLocation$Type, arg1: $Ingredient$Type, arg2: $Ingredient$Type, arg3: $ItemStack$Type): T
}

export namespace $AbstractSmithingRecipe$RecipeFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSmithingRecipe$RecipeFactory$Type<T> = ($AbstractSmithingRecipe$RecipeFactory<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSmithingRecipe$RecipeFactory_<T> = $AbstractSmithingRecipe$RecipeFactory$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/content/logic/$TraitGenerator" {
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$MobDifficultyCollector, $MobDifficultyCollector$Type} from "packages/dev/xkmc/l2hostility/content/logic/$MobDifficultyCollector"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $TraitGenerator {


public static "generateTraits"(arg0: $MobTraitCap$Type, arg1: $LivingEntity$Type, arg2: integer, arg3: $HashMap$Type<($MobTrait$Type), (integer)>, arg4: $MobDifficultyCollector$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitGenerator$Type = ($TraitGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitGenerator_ = $TraitGenerator$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$AbstractCriterionTriggerInstance, $AbstractCriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$AbstractCriterionTriggerInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SerializationContext, $SerializationContext$Type} from "packages/net/minecraft/advancements/critereon/$SerializationContext"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $BaseCriterionInstance<T extends $BaseCriterionInstance<(T), (R)>, R extends $BaseCriterion<(T), (R)>> extends $AbstractCriterionTriggerInstance {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

public "serializeToJson"(arg0: $SerializationContext$Type): $JsonObject
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseCriterionInstance$Type<T, R> = ($BaseCriterionInstance<(T), (R)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseCriterionInstance_<T, R> = $BaseCriterionInstance$Type<(T), (R)>;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/automation/$GolemIncompleteItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$GolemPart, $GolemPart$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemPart"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$SequencedAssemblyItem, $SequencedAssemblyItem$Type} from "packages/com/simibubi/create/content/processing/sequenced/$SequencedAssemblyItem"
import {$IGolemPartItem, $IGolemPartItem$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$IGolemPartItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GolemIncompleteItem extends $SequencedAssemblyItem implements $IGolemPartItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $ItemEntry$Type<(any)>)

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "asPart"(): $GolemPart<(any), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemIncompleteItem$Type = ($GolemIncompleteItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemIncompleteItem_ = $GolemIncompleteItem$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/undergarden/$ForgottenTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $ForgottenTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type, arg2: float): float
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgottenTool$Type = ($ForgottenTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgottenTool_ = $ForgottenTool$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/$ArtifactEffects" {
import {$FrostShield, $FrostShield$Type} from "packages/dev/xkmc/l2artifacts/content/mobeffects/$FrostShield"
import {$FleshOvergrowth, $FleshOvergrowth$Type} from "packages/dev/xkmc/l2artifacts/content/mobeffects/$FleshOvergrowth"
import {$FungusInfection, $FungusInfection$Type} from "packages/dev/xkmc/l2artifacts/content/mobeffects/$FungusInfection"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$ThermalMotive, $ThermalMotive$Type} from "packages/dev/xkmc/l2artifacts/content/mobeffects/$ThermalMotive"

export class $ArtifactEffects {
static readonly "FLESH_OVERGROWTH": $RegistryEntry<($FleshOvergrowth)>
static readonly "FUNGUS": $RegistryEntry<($FungusInfection)>
static readonly "THERMAL_MOTIVE": $RegistryEntry<($ThermalMotive)>
static readonly "FROST_SHIELD": $RegistryEntry<($FrostShield)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactEffects$Type = ($ArtifactEffects);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactEffects_ = $ArtifactEffects$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/config/$GolemPartConfig$PartBuilder" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$GolemPartConfig, $GolemPartConfig$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemPartConfig"

export class $GolemPartConfig$PartBuilder {


public "end"(): $GolemPartConfig
public "addFilter"(arg0: $StatFilterType$Type, arg1: double): $GolemPartConfig$PartBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemPartConfig$PartBuilder$Type = ($GolemPartConfig$PartBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemPartConfig$PartBuilder_ = $GolemPartConfig$PartBuilder$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/$L2Complements" {
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$GatherDataEvent, $GatherDataEvent$Type} from "packages/net/minecraftforge/data/event/$GatherDataEvent"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$PacketHandlerWithConfig, $PacketHandlerWithConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"
import {$GenItemVanillaType, $GenItemVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/vanilla/$GenItemVanillaType"

export class $L2Complements {
static readonly "MODID": string
static readonly "HANDLER": $PacketHandlerWithConfig
static readonly "LOGGER": $Logger
static readonly "REGISTRATE": $L2Registrate
static readonly "MATS": $GenItemVanillaType

constructor()

public static "setup"(arg0: $FMLCommonSetupEvent$Type): void
public static "gatherData"(arg0: $GatherDataEvent$Type): void
set "up"(value: $FMLCommonSetupEvent$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Complements$Type = ($L2Complements);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Complements_ = $L2Complements$Type;
}}
declare module "packages/dev/xkmc/l2serial/network/$BasePacketHandler" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$NetworkDirection, $NetworkDirection$Type} from "packages/net/minecraftforge/network/$NetworkDirection"
import {$BasePacketHandler$LoadedPacket, $BasePacketHandler$LoadedPacket$Type} from "packages/dev/xkmc/l2serial/network/$BasePacketHandler$LoadedPacket"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$SimplePacketBase, $SimplePacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SimplePacketBase"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SimpleChannel, $SimpleChannel$Type} from "packages/net/minecraftforge/network/simple/$SimpleChannel"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BasePacketHandler {
readonly "CHANNEL_NAME": $ResourceLocation
readonly "NETWORK_VERSION": integer
readonly "NETWORK_VERSION_STR": string
 "channel": $SimpleChannel

constructor(arg0: $ResourceLocation$Type, arg1: integer, ...arg2: ($Function$Type<($BasePacketHandler$Type), ($BasePacketHandler$LoadedPacket$Type<(any)>)>)[])

public "create"<T extends $SerialPacketBase>(arg0: $Class$Type<(T)>, arg1: $NetworkDirection$Type): $BasePacketHandler$LoadedPacket<(T)>
public "create"<T extends $SimplePacketBase>(arg0: $Class$Type<(T)>, arg1: $Function$Type<($FriendlyByteBuf$Type), (T)>, arg2: $NetworkDirection$Type): $BasePacketHandler$LoadedPacket<(T)>
public "registerPackets"(): void
public "toClientPlayer"(arg0: $SimplePacketBase$Type, arg1: $ServerPlayer$Type): void
public "toTrackingPlayers"(arg0: $SimplePacketBase$Type, arg1: $Entity$Type): void
public "toAllClient"(arg0: $SimplePacketBase$Type): void
public "sendToNear"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: integer, arg3: any): void
public "toServer"(arg0: $SimplePacketBase$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasePacketHandler$Type = ($BasePacketHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasePacketHandler_ = $BasePacketHandler$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/upgrade/$UpgradeMenuScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IFilterScreen, $IFilterScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$IFilterScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UpgradeMenu, $UpgradeMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/upgrade/$UpgradeMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $UpgradeMenuScreen extends $BaseContainerScreen<($UpgradeMenu)> implements $IFilterScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $UpgradeMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "screenHeight"(): integer
public "screenWidth"(): integer
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "asScreen"(): $Screen
public "onSwitch"(): void
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeMenuScreen$Type = ($UpgradeMenuScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeMenuScreen_ = $UpgradeMenuScreen$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/dragons/$LightningDragonBoneTool" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $LightningDragonBoneTool extends $ExtraToolConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "onHit"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightningDragonBoneTool$Type = ($LightningDragonBoneTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightningDragonBoneTool_ = $LightningDragonBoneTool$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/goals/$EnderTrait" {
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$LegendaryTrait, $LegendaryTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/legendary/$LegendaryTrait"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EnderTrait extends $LegendaryTrait {

constructor(arg0: $ChatFormatting$Type)

public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderTrait$Type = ($EnderTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderTrait_ = $EnderTrait$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/$GolemClientEventListeners" {
import {$HumanoidSkinEvent, $HumanoidSkinEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$HumanoidSkinEvent"

export class $GolemClientEventListeners {

constructor()

public static "onHumanoidSkin"(arg0: $HumanoidSkinEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemClientEventListeners$Type = ($GolemClientEventListeners);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemClientEventListeners_ = $GolemClientEventListeners$Type;
}}
declare module "packages/dev/xkmc/l2library/base/overlay/$L2TooltipRenderUtil" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $L2TooltipRenderUtil extends $Record {

constructor(fill: $GuiGraphics$Type, bg: integer, bs: integer, be: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "fill"(): $GuiGraphics
public "bs"(): integer
public "be"(): integer
public "bg"(): integer
public "renderTooltipBackground"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2TooltipRenderUtil$Type = ($L2TooltipRenderUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2TooltipRenderUtil_ = $L2TooltipRenderUtil$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/advancement/$BagInteractTrigger" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BagInteractTrigger$Type, $BagInteractTrigger$Type$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$BagInteractTrigger$Type"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$BagInteractTrigger$Ins, $BagInteractTrigger$Ins$Type} from "packages/dev/xkmc/l2backpack/init/advancement/$BagInteractTrigger$Ins"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BagInteractTrigger extends $BaseCriterion<($BagInteractTrigger$Ins), ($BagInteractTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $ItemStack$Type, arg2: $BagInteractTrigger$Type$Type, arg3: integer): void
public static "fromType"(arg0: $BagInteractTrigger$Type$Type): $BagInteractTrigger$Ins
public static "fromType"(arg0: $BagInteractTrigger$Type$Type, ...arg1: ($Item$Type)[]): $BagInteractTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BagInteractTrigger$Type = ($BagInteractTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BagInteractTrigger_ = $BagInteractTrigger$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/curios/$EntitySlotAccess" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $EntitySlotAccess {

 "get"(): $ItemStack
 "set"(arg0: $ItemStack$Type): void
 "getID"(): string
 "modify"(arg0: $Function$Type<($ItemStack$Type), ($ItemStack$Type)>): void
}

export namespace $EntitySlotAccess {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntitySlotAccess$Type = ($EntitySlotAccess);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntitySlotAccess_ = $EntitySlotAccess$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/events/$ArtifactSlotClickListener" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ConcurrentHashMap, $ConcurrentHashMap$Type} from "packages/java/util/concurrent/$ConcurrentHashMap"
import {$SlotClickHandler, $SlotClickHandler$Type} from "packages/dev/xkmc/l2screentracker/click/$SlotClickHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ArtifactSlotClickListener extends $SlotClickHandler {
static readonly "MAP": $ConcurrentHashMap<($ResourceLocation), ($SlotClickHandler)>

constructor()

public "handle"(arg0: $ServerPlayer$Type, arg1: integer, arg2: integer, arg3: integer): void
public static "canOpen"(arg0: $ItemStack$Type): boolean
public "isAllowed"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactSlotClickListener$Type = ($ArtifactSlotClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactSlotClickListener_ = $ArtifactSlotClickListener$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/feature/$FeaturePredicate" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $FeaturePredicate {

 "test"(arg0: $LivingEntity$Type): boolean

(arg0: $LivingEntity$Type): boolean
}

export namespace $FeaturePredicate {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FeaturePredicate$Type = ($FeaturePredicate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FeaturePredicate_ = $FeaturePredicate$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/entity/$BulletType" {
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$HostilityBullet, $HostilityBullet$Type} from "packages/dev/xkmc/l2hostility/content/entity/$HostilityBullet"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BulletType extends $Enum<($BulletType)> {
static readonly "PLAIN": $BulletType
static readonly "EXPLODE": $BulletType


public static "values"(): ($BulletType)[]
public static "valueOf"(arg0: string): $BulletType
public "limit"(): boolean
public "getDamage"(arg0: integer): float
public "onHit"(arg0: $HostilityBullet$Type, arg1: $HitResult$Type, arg2: integer): void
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BulletType$Type = (("plain") | ("explode")) | ($BulletType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BulletType_ = $BulletType$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$TargetFilterLine" {
import {$TargetFilterConfig, $TargetFilterConfig$Type} from "packages/dev/xkmc/modulargolems/content/capability/$TargetFilterConfig"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$GolemConfigEditor, $GolemConfigEditor$Type} from "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEditor"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IGhostContainer, $IGhostContainer$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$IGhostContainer"

export class $TargetFilterLine extends $Record implements $IGhostContainer {

constructor(editor: $GolemConfigEditor$Type, list: $ArrayList$Type<($ItemStack$Type)>, offset: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "offset"(): integer
public "list"(): $ArrayList<($ItemStack)>
public "set"(arg0: integer, arg1: $ItemStack$Type): void
public "editor"(): $GolemConfigEditor
public "getFilter"(): $TargetFilterConfig
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "listSize"(): integer
public "internalMatch"(arg0: $ItemStack$Type): boolean
public "isEmpty"(): boolean
public "setChanged"(): void
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "stillValid"(arg0: $Player$Type): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "filter"(): $TargetFilterConfig
get "containerSize"(): integer
get "empty"(): boolean
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetFilterLine$Type = ($TargetFilterLine);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetFilterLine_ = $TargetFilterLine$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/entry/$SingleSwapEntry" {
import {$ISwapEntry, $ISwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$ISwapEntry"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"

export class $SingleSwapEntry extends $Record implements $ISwapEntry<($SingleSwapEntry)> {

constructor(token: $IQuickSwapToken$Type<($SingleSwapEntry$Type)>, stack: $ItemStack$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "asList"(): $List<($ItemStack)>
public "getStack"(): $ItemStack
public static "parse"(arg0: $IQuickSwapToken$Type<($SingleSwapEntry$Type)>, arg1: $List$Type<($ItemStack$Type)>): $List<($SingleSwapEntry)>
public "token"(): $IQuickSwapToken<($SingleSwapEntry)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SingleSwapEntry$Type = ($SingleSwapEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SingleSwapEntry_ = $SingleSwapEntry$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$HammerItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SlowWieldItem, $SlowWieldItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$SlowWieldItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $HammerItem extends $SlowWieldItem {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "canDisableShield"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $LivingEntity$Type, arg3: $LivingEntity$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "modifySource"(arg0: $LivingEntity$Type, arg1: $CreateSourceEvent$Type, arg2: $ItemStack$Type, arg3: $Entity$Type): void
public "isSharp"(): boolean
get "sharp"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HammerItem$Type = ($HammerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HammerItem_ = $HammerItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/config/$EntityConfig$ItemEntry" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $EntityConfig$ItemEntry extends $Record {

constructor(weight: integer, stack: $ItemStack$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "weight"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityConfig$ItemEntry$Type = ($EntityConfig$ItemEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityConfig$ItemEntry_ = $EntityConfig$ItemEntry$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/common/$ThornModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ThornModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onHurt"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThornModifier$Type = ($ThornModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThornModifier_ = $ThornModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/traits/$SealedItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SealedItem extends $Item {
static readonly "TIME": string
static readonly "DATA": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public static "sealItem"(arg0: $ItemStack$Type, arg1: integer): $ItemStack
public "getUseDuration"(arg0: $ItemStack$Type): integer
public "finishUsingItem"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type): $ItemStack
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getUseAnimation"(arg0: $ItemStack$Type): $UseAnim
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SealedItem$Type = ($SealedItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SealedItem_ = $SealedItem$Type;
}}
declare module "packages/dev/xkmc/l2library/init/explosion/$BaseExplosion" {
import {$ExplosionDamageCalculator, $ExplosionDamageCalculator$Type} from "packages/net/minecraft/world/level/$ExplosionDamageCalculator"
import {$BaseExplosionContext, $BaseExplosionContext$Type} from "packages/dev/xkmc/l2library/init/explosion/$BaseExplosionContext"
import {$VanillaExplosionContext, $VanillaExplosionContext$Type} from "packages/dev/xkmc/l2library/init/explosion/$VanillaExplosionContext"
import {$Explosion$BlockInteraction, $Explosion$BlockInteraction$Type} from "packages/net/minecraft/world/level/$Explosion$BlockInteraction"
import {$ModExplosionContext, $ModExplosionContext$Type} from "packages/dev/xkmc/l2library/init/explosion/$ModExplosionContext"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BaseExplosion extends $Explosion {
readonly "base": $BaseExplosionContext
readonly "mod": $ModExplosionContext
readonly "mc": $VanillaExplosionContext
readonly "fire": boolean
readonly "blockInteraction": $Explosion$BlockInteraction
readonly "level": $Level
readonly "x": double
readonly "y": double
readonly "z": double
 "source": $Entity
 "radius": float
 "damageSource": $DamageSource
readonly "damageCalculator": $ExplosionDamageCalculator

constructor(arg0: $BaseExplosionContext$Type, arg1: $VanillaExplosionContext$Type, arg2: $ModExplosionContext$Type)

public "hurtEntity"(arg0: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseExplosion$Type = ($BaseExplosion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseExplosion_ = $BaseExplosion$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/curios/$DescCurioItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DescCurioItem extends $CurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DescCurioItem$Type = ($DescCurioItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DescCurioItem_ = $DescCurioItem$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$BaseOpenableScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$BaseContainerScreen, $BaseContainerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerScreen"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $BaseOpenableScreen<T extends $BaseContainerMenu<(T)>> extends $BaseContainerScreen<(T)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: T, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseOpenableScreen$Type<T> = ($BaseOpenableScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseOpenableScreen_<T> = $BaseOpenableScreen$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$GolemEquipmentRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$MetalGolemEntity, $MetalGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemEntity"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MetalGolemModel, $MetalGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $GolemEquipmentRenderer extends $RenderLayer<($MetalGolemEntity), ($MetalGolemModel)> {
 "map": $HashMap<($ModelLayerLocation), ($MetalGolemModel)>

constructor(arg0: $RenderLayerParent$Type<($MetalGolemEntity$Type), ($MetalGolemModel$Type)>, arg1: $EntityRendererProvider$Context$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $MetalGolemEntity$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemEquipmentRenderer$Type = ($GolemEquipmentRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemEquipmentRenderer_ = $GolemEquipmentRenderer$Type;
}}
declare module "packages/dev/xkmc/l2serial/network/$SerialPacketBase" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$SimplePacketBase, $SimplePacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SimplePacketBase"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $SerialPacketBase extends $SimplePacketBase {

constructor()

public "write"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): void
public "handle"(arg0: $NetworkEvent$Context$Type): void
public static "serial"<T extends $SerialPacketBase>(arg0: $Class$Type<(T)>, arg1: $FriendlyByteBuf$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SerialPacketBase$Type = ($SerialPacketBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SerialPacketBase_ = $SerialPacketBase$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/ars/$ArsRecipeBuilder" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ArsRecipeBuilder$WrappedIngredient, $ArsRecipeBuilder$WrappedIngredient$Type} from "packages/dev/xkmc/l2complements/compat/ars/$ArsRecipeBuilder$WrappedIngredient"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ArsRecipeBuilder extends $Record {

constructor(type: $ResourceLocation$Type, enchantment: $Enchantment$Type, level: integer, sourceCost: integer, pedestalItems: $ArrayList$Type<($ArsRecipeBuilder$WrappedIngredient$Type)>)

public "type"(): $ResourceLocation
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"(arg0: $Enchantment$Type, arg1: integer, arg2: integer, arg3: $List$Type<($Ingredient$Type)>): $ArsRecipeBuilder
public "level"(): integer
public "enchantment"(): $Enchantment
public "pedestalItems"(): $ArrayList<($ArsRecipeBuilder$WrappedIngredient)>
public "sourceCost"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArsRecipeBuilder$Type = ($ArsRecipeBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArsRecipeBuilder_ = $ArsRecipeBuilder$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/misc/$GeckoLibEventHandlers" {
import {$GeoRenderEvent$Entity$Post, $GeoRenderEvent$Entity$Post$Type} from "packages/software/bernie/geckolib/event/$GeoRenderEvent$Entity$Post"

export class $GeckoLibEventHandlers {

constructor()

public static "onGeckoRenderPost"(arg0: $GeoRenderEvent$Entity$Post$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeckoLibEventHandlers$Type = ($GeckoLibEventHandlers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeckoLibEventHandlers_ = $GeckoLibEventHandlers$Type;
}}
declare module "packages/dev/xkmc/l2library/base/effects/$ClientEffectCap" {
import {$GeneralCapabilityTemplate, $GeneralCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityTemplate"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$GeneralCapabilityHolder, $GeneralCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/entity/$GeneralCapabilityHolder"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ClientEffectCap extends $GeneralCapabilityTemplate<($LivingEntity), ($ClientEffectCap)> {
static readonly "CAPABILITY": $Capability<($ClientEffectCap)>
static readonly "HOLDER": $GeneralCapabilityHolder<($LivingEntity), ($ClientEffectCap)>
readonly "map": $Map<($MobEffect), (integer)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEffectCap$Type = ($ClientEffectCap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEffectCap_ = $ClientEffectCap$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/compat/$GuiProperties" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$IGuiProperties, $IGuiProperties$Type} from "packages/mezz/jei/api/gui/handlers/$IGuiProperties"

export class $GuiProperties implements $IGuiProperties {

constructor(arg0: $Class$Type<(any)>, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer)

public "getScreenWidth"(): integer
public "getScreenHeight"(): integer
public "getScreenClass"(): $Class<(any)>
public "getGuiXSize"(): integer
public "getGuiYSize"(): integer
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
get "screenWidth"(): integer
get "screenHeight"(): integer
get "screenClass"(): $Class<(any)>
get "guiXSize"(): integer
get "guiYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuiProperties$Type = ($GuiProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuiProperties_ = $GuiProperties$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FilterTabManager, $FilterTabManager$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$FilterTabType, $FilterTabType$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabType"
import {$FilterTabToken$TabFactory, $FilterTabToken$TabFactory$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken$TabFactory"
import {$FilterTabBase, $FilterTabBase$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabBase"

export class $FilterTabToken<T extends $FilterTabBase<(T)>> {
readonly "factory": $FilterTabToken$TabFactory<(T)>
readonly "type": $FilterTabType

constructor(arg0: $FilterTabToken$TabFactory$Type<(T)>, arg1: $Supplier$Type<($Item$Type)>, arg2: $Component$Type)

public "create"(arg0: integer, arg1: $FilterTabManager$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilterTabToken$Type<T> = ($FilterTabToken<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilterTabToken_<T> = $FilterTabToken$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$EnchantmentRecipeBuilder" {
import {$RecipeBuilder, $RecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$RecipeBuilder"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$CriterionTriggerInstance, $CriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/$CriterionTriggerInstance"

export class $EnchantmentRecipeBuilder implements $RecipeBuilder {
readonly "enchantment": $Enchantment
readonly "level": integer
readonly "rows": $List<(string)>
readonly "key": $Map<(character), ($Ingredient)>

constructor(arg0: $Enchantment$Type, arg1: integer)

public "group"(arg0: string): $EnchantmentRecipeBuilder
public "pattern"(arg0: string): $EnchantmentRecipeBuilder
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>): void
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public "define"(arg0: character, arg1: $ItemLike$Type): $EnchantmentRecipeBuilder
public "define"(arg0: character, arg1: $TagKey$Type<($Item$Type)>): $EnchantmentRecipeBuilder
public "define"(arg0: character, arg1: $Ingredient$Type): $EnchantmentRecipeBuilder
public "unlockedBy"(arg0: string, arg1: $CriterionTriggerInstance$Type): $EnchantmentRecipeBuilder
public "getResult"(): $Item
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: string): void
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
get "result"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentRecipeBuilder$Type = ($EnchantmentRecipeBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentRecipeBuilder_ = $EnchantmentRecipeBuilder$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/common/$EnderParticleBlock" {
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AnimateTickBlockMethod, $AnimateTickBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$AnimateTickBlockMethod"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $EnderParticleBlock implements $AnimateTickBlockMethod {
static "INSTANCE": $EnderParticleBlock

constructor()

public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderParticleBlock$Type = ($EnderParticleBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderParticleBlock_ = $EnderParticleBlock$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/chunk/$SectionDifficulty" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$ChunkDifficulty, $ChunkDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkDifficulty"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MobDifficultyCollector, $MobDifficultyCollector$Type} from "packages/dev/xkmc/l2hostility/content/logic/$MobDifficultyCollector"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$LevelEditor, $LevelEditor$Type} from "packages/dev/xkmc/l2hostility/content/logic/$LevelEditor"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SectionDifficulty {
 "activePos": $BlockPos

constructor()

public "isCleared"(): boolean
public static "sectionAt"(arg0: $Level$Type, arg1: $BlockPos$Type): $Optional<($SectionDifficulty)>
public "addKillHistory"(arg0: $ChunkDifficulty$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $MobTraitCap$Type): void
public "getScale"(arg0: $Level$Type, arg1: $BlockPos$Type): double
public "modifyInstance"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $MobDifficultyCollector$Type): void
public "setClear"(arg0: $ChunkDifficulty$Type, arg1: $BlockPos$Type): boolean
public "getLevelEditor"(arg0: $Level$Type, arg1: $BlockPos$Type): $LevelEditor
public "getSectionDifficultyDetail"(arg0: $Player$Type): $List<($Component)>
public "setUnclear"(arg0: $ChunkDifficulty$Type, arg1: $BlockPos$Type): boolean
get "cleared"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SectionDifficulty$Type = ($SectionDifficulty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SectionDifficulty_ = $SectionDifficulty$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/data/$FloatDataSlot" {
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"

export class $FloatDataSlot {

constructor(arg0: $AbstractContainerMenu$Type)

public "get"(): float
public "set"(arg0: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FloatDataSlot$Type = ($FloatDataSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FloatDataSlot_ = $FloatDataSlot$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabManager" {
import {$RecycleTab, $RecycleTab$Type} from "packages/dev/xkmc/l2artifacts/content/search/recycle/$RecycleTab"
import {$ShapeTab, $ShapeTab$Type} from "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeTab"
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$IFilterScreen, $IFilterScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$IFilterScreen"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$FilteredTab, $FilteredTab$Type} from "packages/dev/xkmc/l2artifacts/content/search/fitered/$FilteredTab"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$SortTab, $SortTab$Type} from "packages/dev/xkmc/l2artifacts/content/search/sort/$SortTab"
import {$FilterTabToken, $FilterTabToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/tabs/$FilterTabToken"
import {$UpgradeTab, $UpgradeTab$Type} from "packages/dev/xkmc/l2artifacts/content/search/upgrade/$UpgradeTab"
import {$FilterTab, $FilterTab$Type} from "packages/dev/xkmc/l2artifacts/content/search/filter/$FilterTab"
import {$AugmentTab, $AugmentTab$Type} from "packages/dev/xkmc/l2artifacts/content/search/augment/$AugmentTab"
import {$DissolveTab, $DissolveTab$Type} from "packages/dev/xkmc/l2artifacts/content/search/dissolve/$DissolveTab"

export class $FilterTabManager {
static readonly "FILTERED": $FilterTabToken<($FilteredTab)>
static readonly "FILTER": $FilterTabToken<($FilterTab)>
static readonly "SORT": $FilterTabToken<($SortTab)>
static readonly "RECYCLE": $FilterTabToken<($RecycleTab)>
static readonly "UPGRADE": $FilterTabToken<($UpgradeTab)>
static readonly "DISSOLVE": $FilterTabToken<($DissolveTab)>
static readonly "AUGMENT": $FilterTabToken<($AugmentTab)>
static readonly "SHAPE": $FilterTabToken<($ShapeTab)>
readonly "screen": $IFilterScreen
readonly "token": $ArtifactChestToken
 "tabPage": integer
 "selected": $FilterTabToken<(any)>

constructor(arg0: $IFilterScreen$Type, arg1: $ArtifactChestToken$Type)

public "init"(arg0: $Consumer$Type<($AbstractWidget$Type)>, arg1: $FilterTabToken$Type<(any)>): void
public "getScreen"(): $Screen
public "onToolTipRender"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer): void
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilterTabManager$Type = ($FilterTabManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilterTabManager_ = $FilterTabManager$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/bag/$FastBagItemHandler" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AbstractBag, $AbstractBag$Type} from "packages/dev/xkmc/l2backpack/content/bag/$AbstractBag"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandlerModifiable, $IItemHandlerModifiable$Type} from "packages/net/minecraftforge/items/$IItemHandlerModifiable"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export class $FastBagItemHandler extends $Record implements $IItemHandlerModifiable {

constructor(bag: $AbstractBag$Type, bagStack: $ItemStack$Type, list: $NonNullList$Type<($ItemStack$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "list"(): $NonNullList<($ItemStack)>
public "getSlots"(): integer
public "bag"(): $AbstractBag
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "bagStack"(): $ItemStack
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "slots"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FastBagItemHandler$Type = ($FastBagItemHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FastBagItemHandler_ = $FastBagItemHandler$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$IntSupplier, $IntSupplier$Type} from "packages/java/util/function/$IntSupplier"
import {$TraitEffectCache, $TraitEffectCache$Type} from "packages/dev/xkmc/l2hostility/content/logic/$TraitEffectCache"
import {$TraitConfig, $TraitConfig$Type} from "packages/dev/xkmc/l2hostility/content/config/$TraitConfig"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$InheritContext, $InheritContext$Type} from "packages/dev/xkmc/l2hostility/content/logic/$InheritContext"
import {$CreateSourceEvent, $CreateSourceEvent$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$CreateSourceEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $MobTrait extends $NamedEntry<($MobTrait)> implements $ItemLike {

constructor(arg0: $ChatFormatting$Type)
constructor(arg0: $IntSupplier$Type)

public "toString"(): string
public "initialize"(arg0: $LivingEntity$Type, arg1: integer): void
public "allow"(arg0: $LivingEntity$Type): boolean
public "allow"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer): boolean
public "is"(arg0: $TagKey$Type<($MobTrait$Type)>): boolean
public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
public "asItem"(): $Item
public "postInit"(arg0: $LivingEntity$Type, arg1: integer): void
public "getMaxLevel"(): integer
public "getConfig"(): $TraitConfig
public "inherited"(arg0: $MobTraitCap$Type, arg1: integer, arg2: $InheritContext$Type): integer
public "getColor"(): integer
public "getCost"(arg0: double): integer
public "onDamaged"(arg0: integer, arg1: $LivingEntity$Type, arg2: $AttackCache$Type): void
public "onCreateSource"(arg0: integer, arg1: $LivingEntity$Type, arg2: $CreateSourceEvent$Type): void
public "postHurtPlayer"(arg0: integer, arg1: $LivingEntity$Type, arg2: $TraitEffectCache$Type): void
public "isBanned"(): boolean
public "getFullDesc"(arg0: integer): $MutableComponent
public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onAttackedByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingAttackEvent$Type): void
public "onHurtByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingHurtEvent$Type): void
public "postHurtImpl"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "onHurtTarget"(arg0: integer, arg1: $LivingEntity$Type, arg2: $AttackCache$Type, arg3: $TraitEffectCache$Type): void
public "onDeath"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingDeathEvent$Type): void
get "maxLevel"(): integer
get "config"(): $TraitConfig
get "color"(): integer
get "banned"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobTrait$Type = ($MobTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobTrait_ = $MobTrait$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericArmorItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ExtraArmorConfig, $ExtraArmorConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraArmorConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$ArmorItem, $ArmorItem$Type} from "packages/net/minecraft/world/item/$ArmorItem"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GenericArmorItem extends $ArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorMaterial$Type, arg1: $ArmorItem$Type$Type, arg2: $Item$Properties$Type, arg3: $ExtraArmorConfig$Type)

public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getConfig"(): $ExtraArmorConfig
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onArmorTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Player$Type): void
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
public static "get"(arg0: $ItemStack$Type): $Equipable
get "config"(): $ExtraArmorConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericArmorItem$Type = ($GenericArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericArmorItem_ = $GenericArmorItem$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/armorswap/$ArmorSetSwap" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SetSwapItem, $SetSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$SetSwapItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemOnBackItem, $ItemOnBackItem$Type} from "packages/dev/xkmc/l2backpack/content/render/$ItemOnBackItem"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ArmorSetSwap extends $SetSwapItem implements $ItemOnBackItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "open"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type): void
public "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
public "isValidContent"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "shouldRender"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorSetSwap$Type = ($ArmorSetSwap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorSetSwap_ = $ArmorSetSwap$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/traits/$EffectBooster" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EffectBooster {

constructor()

public static "boostBottle"(arg0: $LivingEntity$Type): void
public static "boostTrait"(arg0: $LivingEntity$Type, arg1: double, arg2: integer): void
public static "boostInfinite"(arg0: $LivingEntity$Type): void
public static "boostCharge"(arg0: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectBooster$Type = ($EffectBooster);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectBooster_ = $EffectBooster$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/$ModularGolems" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$GolemMaterialConfig, $GolemMaterialConfig$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemMaterialConfig"
import {$GatherDataEvent, $GatherDataEvent$Type} from "packages/net/minecraftforge/data/event/$GatherDataEvent"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$PacketHandlerWithConfig, $PacketHandlerWithConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig"
import {$InterModEnqueueEvent, $InterModEnqueueEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$InterModEnqueueEvent"
import {$GolemPartConfig, $GolemPartConfig$Type} from "packages/dev/xkmc/modulargolems/content/config/$GolemPartConfig"
import {$ConfigTypeEntry, $ConfigTypeEntry$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigTypeEntry"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"
import {$EntityAttributeModificationEvent, $EntityAttributeModificationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeModificationEvent"

export class $ModularGolems {
static readonly "MODID": string
static readonly "LOGGER": $Logger
static readonly "REGISTRATE": $L2Registrate
static readonly "MOD_BUS": $IEventBus
static readonly "HANDLER": $PacketHandlerWithConfig
static readonly "PARTS": $ConfigTypeEntry<($GolemPartConfig)>
static readonly "MATERIALS": $ConfigTypeEntry<($GolemMaterialConfig)>

constructor()

public static "setup"(arg0: $FMLCommonSetupEvent$Type): void
public static "gatherData"(arg0: $GatherDataEvent$Type): void
public static "sendMessage"(arg0: $InterModEnqueueEvent$Type): void
public static "modifyAttributes"(arg0: $EntityAttributeModificationEvent$Type): void
set "up"(value: $FMLCommonSetupEvent$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModularGolems$Type = ($ModularGolems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModularGolems_ = $ModularGolems$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/player/$PlayerDifficulty" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$LevelEditor, $LevelEditor$Type} from "packages/dev/xkmc/l2hostility/content/logic/$LevelEditor"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TreeSet, $TreeSet$Type} from "packages/java/util/$TreeSet"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$PlayerCapabilityHolder, $PlayerCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder"
import {$ChunkDifficulty, $ChunkDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkDifficulty"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MobDifficultyCollector, $MobDifficultyCollector$Type} from "packages/dev/xkmc/l2hostility/content/logic/$MobDifficultyCollector"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PlayerCapabilityTemplate, $PlayerCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate"
import {$DifficultyLevel, $DifficultyLevel$Type} from "packages/dev/xkmc/l2hostility/content/logic/$DifficultyLevel"

export class $PlayerDifficulty extends $PlayerCapabilityTemplate<($PlayerDifficulty)> {
static readonly "CAPABILITY": $Capability<($PlayerDifficulty)>
static readonly "HOLDER": $PlayerCapabilityHolder<($PlayerDifficulty)>
 "maxRankKilled": integer
 "rewardCount": integer
readonly "dimensions": $TreeSet<($ResourceLocation)>
 "prevChunk": $ChunkDifficulty
 "player": $Player
 "world": $Level

constructor()

public "apply"(arg0: $MobDifficultyCollector$Type): void
public static "register"(): void
public "sync"(): void
public "tick"(): void
public "getLevel"(): $DifficultyLevel
public "getRankCap"(): integer
public "getRewardCount"(): integer
public "addKillCredit"(arg0: $MobTraitCap$Type): void
public "getLevelEditor"(): $LevelEditor
public "onClone"(arg0: boolean): void
public "getPlayerDifficultyDetail"(): $List<($Component)>
get "level"(): $DifficultyLevel
get "rankCap"(): integer
get "rewardCount"(): integer
get "levelEditor"(): $LevelEditor
get "playerDifficultyDetail"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerDifficulty$Type = ($PlayerDifficulty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerDifficulty_ = $PlayerDifficulty$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$OddeyesGlasses" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $OddeyesGlasses extends $CurioItem implements $ICurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "hasCurioCapability"(arg0: $ItemStack$Type): boolean
public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "canUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type, arg1: $ItemStack$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "writeSyncData"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public "writeSyncData"(arg0: $ItemStack$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: $ItemStack$Type): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "canEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type, arg2: $ItemStack$Type): boolean
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type, arg2: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OddeyesGlasses$Type = ($OddeyesGlasses);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OddeyesGlasses_ = $OddeyesGlasses$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$BackpackConfig$Client" {
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"

export class $BackpackConfig$Client {
readonly "previewOnCenter": $ForgeConfigSpec$BooleanValue
readonly "popupArrowOnSwitch": $ForgeConfigSpec$BooleanValue
readonly "popupToolOnSwitch": $ForgeConfigSpec$BooleanValue
readonly "popupArmorOnSwitch": $ForgeConfigSpec$BooleanValue
readonly "drawerAlwaysRenderFlat": $ForgeConfigSpec$BooleanValue
readonly "reverseScroll": $ForgeConfigSpec$BooleanValue
readonly "backpackInsertRequiresShift": $ForgeConfigSpec$BooleanValue
readonly "backpackEnableLeftClickInsert": $ForgeConfigSpec$BooleanValue
readonly "backpackEnableRightClickInsert": $ForgeConfigSpec$BooleanValue


public "allowBackpackInsert"(arg0: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackConfig$Client$Type = ($BackpackConfig$Client);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackConfig$Client_ = $BackpackConfig$Client$Type;
}}
declare module "packages/dev/xkmc/l2library/util/raytrace/$IGlowingTarget" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IGlowingTarget {

 "getDistance"(arg0: $ItemStack$Type): integer

(arg0: $ItemStack$Type): integer
}

export namespace $IGlowingTarget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IGlowingTarget$Type = ($IGlowingTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IGlowingTarget_ = $IGlowingTarget$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v4/$LuckAttackData" {
import {$AttributeSetData, $AttributeSetData$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$AttributeSetData$AttributePair, $AttributeSetData$AttributePair$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetData$AttributePair"

export class $LuckAttackData extends $AttributeSetData {
 "count": integer
 "list": $ArrayList<($AttributeSetData$AttributePair)>
 "life": integer
 "rank": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LuckAttackData$Type = ($LuckAttackData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LuckAttackData_ = $LuckAttackData$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/capability/$GolemConfigEntry" {
import {$TargetFilterConfig, $TargetFilterConfig$Type} from "packages/dev/xkmc/modulargolems/content/capability/$TargetFilterConfig"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PathConfig, $PathConfig$Type} from "packages/dev/xkmc/modulargolems/content/capability/$PathConfig"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$SyncContainer, $SyncContainer$Type} from "packages/dev/xkmc/modulargolems/content/capability/$SyncContainer"
import {$PickupFilterConfig, $PickupFilterConfig$Type} from "packages/dev/xkmc/modulargolems/content/capability/$PickupFilterConfig"
import {$SquadConfig, $SquadConfig$Type} from "packages/dev/xkmc/modulargolems/content/capability/$SquadConfig"

export class $GolemConfigEntry {
readonly "sync": $SyncContainer
 "defaultMode": integer
 "summonToPosition": boolean
 "locked": boolean
 "pickupFilter": $PickupFilterConfig
 "targetFilter": $TargetFilterConfig
 "squadConfig": $SquadConfig
 "pathConfig": $PathConfig

/**
 * 
 * @deprecated
 */
constructor()

public static "getDefault"(arg0: $UUID$Type, arg1: integer, arg2: $Component$Type): $GolemConfigEntry
public "init"(arg0: $UUID$Type, arg1: integer): $GolemConfigEntry
public "setName"(arg0: $Component$Type, arg1: $ServerLevel$Type): void
public "sync"(arg0: $Level$Type): void
public "getDisplayName"(): $Component
public "getID"(): $UUID
public "copyFrom"(arg0: $GolemConfigEntry$Type): $GolemConfigEntry
public "clientTick"(arg0: $Level$Type, arg1: boolean): void
public "getColor"(): integer
public "heartBeat"(arg0: $ServerLevel$Type, arg1: $ServerPlayer$Type): void
get "displayName"(): $Component
get "iD"(): $UUID
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemConfigEntry$Type = ($GolemConfigEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemConfigEntry_ = $GolemConfigEntry$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/card/$PathRecordCard$Pos" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $PathRecordCard$Pos extends $Record {

constructor(level: $ResourceLocation$Type, pos: $BlockPos$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "pos"(): $BlockPos
public "level"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathRecordCard$Pos$Type = ($PathRecordCard$Pos);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathRecordCard$Pos_ = $PathRecordCard$Pos$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/goals/$CounterStrikeTrait" {
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CounterStrikeTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "tick"(arg0: $LivingEntity$Type, arg1: integer): void
public "onHurtByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingHurtEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CounterStrikeTrait$Type = ($CounterStrikeTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CounterStrikeTrait_ = $CounterStrikeTrait$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$BattleAxeItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SlowWieldItem, $SlowWieldItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$SlowWieldItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BattleAxeItem extends $SlowWieldItem {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "canDisableShield"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $LivingEntity$Type, arg3: $LivingEntity$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BattleAxeItem$Type = ($BattleAxeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BattleAxeItem_ = $BattleAxeItem$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$IFilterMenu, $IFilterMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$IFilterMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ShapeSlots, $ShapeSlots$Type} from "packages/dev/xkmc/l2artifacts/content/search/shape/$ShapeSlots"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$PredSlot, $PredSlot$Type} from "packages/dev/xkmc/l2library/base/menu/base/$PredSlot"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $ShapeMenu extends $BaseContainerMenu<($ShapeMenu)> implements $IFilterMenu {
readonly "token": $ArtifactChestToken
readonly "player": $Player
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $ArtifactChestToken$Type)

public "getAsPredSlot"(arg0: $ShapeSlots$Type, arg1: integer): $PredSlot
public "getAsPredSlot"(arg0: $ShapeSlots$Type): $PredSlot
public static "fromNetwork"(arg0: $MenuType$Type<($ShapeMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $ShapeMenu
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeMenu$Type = ($ShapeMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeMenu_ = $ShapeMenu$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/base/$PotionAttackModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $PotionAttackModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: $StatFilterType$Type, arg1: integer, arg2: $Function$Type<(integer), ($MobEffectInstance$Type)>)

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onHurtTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
public "onHurt"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotionAttackModifier$Type = ($PotionAttackModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotionAttackModifier_ = $PotionAttackModifier$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/dissolve/$DissolveMenuScreen" {
import {$DissolveMenu, $DissolveMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/dissolve/$DissolveMenu"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractScrollerScreen, $AbstractScrollerScreen$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$AbstractScrollerScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $DissolveMenuScreen extends $AbstractScrollerScreen<($DissolveMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $DissolveMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "getTitle"(): $Component
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "title"(): $Component
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DissolveMenuScreen$Type = ($DissolveMenuScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DissolveMenuScreen_ = $DissolveMenuScreen$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/twilightforest/$TFDispatch" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$ModDispatch, $ModDispatch$Type} from "packages/dev/xkmc/modulargolems/compat/materials/common/$ModDispatch"
import {$DataGenerator, $DataGenerator$Type} from "packages/net/minecraft/data/$DataGenerator"
import {$ConfigDataProvider, $ConfigDataProvider$Type} from "packages/dev/xkmc/l2library/serial/config/$ConfigDataProvider"

export class $TFDispatch extends $ModDispatch {
static readonly "MODID": string

constructor()

public "genRecipe"(arg0: $RegistrateRecipeProvider$Type): void
public "genLang"(arg0: $RegistrateLangProvider$Type): void
public "getDataGen"(arg0: $DataGenerator$Type): $ConfigDataProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TFDispatch$Type = ($TFDispatch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TFDispatch_ = $TFDispatch$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/special/$TalentMetaModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"

export class $TalentMetaModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "addSlot"(arg0: $List$Type<($UpgradeItem$Type)>, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TalentMetaModifier$Type = ($TalentMetaModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TalentMetaModifier_ = $TalentMetaModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$LootingCharm" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$MultiSlotItem, $MultiSlotItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$MultiSlotItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LootingCharm extends $MultiSlotItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootingCharm$Type = ($LootingCharm);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootingCharm_ = $LootingCharm$Type;
}}
declare module "packages/dev/xkmc/l2backpack/init/data/$LangData" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LangData$Info, $LangData$Info$Type} from "packages/dev/xkmc/l2backpack/init/data/$LangData$Info"

export class $LangData {

constructor()

public static "altInsert"(arg0: $List$Type<($Component$Type)>): void
public static "asId"(arg0: string): string
public static "addTranslations"(arg0: $BiConsumer$Type<(string), (string)>): void
public static "addInfo"(arg0: $List$Type<($Component$Type)>, ...arg1: ($LangData$Info$Type)[]): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LangData$Type = ($LangData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LangData_ = $LangData$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/goals/$TeleportToOwnerGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"

export class $TeleportToOwnerGoal extends $Goal {

constructor(arg0: $AbstractGolemEntity$Type<(any), (any)>)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeleportToOwnerGoal$Type = ($TeleportToOwnerGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeleportToOwnerGoal_ = $TeleportToOwnerGoal$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/ghost/$GhostItemScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ITabScreen, $ITabScreen$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$ITabScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GhostItemMenu, $GhostItemMenu$Type} from "packages/dev/xkmc/modulargolems/content/menu/ghost/$GhostItemMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $GhostItemScreen<T extends $GhostItemMenu> extends $AbstractContainerScreen<(T)> implements $ITabScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: T, arg1: $Inventory$Type, arg2: $Component$Type)

public "screenHeight"(): integer
public "screenWidth"(): integer
public "addGhost"(arg0: integer, arg1: $ItemStack$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "asScreen"(): $Screen
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GhostItemScreen$Type<T> = ($GhostItemScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GhostItemScreen_<T> = $GhostItemScreen$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v2/$PhysicalDamageEffect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$AttrSetEntry, $AttrSetEntry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttrSetEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeSetEffect, $AttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetEffect"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $PhysicalDamageEffect extends $AttributeSetEffect {
readonly "ids": integer

constructor(arg0: $AttrSetEntry$Type, arg1: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PhysicalDamageEffect$Type = ($PhysicalDamageEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PhysicalDamageEffect_ = $PhysicalDamageEffect$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$SlotFactory" {
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"

export interface $MenuLayoutConfig$SlotFactory<T extends $Slot> {

 "getSlot"(arg0: integer, arg1: integer): T

(arg0: integer, arg1: integer): T
}

export namespace $MenuLayoutConfig$SlotFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuLayoutConfig$SlotFactory$Type<T> = ($MenuLayoutConfig$SlotFactory<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuLayoutConfig$SlotFactory_<T> = $MenuLayoutConfig$SlotFactory$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/client/pose/$WeaponPose" {
import {$MetalGolemEntity, $MetalGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemEntity"
import {$MetalGolemModel, $MetalGolemModel$Type} from "packages/dev/xkmc/modulargolems/content/entity/metalgolem/$MetalGolemModel"
import {$MetalGolemPose, $MetalGolemPose$Type} from "packages/dev/xkmc/modulargolems/content/client/pose/$MetalGolemPose"

export class $WeaponPose extends $MetalGolemPose {
static readonly "WEAPON": $MetalGolemPose
static readonly "DEFAULT": $MetalGolemPose

constructor()

public "aggressive"(arg0: $MetalGolemEntity$Type, arg1: $MetalGolemModel$Type, arg2: float, arg3: float, arg4: float): void
public "attackModel"(arg0: $MetalGolemEntity$Type, arg1: $MetalGolemModel$Type, arg2: float): void
public "walking"(arg0: $MetalGolemEntity$Type, arg1: $MetalGolemModel$Type, arg2: float, arg3: float, arg4: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeaponPose$Type = ($WeaponPose);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeaponPose_ = $WeaponPose$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/augment/$AugmentMenu" {
import {$IntDataSlot, $IntDataSlot$Type} from "packages/dev/xkmc/l2library/base/menu/data/$IntDataSlot"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$IFilterMenu, $IFilterMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$IFilterMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseContainerMenu, $BaseContainerMenu$Type} from "packages/dev/xkmc/l2library/base/menu/base/$BaseContainerMenu"

export class $AugmentMenu extends $BaseContainerMenu<($AugmentMenu)> implements $IFilterMenu {
readonly "token": $ArtifactChestToken
readonly "player": $Player
readonly "experience": $IntDataSlot
readonly "exp_cost": $IntDataSlot
readonly "mask": $IntDataSlot
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $ArtifactChestToken$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($AugmentMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $AugmentMenu
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AugmentMenu$Type = ($AugmentMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AugmentMenu_ = $AugmentMenu$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/jei/$JEICompat" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$GLMRecipeCategory, $GLMRecipeCategory$Type} from "packages/dev/xkmc/l2hostility/compat/jei/$GLMRecipeCategory"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $JEICompat implements $IModPlugin {
static readonly "ID": $ResourceLocation
readonly "LOOT": $GLMRecipeCategory

constructor()

public "getPluginUid"(): $ResourceLocation
public "registerRecipes"(arg0: $IRecipeRegistration$Type): void
public "registerCategories"(arg0: $IRecipeCategoryRegistration$Type): void
public "registerItemSubtypes"(arg0: $ISubtypeRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "registerGuiHandlers"(arg0: $IGuiHandlerRegistration$Type): void
public "onRuntimeUnavailable"(): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipeCatalysts"(arg0: $IRecipeCatalystRegistration$Type): void
public "registerAdvanced"(arg0: $IAdvancedRegistration$Type): void
public "onRuntimeAvailable"(arg0: $IJeiRuntime$Type): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JEICompat$Type = ($JEICompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JEICompat_ = $JEICompat$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$BlockPickupInvWrapper" {
import {$WorldChestInvWrapper, $WorldChestInvWrapper$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestInvWrapper"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$StorageContainer, $StorageContainer$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$StorageContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$WorldChestBlockEntity, $WorldChestBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestBlockEntity"

export class $BlockPickupInvWrapper extends $WorldChestInvWrapper {

constructor(arg0: $ServerLevel$Type, arg1: $WorldChestBlockEntity$Type, arg2: $StorageContainer$Type, arg3: $PickupConfig$Type)

public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockPickupInvWrapper$Type = ($BlockPickupInvWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockPickupInvWrapper_ = $BlockPickupInvWrapper$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$EstiResult" {
import {$Estimator$EstiType, $Estimator$EstiType$Type} from "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$EstiType"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"

export interface $Estimator$EstiResult {

 "getType"(): $Estimator$EstiType
 "getT"(): double
 "getA"(): double
 "getVec"(): $Vec3
}

export namespace $Estimator$EstiResult {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Estimator$EstiResult$Type = ($Estimator$EstiResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Estimator$EstiResult_ = $Estimator$EstiResult$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/client/tab/$DarkTextColorRanks" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $DarkTextColorRanks extends $Enum<($DarkTextColorRanks)> {
static readonly "WHITE": $DarkTextColorRanks
static readonly "GREEN": $DarkTextColorRanks
static readonly "BLUE": $DarkTextColorRanks
static readonly "PURPLE": $DarkTextColorRanks
static readonly "GOLD": $DarkTextColorRanks
readonly "light": $ChatFormatting
readonly "dark": $ChatFormatting


public static "values"(): ($DarkTextColorRanks)[]
public static "valueOf"(arg0: string): $DarkTextColorRanks
public static "getDark"(arg0: integer): $ChatFormatting
public static "getLight"(arg0: integer): $ChatFormatting
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DarkTextColorRanks$Type = (("gold") | ("green") | ("white") | ("blue") | ("purple")) | ($DarkTextColorRanks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DarkTextColorRanks_ = $DarkTextColorRanks$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/consumable/$EffectBoosterBottle" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DrinkableBottleItem, $DrinkableBottleItem$Type} from "packages/dev/xkmc/l2hostility/content/item/consumable/$DrinkableBottleItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EffectBoosterBottle extends $DrinkableBottleItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectBoosterBottle$Type = ($EffectBoosterBottle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectBoosterBottle_ = $EffectBoosterBottle$Type;
}}
declare module "packages/dev/xkmc/l2backpack/compat/$CuriosCompat" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CuriosCompat {

constructor()

public static "getSlot"(arg0: $LivingEntity$Type, arg1: $Predicate$Type<($ItemStack$Type)>): $Optional<($Pair<($ItemStack), ($PlayerSlot<(any)>)>)>
public static "getRenderingSlot"(arg0: $LivingEntity$Type, arg1: $Predicate$Type<($ItemStack$Type)>): $Optional<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CuriosCompat$Type = ($CuriosCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CuriosCompat_ = $CuriosCompat$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/advancements/$AdvBuilderWrapper" {
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Criterion, $Criterion$Type} from "packages/net/minecraft/advancements/$Criterion"
import {$Advancement, $Advancement$Type} from "packages/net/minecraft/advancements/$Advancement"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$IAdvBuilder, $IAdvBuilder$Type} from "packages/dev/xkmc/l2library/serial/advancements/$IAdvBuilder"

export class $AdvBuilderWrapper extends $Advancement {
 "criteria": $Map<(string), ($Criterion)>
 "requirements": ((string)[])[]

constructor(arg0: $Advancement$Type, arg1: $List$Type<($IAdvBuilder$Type)>)

public "deconstruct"(): $Advancement$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvBuilderWrapper$Type = ($AdvBuilderWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvBuilderWrapper_ = $AdvBuilderWrapper$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/client/tab/$TabSetEffects" {
import {$BaseTab, $BaseTab$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$BaseTab"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TabToken, $TabToken$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabToken"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TabManager, $TabManager$Type} from "packages/dev/xkmc/l2tabs/tabs/core/$TabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $TabSetEffects extends $BaseTab<($TabSetEffects)> {
readonly "stack": $ItemStack
readonly "token": $TabToken<(T)>
readonly "manager": $TabManager
 "page": integer
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $TabToken$Type<($TabSetEffects$Type)>, arg1: $TabManager$Type, arg2: $ItemStack$Type, arg3: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TabSetEffects$Type = ($TabSetEffects);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TabSetEffects_ = $TabSetEffects$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/create/automation/$CreateGolemRecipeGen" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"

export class $CreateGolemRecipeGen {

constructor()

public static "genSpecialRecipes"(arg0: $RegistrateRecipeProvider$Type): void
public static "genAllUpgradeRecipes"(arg0: $RegistrateRecipeProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateGolemRecipeGen$Type = ($CreateGolemRecipeGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateGolemRecipeGen_ = $CreateGolemRecipeGen$Type;
}}
declare module "packages/dev/xkmc/l2hostility/mixin/$ForgeInternalHandlerAccessor" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ForgeInternalHandlerAccessor {

}

export namespace $ForgeInternalHandlerAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeInternalHandlerAccessor$Type = ($ForgeInternalHandlerAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeInternalHandlerAccessor_ = $ForgeInternalHandlerAccessor$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/aerial/$VoluciteTool" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"
import {$LWExtraConfig, $LWExtraConfig$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWExtraConfig"

export class $VoluciteTool extends $ExtraToolConfig implements $LWExtraConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "getReflectSource"(arg0: $Player$Type): $DamageSource
public "onShieldReflect"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type, arg3: double, arg4: double): double
public "onShieldBlock"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type, arg2: $Item$Type): void
public "onHurt"(arg0: $AttackCache$Type, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VoluciteTool$Type = ($VoluciteTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VoluciteTool_ = $VoluciteTool$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipe$Inv" {
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$BurntRecipe, $BurntRecipe$Type} from "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipe"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BaseRecipe$RecInv, $BaseRecipe$RecInv$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe$RecInv"

export class $BurntRecipe$Inv extends $SimpleContainer implements $BaseRecipe$RecInv<($BurntRecipe)> {

constructor()

public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BurntRecipe$Inv$Type = ($BurntRecipe$Inv);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BurntRecipe$Inv_ = $BurntRecipe$Inv$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/client/$ClawItemDecorationRenderer" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IItemDecorator, $IItemDecorator$Type} from "packages/net/minecraftforge/client/$IItemDecorator"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ClawItemDecorationRenderer implements $IItemDecorator {

constructor()

public "render"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClawItemDecorationRenderer$Type = ($ClawItemDecorationRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClawItemDecorationRenderer_ = $ClawItemDecorationRenderer$Type;
}}
declare module "packages/dev/xkmc/l2complements/compat/$LCJeiPlugin" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$BurntRecipeCategory, $BurntRecipeCategory$Type} from "packages/dev/xkmc/l2complements/compat/$BurntRecipeCategory"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$DiffuseRecipeCategory, $DiffuseRecipeCategory$Type} from "packages/dev/xkmc/l2complements/compat/$DiffuseRecipeCategory"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $LCJeiPlugin implements $IModPlugin {
static "INSTANCE": $LCJeiPlugin
readonly "UID": $ResourceLocation
readonly "BURNT": $BurntRecipeCategory
readonly "DIFFUSE": $DiffuseRecipeCategory
 "GUI_HELPER": $IGuiHelper

constructor()

public "registerItemSubtypes"(arg0: $ISubtypeRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerGuiHandlers"(arg0: $IGuiHandlerRegistration$Type): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipeCatalysts"(arg0: $IRecipeCatalystRegistration$Type): void
public "getPluginUid"(): $ResourceLocation
public "registerRecipes"(arg0: $IRecipeRegistration$Type): void
public "registerAdvanced"(arg0: $IAdvancedRegistration$Type): void
public "onRuntimeAvailable"(arg0: $IJeiRuntime$Type): void
public "registerCategories"(arg0: $IRecipeCategoryRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "onRuntimeUnavailable"(): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCJeiPlugin$Type = ($LCJeiPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCJeiPlugin_ = $LCJeiPlugin$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/misc/$FireChargeItem$PlayerFire" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BaseFireball, $BaseFireball$Type} from "packages/dev/xkmc/l2complements/content/entity/fireball/$BaseFireball"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export interface $FireChargeItem$PlayerFire<T extends $BaseFireball<(T)>> {

 "create"(arg0: $Player$Type, arg1: double, arg2: double, arg3: double, arg4: $Level$Type): T

(arg0: $Player$Type, arg1: double, arg2: double, arg3: double, arg4: $Level$Type): T
}

export namespace $FireChargeItem$PlayerFire {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireChargeItem$PlayerFire$Type<T> = ($FireChargeItem$PlayerFire<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireChargeItem$PlayerFire_<T> = $FireChargeItem$PlayerFire$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2hostility/init/network/$TraitEffects" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$TraitEffectToClient, $TraitEffectToClient$Type} from "packages/dev/xkmc/l2hostility/init/network/$TraitEffectToClient"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $TraitEffects extends $Enum<($TraitEffects)> {
static readonly "UNDYING": $TraitEffects
static readonly "AURA": $TraitEffects
readonly "func": $Supplier<($Consumer<($TraitEffectToClient)>)>


public static "values"(): ($TraitEffects)[]
public static "valueOf"(arg0: string): $TraitEffects
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitEffects$Type = (("undying") | ("aura")) | ($TraitEffects);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitEffects_ = $TraitEffects$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemTriggers" {
import {$GolemHotFixTrigger, $GolemHotFixTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemHotFixTrigger"
import {$PartCraftTrigger, $PartCraftTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$PartCraftTrigger"
import {$GolemEquipTrigger, $GolemEquipTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemEquipTrigger"
import {$UpgradeApplyTrigger, $UpgradeApplyTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$UpgradeApplyTrigger"
import {$GolemBreakToolTrigger, $GolemBreakToolTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemBreakToolTrigger"
import {$GolemMassSummonTrigger, $GolemMassSummonTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemMassSummonTrigger"
import {$GolemAnvilFixTrigger, $GolemAnvilFixTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemAnvilFixTrigger"
import {$GolemKillTrigger, $GolemKillTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemKillTrigger"
import {$GolemThunderTrigger, $GolemThunderTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemThunderTrigger"

export class $GolemTriggers {
static readonly "HOT_FIX": $GolemHotFixTrigger
static readonly "ANVIL_FIX": $GolemAnvilFixTrigger
static readonly "PART_CRAFT": $PartCraftTrigger
static readonly "UPGRADE_APPLY": $UpgradeApplyTrigger
static readonly "EQUIP": $GolemEquipTrigger
static readonly "BREAK": $GolemBreakToolTrigger
static readonly "KILL": $GolemKillTrigger
static readonly "THUNDER": $GolemThunderTrigger
static readonly "MAS_SUMMON": $GolemMassSummonTrigger

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemTriggers$Type = ($GolemTriggers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemTriggers_ = $GolemTriggers$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/skill/$SkillEffect" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $SkillEffect {

}

export namespace $SkillEffect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkillEffect$Type = ($SkillEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkillEffect_ = $SkillEffect$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$DogGolemPartType, $DogGolemPartType$Type} from "packages/dev/xkmc/modulargolems/content/entity/dog/$DogGolemPartType"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DogGolemEntity extends $AbstractGolemEntity<($DogGolemEntity), ($DogGolemPartType)> {
 "inventoryTick": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<($DogGolemEntity$Type)>, arg1: $Level$Type)

public "onPassengerTurned"(arg0: $Entity$Type): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "getControllingPassenger"(): $LivingEntity
public "getJumpStrength"(): float
public "setInSittingPose"(arg0: boolean): void
public "getTailAngle"(): float
public "isInSittingPose"(): boolean
public "getLeashOffset"(): $Vec3
public "getPassengersRidingOffset"(): double
public "setTarget"(arg0: $LivingEntity$Type): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "getTarget"(): $LivingEntity
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "controllingPassenger"(): $LivingEntity
get "jumpStrength"(): float
set "inSittingPose"(value: boolean)
get "tailAngle"(): float
get "inSittingPose"(): boolean
get "leashOffset"(): $Vec3
get "passengersRidingOffset"(): double
set "target"(value: $LivingEntity$Type)
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DogGolemEntity$Type = ($DogGolemEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DogGolemEntity_ = $DogGolemEntity$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipeBuilder" {
import {$DiffusionRecipe$Inv, $DiffusionRecipe$Inv$Type} from "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipe$Inv"
import {$DiffusionRecipe, $DiffusionRecipe$Type} from "packages/dev/xkmc/l2complements/content/recipe/$DiffusionRecipe"
import {$BaseRecipeBuilder, $BaseRecipeBuilder$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipeBuilder"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $DiffusionRecipeBuilder extends $BaseRecipeBuilder<($DiffusionRecipeBuilder), ($DiffusionRecipe), ($DiffusionRecipe), ($DiffusionRecipe$Inv)> {

constructor(arg0: $Block$Type, arg1: $Block$Type, arg2: $Block$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiffusionRecipeBuilder$Type = ($DiffusionRecipeBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiffusionRecipeBuilder_ = $DiffusionRecipeBuilder$Type;
}}
declare module "packages/dev/xkmc/l2backpack/events/$ArrowBagEvents" {
import {$ArrowBagEvents$ArrowFindEvent, $ArrowBagEvents$ArrowFindEvent$Type} from "packages/dev/xkmc/l2backpack/events/$ArrowBagEvents$ArrowFindEvent"
import {$LivingGetProjectileEvent, $LivingGetProjectileEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingGetProjectileEvent"
import {$IntConsumer, $IntConsumer$Type} from "packages/java/util/function/$IntConsumer"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ThreadLocal, $ThreadLocal$Type} from "packages/java/lang/$ThreadLocal"

export class $ArrowBagEvents {
static readonly "TEMP": $ThreadLocal<($Pair<($ItemStack), ($IntConsumer)>)>

constructor()

public static "onArrowFind"(arg0: $ArrowBagEvents$ArrowFindEvent$Type): void
public static "shrink"(arg0: $ItemStack$Type, arg1: integer): void
public static "onProjectileSearch"(arg0: $LivingGetProjectileEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowBagEvents$Type = ($ArrowBagEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowBagEvents_ = $ArrowBagEvents$Type;
}}
declare module "packages/dev/xkmc/l2modularblock/mult/$CreateBlockStateBlockMethod" {
import {$StateDefinition$Builder, $StateDefinition$Builder$Type} from "packages/net/minecraft/world/level/block/state/$StateDefinition$Builder"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$MultipleBlockMethod, $MultipleBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/type/$MultipleBlockMethod"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $CreateBlockStateBlockMethod extends $MultipleBlockMethod {

 "createBlockStateDefinition"(arg0: $StateDefinition$Builder$Type<($Block$Type), ($BlockState$Type)>): void

(arg0: $StateDefinition$Builder$Type<($Block$Type), ($BlockState$Type)>): void
}

export namespace $CreateBlockStateBlockMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateBlockStateBlockMethod$Type = ($CreateBlockStateBlockMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateBlockStateBlockMethod_ = $CreateBlockStateBlockMethod$Type;
}}
declare module "packages/dev/xkmc/l2itemselector/select/$SetSelectedToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"
import {$ISelectionListener, $ISelectionListener$Type} from "packages/dev/xkmc/l2itemselector/select/$ISelectionListener"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SetSelectedToServer extends $SerialPacketBase {
 "slot": integer
 "name": $ResourceLocation
 "isCtrlDown": boolean
 "isAltDown": boolean
 "isShiftDown": boolean

/**
 * 
 * @deprecated
 */
constructor()
constructor(arg0: $ISelectionListener$Type, arg1: integer)

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetSelectedToServer$Type = ($SetSelectedToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetSelectedToServer_ = $SetSelectedToServer$Type;
}}
declare module "packages/dev/xkmc/l2library/util/nbt/$ItemCompoundTag" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemListTag, $ItemListTag$Type} from "packages/dev/xkmc/l2library/util/nbt/$ItemListTag"

export class $ItemCompoundTag {


public static "of"(arg0: $ItemStack$Type): $ItemCompoundTag
public "isPresent"(): boolean
public "getOrCreate"(): $CompoundTag
public "getHolderStack"(): $ItemStack
public "getSubTag"(arg0: string): $ItemCompoundTag
public "setTag"(arg0: $CompoundTag$Type): void
public "getSubList"(arg0: string, arg1: integer): $ItemListTag
get "present"(): boolean
get "orCreate"(): $CompoundTag
get "holderStack"(): $ItemStack
set "tag"(value: $CompoundTag$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemCompoundTag$Type = ($ItemCompoundTag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemCompoundTag_ = $ItemCompoundTag$Type;
}}
declare module "packages/dev/xkmc/modulargolems/events/event/$GolemBowAttackEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemItemUseEvent, $GolemItemUseEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemItemUseEvent"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"

export class $GolemBowAttackEvent extends $GolemItemUseEvent {

constructor(arg0: $HumanoidGolemEntity$Type, arg1: $ItemStack$Type, arg2: $InteractionHand$Type, arg3: $AbstractArrow$Type, arg4: boolean)
constructor()

public "setArrow"(arg0: $AbstractArrow$Type): void
public "setArrow"(arg0: $AbstractArrow$Type, arg1: boolean, arg2: boolean): void
public "setParams"(arg0: double, arg1: double): void
public "isNoConsume"(): boolean
public "isNoPickup"(): boolean
public "gravity"(): double
public "speed"(): double
public "getArrow"(): $AbstractArrow
public "getListenerList"(): $ListenerList
set "arrow"(value: $AbstractArrow$Type)
get "noConsume"(): boolean
get "noPickup"(): boolean
get "arrow"(): $AbstractArrow
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemBowAttackEvent$Type = ($GolemBowAttackEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemBowAttackEvent_ = $GolemBowAttackEvent$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$ConduitModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ConduitModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "onAiStep"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: integer): void
public "onHurt"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConduitModifier$Type = ($ConduitModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConduitModifier_ = $ConduitModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/ring/$RingOfLife" {
import {$LivingDamageEvent, $LivingDamageEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDamageEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CurseCurioItem, $CurseCurioItem$Type} from "packages/dev/xkmc/l2hostility/content/item/curio/core/$CurseCurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RingOfLife extends $CurseCurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onDamage"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingDamageEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RingOfLife$Type = ($RingOfLife);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RingOfLife_ = $RingOfLife$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/curios/$SlotCondition" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"

export class $SlotCondition extends $Record {

constructor(arg0: string)
constructor(type: string, modid: string)

public "type"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"(...arg0: (string)[]): $ArrayList<($SlotCondition)>
public "modid"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotCondition$Type = ($SlotCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotCondition_ = $SlotCondition$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/data/loot/$ArtifactLootModifier" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$LootModifier, $LootModifier$Type} from "packages/net/minecraftforge/common/loot/$LootModifier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $ArtifactLootModifier extends $LootModifier {
static readonly "CODEC": $Codec<($ArtifactLootModifier)>

constructor(arg0: integer, arg1: integer, arg2: double, arg3: $ItemStack$Type, ...arg4: ($LootItemCondition$Type)[])

public "codec"(): $Codec<($ArtifactLootModifier)>
public static "getJson"<U>(arg0: $Dynamic$Type<(any)>): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactLootModifier$Type = ($ArtifactLootModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactLootModifier_ = $ArtifactLootModifier$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/jei/$ITraitLootRecipe" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ITraitLootRecipe {

 "getResults"(): $List<($ItemStack)>
 "getCurioRequired"(): $List<($ItemStack)>
 "getInputs"(): $List<($ItemStack)>
 "addTooltip"(arg0: $List$Type<($Component$Type)>): void
}

export namespace $ITraitLootRecipe {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITraitLootRecipe$Type = ($ITraitLootRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITraitLootRecipe_ = $ITraitLootRecipe$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe$RecType" {
import {$BaseRecipe, $BaseRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipe"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$RecSerializer, $RecSerializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$RecSerializer"

export class $BaseRecipe$RecType<Rec extends SRec, SRec extends $BaseRecipe<(any), (SRec), (Inv)>, Inv extends $Container> extends $RecSerializer<(Rec), (Inv)> {
readonly "type": $RegistryEntry<($RecipeType<(SRec)>)>
readonly "cls": $Class<(R)>

constructor(arg0: $Class$Type<(Rec)>, arg1: $RegistryEntry$Type<($RecipeType$Type<(SRec)>)>)

public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseRecipe$RecType$Type<Rec, SRec, Inv> = ($BaseRecipe$RecType<(Rec), (SRec), (Inv)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseRecipe$RecType_<Rec, SRec, Inv> = $BaseRecipe$RecType$Type<(Rec), (SRec), (Inv)>;
}}
declare module "packages/dev/xkmc/l2complements/content/item/create/$NoGravMagicalDohickyItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$TooltipItem, $TooltipItem$Type} from "packages/dev/xkmc/l2complements/content/item/misc/$TooltipItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $NoGravMagicalDohickyItem extends $TooltipItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $Supplier$Type<($MutableComponent$Type)>)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "onEntityItemUpdate"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public static "offsetRandomly"(arg0: $Vec3$Type, arg1: $RandomSource$Type, arg2: float): $Vec3
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoGravMagicalDohickyItem$Type = ($NoGravMagicalDohickyItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoGravMagicalDohickyItem_ = $NoGravMagicalDohickyItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/loot/$TraitSerializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$JsonSerializationContext, $JsonSerializationContext$Type} from "packages/com/google/gson/$JsonSerializationContext"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$JsonDeserializationContext, $JsonDeserializationContext$Type} from "packages/com/google/gson/$JsonDeserializationContext"
import {$Serializer, $Serializer$Type} from "packages/net/minecraft/world/level/storage/loot/$Serializer"

export class $TraitSerializer<T> extends $Record implements $Serializer<(T)> {

constructor(cls: $Class$Type<(T)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "cls"(): $Class<(T)>
public "serialize"(arg0: $JsonObject$Type, arg1: T, arg2: $JsonSerializationContext$Type): void
public "deserialize"(arg0: $JsonObject$Type, arg1: $JsonDeserializationContext$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitSerializer$Type<T> = ($TraitSerializer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitSerializer_<T> = $TraitSerializer$Type<(T)>;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/wand/$CommandWandItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$GolemInteractItem, $GolemInteractItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$GolemInteractItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BaseWandItem, $BaseWandItem$Type} from "packages/dev/xkmc/modulargolems/content/item/wand/$BaseWandItem"
import {$ItemEntry, $ItemEntry$Type} from "packages/com/tterrag/registrate/util/entry/$ItemEntry"
import {$IGlowingTarget, $IGlowingTarget$Type} from "packages/dev/xkmc/l2library/util/raytrace/$IGlowingTarget"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CommandWandItem extends $BaseWandItem implements $GolemInteractItem, $IGlowingTarget {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $ItemEntry$Type<(any)>)

public "getDistance"(arg0: $ItemStack$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "interactLivingEntity"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type): $InteractionResult
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandWandItem$Type = ($CommandWandItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandWandItem_ = $CommandWandItem$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/effect/skill/$BleedEffect" {
import {$ForceEffect, $ForceEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$ForceEffect"
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$SkillEffect, $SkillEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/skill/$SkillEffect"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EffectUtil$AddReason, $EffectUtil$AddReason$Type} from "packages/dev/xkmc/l2library/base/effects/$EffectUtil$AddReason"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$DelayedEntityRender, $DelayedEntityRender$Type} from "packages/dev/xkmc/l2library/base/effects/api/$DelayedEntityRender"
import {$IconOverlayEffect, $IconOverlayEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$IconOverlayEffect"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$StackingEffect, $StackingEffect$Type} from "packages/dev/xkmc/l2complements/content/effect/skill/$StackingEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BleedEffect extends $InherentEffect implements $ForceEffect, $IconOverlayEffect, $SkillEffect, $StackingEffect<($BleedEffect)> {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getIcon"(arg0: $LivingEntity$Type, arg1: integer): $DelayedEntityRender
public "isDurationEffectTick"(arg0: integer, arg1: integer): boolean
public "applyEffectTick"(arg0: $LivingEntity$Type, arg1: integer): void
public "getAttributeModifierValue"(arg0: integer, arg1: $AttributeModifier$Type): double
public "render"(arg0: $LivingEntity$Type, arg1: integer, arg2: $Consumer$Type<($DelayedEntityRender$Type)>): void
public "addTo"(arg0: $LivingEntity$Type, arg1: integer, arg2: integer, arg3: $EffectUtil$AddReason$Type, arg4: $Entity$Type): void
public "getThis"(): $BleedEffect
get "this"(): $BleedEffect
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BleedEffect$Type = ($BleedEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BleedEffect_ = $BleedEffect$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/digging/$VienInstance" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockBreakerInstance, $BlockBreakerInstance$Type} from "packages/dev/xkmc/l2complements/content/enchantment/digging/$BlockBreakerInstance"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $VienInstance extends $Record implements $BlockBreakerInstance {

constructor(x0: integer, x1: integer, y0: integer, y1: integer, z0: integer, z1: integer, max: integer, match: $Predicate$Type<($BlockState$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "max"(): integer
public "find"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Predicate$Type<($BlockPos$Type)>): $List<($BlockPos)>
public "match"(): $Predicate<($BlockState)>
public "x1"(): integer
public "y1"(): integer
public "z1"(): integer
public "z0"(): integer
public "x0"(): integer
public "y0"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VienInstance$Type = ($VienInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VienInstance_ = $VienInstance$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/ghost/$GhostItemMenu" {
import {$ClickType, $ClickType$Type} from "packages/net/minecraft/world/inventory/$ClickType"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuLayoutConfig, $MenuLayoutConfig$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig"

export class $GhostItemMenu extends $AbstractContainerMenu {
readonly "sprite": $MenuLayoutConfig
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public "stillValid"(arg0: $Player$Type): boolean
public "clicked"(arg0: integer, arg1: integer, arg2: $ClickType$Type, arg3: $Player$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "setSlotContent"(arg0: integer, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GhostItemMenu$Type = ($GhostItemMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GhostItemMenu_ = $GhostItemMenu$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v5/$FungusInfect" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $FungusInfect extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerHurtOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FungusInfect$Type = ($FungusInfect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FungusInfect_ = $FungusInfect$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/common/$AdaptingTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $AdaptingTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onHurtByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingHurtEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdaptingTrait$Type = ($AdaptingTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdaptingTrait_ = $AdaptingTrait$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEffectBuilder" {
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$AbstractBuilder, $AbstractBuilder$Type} from "packages/com/tterrag/registrate/builders/$AbstractBuilder"
import {$ArtifactRegistrate, $ArtifactRegistrate$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$ArtifactRegistrate"
import {$BuilderCallback, $BuilderCallback$Type} from "packages/com/tterrag/registrate/builders/$BuilderCallback"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $SetEffectBuilder<T extends $SetEffect, P> extends $AbstractBuilder<($SetEffect), (T), (P), ($SetEffectBuilder<(T), (P)>)> {

constructor(arg0: $ArtifactRegistrate$Type, arg1: P, arg2: string, arg3: $BuilderCallback$Type, arg4: $NonNullSupplier$Type<(T)>)

public "desc"(arg0: string, arg1: string): $SetEffectBuilder<(T), (P)>
public "lang"(arg0: string): $SetEffectBuilder<(T), (P)>
public static "of"<T>(arg0: $Supplier$Type<(T)>, arg1: $NonNullSupplier$Type<(string)>): $NonNullSupplier<(T)>
public static "of"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
public static "lazy"<T>(arg0: $Supplier$Type<(T)>): $NonNullSupplier<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetEffectBuilder$Type<T, P> = ($SetEffectBuilder<(T), (P)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetEffectBuilder_<T, P> = $SetEffectBuilder$Type<(T), (P)>;
}}
declare module "packages/dev/xkmc/l2library/base/$L2Registrate" {
import {$L2Registrate$RegistryInstance, $L2Registrate$RegistryInstance$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate$RegistryInstance"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$RegistryBuilder, $RegistryBuilder$Type} from "packages/net/minecraftforge/registries/$RegistryBuilder"
import {$EnchantmentBuilder, $EnchantmentBuilder$Type} from "packages/com/tterrag/registrate/builders/$EnchantmentBuilder"
import {$NoConfigBuilder, $NoConfigBuilder$Type} from "packages/com/tterrag/registrate/builders/$NoConfigBuilder"
import {$L2Registrate$GenericBuilder, $L2Registrate$GenericBuilder$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate$GenericBuilder"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$CreativeModeTab$Builder, $CreativeModeTab$Builder$Type} from "packages/net/minecraft/world/item/$CreativeModeTab$Builder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$EnchantmentBuilder$EnchantmentFactory, $EnchantmentBuilder$EnchantmentFactory$Type} from "packages/com/tterrag/registrate/builders/$EnchantmentBuilder$EnchantmentFactory"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$NamedEntry, $NamedEntry$Type} from "packages/dev/xkmc/l2library/base/$NamedEntry"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/com/tterrag/registrate/util/nullness/$NonNullSupplier"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$AbstractRegistrate, $AbstractRegistrate$Type} from "packages/com/tterrag/registrate/$AbstractRegistrate"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $L2Registrate extends $AbstractRegistrate<($L2Registrate)> {

constructor(arg0: string)

public "generic"<T extends $NamedEntry<(T)>, P extends T>(arg0: $L2Registrate$RegistryInstance$Type<(T)>, arg1: string, arg2: $NonNullSupplier$Type<(P)>): $L2Registrate$GenericBuilder<(T), (P)>
public "recipe"<T extends $Recipe<(any)>>(arg0: string): $RegistryEntry<($RecipeType<(T)>)>
public "enchantment"<T extends $Enchantment>(arg0: string, arg1: $EnchantmentCategory$Type, arg2: $EnchantmentBuilder$EnchantmentFactory$Type<(T)>, arg3: string): $EnchantmentBuilder<(T), ($L2Registrate)>
/**
 * 
 * @deprecated
 */
public "enchantment"<T extends $Enchantment>(arg0: string, arg1: $EnchantmentCategory$Type, arg2: $EnchantmentBuilder$EnchantmentFactory$Type<(T)>): $EnchantmentBuilder<(T), ($L2Registrate)>
public "effect"<T extends $MobEffect>(arg0: string, arg1: $NonNullSupplier$Type<(T)>, arg2: string): $NoConfigBuilder<($MobEffect), (T), ($L2Registrate)>
public "buildModCreativeTab"(arg0: string, arg1: string, arg2: $Consumer$Type<($CreativeModeTab$Builder$Type)>): $RegistryEntry<($CreativeModeTab)>
public "buildL2CreativeTab"(arg0: string, arg1: string, arg2: $Consumer$Type<($CreativeModeTab$Builder$Type)>): $RegistryEntry<($CreativeModeTab)>
public "newRegistry"<E extends $NamedEntry<(E)>>(arg0: string, arg1: $Class$Type<(any)>): $L2Registrate$RegistryInstance<(E)>
public "newRegistry"<E extends $NamedEntry<(E)>>(arg0: string, arg1: $Class$Type<(any)>, arg2: $Consumer$Type<($RegistryBuilder$Type<(E)>)>): $L2Registrate$RegistryInstance<(E)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Registrate$Type = ($L2Registrate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Registrate_ = $L2Registrate$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/ranged/$GolemCrossbowAttackGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$HumanoidGolemEntity, $HumanoidGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/humanoid/$HumanoidGolemEntity"
import {$UniformInt, $UniformInt$Type} from "packages/net/minecraft/util/valueproviders/$UniformInt"

export class $GolemCrossbowAttackGoal extends $Goal {
static readonly "PATHFINDING_DELAY_RANGE": $UniformInt

constructor(arg0: $HumanoidGolemEntity$Type, arg1: double, arg2: float)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "stop"(): void
public "requiresUpdateEveryTick"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemCrossbowAttackGoal$Type = ($GolemCrossbowAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemCrossbowAttackGoal_ = $GolemCrossbowAttackGoal$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/spawner/$TraitSpawnerBlock$State" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $TraitSpawnerBlock$State extends $Enum<($TraitSpawnerBlock$State)> implements $StringRepresentable {
static readonly "IDLE": $TraitSpawnerBlock$State
static readonly "ACTIVATED": $TraitSpawnerBlock$State
static readonly "CLEAR": $TraitSpawnerBlock$State
static readonly "FAILED": $TraitSpawnerBlock$State


public static "values"(): ($TraitSpawnerBlock$State)[]
public static "valueOf"(arg0: string): $TraitSpawnerBlock$State
public "getSerializedName"(): string
public "light"(): integer
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitSpawnerBlock$State$Type = (("idle") | ("clear") | ("failed") | ("activated")) | ($TraitSpawnerBlock$State);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitSpawnerBlock$State_ = $TraitSpawnerBlock$State$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerBlock" {
import {$EnderDrawerBlockEntity, $EnderDrawerBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/remote/drawer/$EnderDrawerBlockEntity"
import {$SpecialDropBlockMethod, $SpecialDropBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$SpecialDropBlockMethod"
import {$OnClickBlockMethod, $OnClickBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$OnClickBlockMethod"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GetBlockItemBlockMethod, $GetBlockItemBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$GetBlockItemBlockMethod"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntityBlockMethod, $BlockEntityBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/one/$BlockEntityBlockMethod"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$SetPlacedByBlockMethod, $SetPlacedByBlockMethod$Type} from "packages/dev/xkmc/l2modularblock/mult/$SetPlacedByBlockMethod"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $EnderDrawerBlock implements $OnClickBlockMethod, $GetBlockItemBlockMethod, $SpecialDropBlockMethod, $SetPlacedByBlockMethod {
static readonly "INSTANCE": $EnderDrawerBlock
static readonly "BLOK_ENTITY": $BlockEntityBlockMethod<($EnderDrawerBlockEntity)>

constructor()

public "onClick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getDrops"(arg0: $BlockState$Type, arg1: $LootParams$Builder$Type): $List<($ItemStack)>
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderDrawerBlock$Type = ($EnderDrawerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderDrawerBlock_ = $EnderDrawerBlock$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/merged/$MultiSwitch" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BaseBagItem, $BaseBagItem$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemOnBackItem, $ItemOnBackItem$Type} from "packages/dev/xkmc/l2backpack/content/render/$ItemOnBackItem"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IQuickSwapItem, $IQuickSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MultiSwitch extends $BaseBagItem implements $IQuickSwapItem, $ItemOnBackItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "open"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type): void
public "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
public "isValidContent"(arg0: $ItemStack$Type): boolean
public static "getSelected"(arg0: $ItemStack$Type, arg1: $QuickSwapType$Type): integer
public "getRows"(arg0: $ItemStack$Type): integer
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public static "setSelected"(arg0: $ItemStack$Type, arg1: $QuickSwapType$Type, arg2: integer): void
public "click"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: boolean, arg3: boolean, arg4: boolean, arg5: $IItemHandler$Type): void
public "shouldRender"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiSwitch$Type = ($MultiSwitch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiSwitch_ = $MultiSwitch$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/merged/$MultiSwapToken" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$IQuickSwapItem, $IQuickSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapItem"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SingleSwapEntry, $SingleSwapEntry$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/entry/$SingleSwapEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"

export class $MultiSwapToken extends $Record implements $IQuickSwapToken<($SingleSwapEntry)> {

constructor(item: $IQuickSwapItem$Type, stack: $ItemStack$Type, type: $QuickSwapType$Type)

public "type"(): $QuickSwapType
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "swap"(arg0: $Player$Type): void
public "item"(): $IQuickSwapItem
public "getList"(): $List<($SingleSwapEntry)>
public "getSelected"(): integer
public "setSelected"(arg0: integer): void
public "shrink"(arg0: integer): void
get "list"(): $List<($SingleSwapEntry)>
get "selected"(): integer
set "selected"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiSwapToken$Type = ($MultiSwapToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiSwapToken_ = $MultiSwapToken$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/recipe/$DrawerUpgradeRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$AbstractSmithingRecipe, $AbstractSmithingRecipe$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractSmithingRecipe$Serializer, $AbstractSmithingRecipe$Serializer$Type} from "packages/dev/xkmc/l2library/serial/recipe/$AbstractSmithingRecipe$Serializer"

export class $DrawerUpgradeRecipe extends $AbstractSmithingRecipe<($DrawerUpgradeRecipe)> {
static readonly "TEMPLATE_PLACEHOLDER": $Ingredient
readonly "template": $Ingredient
readonly "base": $Ingredient
readonly "addition": $Ingredient
readonly "result": $ItemStack

constructor(arg0: $ResourceLocation$Type, arg1: $Ingredient$Type, arg2: $Ingredient$Type, arg3: $ItemStack$Type)

public "getSerializer"(): $AbstractSmithingRecipe$Serializer<($DrawerUpgradeRecipe)>
public "assemble"(arg0: $Container$Type, arg1: $RegistryAccess$Type): $ItemStack
public "matches"(arg0: $Container$Type, arg1: $Level$Type): boolean
get "serializer"(): $AbstractSmithingRecipe$Serializer<($DrawerUpgradeRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawerUpgradeRecipe$Type = ($DrawerUpgradeRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawerUpgradeRecipe_ = $DrawerUpgradeRecipe$Type;
}}
declare module "packages/dev/xkmc/l2library/base/tile/$CombinedTankWrapper" {
import {$IFluidHandler, $IFluidHandler$Type} from "packages/net/minecraftforge/fluids/capability/$IFluidHandler"
import {$FluidStack, $FluidStack$Type} from "packages/net/minecraftforge/fluids/$FluidStack"
import {$IFluidHandler$FluidAction, $IFluidHandler$FluidAction$Type} from "packages/net/minecraftforge/fluids/capability/$IFluidHandler$FluidAction"
import {$CombinedTankWrapper$Type, $CombinedTankWrapper$Type$Type} from "packages/dev/xkmc/l2library/base/tile/$CombinedTankWrapper$Type"

export class $CombinedTankWrapper implements $IFluidHandler {

constructor()

public "add"(arg0: $CombinedTankWrapper$Type$Type, ...arg1: ($IFluidHandler$Type)[]): $CombinedTankWrapper
public "fill"(arg0: $FluidStack$Type, arg1: $IFluidHandler$FluidAction$Type): integer
public "build"(): $CombinedTankWrapper
public "drain"(arg0: $FluidStack$Type, arg1: $IFluidHandler$FluidAction$Type): $FluidStack
public "drain"(arg0: integer, arg1: $IFluidHandler$FluidAction$Type): $FluidStack
public "enforceVariety"(): $CombinedTankWrapper
public "getTanks"(): integer
public "isFluidValid"(arg0: integer, arg1: $FluidStack$Type): boolean
public "getFluidInTank"(arg0: integer): $FluidStack
public "getTankCapacity"(arg0: integer): integer
get "tanks"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CombinedTankWrapper$Type = ($CombinedTankWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CombinedTankWrapper_ = $CombinedTankWrapper$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/$L2ComplementsClient" {
import {$RegisterGuiOverlaysEvent, $RegisterGuiOverlaysEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterGuiOverlaysEvent"
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$RegisterItemDecorationsEvent, $RegisterItemDecorationsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterItemDecorationsEvent"
import {$RegisterKeyMappingsEvent, $RegisterKeyMappingsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterKeyMappingsEvent"
import {$RegisterParticleProvidersEvent, $RegisterParticleProvidersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterParticleProvidersEvent"
import {$RegisterClientReloadListenersEvent, $RegisterClientReloadListenersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientReloadListenersEvent"

export class $L2ComplementsClient {

constructor()

public static "clientSetup"(arg0: $FMLClientSetupEvent$Type): void
public static "registerKeyMaps"(arg0: $RegisterKeyMappingsEvent$Type): void
public static "onResourceReload"(arg0: $RegisterClientReloadListenersEvent$Type): void
public static "onParticleRegistryEvent"(arg0: $RegisterParticleProvidersEvent$Type): void
public static "registerItemDecoration"(arg0: $RegisterItemDecorationsEvent$Type): void
public static "registerOverlay"(arg0: $RegisterGuiOverlaysEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2ComplementsClient$Type = ($L2ComplementsClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2ComplementsClient_ = $L2ComplementsClient$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$L2Registrate, $L2Registrate$Type} from "packages/dev/xkmc/l2library/base/$L2Registrate"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$CraftableEnchantment, $CraftableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$CraftableEnchantment"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $UnobtainableEnchantment extends $Enchantment implements $CraftableEnchantment {
readonly "category": $EnchantmentCategory


public static "injectTab"(arg0: $L2Registrate$Type, ...arg1: ($EnchantmentCategory$Type)[]): void
public "getColor"(): $ChatFormatting
public "allowedInCreativeTab"(arg0: $Item$Type, arg1: $Set$Type<($EnchantmentCategory$Type)>): boolean
public static "makeBook"(arg0: $Enchantment$Type, arg1: integer): $ItemStack
public "getDecoColor"(arg0: string): integer
public "getMaxCost"(arg0: integer): integer
public "getMinCost"(arg0: integer): integer
public "isTreasureOnly"(): boolean
public "isDiscoverable"(): boolean
public "getFullname"(arg0: integer): $Component
public "isTradeable"(): boolean
public "getCraftableLevels"(): $Set<(integer)>
get "color"(): $ChatFormatting
get "treasureOnly"(): boolean
get "discoverable"(): boolean
get "tradeable"(): boolean
get "craftableLevels"(): $Set<(integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UnobtainableEnchantment$Type = ($UnobtainableEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UnobtainableEnchantment_ = $UnobtainableEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/drawer/$BaseDrawerInvAccess" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$IItemHandlerModifiable, $IItemHandlerModifiable$Type} from "packages/net/minecraftforge/items/$IItemHandlerModifiable"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BaseDrawerItem, $BaseDrawerItem$Type} from "packages/dev/xkmc/l2backpack/content/drawer/$BaseDrawerItem"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export interface $BaseDrawerInvAccess extends $IItemHandlerModifiable {

 "isEmpty"(): boolean
 "getMax"(arg0: $ItemStack$Type): integer
 "drawerItem"(): $BaseDrawerItem
 "player"(): $ServerPlayer
 "getSlots"(): integer
 "drawerStack"(): $ItemStack
 "getStackInSlot"(arg0: integer): $ItemStack
 "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
 "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
 "getSlotLimit"(arg0: integer): integer
 "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
 "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
 "isItemValid"(arg0: $ItemStack$Type): boolean
 "setStoredItem"(arg0: $Item$Type): void
 "getStoredItem"(): $Item
 "getStoredCount"(): integer
 "setStoredCount"(arg0: integer): void
 "mayStack"(arg0: $BaseDrawerInvAccess$Type, arg1: integer, arg2: $ItemStack$Type, arg3: $PickupConfig$Type): boolean
 "getStoredStack"(): $ItemStack
 "kjs$self"(): $IItemHandler
 "getBlock"(level: $Level$Type): $BlockContainerJS
 "getSlots"(): integer
 "getStackInSlot"(i: integer): $ItemStack
 "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
 "isMutable"(): boolean
 "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
 "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
 "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
 "getSlotLimit"(i: integer): integer
 "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
 "setChanged"(): void
 "asContainer"(): $Container
 "countNonEmpty"(ingredient: $Ingredient$Type): integer
 "countNonEmpty"(): integer
 "getAllItems"(): $List<($ItemStack)>
 "getHeight"(): integer
 "find"(ingredient: $Ingredient$Type): integer
 "find"(): integer
 "getWidth"(): integer
 "clear"(): void
 "clear"(ingredient: $Ingredient$Type): void
 "count"(ingredient: $Ingredient$Type): integer
 "count"(): integer
 "isEmpty"(): boolean
}

export namespace $BaseDrawerInvAccess {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseDrawerInvAccess$Type = ($BaseDrawerInvAccess);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseDrawerInvAccess_ = $BaseDrawerInvAccess$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/common/$BackpackModelItem" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $BackpackModelItem {

 "getModelTexture"(arg0: $ItemStack$Type): $ResourceLocation

(arg0: $ItemStack$Type): $ResourceLocation
}

export namespace $BackpackModelItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackModelItem$Type = ($BackpackModelItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackModelItem_ = $BackpackModelItem$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/dragons/$DragonToolMats" {
import {$RegistrateRecipeProvider, $RegistrateRecipeProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateRecipeProvider"
import {$IMatToolType, $IMatToolType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatToolType"
import {$LWToolTypes, $LWToolTypes$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$LWToolTypes"
import {$ItemModelBuilder, $ItemModelBuilder$Type} from "packages/net/minecraftforge/client/model/generators/$ItemModelBuilder"
import {$ShapedRecipeBuilder, $ShapedRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$ShapedRecipeBuilder"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$ILWToolMats, $ILWToolMats$Type} from "packages/dev/xkmc/l2weaponry/init/materials/$ILWToolMats"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $DragonToolMats extends $Enum<($DragonToolMats)> implements $ILWToolMats {
static readonly "ICE_DRAGONSTEEL": $DragonToolMats
static readonly "FIRE_DRAGONSTEEL": $DragonToolMats
static readonly "LIGHTNING_DRAGONSTEEL": $DragonToolMats


public "type"(): $IMatToolType
public static "values"(): ($DragonToolMats)[]
public static "valueOf"(arg0: string): $DragonToolMats
public "getProvider"(arg0: $RegistrateRecipeProvider$Type, ...arg1: ($ICondition$Type)[]): $Consumer<($FinishedRecipe)>
public "getBlock"(): $Item
public "isOptional"(): boolean
public "getIngot"(): $Item
public "getTool"(arg0: $LWToolTypes$Type): $Item
public "fireRes"(): boolean
public "getStick"(): $Item
public "name"(): string
public "prefix"(): string
public "getChain"(): $Item
public "is3D"(arg0: $LWToolTypes$Type): boolean
public "saveRecipe"(arg0: $ShapedRecipeBuilder$Type, arg1: $RegistrateRecipeProvider$Type, arg2: $LWToolTypes$Type, arg3: $ResourceLocation$Type): void
public "getBaseUpgrade"(): $ILWToolMats
public "addEnchants"(arg0: $List$Type<($EnchantmentInstance$Type)>, arg1: $LWToolTypes$Type): void
public "emissive"(): boolean
public "englishName"(): string
public "hasTool"(arg0: $LWToolTypes$Type): boolean
public "getToolEnchanted"(arg0: $LWToolTypes$Type): $ItemStack
public "model"(arg0: $LWToolTypes$Type, arg1: $ItemModelBuilder$Type): $ItemModelBuilder
get "block"(): $Item
get "optional"(): boolean
get "ingot"(): $Item
get "stick"(): $Item
get "chain"(): $Item
get "baseUpgrade"(): $ILWToolMats
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DragonToolMats$Type = (("lightning_dragonsteel") | ("ice_dragonsteel") | ("fire_dragonsteel")) | ($DragonToolMats);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DragonToolMats_ = $DragonToolMats$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/item/golem/$ClientHolderManager" {
import {$GolemHolder, $GolemHolder$Type} from "packages/dev/xkmc/modulargolems/content/item/golem/$GolemHolder"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$IGolemPart, $IGolemPart$Type} from "packages/dev/xkmc/modulargolems/content/core/$IGolemPart"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"

export class $ClientHolderManager {

constructor()

public static "getEntityForDisplay"<T extends $AbstractGolemEntity<(T), (P)>, P extends $IGolemPart<(P)>>(arg0: $GolemHolder$Type<(T), (P)>, arg1: $ItemStack$Type): T
public static "tickEvent"(arg0: $TickEvent$ClientTickEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHolderManager$Type = ($ClientHolderManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHolderManager_ = $ClientHolderManager$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/armorswap/$ArmorBagMenu" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BaseBagMenu, $BaseBagMenu$Type} from "packages/dev/xkmc/l2backpack/content/common/$BaseBagMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ArmorBagMenu extends $BaseBagMenu<($ArmorBagMenu)> {
static readonly "MANAGERS": $SpriteManager
readonly "item_slot": $PlayerSlot<(any)>
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $PlayerSlot$Type<(any)>, arg3: $UUID$Type, arg4: $Component$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($ArmorBagMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $ArmorBagMenu
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean, arg6: boolean): boolean
public static "moveItemStackTo"(arg0: $Player$Type, arg1: $AbstractContainerMenu$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorBagMenu$Type = ($ArmorBagMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorBagMenu_ = $ArmorBagMenu$Type;
}}
declare module "packages/dev/xkmc/l2library/compat/patchouli/$ShapedPatchouliBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ShapedRecipeBuilder, $ShapedRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$ShapedRecipeBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ShapedPatchouliBuilder extends $ShapedRecipeBuilder {
readonly "result": $Item
readonly "count": integer
readonly "rows": $List<(string)>
readonly "key": $Map<(character), ($Ingredient)>
readonly "advancement": $Advancement$Builder
 "group": string

constructor(arg0: $ResourceLocation$Type)

public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapedPatchouliBuilder$Type = ($ShapedPatchouliBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapedPatchouliBuilder_ = $ShapedPatchouliBuilder$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig$ConfigInstance" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PacketHandlerWithConfig$ConfigInstance extends $Record {

constructor(name: string, id: $ResourceLocation$Type, config: $BaseConfig$Type)

public "name"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $ResourceLocation
public "config"(): $BaseConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketHandlerWithConfig$ConfigInstance$Type = ($PacketHandlerWithConfig$ConfigInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketHandlerWithConfig$ConfigInstance_ = $PacketHandlerWithConfig$ConfigInstance$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$HeavyShieldEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$AttributeEnchantment, $AttributeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$AttributeEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $HeavyShieldEnchantment extends $UnobtainableEnchantment implements $AttributeEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "addAttributes"(arg0: integer, arg1: $ItemAttributeModifierEvent$Type): void
public "getColor"(): $ChatFormatting
public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "color"(): $ChatFormatting
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeavyShieldEnchantment$Type = ($HeavyShieldEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeavyShieldEnchantment_ = $HeavyShieldEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/item/equipments/$SculkiumTool" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $SculkiumTool extends $ExtraToolConfig {
static "cachedHardness": float
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type, arg2: float): float
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SculkiumTool$Type = ($SculkiumTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SculkiumTool_ = $SculkiumTool$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/misc/$PatchouliLang" {
import {$RegistrateLangProvider, $RegistrateLangProvider$Type} from "packages/com/tterrag/registrate/providers/$RegistrateLangProvider"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $PatchouliLang extends $Enum<($PatchouliLang)> {
static readonly "TITLE": $PatchouliLang
static readonly "LANDING": $PatchouliLang


public static "values"(): ($PatchouliLang)[]
public static "valueOf"(arg0: string): $PatchouliLang
public static "genLang"(arg0: $RegistrateLangProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatchouliLang$Type = (("landing") | ("title")) | ($PatchouliLang);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatchouliLang_ = $PatchouliLang$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig" {
import {$BasePacketHandler$LoadedPacket, $BasePacketHandler$LoadedPacket$Type} from "packages/dev/xkmc/l2serial/network/$BasePacketHandler$LoadedPacket"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$BaseConfig, $BaseConfig$Type} from "packages/dev/xkmc/l2library/serial/config/$BaseConfig"
import {$PacketHandler, $PacketHandler$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandler"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$OnDatapackSyncEvent, $OnDatapackSyncEvent$Type} from "packages/net/minecraftforge/event/$OnDatapackSyncEvent"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$AddReloadListenerEvent, $AddReloadListenerEvent$Type} from "packages/net/minecraftforge/event/$AddReloadListenerEvent"
import {$PacketHandlerWithConfig$ConfigInstance, $PacketHandlerWithConfig$ConfigInstance$Type} from "packages/dev/xkmc/l2library/serial/config/$PacketHandlerWithConfig$ConfigInstance"
import {$BasePacketHandler, $BasePacketHandler$Type} from "packages/dev/xkmc/l2serial/network/$BasePacketHandler"
import {$SimpleChannel, $SimpleChannel$Type} from "packages/net/minecraftforge/network/simple/$SimpleChannel"

export class $PacketHandlerWithConfig extends $PacketHandler {
 "configs": $ArrayList<($PacketHandlerWithConfig$ConfigInstance)>
readonly "config_path": string
readonly "CHANNEL_NAME": $ResourceLocation
readonly "NETWORK_VERSION": integer
readonly "NETWORK_VERSION_STR": string
 "channel": $SimpleChannel

constructor(arg0: $ResourceLocation$Type, arg1: integer, ...arg2: ($Function$Type<($BasePacketHandler$Type), ($BasePacketHandler$LoadedPacket$Type<(any)>)>)[])

public static "onDatapackSync"(arg0: $OnDatapackSyncEvent$Type): void
public "addConfig"<T extends $BaseConfig>(arg0: string, arg1: $Class$Type<(T)>): void
public static "addReloadListeners"(arg0: $AddReloadListenerEvent$Type): void
public "addCachedConfig"<T extends $BaseConfig>(arg0: string, arg1: $Class$Type<(T)>): void
public "addBeforeReloadListener"(arg0: $Runnable$Type): void
public "addAfterReloadListener"(arg0: $Runnable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketHandlerWithConfig$Type = ($PacketHandlerWithConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketHandlerWithConfig_ = $PacketHandlerWithConfig$Type;
}}
declare module "packages/dev/xkmc/l2complements/init/data/$LCConfig$Client" {
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"

export class $LCConfig$Client {
readonly "renderEnchOverlay": $ForgeConfigSpec$BooleanValue
readonly "enchOverlayZVal": $ForgeConfigSpec$IntValue


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCConfig$Client$Type = ($LCConfig$Client);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCConfig$Client_ = $LCConfig$Client$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/curio/$GolemCuriosMenuPvd" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$IMenuPvd, $IMenuPvd$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$IMenuPvd"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $GolemCuriosMenuPvd extends $Record implements $IMenuPvd {

constructor(e: $LivingEntity$Type, page: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $LivingEntity
public "writeBuffer"(arg0: $FriendlyByteBuf$Type): void
public "getDisplayName"(): $Component
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "page"(): integer
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemCuriosMenuPvd$Type = ($GolemCuriosMenuPvd);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemCuriosMenuPvd_ = $GolemCuriosMenuPvd$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/quickswap/armorswap/$ArmorSwap" {
import {$PlayerSlot, $PlayerSlot$Type} from "packages/dev/xkmc/l2screentracker/screen/source/$PlayerSlot"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$SingleSwapItem, $SingleSwapItem$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$SingleSwapItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemOnBackItem, $ItemOnBackItem$Type} from "packages/dev/xkmc/l2backpack/content/render/$ItemOnBackItem"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$QuickSwapType, $QuickSwapType$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/type/$QuickSwapType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IQuickSwapToken, $IQuickSwapToken$Type} from "packages/dev/xkmc/l2backpack/content/quickswap/common/$IQuickSwapToken"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ArmorSwap extends $SingleSwapItem implements $ItemOnBackItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "open"(arg0: $ServerPlayer$Type, arg1: $PlayerSlot$Type<(any)>, arg2: $ItemStack$Type): void
public static "isValidItem"(arg0: $ItemStack$Type): boolean
public "getTokenOfType"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $QuickSwapType$Type): $IQuickSwapToken<(any)>
public "isValidContent"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "shouldRender"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorSwap$Type = ($ArmorSwap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorSwap_ = $ArmorSwap$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/item/curio/misc/$InfinityGlove" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICurio$SoundInfo, $ICurio$SoundInfo$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$SoundInfo"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ICurio$DropRule, $ICurio$DropRule$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurio$DropRule"
import {$ICurioItem, $ICurioItem$Type} from "packages/top/theillusivec4/curios/api/type/capability/$ICurioItem"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$CurioItem, $CurioItem$Type} from "packages/dev/xkmc/l2complements/content/item/curios/$CurioItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $InfinityGlove extends $CurioItem implements $ICurioItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "getAttributeModifiers"(arg0: $SlotContext$Type, arg1: $UUID$Type, arg2: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
/**
 * 
 * @deprecated
 */
public "onEquip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
public "getAttributesTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "showAttributesTooltip"(arg0: string, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "playRightClickEquipSound"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public "makesPiglinsNeutral"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "canWalkOnPowderedSnow"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getAttributeModifiers"(arg0: string, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "hasCurioCapability"(arg0: $ItemStack$Type): boolean
public "curioTick"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioTick"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "canUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canUnequip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "curioBreak"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "curioBreak"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): void
/**
 * 
 * @deprecated
 */
public "getDropRule"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): $ICurio$DropRule
public "getDropRule"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: integer, arg3: boolean, arg4: $ItemStack$Type): $ICurio$DropRule
/**
 * 
 * @deprecated
 */
public "getFortuneBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
/**
 * 
 * @deprecated
 */
public "getLootingBonus"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: integer): integer
public "canEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "onEquipFromUse"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): void
public "getEquipSound"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $ICurio$SoundInfo
public "getSlotsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "readSyncData"(arg0: $CompoundTag$Type, arg1: $ItemStack$Type): void
public "readSyncData"(arg0: $SlotContext$Type, arg1: $CompoundTag$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "onUnequip"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "onUnequip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public "canRightClickEquip"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "getTagsTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): $List<($Component)>
/**
 * 
 * @deprecated
 */
public "curioAnimate"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): void
public "writeSyncData"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public "writeSyncData"(arg0: $ItemStack$Type): $CompoundTag
public "canSync"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "canSync"(arg0: string, arg1: integer, arg2: $LivingEntity$Type, arg3: $ItemStack$Type): boolean
public "getLootingLevel"(arg0: $SlotContext$Type, arg1: $DamageSource$Type, arg2: $LivingEntity$Type, arg3: integer, arg4: $ItemStack$Type): integer
/**
 * 
 * @deprecated
 */
public "canEquip"(arg0: string, arg1: $LivingEntity$Type, arg2: $ItemStack$Type): boolean
public "canEquip"(arg0: $SlotContext$Type, arg1: $ItemStack$Type): boolean
public "isEnderMask"(arg0: $SlotContext$Type, arg1: $EnderMan$Type, arg2: $ItemStack$Type): boolean
public "getFortuneLevel"(arg0: $SlotContext$Type, arg1: $LootContext$Type, arg2: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InfinityGlove$Type = ($InfinityGlove);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InfinityGlove_ = $InfinityGlove$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$UpgradeApplyTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$UpgradeApplyTrigger$Ins, $UpgradeApplyTrigger$Ins$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$UpgradeApplyTrigger$Ins"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/dev/xkmc/modulargolems/content/item/upgrade/$UpgradeItem"

export class $UpgradeApplyTrigger extends $BaseCriterion<($UpgradeApplyTrigger$Ins), ($UpgradeApplyTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $ItemStack$Type, arg2: integer, arg3: integer): void
public static "ins"(): $UpgradeApplyTrigger$Ins
public static "withRemain"(arg0: integer): $UpgradeApplyTrigger$Ins
public static "withUpgrade"(arg0: $UpgradeItem$Type): $UpgradeApplyTrigger$Ins
public static "withTotal"(arg0: integer): $UpgradeApplyTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeApplyTrigger$Type = ($UpgradeApplyTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeApplyTrigger_ = $UpgradeApplyTrigger$Type;
}}
declare module "packages/dev/xkmc/l2library/init/explosion/$ModExplosionContext" {
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ModExplosionContext {

 "hurtEntity"(arg0: $Entity$Type): boolean

(arg0: $Entity$Type): boolean
}

export namespace $ModExplosionContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModExplosionContext$Type = ($ModExplosionContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModExplosionContext_ = $ModExplosionContext$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/item/types/$MacheteItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BaseClawItem, $BaseClawItem$Type} from "packages/dev/xkmc/l2weaponry/content/item/base/$BaseClawItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MacheteItem extends $BaseClawItem {
 "attackDamage": float
 "attackSpeed": float
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MacheteItem$Type = ($MacheteItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MacheteItem_ = $MacheteItem$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/immunes/$MagicImmuneModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $MagicImmuneModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagicImmuneModifier$Type = ($MagicImmuneModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagicImmuneModifier_ = $MagicImmuneModifier$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/compat/dragons/$IceDragonBoneTool" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMatVanillaType, $IMatVanillaType$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/api/$IMatVanillaType"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $IceDragonBoneTool extends $ExtraToolConfig {
 "tool_hit": integer
 "tool_mine": integer
 "sword_hit": integer
 "sword_mine": integer
 "repair_chance": double
 "damage_chance": double
 "canBeDepleted": boolean
 "bypassArmor": boolean
 "bypassMagic": boolean
 "effects": $List<($MobEffectInstance)>
 "stick": $Function<($IMatVanillaType), ($Item)>
 "reversed": boolean
 "tier": $Function<(integer), ($TagKey<($Block)>)>

constructor()

public "onHit"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): void
public "addTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IceDragonBoneTool$Type = ($IceDragonBoneTool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IceDragonBoneTool_ = $IceDragonBoneTool$Type;
}}
declare module "packages/dev/xkmc/l2backpack/content/bag/$BagCaps" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$PickupTrace, $PickupTrace$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace"
import {$FastBagItemHandler, $FastBagItemHandler$Type} from "packages/dev/xkmc/l2backpack/content/bag/$FastBagItemHandler"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$AbstractBag, $AbstractBag$Type} from "packages/dev/xkmc/l2backpack/content/bag/$AbstractBag"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$InvPickupCap, $InvPickupCap$Type} from "packages/dev/xkmc/l2backpack/content/capability/$InvPickupCap"

export class $BagCaps extends $InvPickupCap<($FastBagItemHandler)> implements $ICapabilityProvider {

constructor(arg0: $AbstractBag$Type, arg1: $ItemStack$Type)

public "getSignature"(): integer
public "isValid"(arg0: $ItemStack$Type): boolean
public "getPickupMode"(): $PickupConfig
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "getInv"(arg0: $PickupTrace$Type): $FastBagItemHandler
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
public static "register"(): void
get "signature"(): integer
get "pickupMode"(): $PickupConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BagCaps$Type = ($BagCaps);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BagCaps_ = $BagCaps$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/common/$BellModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $BellModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onSetTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $Mob$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BellModifier$Type = ($BellModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BellModifier_ = $BellModifier$Type;
}}
declare module "packages/dev/xkmc/l2library/base/tile/$BaseTank" {
import {$IFluidHandler, $IFluidHandler$Type} from "packages/net/minecraftforge/fluids/capability/$IFluidHandler"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$FluidStack, $FluidStack$Type} from "packages/net/minecraftforge/fluids/$FluidStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$AliasCollection, $AliasCollection$Type} from "packages/dev/xkmc/l2serial/serialization/codec/$AliasCollection"
import {$IFluidHandler$FluidAction, $IFluidHandler$FluidAction$Type} from "packages/net/minecraftforge/fluids/capability/$IFluidHandler$FluidAction"
import {$BaseContainerListener, $BaseContainerListener$Type} from "packages/dev/xkmc/l2library/base/tile/$BaseContainerListener"

export class $BaseTank implements $IFluidHandler, $AliasCollection<($FluidStack)> {
 "list": $NonNullList<($FluidStack)>

constructor(arg0: integer, arg1: integer)

public "add"(arg0: $BaseContainerListener$Type): $BaseTank
public "clear"(): void
public "isEmpty"(): boolean
public "fill"(arg0: $FluidStack$Type, arg1: $IFluidHandler$FluidAction$Type): integer
public "set"(arg0: integer, arg1: integer, arg2: $FluidStack$Type): void
public "drain"(arg0: integer, arg1: $IFluidHandler$FluidAction$Type): $FluidStack
public "drain"(arg0: $FluidStack$Type, arg1: $IFluidHandler$FluidAction$Type): $FluidStack
public "getTanks"(): integer
public "isFluidValid"(arg0: integer, arg1: $FluidStack$Type): boolean
public "getFluidInTank"(arg0: integer): $FluidStack
public "getTankCapacity"(arg0: integer): integer
public "setChanged"(): void
public "getAsList"(): $List<($FluidStack)>
public "getElemClass"(): $Class<($FluidStack)>
public "setPredicate"(arg0: $Predicate$Type<($FluidStack$Type)>): $BaseTank
public "setExtract"(arg0: $BooleanSupplier$Type): $BaseTank
public "setClickMax"(arg0: integer): $BaseTank
public "setRaw"(arg0: integer, arg1: integer, arg2: any): void
get "empty"(): boolean
get "tanks"(): integer
get "asList"(): $List<($FluidStack)>
get "elemClass"(): $Class<($FluidStack)>
set "predicate"(value: $Predicate$Type<($FluidStack$Type)>)
set "extract"(value: $BooleanSupplier$Type)
set "clickMax"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseTank$Type = ($BaseTank);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseTank_ = $BaseTank$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/jei/$GluttonyLootRecipe" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ITraitLootRecipe, $ITraitLootRecipe$Type} from "packages/dev/xkmc/l2hostility/compat/jei/$ITraitLootRecipe"

export class $GluttonyLootRecipe extends $Record implements $ITraitLootRecipe {

constructor()

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getResults"(): $List<($ItemStack)>
public "getCurioRequired"(): $List<($ItemStack)>
public "getInputs"(): $List<($ItemStack)>
public "addTooltip"(arg0: $List$Type<($Component$Type)>): void
get "results"(): $List<($ItemStack)>
get "curioRequired"(): $List<($ItemStack)>
get "inputs"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GluttonyLootRecipe$Type = ($GluttonyLootRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GluttonyLootRecipe_ = $GluttonyLootRecipe$Type;
}}
declare module "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitEffectTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MobTraitCap, $MobTraitCap$Type} from "packages/dev/xkmc/l2hostility/content/capability/mob/$MobTraitCap"
import {$BaseCriterion, $BaseCriterion$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterion"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$KillTraitEffectTrigger$Ins, $KillTraitEffectTrigger$Ins$Type} from "packages/dev/xkmc/l2hostility/init/advancements/$KillTraitEffectTrigger$Ins"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $KillTraitEffectTrigger extends $BaseCriterion<($KillTraitEffectTrigger$Ins), ($KillTraitEffectTrigger)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type, arg1: $LivingEntity$Type, arg2: $MobTraitCap$Type): void
public static "ins"(arg0: $MobTrait$Type, arg1: $MobEffect$Type): $KillTraitEffectTrigger$Ins
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTraitEffectTrigger$Type = ($KillTraitEffectTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTraitEffectTrigger_ = $KillTraitEffectTrigger$Type;
}}
declare module "packages/dev/xkmc/l2hostility/compat/jade/$TraitInfo" {
import {$IPluginConfig, $IPluginConfig$Type} from "packages/snownee/jade/api/config/$IPluginConfig"
import {$EntityAccessor, $EntityAccessor$Type} from "packages/snownee/jade/api/$EntityAccessor"
import {$IElement, $IElement$Type} from "packages/snownee/jade/api/ui/$IElement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IEntityComponentProvider, $IEntityComponentProvider$Type} from "packages/snownee/jade/api/$IEntityComponentProvider"
import {$ITooltip, $ITooltip$Type} from "packages/snownee/jade/api/$ITooltip"

export class $TraitInfo implements $IEntityComponentProvider {
static readonly "ID": $ResourceLocation

constructor()

public "getUid"(): $ResourceLocation
public "appendTooltip"(arg0: $ITooltip$Type, arg1: $EntityAccessor$Type, arg2: $IPluginConfig$Type): void
public "getIcon"(arg0: $EntityAccessor$Type, arg1: $IPluginConfig$Type, arg2: $IElement$Type): $IElement
public "isRequired"(): boolean
public "enabledByDefault"(): boolean
public "getDefaultPriority"(): integer
get "uid"(): $ResourceLocation
get "required"(): boolean
get "defaultPriority"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraitInfo$Type = ($TraitInfo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraitInfo_ = $TraitInfo$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/enchantment/core/$SingleLevelEnchantment" {
import {$UnobtainableEnchantment, $UnobtainableEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$UnobtainableEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $SingleLevelEnchantment extends $UnobtainableEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "getMaxLevel"(): integer
public "getMinLevel"(): integer
get "maxLevel"(): integer
get "minLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SingleLevelEnchantment$Type = ($SingleLevelEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SingleLevelEnchantment_ = $SingleLevelEnchantment$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$SolResult" {
import {$Estimator$SolType, $Estimator$SolType$Type} from "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$SolType"

export interface $Estimator$SolResult {

 "getVal"(): double
 "getType"(): $Estimator$SolType
}

export namespace $Estimator$SolResult {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Estimator$SolResult$Type = ($Estimator$SolResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Estimator$SolResult_ = $Estimator$SolResult$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/equipment/$EquipmentTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EquipmentGroup, $EquipmentGroup$Type} from "packages/dev/xkmc/modulargolems/content/menu/registry/$EquipmentGroup"
import {$GolemTabBase, $GolemTabBase$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabBase"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GolemTabToken, $GolemTabToken$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabToken"
import {$GolemTabManager, $GolemTabManager$Type} from "packages/dev/xkmc/modulargolems/content/menu/tabs/$GolemTabManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $EquipmentTab extends $GolemTabBase<($EquipmentGroup), ($EquipmentTab)> {
readonly "index": integer
readonly "stack": $ItemStack
readonly "token": $GolemTabToken<(G), (T)>
readonly "manager": $GolemTabManager<(G)>
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: $GolemTabToken$Type<($EquipmentGroup$Type), ($EquipmentTab$Type)>, arg2: $GolemTabManager$Type<($EquipmentGroup$Type)>, arg3: $ItemStack$Type, arg4: $Component$Type)

public "onTabClicked"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentTab$Type = ($EquipmentTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentTab_ = $EquipmentTab$Type;
}}
declare module "packages/dev/xkmc/l2screentracker/screen/source/$ItemSourceData" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export interface $ItemSourceData<T extends ($Record) & ($ItemSourceData<(T)>)> {

}

export namespace $ItemSourceData {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemSourceData$Type<T> = ($ItemSourceData<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemSourceData_<T> = $ItemSourceData$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2serial/network/$SimplePacketBase" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $SimplePacketBase {

constructor()

public "write"(arg0: $FriendlyByteBuf$Type): void
public "handle"(arg0: $Supplier$Type<($NetworkEvent$Context$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimplePacketBase$Type = ($SimplePacketBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimplePacketBase_ = $SimplePacketBase$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$SolType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Estimator$SolResult, $Estimator$SolResult$Type} from "packages/dev/xkmc/modulargolems/content/entity/ranged/$Estimator$SolResult"

export class $Estimator$SolType extends $Enum<($Estimator$SolType)> implements $Estimator$SolResult {
static readonly "OVER": $Estimator$SolType
static readonly "BELOW": $Estimator$SolType
static readonly "ZERO": $Estimator$SolType


public "getVal"(): double
public static "values"(): ($Estimator$SolType)[]
public static "valueOf"(arg0: string): $Estimator$SolType
public "getType"(): $Estimator$SolType
get "val"(): double
get "type"(): $Estimator$SolType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Estimator$SolType$Type = (("over") | ("zero") | ("below")) | ($Estimator$SolType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Estimator$SolType_ = $Estimator$SolType$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/effects/v3/$VampireHeal" {
import {$LinearFuncEntry, $LinearFuncEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$LinearFuncEntry"
import {$SetEffect, $SetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/core/$SetEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ArtifactSetConfig$Entry, $ArtifactSetConfig$Entry$Type} from "packages/dev/xkmc/l2artifacts/content/config/$ArtifactSetConfig$Entry"
import {$AttackCache, $AttackCache$Type} from "packages/dev/xkmc/l2damagetracker/contents/attack/$AttackCache"

export class $VampireHeal extends $SetEffect {
readonly "ids": integer

constructor(arg0: $LinearFuncEntry$Type, arg1: $LinearFuncEntry$Type)

public "getDetailedDescription"(arg0: integer): $List<($MutableComponent)>
public "playerDamageOpponentEvent"(arg0: $LivingEntity$Type, arg1: $ArtifactSetConfig$Entry$Type, arg2: integer, arg3: $AttackCache$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VampireHeal$Type = ($VampireHeal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VampireHeal_ = $VampireHeal$Type;
}}
declare module "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipeBuilder" {
import {$BurntRecipe, $BurntRecipe$Type} from "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BaseRecipeBuilder, $BaseRecipeBuilder$Type} from "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipeBuilder"
import {$BurntRecipe$Inv, $BurntRecipe$Inv$Type} from "packages/dev/xkmc/l2complements/content/recipe/$BurntRecipe$Inv"

export class $BurntRecipeBuilder extends $BaseRecipeBuilder<($BurntRecipeBuilder), ($BurntRecipe), ($BurntRecipe), ($BurntRecipe$Inv)> {

constructor(arg0: $Ingredient$Type, arg1: $ItemStack$Type, arg2: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BurntRecipeBuilder$Type = ($BurntRecipeBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BurntRecipeBuilder_ = $BurntRecipeBuilder$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/modifier/ride/$RideUpgrade" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AttributeGolemModifier, $AttributeGolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AttributeGolemModifier$AttrEntry, $AttributeGolemModifier$AttrEntry$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$AttributeGolemModifier$AttrEntry"
import {$GolemType, $GolemType$Type} from "packages/dev/xkmc/modulargolems/content/core/$GolemType"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $RideUpgrade extends $AttributeGolemModifier {
readonly "entries": ($AttributeGolemModifier$AttrEntry)[]
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor(arg0: integer, ...arg1: ($AttributeGolemModifier$AttrEntry$Type)[])

public "getDetail"(arg0: integer): $List<($MutableComponent)>
public "fitsOn"(arg0: $GolemType$Type<(any), (any)>): boolean
public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RideUpgrade$Type = ($RideUpgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RideUpgrade_ = $RideUpgrade$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/mobeffects/$FrostShield" {
import {$InherentEffect, $InherentEffect$Type} from "packages/dev/xkmc/l2library/base/effects/api/$InherentEffect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"

export class $FrostShield extends $InherentEffect {

constructor(arg0: $MobEffectCategory$Type, arg1: integer)

public "getCurativeItems"(): $List<($ItemStack)>
get "curativeItems"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrostShield$Type = ($FrostShield);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrostShield_ = $FrostShield$Type;
}}
declare module "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityNetworkHandler" {
import {$PlayerCapabilityHolder, $PlayerCapabilityHolder$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityHolder"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PlayerCapabilityTemplate, $PlayerCapabilityTemplate$Type} from "packages/dev/xkmc/l2library/capability/player/$PlayerCapabilityTemplate"

export class $PlayerCapabilityNetworkHandler<T extends $PlayerCapabilityTemplate<(T)>> {
readonly "holder": $PlayerCapabilityHolder<(T)>

constructor(arg0: $PlayerCapabilityHolder$Type<(T)>)

public "toTracking"(arg0: $ServerPlayer$Type): void
public "toClientSyncAll"(arg0: $ServerPlayer$Type): void
public "startTracking"(arg0: $ServerPlayer$Type, arg1: $ServerPlayer$Type): void
public "toClientSyncClone"(arg0: $ServerPlayer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerCapabilityNetworkHandler$Type<T> = ($PlayerCapabilityNetworkHandler<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerCapabilityNetworkHandler_<T> = $PlayerCapabilityNetworkHandler$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2backpack/content/remote/worldchest/$BlockPickupCap" {
import {$WorldChestInvWrapper, $WorldChestInvWrapper$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestInvWrapper"
import {$PickupTrace, $PickupTrace$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupTrace"
import {$PickupConfig, $PickupConfig$Type} from "packages/dev/xkmc/l2backpack/content/capability/$PickupConfig"
import {$StorageContainer, $StorageContainer$Type} from "packages/dev/xkmc/l2backpack/content/remote/common/$StorageContainer"
import {$WorldChestBlockEntity, $WorldChestBlockEntity$Type} from "packages/dev/xkmc/l2backpack/content/remote/worldchest/$WorldChestBlockEntity"
import {$InvPickupCap, $InvPickupCap$Type} from "packages/dev/xkmc/l2backpack/content/capability/$InvPickupCap"

export class $BlockPickupCap extends $InvPickupCap<($WorldChestInvWrapper)> {

constructor(arg0: $WorldChestBlockEntity$Type, arg1: $StorageContainer$Type, arg2: $PickupConfig$Type)

public "getSignature"(): integer
public "getPickupMode"(): $PickupConfig
public "getInv"(arg0: $PickupTrace$Type): $WorldChestInvWrapper
public static "register"(): void
get "signature"(): integer
get "pickupMode"(): $PickupConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockPickupCap$Type = ($BlockPickupCap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockPickupCap_ = $BlockPickupCap$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/items/$LAItem1" {
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$SaintReduction, $SaintReduction$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v1/$SaintReduction"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$SaintRestoration, $SaintRestoration$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v1/$SaintRestoration"
import {$PerfectionProtection, $PerfectionProtection$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v1/$PerfectionProtection"
import {$PerfectionAbsorption, $PerfectionAbsorption$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v1/$PerfectionAbsorption"
import {$ProtectionResistance, $ProtectionResistance$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v1/$ProtectionResistance"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"
import {$DamoclesSword, $DamoclesSword$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v1/$DamoclesSword"

export class $LAItem1 {
static readonly "SET_SAINT": $SetEntry<($ArtifactSet)>
static readonly "SET_PERFECTION": $SetEntry<($ArtifactSet)>
static readonly "SET_DAMOCLES": $SetEntry<($ArtifactSet)>
static readonly "SET_PROTECTION": $SetEntry<($ArtifactSet)>
static readonly "EFF_PERFECTION_ABSORPTION": $RegistryEntry<($PerfectionAbsorption)>
static readonly "EFF_PERFECTION_PROTECTION": $RegistryEntry<($PerfectionProtection)>
static readonly "EFF_SAINT_REDUCTION": $RegistryEntry<($SaintReduction)>
static readonly "EFF_SAINT_RESTORATION": $RegistryEntry<($SaintRestoration)>
static readonly "EFF_DAMOCLES": $RegistryEntry<($DamoclesSword)>
static readonly "EFF_PROTECTION_RESISTANCE": $RegistryEntry<($ProtectionResistance)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LAItem1$Type = ($LAItem1);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LAItem1_ = $LAItem1$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/items/$LAItem0" {
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$AttributeSetEffect, $AttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetEffect"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"

export class $LAItem0 {
static readonly "SET_GAMBLER": $SetEntry<($ArtifactSet)>
static readonly "SET_BERSERKER": $SetEntry<($ArtifactSet)>
static readonly "SET_ARCHER": $SetEntry<($ArtifactSet)>
static readonly "EFF_GAMBLER_3": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_GAMBLER_5": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_BERSERKER_3": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_BERSERKER_5": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_ARCHER_3": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_ARCHER_5": $RegistryEntry<($AttributeSetEffect)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LAItem0$Type = ($LAItem0);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LAItem0_ = $LAItem0$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/items/$LAItem3" {
import {$Photosynthesisffect, $Photosynthesisffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v3/$Photosynthesisffect"
import {$GluttonyHeal, $GluttonyHeal$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v3/$GluttonyHeal"
import {$VampireHeal, $VampireHeal$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v3/$VampireHeal"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$SunBlockMask, $SunBlockMask$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v3/$SunBlockMask"
import {$VampireBurn, $VampireBurn$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v3/$VampireBurn"
import {$SimpleCASetEffect, $SimpleCASetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$SimpleCASetEffect"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"

export class $LAItem3 {
static readonly "SET_PHOTOSYN": $SetEntry<($ArtifactSet)>
static readonly "SET_VAMPIRE": $SetEntry<($ArtifactSet)>
static readonly "SET_SUN_BLOCK": $SetEntry<($ArtifactSet)>
static readonly "SET_GLUTTONY": $SetEntry<($ArtifactSet)>
static readonly "SET_FALLEN": $SetEntry<($ArtifactSet)>
static readonly "EFF_PHOTOSYN": $RegistryEntry<($Photosynthesisffect)>
static readonly "EFF_VAMPIRE_BURN": $RegistryEntry<($VampireBurn)>
static readonly "EFF_VAMPIRE_HEAL": $RegistryEntry<($VampireHeal)>
static readonly "EFF_SUN_BLOCK": $RegistryEntry<($SunBlockMask)>
static readonly "EFF_GLUTTONY_FAST": $RegistryEntry<($SimpleCASetEffect)>
static readonly "EFF_GLUTTONY_HEAL": $RegistryEntry<($GluttonyHeal)>
static readonly "EFF_FALLEN_1": $RegistryEntry<($SimpleCASetEffect)>
static readonly "EFF_FALLEN_2": $RegistryEntry<($SimpleCASetEffect)>
static readonly "EFF_FALLEN_3": $RegistryEntry<($SimpleCASetEffect)>
static readonly "EFF_FALLEN_4": $RegistryEntry<($SimpleCASetEffect)>
static readonly "EFF_FALLEN_5": $RegistryEntry<($SimpleCASetEffect)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LAItem3$Type = ($LAItem3);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LAItem3_ = $LAItem3$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/items/$LAItem2" {
import {$FrozeSlowEffect, $FrozeSlowEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v2/$FrozeSlowEffect"
import {$FrozeBreakEffect, $FrozeBreakEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v2/$FrozeBreakEffect"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$WrathEffect, $WrathEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v2/$WrathEffect"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$ExecutorSelfHurtEffect, $ExecutorSelfHurtEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v2/$ExecutorSelfHurtEffect"
import {$ExecutorLimitEffect, $ExecutorLimitEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v2/$ExecutorLimitEffect"
import {$PhysicalDamageEffect, $PhysicalDamageEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v2/$PhysicalDamageEffect"
import {$AttributeSetEffect, $AttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetEffect"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"

export class $LAItem2 {
static readonly "SET_FROZE": $SetEntry<($ArtifactSet)>
static readonly "SET_EXECUTOR": $SetEntry<($ArtifactSet)>
static readonly "SET_PHYSICAL": $SetEntry<($ArtifactSet)>
static readonly "SET_WRATH": $SetEntry<($ArtifactSet)>
static readonly "EFF_FROZE_SLOW": $RegistryEntry<($FrozeSlowEffect)>
static readonly "EFF_FROZE_BREAK": $RegistryEntry<($FrozeBreakEffect)>
static readonly "EFF_EXECUTOR_SELF_HURT": $RegistryEntry<($ExecutorSelfHurtEffect)>
static readonly "EFF_EXECUTOR_LIMIT": $RegistryEntry<($ExecutorLimitEffect)>
static readonly "EFF_PHYSICAL_DAMAGE": $RegistryEntry<($PhysicalDamageEffect)>
static readonly "EFF_PHYSICAL_ARMOR": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_WRATH_POISON": $RegistryEntry<($WrathEffect)>
static readonly "EFF_WRATH_SLOW": $RegistryEntry<($WrathEffect)>
static readonly "EFF_WRATH_FIRE": $RegistryEntry<($WrathEffect)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LAItem2$Type = ($LAItem2);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LAItem2_ = $LAItem2$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/items/$LAItem5" {
import {$ThermalShield, $ThermalShield$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$ThermalShield"
import {$DeadCellParry, $DeadCellParry$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$DeadCellParry"
import {$FungusExplode, $FungusExplode$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$FungusExplode"
import {$PoisonTouch, $PoisonTouch$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$PoisonTouch"
import {$SlimyBuffer, $SlimyBuffer$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$SlimyBuffer"
import {$Slimification, $Slimification$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$Slimification"
import {$FungusInfect, $FungusInfect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$FungusInfect"
import {$AttributeSetEffect, $AttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetEffect"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"
import {$PoisonAttack, $PoisonAttack$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$PoisonAttack"
import {$FleshOvergrowth, $FleshOvergrowth$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$FleshOvergrowth"
import {$GildedAttack, $GildedAttack$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$GildedAttack"
import {$DeadCellDodge, $DeadCellDodge$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$DeadCellDodge"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$FleshAttack, $FleshAttack$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$FleshAttack"
import {$ThermalMotive, $ThermalMotive$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v5/$ThermalMotive"

export class $LAItem5 {
static readonly "SET_CELL": $SetEntry<($ArtifactSet)>
static readonly "SET_FLESH": $SetEntry<($ArtifactSet)>
static readonly "SET_FUNGUS": $SetEntry<($ArtifactSet)>
static readonly "SET_GILDED": $SetEntry<($ArtifactSet)>
static readonly "SET_POISONOUS": $SetEntry<($ArtifactSet)>
static readonly "SET_SLIMY": $SetEntry<($ArtifactSet)>
static readonly "SET_THERMAL": $SetEntry<($ArtifactSet)>
static readonly "CELL_3": $RegistryEntry<($DeadCellDodge)>
static readonly "CELL_5": $RegistryEntry<($DeadCellParry)>
static readonly "FLESH_3": $RegistryEntry<($FleshOvergrowth)>
static readonly "FLESH_5": $RegistryEntry<($FleshAttack)>
static readonly "FUNGUS_3": $RegistryEntry<($FungusInfect)>
static readonly "FUNGUS_5": $RegistryEntry<($FungusExplode)>
static readonly "GILDED_3": $RegistryEntry<($AttributeSetEffect)>
static readonly "GILDED_5": $RegistryEntry<($GildedAttack)>
static readonly "POISON_2": $RegistryEntry<($PoisonTouch)>
static readonly "POISON_5": $RegistryEntry<($PoisonAttack)>
static readonly "SLIMY_1": $RegistryEntry<($SlimyBuffer)>
static readonly "SLIMY_3": $RegistryEntry<($Slimification)>
static readonly "THERMAL_2": $RegistryEntry<($ThermalMotive)>
static readonly "THERMAL_4": $RegistryEntry<($ThermalShield)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LAItem5$Type = ($LAItem5);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LAItem5_ = $LAItem5$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/items/$LAItem4" {
import {$TimedCASetEffect, $TimedCASetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$TimedCASetEffect"
import {$LongShooterPersistentEffect, $LongShooterPersistentEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$LongShooterPersistentEffect"
import {$AbyssAttackEffect, $AbyssAttackEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$AbyssAttackEffect"
import {$LongShooterEffect, $LongShooterEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$LongShooterEffect"
import {$AttributeSetEffect, $AttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetEffect"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"
import {$LuckAttackEffect, $LuckAttackEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$LuckAttackEffect"
import {$ImmobileEffect, $ImmobileEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$ImmobileEffect"
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$AttackStrikeEffect, $AttackStrikeEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/v4/$AttackStrikeEffect"
import {$SimpleCPSetEffect, $SimpleCPSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/persistent/$SimpleCPSetEffect"

export class $LAItem4 {
static readonly "SET_ANCIENT": $SetEntry<($ArtifactSet)>
static readonly "SET_LUCKCLOVER": $SetEntry<($ArtifactSet)>
static readonly "SET_ABYSSMEDAL": $SetEntry<($ArtifactSet)>
static readonly "SET_LONGSHOOTER": $SetEntry<($ArtifactSet)>
static readonly "EFF_ANCIENT_1": $RegistryEntry<($TimedCASetEffect)>
static readonly "EFF_ANCIENT_2": $RegistryEntry<($SimpleCPSetEffect)>
static readonly "EFF_ANCIENT_3": $RegistryEntry<($AttackStrikeEffect)>
static readonly "EFF_ANCIENT_4": $RegistryEntry<($ImmobileEffect)>
static readonly "EFF_ANCIENT_5": $RegistryEntry<($TimedCASetEffect)>
static readonly "EFF_LONGSHOOTER_3": $RegistryEntry<($LongShooterEffect)>
static readonly "EFF_LONGSHOOTER_4": $RegistryEntry<($LongShooterPersistentEffect)>
static readonly "EFF_LUCKCLOVER_3": $RegistryEntry<($LuckAttackEffect)>
static readonly "EFF_LUCKCLOVER_4": $RegistryEntry<($LuckAttackEffect)>
static readonly "EFF_ABYSSMEDAL_3": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_ABYSSMEDAL_5": $RegistryEntry<($AbyssAttackEffect)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LAItem4$Type = ($LAItem4);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LAItem4_ = $LAItem4$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/init/registrate/items/$LAItem6" {
import {$ArtifactSet, $ArtifactSet$Type} from "packages/dev/xkmc/l2artifacts/content/core/$ArtifactSet"
import {$RegistryEntry, $RegistryEntry$Type} from "packages/com/tterrag/registrate/util/entry/$RegistryEntry"
import {$AttributeSetEffect, $AttributeSetEffect$Type} from "packages/dev/xkmc/l2artifacts/content/effects/attribute/$AttributeSetEffect"
import {$SetEntry, $SetEntry$Type} from "packages/dev/xkmc/l2artifacts/init/registrate/entries/$SetEntry"

export class $LAItem6 {
static readonly "SET_MAGE": $SetEntry<($ArtifactSet)>
static readonly "SET_PIRATE": $SetEntry<($ArtifactSet)>
static readonly "EFF_MAGE_2": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_MAGE_4": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_PIRATE_2": $RegistryEntry<($AttributeSetEffect)>
static readonly "EFF_PIRATE_4": $RegistryEntry<($AttributeSetEffect)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LAItem6$Type = ($LAItem6);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LAItem6_ = $LAItem6$Type;
}}
declare module "packages/dev/xkmc/l2library/init/explosion/$VanillaExplosionContext" {
import {$ExplosionDamageCalculator, $ExplosionDamageCalculator$Type} from "packages/net/minecraft/world/level/$ExplosionDamageCalculator"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Explosion$BlockInteraction, $Explosion$BlockInteraction$Type} from "packages/net/minecraft/world/level/$Explosion$BlockInteraction"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Level$ExplosionInteraction, $Level$ExplosionInteraction$Type} from "packages/net/minecraft/world/level/$Level$ExplosionInteraction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $VanillaExplosionContext extends $Record {

constructor(arg0: $Level$Type, arg1: $Entity$Type, arg2: $DamageSource$Type, arg3: $ExplosionDamageCalculator$Type, arg4: boolean, arg5: $Level$ExplosionInteraction$Type)
constructor(entity: $Entity$Type, source: $DamageSource$Type, calculator: $ExplosionDamageCalculator$Type, fire: boolean, type: $Explosion$BlockInteraction$Type)

public "type"(): $Explosion$BlockInteraction
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "source"(): $DamageSource
public "fire"(): boolean
public "entity"(): $Entity
public "calculator"(): $ExplosionDamageCalculator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaExplosionContext$Type = ($VanillaExplosionContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaExplosionContext_ = $VanillaExplosionContext$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/entity/$HostilityBullet" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BulletType, $BulletType$Type} from "packages/dev/xkmc/l2hostility/content/entity/$BulletType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$ShulkerBullet, $ShulkerBullet$Type} from "packages/net/minecraft/world/entity/projectile/$ShulkerBullet"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $HostilityBullet extends $ShulkerBullet {
 "finalTarget": $Entity
 "currentMoveDirection": $Direction
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<($HostilityBullet$Type)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $LivingEntity$Type, arg2: $Entity$Type, arg3: $Direction$Axis$Type, arg4: $BulletType$Type, arg5: integer)

public "isTarget"(arg0: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HostilityBullet$Type = ($HostilityBullet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HostilityBullet_ = $HostilityBullet$Type;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/common/$ArtifactChestMenuPvd$Factory" {
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export interface $ArtifactChestMenuPvd$Factory {

 "apply"(arg0: integer, arg1: $Inventory$Type, arg2: $ArtifactChestToken$Type): $AbstractContainerMenu

(arg0: integer, arg1: $Inventory$Type, arg2: $ArtifactChestToken$Type): $AbstractContainerMenu
}

export namespace $ArtifactChestMenuPvd$Factory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArtifactChestMenuPvd$Factory$Type = ($ArtifactChestMenuPvd$Factory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArtifactChestMenuPvd$Factory_ = $ArtifactChestMenuPvd$Factory$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/data/$MGConfig$Common" {
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"

export class $MGConfig$Common {
readonly "thorn": $ForgeConfigSpec$DoubleValue
readonly "fiery": $ForgeConfigSpec$DoubleValue
readonly "magicResistance": $ForgeConfigSpec$DoubleValue
readonly "explosionResistance": $ForgeConfigSpec$DoubleValue
readonly "compatTFHealing": $ForgeConfigSpec$DoubleValue
readonly "compatTFDamage": $ForgeConfigSpec$DoubleValue
readonly "manaMendingCost": $ForgeConfigSpec$IntValue
readonly "manaMendingVal": $ForgeConfigSpec$DoubleValue
readonly "manaBoostingDamage": $ForgeConfigSpec$DoubleValue
readonly "manaBoostingCost": $ForgeConfigSpec$IntValue
readonly "manaProductionVal": $ForgeConfigSpec$IntValue
readonly "manaBurstDamage": $ForgeConfigSpec$DoubleValue
readonly "manaBurstCost": $ForgeConfigSpec$IntValue
readonly "pixieAttackProb": $ForgeConfigSpec$DoubleValue
readonly "pixieCounterattackProb": $ForgeConfigSpec$DoubleValue
readonly "carminiteTime": $ForgeConfigSpec$IntValue
readonly "coating": $ForgeConfigSpec$DoubleValue
readonly "mechSpeed": $ForgeConfigSpec$DoubleValue
readonly "mechAttack": $ForgeConfigSpec$DoubleValue
readonly "mechMaxFuel": $ForgeConfigSpec$IntValue
readonly "barehandRetrieve": $ForgeConfigSpec$BooleanValue
readonly "strictInteract": $ForgeConfigSpec$BooleanValue
readonly "damageCap": $ForgeConfigSpec$DoubleValue
readonly "conduitCooldown": $ForgeConfigSpec$IntValue
readonly "conduitDamage": $ForgeConfigSpec$IntValue
readonly "conduitBoostAttack": $ForgeConfigSpec$DoubleValue
readonly "conduitBoostArmor": $ForgeConfigSpec$IntValue
readonly "conduitBoostToughness": $ForgeConfigSpec$IntValue
readonly "conduitBoostReduction": $ForgeConfigSpec$DoubleValue
readonly "conduitBoostSpeed": $ForgeConfigSpec$DoubleValue
readonly "thunderHeal": $ForgeConfigSpec$IntValue
readonly "teleportRadius": $ForgeConfigSpec$IntValue
readonly "teleportCooldown": $ForgeConfigSpec$IntValue
readonly "targetDamageBonus": $ForgeConfigSpec$DoubleValue
readonly "basePickupRange": $ForgeConfigSpec$IntValue
readonly "mendingXpCost": $ForgeConfigSpec$IntValue
readonly "summonDistance": $ForgeConfigSpec$IntValue
readonly "retrieveDistance": $ForgeConfigSpec$IntValue
readonly "retrieveRange": $ForgeConfigSpec$IntValue
readonly "ownerPickupOnly": $ForgeConfigSpec$BooleanValue
readonly "startFollowRadius": $ForgeConfigSpec$DoubleValue
readonly "stopWanderRadius": $ForgeConfigSpec$DoubleValue
readonly "maxWanderRadius": $ForgeConfigSpec$DoubleValue
readonly "riddenSpeedFactor": $ForgeConfigSpec$DoubleValue
readonly "targetResetTime": $ForgeConfigSpec$IntValue
readonly "targetResetNoMovementRange": $ForgeConfigSpec$DoubleValue
readonly "dogGolemSlot": $ForgeConfigSpec$IntValue
readonly "humanoidGolemSlot": $ForgeConfigSpec$IntValue
readonly "largeGolemSlot": $ForgeConfigSpec$IntValue
readonly "doEnemyAggro": $ForgeConfigSpec$BooleanValue


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MGConfig$Common$Type = ($MGConfig$Common);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MGConfig$Common_ = $MGConfig$Common$Type;
}}
declare module "packages/dev/xkmc/modulargolems/init/advancement/$GolemAnvilFixTrigger$Ins" {
import {$BaseCriterionInstance, $BaseCriterionInstance$Type} from "packages/dev/xkmc/l2library/serial/advancements/$BaseCriterionInstance"
import {$GolemAnvilFixTrigger, $GolemAnvilFixTrigger$Type} from "packages/dev/xkmc/modulargolems/init/advancement/$GolemAnvilFixTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $GolemAnvilFixTrigger$Ins extends $BaseCriterionInstance<($GolemAnvilFixTrigger$Ins), ($GolemAnvilFixTrigger)> {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GolemAnvilFixTrigger$Ins$Type = ($GolemAnvilFixTrigger$Ins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GolemAnvilFixTrigger$Ins_ = $GolemAnvilFixTrigger$Ins$Type;
}}
declare module "packages/dev/xkmc/l2library/base/menu/scroller/$Scroller" {
import {$MenuLayoutConfig$ScreenRenderer, $MenuLayoutConfig$ScreenRenderer$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig$ScreenRenderer"
import {$MenuLayoutConfig, $MenuLayoutConfig$Type} from "packages/dev/xkmc/l2library/base/menu/base/$MenuLayoutConfig"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ScrollerScreen, $ScrollerScreen$Type} from "packages/dev/xkmc/l2library/base/menu/scroller/$ScrollerScreen"

export class $Scroller {

constructor(arg0: $ScrollerScreen$Type, arg1: $MenuLayoutConfig$Type, arg2: string, arg3: string, arg4: string)

public "render"(arg0: $GuiGraphics$Type, arg1: $MenuLayoutConfig$ScreenRenderer$Type): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Scroller$Type = ($Scroller);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Scroller_ = $Scroller$Type;
}}
declare module "packages/dev/xkmc/l2weaponry/content/enchantments/$RaisedSpiritEnchantment" {
import {$AttributeEnchantment, $AttributeEnchantment$Type} from "packages/dev/xkmc/l2complements/content/enchantment/core/$AttributeEnchantment"
import {$BaseMacheteEnchantment, $BaseMacheteEnchantment$Type} from "packages/dev/xkmc/l2weaponry/content/enchantments/$BaseMacheteEnchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$ItemAttributeModifierEvent, $ItemAttributeModifierEvent$Type} from "packages/net/minecraftforge/event/$ItemAttributeModifierEvent"

export class $RaisedSpiritEnchantment extends $BaseMacheteEnchantment implements $AttributeEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, arg1: $EnchantmentCategory$Type, arg2: ($EquipmentSlot$Type)[])

public "addAttributes"(arg0: integer, arg1: $ItemAttributeModifierEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RaisedSpiritEnchantment$Type = ($RaisedSpiritEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RaisedSpiritEnchantment_ = $RaisedSpiritEnchantment$Type;
}}
declare module "packages/dev/xkmc/l2library/serial/recipe/$BaseRecipeCategory" {
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IDrawable, $IDrawable$Type} from "packages/mezz/jei/api/gui/drawable/$IDrawable"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $BaseRecipeCategory<T, C extends $BaseRecipeCategory<(T), (C)>> implements $IRecipeCategory<(T)> {

constructor(arg0: $ResourceLocation$Type, arg1: $Class$Type<(T)>)

public static "cast"<T extends R, R>(arg0: $Class$Type<(R)>): $Class<(T)>
public "getRecipeType"(): $RecipeType<(T)>
public "getIcon"(): $IDrawable
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: T, arg2: $IFocusGroup$Type): void
public "getBackground"(): $IDrawable
public "getThis"(): C
public "draw"(arg0: T, arg1: $IRecipeSlotsView$Type, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "getWidth"(): integer
public "getHeight"(): integer
public "isHandled"(arg0: T): boolean
public "getTitle"(): $Component
public "handleInput"(arg0: T, arg1: double, arg2: double, arg3: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: T, arg1: $IRecipeSlotsView$Type, arg2: double, arg3: double): $List<($Component)>
public "getRegistryName"(arg0: T): $ResourceLocation
get "recipeType"(): $RecipeType<(T)>
get "icon"(): $IDrawable
get "background"(): $IDrawable
get "this"(): C
get "width"(): integer
get "height"(): integer
get "title"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseRecipeCategory$Type<T, C> = ($BaseRecipeCategory<(T), (C)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseRecipeCategory_<T, C> = $BaseRecipeCategory$Type<(T), (C)>;
}}
declare module "packages/dev/xkmc/l2complements/events/$ItemUseEventHandler$TriCon" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemUseEventHandler$ItemClickHandler, $ItemUseEventHandler$ItemClickHandler$Type} from "packages/dev/xkmc/l2complements/events/$ItemUseEventHandler$ItemClickHandler"

export interface $ItemUseEventHandler$TriCon<T> {

 "accept"(arg0: $ItemUseEventHandler$ItemClickHandler$Type, arg1: $ItemStack$Type, arg2: T): void

(arg0: $ItemUseEventHandler$ItemClickHandler$Type, arg1: $ItemStack$Type, arg2: T): void
}

export namespace $ItemUseEventHandler$TriCon {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemUseEventHandler$TriCon$Type<T> = ($ItemUseEventHandler$TriCon<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemUseEventHandler$TriCon_<T> = $ItemUseEventHandler$TriCon$Type<(T)>;
}}
declare module "packages/dev/xkmc/l2artifacts/content/search/dissolve/$DissolveMenu" {
import {$IntDataSlot, $IntDataSlot$Type} from "packages/dev/xkmc/l2library/base/menu/data/$IntDataSlot"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ArtifactChestToken, $ArtifactChestToken$Type} from "packages/dev/xkmc/l2artifacts/content/search/token/$ArtifactChestToken"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$AbstractScrollerMenu, $AbstractScrollerMenu$Type} from "packages/dev/xkmc/l2artifacts/content/search/common/$AbstractScrollerMenu"
import {$SpriteManager, $SpriteManager$Type} from "packages/dev/xkmc/l2library/base/menu/base/$SpriteManager"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$DataSlot, $DataSlot$Type} from "packages/net/minecraft/world/inventory/$DataSlot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $DissolveMenu extends $AbstractScrollerMenu<($DissolveMenu)> {
readonly "token": $ArtifactChestToken
readonly "total_count": $IntDataSlot
readonly "current_count": $IntDataSlot
readonly "experience": $IntDataSlot
readonly "max_row": $DataSlot
readonly "row": $DataSlot
readonly "extra": integer
readonly "inventory": $Inventory
readonly "container": $Container
readonly "sprite": $SpriteManager
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $ArtifactChestToken$Type)

public static "fromNetwork"(arg0: $MenuType$Type<($DissolveMenu$Type)>, arg1: integer, arg2: $Inventory$Type, arg3: $FriendlyByteBuf$Type): $DissolveMenu
public "slotsChanged"(arg0: $Container$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DissolveMenu$Type = ($DissolveMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DissolveMenu_ = $DissolveMenu$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/traits/common/$ReflectTrait" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MobTrait, $MobTrait$Type} from "packages/dev/xkmc/l2hostility/content/traits/base/$MobTrait"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ReflectTrait extends $MobTrait {

constructor(arg0: $ChatFormatting$Type)

public "addDetail"(arg0: $List$Type<($Component$Type)>): void
public "onHurtByOthers"(arg0: integer, arg1: $LivingEntity$Type, arg2: $LivingHurtEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReflectTrait$Type = ($ReflectTrait);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReflectTrait_ = $ReflectTrait$Type;
}}
declare module "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericHoeItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtraToolConfig, $ExtraToolConfig$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$ExtraToolConfig"
import {$HoeItem, $HoeItem$Type} from "packages/net/minecraft/world/item/$HoeItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$GenericTieredItem, $GenericTieredItem$Type} from "packages/dev/xkmc/l2damagetracker/contents/materials/generic/$GenericTieredItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GenericHoeItem extends $HoeItem implements $GenericTieredItem {
/**
 * 
 * @deprecated
 */
static "TILLABLES": $Map<($Block), ($Pair<($Predicate<($UseOnContext)>), ($Consumer<($UseOnContext)>)>)>
 "speed": float
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
 "tier": $Tier
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Tier$Type, arg1: integer, arg2: float, arg3: $Item$Properties$Type, arg4: $ExtraToolConfig$Type)

public "getExtraConfig"(): $ExtraToolConfig
public "getSweepHitBox"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $Entity$Type): $AABB
public "getAttributeModifiers"(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type): float
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "canBeDepleted"(): boolean
public "mineBlock"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockState$Type, arg3: $BlockPos$Type, arg4: $LivingEntity$Type): boolean
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "damageItem"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
get "extraConfig"(): $ExtraToolConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericHoeItem$Type = ($GenericHoeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericHoeItem_ = $GenericHoeItem$Type;
}}
declare module "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkDifficultyCap" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$LevelChunk, $LevelChunk$Type} from "packages/net/minecraft/world/level/chunk/$LevelChunk"
import {$ChunkDifficulty, $ChunkDifficulty$Type} from "packages/dev/xkmc/l2hostility/content/capability/chunk/$ChunkDifficulty"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilitySerializable, $ICapabilitySerializable$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilitySerializable"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $ChunkDifficultyCap implements $ICapabilitySerializable<($CompoundTag)> {
readonly "w": $LevelChunk
readonly "handler": $ChunkDifficulty
readonly "lo": $LazyOptional<($ChunkDifficulty)>

constructor(arg0: $LevelChunk$Type)

public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChunkDifficultyCap$Type = ($ChunkDifficultyCap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChunkDifficultyCap_ = $ChunkDifficultyCap$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/materials/l2complements/$FreezingModifier" {
import {$StatFilterType, $StatFilterType$Type} from "packages/dev/xkmc/modulargolems/content/core/$StatFilterType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AbstractGolemEntity, $AbstractGolemEntity$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$AbstractGolemEntity"
import {$LivingAttackEvent, $LivingAttackEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingAttackEvent"
import {$GolemFlags, $GolemFlags$Type} from "packages/dev/xkmc/modulargolems/content/entity/common/$GolemFlags"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$GolemModifier, $GolemModifier$Type} from "packages/dev/xkmc/modulargolems/content/modifier/base/$GolemModifier"

export class $FreezingModifier extends $GolemModifier {
static readonly "MAX_LEVEL": integer
readonly "type": $StatFilterType
readonly "maxLevel": integer

constructor()

public "onRegisterFlag"(arg0: $Consumer$Type<($GolemFlags$Type)>): void
public "onAttacked"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingAttackEvent$Type, arg2: integer): void
public "onHurtTarget"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
public "onHurt"(arg0: $AbstractGolemEntity$Type<(any), (any)>, arg1: $LivingHurtEvent$Type, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FreezingModifier$Type = ($FreezingModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FreezingModifier_ = $FreezingModifier$Type;
}}
declare module "packages/dev/xkmc/modulargolems/compat/misc/$CEICompat" {
import {$GolemHandleExpEvent, $GolemHandleExpEvent$Type} from "packages/dev/xkmc/modulargolems/events/event/$GolemHandleExpEvent"

export class $CEICompat {

constructor()

public static "register"(): void
public static "onHandleExp"(arg0: $GolemHandleExpEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CEICompat$Type = ($CEICompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CEICompat_ = $CEICompat$Type;
}}
declare module "packages/dev/xkmc/modulargolems/content/menu/ghost/$SetItemFilterToServer" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$SerialPacketBase, $SerialPacketBase$Type} from "packages/dev/xkmc/l2serial/network/$SerialPacketBase"

export class $SetItemFilterToServer extends $SerialPacketBase {

/**
 * 
 * @deprecated
 */
constructor()

public "handle"(arg0: $NetworkEvent$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetItemFilterToServer$Type = ($SetItemFilterToServer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetItemFilterToServer_ = $SetItemFilterToServer$Type;
}}
