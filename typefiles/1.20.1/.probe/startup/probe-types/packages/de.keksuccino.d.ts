declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/$PlayerEntityPoseScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $PlayerEntityPoseScreen extends $CellScreen {
 "bodyXRot": string
 "bodyYRot": string
 "headXRot": string
 "headYRot": string
 "headZRot": string
 "leftArmXRot": string
 "leftArmYRot": string
 "leftArmZRot": string
 "rightArmXRot": string
 "rightArmYRot": string
 "rightArmZRot": string
 "leftLegXRot": string
 "leftLegYRot": string
 "leftLegZRot": string
 "rightLegXRot": string
 "rightLegYRot": string
 "rightLegZRot": string
 "bodyXRotAdvancedMode": boolean
 "bodyYRotAdvancedMode": boolean
 "headXRotAdvancedMode": boolean
 "headYRotAdvancedMode": boolean
 "headZRotAdvancedMode": boolean
 "leftArmXRotAdvancedMode": boolean
 "leftArmYRotAdvancedMode": boolean
 "leftArmZRotAdvancedMode": boolean
 "rightArmXRotAdvancedMode": boolean
 "rightArmYRotAdvancedMode": boolean
 "rightArmZRotAdvancedMode": boolean
 "leftLegXRotAdvancedMode": boolean
 "leftLegYRotAdvancedMode": boolean
 "leftLegZRotAdvancedMode": boolean
 "rightLegXRotAdvancedMode": boolean
 "rightLegYRotAdvancedMode": boolean
 "rightLegZRotAdvancedMode": boolean
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityPoseScreen$Type = ($PlayerEntityPoseScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityPoseScreen_ = $PlayerEntityPoseScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsAnyElementHoveredRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsAnyElementHoveredRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsAnyElementHoveredRequirement$Type = ($IsAnyElementHoveredRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsAnyElementHoveredRequirement_ = $IsAnyElementHoveredRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$Post" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$InitOrResizeScreenEvent, $InitOrResizeScreenEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$InitOrResizeScreenEvent$InitializationPhase, $InitOrResizeScreenEvent$InitializationPhase$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$InitializationPhase"

export class $InitOrResizeScreenEvent$Post extends $InitOrResizeScreenEvent {

constructor(arg0: $Screen$Type, arg1: $InitOrResizeScreenEvent$InitializationPhase$Type)

public "addWidget"<T extends ($GuiEventListener) & ($NarratableEntry)>(arg0: T): void
public "getRenderables"(): $List<($Renderable)>
public "getNarratables"(): $List<($NarratableEntry)>
public "getWidgets"(): $List<($GuiEventListener)>
public "addRenderableWidget"<T extends ($GuiEventListener) & ($NarratableEntry) & ($Renderable)>(arg0: T): void
get "renderables"(): $List<($Renderable)>
get "narratables"(): $List<($NarratableEntry)>
get "widgets"(): $List<($GuiEventListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InitOrResizeScreenEvent$Post$Type = ($InitOrResizeScreenEvent$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InitOrResizeScreenEvent$Post_ = $InitOrResizeScreenEvent$Post$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/cursor/$CursorElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$CursorEditorElement, $CursorEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/cursor/$CursorEditorElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$CursorElement, $CursorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/cursor/$CursorElement"

export class $CursorElementBuilder extends $ElementBuilder<($CursorElement), ($CursorEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $CursorElement$Type, arg1: $LayoutEditorScreen$Type): $CursorEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CursorElementBuilder$Type = ($CursorElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CursorElementBuilder_ = $CursorElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/screen/identifier/$UniversalScreenIdentifierRegistry" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $UniversalScreenIdentifierRegistry {

constructor()

public static "register"(arg0: string, arg1: string): void
public static "getUniversalIdentifierFor"(arg0: string): string
public static "getUniversalIdentifierFor"(arg0: $Screen$Type): string
public static "tryGetUniversalIdentifierFor"(arg0: string): string
public static "getScreenForUniversalIdentifier"(arg0: string): string
public static "getUniversalIdentifiers"(): $List<(string)>
public static "universalIdentifierExists"(arg0: string): boolean
get "universalIdentifiers"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UniversalScreenIdentifierRegistry$Type = ($UniversalScreenIdentifierRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UniversalScreenIdentifierRegistry_ = $UniversalScreenIdentifierRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$JavaVersionPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $JavaVersionPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getAlternativeIdentifiers"(): $List<(string)>
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "alternativeIdentifiers"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JavaVersionPlaceholder$Type = ($JavaVersionPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JavaVersionPlaceholder_ = $JavaVersionPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldElement$InputFieldType" {
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/fancymenu/util/input/$CharacterFilter"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $InputFieldElement$InputFieldType extends $Enum<($InputFieldElement$InputFieldType)> {
static readonly "INTEGER_ONLY": $InputFieldElement$InputFieldType
static readonly "DECIMAL_ONLY": $InputFieldElement$InputFieldType
static readonly "URL": $InputFieldElement$InputFieldType
static readonly "TEXT": $InputFieldElement$InputFieldType


public "getName"(): string
public static "values"(): ($InputFieldElement$InputFieldType)[]
public static "valueOf"(arg0: string): $InputFieldElement$InputFieldType
public static "getByName"(arg0: string): $InputFieldElement$InputFieldType
public "getFilter"(): $CharacterFilter
get "name"(): string
get "filter"(): $CharacterFilter
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputFieldElement$InputFieldType$Type = (("integer_only") | ("decimal_only") | ("text") | ("url")) | ($InputFieldElement$InputFieldType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputFieldElement$InputFieldType_ = $InputFieldElement$InputFieldType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$Alignment" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $AbstractElement$Alignment extends $Enum<($AbstractElement$Alignment)> {
static readonly "LEFT": $AbstractElement$Alignment
static readonly "RIGHT": $AbstractElement$Alignment
static readonly "CENTERED": $AbstractElement$Alignment
readonly "key": string


public static "values"(): ($AbstractElement$Alignment)[]
public static "valueOf"(arg0: string): $AbstractElement$Alignment
public static "getByName"(arg0: string): $AbstractElement$Alignment
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractElement$Alignment$Type = (("left") | ("centered") | ("right")) | ($AbstractElement$Alignment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractElement$Alignment_ = $AbstractElement$Alignment$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/musiccontroller/$MusicControllerElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $MusicControllerElement extends $AbstractElement {
 "playMenuMusic": boolean
 "playWorldMusic": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "tick"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MusicControllerElement$Type = ($MusicControllerElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MusicControllerElement_ = $MusicControllerElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorHistory$Snapshot" {
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$Layout, $Layout$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout"

export class $LayoutEditorHistory$Snapshot {
 "snapshot": $Layout
 "preSnapshotState": $LayoutEditorHistory$Snapshot

constructor(arg0: $LayoutEditorScreen$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutEditorHistory$Snapshot$Type = ($LayoutEditorHistory$Snapshot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutEditorHistory$Snapshot_ = $LayoutEditorHistory$Snapshot$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer" {
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$MarkdownTextFragment, $MarkdownTextFragment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$MarkdownTextLine, $MarkdownTextLine$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextLine"
import {$MarkdownRenderer$TextCase, $MarkdownRenderer$TextCase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer$TextCase"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FocuslessContainerEventHandler, $FocuslessContainerEventHandler$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/$FocuslessContainerEventHandler"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"

export class $MarkdownRenderer implements $Renderable, $FocuslessContainerEventHandler, $NarratableEntry, $NavigatableWidget {
 "skipRefresh": boolean

constructor()

public "getParentRenderScale"(): float
public "setParentRenderScale"(arg0: float): $MarkdownRenderer
public "tick"(): void
public "getText"(): string
public "setText"(arg0: string): void
public "getY"(): float
public "updateSize"(): void
public "getRealWidth"(): float
public "setOptimalWidth"(arg0: float): $MarkdownRenderer
public "getTextOpacity"(): float
public "getOptimalWidth"(): float
public "children"(): $List<($MarkdownTextFragment)>
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "isNavigatable"(): boolean
public "setDragging"(arg0: boolean): void
public "isDragging"(): boolean
public "setFocused"(arg0: boolean): void
public "setX"(arg0: float): $MarkdownRenderer
public "setY"(arg0: float): $MarkdownRenderer
public "getX"(): float
public "setTextCase"(arg0: $MarkdownRenderer$TextCase$Type): $MarkdownRenderer
public "setTextBaseScale"(arg0: float): $MarkdownRenderer
public "setTextBaseColor"(arg0: $DrawableColor$Type): $MarkdownRenderer
public "setQuoteIndent"(arg0: float): $MarkdownRenderer
public "setQuoteItalic"(arg0: boolean): $MarkdownRenderer
public "setHyperlinkColor"(arg0: $DrawableColor$Type): $MarkdownRenderer
public "refreshRenderer"(): void
public "setLineSpacing"(arg0: float): $MarkdownRenderer
public "setQuoteColor"(arg0: $DrawableColor$Type): $MarkdownRenderer
public "setParseMarkdown"(arg0: boolean): void
public "isParseMarkdown"(): boolean
public "getLineSpacing"(): float
public "getTextBaseScale"(): float
public "getQuoteIndent"(): float
public "getTextCase"(): $MarkdownRenderer$TextCase
public "isQuoteItalic"(): boolean
public "getHyperlinkColor"(): $DrawableColor
public "isRemoveHtmlBreaks"(): boolean
public "getQuoteColor"(): $DrawableColor
public "getTextBaseColor"(): $DrawableColor
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "addLineRenderValidator"(arg0: $ConsumingSupplier$Type<($MarkdownTextLine$Type), (boolean)>): $MarkdownRenderer
public "setRemoveHtmlBreaks"(arg0: boolean): $MarkdownRenderer
public "setCodeBlockSingleLineColor"(arg0: $DrawableColor$Type): $MarkdownRenderer
public "setAutoLineBreakingEnabled"(arg0: boolean): $MarkdownRenderer
public "setHeadlineLineColor"(arg0: $DrawableColor$Type): $MarkdownRenderer
public "getHeadlineUnderlineColor"(): $DrawableColor
public "getBulletListSpacing"(): float
public "setBulletListIndent"(arg0: float): $MarkdownRenderer
public "getCodeBlockSingleLineColor"(): $DrawableColor
public "getSeparationLineColor"(): $DrawableColor
public "setCodeBlockMultiLineColor"(arg0: $DrawableColor$Type): $MarkdownRenderer
public "isAutoLineBreakingEnabled"(): boolean
public "getBulletListDotColor"(): $DrawableColor
public "setBulletListDotColor"(arg0: $DrawableColor$Type): $MarkdownRenderer
public "getBulletListIndent"(): float
public "setBulletListSpacing"(arg0: float): $MarkdownRenderer
public "getCodeBlockMultiLineColor"(): $DrawableColor
public "setSeparationLineColor"(arg0: $DrawableColor$Type): $MarkdownRenderer
public "setTextOpacity"(arg0: float): $MarkdownRenderer
public "isTextShadow"(): boolean
public "setTextShadow"(arg0: boolean): $MarkdownRenderer
public "isFocused"(): boolean
public "setNavigatable"(arg0: boolean): void
public "getBorder"(): float
public "setBorder"(arg0: float): $MarkdownRenderer
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "getRealHeight"(): float
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "setFocused"(arg0: $GuiEventListener$Type): void
public "getFocused"(): $GuiEventListener
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "isActive"(): boolean
public "getCurrentFocusPath"(): $ComponentPath
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getChildAt"(arg0: double, arg1: double): $Optional<($GuiEventListener)>
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "magicalSpecialHackyFocus"(arg0: $GuiEventListener$Type): void
public "getTabOrderGroup"(): integer
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getRectangle"(): $ScreenRectangle
public "mouseMoved"(arg0: double, arg1: double): void
get "parentRenderScale"(): float
set "parentRenderScale"(value: float)
get "text"(): string
set "text"(value: string)
get "y"(): float
get "realWidth"(): float
set "optimalWidth"(value: float)
get "textOpacity"(): float
get "optimalWidth"(): float
get "navigatable"(): boolean
set "dragging"(value: boolean)
get "dragging"(): boolean
set "focused"(value: boolean)
set "x"(value: float)
set "y"(value: float)
get "x"(): float
set "textCase"(value: $MarkdownRenderer$TextCase$Type)
set "textBaseScale"(value: float)
set "textBaseColor"(value: $DrawableColor$Type)
set "quoteIndent"(value: float)
set "quoteItalic"(value: boolean)
set "hyperlinkColor"(value: $DrawableColor$Type)
set "lineSpacing"(value: float)
set "quoteColor"(value: $DrawableColor$Type)
set "parseMarkdown"(value: boolean)
get "parseMarkdown"(): boolean
get "lineSpacing"(): float
get "textBaseScale"(): float
get "quoteIndent"(): float
get "textCase"(): $MarkdownRenderer$TextCase
get "quoteItalic"(): boolean
get "hyperlinkColor"(): $DrawableColor
get "removeHtmlBreaks"(): boolean
get "quoteColor"(): $DrawableColor
get "textBaseColor"(): $DrawableColor
set "removeHtmlBreaks"(value: boolean)
set "codeBlockSingleLineColor"(value: $DrawableColor$Type)
set "autoLineBreakingEnabled"(value: boolean)
set "headlineLineColor"(value: $DrawableColor$Type)
get "headlineUnderlineColor"(): $DrawableColor
get "bulletListSpacing"(): float
set "bulletListIndent"(value: float)
get "codeBlockSingleLineColor"(): $DrawableColor
get "separationLineColor"(): $DrawableColor
set "codeBlockMultiLineColor"(value: $DrawableColor$Type)
get "autoLineBreakingEnabled"(): boolean
get "bulletListDotColor"(): $DrawableColor
set "bulletListDotColor"(value: $DrawableColor$Type)
get "bulletListIndent"(): float
set "bulletListSpacing"(value: float)
get "codeBlockMultiLineColor"(): $DrawableColor
set "separationLineColor"(value: $DrawableColor$Type)
set "textOpacity"(value: float)
get "textShadow"(): boolean
set "textShadow"(value: boolean)
get "focused"(): boolean
set "navigatable"(value: boolean)
get "border"(): float
set "border"(value: float)
get "focusable"(): boolean
set "focusable"(value: boolean)
get "realHeight"(): float
set "focused"(value: $GuiEventListener$Type)
get "focused"(): $GuiEventListener
get "active"(): boolean
get "currentFocusPath"(): $ComponentPath
get "tabOrderGroup"(): integer
get "rectangle"(): $ScreenRectangle
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownRenderer$Type = ($MarkdownRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownRenderer_ = $MarkdownRenderer$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/$HorizontalSwitcher" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $HorizontalSwitcher {

constructor(arg0: integer, arg1: boolean, ...arg2: (string)[])

public "getTotalWidth"(): integer
public "addValue"(arg0: string): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer): void
public "getHeight"(): integer
public "setSelectedValue"(arg0: string): void
public "getSelectedValue"(): string
public "removeValue"(arg0: string): void
public "setButtonColor"(arg0: $Color$Type, arg1: $Color$Type, arg2: $Color$Type, arg3: $Color$Type, arg4: integer): void
public "setValueColor"(arg0: $Color$Type): void
public "setValueBackgroundColor"(arg0: $Color$Type): void
get "totalWidth"(): integer
get "height"(): integer
set "selectedValue"(value: string)
get "selectedValue"(): string
set "valueColor"(value: $Color$Type)
set "valueBackgroundColor"(value: $Color$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HorizontalSwitcher$Type = ($HorizontalSwitcher);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HorizontalSwitcher_ = $HorizontalSwitcher$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MustProtect" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $JStylerObj$MustProtect {

 "mustBeProtect"(arg0: string): boolean

(arg0: string): boolean
}

export namespace $JStylerObj$MustProtect {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JStylerObj$MustProtect$Type = ($JStylerObj$MustProtect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JStylerObj$MustProtect_ = $JStylerObj$MustProtect$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$ScreenTickEvent" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $ScreenTickEvent extends $EventBase {

constructor(arg0: $Screen$Type)

public "isCancelable"(): boolean
public "getScreen"(): $Screen
get "cancelable"(): boolean
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenTickEvent$Type = ($ScreenTickEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenTickEvent_ = $ScreenTickEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$CloseableUtils" {
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"

export class $CloseableUtils {

constructor()

public static "closeQuietly"(arg0: $AutoCloseable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloseableUtils$Type = ($CloseableUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloseableUtils_ = $CloseableUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen" {
import {$WidgetMeta, $WidgetMeta$Type} from "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta"
import {$Layout$OrderedElementCollection, $Layout$OrderedElementCollection$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout$OrderedElementCollection"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AnchorPointOverlay, $AnchorPointOverlay$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$AnchorPointOverlay"
import {$Layout, $Layout$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout"
import {$ElementFactory, $ElementFactory$Type} from "packages/de/keksuccino/fancymenu/customization/layer/$ElementFactory"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$AbstractLayoutEditorWidget, $AbstractLayoutEditorWidget$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidget"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"
import {$VanillaWidgetElement, $VanillaWidgetElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/vanillawidget/$VanillaWidgetElement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$AbstractDeepEditorElement, $AbstractDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepEditorElement"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LayoutEditorHistory, $LayoutEditorHistory$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorHistory"
import {$VanillaWidgetEditorElement, $VanillaWidgetEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/vanillawidget/$VanillaWidgetEditorElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $LayoutEditorScreen extends $Screen implements $ElementFactory {
static readonly "ELEMENT_DRAG_CRUMPLE_ZONE": integer
 "layoutTargetScreen": $Screen
 "layout": $Layout
 "normalEditorElements": $List<($AbstractEditorElement)>
 "vanillaWidgetEditorElements": $List<($VanillaWidgetEditorElement)>
 "deepEditorElements": $List<($AbstractDeepEditorElement)>
 "history": $LayoutEditorHistory
 "menuBar": $MenuBar
 "anchorPointOverlay": $AnchorPointOverlay
 "rightClickMenu": $ContextMenu
 "activeElementContextMenu": $ContextMenu
 "layoutEditorWidgets": $List<($AbstractLayoutEditorWidget)>
 "leftMouseDownPosX": integer
 "leftMouseDownPosY": integer
readonly "cachedVanillaWidgetMetas": $List<($WidgetMeta)>
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Layout$Type)
constructor(arg0: $Screen$Type, arg1: $Layout$Type)

public static "getCurrentInstance"(): $LayoutEditorScreen
public "deselectAllElements"(): void
public "pasteElementsFromClipboard"(): void
public "openRightClickMenuAtMouse"(arg0: integer, arg1: integer): void
public "getCurrentlyDraggedElements"(): $List<($AbstractEditorElement)>
public "closeRightClickMenu"(): void
public "closeActiveElementMenu"(): void
public "closeActiveElementMenu"(arg0: boolean): void
public "setAsCurrentInstance"(): $LayoutEditorScreen
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "shouldCloseOnEsc"(): boolean
public "selectAllElements"(): void
public "getAllElements"(): $List<($AbstractEditorElement)>
public "saveLayoutAs"(): void
public "saveWidgetSettings"(): void
public "saveLayout"(): void
public "closeEditor"(): void
public "removed"(): void
public "added"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "tick"(): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "openElementContextMenuAtMouseIfPossible"(): void
public "getHoveredElements"(): $List<($AbstractEditorElement)>
public "deleteElement"(arg0: $AbstractEditorElement$Type): boolean
public "canMoveLayerDown"(arg0: $AbstractEditorElement$Type): boolean
public "moveLayerDown"(arg0: $AbstractEditorElement$Type): $AbstractEditorElement
public "canMoveLayerUp"(arg0: $AbstractEditorElement$Type): boolean
public "moveLayerUp"(arg0: $AbstractEditorElement$Type): $AbstractEditorElement
public "getElementByInstanceIdentifier"(arg0: string): $AbstractEditorElement
public "getTopHoveredElement"(): $AbstractEditorElement
public "onUpdateSelectedElements"(): void
public "allSelectedElementsMovable"(): boolean
public "isUserNavigatingInElementMenu"(): boolean
public "isUserNavigatingInRightClickMenu"(): boolean
public "copyElementsToClipboard"(...arg0: ($AbstractEditorElement$Type)[]): void
public "getSelectedElements"(): $List<($AbstractEditorElement)>
public "constructElementInstances"(arg0: string, arg1: $List$Type<($WidgetMeta$Type)>, arg2: $Layout$Type, arg3: $Layout$OrderedElementCollection$Type, arg4: $List$Type<($VanillaWidgetElement$Type)>, arg5: $List$Type<($AbstractDeepElement$Type)>): void
public "constructElementInstances"(arg0: string, arg1: $List$Type<($WidgetMeta$Type)>, arg2: $List$Type<($Layout$Type)>, arg3: $Layout$OrderedElementCollection$Type, arg4: $List$Type<($VanillaWidgetElement$Type)>, arg5: $List$Type<($AbstractDeepElement$Type)>): void
get "currentInstance"(): $LayoutEditorScreen
get "currentlyDraggedElements"(): $List<($AbstractEditorElement)>
get "allElements"(): $List<($AbstractEditorElement)>
get "hoveredElements"(): $List<($AbstractEditorElement)>
get "topHoveredElement"(): $AbstractEditorElement
get "userNavigatingInElementMenu"(): boolean
get "userNavigatingInRightClickMenu"(): boolean
get "selectedElements"(): $List<($AbstractEditorElement)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutEditorScreen$Type = ($LayoutEditorScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutEditorScreen_ = $LayoutEditorScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/config/$ConfigEntry$EntryType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ConfigEntry$EntryType extends $Enum<($ConfigEntry$EntryType)> {
static readonly "INTEGER": $ConfigEntry$EntryType
static readonly "STRING": $ConfigEntry$EntryType
static readonly "DOUBLE": $ConfigEntry$EntryType
static readonly "LONG": $ConfigEntry$EntryType
static readonly "FLOAT": $ConfigEntry$EntryType
static readonly "BOOLEAN": $ConfigEntry$EntryType


public static "values"(): ($ConfigEntry$EntryType)[]
public static "valueOf"(arg0: string): $ConfigEntry$EntryType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigEntry$EntryType$Type = (("boolean") | ("string") | ("double") | ("integer") | ("float") | ("long")) | ($ConfigEntry$EntryType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigEntry$EntryType_ = $ConfigEntry$EntryType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle" {
import {$ILocalizedValueCycle, $ILocalizedValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$ILocalizedValueCycle"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$ValueCycle, $ValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$ValueCycle"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $LocalizedGenericValueCycle<T> extends $ValueCycle<(T)> implements $ILocalizedValueCycle<(T)> {


public static "of"<T>(arg0: string, ...arg1: (T)[]): $LocalizedGenericValueCycle<(T)>
public "getCurrentValueComponent"(): $MutableComponent
public "setValueComponentStyleSupplier"(arg0: $ConsumingSupplier$Type<(T), ($Style$Type)>): $LocalizedGenericValueCycle<(T)>
public "getCycleLocalizationKey"(): string
public "getCycleComponent"(): $MutableComponent
public "addCycleListener"(arg0: $Consumer$Type<(T)>): $LocalizedGenericValueCycle<(T)>
public "setValueNameSupplier"(arg0: $ConsumingSupplier$Type<(T), (string)>): $LocalizedGenericValueCycle<(T)>
get "currentValueComponent"(): $MutableComponent
set "valueComponentStyleSupplier"(value: $ConsumingSupplier$Type<(T), ($Style$Type)>)
get "cycleLocalizationKey"(): string
get "cycleComponent"(): $MutableComponent
set "valueNameSupplier"(value: $ConsumingSupplier$Type<(T), (string)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalizedGenericValueCycle$Type<T> = ($LocalizedGenericValueCycle<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalizedGenericValueCycle_<T> = $LocalizedGenericValueCycle$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundRegistry" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"

export class $MenuBackgroundRegistry {

constructor()

public static "register"(arg0: $MenuBackgroundBuilder$Type<(any)>): void
public static "getBuilder"(arg0: string): $MenuBackgroundBuilder<(any)>
public static "getBuilders"(): $List<($MenuBackgroundBuilder<(any)>)>
get "builders"(): $List<($MenuBackgroundBuilder<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBackgroundRegistry$Type = ($MenuBackgroundRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBackgroundRegistry_ = $MenuBackgroundRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/$Test" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Test {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Test$Type = ($Test);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Test_ = $Test$Type;
}}
declare module "packages/de/keksuccino/konkrete/sound/$SoundHandler" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $SoundHandler {

constructor()

public static "init"(): void
public static "resetSound"(arg0: string): void
public static "setLooped"(arg0: string, arg1: boolean): void
public static "isPlaying"(arg0: string): boolean
public static "stopSound"(arg0: string): void
public static "registerSound"(arg0: string, arg1: string): void
public static "soundExists"(arg0: string): boolean
public static "unregisterSound"(arg0: string): void
public static "updateVolume"(): void
public static "playSound"(arg0: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoundHandler$Type = ($SoundHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoundHandler_ = $SoundHandler$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArraySliceToken" {
import {$EvaluationContextImpl, $EvaluationContextImpl$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$ArrayPathToken, $ArrayPathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArrayPathToken"

export class $ArraySliceToken extends $ArrayPathToken {


public "isTokenDefinite"(): boolean
public "evaluate"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContextImpl$Type): void
public "getPathFragment"(): string
get "tokenDefinite"(): boolean
get "pathFragment"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArraySliceToken$Type = ($ArraySliceToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArraySliceToken_ = $ArraySliceToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/$LegacyHandler$LegacyCheckList" {
import {$AbstractOptions$Option, $AbstractOptions$Option$Type} from "packages/de/keksuccino/fancymenu/util/$AbstractOptions$Option"
import {$AbstractOptions, $AbstractOptions$Type} from "packages/de/keksuccino/fancymenu/util/$AbstractOptions"

export class $LegacyHandler$LegacyCheckList extends $AbstractOptions {
readonly "customGuisPorted": $AbstractOptions$Option<(boolean)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LegacyHandler$LegacyCheckList$Type = ($LegacyHandler$LegacyCheckList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LegacyHandler$LegacyCheckList_ = $LegacyHandler$LegacyCheckList$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$DefaultMapper" {
import {$JSONAwareEx, $JSONAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAwareEx"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $DefaultMapper<T> extends $JsonReaderI<(T)> {
readonly "base": $JsonReader


public "setValue"(arg0: any, arg1: string, arg2: any): void
public "createObject"(): any
public "addValue"(arg0: any, arg1: any): void
public "createArray"(): any
public "startObject"(arg0: string): $JsonReaderI<($JSONAwareEx)>
public "startArray"(arg0: string): $JsonReaderI<($JSONAwareEx)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultMapper$Type<T> = ($DefaultMapper<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultMapper_<T> = $DefaultMapper$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParser" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Reader, $Reader$Type} from "packages/java/io/$Reader"

export class $JSONParser {
static readonly "ACCEPT_SIMPLE_QUOTE": integer
static readonly "ACCEPT_NON_QUOTE": integer
static readonly "ACCEPT_NAN": integer
static readonly "IGNORE_CONTROL_CHAR": integer
static readonly "USE_INTEGER_STORAGE": integer
static readonly "ACCEPT_LEADING_ZERO": integer
static readonly "ACCEPT_USELESS_COMMA": integer
static readonly "USE_HI_PRECISION_FLOAT": integer
static readonly "ACCEPT_TAILLING_DATA": integer
static readonly "ACCEPT_TAILLING_SPACE": integer
static readonly "REJECT_127_CHAR": integer
static readonly "BIG_DIGIT_UNRESTRICTED": integer
static readonly "MODE_PERMISSIVE": integer
static readonly "MODE_RFC4627": integer
static readonly "MODE_JSON_SIMPLE": integer
static readonly "MODE_STRICTEST": integer
static "DEFAULT_PERMISSIVE_MODE": integer

constructor(arg0: integer)
constructor()

public "parse"<T>(arg0: $Reader$Type, arg1: $JsonReaderI$Type<(T)>): T
public "parse"(arg0: $Reader$Type): any
public "parse"<T>(arg0: $InputStream$Type, arg1: $Class$Type<(T)>): T
public "parse"<T>(arg0: $InputStream$Type, arg1: $JsonReaderI$Type<(T)>): T
public "parse"(arg0: string): any
public "parse"<T>(arg0: string, arg1: $JsonReaderI$Type<(T)>): T
public "parse"<T>(arg0: string, arg1: $Class$Type<(T)>): T
public "parse"<T>(arg0: $Reader$Type, arg1: $Class$Type<(T)>): T
public "parse"(arg0: (byte)[]): any
public "parse"<T>(arg0: (byte)[], arg1: $JsonReaderI$Type<(T)>): T
public "parse"<T>(arg0: (byte)[], arg1: $Class$Type<(T)>): T
public "parse"(arg0: $InputStream$Type): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONParser$Type = ($JSONParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONParser_ = $JSONParser$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/enums/$LocalizedEnum" {
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$NamedEnum, $NamedEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$NamedEnum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $LocalizedEnum<E> extends $NamedEnum<(E)> {

 "getValueComponentStyle"(): $Style
 "getLocalizationKeyBase"(): string
 "getValueLocalizationKey"(): string
 "getValueComponent"(): $MutableComponent
 "getName"(): string
 "getByNameInternal"(arg0: string): E
 "getValues"(): (E)[]
}

export namespace $LocalizedEnum {
const SUCCESS_TEXT_STYLE: $Supplier<($Style)>
const WARNING_TEXT_STYLE: $Supplier<($Style)>
const ERROR_TEXT_STYLE: $Supplier<($Style)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalizedEnum$Type<E> = ($LocalizedEnum<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalizedEnum_<E> = $LocalizedEnum$Type<(E)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$MinecraftOptionValuePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MinecraftOptionValuePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinecraftOptionValuePlaceholder$Type = ($MinecraftOptionValuePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinecraftOptionValuePlaceholder_ = $MinecraftOptionValuePlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/$DeepScreenCustomizationLayers" {
import {$TitleScreenLayer, $TitleScreenLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer"

export class $DeepScreenCustomizationLayers {
static readonly "TITLE_SCREEN": $TitleScreenLayer

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeepScreenCustomizationLayers$Type = ($DeepScreenCustomizationLayers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeepScreenCustomizationLayers_ = $DeepScreenCustomizationLayers$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$MapperRemapped" {
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$Type, $Type$Type} from "packages/java/lang/reflect/$Type"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $MapperRemapped<T> extends $JsonReaderI<(T)> {
readonly "base": $JsonReader

constructor(arg0: $JsonReaderI$Type<(T)>)

public "getValue"(arg0: any, arg1: string): any
public "setValue"(arg0: any, arg1: string, arg2: any): void
public "getType"(arg0: string): $Type
public "createObject"(): any
public "renameField"(arg0: string, arg1: string): void
public "startObject"(arg0: string): $JsonReaderI<(any)>
public "startArray"(arg0: string): $JsonReaderI<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapperRemapped$Type<T> = ($MapperRemapped<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapperRemapped_<T> = $MapperRemapped$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$RendererWidget$RendererWidgetBody" {
import {$RendererWidget, $RendererWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$RendererWidget"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $RendererWidget$RendererWidgetBody {

 "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: $RendererWidget$Type): void

(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: $RendererWidget$Type): void
}

export namespace $RendererWidget$RendererWidgetBody {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RendererWidget$RendererWidgetBody$Type = ($RendererWidget$RendererWidgetBody);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RendererWidget$RendererWidgetBody_ = $RendererWidget$RendererWidgetBody$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/layers/$PlayerEntityCapeLayer" {
import {$PlayerEntityProperties, $PlayerEntityProperties$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityProperties"
import {$PlayerEntityElementRenderer, $PlayerEntityElementRenderer$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityElementRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$PlayerEntityRenderLayer, $PlayerEntityRenderLayer$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/layers/$PlayerEntityRenderLayer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PlayerEntityCapeLayer extends $PlayerEntityRenderLayer {
readonly "properties": $PlayerEntityProperties
readonly "renderer": $PlayerEntityElementRenderer

constructor(arg0: $PlayerEntityElementRenderer$Type, arg1: $PlayerEntityProperties$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Entity$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityCapeLayer$Type = ($PlayerEntityCapeLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityCapeLayer_ = $PlayerEntityCapeLayer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ClickableMenuBarEntry$ClickAction" {
import {$MenuBar$MenuBarEntry, $MenuBar$MenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"

export interface $MenuBar$ClickableMenuBarEntry$ClickAction {

 "onClick"(arg0: $MenuBar$Type, arg1: $MenuBar$MenuBarEntry$Type): void

(arg0: $MenuBar$Type, arg1: $MenuBar$MenuBarEntry$Type): void
}

export namespace $MenuBar$ClickableMenuBarEntry$ClickAction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$ClickableMenuBarEntry$ClickAction$Type = ($MenuBar$ClickableMenuBarEntry$ClickAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar$ClickableMenuBarEntry$ClickAction_ = $MenuBar$ClickableMenuBarEntry$ClickAction$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/$ValidationResult" {
import {$List, $List$Type} from "packages/java/util/$List"

export class $ValidationResult {
static readonly "SUCCESS": $ValidationResult

constructor(arg0: boolean, arg1: $List$Type<(string)>)

public "isValid"(): boolean
public "getErrors"(): $List<(string)>
get "valid"(): boolean
get "errors"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValidationResult$Type = ($ValidationResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValidationResult_ = $ValidationResult$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerMotdPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ServerMotdPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerMotdPlaceholder$Type = ($ServerMotdPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerMotdPlaceholder_ = $ServerMotdPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/platform/$Services" {
import {$IPlatformHelper, $IPlatformHelper$Type} from "packages/de/keksuccino/fancymenu/platform/services/$IPlatformHelper"
import {$IPlatformCompatibilityLayer, $IPlatformCompatibilityLayer$Type} from "packages/de/keksuccino/fancymenu/platform/services/$IPlatformCompatibilityLayer"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $Services {
static readonly "PLATFORM": $IPlatformHelper
static readonly "COMPAT": $IPlatformCompatibilityLayer

constructor()

public static "load"<T>(arg0: $Class$Type<(T)>): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Services$Type = ($Services);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Services_ = $Services$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/suggestions/$ServerSideVariableCommandSuggestionsPacketLogic" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ServerSideVariableCommandSuggestionsPacketLogic {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerSideVariableCommandSuggestionsPacketLogic$Type = ($ServerSideVariableCommandSuggestionsPacketLogic);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerSideVariableCommandSuggestionsPacketLogic_ = $ServerSideVariableCommandSuggestionsPacketLogic$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay$DebugOverlaySpacerLine" {
import {$DebugOverlay$DebugOverlayLine, $DebugOverlay$DebugOverlayLine$Type} from "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay$DebugOverlayLine"

export class $DebugOverlay$DebugOverlaySpacerLine extends $DebugOverlay$DebugOverlayLine {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugOverlay$DebugOverlaySpacerLine$Type = ($DebugOverlay$DebugOverlaySpacerLine);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugOverlay$DebugOverlaySpacerLine_ = $DebugOverlay$DebugOverlaySpacerLine$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/scrollarea/$ScrollArea" {
import {$ScreenEvent$MouseScrolled$Pre, $ScreenEvent$MouseScrolled$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$MouseScrolled$Pre"
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$ScrollAreaEntry, $ScrollAreaEntry$Type} from "packages/de/keksuccino/konkrete/gui/content/scrollarea/$ScrollAreaEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ScrollArea {
 "backgroundColor": $Color
 "grabberColorNormal": $Color
 "grabberColorHover": $Color
 "grabberTextureNormal": $ResourceLocation
 "grabberTextureHover": $ResourceLocation
 "x": integer
 "y": integer
 "width": integer
 "height": integer
 "grabberheight": integer
 "grabberwidth": integer
 "enableScrolling": boolean

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer)

public "addEntry"(arg0: $ScrollAreaEntry$Type): void
public "getEntries"(): $List<($ScrollAreaEntry)>
public "removeEntry"(arg0: $ScrollAreaEntry$Type): void
public "render"(arg0: $GuiGraphics$Type): void
public "isGrabberHovered"(): boolean
public "onMouseScrollPre"(arg0: $ScreenEvent$MouseScrolled$Pre$Type): void
public "isAreaHovered"(): boolean
public "isGrabberPressed"(): boolean
public "getStackedEntryHeight"(): integer
get "entries"(): $List<($ScrollAreaEntry)>
get "grabberHovered"(): boolean
get "areaHovered"(): boolean
get "grabberPressed"(): boolean
get "stackedEntryHeight"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollArea$Type = ($ScrollArea);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollArea_ = $ScrollArea$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/overlay/$CustomizationOverlayUI" {
import {$DebugOverlay, $DebugOverlay$Type} from "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"
import {$MenuBar$ClickableMenuBarEntry, $MenuBar$ClickableMenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ClickableMenuBarEntry"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $CustomizationOverlayUI {

constructor()

public static "buildHelpTabAndAddTo"(arg0: $MenuBar$Type): $ContextMenu
public static "buildUITabAndAddTo"(arg0: $MenuBar$Type): $ContextMenu
public static "buildDebugOverlay"(arg0: $MenuBar$Type): $DebugOverlay
public static "buildFMIconTabAndAddTo"(arg0: $MenuBar$Type): $MenuBar$ClickableMenuBarEntry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomizationOverlayUI$Type = ($CustomizationOverlayUI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomizationOverlayUI_ = $CustomizationOverlayUI$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/annotate/$JsonIgnore" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $JsonIgnore extends $Annotation {

 "value"(): boolean
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $JsonIgnore {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonIgnore$Type = ($JsonIgnore);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonIgnore_ = $JsonIgnore$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/properties/$PropertiesParser" {
import {$PropertyContainerSet, $PropertyContainerSet$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainerSet"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"

export class $PropertiesParser {

constructor()

public static "unstringify"(arg0: string): string
public static "serializeSetToFancyString"(arg0: $PropertyContainerSet$Type): string
public static "stringifyFancyString"(arg0: string): string
public static "deserializeSetFromStream"(arg0: $InputStream$Type): $PropertyContainerSet
public static "buildFancyStringFromList"(arg0: $List$Type<(string)>): string
public static "serializeContainerToFancyString"(arg0: $PropertyContainer$Type): string
public static "deserializeSetFromFancyString"(arg0: string): $PropertyContainerSet
public static "serializeSetToFile"(arg0: $PropertyContainerSet$Type, arg1: string): void
public static "deserializeSetFromFile"(arg0: string): $PropertyContainerSet
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PropertiesParser$Type = ($PropertiesParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PropertiesParser_ = $PropertiesParser$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/openal/$ALException" {
import {$Exception, $Exception$Type} from "packages/java/lang/$Exception"

export class $ALException extends $Exception {

constructor()
constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ALException$Type = ($ALException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ALException_ = $ALException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/slideshow/$SlideshowMenuBackground" {
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MenuBackground, $MenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackground"

export class $SlideshowMenuBackground extends $MenuBackground {
 "slideshowName": string
readonly "builder": $MenuBackgroundBuilder<(any)>
 "opacity": float
 "keepBackgroundAspectRatio": boolean

constructor(arg0: $MenuBackgroundBuilder$Type<($SlideshowMenuBackground$Type)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlideshowMenuBackground$Type = ($SlideshowMenuBackground);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlideshowMenuBackground_ = $SlideshowMenuBackground$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArrayIndexToken" {
import {$EvaluationContextImpl, $EvaluationContextImpl$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$ArrayPathToken, $ArrayPathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArrayPathToken"

export class $ArrayIndexToken extends $ArrayPathToken {


public "isTokenDefinite"(): boolean
public "evaluate"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContextImpl$Type): void
public "getPathFragment"(): string
get "tokenDefinite"(): boolean
get "pathFragment"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrayIndexToken$Type = ($ArrayIndexToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrayIndexToken_ = $ArrayIndexToken$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$Sum" {
import {$AbstractAggregation, $AbstractAggregation$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$AbstractAggregation"

export class $Sum extends $AbstractAggregation {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Sum$Type = ($Sum);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Sum_ = $Sum$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/$WidgetIdentificationContext" {
import {$WidgetMeta, $WidgetMeta$Type} from "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

/**
 * 
 * @deprecated
 */
export class $WidgetIdentificationContext {

constructor()

public "getTargetScreen"(): $Class<(any)>
public "getUniversalIdentifierForWidget"(arg0: $WidgetMeta$Type): string
public "addUniversalIdentifierProvider"(arg0: $ConsumingSupplier$Type<($WidgetMeta$Type), (string)>): void
get "targetScreen"(): $Class<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetIdentificationContext$Type = ($WidgetIdentificationContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetIdentificationContext_ = $WidgetIdentificationContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeMonthRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsRealTimeMonthRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsRealTimeMonthRequirement$Type = ($IsRealTimeMonthRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsRealTimeMonthRequirement_ = $IsRealTimeMonthRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/other/$OpenLinkAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $OpenLinkAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenLinkAction$Type = ($OpenLinkAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenLinkAction_ = $OpenLinkAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$ScreenKeyPressedEvent" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $ScreenKeyPressedEvent extends $EventBase {

constructor(arg0: $Screen$Type, arg1: integer, arg2: integer, arg3: integer)

public "getModifiers"(): integer
public "isCancelable"(): boolean
public "addWidget"<T extends ($GuiEventListener) & ($NarratableEntry)>(arg0: T): void
public "getRenderables"(): $List<($Renderable)>
public "getNarratables"(): $List<($NarratableEntry)>
public "getWidgets"(): $List<($GuiEventListener)>
public "getKeycode"(): integer
public "getScancode"(): integer
public "getScreen"(): $Screen
public "getKeyName"(): string
public "addRenderableWidget"<T extends ($GuiEventListener) & ($NarratableEntry) & ($Renderable)>(arg0: T): void
get "modifiers"(): integer
get "cancelable"(): boolean
get "renderables"(): $List<($Renderable)>
get "narratables"(): $List<($NarratableEntry)>
get "widgets"(): $List<($GuiEventListener)>
get "keycode"(): integer
get "scancode"(): integer
get "screen"(): $Screen
get "keyName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenKeyPressedEvent$Type = ($ScreenKeyPressedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenKeyPressedEvent_ = $ScreenKeyPressedEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/minecraftoptions/$MinecraftOptions" {
import {$MinecraftOption, $MinecraftOption$Type} from "packages/de/keksuccino/fancymenu/util/minecraftoptions/$MinecraftOption"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MinecraftOptions {

constructor()

public static "save"(): void
public static "getOptions"(): $Map<(string), ($MinecraftOption)>
public static "getOption"(arg0: string): $MinecraftOption
get "options"(): $Map<(string), ($MinecraftOption)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinecraftOptions$Type = ($MinecraftOptions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinecraftOptions_ = $MinecraftOptions$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/blocks/statements/$ElseIfExecutableBlock" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$AbstractExecutableBlock, $AbstractExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$AbstractExecutableBlock"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ElseIfExecutableBlock extends $AbstractExecutableBlock {
 "condition": $LoadingRequirementContainer
 "identifier": string

constructor()
constructor(arg0: $LoadingRequirementContainer$Type)

public "execute"(): void
public "check"(): boolean
public "getAppendedBlock"(): $AbstractExecutableBlock
public "setAppendedBlock"(arg0: $AbstractExecutableBlock$Type): void
public "addValuePlaceholder"(arg0: string, arg1: $Supplier$Type<(string)>): void
public "serialize"(): $PropertyContainer
public "getBlockType"(): string
public static "deserializeEmptyWithIdentifier"(arg0: $PropertyContainer$Type, arg1: string): $ElseIfExecutableBlock
get "appendedBlock"(): $AbstractExecutableBlock
set "appendedBlock"(value: $AbstractExecutableBlock$Type)
get "blockType"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElseIfExecutableBlock$Type = ($ElseIfExecutableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElseIfExecutableBlock_ = $ElseIfExecutableBlock$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $TickerEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickerEditorElement$Type = ($TickerEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickerEditorElement_ = $TickerEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsWindowHeightRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsWindowHeightRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsWindowHeightRequirement$Type = ($IsWindowHeightRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsWindowHeightRequirement_ = $IsWindowHeightRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioElement$PlayMode" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$LocalizedCycleEnum, $LocalizedCycleEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedCycleEnum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AudioElement$PlayMode extends $Enum<($AudioElement$PlayMode)> implements $LocalizedCycleEnum<($AudioElement$PlayMode)> {
static readonly "NORMAL": $AudioElement$PlayMode
static readonly "SHUFFLE": $AudioElement$PlayMode


public "getName"(): string
public static "values"(): ($AudioElement$PlayMode)[]
public static "valueOf"(arg0: string): $AudioElement$PlayMode
public static "getByName"(arg0: string): $AudioElement$PlayMode
public "getValueComponentStyle"(): $Style
public "getLocalizationKeyBase"(): string
public "getByNameInternal"(arg0: string): $AudioElement$PlayMode
public "getValues"(): ($AudioElement$PlayMode)[]
public "getCycleComponentStyle"(): $Style
public "cycle"(arg0: $AudioElement$PlayMode$Type): $LocalizedGenericValueCycle<($AudioElement$PlayMode)>
public "cycle"(): $LocalizedGenericValueCycle<($AudioElement$PlayMode)>
public "getCycleComponent"(): $MutableComponent
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "valueComponentStyle"(): $Style
get "localizationKeyBase"(): string
get "cycleComponentStyle"(): $Style
get "cycleComponent"(): $MutableComponent
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AudioElement$PlayMode$Type = (("normal") | ("shuffle")) | ($AudioElement$PlayMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AudioElement$PlayMode_ = $AudioElement$PlayMode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/$ResourceHandlers" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$IVideo, $IVideo$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/video/$IVideo"
import {$ResourceSource, $ResourceSource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSource"
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$ImageFileType, $ImageFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$ImageFileType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AudioFileType, $AudioFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$AudioFileType"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$VideoFileType, $VideoFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$VideoFileType"
import {$TextFileType, $TextFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$TextFileType"
import {$ResourceHandler, $ResourceHandler$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceHandler"

export class $ResourceHandlers {

constructor()

public static "getHandlers"(): $List<($ResourceHandler<(any), (any)>)>
public static "setAudioHandler"(arg0: $ResourceHandler$Type<($IAudio$Type), ($AudioFileType$Type)>): void
public static "setImageHandler"(arg0: $ResourceHandler$Type<($ITexture$Type), ($ImageFileType$Type)>): void
public static "setVideoHandler"(arg0: $ResourceHandler$Type<($IVideo$Type), ($VideoFileType$Type)>): void
public static "setTextHandler"(arg0: $ResourceHandler$Type<($IText$Type), ($TextFileType$Type)>): void
public static "findHandlerForSource"(arg0: $ResourceSource$Type, arg1: boolean): $ResourceHandler<(any), (any)>
public static "getAudioHandler"(): $ResourceHandler<($IAudio), ($AudioFileType)>
public static "getImageHandler"(): $ResourceHandler<($ITexture), ($ImageFileType)>
public static "getTextHandler"(): $ResourceHandler<($IText), ($TextFileType)>
public static "getVideoHandler"(): $ResourceHandler<($IVideo), ($VideoFileType)>
public static "reloadAll"(): void
get "handlers"(): $List<($ResourceHandler<(any), (any)>)>
set "audioHandler"(value: $ResourceHandler$Type<($IAudio$Type), ($AudioFileType$Type)>)
set "imageHandler"(value: $ResourceHandler$Type<($ITexture$Type), ($ImageFileType$Type)>)
set "videoHandler"(value: $ResourceHandler$Type<($IVideo$Type), ($VideoFileType$Type)>)
set "textHandler"(value: $ResourceHandler$Type<($IText$Type), ($TextFileType$Type)>)
get "audioHandler"(): $ResourceHandler<($IAudio), ($AudioFileType)>
get "imageHandler"(): $ResourceHandler<($ITexture), ($ImageFileType)>
get "textHandler"(): $ResourceHandler<($IText), ($TextFileType)>
get "videoHandler"(): $ResourceHandler<($IVideo), ($VideoFileType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceHandlers$Type = ($ResourceHandlers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceHandlers_ = $ResourceHandlers$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenStartingEvent" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$InitOrResizeScreenEvent$InitializationPhase, $InitOrResizeScreenEvent$InitializationPhase$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$InitializationPhase"

export class $InitOrResizeScreenStartingEvent extends $EventBase {

constructor(arg0: $Screen$Type, arg1: $InitOrResizeScreenEvent$InitializationPhase$Type)

public "isCancelable"(): boolean
public "getScreen"(): $Screen
public "getInitializationPhase"(): $InitOrResizeScreenEvent$InitializationPhase
get "cancelable"(): boolean
get "screen"(): $Screen
get "initializationPhase"(): $InitOrResizeScreenEvent$InitializationPhase
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InitOrResizeScreenStartingEvent$Type = ($InitOrResizeScreenStartingEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InitOrResizeScreenStartingEvent_ = $InitOrResizeScreenStartingEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/$ScreenCustomization$ScreenBlacklistRule" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ScreenCustomization$ScreenBlacklistRule {

 "isScreenBlacklisted"(arg0: string): boolean

(arg0: string): boolean
}

export namespace $ScreenCustomization$ScreenBlacklistRule {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCustomization$ScreenBlacklistRule$Type = ($ScreenCustomization$ScreenBlacklistRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCustomization$ScreenBlacklistRule_ = $ScreenCustomization$ScreenBlacklistRule$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/$Placeholders" {
import {$WebTextPlaceholder, $WebTextPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$WebTextPlaceholder"
import {$CalculatorPlaceholder, $CalculatorPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$CalculatorPlaceholder"
import {$RealtimeDayPlaceholder, $RealtimeDayPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeDayPlaceholder"
import {$RealtimeSecondPlaceholder, $RealtimeSecondPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeSecondPlaceholder"
import {$MaxRamPlaceholder, $MaxRamPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/ram/$MaxRamPlaceholder"
import {$ModLoaderVersionPlaceholder, $ModLoaderVersionPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$ModLoaderVersionPlaceholder"
import {$OsCpuUsagePlaceholder, $OsCpuUsagePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/cpu/$OsCpuUsagePlaceholder"
import {$PlayerNamePlaceholder, $PlayerNamePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/player/$PlayerNamePlaceholder"
import {$ServerVersionPlaceholder, $ServerVersionPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerVersionPlaceholder"
import {$MathTanhPlaceholder, $MathTanhPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathTanhPlaceholder"
import {$ScreenWidthPlaceholder, $ScreenWidthPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ScreenWidthPlaceholder"
import {$ElementHeightPlaceholder, $ElementHeightPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ElementHeightPlaceholder"
import {$ServerPlayerCountPlaceholder, $ServerPlayerCountPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerPlayerCountPlaceholder"
import {$RealtimeHourPlaceholder, $RealtimeHourPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeHourPlaceholder"
import {$MousePosXPlaceholder, $MousePosXPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$MousePosXPlaceholder"
import {$RealtimeMonthPlaceholder, $RealtimeMonthPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeMonthPlaceholder"
import {$JvmNamePlaceholder, $JvmNamePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$JvmNamePlaceholder"
import {$UsedRamPlaceholder, $UsedRamPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/ram/$UsedRamPlaceholder"
import {$FpsPlaceholder, $FpsPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$FpsPlaceholder"
import {$StringifyPlaceholder, $StringifyPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$StringifyPlaceholder"
import {$ElementPosYPlaceholder, $ElementPosYPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ElementPosYPlaceholder"
import {$MaxNumberPlaceholder, $MaxNumberPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MaxNumberPlaceholder"
import {$MathSinPlaceholder, $MathSinPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathSinPlaceholder"
import {$MathTanPlaceholder, $MathTanPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathTanPlaceholder"
import {$UnixTimestampPlaceholder, $UnixTimestampPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$UnixTimestampPlaceholder"
import {$ServerPingPlaceholder, $ServerPingPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerPingPlaceholder"
import {$LocalizationPlaceholder, $LocalizationPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$LocalizationPlaceholder"
import {$ServerMotdPlaceholder, $ServerMotdPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerMotdPlaceholder"
import {$MinNumberPlaceholder, $MinNumberPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MinNumberPlaceholder"
import {$GuiScalePlaceholder, $GuiScalePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$GuiScalePlaceholder"
import {$PercentRamPlaceholder, $PercentRamPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/ram/$PercentRamPlaceholder"
import {$OSNamePlaceholder, $OSNamePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$OSNamePlaceholder"
import {$ScreenIdentifierPlaceholder, $ScreenIdentifierPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ScreenIdentifierPlaceholder"
import {$MinecraftVersionPlaceholder, $MinecraftVersionPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$MinecraftVersionPlaceholder"
import {$MathCoshPlaceholder, $MathCoshPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathCoshPlaceholder"
import {$RandomNumberPlaceholder, $RandomNumberPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$RandomNumberPlaceholder"
import {$ElementWidthPlaceholder, $ElementWidthPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ElementWidthPlaceholder"
import {$ServerStatusPlaceholder, $ServerStatusPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerStatusPlaceholder"
import {$RealtimeYearPlaceholder, $RealtimeYearPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeYearPlaceholder"
import {$ElementPosXPlaceholder, $ElementPosXPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ElementPosXPlaceholder"
import {$AbsoluteNumberPlaceholder, $AbsoluteNumberPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$AbsoluteNumberPlaceholder"
import {$JsonPlaceholder, $JsonPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$JsonPlaceholder"
import {$OpenGLVersionPlaceholder, $OpenGLVersionPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$OpenGLVersionPlaceholder"
import {$GpuInfoPlaceholder, $GpuInfoPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$GpuInfoPlaceholder"
import {$ScreenHeightPlaceholder, $ScreenHeightPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ScreenHeightPlaceholder"
import {$MinecraftOptionValuePlaceholder, $MinecraftOptionValuePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$MinecraftOptionValuePlaceholder"
import {$GetVariablePlaceholder, $GetVariablePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$GetVariablePlaceholder"
import {$WorldLoadProgressPlaceholder, $WorldLoadProgressPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$WorldLoadProgressPlaceholder"
import {$MathSinhPlaceholder, $MathSinhPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathSinhPlaceholder"
import {$NegateNumberPlaceholder, $NegateNumberPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$NegateNumberPlaceholder"
import {$MathCosPlaceholder, $MathCosPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathCosPlaceholder"
import {$ModLoaderNamePlaceholder, $ModLoaderNamePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$ModLoaderNamePlaceholder"
import {$MousePosYPlaceholder, $MousePosYPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$MousePosYPlaceholder"
import {$JvmCpuUsagePlaceholder, $JvmCpuUsagePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/cpu/$JvmCpuUsagePlaceholder"
import {$JavaVersionPlaceholder, $JavaVersionPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$JavaVersionPlaceholder"
import {$PlayerUuidPlaceholder, $PlayerUuidPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/player/$PlayerUuidPlaceholder"
import {$AbsolutePathPlaceholder, $AbsolutePathPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$AbsolutePathPlaceholder"
import {$ModVersionPlaceholder, $ModVersionPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$ModVersionPlaceholder"
import {$LoadedModsPlaceholder, $LoadedModsPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$LoadedModsPlaceholder"
import {$RealtimeMinutePlaceholder, $RealtimeMinutePlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeMinutePlaceholder"
import {$RandomTextPlaceholder, $RandomTextPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$RandomTextPlaceholder"
import {$CpuInfoPlaceholder, $CpuInfoPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/cpu/$CpuInfoPlaceholder"
import {$TotalModsPlaceholder, $TotalModsPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$TotalModsPlaceholder"
import {$VanillaButtonLabelPlaceholder, $VanillaButtonLabelPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$VanillaButtonLabelPlaceholder"
import {$MathPiPlaceholder, $MathPiPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathPiPlaceholder"

export class $Placeholders {
static readonly "MINECRAFT_VERSION": $MinecraftVersionPlaceholder
static readonly "MOD_LOADER_VERSION": $ModLoaderVersionPlaceholder
static readonly "MOD_LOADER_NAME": $ModLoaderNamePlaceholder
static readonly "MOD_VERSION": $ModVersionPlaceholder
static readonly "LOADED_MODS": $LoadedModsPlaceholder
static readonly "TOTAL_MODS": $TotalModsPlaceholder
static readonly "WORLD_LOAD_PROGRESS": $WorldLoadProgressPlaceholder
static readonly "MINECRAFT_OPTION_VALUE": $MinecraftOptionValuePlaceholder
static readonly "SCREEN_WIDTH": $ScreenWidthPlaceholder
static readonly "SCREEN_HEIGHT": $ScreenHeightPlaceholder
static readonly "SCREEN_IDENTIFIER": $ScreenIdentifierPlaceholder
static readonly "ELEMENT_WIDTH": $ElementWidthPlaceholder
static readonly "ELEMENT_HEIGHT": $ElementHeightPlaceholder
static readonly "ELEMENT_POS_X": $ElementPosXPlaceholder
static readonly "ELEMENT_POS_Y": $ElementPosYPlaceholder
static readonly "MOUSE_POS_X": $MousePosXPlaceholder
static readonly "MOUSE_POS_Y": $MousePosYPlaceholder
static readonly "GUI_SCALE": $GuiScalePlaceholder
static readonly "VANILLA_BUTTON_LABEL": $VanillaButtonLabelPlaceholder
static readonly "PLAYER_NAME": $PlayerNamePlaceholder
static readonly "PLAYER_UUID": $PlayerUuidPlaceholder
static readonly "SERVER_MOTD": $ServerMotdPlaceholder
static readonly "SERVER_PING": $ServerPingPlaceholder
static readonly "SERVER_VERSION": $ServerVersionPlaceholder
static readonly "SERVER_PLAYER_COUNT": $ServerPlayerCountPlaceholder
static readonly "SERVER_STATUS": $ServerStatusPlaceholder
static readonly "REALTIME_YEAR": $RealtimeYearPlaceholder
static readonly "REALTIME_MONTH": $RealtimeMonthPlaceholder
static readonly "REALTIME_DAY": $RealtimeDayPlaceholder
static readonly "REALTIME_HOUR": $RealtimeHourPlaceholder
static readonly "REALTIME_MINUTE": $RealtimeMinutePlaceholder
static readonly "REALTIME_SECOND": $RealtimeSecondPlaceholder
static readonly "UNIX_TIMESTAMP": $UnixTimestampPlaceholder
static readonly "STRINGIFY": $StringifyPlaceholder
static readonly "JSON": $JsonPlaceholder
static readonly "GET_VARIABLE": $GetVariablePlaceholder
static readonly "LOCALIZATION": $LocalizationPlaceholder
static readonly "CALCULATOR": $CalculatorPlaceholder
static readonly "RANDOM_NUMBER": $RandomNumberPlaceholder
static readonly "MAX_NUMBER": $MaxNumberPlaceholder
static readonly "MIN_NUMBER": $MinNumberPlaceholder
static readonly "ABSOLUTE_NUMBER": $AbsoluteNumberPlaceholder
static readonly "NEGATE_NUMBER": $NegateNumberPlaceholder
static readonly "MATH_PI": $MathPiPlaceholder
static readonly "MATH_SIN": $MathSinPlaceholder
static readonly "MATH_SINH": $MathSinhPlaceholder
static readonly "MATH_COS": $MathCosPlaceholder
static readonly "MATH_COSH": $MathCoshPlaceholder
static readonly "MATH_TAN": $MathTanPlaceholder
static readonly "MATH_TANH": $MathTanhPlaceholder
static readonly "PERCENT_RAM": $PercentRamPlaceholder
static readonly "USED_RAM": $UsedRamPlaceholder
static readonly "MAX_RAM": $MaxRamPlaceholder
static readonly "RANDOM_TEXT": $RandomTextPlaceholder
static readonly "WEB_TEXT": $WebTextPlaceholder
static readonly "ABSOLUTE_PATH": $AbsolutePathPlaceholder
static readonly "JVM_CPU_USAGE": $JvmCpuUsagePlaceholder
static readonly "OS_CPU_USAGE": $OsCpuUsagePlaceholder
static readonly "CPU_INFO": $CpuInfoPlaceholder
static readonly "FPS": $FpsPlaceholder
static readonly "GPU_INFO": $GpuInfoPlaceholder
static readonly "JAVA_VERSION": $JavaVersionPlaceholder
static readonly "JVM_NAME": $JvmNamePlaceholder
static readonly "OPEN_GL_VERSION": $OpenGLVersionPlaceholder
static readonly "OS_NAME": $OSNamePlaceholder

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Placeholders$Type = ($Placeholders);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Placeholders_ = $Placeholders$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/branding/$TitleScreenBrandingDeepEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractDeepEditorElement, $AbstractDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepEditorElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $TitleScreenBrandingDeepEditorElement extends $AbstractDeepEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractDeepElement$Type, arg1: $LayoutEditorScreen$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenBrandingDeepEditorElement$Type = ($TitleScreenBrandingDeepEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenBrandingDeepEditorElement_ = $TitleScreenBrandingDeepEditorElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/properties/$PropertiesSection" {
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PropertiesSection {

constructor(arg0: string)

public "addEntry"(arg0: string, arg1: string): void
public "getEntries"(): $Map<(string), (string)>
public "removeEntry"(arg0: string): void
public "hasEntry"(arg0: string): boolean
public "getEntryValue"(arg0: string): string
public "getSectionType"(): string
get "entries"(): $Map<(string), (string)>
get "sectionType"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PropertiesSection$Type = ($PropertiesSection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PropertiesSection_ = $PropertiesSection$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/slideshow/$ExternalTextureSlideshowRenderer" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $ExternalTextureSlideshowRenderer {
 "images": $List<($ResourceSupplier<($ITexture)>)>
 "overlayTexture": $ResourceSupplier<($ITexture)>
 "dir": string
 "width": integer
 "height": integer
 "x": integer
 "y": integer
 "slideshowOpacity": float

constructor(arg0: string)

public "getName"(): string
public "isReady"(): boolean
public "render"(arg0: $GuiGraphics$Type): void
public "prepareSlideshow"(): void
public "setFadeSpeed"(arg0: float): void
public "getImageCount"(): integer
public "setDuration"(arg0: double): void
public "getImageWidth"(): integer
public "getImageHeight"(): integer
get "name"(): string
get "ready"(): boolean
set "fadeSpeed"(value: float)
get "imageCount"(): integer
set "duration"(value: double)
get "imageWidth"(): integer
get "imageHeight"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExternalTextureSlideshowRenderer$Type = ($ExternalTextureSlideshowRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExternalTextureSlideshowRenderer_ = $ExternalTextureSlideshowRenderer$Type;
}}
declare module "packages/de/keksuccino/melody/$Melody" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Melody {
static readonly "VERSION": string
static readonly "MOD_LOADER": string
static readonly "MOD_ID": string

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Melody$Type = ($Melody);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Melody_ = $Melody$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$IVideo, $IVideo$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/video/$IVideo"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$ResourceFile, $ResourceFile$Type} from "packages/de/keksuccino/fancymenu/util/file/$ResourceFile"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $ElementBuilder<E extends $AbstractElement, L extends $AbstractEditorElement> {

constructor(arg0: string)

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "isDeprecated"(): boolean
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "getIdentifier"(): string
public "deserializeElement"(arg0: $SerializedElement$Type): E
public "buildDefaultInstance"(): E
public "deserializeElementInternal"(arg0: $SerializedElement$Type): E
public static "deserializeTextResourceSupplier"(arg0: string): $ResourceSupplier<($IText)>
public static "deserializeImageResourceSupplier"(arg0: string): $ResourceSupplier<($ITexture)>
public "wrapIntoEditorElement"(arg0: E, arg1: $LayoutEditorScreen$Type): L
public "serializeElementInternal"(arg0: $AbstractElement$Type): $SerializedElement
public static "deserializeAudioResourceSupplier"(arg0: string): $ResourceSupplier<($IAudio)>
public static "deserializeVideoResourceSupplier"(arg0: string): $ResourceSupplier<($IVideo)>
public static "deserializeResourceFile"(arg0: string): $ResourceFile
public "shouldShowUpInEditorElementMenu"(arg0: $LayoutEditorScreen$Type): boolean
public "wrapIntoEditorElementInternal"(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type): L
get "deprecated"(): boolean
get "identifier"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementBuilder$Type<E, L> = ($ElementBuilder<(E), (L)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementBuilder_<E, L> = $ElementBuilder$Type<(E), (L)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/brackets/$HighlightRoundBracketsFormattingRule" {
import {$HighlightBracketsFormattingRuleBase, $HighlightBracketsFormattingRuleBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/brackets/$HighlightBracketsFormattingRuleBase"

export class $HighlightRoundBracketsFormattingRule extends $HighlightBracketsFormattingRuleBase {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HighlightRoundBracketsFormattingRule$Type = ($HighlightRoundBracketsFormattingRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HighlightRoundBracketsFormattingRule_ = $HighlightRoundBracketsFormattingRule$Type;
}}
declare module "packages/de/keksuccino/konkrete/events/$ScreenCharTypedEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"

export class $ScreenCharTypedEvent extends $Event {
readonly "character": character
readonly "modifiers": integer

constructor()
constructor(arg0: character, arg1: integer)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCharTypedEvent$Type = ($ScreenCharTypedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCharTypedEvent_ = $ScreenCharTypedEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/$PlayerEntityEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$PlayerEntityElement, $PlayerEntityElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/$PlayerEntityElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $PlayerEntityEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getElement"(): $PlayerEntityElement
get "element"(): $PlayerEntityElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityEditorElement$Type = ($PlayerEntityEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityEditorElement_ = $PlayerEntityEditorElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener$FoundResult" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $EvaluationListener$FoundResult {

 "index"(): integer
 "result"(): any
 "path"(): string
}

export namespace $EvaluationListener$FoundResult {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvaluationListener$FoundResult$Type = ($EvaluationListener$FoundResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvaluationListener$FoundResult_ = $EvaluationListener$FoundResult$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/gameintro/$GameIntroOverlay" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$Overlay, $Overlay$Type} from "packages/net/minecraft/client/gui/screens/$Overlay"
import {$PlayableResource, $PlayableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$PlayableResource"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $GameIntroOverlay extends $Overlay {

constructor(arg0: $Screen$Type, arg1: $PlayableResource$Type)

public "mouseClicked"(arg0: integer): void
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GameIntroOverlay$Type = ($GameIntroOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GameIntroOverlay_ = $GameIntroOverlay$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuEntry" {
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$ContextMenu$ContextMenuStackMeta, $ContextMenu$ContextMenuStackMeta$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuStackMeta"
import {$ContextMenu$ContextMenuEntry$EntryTask, $ContextMenu$ContextMenuEntry$EntryTask$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuEntry$EntryTask"
import {$ContextMenu$Supplier, $ContextMenu$Supplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$Supplier"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ContextMenu$BooleanSupplier, $ContextMenu$BooleanSupplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$BooleanSupplier"
import {$Tooltip, $Tooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $ContextMenu$ContextMenuEntry<T extends $ContextMenu$ContextMenuEntry<(T)>> implements $Renderable, $GuiEventListener {

constructor(arg0: string, arg1: $ContextMenu$Type)

public "getParent"(): $ContextMenu
public "copy"(): $ContextMenu$ContextMenuEntry<(any)>
public "isActive"(): boolean
public "getIdentifier"(): string
public "setTooltipSupplier"(arg0: $ContextMenu$Supplier$Type<($Tooltip$Type)>): T
public "isChangeBackgroundColorOnHover"(): boolean
public "addIsVisibleSupplier"(arg0: $ContextMenu$BooleanSupplier$Type): T
public "addIsActiveSupplier"(arg0: $ContextMenu$BooleanSupplier$Type): T
public "isVisible"(): boolean
public "isHovered"(): boolean
public "getHeight"(): float
public "isStackable"(): boolean
public "setHoverAction"(arg0: $ContextMenu$ContextMenuEntry$EntryTask$Type): T
public "setTickAction"(arg0: $ContextMenu$ContextMenuEntry$EntryTask$Type): T
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getMinWidth"(): float
public "getTooltip"(): $Tooltip
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "setStackable"(arg0: boolean): T
public "getStackMeta"(): $ContextMenu$ContextMenuStackMeta
public "setHeight"(arg0: float): T
/**
 * 
 * @deprecated
 */
public "setIsActiveSupplier"(arg0: $ContextMenu$BooleanSupplier$Type): T
public "setChangeBackgroundColorOnHover"(arg0: boolean): T
/**
 * 
 * @deprecated
 */
public "setIsVisibleSupplier"(arg0: $ContextMenu$BooleanSupplier$Type): T
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getRectangle"(): $ScreenRectangle
public "setFocused"(arg0: boolean): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "isFocused"(): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "getTabOrderGroup"(): integer
get "parent"(): $ContextMenu
get "active"(): boolean
get "identifier"(): string
set "tooltipSupplier"(value: $ContextMenu$Supplier$Type<($Tooltip$Type)>)
get "changeBackgroundColorOnHover"(): boolean
get "visible"(): boolean
get "hovered"(): boolean
get "height"(): float
get "stackable"(): boolean
set "hoverAction"(value: $ContextMenu$ContextMenuEntry$EntryTask$Type)
set "tickAction"(value: $ContextMenu$ContextMenuEntry$EntryTask$Type)
get "minWidth"(): float
get "tooltip"(): $Tooltip
set "stackable"(value: boolean)
get "stackMeta"(): $ContextMenu$ContextMenuStackMeta
set "height"(value: float)
set "isActiveSupplier"(value: $ContextMenu$BooleanSupplier$Type)
set "changeBackgroundColorOnHover"(value: boolean)
set "isVisibleSupplier"(value: $ContextMenu$BooleanSupplier$Type)
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
set "focused"(value: boolean)
get "focused"(): boolean
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$ContextMenuEntry$Type<T> = ($ContextMenu$ContextMenuEntry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$ContextMenuEntry_<T> = $ContextMenu$ContextMenuEntry$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONObject" {
import {$JSONAwareEx, $JSONAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAwareEx"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JSONStreamAwareEx, $JSONStreamAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStreamAwareEx"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Map$Entry, $Map$Entry$Type} from "packages/java/util/$Map$Entry"

export class $JSONObject extends $HashMap<(string), (any)> implements $JSONAwareEx, $JSONStreamAwareEx {

constructor(arg0: $Map$Type<(string), (any)>)
constructor(arg0: integer)
constructor()

public "toString"(): string
public "toString"(arg0: $JSONStyle$Type): string
public "merge"(arg0: any): void
public static "escape"(arg0: string): string
public "getAsString"(arg0: string): string
public "getAsNumber"(arg0: string): number
public "appendField"(arg0: string, arg1: any): $JSONObject
public static "writeJSON"(arg0: $Map$Type<(string), (any)>, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void
public static "writeJSON"(arg0: $Map$Type<(string), (any)>, arg1: $Appendable$Type): void
public "toJSONString"(arg0: $JSONStyle$Type): string
public static "toJSONString"(arg0: $Map$Type<(string), (any)>): string
public static "toJSONString"(arg0: $Map$Type<(string), (any)>, arg1: $JSONStyle$Type): string
public "toJSONString"(): string
public static "writeJSONKV"(arg0: string, arg1: any, arg2: $Appendable$Type, arg3: $JSONStyle$Type): void
public "writeJSONString"(arg0: $Appendable$Type): void
public "writeJSONString"(arg0: $Appendable$Type, arg1: $JSONStyle$Type): void
public "equals"(arg0: any): boolean
public "hashCode"(): integer
public static "copyOf"<K, V>(arg0: $Map$Type<(any), (any)>): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V): $Map<(K), (V)>
public static "of"<K, V>(): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V, arg18: K, arg19: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V): $Map<(K), (V)>
public static "entry"<K, V>(arg0: K, arg1: V): $Map$Entry<(K), (V)>
public static "ofEntries"<K, V>(...arg0: ($Map$Entry$Type<(any), (any)>)[]): $Map<(K), (V)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONObject$Type = ($JSONObject);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONObject_ = $JSONObject$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/panorama/$PanoramaHandler" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LocalTexturePanoramaRenderer, $LocalTexturePanoramaRenderer$Type} from "packages/de/keksuccino/fancymenu/customization/panorama/$LocalTexturePanoramaRenderer"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"

export class $PanoramaHandler {
static readonly "PANORAMA_DIR": $File

constructor()

public static "init"(): void
public static "getPanorama"(arg0: string): $LocalTexturePanoramaRenderer
public static "getPanoramaNames"(): $List<(string)>
public static "getPanoramas"(): $List<($LocalTexturePanoramaRenderer)>
public static "panoramaExists"(arg0: string): boolean
public static "updatePanoramas"(): void
public "onMenuReload"(arg0: $ModReloadEvent$Type): void
get "panoramaNames"(): $List<(string)>
get "panoramas"(): $List<($LocalTexturePanoramaRenderer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PanoramaHandler$Type = ($PanoramaHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PanoramaHandler_ = $PanoramaHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$AbstractOptions" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $AbstractOptions {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractOptions$Type = ($AbstractOptions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractOptions_ = $AbstractOptions$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$LoadingRequirementGroup, $LoadingRequirementGroup$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementGroup"
import {$ValuePlaceholderHolder, $ValuePlaceholderHolder$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ValuePlaceholderHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LoadingRequirementInstance$RequirementMode, $LoadingRequirementInstance$RequirementMode$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance$RequirementMode"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LoadingRequirementInstance implements $ValuePlaceholderHolder {
 "parent": $LoadingRequirementContainer
 "requirement": $LoadingRequirement
 "value": string
 "group": $LoadingRequirementGroup
 "mode": $LoadingRequirementInstance$RequirementMode
 "instanceIdentifier": string

constructor(arg0: $LoadingRequirement$Type, arg1: string, arg2: $LoadingRequirementInstance$RequirementMode$Type, arg3: $LoadingRequirementContainer$Type)

public "equals"(arg0: any): boolean
public "copy"(arg0: boolean): $LoadingRequirementInstance
public "addValuePlaceholder"(arg0: string, arg1: $Supplier$Type<(string)>): void
public "requirementMet"(): boolean
public static "deserializeRequirementInstance"(arg0: string, arg1: string, arg2: $LoadingRequirementContainer$Type): $LoadingRequirementInstance
public "getValuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
public static "serializeRequirementInstance"(arg0: $LoadingRequirementInstance$Type): $List<(string)>
get "valuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadingRequirementInstance$Type = ($LoadingRequirementInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadingRequirementInstance_ = $LoadingRequirementInstance$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/resource/$ResourceChooserScreen" {
import {$IVideo, $IVideo$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/video/$IVideo"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FileFilter, $FileFilter$Type} from "packages/de/keksuccino/fancymenu/util/file/$FileFilter"
import {$FileTypeGroup, $FileTypeGroup$Type} from "packages/de/keksuccino/fancymenu/util/file/type/groups/$FileTypeGroup"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$AudioFileType, $AudioFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$AudioFileType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TextFileType, $TextFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$TextFileType"
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$Resource, $Resource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$Resource"
import {$ImageFileType, $ImageFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$ImageFileType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"
import {$VideoFileType, $VideoFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$VideoFileType"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $ResourceChooserScreen<R extends $Resource, F extends $FileType<(R)>> extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Component$Type, arg1: $FileTypeGroup$Type<(F)>, arg2: $FileFilter$Type, arg3: $Consumer$Type<(string)>)

public static "generic"(arg0: $FileTypeGroup$Type<($FileType$Type<($Resource$Type)>)>, arg1: $FileFilter$Type, arg2: $Consumer$Type<(string)>): $ResourceChooserScreen<($Resource), ($FileType<($Resource)>)>
public static "generic"(arg0: $Component$Type, arg1: $FileTypeGroup$Type<($FileType$Type<($Resource$Type)>)>, arg2: $FileFilter$Type, arg3: $Consumer$Type<(string)>): $ResourceChooserScreen<($Resource), ($FileType<($Resource)>)>
public static "text"(arg0: $FileFilter$Type, arg1: $Consumer$Type<(string)>): $ResourceChooserScreen<($IText), ($TextFileType)>
public static "text"(arg0: $Component$Type, arg1: $FileFilter$Type, arg2: $Consumer$Type<(string)>): $ResourceChooserScreen<($IText), ($TextFileType)>
public static "image"(arg0: $Component$Type, arg1: $FileFilter$Type, arg2: $Consumer$Type<(string)>): $ResourceChooserScreen<($ITexture), ($ImageFileType)>
public static "image"(arg0: $FileFilter$Type, arg1: $Consumer$Type<(string)>): $ResourceChooserScreen<($ITexture), ($ImageFileType)>
public "isLocationSourceAllowed"(): boolean
public "isLocalSourceAllowed"(): boolean
public "allowDone"(): boolean
public static "audio"(arg0: $Component$Type, arg1: $FileFilter$Type, arg2: $Consumer$Type<(string)>): $ResourceChooserScreen<($IAudio), ($AudioFileType)>
public static "audio"(arg0: $FileFilter$Type, arg1: $Consumer$Type<(string)>): $ResourceChooserScreen<($IAudio), ($AudioFileType)>
public "setSource"(arg0: string, arg1: boolean): $ResourceChooserScreen<(R), (F)>
public "isWebSourceAllowed"(): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public static "video"(arg0: $FileFilter$Type, arg1: $Consumer$Type<(string)>): $ResourceChooserScreen<($IVideo), ($VideoFileType)>
public static "video"(arg0: $Component$Type, arg1: $FileFilter$Type, arg2: $Consumer$Type<(string)>): $ResourceChooserScreen<($IVideo), ($VideoFileType)>
public "setFileFilter"(arg0: $FileFilter$Type): $ResourceChooserScreen<(R), (F)>
public "setLocationSourceAllowed"(arg0: boolean): $ResourceChooserScreen<(R), (F)>
public "setAllowedFileTypes"(arg0: $FileTypeGroup$Type<(F)>): $ResourceChooserScreen<(R), (F)>
public "setResourceSourceCallback"(arg0: $Consumer$Type<(string)>): $ResourceChooserScreen<(R), (F)>
public "setLocalSourceAllowed"(arg0: boolean): $ResourceChooserScreen<(R), (F)>
public "setWebSourceAllowed"(arg0: boolean): $ResourceChooserScreen<(R), (F)>
get "locationSourceAllowed"(): boolean
get "localSourceAllowed"(): boolean
get "webSourceAllowed"(): boolean
set "fileFilter"(value: $FileFilter$Type)
set "locationSourceAllowed"(value: boolean)
set "allowedFileTypes"(value: $FileTypeGroup$Type<(F)>)
set "resourceSourceCallback"(value: $Consumer$Type<(string)>)
set "localSourceAllowed"(value: boolean)
set "webSourceAllowed"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceChooserScreen$Type<R, F> = ($ResourceChooserScreen<(R), (F)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceChooserScreen_<R, F> = $ResourceChooserScreen$Type<(R), (F)>;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener" {
import {$EvaluationListener$FoundResult, $EvaluationListener$FoundResult$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener$FoundResult"
import {$EvaluationListener$EvaluationContinuation, $EvaluationListener$EvaluationContinuation$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener$EvaluationContinuation"

export interface $EvaluationListener {

 "resultFound"(arg0: $EvaluationListener$FoundResult$Type): $EvaluationListener$EvaluationContinuation

(arg0: $EvaluationListener$FoundResult$Type): $EvaluationListener$EvaluationContinuation
}

export namespace $EvaluationListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvaluationListener$Type = ($EvaluationListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvaluationListener_ = $EvaluationListener$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuStackMeta" {
import {$RuntimePropertyContainer, $RuntimePropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$RuntimePropertyContainer"

export class $ContextMenu$ContextMenuStackMeta {

constructor()

public "getProperties"(): $RuntimePropertyContainer
public "isStackable"(): boolean
public "isLastInStack"(): boolean
public "setStackable"(arg0: boolean): void
public "isPartOfStack"(): boolean
public "isFirstInStack"(): boolean
get "properties"(): $RuntimePropertyContainer
get "stackable"(): boolean
get "lastInStack"(): boolean
set "stackable"(value: boolean)
get "partOfStack"(): boolean
get "firstInStack"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$ContextMenuStackMeta$Type = ($ContextMenu$ContextMenuStackMeta);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$ContextMenuStackMeta_ = $ContextMenu$ContextMenuStackMeta$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$DefaultsImpl" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$MappingProvider, $MappingProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/mapper/$MappingProvider"
import {$Configuration$Defaults, $Configuration$Defaults$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration$Defaults"
import {$Option, $Option$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Option"
import {$JsonProvider, $JsonProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$JsonProvider"

export class $DefaultsImpl implements $Configuration$Defaults {
static readonly "INSTANCE": $DefaultsImpl


public "options"(): $Set<($Option)>
public "jsonProvider"(): $JsonProvider
public "mappingProvider"(): $MappingProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultsImpl$Type = ($DefaultsImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultsImpl_ = $DefaultsImpl$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/threading/$MainThreadTaskExecutor" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$MainThreadTaskExecutor$ExecuteTiming, $MainThreadTaskExecutor$ExecuteTiming$Type} from "packages/de/keksuccino/fancymenu/util/threading/$MainThreadTaskExecutor$ExecuteTiming"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $MainThreadTaskExecutor {

constructor()

public static "executeInMainThread"(arg0: $Runnable$Type, arg1: $MainThreadTaskExecutor$ExecuteTiming$Type): void
public static "getAndClearQueue"(arg0: $MainThreadTaskExecutor$ExecuteTiming$Type): $List<($Runnable)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MainThreadTaskExecutor$Type = ($MainThreadTaskExecutor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MainThreadTaskExecutor_ = $MainThreadTaskExecutor$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedEnumValueCycle" {
import {$ILocalizedValueCycle, $ILocalizedValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$ILocalizedValueCycle"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$ValueCycle, $ValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$ValueCycle"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LocalizedEnum, $LocalizedEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedEnum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $LocalizedEnumValueCycle<E extends $LocalizedEnum<(any)>> extends $ValueCycle<(E)> implements $ILocalizedValueCycle<(E)> {


public static "ofArray"<E extends $LocalizedEnum<(any)>>(arg0: string, ...arg1: (E)[]): $LocalizedEnumValueCycle<(E)>
public "setCycleComponentStyleSupplier"(arg0: $ConsumingSupplier$Type<(E), ($Style$Type)>): $LocalizedEnumValueCycle<(E)>
public "getCurrentValueComponent"(): $MutableComponent
public "getCycleLocalizationKey"(): string
public static "ofList"<E extends $LocalizedEnum<(any)>>(arg0: string, arg1: $List$Type<(E)>): $LocalizedEnumValueCycle<(E)>
public "getCycleComponent"(): $MutableComponent
public "addCycleListener"(arg0: $Consumer$Type<(E)>): $LocalizedEnumValueCycle<(E)>
set "cycleComponentStyleSupplier"(value: $ConsumingSupplier$Type<(E), ($Style$Type)>)
get "currentValueComponent"(): $MutableComponent
get "cycleLocalizationKey"(): string
get "cycleComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalizedEnumValueCycle$Type<E> = ($LocalizedEnumValueCycle<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalizedEnumValueCycle_<E> = $LocalizedEnumValueCycle$Type<(E)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer$MarkdownLineAlignment" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $MarkdownRenderer$MarkdownLineAlignment extends $Enum<($MarkdownRenderer$MarkdownLineAlignment)> {
static readonly "LEFT": $MarkdownRenderer$MarkdownLineAlignment
static readonly "CENTERED": $MarkdownRenderer$MarkdownLineAlignment
static readonly "RIGHT": $MarkdownRenderer$MarkdownLineAlignment


public static "values"(): ($MarkdownRenderer$MarkdownLineAlignment)[]
public static "valueOf"(arg0: string): $MarkdownRenderer$MarkdownLineAlignment
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownRenderer$MarkdownLineAlignment$Type = (("left") | ("centered") | ("right")) | ($MarkdownRenderer$MarkdownLineAlignment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownRenderer$MarkdownLineAlignment_ = $MarkdownRenderer$MarkdownLineAlignment$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry$MenuBarEntrySupplier" {
import {$MenuBar$MenuBarEntry, $MenuBar$MenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"

export interface $MenuBar$MenuBarEntry$MenuBarEntrySupplier<T> {

 "get"(arg0: $MenuBar$Type, arg1: $MenuBar$MenuBarEntry$Type): T

(arg0: $MenuBar$Type, arg1: $MenuBar$MenuBarEntry$Type): T
}

export namespace $MenuBar$MenuBarEntry$MenuBarEntrySupplier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<T> = ($MenuBar$MenuBarEntry$MenuBarEntrySupplier<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar$MenuBarEntry$MenuBarEntrySupplier_<T> = $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$HideableElement" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $HideableElement {

 "isHidden"(): boolean
 "setHidden"(arg0: boolean): void
}

export namespace $HideableElement {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HideableElement$Type = ($HideableElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HideableElement_ = $HideableElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserStream" {
import {$JSONParserBase, $JSONParserBase$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserBase"

export class $JSONParserStream extends $JSONParserBase {
static readonly "EOI": byte

constructor(arg0: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONParserStream$Type = ($JSONParserStream);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONParserStream_ = $JSONParserStream$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/opengui/$ClientSideOpenGuiCommandPacketLogic" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ClientSideOpenGuiCommandPacketLogic {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientSideOpenGuiCommandPacketLogic$Type = ($ClientSideOpenGuiCommandPacketLogic);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientSideOpenGuiCommandPacketLogic_ = $ClientSideOpenGuiCommandPacketLogic$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/$Packet" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $Packet {

constructor()

public "sendChatFeedback"(arg0: $MutableComponent$Type, arg1: boolean): void
public "processPacket"(arg0: $ServerPlayer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Packet$Type = ($Packet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Packet_ = $Packet$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/$ModReloadEvent" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $ModReloadEvent extends $EventBase {

constructor(arg0: $Screen$Type)

public "isCancelable"(): boolean
public "getScreen"(): $Screen
get "cancelable"(): boolean
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModReloadEvent$Type = ($ModReloadEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModReloadEvent_ = $ModReloadEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinSplashRenderer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMixinSplashRenderer {

 "getSplashFancyMenu"(): string

(): string
}

export namespace $IMixinSplashRenderer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinSplashRenderer$Type = ($IMixinSplashRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinSplashRenderer_ = $IMixinSplashRenderer$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$ParseContextImpl" {
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$ParseContext, $ParseContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$ParseContext"
import {$File, $File$Type} from "packages/java/io/$File"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$DocumentContext, $DocumentContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$DocumentContext"
import {$URL, $URL$Type} from "packages/java/net/$URL"

export class $ParseContextImpl implements $ParseContext {

constructor()
constructor(arg0: $Configuration$Type)

public "parse"(arg0: $InputStream$Type, arg1: string): $DocumentContext
public "parse"(arg0: $InputStream$Type): $DocumentContext
public "parse"(arg0: $File$Type): $DocumentContext
public "parse"(arg0: any): $DocumentContext
public "parse"(arg0: string): $DocumentContext
/**
 * 
 * @deprecated
 */
public "parse"(arg0: $URL$Type): $DocumentContext
public "parseUtf8"(arg0: (byte)[]): $DocumentContext
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParseContextImpl$Type = ($ParseContextImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParseContextImpl_ = $ParseContextImpl$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/$ValuePlaceholderHolder" {
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $ValuePlaceholderHolder {

 "addValuePlaceholder"(arg0: string, arg1: $Supplier$Type<(string)>): void
 "getValuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
}

export namespace $ValuePlaceholderHolder {
const VALUE_PLACEHOLDER_PREFIX: string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValuePlaceholderHolder$Type = ($ValuePlaceholderHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValuePlaceholderHolder_ = $ValuePlaceholderHolder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$CustomizableWidget" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CustomizableWidget$CustomBackgroundResetBehavior, $CustomizableWidget$CustomBackgroundResetBehavior$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$CustomizableWidget$CustomBackgroundResetBehavior"
import {$RenderableResource, $RenderableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$RenderableResource"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $CustomizableWidget {

 "tickHoverOrFocusStateListenersFancyMenu"(arg0: boolean): void
 "resetWidgetSizeAndPositionFancyMenu"(): void
 "addHoverOrFocusStateListenerFancyMenu"(arg0: $Consumer$Type<(boolean)>): void
 "addResetCustomizationsListenerFancyMenu"(arg0: $Runnable$Type): void
 "getResetCustomizationsListenersFancyMenu"(): $List<($Runnable)>
 "setCustomBackgroundInactiveFancyMenu"(arg0: $RenderableResource$Type): void
 "setCustomBackgroundResetBehaviorFancyMenu"(arg0: $CustomizableWidget$CustomBackgroundResetBehavior$Type): void
 "getHoverOrFocusStateListenersFancyMenu"(): $List<($Consumer<(boolean)>)>
 "getCustomBackgroundInactiveFancyMenu"(): $RenderableResource
 "isHiddenFancyMenu"(): boolean
 "setHiddenFancyMenu"(arg0: boolean): void
 "setLastHoverStateFancyMenu"(arg0: boolean): void
 "getLastFocusStateFancyMenu"(): boolean
 "getLastHoverOrFocusStateFancyMenu"(): boolean
 "setLastHoverOrFocusStateFancyMenu"(arg0: boolean): void
 "setLastFocusStateFancyMenu"(arg0: boolean): void
 "tickHoverStateListenersFancyMenu"(arg0: boolean): void
 "tickFocusStateListenersFancyMenu"(arg0: boolean): void
 "getFocusStateListenersFancyMenu"(): $List<($Consumer<(boolean)>)>
 "resetWidgetCustomizationsFancyMenu"(): void
 "getCustomBackgroundNormalFancyMenu"(): $RenderableResource
 "getCustomBackgroundHoverFancyMenu"(): $RenderableResource
 "setCustomBackgroundNormalFancyMenu"(arg0: $RenderableResource$Type): void
 "addHoverStateListenerFancyMenu"(arg0: $Consumer$Type<(boolean)>): void
 "addFocusStateListenerFancyMenu"(arg0: $Consumer$Type<(boolean)>): void
 "getHoverStateListenersFancyMenu"(): $List<($Consumer<(boolean)>)>
 "getLastHoverStateFancyMenu"(): boolean
 "setCustomBackgroundHoverFancyMenu"(arg0: $RenderableResource$Type): void
 "renderCustomBackgroundFancyMenu"(arg0: $AbstractWidget$Type, arg1: $GuiGraphics$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer): boolean
 "setCustomClickSoundFancyMenu"(arg0: $IAudio$Type): void
 "setCustomXFancyMenu"(arg0: integer): void
 "getCustomLabelFancyMenu"(): $Component
 "setHoverLabelFancyMenu"(arg0: $Component$Type): void
 "getCustomClickSoundFancyMenu"(): $IAudio
 "getCustomHeightFancyMenu"(): integer
 "getCustomXFancyMenu"(): integer
 "getCustomYFancyMenu"(): integer
 "setNineSliceBorderY_FancyMenu"(arg0: integer): void
 "getOriginalMessageFancyMenu"(): $Component
 "getCustomWidthFancyMenu"(): integer
 "setHoverSoundFancyMenu"(arg0: $IAudio$Type): void
 "setCustomHeightFancyMenu"(arg0: integer): void
 "setCustomLabelFancyMenu"(arg0: $Component$Type): void
 "getHoverLabelFancyMenu"(): $Component
 "getHoverSoundFancyMenu"(): $IAudio
 "setCustomWidthFancyMenu"(arg0: integer): void
 "setNineSliceBorderX_FancyMenu"(arg0: integer): void
 "setCustomYFancyMenu"(arg0: integer): void
 "setNineSliceCustomBackground_FancyMenu"(arg0: boolean): void
 "isNineSliceCustomBackgroundTexture_FancyMenu"(): boolean
 "getNineSliceCustomBackgroundBorderX_FancyMenu"(): integer
 "getNineSliceCustomBackgroundBorderY_FancyMenu"(): integer
 "getCustomBackgroundResetBehaviorFancyMenu"(): $CustomizableWidget$CustomBackgroundResetBehavior
}

export namespace $CustomizableWidget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomizableWidget$Type = ($CustomizableWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomizableWidget_ = $CustomizableWidget$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/json/$KeySetFunction" {
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathFunction, $PathFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunction"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export class $KeySetFunction implements $PathFunction {

constructor()

public "invoke"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContext$Type, arg4: $List$Type<($Parameter$Type)>): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeySetFunction$Type = ($KeySetFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeySetFunction_ = $KeySetFunction$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ExpressionNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$LogicalOperator, $LogicalOperator$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$LogicalOperator"

export class $ExpressionNode implements $Predicate {

constructor()

public static "createExpressionNode"(arg0: $ExpressionNode$Type, arg1: $LogicalOperator$Type, arg2: $ExpressionNode$Type): $ExpressionNode
public "apply"(arg0: $Predicate$PredicateContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpressionNode$Type = ($ExpressionNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpressionNode_ = $ExpressionNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/gamemode/$IsSpectatorRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsSpectatorRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsSpectatorRequirement$Type = ($IsSpectatorRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsSpectatorRequirement_ = $IsSpectatorRequirement$Type;
}}
declare module "packages/de/keksuccino/konkrete/resources/$WebTextureResourceLocation" {
import {$ITextureResourceLocation, $ITextureResourceLocation$Type} from "packages/de/keksuccino/konkrete/resources/$ITextureResourceLocation"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $WebTextureResourceLocation implements $ITextureResourceLocation {

constructor(arg0: string)

public "getURL"(): string
public "isReady"(): boolean
public "loadTexture"(): void
public "getWidth"(): integer
public "getHeight"(): integer
public "getResourceLocation"(): $ResourceLocation
get "uRL"(): string
get "ready"(): boolean
get "width"(): integer
get "height"(): integer
get "resourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WebTextureResourceLocation$Type = ($WebTextureResourceLocation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WebTextureResourceLocation_ = $WebTextureResourceLocation$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/$Layout$LayoutStatus" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$LocalizedCycleEnum, $LocalizedCycleEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedCycleEnum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $Layout$LayoutStatus extends $Enum<($Layout$LayoutStatus)> implements $LocalizedCycleEnum<($Layout$LayoutStatus)> {
static readonly "ENABLED": $Layout$LayoutStatus
static readonly "DISABLED": $Layout$LayoutStatus


public "getName"(): string
public static "values"(): ($Layout$LayoutStatus)[]
public static "valueOf"(arg0: string): $Layout$LayoutStatus
public static "getByName"(arg0: string): $Layout$LayoutStatus
public "getValueComponentStyle"(): $Style
public "getLocalizationKeyBase"(): string
public "getByNameInternal"(arg0: string): $Layout$LayoutStatus
public "getCycleComponentStyle"(): $Style
public "cycle"(arg0: $Layout$LayoutStatus$Type): $LocalizedGenericValueCycle<($Layout$LayoutStatus)>
public "cycle"(): $LocalizedGenericValueCycle<($Layout$LayoutStatus)>
public "getCycleComponent"(): $MutableComponent
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "valueComponentStyle"(): $Style
get "localizationKeyBase"(): string
get "cycleComponentStyle"(): $Style
get "cycleComponent"(): $MutableComponent
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Layout$LayoutStatus$Type = (("disabled") | ("enabled")) | ($Layout$LayoutStatus);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Layout$LayoutStatus_ = $Layout$LayoutStatus$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/$ScreenCustomizationEvents" {
import {$ClientTickEvent$Pre, $ClientTickEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Pre"
import {$ScreenReloadEvent, $ScreenReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ScreenReloadEvent"
import {$CloseScreenEvent, $CloseScreenEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$CloseScreenEvent"
import {$RenderGuiListBackgroundEvent$Pre, $RenderGuiListBackgroundEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListBackgroundEvent$Pre"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"
import {$InitOrResizeScreenStartingEvent, $InitOrResizeScreenStartingEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenStartingEvent"

export class $ScreenCustomizationEvents {

constructor()

public "onModReloaded"(arg0: $ModReloadEvent$Type): void
public "onSoftReload"(arg0: $ScreenReloadEvent$Type): void
public "onInitStarting"(arg0: $InitOrResizeScreenStartingEvent$Type): void
public "onCloseScreen"(arg0: $CloseScreenEvent$Type): void
public "onRenderListBackground"(arg0: $RenderGuiListBackgroundEvent$Pre$Type): void
public "onTick"(arg0: $ClientTickEvent$Pre$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCustomizationEvents$Type = ($ScreenCustomizationEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCustomizationEvents_ = $ScreenCustomizationEvents$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/screens/popup/$TextInputPopup" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/konkrete/input/$CharacterFilter"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$KeyboardData, $KeyboardData$Type} from "packages/de/keksuccino/konkrete/input/$KeyboardData"
import {$Popup, $Popup$Type} from "packages/de/keksuccino/konkrete/gui/screens/popup/$Popup"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TextInputPopup extends $Popup {

constructor(arg0: $Color$Type, arg1: string, arg2: $CharacterFilter$Type, arg3: integer)
constructor(arg0: $Color$Type, arg1: string, arg2: $CharacterFilter$Type, arg3: integer, arg4: $Consumer$Type<(string)>)

public "setText"(arg0: string): void
public "getInput"(): string
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: $Screen$Type): void
public "onEnterPressed"(arg0: $KeyboardData$Type): void
public "onEscapePressed"(arg0: $KeyboardData$Type): void
set "text"(value: string)
get "input"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextInputPopup$Type = ($TextInputPopup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextInputPopup_ = $TextInputPopup$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/$PlaceholderParser$ParsedPlaceholder" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"

export class $PlaceholderParser$ParsedPlaceholder {
readonly "placeholderString": string
readonly "startIndex": integer
readonly "endIndex": integer


public "equals"(arg0: any): boolean
public "hashCode"(): integer
public "getIdentifier"(): string
public "getPlaceholder"(): $Placeholder
public "getReplacement"(): string
public "getValues"(): $HashMap<(string), (string)>
public "hasValues"(): boolean
get "identifier"(): string
get "placeholder"(): $Placeholder
get "replacement"(): string
get "values"(): $HashMap<(string), (string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaceholderParser$ParsedPlaceholder$Type = ($PlaceholderParser$ParsedPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaceholderParser$ParsedPlaceholder_ = $PlaceholderParser$ParsedPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PassthruPathFunction" {
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathFunction, $PathFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunction"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export class $PassthruPathFunction implements $PathFunction {

constructor()

public "invoke"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContext$Type, arg4: $List$Type<($Parameter$Type)>): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PassthruPathFunction$Type = ($PassthruPathFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PassthruPathFunction_ = $PassthruPathFunction$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"

export interface $Predicate {

 "apply"(arg0: $Predicate$PredicateContext$Type): boolean

(arg0: $Predicate$PredicateContext$Type): boolean
}

export namespace $Predicate {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Predicate$Type = ($Predicate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Predicate_ = $Predicate$Type;
}}
declare module "packages/de/keksuccino/konkrete/localization/$LocalizationPackage" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LocalizationPackage {


public "isEmpty"(): boolean
public "containsKey"(arg0: string): boolean
public "getLanguage"(): string
public "getLocalizedString"(arg0: string): string
public "addLocalizedString"(arg0: string, arg1: string): void
public "removeLocalizedString"(arg0: string): void
get "empty"(): boolean
get "language"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalizationPackage$Type = ($LocalizationPackage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalizationPackage_ = $LocalizationPackage$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$DocumentContext" {
import {$ReadContext, $ReadContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$ReadContext"
import {$TypeRef, $TypeRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$TypeRef"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$WriteContext, $WriteContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$WriteContext"
import {$MapFunction, $MapFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$MapFunction"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$JsonPath, $JsonPath$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPath"
import {$EvaluationListener, $EvaluationListener$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener"

export interface $DocumentContext extends $ReadContext, $WriteContext {

 "limit"(arg0: integer): $ReadContext
 "read"<T>(arg0: string, arg1: $Class$Type<(T)>, ...arg2: ($Predicate$Type)[]): T
 "read"<T>(arg0: $JsonPath$Type, arg1: $TypeRef$Type<(T)>): T
 "read"<T>(arg0: $JsonPath$Type, arg1: $Class$Type<(T)>): T
 "read"<T>(arg0: string, ...arg1: ($Predicate$Type)[]): T
 "read"<T>(arg0: string, arg1: $TypeRef$Type<(T)>): T
 "read"<T>(arg0: $JsonPath$Type): T
 "configuration"(): $Configuration
 "json"<T>(): T
 "jsonString"(): string
 "withListeners"(...arg0: ($EvaluationListener$Type)[]): $ReadContext
 "add"(arg0: $JsonPath$Type, arg1: any): $DocumentContext
 "add"(arg0: string, arg1: any, ...arg2: ($Predicate$Type)[]): $DocumentContext
 "put"(arg0: $JsonPath$Type, arg1: string, arg2: any): $DocumentContext
 "put"(arg0: string, arg1: string, arg2: any, ...arg3: ($Predicate$Type)[]): $DocumentContext
 "map"(arg0: $JsonPath$Type, arg1: $MapFunction$Type): $DocumentContext
 "map"(arg0: string, arg1: $MapFunction$Type, ...arg2: ($Predicate$Type)[]): $DocumentContext
 "set"(arg0: $JsonPath$Type, arg1: any): $DocumentContext
 "set"(arg0: string, arg1: any, ...arg2: ($Predicate$Type)[]): $DocumentContext
 "delete"(arg0: string, ...arg1: ($Predicate$Type)[]): $DocumentContext
 "delete"(arg0: $JsonPath$Type): $DocumentContext
 "renameKey"(arg0: string, arg1: string, arg2: string, ...arg3: ($Predicate$Type)[]): $DocumentContext
 "renameKey"(arg0: $JsonPath$Type, arg1: string, arg2: string): $DocumentContext
}

export namespace $DocumentContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DocumentContext$Type = ($DocumentContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DocumentContext_ = $DocumentContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$JvmNamePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $JvmNamePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getAlternativeIdentifiers"(): $List<(string)>
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "alternativeIdentifiers"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JvmNamePlaceholder$Type = ($JvmNamePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JvmNamePlaceholder_ = $JvmNamePlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay$DisplayPosition" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $EditorElementBorderDisplay$DisplayPosition extends $Enum<($EditorElementBorderDisplay$DisplayPosition)> {
static readonly "TOP_LEFT": $EditorElementBorderDisplay$DisplayPosition
static readonly "TOP_RIGHT": $EditorElementBorderDisplay$DisplayPosition
static readonly "RIGHT_TOP": $EditorElementBorderDisplay$DisplayPosition
static readonly "RIGHT_BOTTOM": $EditorElementBorderDisplay$DisplayPosition
static readonly "BOTTOM_LEFT": $EditorElementBorderDisplay$DisplayPosition
static readonly "BOTTOM_RIGHT": $EditorElementBorderDisplay$DisplayPosition
static readonly "LEFT_TOP": $EditorElementBorderDisplay$DisplayPosition
static readonly "LEFT_BOTTOM": $EditorElementBorderDisplay$DisplayPosition


public static "values"(): ($EditorElementBorderDisplay$DisplayPosition)[]
public static "valueOf"(arg0: string): $EditorElementBorderDisplay$DisplayPosition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditorElementBorderDisplay$DisplayPosition$Type = (("top_right") | ("right_bottom") | ("top_left") | ("bottom_right") | ("bottom_left") | ("right_top") | ("left_bottom") | ("left_top")) | ($EditorElementBorderDisplay$DisplayPosition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditorElementBorderDisplay$DisplayPosition_ = $EditorElementBorderDisplay$DisplayPosition$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/customgui/$CustomGui" {
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"

export class $CustomGui {
 "identifier": string
 "title": string
 "allowEsc": boolean
 "worldBackground": boolean
 "worldBackgroundOverlay": boolean
 "pauseGame": boolean

constructor()

public "copy"(): $CustomGui
public static "deserialize"(arg0: $PropertyContainer$Type): $CustomGui
public "serialize"(): $PropertyContainer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomGui$Type = ($CustomGui);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomGui_ = $CustomGui$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeHourPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $RealtimeHourPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RealtimeHourPlaceholder$Type = ($RealtimeHourPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RealtimeHourPlaceholder_ = $RealtimeHourPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry" {
import {$MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier, $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Tooltip, $Tooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $MenuBar$MenuBarEntry implements $Renderable, $GuiEventListener {

constructor(arg0: string, arg1: $MenuBar$Type)

public "isActive"(): boolean
public "getIdentifier"(): string
public "setTooltipSupplier"(arg0: $ConsumingSupplier$Type<($MenuBar$MenuBarEntry$Type), ($Tooltip$Type)>): $MenuBar$MenuBarEntry
public "setActive"(arg0: boolean): $MenuBar$MenuBarEntry
public "setVisible"(arg0: boolean): $MenuBar$MenuBarEntry
public "isMouseOver"(arg0: double, arg1: double): boolean
public "setFocused"(arg0: boolean): void
public "isVisible"(): boolean
public "isHovered"(): boolean
public "setVisibleSupplier"(arg0: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type): $MenuBar$MenuBarEntry
public "setActiveSupplier"(arg0: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type): $MenuBar$MenuBarEntry
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "isFocused"(): boolean
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getRectangle"(): $ScreenRectangle
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "getTabOrderGroup"(): integer
get "active"(): boolean
get "identifier"(): string
set "tooltipSupplier"(value: $ConsumingSupplier$Type<($MenuBar$MenuBarEntry$Type), ($Tooltip$Type)>)
set "active"(value: boolean)
set "visible"(value: boolean)
set "focused"(value: boolean)
get "visible"(): boolean
get "hovered"(): boolean
set "visibleSupplier"(value: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type)
set "activeSupplier"(value: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type)
get "focused"(): boolean
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$MenuBarEntry$Type = ($MenuBar$MenuBarEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar$MenuBarEntry_ = $MenuBar$MenuBarEntry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$AbsolutePathPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $AbsolutePathPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsolutePathPlaceholder$Type = ($AbsolutePathPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsolutePathPlaceholder_ = $AbsolutePathPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement$ResizeGrabber" {
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $AbstractEditorElement$ResizeGrabber implements $Renderable {


public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractEditorElement$ResizeGrabber$Type = ($AbstractEditorElement$ResizeGrabber);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractEditorElement$ResizeGrabber_ = $AbstractEditorElement$ResizeGrabber$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/$PlayerEntityElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$PlayerEntityElement, $PlayerEntityElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/$PlayerEntityElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$PlayerEntityEditorElement, $PlayerEntityEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/$PlayerEntityEditorElement"

export class $PlayerEntityElementBuilder extends $ElementBuilder<($PlayerEntityElement), ($PlayerEntityEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $PlayerEntityElement$Type, arg1: $LayoutEditorScreen$Type): $PlayerEntityEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityElementBuilder$Type = ($PlayerEntityElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityElementBuilder_ = $PlayerEntityElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsWindowWidthBiggerThanRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsWindowWidthBiggerThanRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsWindowWidthBiggerThanRequirement$Type = ($IsWindowWidthBiggerThanRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsWindowWidthBiggerThanRequirement_ = $IsWindowWidthBiggerThanRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerPingPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ServerPingPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerPingPlaceholder$Type = ($ServerPingPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerPingPlaceholder_ = $ServerPingPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$SubMenuOpeningSide" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ContextMenu$SubMenuOpeningSide extends $Enum<($ContextMenu$SubMenuOpeningSide)> {
static readonly "LEFT": $ContextMenu$SubMenuOpeningSide
static readonly "RIGHT": $ContextMenu$SubMenuOpeningSide


public static "values"(): ($ContextMenu$SubMenuOpeningSide)[]
public static "valueOf"(arg0: string): $ContextMenu$SubMenuOpeningSide
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$SubMenuOpeningSide$Type = (("left") | ("right")) | ($ContextMenu$SubMenuOpeningSide);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$SubMenuOpeningSide_ = $ContextMenu$SubMenuOpeningSide$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsWindowWidthRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsWindowWidthRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsWindowWidthRequirement$Type = ($IsWindowWidthRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsWindowWidthRequirement_ = $IsWindowWidthRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v2/$AbstractExtendedSlider" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AbstractSliderButton, $AbstractSliderButton$Type} from "packages/net/minecraft/client/gui/components/$AbstractSliderButton"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$CustomizableSlider, $CustomizableSlider$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$CustomizableSlider"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractExtendedSlider$SliderValueUpdateListener, $AbstractExtendedSlider$SliderValueUpdateListener$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v2/$AbstractExtendedSlider$SliderValueUpdateListener"
import {$RenderableResource, $RenderableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$RenderableResource"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$CustomizableWidget, $CustomizableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$CustomizableWidget"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IExtendedWidget, $IExtendedWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$IExtendedWidget"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"
import {$IMixinAbstractSliderButton, $IMixinAbstractSliderButton$Type} from "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinAbstractSliderButton"

export class $AbstractExtendedSlider extends $AbstractSliderButton implements $IExtendedWidget, $NavigatableWidget {
static readonly "SLIDER_LOCATION": $ResourceLocation
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Component$Type, arg5: double)

public "getSliderBackgroundColorHighlighted"(): $DrawableColor
public "setSliderBackgroundColorHighlighted"(arg0: $DrawableColor$Type): $AbstractExtendedSlider
public "getValue"(): double
public "getAccessor"(): $IMixinAbstractSliderButton
public "setLabelShadow"(arg0: boolean): $AbstractExtendedSlider
public "isNavigatable"(): boolean
public "getLabelSupplier"(): $ConsumingSupplier<($AbstractExtendedSlider), ($Component)>
public "isLabelShadow"(): boolean
public "getHandleWidth"(): integer
public "getHandleX"(): integer
public "setSliderValueUpdateListener"(arg0: $AbstractExtendedSlider$SliderValueUpdateListener$Type): $AbstractExtendedSlider
public "getValueDisplayText"(): string
public "setSliderHandleColorNormal"(arg0: $DrawableColor$Type): $AbstractExtendedSlider
public "setLabelColorNormal"(arg0: $DrawableColor$Type): $AbstractExtendedSlider
public "setSliderHandleColorHover"(arg0: $DrawableColor$Type): $AbstractExtendedSlider
public "setSliderBackgroundColorNormal"(arg0: $DrawableColor$Type): $AbstractExtendedSlider
public "setSliderBorderColorNormal"(arg0: $DrawableColor$Type): $AbstractExtendedSlider
public "setLabelColorInactive"(arg0: $DrawableColor$Type): $AbstractExtendedSlider
public "setNavigatable"(arg0: boolean): void
public "setLabelSupplier"(arg0: $ConsumingSupplier$Type<($AbstractExtendedSlider$Type), ($Component$Type)>): $AbstractExtendedSlider
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "renderWidget"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "m_93611_"(arg0: double): void
public "m_5695_"(): void
public "getSliderHandleColorNormal"(): $DrawableColor
public "setBackgroundTextureNormal"(arg0: $RenderableResource$Type): $AbstractExtendedSlider
public "getSliderHandleColorHover"(): $DrawableColor
public "setSliderHandleColorInactive"(arg0: $DrawableColor$Type): $AbstractExtendedSlider
public "getSliderBackgroundColorNormal"(): $DrawableColor
public "getLabelColorNormal"(): $DrawableColor
public "getLabelColorInactive"(): $DrawableColor
public "setHandleTextureInactive"(arg0: $RenderableResource$Type): $AbstractExtendedSlider
public "getSliderHandleColorInactive"(): $DrawableColor
public "getHandleTextureNormal"(): $RenderableResource
public "getAsCustomizableSlider"(): $CustomizableSlider
public "getAsCustomizableWidget"(): $CustomizableWidget
public "setHandleTextureNormal"(arg0: $RenderableResource$Type): $AbstractExtendedSlider
public "getHandleTextureHover"(): $RenderableResource
public "getBackgroundTextureNormal"(): $RenderableResource
public "getBackgroundTextureHighlighted"(): $RenderableResource
public "setBackgroundTextureHighlighted"(arg0: $RenderableResource$Type): $AbstractExtendedSlider
public "getHandleTextureInactive"(): $RenderableResource
public "getSliderBorderColorNormal"(): $DrawableColor
public "setHandleTextureHover"(arg0: $RenderableResource$Type): $AbstractExtendedSlider
public "getSliderBorderColorHighlighted"(): $DrawableColor
public "setSliderBorderColorHighlighted"(arg0: $DrawableColor$Type): $AbstractExtendedSlider
public "renderScrollingLabelInternal"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $Component$Type, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: boolean, arg8: integer): void
public "renderScrollingLabel"(arg0: $AbstractWidget$Type, arg1: $GuiGraphics$Type, arg2: $Font$Type, arg3: integer, arg4: boolean, arg5: integer): void
get "sliderBackgroundColorHighlighted"(): $DrawableColor
set "sliderBackgroundColorHighlighted"(value: $DrawableColor$Type)
get "value"(): double
get "accessor"(): $IMixinAbstractSliderButton
set "labelShadow"(value: boolean)
get "navigatable"(): boolean
get "labelSupplier"(): $ConsumingSupplier<($AbstractExtendedSlider), ($Component)>
get "labelShadow"(): boolean
get "handleWidth"(): integer
get "handleX"(): integer
set "sliderValueUpdateListener"(value: $AbstractExtendedSlider$SliderValueUpdateListener$Type)
get "valueDisplayText"(): string
set "sliderHandleColorNormal"(value: $DrawableColor$Type)
set "labelColorNormal"(value: $DrawableColor$Type)
set "sliderHandleColorHover"(value: $DrawableColor$Type)
set "sliderBackgroundColorNormal"(value: $DrawableColor$Type)
set "sliderBorderColorNormal"(value: $DrawableColor$Type)
set "labelColorInactive"(value: $DrawableColor$Type)
set "navigatable"(value: boolean)
set "labelSupplier"(value: $ConsumingSupplier$Type<($AbstractExtendedSlider$Type), ($Component$Type)>)
get "focusable"(): boolean
set "focusable"(value: boolean)
get "sliderHandleColorNormal"(): $DrawableColor
set "backgroundTextureNormal"(value: $RenderableResource$Type)
get "sliderHandleColorHover"(): $DrawableColor
set "sliderHandleColorInactive"(value: $DrawableColor$Type)
get "sliderBackgroundColorNormal"(): $DrawableColor
get "labelColorNormal"(): $DrawableColor
get "labelColorInactive"(): $DrawableColor
set "handleTextureInactive"(value: $RenderableResource$Type)
get "sliderHandleColorInactive"(): $DrawableColor
get "handleTextureNormal"(): $RenderableResource
get "asCustomizableSlider"(): $CustomizableSlider
get "asCustomizableWidget"(): $CustomizableWidget
set "handleTextureNormal"(value: $RenderableResource$Type)
get "handleTextureHover"(): $RenderableResource
get "backgroundTextureNormal"(): $RenderableResource
get "backgroundTextureHighlighted"(): $RenderableResource
set "backgroundTextureHighlighted"(value: $RenderableResource$Type)
get "handleTextureInactive"(): $RenderableResource
get "sliderBorderColorNormal"(): $DrawableColor
set "handleTextureHover"(value: $RenderableResource$Type)
get "sliderBorderColorHighlighted"(): $DrawableColor
set "sliderBorderColorHighlighted"(value: $DrawableColor$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractExtendedSlider$Type = ($AbstractExtendedSlider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractExtendedSlider_ = $AbstractExtendedSlider$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/filebrowser/$ChooseFileScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$AbstractFileBrowserScreen, $AbstractFileBrowserScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/filebrowser/$AbstractFileBrowserScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ChooseFileScreen extends $AbstractFileBrowserScreen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $File$Type, arg1: $File$Type, arg2: $Consumer$Type<($File$Type)>)

public static "build"(arg0: $File$Type, arg1: $Consumer$Type<($File$Type)>): $ChooseFileScreen
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChooseFileScreen$Type = ($ChooseFileScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChooseFileScreen_ = $ChooseFileScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader" {
import {$JSONAwareEx, $JSONAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAwareEx"
import {$ParameterizedType, $ParameterizedType$Type} from "packages/java/lang/reflect/$ParameterizedType"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$Type, $Type$Type} from "packages/java/lang/reflect/$Type"

export class $JsonReader {
 "DEFAULT": $JsonReaderI<($JSONAwareEx)>
 "DEFAULT_ORDERED": $JsonReaderI<($JSONAwareEx)>

constructor()

public "getMapper"<T>(arg0: $Type$Type): $JsonReaderI<(T)>
public "getMapper"<T>(arg0: $Class$Type<(T)>): $JsonReaderI<(T)>
public "getMapper"<T>(arg0: $ParameterizedType$Type): $JsonReaderI<(T)>
public "registerReader"<T>(arg0: $Class$Type<(T)>, arg1: $JsonReaderI$Type<(T)>): void
public "remapField"<T>(arg0: $Class$Type<(T)>, arg1: string, arg2: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonReader$Type = ($JsonReader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonReader_ = $JsonReader$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$NegateNumberPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $NegateNumberPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NegateNumberPlaceholder$Type = ($NegateNumberPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NegateNumberPlaceholder_ = $NegateNumberPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MPTrue" {
import {$JStylerObj$MustProtect, $JStylerObj$MustProtect$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MustProtect"

export class $JStylerObj$MPTrue implements $JStylerObj$MustProtect {


public "mustBeProtect"(arg0: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JStylerObj$MPTrue$Type = ($JStylerObj$MPTrue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JStylerObj$MPTrue_ = $JStylerObj$MPTrue$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsLayoutEnabledRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsLayoutEnabledRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsLayoutEnabledRequirement$Type = ($IsLayoutEnabledRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsLayoutEnabledRequirement_ = $IsLayoutEnabledRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $EventBase {

constructor()

public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "isCancelable"(): boolean
set "canceled"(value: boolean)
get "canceled"(): boolean
get "cancelable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventBase$Type = ($EventBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventBase_ = $EventBase$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainerSet" {
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$List, $List$Type} from "packages/java/util/$List"

export class $PropertyContainerSet {

constructor(arg0: string)

public "getType"(): string
public "setType"(arg0: string): void
public "getContainers"(): $List<($PropertyContainer)>
public "getFirstContainerOfType"(arg0: string): $PropertyContainer
public "putContainer"(arg0: $PropertyContainer$Type): void
public "getContainersOfType"(arg0: string): $List<($PropertyContainer)>
get "type"(): string
set "type"(value: string)
get "containers"(): $List<($PropertyContainer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PropertyContainerSet$Type = ($PropertyContainerSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PropertyContainerSet_ = $PropertyContainerSet$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$Filter" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"

export class $Filter implements $Predicate {

constructor()

public "apply"(arg0: $Predicate$PredicateContext$Type): boolean
public static "filter"(arg0: $Collection$Type<($Predicate$Type)>): $Filter
public static "filter"(arg0: $Predicate$Type): $Filter
public static "parse"(arg0: string): $Filter
public "or"(arg0: $Predicate$Type): $Filter
public "and"(arg0: $Predicate$Type): $Filter
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Filter$Type = ($Filter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Filter_ = $Filter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/other/$RunButtonScriptAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

/**
 * 
 * @deprecated
 */
export class $RunButtonScriptAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "isDeprecated"(): boolean
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "deprecated"(): boolean
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RunButtonScriptAction$Type = ($RunButtonScriptAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RunButtonScriptAction_ = $RunButtonScriptAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/ram/$UsedRamPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $UsedRamPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UsedRamPlaceholder$Type = ($UsedRamPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UsedRamPlaceholder_ = $UsedRamPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$PathNotFoundException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$InvalidPathException, $InvalidPathException$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$InvalidPathException"

export class $PathNotFoundException extends $InvalidPathException {

constructor(arg0: $Throwable$Type)
constructor(arg0: string, arg1: $Throwable$Type)
constructor(arg0: string)
constructor()

public "fillInStackTrace"(): $Throwable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathNotFoundException$Type = ($PathNotFoundException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathNotFoundException_ = $PathNotFoundException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/widget/$RenderTabNavigationBarHeaderBackgroundEvent$Pre" {
import {$RenderTabNavigationBarHeaderBackgroundEvent, $RenderTabNavigationBarHeaderBackgroundEvent$Type} from "packages/de/keksuccino/fancymenu/events/widget/$RenderTabNavigationBarHeaderBackgroundEvent"
import {$TabNavigationBar, $TabNavigationBar$Type} from "packages/net/minecraft/client/gui/components/tabs/$TabNavigationBar"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderTabNavigationBarHeaderBackgroundEvent$Pre extends $RenderTabNavigationBarHeaderBackgroundEvent {

constructor(arg0: $TabNavigationBar$Type, arg1: $GuiGraphics$Type, arg2: integer, arg3: integer)

public "isCancelable"(): boolean
get "cancelable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderTabNavigationBarHeaderBackgroundEvent$Pre$Type = ($RenderTabNavigationBarHeaderBackgroundEvent$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderTabNavigationBarHeaderBackgroundEvent$Pre_ = $RenderTabNavigationBarHeaderBackgroundEvent$Pre$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/animation/$AnimationHandlerEvents" {
import {$ClientTickEvent$Pre, $ClientTickEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Pre"
import {$InitOrResizeScreenEvent$Pre, $InitOrResizeScreenEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$Pre"

export class $AnimationHandlerEvents {

constructor()

public "onInitPre"(arg0: $InitOrResizeScreenEvent$Pre$Type): void
public "onTick"(arg0: $ClientTickEvent$Pre$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationHandlerEvents$Type = ($AnimationHandlerEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationHandlerEvents_ = $AnimationHandlerEvents$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/world/$LastWorldHandler" {
import {$File, $File$Type} from "packages/java/io/$File"

export class $LastWorldHandler {
static readonly "LAST_WORLD_SAVE_FILE": $File

constructor()

public static "init"(): void
public static "isLastWorldServer"(): boolean
public static "getLastWorld"(): string
public static "setLastWorld"(arg0: string, arg1: boolean): void
get "lastWorldServer"(): boolean
get "lastWorld"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LastWorldHandler$Type = ($LastWorldHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LastWorldHandler_ = $LastWorldHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$UniqueLabeledSwitchCycleButton" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export interface $UniqueLabeledSwitchCycleButton {

 "setLabeledSwitchComponentLabel_FancyMenu"(arg0: $Component$Type): void
 "getLabeledSwitchComponentLabel_FancyMenu"(): $Component
}

export namespace $UniqueLabeledSwitchCycleButton {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UniqueLabeledSwitchCycleButton$Type = ($UniqueLabeledSwitchCycleButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UniqueLabeledSwitchCycleButton_ = $UniqueLabeledSwitchCycleButton$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextLine" {
import {$MarkdownTextLine$SingleLineCodeBlockPart, $MarkdownTextLine$SingleLineCodeBlockPart$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextLine$SingleLineCodeBlockPart"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$MarkdownTextFragment$CodeBlockContext, $MarkdownTextFragment$CodeBlockContext$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$CodeBlockContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MarkdownRenderer$MarkdownLineAlignment, $MarkdownRenderer$MarkdownLineAlignment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer$MarkdownLineAlignment"
import {$MarkdownTextFragment, $MarkdownTextFragment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment"
import {$MarkdownRenderer, $MarkdownRenderer$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MarkdownTextLine implements $Renderable {
 "parent": $MarkdownRenderer
 "offsetX": float
 "offsetY": float
 "containsMultilineCodeBlockFragments": boolean
 "alignment": $MarkdownRenderer$MarkdownLineAlignment
 "bulletListItemStartLine": boolean
readonly "singleLineCodeBlockStartEndPairs": $Map<($MarkdownTextFragment$CodeBlockContext), ($MarkdownTextLine$SingleLineCodeBlockPart)>
readonly "fragments": $List<($MarkdownTextFragment)>

constructor(arg0: $MarkdownRenderer$Type)

public "isAlignmentAllowed"(arg0: $MarkdownRenderer$MarkdownLineAlignment$Type): boolean
public "prepareLine"(): void
public "prepareFragments"(): void
public "getLineWidth"(): float
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getLineHeight"(): float
get "lineWidth"(): float
get "lineHeight"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTextLine$Type = ($MarkdownTextLine);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTextLine_ = $MarkdownTextLine$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeDayRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsRealTimeDayRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsRealTimeDayRequirement$Type = ($IsRealTimeDayRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsRealTimeDayRequirement_ = $IsRealTimeDayRequirement$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$VariableToken" {
import {$Token, $Token$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token"

export class $VariableToken extends $Token {
static readonly "TOKEN_NUMBER": short
static readonly "TOKEN_OPERATOR": short
static readonly "TOKEN_FUNCTION": short
static readonly "TOKEN_PARENTHESES_OPEN": short
static readonly "TOKEN_PARENTHESES_CLOSE": short
static readonly "TOKEN_VARIABLE": short
static readonly "TOKEN_SEPARATOR": short

constructor(arg0: string)

public "getName"(): string
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariableToken$Type = ($VariableToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariableToken_ = $VariableToken$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$Max" {
import {$AbstractAggregation, $AbstractAggregation$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$AbstractAggregation"

export class $Max extends $AbstractAggregation {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Max$Type = ($Max);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Max_ = $Max$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$LocalizationUtils" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"

export class $LocalizationUtils {

constructor()

public static "isLocalizationKey"(arg0: string): boolean
public static "getComponentLocalizationKey"(arg0: $Component$Type): string
public static "getLocalizationKeys"(): $List<(string)>
public static "splitLocalizedStringLines"(arg0: string, ...arg1: (string)[]): (string)[]
public static "splitLocalizedLines"(arg0: string, ...arg1: (string)[]): ($Component)[]
get "localizationKeys"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalizationUtils$Type = ($LocalizationUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalizationUtils_ = $LocalizationUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$RangeSliderScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $RangeSliderScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Component$Type, arg1: double, arg2: double, arg3: double, arg4: $ConsumingSupplier$Type<(double), ($Component$Type)>, arg5: $Consumer$Type<(double)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RangeSliderScreen$Type = ($RangeSliderScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RangeSliderScreen_ = $RangeSliderScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/$PacketData" {
import {$Packet, $Packet$Type} from "packages/de/keksuccino/fancymenu/networking/$Packet"

export class $PacketData<T extends $Packet> {
 "identifier": string
 "packet": T

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketData$Type<T> = ($PacketData<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketData_<T> = $PacketData$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/$FileFilter" {
import {$File, $File$Type} from "packages/java/io/$File"

export interface $FileFilter {

 "checkFile"(arg0: $File$Type): boolean

(arg0: $File$Type): boolean
}

export namespace $FileFilter {
const RESOURCE_NAME_FILTER: $FileFilter
const IMAGE_FILE_FILTER: $FileFilter
const AUDIO_FILE_FILTER: $FileFilter
const VIDEO_FILE_FILTER: $FileFilter
const TEXT_FILE_FILTER: $FileFilter
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileFilter$Type = ($FileFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileFilter_ = $FileFilter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/button/$CycleButton$CycleButtonClickFeedback" {
import {$CycleButton, $CycleButton$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/button/$CycleButton"

export interface $CycleButton$CycleButtonClickFeedback<T> {

 "onClick"(arg0: T, arg1: $CycleButton$Type<(T)>): void

(arg0: T, arg1: $CycleButton$Type<(T)>): void
}

export namespace $CycleButton$CycleButtonClickFeedback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CycleButton$CycleButtonClickFeedback$Type<T> = ($CycleButton$CycleButtonClickFeedback<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CycleButton$CycleButtonClickFeedback_<T> = $CycleButton$CycleButtonClickFeedback$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/layout/$DisableLayoutAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $DisableLayoutAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisableLayoutAction$Type = ($DisableLayoutAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisableLayoutAction_ = $DisableLayoutAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityProperties" {
import {$PlayerModelPart, $PlayerModelPart$Type} from "packages/net/minecraft/world/entity/player/$PlayerModelPart"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PlayerEntityProperties {
 "xo": double
 "yo": double
 "zo": double
 "xRot": float
 "xRotO": float
 "yRot": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "xCloak": double
 "xCloakO": double
 "yCloak": double
 "yCloakO": double
 "zCloak": double
 "zCloakO": double
 "headZRot": float
 "leftArmXRot": float
 "leftArmYRot": float
 "leftArmZRot": float
 "rightArmXRot": float
 "rightArmYRot": float
 "rightArmZRot": float
 "leftLegXRot": float
 "leftLegYRot": float
 "leftLegZRot": float
 "rightLegXRot": float
 "rightLegYRot": float
 "rightLegZRot": float
 "bob": float
 "oBob": float
 "animationSpeedOld": float
 "animationSpeed": float
 "animationPosition": float
 "tickCount": integer
 "shouldSit": boolean
 "isBaby": boolean
 "crouching": boolean
 "spectator": boolean
 "invisible": boolean
 "glowing": boolean
 "hasParrotOnShoulder": boolean
 "shoulderParrotVariant": integer
 "parrotOnLeftShoulder": boolean
 "showDisplayName": boolean
 "displayName": $Component

constructor(arg0: boolean)

public "getType"(): $EntityType<(any)>
public "getDimensions"(): $EntityDimensions
public "getItemInHand"(arg0: $InteractionHand$Type): $ItemStack
public "isSpectator"(): boolean
public "isSlim"(): boolean
public "getEyeHeight"(arg0: $Pose$Type): float
public "setCapeTextureLocation"(arg0: $ResourceLocation$Type): void
public "setSkinTextureLocation"(arg0: $ResourceLocation$Type): void
public "getOffhandItem"(): $ItemStack
public "getUsedItemHand"(): $InteractionHand
public "hasPose"(arg0: $Pose$Type): boolean
public "getBedOrientation"(): $Direction
public "getMainArm"(): $HumanoidArm
public "isCrouching"(): boolean
public "isModelPartShown"(arg0: $PlayerModelPart$Type): boolean
public "getUseItemRemainingTicks"(): long
public "getSkinTextureLocation"(): $ResourceLocation
public "getCapeTextureLocation"(): $ResourceLocation
get "type"(): $EntityType<(any)>
get "dimensions"(): $EntityDimensions
get "spectator"(): boolean
get "slim"(): boolean
set "capeTextureLocation"(value: $ResourceLocation$Type)
set "skinTextureLocation"(value: $ResourceLocation$Type)
get "offhandItem"(): $ItemStack
get "usedItemHand"(): $InteractionHand
get "bedOrientation"(): $Direction
get "mainArm"(): $HumanoidArm
get "crouching"(): boolean
get "useItemRemainingTicks"(): long
get "skinTextureLocation"(): $ResourceLocation
get "capeTextureLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityProperties$Type = ($PlayerEntityProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityProperties_ = $PlayerEntityProperties$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/suggestions/$VariableCommandSuggestionsPacketCodec" {
import {$VariableCommandSuggestionsPacket, $VariableCommandSuggestionsPacket$Type} from "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/suggestions/$VariableCommandSuggestionsPacket"
import {$PacketCodec, $PacketCodec$Type} from "packages/de/keksuccino/fancymenu/networking/$PacketCodec"
import {$ClientTickEvent$Post, $ClientTickEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Post"

export class $VariableCommandSuggestionsPacketCodec extends $PacketCodec<($VariableCommandSuggestionsPacket)> {

constructor()

public "onClientTick"(arg0: $ClientTickEvent$Post$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariableCommandSuggestionsPacketCodec$Type = ($VariableCommandSuggestionsPacketCodec);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariableCommandSuggestionsPacketCodec_ = $VariableCommandSuggestionsPacketCodec$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListHeaderFooterEvent" {
import {$AbstractSelectionList, $AbstractSelectionList$Type} from "packages/net/minecraft/client/gui/components/$AbstractSelectionList"
import {$IMixinAbstractSelectionList, $IMixinAbstractSelectionList$Type} from "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinAbstractSelectionList"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderGuiListHeaderFooterEvent extends $EventBase {


public "getAccessor"(): $IMixinAbstractSelectionList
public "getList"(): $AbstractSelectionList<(any)>
public "isCancelable"(): boolean
public "getGraphics"(): $GuiGraphics
get "accessor"(): $IMixinAbstractSelectionList
get "list"(): $AbstractSelectionList<(any)>
get "cancelable"(): boolean
get "graphics"(): $GuiGraphics
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderGuiListHeaderFooterEvent$Type = ($RenderGuiListHeaderFooterEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderGuiListHeaderFooterEvent_ = $RenderGuiListHeaderFooterEvent$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$Min" {
import {$AbstractAggregation, $AbstractAggregation$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$AbstractAggregation"

export class $Min extends $AbstractAggregation {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Min$Type = ($Min);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Min_ = $Min$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/layout/$EnableLayoutAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $EnableLayoutAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnableLayoutAction$Type = ($EnableLayoutAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnableLayoutAction_ = $EnableLayoutAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinSuggestionsList" {
import {$Vec2, $Vec2$Type} from "packages/net/minecraft/world/phys/$Vec2"
import {$Rect2i, $Rect2i$Type} from "packages/net/minecraft/client/renderer/$Rect2i"

export interface $IMixinSuggestionsList {

 "getOffsetFancyMenu"(): integer
 "getRectFancyMenu"(): $Rect2i
 "getLastMouseFancyMenu"(): $Vec2
 "getCurrentFancyMenu"(): integer
 "setLastMouseFancyMenu"(arg0: $Vec2$Type): void
}

export namespace $IMixinSuggestionsList {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinSuggestionsList$Type = ($IMixinSuggestionsList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinSuggestionsList_ = $IMixinSuggestionsList$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathCompiler" {
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$Path, $Path$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path"

export class $PathCompiler {


public static "compile"(arg0: string, ...arg1: ($Predicate$Type)[]): $Path
public static "fail"(arg0: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathCompiler$Type = ($PathCompiler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathCompiler_ = $PathCompiler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/suggestions/$VariableCommandSuggestionsPacket" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Packet, $Packet$Type} from "packages/de/keksuccino/fancymenu/networking/$Packet"

export class $VariableCommandSuggestionsPacket extends $Packet {
 "variable_suggestions": $List<(string)>

constructor()

public "processPacket"(arg0: $ServerPlayer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariableCommandSuggestionsPacket$Type = ($VariableCommandSuggestionsPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariableCommandSuggestionsPacket_ = $VariableCommandSuggestionsPacket$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/editbox/$ExtendedEditBox$CharacterRenderFormatter" {
import {$ExtendedEditBox, $ExtendedEditBox$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/editbox/$ExtendedEditBox"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $ExtendedEditBox$CharacterRenderFormatter {

 "formatComponent"(arg0: $ExtendedEditBox$Type, arg1: $MutableComponent$Type, arg2: integer, arg3: character, arg4: string, arg5: string): $MutableComponent

(arg0: $ExtendedEditBox$Type, arg1: $MutableComponent$Type, arg2: integer, arg3: character, arg4: string, arg5: string): $MutableComponent
}

export namespace $ExtendedEditBox$CharacterRenderFormatter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedEditBox$CharacterRenderFormatter$Type = ($ExtendedEditBox$CharacterRenderFormatter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedEditBox$CharacterRenderFormatter_ = $ExtendedEditBox$CharacterRenderFormatter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinLevelLoadingScreen" {
import {$StoringChunkProgressListener, $StoringChunkProgressListener$Type} from "packages/net/minecraft/server/level/progress/$StoringChunkProgressListener"

export interface $IMixinLevelLoadingScreen {

 "getProgressListenerFancyMenu"(): $StoringChunkProgressListener

(): $StoringChunkProgressListener
}

export namespace $IMixinLevelLoadingScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinLevelLoadingScreen$Type = ($IMixinLevelLoadingScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinLevelLoadingScreen_ = $IMixinLevelLoadingScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathTanPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MathTanPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathTanPlaceholder$Type = ($MathTanPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathTanPlaceholder_ = $MathTanPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserString" {
import {$JSONParserMemory, $JSONParserMemory$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserMemory"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"

export class $JSONParserString extends $JSONParserMemory {
static readonly "EOI": byte

constructor(arg0: integer)

public "parse"(arg0: string): any
public "parse"<T>(arg0: string, arg1: $JsonReaderI$Type<(T)>): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONParserString$Type = ($JSONParserString);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONParserString_ = $JSONParserString$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/blocks/statements/$ElseExecutableBlock" {
import {$AbstractExecutableBlock, $AbstractExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$AbstractExecutableBlock"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"

export class $ElseExecutableBlock extends $AbstractExecutableBlock {
 "identifier": string

constructor()

public "getBlockType"(): string
public static "deserializeEmptyWithIdentifier"(arg0: $PropertyContainer$Type, arg1: string): $ElseExecutableBlock
get "blockType"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElseExecutableBlock$Type = ($ElseExecutableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElseExecutableBlock_ = $ElseExecutableBlock$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/$Actions" {
import {$DisableLayoutAction, $DisableLayoutAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/layout/$DisableLayoutAction"
import {$ReloadFancyMenuAction, $ReloadFancyMenuAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/other/$ReloadFancyMenuAction"
import {$EnterWorldAction, $EnterWorldAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/level/$EnterWorldAction"
import {$SendMessageAction, $SendMessageAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/other/$SendMessageAction"
import {$QuitGameAction, $QuitGameAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/other/$QuitGameAction"
import {$UpdateScreenAction, $UpdateScreenAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/screen/$UpdateScreenAction"
import {$OpenLinkAction, $OpenLinkAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/other/$OpenLinkAction"
import {$CloseScreenAction, $CloseScreenAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/screen/$CloseScreenAction"
import {$JoinServerAction, $JoinServerAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/level/$JoinServerAction"
import {$JoinLastWorldServerAction, $JoinLastWorldServerAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/level/$JoinLastWorldServerAction"
import {$RunButtonScriptAction, $RunButtonScriptAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/other/$RunButtonScriptAction"
import {$CopyToClipboardAction, $CopyToClipboardAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/other/$CopyToClipboardAction"
import {$ClearVariablesAction, $ClearVariablesAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/variables/$ClearVariablesAction"
import {$PasteToChatAction, $PasteToChatAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/other/$PasteToChatAction"
import {$DisconnectAction, $DisconnectAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/level/$DisconnectAction"
import {$EnableLayoutAction, $EnableLayoutAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/layout/$EnableLayoutAction"
import {$MimicButtonAction, $MimicButtonAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/other/$MimicButtonAction"
import {$EditMinecraftOptionAction, $EditMinecraftOptionAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/other/$EditMinecraftOptionAction"
import {$SetVariableAction, $SetVariableAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/variables/$SetVariableAction"
import {$ToggleLayoutAction, $ToggleLayoutAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/layout/$ToggleLayoutAction"
import {$OpenScreenAction, $OpenScreenAction$Type} from "packages/de/keksuccino/fancymenu/customization/action/actions/screen/$OpenScreenAction"

export class $Actions {
static readonly "SET_VARIABLE": $SetVariableAction
static readonly "CLEAR_VARIABLES": $ClearVariablesAction
static readonly "PASTE_TO_CHAT": $PasteToChatAction
static readonly "TOGGLE_LAYOUT": $ToggleLayoutAction
static readonly "ENABLE_LAYOUT": $EnableLayoutAction
static readonly "DISABLE_LAYOUT": $DisableLayoutAction
static readonly "SEND_MESSAGE": $SendMessageAction
static readonly "QUIT_GAME": $QuitGameAction
static readonly "JOIN_SERVER": $JoinServerAction
static readonly "ENTER_WORLD": $EnterWorldAction
static readonly "JOIN_LAST_WORLD_SERVER": $JoinLastWorldServerAction
static readonly "DISCONNECT": $DisconnectAction
static readonly "OPEN_SCREEN": $OpenScreenAction
static readonly "CLOSE_SCREEN": $CloseScreenAction
static readonly "UPDATE_SCREEN": $UpdateScreenAction
static readonly "OPEN_LINK": $OpenLinkAction
static readonly "RELOAD_FANCYMENU": $ReloadFancyMenuAction
static readonly "RUN_BUTTON_SCRIPT": $RunButtonScriptAction
static readonly "COPY_TO_CLIPBOARD": $CopyToClipboardAction
static readonly "MIMIC_BUTTON": $MimicButtonAction
static readonly "EDIT_MINECRAFT_OPTION": $EditMinecraftOptionAction

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Actions$Type = ($Actions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Actions_ = $Actions$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$CodeBlockContext" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$MarkdownTextFragment, $MarkdownTextFragment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment"

export class $MarkdownTextFragment$CodeBlockContext {
readonly "codeBlockFragments": $List<($MarkdownTextFragment)>
 "singleLine": boolean

constructor()

public "getBlockEnd"(): $MarkdownTextFragment
public "getBlockStart"(): $MarkdownTextFragment
get "blockEnd"(): $MarkdownTextFragment
get "blockStart"(): $MarkdownTextFragment
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTextFragment$CodeBlockContext$Type = ($MarkdownTextFragment$CodeBlockContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTextFragment$CodeBlockContext_ = $MarkdownTextFragment$CodeBlockContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$GpuInfoPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $GpuInfoPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getAlternativeIdentifiers"(): $List<(string)>
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "alternativeIdentifiers"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GpuInfoPlaceholder$Type = ($GpuInfoPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GpuInfoPlaceholder_ = $GpuInfoPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/image/$ImageElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $ImageElement extends $AbstractElement {
 "textureSupplier": $ResourceSupplier<($ITexture)>
 "repeat": boolean
 "nineSlice": boolean
 "nineSliceBorderX": integer
 "nineSliceBorderY": integer
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "restoreAspectRatio"(): void
public "getTextureResource"(): $ITexture
get "textureResource"(): $ITexture
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageElement$Type = ($ImageElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageElement_ = $ImageElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment" {
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$MarkdownTextFragment$CodeBlockContext, $MarkdownTextFragment$CodeBlockContext$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$CodeBlockContext"
import {$MarkdownTextFragment$Hyperlink, $MarkdownTextFragment$Hyperlink$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$Hyperlink"
import {$MarkdownRenderer$MarkdownLineAlignment, $MarkdownRenderer$MarkdownLineAlignment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer$MarkdownLineAlignment"
import {$MarkdownRenderer, $MarkdownRenderer$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$MarkdownTextLine, $MarkdownTextLine$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextLine"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$MarkdownTextFragment$HeadlineType, $MarkdownTextFragment$HeadlineType$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$HeadlineType"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$MarkdownTextFragment$QuoteContext, $MarkdownTextFragment$QuoteContext$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$QuoteContext"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $MarkdownTextFragment implements $Renderable, $GuiEventListener {
readonly "parent": $MarkdownRenderer
 "parentLine": $MarkdownTextLine
 "text": string
 "x": float
 "y": float
 "unscaledTextWidth": float
 "unscaledTextHeight": float
 "startOfRenderLine": boolean
 "naturalLineBreakAfter": boolean
 "autoLineBreakAfter": boolean
 "endOfWord": boolean
 "imageSupplier": $ResourceSupplier<($ITexture)>
 "separationLine": boolean
 "textColor": $DrawableColor
 "bold": boolean
 "italic": boolean
 "strikethrough": boolean
 "bulletListItemStart": boolean
 "bulletListLevel": integer
 "alignment": $MarkdownRenderer$MarkdownLineAlignment
 "hyperlink": $MarkdownTextFragment$Hyperlink
 "headlineType": $MarkdownTextFragment$HeadlineType
 "quoteContext": $MarkdownTextFragment$QuoteContext
 "codeBlockContext": $MarkdownTextFragment$CodeBlockContext
 "font": $ResourceLocation
 "hovered": boolean

constructor(arg0: $MarkdownRenderer$Type, arg1: string)

public "getRenderHeight"(): float
public "getRenderWidth"(): float
public "getTextRenderHeight"(): float
public "getTextHeight"(): float
public "getTextRenderX"(): float
public "getTextRenderY"(): float
public "getTextRenderWidth"(): float
public "getTextY"(): float
public "isMouseOver"(arg0: double, arg1: double): boolean
public "setFocused"(arg0: boolean): void
public "getScale"(): float
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "isFocused"(): boolean
public "getTextWidth"(): float
public "getTextX"(): float
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getRectangle"(): $ScreenRectangle
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "getTabOrderGroup"(): integer
get "renderHeight"(): float
get "renderWidth"(): float
get "textRenderHeight"(): float
get "textHeight"(): float
get "textRenderX"(): float
get "textRenderY"(): float
get "textRenderWidth"(): float
get "textY"(): float
set "focused"(value: boolean)
get "scale"(): float
get "focused"(): boolean
get "textWidth"(): float
get "textX"(): float
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTextFragment$Type = ($MarkdownTextFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTextFragment_ = $MarkdownTextFragment$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinServerList" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerData, $ServerData$Type} from "packages/net/minecraft/client/multiplayer/$ServerData"

export interface $IMixinServerList {

 "getServerListFancyMenu"(): $List<($ServerData)>

(): $List<($ServerData)>
}

export namespace $IMixinServerList {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinServerList$Type = ($IMixinServerList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinServerList_ = $IMixinServerList$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/level/$EnterWorldAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $EnterWorldAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnterWorldAction$Type = ($EnterWorldAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnterWorldAction_ = $EnterWorldAction$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$DefaultMapperOrdered" {
import {$JSONAwareEx, $JSONAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAwareEx"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $DefaultMapperOrdered extends $JsonReaderI<($JSONAwareEx)> {
readonly "base": $JsonReader


public "setValue"(arg0: any, arg1: string, arg2: any): void
public "createObject"(): any
public "addValue"(arg0: any, arg1: any): void
public "createArray"(): any
public "startObject"(arg0: string): $JsonReaderI<($JSONAwareEx)>
public "startArray"(arg0: string): $JsonReaderI<($JSONAwareEx)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultMapperOrdered$Type = ($DefaultMapperOrdered);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultMapperOrdered_ = $DefaultMapperOrdered$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/$IsSingleplayerRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsSingleplayerRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsSingleplayerRequirement$Type = ($IsSingleplayerRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsSingleplayerRequirement_ = $IsSingleplayerRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$AutoScalingScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $AutoScalingScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "allowDone"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AutoScalingScreen$Type = ($AutoScalingScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AutoScalingScreen_ = $AutoScalingScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerElementBuilder" {
import {$TickerEditorElement, $TickerEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerEditorElement"
import {$TickerElement, $TickerElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ClientTickEvent$Post, $ClientTickEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Post"
import {$TickerElement$TickerElementThreadController, $TickerElement$TickerElementThreadController$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerElement$TickerElementThreadController"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $TickerElementBuilder extends $ElementBuilder<($TickerElement), ($TickerEditorElement)> {
static "cachedThreadControllers": $List<($TickerElement$TickerElementThreadController)>
static "cachedOncePerSessionItems": $List<(string)>

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "onClientTickPost"(arg0: $ClientTickEvent$Post$Type): void
public "onModReload"(arg0: $ModReloadEvent$Type): void
public "wrapIntoEditorElement"(arg0: $TickerElement$Type, arg1: $LayoutEditorScreen$Type): $TickerEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickerElementBuilder$Type = ($TickerElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickerElementBuilder_ = $TickerElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/command/$VariableCommandPacket" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Packet, $Packet$Type} from "packages/de/keksuccino/fancymenu/networking/$Packet"

export class $VariableCommandPacket extends $Packet {
 "set": boolean
 "variable_name": string
 "set_to_value": string
 "feedback": boolean

constructor()

public "processPacket"(arg0: $ServerPlayer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariableCommandPacket$Type = ($VariableCommandPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariableCommandPacket_ = $VariableCommandPacket$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/cycle/$CommonCycles" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$CommonCycles$CycleEnabledDisabled, $CommonCycles$CycleEnabledDisabled$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$CommonCycles$CycleEnabledDisabled"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LocalizedEnumValueCycle, $LocalizedEnumValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedEnumValueCycle"
import {$CommonCycles$CycleOnOff, $CommonCycles$CycleOnOff$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$CommonCycles$CycleOnOff"

export class $CommonCycles {

constructor()

public static "cycleOrangeValue"<T>(arg0: string, arg1: $List$Type<(T)>): $LocalizedGenericValueCycle<(T)>
public static "cycleOrangeValue"<T>(arg0: string, arg1: $List$Type<(T)>, arg2: T): $LocalizedGenericValueCycle<(T)>
public static "cycle"<T>(arg0: string, arg1: $List$Type<(T)>): $LocalizedGenericValueCycle<(T)>
public static "cycle"<T>(arg0: string, arg1: $List$Type<(T)>, arg2: T): $LocalizedGenericValueCycle<(T)>
public static "cycleOnOff"(arg0: string, arg1: $CommonCycles$CycleOnOff$Type): $LocalizedEnumValueCycle<($CommonCycles$CycleOnOff)>
public static "cycleOnOff"(arg0: string): $LocalizedEnumValueCycle<($CommonCycles$CycleOnOff)>
public static "cycleOnOff"(arg0: string, arg1: boolean): $LocalizedEnumValueCycle<($CommonCycles$CycleOnOff)>
public static "cycleEnabledDisabled"(arg0: string, arg1: boolean): $LocalizedEnumValueCycle<($CommonCycles$CycleEnabledDisabled)>
public static "cycleEnabledDisabled"(arg0: string): $LocalizedEnumValueCycle<($CommonCycles$CycleEnabledDisabled)>
public static "cycleEnabledDisabled"(arg0: string, arg1: $CommonCycles$CycleEnabledDisabled$Type): $LocalizedEnumValueCycle<($CommonCycles$CycleEnabledDisabled)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonCycles$Type = ($CommonCycles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonCycles_ = $CommonCycles$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaDecoder$FmaMetadata" {
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FmaDecoder$FmaMetadata {

constructor()

public "getFrameTime"(): long
public "getLoopCount"(): integer
public "getFrameTimeForFrame"(arg0: integer, arg1: boolean): long
public "getCustomFrameTimes"(): $Map<(integer), (long)>
public "getCustomFrameTimesIntro"(): $Map<(integer), (long)>
public "getFrameTimeIntro"(): long
get "frameTime"(): long
get "loopCount"(): integer
get "customFrameTimes"(): $Map<(integer), (long)>
get "customFrameTimesIntro"(): $Map<(integer), (long)>
get "frameTimeIntro"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FmaDecoder$FmaMetadata$Type = ($FmaDecoder$FmaMetadata);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FmaDecoder$FmaMetadata_ = $FmaDecoder$FmaMetadata$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$AnchorPointOverlay$AnchorOverlayVisibilityMode" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$LocalizedCycleEnum, $LocalizedCycleEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedCycleEnum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AnchorPointOverlay$AnchorOverlayVisibilityMode extends $Enum<($AnchorPointOverlay$AnchorOverlayVisibilityMode)> implements $LocalizedCycleEnum<($AnchorPointOverlay$AnchorOverlayVisibilityMode)> {
static readonly "DISABLED": $AnchorPointOverlay$AnchorOverlayVisibilityMode
static readonly "ALWAYS": $AnchorPointOverlay$AnchorOverlayVisibilityMode
static readonly "DRAGGING": $AnchorPointOverlay$AnchorOverlayVisibilityMode
static readonly "KEYBIND": $AnchorPointOverlay$AnchorOverlayVisibilityMode


public "getName"(): string
public static "values"(): ($AnchorPointOverlay$AnchorOverlayVisibilityMode)[]
public static "valueOf"(arg0: string): $AnchorPointOverlay$AnchorOverlayVisibilityMode
public static "getByName"(arg0: string): $AnchorPointOverlay$AnchorOverlayVisibilityMode
public "getValueComponentStyle"(): $Style
public "getLocalizationKeyBase"(): string
public "getByNameInternal"(arg0: string): $AnchorPointOverlay$AnchorOverlayVisibilityMode
public "getValues"(): ($AnchorPointOverlay$AnchorOverlayVisibilityMode)[]
public "getCycleComponentStyle"(): $Style
public "cycle"(arg0: $AnchorPointOverlay$AnchorOverlayVisibilityMode$Type): $LocalizedGenericValueCycle<($AnchorPointOverlay$AnchorOverlayVisibilityMode)>
public "cycle"(): $LocalizedGenericValueCycle<($AnchorPointOverlay$AnchorOverlayVisibilityMode)>
public "getCycleComponent"(): $MutableComponent
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "valueComponentStyle"(): $Style
get "localizationKeyBase"(): string
get "cycleComponentStyle"(): $Style
get "cycleComponent"(): $MutableComponent
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnchorPointOverlay$AnchorOverlayVisibilityMode$Type = (("always") | ("dragging") | ("keybind") | ("disabled")) | ($AnchorPointOverlay$AnchorOverlayVisibilityMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnchorPointOverlay$AnchorOverlayVisibilityMode_ = $AnchorPointOverlay$AnchorOverlayVisibilityMode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/level/$JoinServerAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $JoinServerAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JoinServerAction$Type = ($JoinServerAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JoinServerAction_ = $JoinServerAction$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MPAgressive" {
import {$JStylerObj$MustProtect, $JStylerObj$MustProtect$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MustProtect"

export class $JStylerObj$MPAgressive implements $JStylerObj$MustProtect {


public "mustBeProtect"(arg0: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JStylerObj$MPAgressive$Type = ($JStylerObj$MPAgressive);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JStylerObj$MPAgressive_ = $JStylerObj$MPAgressive$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/$HighlightPlaceholdersFormattingRule" {
import {$TextEditorScreen, $TextEditorScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorScreen"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"
import {$TextEditorLine, $TextEditorLine$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorLine"

export class $HighlightPlaceholdersFormattingRule extends $TextEditorFormattingRule {

constructor()

public "resetRule"(arg0: $TextEditorScreen$Type): void
public "getStyle"(arg0: character, arg1: integer, arg2: integer, arg3: $TextEditorLine$Type, arg4: integer, arg5: $TextEditorScreen$Type): $Style
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HighlightPlaceholdersFormattingRule$Type = ($HighlightPlaceholdersFormattingRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HighlightPlaceholdersFormattingRule_ = $HighlightPlaceholdersFormattingRule$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layer/$ScreenCustomizationLayer$ThreadCaller" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ScreenCustomizationLayer$ThreadCaller {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCustomizationLayer$ThreadCaller$Type = ($ScreenCustomizationLayer$ThreadCaller);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCustomizationLayer$ThreadCaller_ = $ScreenCustomizationLayer$ThreadCaller$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollbar/$ScrollBar$ScrollBarDirection" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ScrollBar$ScrollBarDirection extends $Enum<($ScrollBar$ScrollBarDirection)> {
static readonly "HORIZONTAL": $ScrollBar$ScrollBarDirection
static readonly "VERTICAL": $ScrollBar$ScrollBarDirection


public static "values"(): ($ScrollBar$ScrollBarDirection)[]
public static "valueOf"(arg0: string): $ScrollBar$ScrollBarDirection
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollBar$ScrollBarDirection$Type = (("horizontal") | ("vertical")) | ($ScrollBar$ScrollBarDirection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollBar$ScrollBarDirection_ = $ScrollBar$ScrollBarDirection$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/screens/popup/$PopupHandler" {
import {$ScreenEvent$Render$Post, $ScreenEvent$Render$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Render$Post"
import {$Popup, $Popup$Type} from "packages/de/keksuccino/konkrete/gui/screens/popup/$Popup"

export class $PopupHandler {

constructor()

public static "init"(): void
public static "onRender"(arg0: $ScreenEvent$Render$Post$Type): void
public static "isPopupActive"(): boolean
public static "displayPopup"(arg0: $Popup$Type): void
public static "getCurrentPopup"(): $Popup
get "popupActive"(): boolean
get "currentPopup"(): $Popup
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PopupHandler$Type = ($PopupHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PopupHandler_ = $PopupHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/closegui/$CloseGuiCommandPacketCodec" {
import {$PacketCodec, $PacketCodec$Type} from "packages/de/keksuccino/fancymenu/networking/$PacketCodec"
import {$CloseGuiCommandPacket, $CloseGuiCommandPacket$Type} from "packages/de/keksuccino/fancymenu/networking/packets/commands/closegui/$CloseGuiCommandPacket"

export class $CloseGuiCommandPacketCodec extends $PacketCodec<($CloseGuiCommandPacket)> {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloseGuiCommandPacketCodec$Type = ($CloseGuiCommandPacketCodec);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloseGuiCommandPacketCodec_ = $CloseGuiCommandPacketCodec$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/text/$PlainText" {
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PlainText implements $IText {


public static "of"(arg0: $InputStream$Type): $PlainText
public static "of"(arg0: $InputStream$Type, arg1: string, arg2: $PlainText$Type): $PlainText
public "close"(): void
public static "location"(arg0: $ResourceLocation$Type): $PlainText
public static "location"(arg0: $ResourceLocation$Type, arg1: $PlainText$Type): $PlainText
public "open"(): $InputStream
public static "local"(arg0: $File$Type): $PlainText
public static "local"(arg0: $File$Type, arg1: $PlainText$Type): $PlainText
public "isReady"(): boolean
public "isClosed"(): boolean
public static "web"(arg0: string): $PlainText
public static "web"(arg0: string, arg1: $PlainText$Type): $PlainText
public "isLoadingFailed"(): boolean
public "isLoadingCompleted"(): boolean
public "getTextLines"(): $List<(string)>
public "waitForLoadingCompletedOrFailed"(arg0: long): void
public "waitForReady"(arg0: long): void
get "ready"(): boolean
get "closed"(): boolean
get "loadingFailed"(): boolean
get "loadingCompleted"(): boolean
get "textLines"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlainText$Type = ($PlainText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlainText_ = $PlainText$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinClientLanguage" {
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $IMixinClientLanguage {

 "getStorageFancyMenu"(): $Map<(string), (string)>

(): $Map<(string), (string)>
}

export namespace $IMixinClientLanguage {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinClientLanguage$Type = ($IMixinClientLanguage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinClientLanguage_ = $IMixinClientLanguage$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextBuilder" {
import {$MarkdownTextFragment$HeadlineType, $MarkdownTextFragment$HeadlineType$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$HeadlineType"

export class $MarkdownTextBuilder {

constructor()

public "addLocalizedHeadline"(arg0: $MarkdownTextFragment$HeadlineType$Type, arg1: string, ...arg2: (any)[]): $MarkdownTextBuilder
public "addEmptyLine"(): $MarkdownTextBuilder
public "addLocalizedLine"(arg0: string, ...arg1: (any)[]): $MarkdownTextBuilder
public "addHeadline"(arg0: $MarkdownTextFragment$HeadlineType$Type, arg1: string): $MarkdownTextBuilder
public "toString"(): string
public static "create"(): $MarkdownTextBuilder
public "build"(): string
public "addLine"(arg0: string): $MarkdownTextBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTextBuilder$Type = ($MarkdownTextBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTextBuilder_ = $MarkdownTextBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$GuiScalePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $GuiScalePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuiScalePlaceholder$Type = ($GuiScalePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuiScalePlaceholder_ = $GuiScalePlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/groups/$FileTypeGroups" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ImageFileType, $ImageFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$ImageFileType"
import {$FileTypeGroup, $FileTypeGroup$Type} from "packages/de/keksuccino/fancymenu/util/file/type/groups/$FileTypeGroup"
import {$AudioFileType, $AudioFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$AudioFileType"
import {$VideoFileType, $VideoFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$VideoFileType"
import {$TextFileType, $TextFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$TextFileType"

export class $FileTypeGroups {
static readonly "IMAGE_GROUP_COMPONENT": $Component
static readonly "AUDIO_GROUP_COMPONENT": $Component
static readonly "VIDEO_GROUP_COMPONENT": $Component
static readonly "TEXT_GROUP_COMPONENT": $Component
static readonly "IMAGE_TYPES": $FileTypeGroup<($ImageFileType)>
static readonly "AUDIO_TYPES": $FileTypeGroup<($AudioFileType)>
static readonly "VIDEO_TYPES": $FileTypeGroup<($VideoFileType)>
static readonly "TEXT_TYPES": $FileTypeGroup<($TextFileType)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileTypeGroups$Type = ($FileTypeGroups);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileTypeGroups_ = $FileTypeGroups$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/$ExtendedEditBox" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IAdvancedWidgetBase, $IAdvancedWidgetBase$Type} from "packages/de/keksuccino/konkrete/gui/content/handling/$IAdvancedWidgetBase"
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/konkrete/input/$CharacterFilter"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CharData, $CharData$Type} from "packages/de/keksuccino/konkrete/input/$CharData"
import {$KeyboardData, $KeyboardData$Type} from "packages/de/keksuccino/konkrete/input/$KeyboardData"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$EditBox, $EditBox$Type} from "packages/net/minecraft/client/gui/components/$EditBox"

export class $ExtendedEditBox extends $EditBox implements $IAdvancedWidgetBase {
static readonly "BACKWARDS": integer
static readonly "FORWARDS": integer
static readonly "DEFAULT_TEXT_COLOR": integer
readonly "font": $Font
 "displayPos": integer
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: $Component$Type, arg6: boolean)
constructor(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: $EditBox$Type, arg6: $Component$Type, arg7: boolean)

public "onCharTyped"(arg0: $CharData$Type): void
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "setCharacterFilter"(arg0: $CharacterFilter$Type): void
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getCharacterFilter"(): $CharacterFilter
public "charTyped"(arg0: character, arg1: integer): boolean
public "insertText"(arg0: string): void
public "onKeyPress"(arg0: $KeyboardData$Type): void
public "onKeyReleased"(arg0: $KeyboardData$Type): void
public "onTick"(): void
set "characterFilter"(value: $CharacterFilter$Type)
get "characterFilter"(): $CharacterFilter
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedEditBox$Type = ($ExtendedEditBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedEditBox_ = $ExtendedEditBox$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinScreen" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"

export interface $IMixinScreen {

 "invokeRemoveWidgetFancyMenu"(arg0: $GuiEventListener$Type): void
 "get_initialized_FancyMenu"(): boolean
 "getRenderablesFancyMenu"(): $List<($Renderable)>
 "getNarratablesFancyMenu"(): $List<($NarratableEntry)>
 "getChildrenFancyMenu"(): $List<($GuiEventListener)>
}

export namespace $IMixinScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinScreen$Type = ($IMixinScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinScreen_ = $IMixinScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/$ButtonScriptHandler$ButtonScript" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ActionInstance, $ActionInstance$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ActionInstance"

export class $ButtonScriptHandler$ButtonScript {
readonly "scriptFile": $File
readonly "actions": $List<($ActionInstance)>

constructor(arg0: $File$Type)

public "runScript"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ButtonScriptHandler$ButtonScript$Type = ($ButtonScriptHandler$ButtonScript);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ButtonScriptHandler$ButtonScript_ = $ButtonScriptHandler$ButtonScript$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/top/$TitleScreenForgeTopDeepEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractDeepEditorElement, $AbstractDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepEditorElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $TitleScreenForgeTopDeepEditorElement extends $AbstractDeepEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractDeepElement$Type, arg1: $LayoutEditorScreen$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenForgeTopDeepEditorElement$Type = ($TitleScreenForgeTopDeepEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenForgeTopDeepEditorElement_ = $TitleScreenForgeTopDeepEditorElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathTokenAppender" {
import {$PathToken, $PathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken"

export interface $PathTokenAppender {

 "appendPathToken"(arg0: $PathToken$Type): $PathTokenAppender

(arg0: $PathToken$Type): $PathTokenAppender
}

export namespace $PathTokenAppender {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathTokenAppender$Type = ($PathTokenAppender);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathTokenAppender_ = $PathTokenAppender$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathCosPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MathCosPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathCosPlaceholder$Type = ($MathCosPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathCosPlaceholder_ = $MathCosPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/properties/$PropertiesSet" {
import {$PropertiesSection, $PropertiesSection$Type} from "packages/de/keksuccino/konkrete/properties/$PropertiesSection"
import {$List, $List$Type} from "packages/java/util/$List"

export class $PropertiesSet {

constructor(arg0: string)

public "getProperties"(): $List<($PropertiesSection)>
public "addProperties"(arg0: $PropertiesSection$Type): void
public "getPropertiesType"(): string
public "getPropertiesOfType"(arg0: string): $List<($PropertiesSection)>
get "properties"(): $List<($PropertiesSection)>
get "propertiesType"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PropertiesSet$Type = ($PropertiesSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PropertiesSet_ = $PropertiesSet$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/$RenderableResource" {
import {$Resource, $Resource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$Resource"
import {$AspectRatio, $AspectRatio$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$AspectRatio"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $RenderableResource extends $Resource {

 "reset"(): void
 "getAspectRatio"(): $AspectRatio
 "getWidth"(): integer
 "getHeight"(): integer
 "getResourceLocation"(): $ResourceLocation
 "open"(): $InputStream
 "isReady"(): boolean
 "isClosed"(): boolean
 "waitForLoadingCompletedOrFailed"(arg0: long): void
 "waitForReady"(arg0: long): void
 "isLoadingFailed"(): boolean
 "isLoadingCompleted"(): boolean
 "close"(): void
}

export namespace $RenderableResource {
const MISSING_TEXTURE_LOCATION: $ResourceLocation
const FULLY_TRANSPARENT_TEXTURE: $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderableResource$Type = ($RenderableResource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderableResource_ = $RenderableResource$Type;
}}
declare module "packages/de/keksuccino/melody/platform/services/$IPlatformHelper" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export interface $IPlatformHelper {

 "isOnClient"(): boolean
 "getLoadedModIds"(): $List<(string)>
 "getKeyMappingKey"(arg0: $KeyMapping$Type): $InputConstants$Key
 "getLoaderVersion"(): string
 "getEnvironmentName"(): string
 "isDevelopmentEnvironment"(): boolean
 "getPlatformName"(): string
 "getModVersion"(arg0: string): string
 "getPlatformDisplayName"(): string
 "isModLoaded"(arg0: string): boolean
}

export namespace $IPlatformHelper {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPlatformHelper$Type = ($IPlatformHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPlatformHelper_ = $IPlatformHelper$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaDecoder" {
import {$FmaDecoder$FmaMetadata, $FmaDecoder$FmaMetadata$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaDecoder$FmaMetadata"
import {$Closeable, $Closeable$Type} from "packages/java/io/$Closeable"
import {$File, $File$Type} from "packages/java/io/$File"
import {$BufferedImage, $BufferedImage$Type} from "packages/java/awt/image/$BufferedImage"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"

export class $FmaDecoder implements $Closeable {

constructor()

public "read"(arg0: $File$Type): void
public "read"(arg0: $InputStream$Type): void
public "close"(): void
public "getFirstFrame"(): $InputStream
public "getBackgroundImage"(): $InputStream
public "hasIntroFrames"(): boolean
public "getIntroFrame"(arg0: integer): $InputStream
public "getIntroFrameCount"(): integer
public "getFrame"(arg0: integer): $InputStream
public "getFrameCount"(): integer
public "getMetadata"(): $FmaDecoder$FmaMetadata
public "getFirstFrameAsBufferedImage"(): $BufferedImage
get "firstFrame"(): $InputStream
get "backgroundImage"(): $InputStream
get "introFrameCount"(): integer
get "frameCount"(): integer
get "metadata"(): $FmaDecoder$FmaMetadata
get "firstFrameAsBufferedImage"(): $BufferedImage
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FmaDecoder$Type = ($FmaDecoder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FmaDecoder_ = $FmaDecoder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$HeadlineType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $MarkdownTextFragment$HeadlineType extends $Enum<($MarkdownTextFragment$HeadlineType)> {
static readonly "NONE": $MarkdownTextFragment$HeadlineType
static readonly "BIG": $MarkdownTextFragment$HeadlineType
static readonly "BIGGER": $MarkdownTextFragment$HeadlineType
static readonly "BIGGEST": $MarkdownTextFragment$HeadlineType


public static "values"(): ($MarkdownTextFragment$HeadlineType)[]
public static "valueOf"(arg0: string): $MarkdownTextFragment$HeadlineType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTextFragment$HeadlineType$Type = (("big") | ("biggest") | ("bigger") | ("none")) | ($MarkdownTextFragment$HeadlineType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTextFragment$HeadlineType_ = $MarkdownTextFragment$HeadlineType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$ElementRegistry" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"

export class $ElementRegistry {

constructor()

public static "register"(arg0: $ElementBuilder$Type<(any), (any)>): void
public static "getBuilder"(arg0: string): $ElementBuilder<(any), (any)>
public static "hasBuilder"(arg0: string): boolean
public static "getBuilders"(): $List<($ElementBuilder<(any), (any)>)>
get "builders"(): $List<($ElementBuilder<(any), (any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementRegistry$Type = ($ElementRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementRegistry_ = $ElementRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/variables/$Variable" {
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"

export class $Variable {

constructor(arg0: string)

public "getName"(): string
public "getValue"(): string
public "setValue"(arg0: string): void
public static "deserialize"(arg0: $PropertyContainer$Type): $Variable
public "setResetOnLaunch"(arg0: boolean): void
public "isResetOnLaunch"(): boolean
public "serialize"(): $PropertyContainer
get "name"(): string
get "value"(): string
set "value"(value: string)
set "resetOnLaunch"(value: boolean)
get "resetOnLaunch"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Variable$Type = ($Variable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Variable_ = $Variable$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/blocks/$ExecutableBlockDeserializer" {
import {$AbstractExecutableBlock, $AbstractExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$AbstractExecutableBlock"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ExecutableBlockDeserializer {

constructor()

public static "deserializeEmptyWithTypeAndIdentifier"(arg0: $PropertyContainer$Type, arg1: string, arg2: string): $AbstractExecutableBlock
public static "deserializeAll"(arg0: $PropertyContainer$Type): $List<($AbstractExecutableBlock)>
public static "deserializeWithIdentifier"(arg0: $PropertyContainer$Type, arg1: string): $AbstractExecutableBlock
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExecutableBlockDeserializer$Type = ($ExecutableBlockDeserializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExecutableBlockDeserializer_ = $ExecutableBlockDeserializer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/$FileType" {
import {$ResourceSource, $ResourceSource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSource"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FileMediaType, $FileMediaType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileMediaType"
import {$FileCodec, $FileCodec$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileCodec"

export class $FileType<T> {


public "toString"(): string
public "getDisplayName"(): $Component
public "getExtensions"(): $List<(string)>
public "isFileTypeWebAdvanced"(arg0: string): boolean
public "setCustomDisplayName"(arg0: $Component$Type): $FileType<(T)>
public "isFileTypeLocal"(arg0: $File$Type): boolean
public "isFileTypeWeb"(arg0: string): boolean
public "isFileType"(arg0: $ResourceSource$Type, arg1: boolean): boolean
public "isFileTypeLocation"(arg0: $ResourceLocation$Type): boolean
public "getMimeType"(): string
public "setLocalAllowed"(arg0: boolean): $FileType<(T)>
public "setWebAllowed"(arg0: boolean): $FileType<(T)>
public "isWebAllowed"(): boolean
public "getMediaType"(): $FileMediaType
public "isLocationAllowed"(): boolean
public "setLocationAllowed"(arg0: boolean): $FileType<(T)>
public "isLocalAllowed"(): boolean
public "setCodec"(arg0: $FileCodec$Type<(T)>): $FileType<(T)>
public "removeExtension"(arg0: string): $FileType<(T)>
public "addExtension"(arg0: string): $FileType<(T)>
public "getCodec"(): $FileCodec<(T)>
get "displayName"(): $Component
get "extensions"(): $List<(string)>
set "customDisplayName"(value: $Component$Type)
get "mimeType"(): string
set "localAllowed"(value: boolean)
set "webAllowed"(value: boolean)
get "webAllowed"(): boolean
get "mediaType"(): $FileMediaType
get "locationAllowed"(): boolean
set "locationAllowed"(value: boolean)
get "localAllowed"(): boolean
set "codec"(value: $FileCodec$Type<(T)>)
get "codec"(): $FileCodec<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileType$Type<T> = ($FileType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileType_<T> = $FileType$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollbar/$ScrollBar$ScrollBarDirection" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ScrollBar$ScrollBarDirection extends $Enum<($ScrollBar$ScrollBarDirection)> {
static readonly "HORIZONTAL": $ScrollBar$ScrollBarDirection
static readonly "VERTICAL": $ScrollBar$ScrollBarDirection


public static "values"(): ($ScrollBar$ScrollBarDirection)[]
public static "valueOf"(arg0: string): $ScrollBar$ScrollBarDirection
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollBar$ScrollBarDirection$Type = (("horizontal") | ("vertical")) | ($ScrollBar$ScrollBarDirection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollBar$ScrollBarDirection_ = $ScrollBar$ScrollBarDirection$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$UnixTimestampPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $UnixTimestampPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UnixTimestampPlaceholder$Type = ($UnixTimestampPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UnixTimestampPlaceholder_ = $UnixTimestampPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserReader" {
import {$JSONParserStream, $JSONParserStream$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserStream"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$Reader, $Reader$Type} from "packages/java/io/$Reader"

export class $JSONParserReader extends $JSONParserStream {
static readonly "EOI": byte

constructor(arg0: integer)

public "parse"<T>(arg0: $Reader$Type, arg1: $JsonReaderI$Type<(T)>): T
public "parse"(arg0: $Reader$Type): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONParserReader$Type = ($JSONParserReader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONParserReader_ = $JSONParserReader$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/cpu/$JvmCpuUsagePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $JvmCpuUsagePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JvmCpuUsagePlaceholder$Type = ($JvmCpuUsagePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JvmCpuUsagePlaceholder_ = $JvmCpuUsagePlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/operator/$Operator" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Operator {
static readonly "PRECEDENCE_ADDITION": integer
static readonly "PRECEDENCE_SUBTRACTION": integer
static readonly "PRECEDENCE_MULTIPLICATION": integer
static readonly "PRECEDENCE_DIVISION": integer
static readonly "PRECEDENCE_MODULO": integer
static readonly "PRECEDENCE_POWER": integer
static readonly "PRECEDENCE_UNARY_MINUS": integer
static readonly "PRECEDENCE_UNARY_PLUS": integer
static readonly "ALLOWED_OPERATOR_CHARS": (character)[]

constructor(arg0: string, arg1: integer, arg2: boolean, arg3: integer)

public "apply"(...arg0: (double)[]): double
public "getSymbol"(): string
public "getPrecedence"(): integer
public "isLeftAssociative"(): boolean
public "getNumOperands"(): integer
public static "isAllowedOperatorChar"(arg0: character): boolean
get "symbol"(): string
get "precedence"(): integer
get "leftAssociative"(): boolean
get "numOperands"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Operator$Type = ($Operator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Operator_ = $Operator$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/system/$FileExistsRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $FileExistsRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileExistsRequirement$Type = ($FileExistsRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileExistsRequirement_ = $FileExistsRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$SubMenuContextMenuEntry" {
import {$ContextMenu$ClickableContextMenuEntry, $ContextMenu$ClickableContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ContextMenu$SubMenuOpeningSide, $ContextMenu$SubMenuOpeningSide$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$SubMenuOpeningSide"
import {$ContextMenu$ClickableContextMenuEntry$ClickAction, $ContextMenu$ClickableContextMenuEntry$ClickAction$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry$ClickAction"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ContextMenu$Supplier, $ContextMenu$Supplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$Supplier"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ContextMenu$SubMenuContextMenuEntry extends $ContextMenu$ClickableContextMenuEntry<($ContextMenu$SubMenuContextMenuEntry)> {

constructor(arg0: string, arg1: $ContextMenu$Type, arg2: $Component$Type, arg3: $ContextMenu$Type)

public "copy"(): $ContextMenu$SubMenuContextMenuEntry
public "getSubMenuOpeningSide"(): $ContextMenu$SubMenuOpeningSide
public "setSubMenuOpeningSide"(arg0: $ContextMenu$SubMenuOpeningSide$Type): $ContextMenu$SubMenuContextMenuEntry
public "setClickAction"(arg0: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type): $ContextMenu$SubMenuContextMenuEntry
public "openSubMenu"(arg0: $List$Type<(string)>): void
public "openSubMenu"(): void
public "setSubContextMenu"(arg0: $ContextMenu$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getSubContextMenu"(): $ContextMenu
public "getMinWidth"(): float
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "setShortcutTextSupplier"(arg0: $ContextMenu$Supplier$Type<($Component$Type)>): $ContextMenu$SubMenuContextMenuEntry
get "subMenuOpeningSide"(): $ContextMenu$SubMenuOpeningSide
set "subMenuOpeningSide"(value: $ContextMenu$SubMenuOpeningSide$Type)
set "clickAction"(value: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type)
set "subContextMenu"(value: $ContextMenu$Type)
get "subContextMenu"(): $ContextMenu
get "minWidth"(): float
set "shortcutTextSupplier"(value: $ContextMenu$Supplier$Type<($Component$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$SubMenuContextMenuEntry$Type = ($ContextMenu$SubMenuContextMenuEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$SubMenuContextMenuEntry_ = $ContextMenu$SubMenuContextMenuEntry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/$GameDirectoryUtils" {
import {$File, $File$Type} from "packages/java/io/$File"

export class $GameDirectoryUtils {

constructor()

public static "getGameDirectory"(): $File
public static "getAbsoluteGameDirectoryPath"(arg0: string): string
public static "getPathWithoutGameDirectory"(arg0: string): string
public static "isExistingGameDirectoryPath"(arg0: string): boolean
get "gameDirectory"(): $File
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GameDirectoryUtils$Type = ($GameDirectoryUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GameDirectoryUtils_ = $GameDirectoryUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer" {
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$LoadingRequirementGroup, $LoadingRequirementGroup$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementGroup"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$ValuePlaceholderHolder, $ValuePlaceholderHolder$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ValuePlaceholderHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LoadingRequirementGroup$GroupMode, $LoadingRequirementGroup$GroupMode$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementGroup$GroupMode"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LoadingRequirementContainer implements $ValuePlaceholderHolder {
 "identifier": string

constructor()

public "equals"(arg0: any): boolean
public "copy"(arg0: boolean): $LoadingRequirementContainer
public static "stackContainers"(...arg0: ($LoadingRequirementContainer$Type)[]): $LoadingRequirementContainer
public "serializeToExistingPropertyContainer"(arg0: $PropertyContainer$Type): void
public "addGroup"(arg0: $LoadingRequirementGroup$Type): boolean
public "addValuePlaceholder"(arg0: string, arg1: $Supplier$Type<(string)>): void
public "removeGroup"(arg0: $LoadingRequirementGroup$Type): boolean
public "createAndAddGroup"(arg0: string, arg1: $LoadingRequirementGroup$GroupMode$Type): $LoadingRequirementGroup
public "removeInstance"(arg0: $LoadingRequirementInstance$Type): boolean
public "groupExists"(arg0: string): boolean
public "serialize"(): $PropertyContainer
public static "deserializeAll"(arg0: $PropertyContainer$Type): $List<($LoadingRequirementContainer)>
public "forceRequirementsMet"(arg0: boolean): $LoadingRequirementContainer
public "removeGroupByIdentifier"(arg0: string): boolean
public "forceRequirementsNotMet"(arg0: boolean): $LoadingRequirementContainer
public "getValuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
public "requirementsMet"(): boolean
public "addInstance"(arg0: $LoadingRequirementInstance$Type): boolean
public "getGroup"(arg0: string): $LoadingRequirementGroup
public "getGroups"(): $List<($LoadingRequirementGroup)>
public static "deserializeWithIdentifier"(arg0: string, arg1: $PropertyContainer$Type): $LoadingRequirementContainer
public static "deserializeToSingleContainer"(arg0: $PropertyContainer$Type): $LoadingRequirementContainer
public "getInstances"(): $List<($LoadingRequirementInstance)>
get "valuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
get "groups"(): $List<($LoadingRequirementGroup)>
get "instances"(): $List<($LoadingRequirementInstance)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadingRequirementContainer$Type = ($LoadingRequirementContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadingRequirementContainer_ = $LoadingRequirementContainer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$EditorElementBorderDisplay$DisplayPosition, $EditorElementBorderDisplay$DisplayPosition$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay$DisplayPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $EditorElementBorderDisplay implements $Renderable {
readonly "editorElement": $AbstractEditorElement
 "font": $Font
readonly "defaultPosition": $EditorElementBorderDisplay$DisplayPosition
readonly "alternativePositions": $List<($EditorElementBorderDisplay$DisplayPosition)>
 "currentPosition": $EditorElementBorderDisplay$DisplayPosition
 "textShadow": boolean

constructor(arg0: $AbstractEditorElement$Type, arg1: $EditorElementBorderDisplay$DisplayPosition$Type, ...arg2: ($EditorElementBorderDisplay$DisplayPosition$Type)[])

public "getWidth"(): integer
public "getHeight"(): integer
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "clearLines"(): void
public "addLine"(arg0: string, arg1: $Supplier$Type<($Component$Type)>): void
public "removeLine"(arg0: string): void
public "hasLine"(arg0: string): boolean
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditorElementBorderDisplay$Type = ($EditorElementBorderDisplay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditorElementBorderDisplay_ = $EditorElementBorderDisplay$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/$Elements" {
import {$SlideshowElementBuilder, $SlideshowElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slideshow/$SlideshowElementBuilder"
import {$TextElementBuilder, $TextElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextElementBuilder"
import {$TextElementBuilder as $TextElementBuilder$0, $TextElementBuilder$Type as $TextElementBuilder$0$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/text/v2/$TextElementBuilder"
import {$SplashTextElementBuilder, $SplashTextElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/splash/$SplashTextElementBuilder"
import {$CursorElementBuilder, $CursorElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/cursor/$CursorElementBuilder"
import {$ImageElementBuilder, $ImageElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/image/$ImageElementBuilder"
import {$MusicControllerElementBuilder, $MusicControllerElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/musiccontroller/$MusicControllerElementBuilder"
import {$PlayerEntityElementBuilder, $PlayerEntityElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/$PlayerEntityElementBuilder"
import {$InputFieldElementBuilder, $InputFieldElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldElementBuilder"
import {$SliderElementBuilder, $SliderElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v1/$SliderElementBuilder"
import {$SliderElementBuilder as $SliderElementBuilder$0, $SliderElementBuilder$Type as $SliderElementBuilder$0$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v2/$SliderElementBuilder"
import {$ProgressBarElementBuilder, $ProgressBarElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarElementBuilder"
import {$ShapeElementBuilder, $ShapeElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/shape/$ShapeElementBuilder"
import {$TickerElementBuilder, $TickerElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerElementBuilder"
import {$AudioElementBuilder, $AudioElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioElementBuilder"
import {$ButtonElementBuilder, $ButtonElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonElementBuilder"
import {$AnimationElementBuilder, $AnimationElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/animation/$AnimationElementBuilder"

export class $Elements {
static readonly "BUTTON": $ButtonElementBuilder
static readonly "INPUT_FIELD": $InputFieldElementBuilder
/**
 * 
 * @deprecated
 */
static readonly "SLIDER_V1": $SliderElementBuilder
static readonly "SLIDER_V2": $SliderElementBuilder$0
/**
 * 
 * @deprecated
 */
static readonly "TEXT_V1": $TextElementBuilder
static readonly "TEXT_V2": $TextElementBuilder$0
static readonly "TICKER": $TickerElementBuilder
static readonly "PLAYER_ENTITY": $PlayerEntityElementBuilder
static readonly "IMAGE": $ImageElementBuilder
static readonly "SPLASH_TEXT": $SplashTextElementBuilder
static readonly "ANIMATION": $AnimationElementBuilder
static readonly "SLIDESHOW": $SlideshowElementBuilder
static readonly "SHAPE": $ShapeElementBuilder
static readonly "CURSOR": $CursorElementBuilder
static readonly "PROGRESS_BAR": $ProgressBarElementBuilder
static readonly "AUDIO_V2": $AudioElementBuilder
static readonly "MUSIC_CONTROLLER": $MusicControllerElementBuilder

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Elements$Type = ($Elements);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Elements_ = $Elements$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/$Layout$OrderedElementCollection" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $Layout$OrderedElementCollection {
 "foregroundElements": $List<($AbstractElement)>
 "backgroundElements": $List<($AbstractElement)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Layout$OrderedElementCollection$Type = ($Layout$OrderedElementCollection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Layout$OrderedElementCollection_ = $Layout$OrderedElementCollection$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$ProgressBarElement, $ProgressBarElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $ProgressBarEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getElement"(): $ProgressBarElement
get "element"(): $ProgressBarElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProgressBarEditorElement$Type = ($ProgressBarEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProgressBarEditorElement_ = $ProgressBarEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/cycle/$IValueCycle" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $IValueCycle<T> {

 "next"(): T
 "current"(): T
 "setCurrentValueByIndex"(arg0: integer): $IValueCycle<(T)>
 "setCurrentValueByIndex"(arg0: integer, arg1: boolean): $IValueCycle<(T)>
 "clearCycleListeners"(): $IValueCycle<(T)>
 "addCycleListener"(arg0: $Consumer$Type<(T)>): $IValueCycle<(T)>
 "setCurrentValue"(arg0: T): $IValueCycle<(T)>
 "setCurrentValue"(arg0: T, arg1: boolean): $IValueCycle<(T)>
 "removeValue"(arg0: T): $IValueCycle<(T)>
 "getValues"(): $List<(T)>
}

export namespace $IValueCycle {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IValueCycle$Type<T> = ($IValueCycle<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IValueCycle_<T> = $IValueCycle$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/top/$TitleScreenForgeTopDeepElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TitleScreenForgeTopDeepElement extends $AbstractDeepElement {
 "deepElementHidden": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $DeepElementBuilder$Type<(any), (any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenForgeTopDeepElement$Type = ($TitleScreenForgeTopDeepElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenForgeTopDeepElement_ = $TitleScreenForgeTopDeepElement$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/openal/$ALAudioBuffer" {
import {$AudioFormat, $AudioFormat$Type} from "packages/javax/sound/sampled/$AudioFormat"
import {$ByteBuffer, $ByteBuffer$Type} from "packages/java/nio/$ByteBuffer"

export class $ALAudioBuffer {

constructor(arg0: $ByteBuffer$Type, arg1: $AudioFormat$Type)

public "delete"(): void
public "prepare"(): boolean
public "getSource"(): integer
public "deleteQuietly"(): void
public "isValidOpenAlSource"(): boolean
get "source"(): integer
get "validOpenAlSource"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ALAudioBuffer$Type = ($ALAudioBuffer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ALAudioBuffer_ = $ALAudioBuffer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/blocks/$AbstractExecutableBlock" {
import {$Executable, $Executable$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Executable"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$ValuePlaceholderHolder, $ValuePlaceholderHolder$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ValuePlaceholderHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AbstractExecutableBlock implements $Executable, $ValuePlaceholderHolder {
 "identifier": string

constructor()

public "execute"(): void
public "getIdentifier"(): string
public "getExecutables"(): $List<($Executable)>
public "addExecutable"(arg0: $Executable$Type): $AbstractExecutableBlock
public "getAppendedBlock"(): $AbstractExecutableBlock
public "setAppendedBlock"(arg0: $AbstractExecutableBlock$Type): void
public "removeExecutable"(arg0: $Executable$Type): $AbstractExecutableBlock
public "clearExecutables"(): $AbstractExecutableBlock
public "addValuePlaceholder"(arg0: string, arg1: $Supplier$Type<(string)>): void
public "serialize"(): $PropertyContainer
public "getBlockType"(): string
public "getValuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
public "copy"(arg0: boolean): $Executable
public "serializeToExistingPropertyContainer"(arg0: $PropertyContainer$Type): void
get "identifier"(): string
get "executables"(): $List<($Executable)>
get "appendedBlock"(): $AbstractExecutableBlock
set "appendedBlock"(value: $AbstractExecutableBlock$Type)
get "blockType"(): string
get "valuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractExecutableBlock$Type = ($AbstractExecutableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractExecutableBlock_ = $AbstractExecutableBlock$Type;
}}
declare module "packages/de/keksuccino/konkrete/resources/$SelfcleaningDynamicTexture" {
import {$NativeImage, $NativeImage$Type} from "packages/com/mojang/blaze3d/platform/$NativeImage"
import {$DynamicTexture, $DynamicTexture$Type} from "packages/net/minecraft/client/renderer/texture/$DynamicTexture"

export class $SelfcleaningDynamicTexture extends $DynamicTexture {
static readonly "NOT_ASSIGNED": integer

constructor(arg0: $NativeImage$Type)

public "upload"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelfcleaningDynamicTexture$Type = ($SelfcleaningDynamicTexture);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelfcleaningDynamicTexture_ = $SelfcleaningDynamicTexture$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path" {
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"

export interface $Path {

 "evaluate"(arg0: any, arg1: any, arg2: $Configuration$Type): $EvaluationContext
 "evaluate"(arg0: any, arg1: any, arg2: $Configuration$Type, arg3: boolean): $EvaluationContext
 "isFunctionPath"(): boolean
 "isRootPath"(): boolean
 "isDefinite"(): boolean
}

export namespace $Path {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Path$Type = ($Path);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Path_ = $Path$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/customgui/$ManageOverriddenGuisScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $ManageOverriddenGuisScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Runnable$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManageOverriddenGuisScreen$Type = ($ManageOverriddenGuisScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManageOverriddenGuisScreen_ = $ManageOverriddenGuisScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathSinPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MathSinPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathSinPlaceholder$Type = ($MathSinPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathSinPlaceholder_ = $MathSinPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement" {
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $LoadingRequirement {

constructor(arg0: string)

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getIdentifier"(): string
public "editValue"(arg0: $Screen$Type, arg1: $LoadingRequirementInstance$Type): void
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "shouldShowUpInEditorRequirementMenu"(arg0: $LayoutEditorScreen$Type): boolean
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "identifier"(): string
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadingRequirement$Type = ($LoadingRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadingRequirement_ = $LoadingRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsLanguageRequirement" {
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsLanguageRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "editValue"(arg0: $Screen$Type, arg1: $LoadingRequirementInstance$Type): void
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsLanguageRequirement$Type = ($IsLanguageRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsLanguageRequirement_ = $IsLanguageRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/commands/$Commands" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $Commands {

constructor()

public static "registerAll"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Commands$Type = ($Commands);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Commands_ = $Commands$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext" {
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $Predicate$PredicateContext {

 "root"(): any
 "configuration"(): $Configuration
 "item"<T>(arg0: $Class$Type<(T)>): T
 "item"(): any
}

export namespace $Predicate$PredicateContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Predicate$PredicateContext$Type = ($Predicate$PredicateContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Predicate$PredicateContext_ = $Predicate$PredicateContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarElement$ProgressValueMode" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$LocalizedCycleEnum, $LocalizedCycleEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedCycleEnum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ProgressBarElement$ProgressValueMode extends $Enum<($ProgressBarElement$ProgressValueMode)> implements $LocalizedCycleEnum<($ProgressBarElement$ProgressValueMode)> {
static readonly "PERCENTAGE": $ProgressBarElement$ProgressValueMode
static readonly "FLOATING_POINT": $ProgressBarElement$ProgressValueMode


public "getName"(): string
public static "values"(): ($ProgressBarElement$ProgressValueMode)[]
public static "valueOf"(arg0: string): $ProgressBarElement$ProgressValueMode
public static "getByName"(arg0: string): $ProgressBarElement$ProgressValueMode
public "getValueComponentStyle"(): $Style
public "getLocalizationKeyBase"(): string
public "getByNameInternal"(arg0: string): $ProgressBarElement$ProgressValueMode
public "getValues"(): ($ProgressBarElement$ProgressValueMode)[]
public "getCycleComponentStyle"(): $Style
public "cycle"(arg0: $ProgressBarElement$ProgressValueMode$Type): $LocalizedGenericValueCycle<($ProgressBarElement$ProgressValueMode)>
public "cycle"(): $LocalizedGenericValueCycle<($ProgressBarElement$ProgressValueMode)>
public "getCycleComponent"(): $MutableComponent
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "valueComponentStyle"(): $Style
get "localizationKeyBase"(): string
get "cycleComponentStyle"(): $Style
get "cycleComponent"(): $MutableComponent
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProgressBarElement$ProgressValueMode$Type = (("percentage") | ("floating_point")) | ($ProgressBarElement$ProgressValueMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProgressBarElement$ProgressValueMode_ = $ProgressBarElement$ProgressValueMode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/entry/$ScrollAreaEntry" {
import {$Tooltip, $Tooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$UIBase, $UIBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/$UIBase"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $ScrollAreaEntry extends $UIBase implements $Renderable {
 "parent": $ScrollArea
 "deselectOtherEntriesOnSelect": boolean
 "selectOnClick": boolean
 "index": integer
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: $ScrollArea$Type, arg1: float, arg2: float)

public "isPlayClickSound"(): boolean
public "isSelectable"(): boolean
public "setWidth"(arg0: float): void
public "renderEntry"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getY"(): float
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "setX"(arg0: float): void
public "setY"(arg0: float): void
public "getX"(): float
public "isHovered"(): boolean
public "onClick"(arg0: $ScrollAreaEntry$Type, arg1: double, arg2: double, arg3: integer): void
public "getWidth"(): float
public "getHeight"(): float
public "setTooltip"(arg0: $Tooltip$Type): void
public "isSelected"(): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getBackgroundColorHover"(): $Supplier<($DrawableColor)>
public "setBackgroundColorNormal"(arg0: $Supplier$Type<($DrawableColor$Type)>): void
public "setBackgroundColorHover"(arg0: $Supplier$Type<($DrawableColor$Type)>): void
public "getBackgroundColorNormal"(): $Supplier<($DrawableColor)>
public "setSelectable"(arg0: boolean): void
public "setPlayClickSound"(arg0: boolean): void
public "isClickable"(): boolean
public "setSelected"(arg0: boolean): void
public "setClickable"(arg0: boolean): void
public "setHeight"(arg0: float): void
public "isMouseOver"(arg0: double, arg1: double): boolean
get "playClickSound"(): boolean
get "selectable"(): boolean
set "width"(value: float)
get "y"(): float
set "x"(value: float)
set "y"(value: float)
get "x"(): float
get "hovered"(): boolean
get "width"(): float
get "height"(): float
set "tooltip"(value: $Tooltip$Type)
get "selected"(): boolean
get "backgroundColorHover"(): $Supplier<($DrawableColor)>
set "backgroundColorNormal"(value: $Supplier$Type<($DrawableColor$Type)>)
set "backgroundColorHover"(value: $Supplier$Type<($DrawableColor$Type)>)
get "backgroundColorNormal"(): $Supplier<($DrawableColor)>
set "selectable"(value: boolean)
set "playClickSound"(value: boolean)
get "clickable"(): boolean
set "selected"(value: boolean)
set "clickable"(value: boolean)
set "height"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollAreaEntry$Type = ($ScrollAreaEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollAreaEntry_ = $ScrollAreaEntry$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/handling/$AdvancedWidgetsHandler" {
import {$ScreenEvent$Init$Pre, $ScreenEvent$Init$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Init$Pre"
import {$ScreenKeyPressedEvent, $ScreenKeyPressedEvent$Type} from "packages/de/keksuccino/konkrete/events/$ScreenKeyPressedEvent"
import {$IAdvancedWidgetBase, $IAdvancedWidgetBase$Type} from "packages/de/keksuccino/konkrete/gui/content/handling/$IAdvancedWidgetBase"
import {$ScreenCharTypedEvent, $ScreenCharTypedEvent$Type} from "packages/de/keksuccino/konkrete/events/$ScreenCharTypedEvent"
import {$ScreenMouseClickedEvent, $ScreenMouseClickedEvent$Type} from "packages/de/keksuccino/konkrete/events/$ScreenMouseClickedEvent"
import {$ScreenTickEvent, $ScreenTickEvent$Type} from "packages/de/keksuccino/konkrete/events/$ScreenTickEvent"
import {$ScreenKeyReleasedEvent, $ScreenKeyReleasedEvent$Type} from "packages/de/keksuccino/konkrete/events/$ScreenKeyReleasedEvent"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"

export class $AdvancedWidgetsHandler {


public static "init"(): void
public "onScreenKeyReleased"(arg0: $ScreenKeyReleasedEvent$Type): void
public "onScreenMouseClicked"(arg0: $ScreenMouseClickedEvent$Type): void
public static "handleWidget"(arg0: $IAdvancedWidgetBase$Type): void
public "onScreenCharTyped"(arg0: $ScreenCharTypedEvent$Type): void
public "onClientTick"(arg0: $TickEvent$ClientTickEvent$Type): void
public "onScreenTick"(arg0: $ScreenTickEvent$Type): void
public "onInitScreen"(arg0: $ScreenEvent$Init$Pre$Type): void
public "onScreenKeyPressed"(arg0: $ScreenKeyPressedEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancedWidgetsHandler$Type = ($AdvancedWidgetsHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancedWidgetsHandler_ = $AdvancedWidgetsHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$TextWidget$TextAlignment" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $TextWidget$TextAlignment extends $Enum<($TextWidget$TextAlignment)> {
static readonly "LEFT": $TextWidget$TextAlignment
static readonly "RIGHT": $TextWidget$TextAlignment
static readonly "CENTER": $TextWidget$TextAlignment


public static "values"(): ($TextWidget$TextAlignment)[]
public static "valueOf"(arg0: string): $TextWidget$TextAlignment
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextWidget$TextAlignment$Type = (("left") | ("center") | ("right")) | ($TextWidget$TextAlignment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextWidget$TextAlignment_ = $TextWidget$TextAlignment$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ContextMenu$ClickableContextMenuEntry$ClickAction, $ContextMenu$ClickableContextMenuEntry$ClickAction$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry$ClickAction"
import {$ContextMenu$ContextMenuEntry, $ContextMenu$ContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuEntry"
import {$ContextMenu$Supplier, $ContextMenu$Supplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ContextMenu$ClickableContextMenuEntry<T extends $ContextMenu$ClickableContextMenuEntry<(T)>> extends $ContextMenu$ContextMenuEntry<(T)> {

constructor(arg0: string, arg1: $ContextMenu$Type, arg2: $Component$Type, arg3: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type)

public "copy"(): $ContextMenu$ClickableContextMenuEntry<(T)>
public "isClickSoundEnabled"(): boolean
public "setFocused"(arg0: boolean): void
public "setClickAction"(arg0: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type): T
public "getShortcutText"(): $Component
public "getIcon"(): $ResourceLocation
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getMinWidth"(): float
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "isFocused"(): boolean
public "setLabelSupplier"(arg0: $ContextMenu$Supplier$Type<($Component$Type)>): T
public "setIcon"(arg0: $ResourceLocation$Type): T
public "getLabel"(): $Component
public "setShortcutTextSupplier"(arg0: $ContextMenu$Supplier$Type<($Component$Type)>): T
public "setClickSoundEnabled"(arg0: boolean): T
get "clickSoundEnabled"(): boolean
set "focused"(value: boolean)
set "clickAction"(value: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type)
get "shortcutText"(): $Component
get "icon"(): $ResourceLocation
get "minWidth"(): float
get "focused"(): boolean
set "labelSupplier"(value: $ContextMenu$Supplier$Type<($Component$Type)>)
set "icon"(value: $ResourceLocation$Type)
get "label"(): $Component
set "shortcutTextSupplier"(value: $ContextMenu$Supplier$Type<($Component$Type)>)
set "clickSoundEnabled"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$ClickableContextMenuEntry$Type<T> = ($ContextMenu$ClickableContextMenuEntry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$ClickableContextMenuEntry_<T> = $ContextMenu$ClickableContextMenuEntry$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerStatusPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ServerStatusPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerStatusPlaceholder$Type = ($ServerStatusPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerStatusPlaceholder_ = $ServerStatusPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$GsonJsonProvider" {
import {$Gson, $Gson$Type} from "packages/com/google/gson/$Gson"
import {$AbstractJsonProvider, $AbstractJsonProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$AbstractJsonProvider"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"

export class $GsonJsonProvider extends $AbstractJsonProvider {

constructor()
constructor(arg0: $Gson$Type)

public "length"(arg0: any): integer
public "isArray"(arg0: any): boolean
public "setProperty"(arg0: any, arg1: any, arg2: any): void
public "unwrap"(arg0: any): any
public "createMap"(): any
public "parse"(arg0: string): any
public "parse"(arg0: $InputStream$Type, arg1: string): any
public "toJson"(arg0: any): string
public "setArrayIndex"(arg0: any, arg1: integer, arg2: any): void
public "toIterable"(arg0: any): $Iterable<(any)>
public "createArray"(): any
public "getMapValue"(arg0: any, arg1: string): any
public "getPropertyKeys"(arg0: any): $Collection<(string)>
public "isMap"(arg0: any): boolean
public "removeProperty"(arg0: any, arg1: any): void
public "getArrayIndex"(arg0: any, arg1: integer): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GsonJsonProvider$Type = ($GsonJsonProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GsonJsonProvider_ = $GsonJsonProvider$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$WildcardPathToken" {
import {$PathToken, $PathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken"
import {$EvaluationContextImpl, $EvaluationContextImpl$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"

export class $WildcardPathToken extends $PathToken {

constructor()

public "isTokenDefinite"(): boolean
public "evaluate"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContextImpl$Type): void
public "getPathFragment"(): string
get "tokenDefinite"(): boolean
get "pathFragment"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WildcardPathToken$Type = ($WildcardPathToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WildcardPathToken_ = $WildcardPathToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/other/$ReloadFancyMenuAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $ReloadFancyMenuAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReloadFancyMenuAction$Type = ($ReloadFancyMenuAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReloadFancyMenuAction_ = $ReloadFancyMenuAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/cursor/$CursorElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $CursorElement extends $AbstractElement {
 "hotspotX": integer
 "hotspotY": integer
 "editorPreviewMode": boolean
 "textureSupplier": $ResourceSupplier<($ITexture)>
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getCursorName"(): string
public "forceRebuildCursor"(): void
public "updateCursor"(): void
get "cursorName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CursorElement$Type = ($CursorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CursorElement_ = $CursorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$CustomizableSlider" {
import {$AbstractSliderButton, $AbstractSliderButton$Type} from "packages/net/minecraft/client/gui/components/$AbstractSliderButton"
import {$RenderableResource, $RenderableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$RenderableResource"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $CustomizableSlider {

 "setNineSliceCustomSliderHandle_FancyMenu"(arg0: boolean): void
 "getNineSliceSliderBackgroundBorderX_FancyMenu"(): integer
 "isNineSliceCustomSliderBackground_FancyMenu"(): boolean
 "getCustomSliderBackgroundNormalFancyMenu"(): $RenderableResource
 "setNineSliceSliderBackgroundBorderY_FancyMenu"(arg0: integer): void
 "setNineSliceSliderHandleBorderX_FancyMenu"(arg0: integer): void
 "setCustomSliderBackgroundHighlightedFancyMenu"(arg0: $RenderableResource$Type): void
 "setCustomSliderBackgroundNormalFancyMenu"(arg0: $RenderableResource$Type): void
 "getNineSliceSliderBackgroundBorderY_FancyMenu"(): integer
 "setNineSliceSliderHandleBorderY_FancyMenu"(arg0: integer): void
 "getCustomSliderBackgroundHighlightedFancyMenu"(): $RenderableResource
 "setNineSliceCustomSliderBackground_FancyMenu"(arg0: boolean): void
 "setNineSliceSliderBackgroundBorderX_FancyMenu"(arg0: integer): void
 "isNineSliceCustomSliderHandle_FancyMenu"(): boolean
 "getNineSliceSliderHandleBorderX_FancyMenu"(): integer
 "getNineSliceSliderHandleBorderY_FancyMenu"(): integer
 "renderSliderBackgroundFancyMenu"(arg0: $GuiGraphics$Type, arg1: $AbstractSliderButton$Type, arg2: boolean): boolean
}

export namespace $CustomizableSlider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomizableSlider$Type = ($CustomizableSlider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomizableSlider_ = $CustomizableSlider$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/editbox/$EditBoxSuggestions$SuggestionsRenderPosition" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $EditBoxSuggestions$SuggestionsRenderPosition extends $Enum<($EditBoxSuggestions$SuggestionsRenderPosition)> {
static readonly "VANILLA": $EditBoxSuggestions$SuggestionsRenderPosition
static readonly "ABOVE_EDIT_BOX": $EditBoxSuggestions$SuggestionsRenderPosition
static readonly "BELOW_EDIT_BOX": $EditBoxSuggestions$SuggestionsRenderPosition


public static "values"(): ($EditBoxSuggestions$SuggestionsRenderPosition)[]
public static "valueOf"(arg0: string): $EditBoxSuggestions$SuggestionsRenderPosition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditBoxSuggestions$SuggestionsRenderPosition$Type = (("below_edit_box") | ("above_edit_box") | ("vanilla")) | ($EditBoxSuggestions$SuggestionsRenderPosition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditBoxSuggestions$SuggestionsRenderPosition_ = $EditBoxSuggestions$SuggestionsRenderPosition$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$Accessor" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"
import {$FieldFilter, $FieldFilter$Type} from "packages/de/keksuccino/konkrete/json/minidev/asm/$FieldFilter"
import {$Type, $Type$Type} from "packages/java/lang/reflect/$Type"

export class $Accessor {

constructor(arg0: $Class$Type<(any)>, arg1: $Field$Type, arg2: $FieldFilter$Type)

public "getName"(): string
public "isEnum"(): boolean
public "isPublic"(): boolean
public "getGenericType"(): $Type
public "getType"(): $Class<(any)>
public "getIndex"(): integer
public "isReadable"(): boolean
public "isWritable"(): boolean
public "isUsable"(): boolean
get "name"(): string
get "enum"(): boolean
get "public"(): boolean
get "genericType"(): $Type
get "type"(): $Class<(any)>
get "index"(): integer
get "readable"(): boolean
get "writable"(): boolean
get "usable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Accessor$Type = ($Accessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Accessor_ = $Accessor$Type;
}}
declare module "packages/de/keksuccino/konkrete/command/$CommandUtils" {
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"

export class $CommandUtils {

constructor()

public static "getStringSuggestions"(arg0: $SuggestionsBuilder$Type, ...arg1: (string)[]): $CompletableFuture<($Suggestions)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandUtils$Type = ($CommandUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandUtils_ = $CommandUtils$Type;
}}
declare module "packages/de/keksuccino/konkrete/config/$ConfigEntry" {
import {$ConfigEntry$EntryType, $ConfigEntry$EntryType$Type} from "packages/de/keksuccino/konkrete/config/$ConfigEntry$EntryType"

export class $ConfigEntry {

constructor(arg0: string, arg1: string, arg2: $ConfigEntry$EntryType$Type, arg3: string, arg4: string)

public "getName"(): string
public "getValue"(): string
public "setValue"(arg0: string): void
public "getType"(): $ConfigEntry$EntryType
public "getDescription"(): string
public "setDescription"(arg0: string): void
public "setCategory"(arg0: string): void
public "getCategory"(): string
get "name"(): string
get "value"(): string
set "value"(value: string)
get "type"(): $ConfigEntry$EntryType
get "description"(): string
set "description"(value: string)
set "category"(value: string)
get "category"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigEntry$Type = ($ConfigEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigEntry_ = $ConfigEntry$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/cache/$Cache" {
import {$JsonPath, $JsonPath$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPath"

export interface $Cache {

 "get"(arg0: string): $JsonPath
 "put"(arg0: string, arg1: $JsonPath$Type): void
}

export namespace $Cache {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Cache$Type = ($Cache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Cache_ = $Cache$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/screens/popup/$NotificationPopup" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$KeyboardData, $KeyboardData$Type} from "packages/de/keksuccino/konkrete/input/$KeyboardData"
import {$Popup, $Popup$Type} from "packages/de/keksuccino/konkrete/gui/screens/popup/$Popup"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $NotificationPopup extends $Popup {

constructor(arg0: integer, arg1: $Color$Type, arg2: integer, arg3: $Runnable$Type, ...arg4: (string)[])

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: $Screen$Type): void
public "onEnterOrEscapePressed"(arg0: $KeyboardData$Type): void
public "setNotificationText"(...arg0: (string)[]): void
set "notificationText"(value: (string)[])
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationPopup$Type = ($NotificationPopup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationPopup_ = $NotificationPopup$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slideshow/$SlideshowElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $SlideshowElement extends $AbstractElement {
 "slideshowName": string
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "restoreAspectRatio"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlideshowElement$Type = ($SlideshowElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlideshowElement_ = $SlideshowElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$Pair" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Pair<L, R> {


public "getValue"(): R
public static "of"<L, R>(arg0: L, arg1: R): $Pair<(L), (R)>
public "getKey"(): L
public "setValue"(arg0: R): void
public "setKey"(arg0: L): void
get "value"(): R
get "key"(): L
set "value"(value: R)
set "key"(value: L)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Pair$Type<L, R> = ($Pair<(L), (R)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Pair_<L, R> = $Pair$Type<(L), (R)>;
}}
declare module "packages/de/keksuccino/konkrete/rendering/animation/$ExternalTextureAnimationRenderer" {
import {$IAnimationRenderer, $IAnimationRenderer$Type} from "packages/de/keksuccino/konkrete/rendering/animation/$IAnimationRenderer"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ExternalTextureAnimationRenderer implements $IAnimationRenderer {

constructor(arg0: string, arg1: integer, arg2: boolean, arg3: integer, arg4: integer, arg5: integer, arg6: integer)
constructor(arg0: integer, arg1: boolean, arg2: integer, arg3: integer, arg4: integer, arg5: integer, ...arg6: (string)[])

public "getPath"(): string
public "currentFrame"(): integer
public "setWidth"(arg0: integer): void
public "resetAnimation"(): void
public "isReady"(): boolean
public "setLooped"(arg0: boolean): void
public "isGettingLooped"(): boolean
public "setOpacity"(arg0: float): void
public "setPosX"(arg0: integer): void
public "setPosY"(arg0: integer): void
public "prepareAnimation"(): void
public "render"(arg0: $GuiGraphics$Type): void
public "setStretchImageToScreensize"(arg0: boolean): void
public "isStretchedToStreensize"(): boolean
public "getPosY"(): integer
public "getPosX"(): integer
public "getWidth"(): integer
public "getHeight"(): integer
public "getFPS"(): integer
public "animationFrames"(): integer
public "setFPS"(arg0: integer): void
public "setHideAfterLastFrame"(arg0: boolean): void
public "setHeight"(arg0: integer): void
public "isFinished"(): boolean
public "getOpacity"(): float
get "path"(): string
set "width"(value: integer)
get "ready"(): boolean
set "looped"(value: boolean)
get "gettingLooped"(): boolean
set "opacity"(value: float)
set "posX"(value: integer)
set "posY"(value: integer)
set "stretchImageToScreensize"(value: boolean)
get "stretchedToStreensize"(): boolean
get "posY"(): integer
get "posX"(): integer
get "width"(): integer
get "height"(): integer
get "fPS"(): integer
set "fPS"(value: integer)
set "hideAfterLastFrame"(value: boolean)
set "height"(value: integer)
get "finished"(): boolean
get "opacity"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExternalTextureAnimationRenderer$Type = ($ExternalTextureAnimationRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExternalTextureAnimationRenderer_ = $ExternalTextureAnimationRenderer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementGroup$GroupMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $LoadingRequirementGroup$GroupMode extends $Enum<($LoadingRequirementGroup$GroupMode)> {
static readonly "AND": $LoadingRequirementGroup$GroupMode
static readonly "OR": $LoadingRequirementGroup$GroupMode
readonly "name": string


public static "values"(): ($LoadingRequirementGroup$GroupMode)[]
public static "valueOf"(arg0: string): $LoadingRequirementGroup$GroupMode
public static "getByName"(arg0: string): $LoadingRequirementGroup$GroupMode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadingRequirementGroup$GroupMode$Type = (("or") | ("and")) | ($LoadingRequirementGroup$GroupMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadingRequirementGroup$GroupMode_ = $LoadingRequirementGroup$GroupMode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/filebrowser/$SaveFileScreen" {
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/fancymenu/util/input/$CharacterFilter"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FileFilter, $FileFilter$Type} from "packages/de/keksuccino/fancymenu/util/file/$FileFilter"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$AbstractFileBrowserScreen, $AbstractFileBrowserScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/filebrowser/$AbstractFileBrowserScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"

export class $SaveFileScreen extends $AbstractFileBrowserScreen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $File$Type, arg1: $File$Type, arg2: string, arg3: string, arg4: $Consumer$Type<($File$Type)>)

public static "build"(arg0: $File$Type, arg1: string, arg2: string, arg3: $Consumer$Type<($File$Type)>): $SaveFileScreen
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "tick"(): void
public "setFileName"(arg0: string): $SaveFileScreen
public "forceResourceFriendlyFileNames"(): boolean
public "setForceResourceFriendlyFileNames"(arg0: boolean): $SaveFileScreen
public "getFileNameCharacterFilter"(): $CharacterFilter
public "setFileNameCharacterFilter"(arg0: $CharacterFilter$Type): $SaveFileScreen
public "setFileFilter"(arg0: $FileFilter$Type): $AbstractFileBrowserScreen
set "fileName"(value: string)
get "fileNameCharacterFilter"(): $CharacterFilter
set "fileNameCharacterFilter"(value: $CharacterFilter$Type)
set "fileFilter"(value: $FileFilter$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SaveFileScreen$Type = ($SaveFileScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SaveFileScreen_ = $SaveFileScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$HideableElement, $HideableElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$HideableElement"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $AbstractDeepElement extends $AbstractElement implements $HideableElement {
 "deepElementHidden": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $DeepElementBuilder$Type<(any), (any), (any)>)

public "isHidden"(): boolean
public "shouldRender"(): boolean
public "setHidden"(arg0: boolean): void
public "getInstanceIdentifier"(): string
public "isDeepElementVisible"(): boolean
get "hidden"(): boolean
set "hidden"(value: boolean)
get "instanceIdentifier"(): string
get "deepElementVisible"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractDeepElement$Type = ($AbstractDeepElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractDeepElement_ = $AbstractDeepElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/reader/$BeansWriter" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JsonWriterI, $JsonWriterI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/reader/$JsonWriterI"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"

export class $BeansWriter implements $JsonWriterI<(any)> {

constructor()

public "writeJSONString"<E>(arg0: E, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeansWriter$Type = ($BeansWriter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeansWriter_ = $BeansWriter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$LayoutEditorWidgetRegistry" {
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$AbstractLayoutEditorWidgetBuilder, $AbstractLayoutEditorWidgetBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidgetBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractLayoutEditorWidget, $AbstractLayoutEditorWidget$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidget"

export class $LayoutEditorWidgetRegistry {

constructor()

public static "register"(arg0: $AbstractLayoutEditorWidgetBuilder$Type<(any)>): void
public static "getBuilder"(arg0: string): $AbstractLayoutEditorWidgetBuilder<(any)>
public static "buildWidgetInstances"(arg0: $LayoutEditorScreen$Type): $List<($AbstractLayoutEditorWidget)>
public static "isBuilderRegistered"(arg0: string): boolean
public static "getBuilders"(): $List<($AbstractLayoutEditorWidgetBuilder<(any)>)>
get "builders"(): $List<($AbstractLayoutEditorWidgetBuilder<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutEditorWidgetRegistry$Type = ($LayoutEditorWidgetRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutEditorWidgetRegistry_ = $LayoutEditorWidgetRegistry$Type;
}}
declare module "packages/de/keksuccino/konkrete/config/$Config" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigEntry, $ConfigEntry$Type} from "packages/de/keksuccino/konkrete/config/$ConfigEntry"

export class $Config {

constructor(arg0: string)

public "getBoolean"(arg0: string): boolean
public "getLong"(arg0: string): long
public "getFloat"(arg0: string): float
public "getDouble"(arg0: string): double
public "getOrDefault"<T>(arg0: string, arg1: T): T
public "setValue"(arg0: string, arg1: integer): void
public "setValue"(arg0: string, arg1: long): void
public "setValue"(arg0: string, arg1: double): void
public "setValue"(arg0: string, arg1: float): void
public "setValue"(arg0: string, arg1: boolean): void
public "setValue"(arg0: string, arg1: string): void
public "getInteger"(arg0: string): integer
public "getString"(arg0: string): string
public "getCategorys"(): $List<(string)>
public "setConfigName"(arg0: string): void
public "valueExists"(arg0: string): boolean
public "clearUnusedValues"(): void
public "syncConfig"(): void
public "getAsEntry"(arg0: string): $ConfigEntry
public "getAllAsEntry"(): $List<($ConfigEntry)>
public "unregisterValue"(arg0: string): void
public "registerValue"(arg0: string, arg1: float, arg2: string): void
public "registerValue"(arg0: string, arg1: boolean, arg2: string): void
public "registerValue"(arg0: string, arg1: string, arg2: string): void
public "registerValue"(arg0: string, arg1: long, arg2: string): void
public "registerValue"(arg0: string, arg1: double, arg2: string): void
public "registerValue"(arg0: string, arg1: integer, arg2: string): void
public "registerValue"(arg0: string, arg1: boolean, arg2: string, arg3: string): void
public "registerValue"(arg0: string, arg1: long, arg2: string, arg3: string): void
public "registerValue"(arg0: string, arg1: string, arg2: string, arg3: string): void
public "registerValue"(arg0: string, arg1: integer, arg2: string, arg3: string): void
public "registerValue"(arg0: string, arg1: double, arg2: string, arg3: string): void
public "registerValue"(arg0: string, arg1: float, arg2: string, arg3: string): void
public "setDescription"(arg0: string, arg1: string): void
public "setCategory"(arg0: string, arg1: string): void
public "getConfigName"(): string
public "getEntrysForCategory"(arg0: string): $List<($ConfigEntry)>
get "categorys"(): $List<(string)>
set "configName"(value: string)
get "allAsEntry"(): $List<($ConfigEntry)>
get "configName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Type = ($Config);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config_ = $Config$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ClickableMenuBarEntry" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MenuBar$MenuBarEntry, $MenuBar$MenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MenuBar$MenuBarEntry$MenuBarEntrySupplier, $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry$MenuBarEntrySupplier"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$MenuBar$ClickableMenuBarEntry$ClickAction, $MenuBar$ClickableMenuBarEntry$ClickAction$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ClickableMenuBarEntry$ClickAction"

export class $MenuBar$ClickableMenuBarEntry extends $MenuBar$MenuBarEntry {

constructor(arg0: string, arg1: $MenuBar$Type, arg2: $Component$Type, arg3: $MenuBar$ClickableMenuBarEntry$ClickAction$Type)

public "getIconTextureSupplier"(): $MenuBar$MenuBarEntry$MenuBarEntrySupplier<($ITexture)>
public "setIconTextureColor"(arg0: $Supplier$Type<($DrawableColor$Type)>): $MenuBar$ClickableMenuBarEntry
public "setActive"(arg0: boolean): $MenuBar$ClickableMenuBarEntry
public "setClickAction"(arg0: $MenuBar$ClickableMenuBarEntry$ClickAction$Type): $MenuBar$ClickableMenuBarEntry
public "setIconTexture"(arg0: $ITexture$Type): $MenuBar$ClickableMenuBarEntry
public "setLabel"(arg0: $Component$Type): $MenuBar$ClickableMenuBarEntry
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "setIconTextureSupplier"(arg0: $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<($ITexture$Type)>): $MenuBar$ClickableMenuBarEntry
public "setLabelSupplier"(arg0: $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<($Component$Type)>): $MenuBar$ClickableMenuBarEntry
public "getClickAction"(): $MenuBar$ClickableMenuBarEntry$ClickAction
get "iconTextureSupplier"(): $MenuBar$MenuBarEntry$MenuBarEntrySupplier<($ITexture)>
set "iconTextureColor"(value: $Supplier$Type<($DrawableColor$Type)>)
set "active"(value: boolean)
set "clickAction"(value: $MenuBar$ClickableMenuBarEntry$ClickAction$Type)
set "iconTexture"(value: $ITexture$Type)
set "label"(value: $Component$Type)
set "iconTextureSupplier"(value: $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<($ITexture$Type)>)
set "labelSupplier"(value: $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<($Component$Type)>)
get "clickAction"(): $MenuBar$ClickableMenuBarEntry$ClickAction
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$ClickableMenuBarEntry$Type = ($MenuBar$ClickableMenuBarEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar$ClickableMenuBarEntry_ = $MenuBar$ClickableMenuBarEntry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/color/$DynamicTextColorFormatter" {
import {$TextColorFormatter, $TextColorFormatter$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/color/$TextColorFormatter"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $DynamicTextColorFormatter extends $TextColorFormatter {

constructor(arg0: character, arg1: $Supplier$Type<($DrawableColor$Type)>)

public "getColor"(): $DrawableColor
get "color"(): $DrawableColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicTextColorFormatter$Type = ($DynamicTextColorFormatter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicTextColorFormatter_ = $DynamicTextColorFormatter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/slideshow/$SlideshowHandler" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ExternalTextureSlideshowRenderer, $ExternalTextureSlideshowRenderer$Type} from "packages/de/keksuccino/fancymenu/customization/slideshow/$ExternalTextureSlideshowRenderer"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"

export class $SlideshowHandler {
static readonly "SLIDESHOW_DIR": $File

constructor()

public static "init"(): void
public static "getSlideshow"(arg0: string): $ExternalTextureSlideshowRenderer
public static "getSlideshowNames"(): $List<(string)>
public static "slideshowExists"(arg0: string): boolean
public static "updateSlideshows"(): void
public "onMenuReload"(arg0: $ModReloadEvent$Type): void
public static "getSlideshows"(): $List<($ExternalTextureSlideshowRenderer)>
get "slideshowNames"(): $List<(string)>
get "slideshows"(): $List<($ExternalTextureSlideshowRenderer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlideshowHandler$Type = ($SlideshowHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlideshowHandler_ = $SlideshowHandler$Type;
}}
declare module "packages/de/keksuccino/konkrete/input/$MouseInput" {
import {$ScreenEvent$Init$Pre, $ScreenEvent$Init$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Init$Pre"
import {$ScreenEvent$MouseButtonReleased$Pre, $ScreenEvent$MouseButtonReleased$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$MouseButtonReleased$Pre"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"
import {$ScreenEvent$MouseButtonPressed$Pre, $ScreenEvent$MouseButtonPressed$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$MouseButtonPressed$Pre"

export class $MouseInput {

constructor()

public static "init"(): void
public static "isLeftMouseDown"(): boolean
public static "setRenderScale"(arg0: float): void
public static "isRightMouseDown"(): boolean
public "onScreenInit"(arg0: $ScreenEvent$Init$Pre$Type): void
public static "resetRenderScale"(): void
public static "getMouseX"(): integer
public static "getMouseY"(): integer
public "onMouseReleased"(arg0: $ScreenEvent$MouseButtonReleased$Pre$Type): void
public "onMouseClicked"(arg0: $ScreenEvent$MouseButtonPressed$Pre$Type): void
public static "getActiveMouseButton"(): integer
public static "isVanillaInputBlocked"(): boolean
public static "ignoreBlockedVanillaInput"(arg0: boolean): void
public static "unblockVanillaInput"(arg0: string): void
public static "blockVanillaInput"(arg0: string): void
public "onTick"(arg0: $TickEvent$ClientTickEvent$Type): void
get "leftMouseDown"(): boolean
set "renderScale"(value: float)
get "rightMouseDown"(): boolean
get "mouseX"(): integer
get "mouseY"(): integer
get "activeMouseButton"(): integer
get "vanillaInputBlocked"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MouseInput$Type = ($MouseInput);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MouseInput_ = $MouseInput$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/layers/$PlayerEntityRenderLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"

export class $PlayerEntityRenderLayer extends $RenderLayer<(any), (any)> {

constructor(arg0: $RenderLayerParent$Type<(any), (any)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityRenderLayer$Type = ($PlayerEntityRenderLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityRenderLayer_ = $PlayerEntityRenderLayer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v2/$RangeSlider" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AbstractExtendedSlider, $AbstractExtendedSlider$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v2/$AbstractExtendedSlider"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $RangeSlider extends $AbstractExtendedSlider {
static readonly "SLIDER_LOCATION": $ResourceLocation
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Component$Type, arg5: double, arg6: double, arg7: double)

public "getRangeValue"(): double
public "setMaxRangeValue"(arg0: double): $RangeSlider
public "getMaxRangeValue"(): double
public "setMinRangeValue"(arg0: double): $RangeSlider
public "showAsInteger"(): boolean
public "getMinRangeValue"(): double
public "setRangeValue"(arg0: double): $RangeSlider
public "setRoundingDecimalPlace"(arg0: integer): $RangeSlider
public "getValueDisplayText"(): string
public "setShowAsInteger"(arg0: boolean): $RangeSlider
public "getIntegerRangeValue"(): integer
public "getRoundingDecimalPlace"(): integer
get "rangeValue"(): double
set "maxRangeValue"(value: double)
get "maxRangeValue"(): double
set "minRangeValue"(value: double)
get "minRangeValue"(): double
set "rangeValue"(value: double)
set "roundingDecimalPlace"(value: integer)
get "valueDisplayText"(): string
get "integerRangeValue"(): integer
get "roundingDecimalPlace"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RangeSlider$Type = ($RangeSlider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RangeSlider_ = $RangeSlider$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$PathNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Path, $Path$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path"

export class $ValueNodes$PathNode extends $ValueNode {


public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "toString"(): string
public "getPath"(): $Path
public "evaluate"(arg0: $Predicate$PredicateContext$Type): $ValueNode
public "shouldExists"(): boolean
public "asPathNode"(): $ValueNodes$PathNode
public "asExistsCheck"(arg0: boolean): $ValueNodes$PathNode
public "isPathNode"(): boolean
public "isExistsCheck"(): boolean
get "path"(): $Path
get "pathNode"(): boolean
get "existsCheck"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$PathNode$Type = ($ValueNodes$PathNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$PathNode_ = $ValueNodes$PathNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/platform/$ForgeCompatibilityLayer" {
import {$TitleScreenLayer, $TitleScreenLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IPlatformCompatibilityLayer, $IPlatformCompatibilityLayer$Type} from "packages/de/keksuccino/fancymenu/platform/services/$IPlatformCompatibilityLayer"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ForgeCompatibilityLayer implements $IPlatformCompatibilityLayer {

constructor()

public "registerTitleScreenDeepCustomizationLayerElements"(arg0: $TitleScreenLayer$Type): void
public "getTitleScreenBrandingLines"(): $List<($Component)>
get "titleScreenBrandingLines"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeCompatibilityLayer$Type = ($ForgeCompatibilityLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeCompatibilityLayer_ = $ForgeCompatibilityLayer$Type;
}}
declare module "packages/de/keksuccino/konkrete/resources/$TextureHandler" {
import {$ExternalGifAnimationRenderer, $ExternalGifAnimationRenderer$Type} from "packages/de/keksuccino/konkrete/rendering/animation/$ExternalGifAnimationRenderer"
import {$WebTextureResourceLocation, $WebTextureResourceLocation$Type} from "packages/de/keksuccino/konkrete/resources/$WebTextureResourceLocation"
import {$ExternalTextureResourceLocation, $ExternalTextureResourceLocation$Type} from "packages/de/keksuccino/konkrete/resources/$ExternalTextureResourceLocation"

export class $TextureHandler {

constructor()

public static "getGifResource"(arg0: string): $ExternalGifAnimationRenderer
public static "getWebResource"(arg0: string): $WebTextureResourceLocation
public static "getWebResource"(arg0: string, arg1: boolean): $WebTextureResourceLocation
public static "getResource"(arg0: string): $ExternalTextureResourceLocation
public static "removeResource"(arg0: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextureHandler$Type = ($TextureHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextureHandler_ = $TextureHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$HideableElement, $HideableElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$HideableElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $AbstractDeepEditorElement extends $AbstractEditorElement implements $HideableElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractDeepElement$Type, arg1: $LayoutEditorScreen$Type, arg2: $EditorElementSettings$Type)
constructor(arg0: $AbstractDeepElement$Type, arg1: $LayoutEditorScreen$Type)

public "isHidden"(): boolean
public "isMouseOver"(arg0: double, arg1: double): boolean
public "isHovered"(): boolean
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "setSelected"(arg0: boolean): void
public "setHidden"(arg0: boolean): void
get "hidden"(): boolean
get "hovered"(): boolean
set "selected"(value: boolean)
set "hidden"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractDeepEditorElement$Type = ($AbstractDeepEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractDeepEditorElement_ = $AbstractDeepEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layer/$ScreenCustomizationLayer" {
import {$RenderGuiListHeaderFooterEvent$Pre, $RenderGuiListHeaderFooterEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListHeaderFooterEvent$Pre"
import {$Layout$OrderedElementCollection, $Layout$OrderedElementCollection$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout$OrderedElementCollection"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ElementFactory, $ElementFactory$Type} from "packages/de/keksuccino/fancymenu/customization/layer/$ElementFactory"
import {$RenderScreenEvent$Pre, $RenderScreenEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/screen/$RenderScreenEvent$Pre"
import {$RenderedScreenBackgroundEvent, $RenderedScreenBackgroundEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$RenderedScreenBackgroundEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CloseScreenEvent, $CloseScreenEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$CloseScreenEvent"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"
import {$RenderScreenEvent$Post, $RenderScreenEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/screen/$RenderScreenEvent$Post"
import {$RenderGuiListBackgroundEvent$Post, $RenderGuiListBackgroundEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListBackgroundEvent$Post"
import {$WidgetMeta, $WidgetMeta$Type} from "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta"
import {$LayoutBase, $LayoutBase$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$LayoutBase"
import {$Layout, $Layout$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$VanillaWidgetElement, $VanillaWidgetElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/vanillawidget/$VanillaWidgetElement"
import {$OpenScreenPostInitEvent, $OpenScreenPostInitEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$OpenScreenPostInitEvent"
import {$ScreenCustomizationLayer$ThreadCaller, $ScreenCustomizationLayer$ThreadCaller$Type} from "packages/de/keksuccino/fancymenu/customization/layer/$ScreenCustomizationLayer$ThreadCaller"
import {$InitOrResizeScreenEvent$Pre, $InitOrResizeScreenEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$Pre"
import {$ScreenTickEvent$Post, $ScreenTickEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/screen/$ScreenTickEvent$Post"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$InitOrResizeScreenEvent$Post, $InitOrResizeScreenEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$Post"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$ScreenCustomizationLayer$RandomLayoutContainer, $ScreenCustomizationLayer$RandomLayoutContainer$Type} from "packages/de/keksuccino/fancymenu/customization/layer/$ScreenCustomizationLayer$RandomLayoutContainer"
import {$OpenScreenEvent, $OpenScreenEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$OpenScreenEvent"
import {$RenderTabNavigationBarHeaderBackgroundEvent$Pre, $RenderTabNavigationBarHeaderBackgroundEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/widget/$RenderTabNavigationBarHeaderBackgroundEvent$Pre"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ScreenCustomizationLayer implements $ElementFactory {
 "layoutBase": $LayoutBase
 "allElements": $List<($AbstractElement)>
 "normalElements": $Layout$OrderedElementCollection
 "vanillaWidgetElements": $List<($VanillaWidgetElement)>
 "deepElements": $List<($AbstractDeepElement)>
 "randomLayoutGroups": $Map<(string), ($ScreenCustomizationLayer$RandomLayoutContainer)>
 "activeLayouts": $List<($Layout)>
 "delayAppearanceFirstTime": $List<(string)>
 "delayThreads": $List<($ScreenCustomizationLayer$ThreadCaller)>
 "backgroundDrawable": boolean
 "forceDisableCustomMenuTitle": boolean
 "backgroundOpacity": float
 "cachedLayoutWideLoadingRequirements": $Map<($LoadingRequirementContainer), (boolean)>
 "cachedScreenWidgetMetas": $List<($WidgetMeta)>
 "loadEarly": boolean
static "cachedOriginalMenuTitles": $Map<($Class<(any)>), ($Component)>

constructor(arg0: string)

public "resetLayer"(): void
public "onRenderTabNavigationBarHeaderBackgroundPre"(arg0: $RenderTabNavigationBarHeaderBackgroundEvent$Pre$Type): void
public "onCloseScreen"(arg0: $CloseScreenEvent$Type): void
public "onModReload"(arg0: $ModReloadEvent$Type): void
public "onScreenTickPre"(arg0: $ScreenTickEvent$Post$Type): void
public "onRenderPost"(arg0: $RenderScreenEvent$Post$Type): void
public "onRenderPre"(arg0: $RenderScreenEvent$Pre$Type): void
public "drawToBackground"(arg0: $RenderedScreenBackgroundEvent$Type): void
public "getElementByInstanceIdentifier"(arg0: string): $AbstractElement
public "onOpenScreen"(arg0: $OpenScreenEvent$Type): void
public "onRenderListBackground"(arg0: $RenderGuiListBackgroundEvent$Post$Type): void
public "getScreenIdentifier"(): string
public "onInitOrResizeScreenPre"(arg0: $InitOrResizeScreenEvent$Pre$Type): void
public "onInitOrResizeScreenPost"(arg0: $InitOrResizeScreenEvent$Post$Type): void
public "onRenderListHeaderFooterPre"(arg0: $RenderGuiListHeaderFooterEvent$Pre$Type): void
public "onOpenScreenPostInit"(arg0: $OpenScreenPostInitEvent$Type): void
public "constructElementInstances"(arg0: string, arg1: $List$Type<($WidgetMeta$Type)>, arg2: $Layout$Type, arg3: $Layout$OrderedElementCollection$Type, arg4: $List$Type<($VanillaWidgetElement$Type)>, arg5: $List$Type<($AbstractDeepElement$Type)>): void
public "constructElementInstances"(arg0: string, arg1: $List$Type<($WidgetMeta$Type)>, arg2: $List$Type<($Layout$Type)>, arg3: $Layout$OrderedElementCollection$Type, arg4: $List$Type<($VanillaWidgetElement$Type)>, arg5: $List$Type<($AbstractDeepElement$Type)>): void
get "screenIdentifier"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCustomizationLayer$Type = ($ScreenCustomizationLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCustomizationLayer_ = $ScreenCustomizationLayer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$ScreenUtils" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $ScreenUtils {

constructor()

public static "getScreenWidth"(): integer
public static "getScreenHeight"(): integer
public static "getScreen"(): $Screen
public static "getScreenCenterY"(): integer
public static "getScreenCenterX"(): integer
get "screenWidth"(): integer
get "screenHeight"(): integer
get "screen"(): $Screen
get "screenCenterY"(): integer
get "screenCenterX"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenUtils$Type = ($ScreenUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenUtils_ = $ScreenUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/threading/$MainThreadTaskExecutor$ExecuteTiming" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $MainThreadTaskExecutor$ExecuteTiming extends $Enum<($MainThreadTaskExecutor$ExecuteTiming)> {
static readonly "PRE_CLIENT_TICK": $MainThreadTaskExecutor$ExecuteTiming
static readonly "POST_CLIENT_TICK": $MainThreadTaskExecutor$ExecuteTiming


public static "values"(): ($MainThreadTaskExecutor$ExecuteTiming)[]
public static "valueOf"(arg0: string): $MainThreadTaskExecutor$ExecuteTiming
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MainThreadTaskExecutor$ExecuteTiming$Type = (("pre_client_tick") | ("post_client_tick")) | ($MainThreadTaskExecutor$ExecuteTiming);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MainThreadTaskExecutor$ExecuteTiming_ = $MainThreadTaskExecutor$ExecuteTiming$Type;
}}
declare module "packages/de/keksuccino/konkrete/rendering/$GifDecoder$GifImage" {
import {$BufferedImage, $BufferedImage$Type} from "packages/java/awt/image/$BufferedImage"
import {$GifDecoder, $GifDecoder$Type} from "packages/de/keksuccino/konkrete/rendering/$GifDecoder"

export class $GifDecoder$GifImage {
 "header": string
 "hasGlobColTbl": boolean
 "colorResolution": integer
 "sortFlag": boolean
 "sizeOfGlobColTbl": integer
 "bgColIndex": integer
 "pxAspectRatio": integer
 "globalColTbl": (integer)[]
 "appId": string
 "appAuthCode": string
 "repetitions": integer

constructor(arg0: $GifDecoder$Type)

public "getBackgroundColor"(): integer
public "getWidth"(): integer
public "getHeight"(): integer
public "getDelay"(arg0: integer): integer
public "getFrame"(arg0: integer): $BufferedImage
public "getFrameCount"(): integer
get "backgroundColor"(): integer
get "width"(): integer
get "height"(): integer
get "frameCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GifDecoder$GifImage$Type = ($GifDecoder$GifImage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GifDecoder$GifImage_ = $GifDecoder$GifImage$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$FunctionPathToken" {
import {$PathToken, $PathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EvaluationContextImpl, $EvaluationContextImpl$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export class $FunctionPathToken extends $PathToken {

constructor(arg0: string, arg1: $List$Type<($Parameter$Type)>)

public "isTokenDefinite"(): boolean
public "getParameters"(): $List<($Parameter)>
public "setParameters"(arg0: $List$Type<($Parameter$Type)>): void
public "evaluate"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContextImpl$Type): void
public "getFunctionName"(): string
public "getPathFragment"(): string
get "tokenDefinite"(): boolean
get "parameters"(): $List<($Parameter)>
set "parameters"(value: $List$Type<($Parameter$Type)>)
get "functionName"(): string
get "pathFragment"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FunctionPathToken$Type = ($FunctionPathToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FunctionPathToken_ = $FunctionPathToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/$FMMixinPlugin" {
import {$IMixinInfo, $IMixinInfo$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinInfo"
import {$ClassNode, $ClassNode$Type} from "packages/org/objectweb/asm/tree/$ClassNode"
import {$IMixinConfigPlugin, $IMixinConfigPlugin$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinConfigPlugin"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"

export class $FMMixinPlugin implements $IMixinConfigPlugin {

constructor()

public "onLoad"(arg0: string): void
public "postApply"(arg0: string, arg1: $ClassNode$Type, arg2: string, arg3: $IMixinInfo$Type): void
public "getMixins"(): $List<(string)>
public "getRefMapperConfig"(): string
public "shouldApplyMixin"(arg0: string, arg1: string): boolean
public "preApply"(arg0: string, arg1: $ClassNode$Type, arg2: string, arg3: $IMixinInfo$Type): void
public "acceptTargets"(arg0: $Set$Type<(string)>, arg1: $Set$Type<(string)>): void
get "mixins"(): $List<(string)>
get "refMapperConfig"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FMMixinPlugin$Type = ($FMMixinPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FMMixinPlugin_ = $FMMixinPlugin$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$ConfirmationScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $ConfirmationScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public static "warning"(arg0: $Consumer$Type<(boolean)>, ...arg1: (string)[]): $ConfirmationScreen
public static "warning"(arg0: $Consumer$Type<(boolean)>, ...arg1: ($Component$Type)[]): $ConfirmationScreen
public static "critical"(arg0: $Consumer$Type<(boolean)>, ...arg1: ($Component$Type)[]): $ConfirmationScreen
public static "critical"(arg0: $Consumer$Type<(boolean)>, ...arg1: (string)[]): $ConfirmationScreen
public "setHeadlineBold"(arg0: boolean): $ConfirmationScreen
public "isHeadlineBold"(): boolean
public static "ofComponents"(arg0: $Consumer$Type<(boolean)>, arg1: $List$Type<($Component$Type)>): $ConfirmationScreen
public static "ofComponents"(arg0: $Consumer$Type<(boolean)>, ...arg1: ($Component$Type)[]): $ConfirmationScreen
public "setHeadlineColor"(arg0: $DrawableColor$Type): $ConfirmationScreen
public "getHeadlineColor"(): $DrawableColor
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "onClose"(): void
public "setDelay"(arg0: long): $ConfirmationScreen
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public static "ofStrings"(arg0: $Consumer$Type<(boolean)>, ...arg1: (string)[]): $ConfirmationScreen
public static "ofStrings"(arg0: $Consumer$Type<(boolean)>, arg1: $List$Type<(string)>): $ConfirmationScreen
set "headlineBold"(value: boolean)
get "headlineBold"(): boolean
set "headlineColor"(value: $DrawableColor$Type)
get "headlineColor"(): $DrawableColor
set "delay"(value: long)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfirmationScreen$Type = ($ConfirmationScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfirmationScreen_ = $ConfirmationScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerElement$TickMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $TickerElement$TickMode extends $Enum<($TickerElement$TickMode)> {
static readonly "NORMAL": $TickerElement$TickMode
static readonly "ONCE_PER_SESSION": $TickerElement$TickMode
static readonly "ON_MENU_LOAD": $TickerElement$TickMode
readonly "name": string


public static "values"(): ($TickerElement$TickMode)[]
public static "valueOf"(arg0: string): $TickerElement$TickMode
public static "getByName"(arg0: string): $TickerElement$TickMode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickerElement$TickMode$Type = (("normal") | ("once_per_session") | ("on_menu_load")) | ($TickerElement$TickMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickerElement$TickMode_ = $TickerElement$TickMode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenCompletedEvent" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$InitOrResizeScreenEvent$InitializationPhase, $InitOrResizeScreenEvent$InitializationPhase$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$InitializationPhase"

export class $InitOrResizeScreenCompletedEvent extends $EventBase {

constructor(arg0: $Screen$Type, arg1: $InitOrResizeScreenEvent$InitializationPhase$Type)

public "isCancelable"(): boolean
public "addWidget"<T extends ($GuiEventListener) & ($NarratableEntry)>(arg0: T): void
public "getRenderables"(): $List<($Renderable)>
public "getNarratables"(): $List<($NarratableEntry)>
public "getWidgets"(): $List<($GuiEventListener)>
public "getScreen"(): $Screen
public "addRenderableWidget"<T extends ($GuiEventListener) & ($NarratableEntry) & ($Renderable)>(arg0: T): void
public "getInitializationPhase"(): $InitOrResizeScreenEvent$InitializationPhase
get "cancelable"(): boolean
get "renderables"(): $List<($Renderable)>
get "narratables"(): $List<($NarratableEntry)>
get "widgets"(): $List<($GuiEventListener)>
get "screen"(): $Screen
get "initializationPhase"(): $InitOrResizeScreenEvent$InitializationPhase
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InitOrResizeScreenCompletedEvent$Type = ($InitOrResizeScreenCompletedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InitOrResizeScreenCompletedEvent_ = $InitOrResizeScreenCompletedEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/platform/services/$IPlatformHelper" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export interface $IPlatformHelper {

 "isOnClient"(): boolean
 "getLoadedModIds"(): $List<(string)>
 "getKeyMappingKey"(arg0: $KeyMapping$Type): $InputConstants$Key
 "getLoaderVersion"(): string
 "getEnvironmentName"(): string
 "isDevelopmentEnvironment"(): boolean
 "getPlatformName"(): string
 "getModVersion"(arg0: string): string
 "getPlatformDisplayName"(): string
 "isModLoaded"(arg0: string): boolean
}

export namespace $IPlatformHelper {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPlatformHelper$Type = ($IPlatformHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPlatformHelper_ = $IPlatformHelper$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ScreenIdentifierPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ScreenIdentifierPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenIdentifierPlaceholder$Type = ($ScreenIdentifierPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenIdentifierPlaceholder_ = $ScreenIdentifierPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$Legacy" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $Legacy extends $Annotation {

 "value"(): string
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $Legacy {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Legacy$Type = ($Legacy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Legacy_ = $Legacy$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorUI" {
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $LayoutEditorUI {

constructor()

public static "buildRightClickContextMenu"(arg0: $LayoutEditorScreen$Type): $ContextMenu
public static "buildMenuBar"(arg0: $LayoutEditorScreen$Type, arg1: boolean): $MenuBar
public static "buildScrollListCustomizationsContextMenu"(arg0: $LayoutEditorScreen$Type): $ContextMenu
public static "buildHiddenVanillaElementsContextMenu"(arg0: $LayoutEditorScreen$Type): $ContextMenu
public static "buildOpenLayoutContextMenu"(arg0: $LayoutEditorScreen$Type): $ContextMenu
public static "buildElementContextMenu"(arg0: $LayoutEditorScreen$Type): $ContextMenu
public static "buildEditorWidgetsContextMenu"(arg0: $LayoutEditorScreen$Type): $ContextMenu
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutEditorUI$Type = ($LayoutEditorUI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutEditorUI_ = $LayoutEditorUI$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$ScreenTitleUtils" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $ScreenTitleUtils {

constructor()

public static "getTitleOfScreen"(arg0: $Screen$Type): $Component
public static "setScreenTitle"(arg0: $Screen$Type, arg1: $Component$Type): void
public static "getTitleLocalizationKeyOfScreen"(arg0: $Screen$Type): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenTitleUtils$Type = ($ScreenTitleUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenTitleUtils_ = $ScreenTitleUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$ChoosePanoramaScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ChoosePanoramaScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: string, arg1: $Consumer$Type<(string)>)

public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChoosePanoramaScreen$Type = ($ChoosePanoramaScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChoosePanoramaScreen_ = $ChoosePanoramaScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/ex/$NoSuchFieldException" {
import {$RuntimeException, $RuntimeException$Type} from "packages/java/lang/$RuntimeException"

export class $NoSuchFieldException extends $RuntimeException {

constructor()
constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoSuchFieldException$Type = ($NoSuchFieldException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoSuchFieldException_ = $NoSuchFieldException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListHeaderFooterEvent$Pre" {
import {$AbstractSelectionList, $AbstractSelectionList$Type} from "packages/net/minecraft/client/gui/components/$AbstractSelectionList"
import {$RenderGuiListHeaderFooterEvent, $RenderGuiListHeaderFooterEvent$Type} from "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListHeaderFooterEvent"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderGuiListHeaderFooterEvent$Pre extends $RenderGuiListHeaderFooterEvent {

constructor(arg0: $GuiGraphics$Type, arg1: $AbstractSelectionList$Type<(any)>)

public "isCancelable"(): boolean
get "cancelable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderGuiListHeaderFooterEvent$Pre$Type = ($RenderGuiListHeaderFooterEvent$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderGuiListHeaderFooterEvent$Pre_ = $RenderGuiListHeaderFooterEvent$Pre$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $ButtonEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ButtonEditorElement$Type = ($ButtonEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ButtonEditorElement_ = $ButtonEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$ObjectHolder" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ObjectHolder<T> {


public "get"(): T
public static "of"<T>(arg0: T): $ObjectHolder<(T)>
public "set"(arg0: T): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectHolder$Type<T> = ($ObjectHolder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectHolder_<T> = $ObjectHolder$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/events/$ScreenKeyPressedEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"

export class $ScreenKeyPressedEvent extends $Event {
readonly "keyCode": integer
readonly "scanCode": integer
readonly "modifiers": integer

constructor()
constructor(arg0: integer, arg1: integer, arg2: integer)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenKeyPressedEvent$Type = ($ScreenKeyPressedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenKeyPressedEvent_ = $ScreenKeyPressedEvent$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStreamAwareEx" {
import {$JSONStreamAware, $JSONStreamAware$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStreamAware"
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"

export interface $JSONStreamAwareEx extends $JSONStreamAware {

 "writeJSONString"(arg0: $Appendable$Type, arg1: $JSONStyle$Type): void
 "writeJSONString"(arg0: $Appendable$Type): void
}

export namespace $JSONStreamAwareEx {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONStreamAwareEx$Type = ($JSONStreamAwareEx);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONStreamAwareEx_ = $JSONStreamAwareEx$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/$AdvancedImageButton" {
import {$AdvancedButton, $AdvancedButton$Type} from "packages/de/keksuccino/konkrete/gui/content/$AdvancedButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $AdvancedImageButton extends $AdvancedButton {
 "ignoreBlockedInput": boolean
 "ignoreLeftMouseDownClickBlock": boolean
 "enableRightclick": boolean
 "labelScale": float
 "renderLabel": boolean
 "loopBackgroundAnimations": boolean
 "restartBackgroundAnimationsOnHover": boolean
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $ResourceLocation$Type, arg5: boolean, arg6: $Button$OnPress$Type)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $ResourceLocation$Type, arg5: $Button$OnPress$Type)

public "setImage"(arg0: $ResourceLocation$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
set "image"(value: $ResourceLocation$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancedImageButton$Type = ($AdvancedImageButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancedImageButton_ = $AdvancedImageButton$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeYearPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $RealtimeYearPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RealtimeYearPlaceholder$Type = ($RealtimeYearPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RealtimeYearPlaceholder_ = $RealtimeYearPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$RelationalOperator" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $RelationalOperator extends $Enum<($RelationalOperator)> {
static readonly "GTE": $RelationalOperator
static readonly "LTE": $RelationalOperator
static readonly "EQ": $RelationalOperator
static readonly "TSEQ": $RelationalOperator
static readonly "NE": $RelationalOperator
static readonly "TSNE": $RelationalOperator
static readonly "LT": $RelationalOperator
static readonly "GT": $RelationalOperator
static readonly "REGEX": $RelationalOperator
static readonly "NIN": $RelationalOperator
static readonly "IN": $RelationalOperator
static readonly "CONTAINS": $RelationalOperator
static readonly "ALL": $RelationalOperator
static readonly "SIZE": $RelationalOperator
static readonly "EXISTS": $RelationalOperator
static readonly "TYPE": $RelationalOperator
static readonly "MATCHES": $RelationalOperator
static readonly "EMPTY": $RelationalOperator
static readonly "SUBSETOF": $RelationalOperator
static readonly "ANYOF": $RelationalOperator
static readonly "NONEOF": $RelationalOperator


public "toString"(): string
public static "values"(): ($RelationalOperator)[]
public static "valueOf"(arg0: string): $RelationalOperator
public static "fromString"(arg0: string): $RelationalOperator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RelationalOperator$Type = (("tsne") | ("all") | ("in") | ("subsetof") | ("lt") | ("anyof") | ("noneof") | ("eq") | ("type") | ("gt") | ("matches") | ("empty") | ("regex") | ("nin") | ("contains") | ("size") | ("ne") | ("gte") | ("exists") | ("lte") | ("tseq")) | ($RelationalOperator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RelationalOperator_ = $RelationalOperator$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$CustomizableWidget$CustomBackgroundResetBehavior" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CustomizableWidget$CustomBackgroundResetBehavior extends $Enum<($CustomizableWidget$CustomBackgroundResetBehavior)> {
static readonly "RESET_NEVER": $CustomizableWidget$CustomBackgroundResetBehavior
static readonly "RESET_ON_HOVER": $CustomizableWidget$CustomBackgroundResetBehavior
static readonly "RESET_ON_UNHOVER": $CustomizableWidget$CustomBackgroundResetBehavior
static readonly "RESET_ON_HOVER_AND_UNHOVER": $CustomizableWidget$CustomBackgroundResetBehavior


public static "values"(): ($CustomizableWidget$CustomBackgroundResetBehavior)[]
public static "valueOf"(arg0: string): $CustomizableWidget$CustomBackgroundResetBehavior
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomizableWidget$CustomBackgroundResetBehavior$Type = (("reset_on_unhover") | ("reset_on_hover_and_unhover") | ("reset_never") | ("reset_on_hover")) | ($CustomizableWidget$CustomBackgroundResetBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomizableWidget$CustomBackgroundResetBehavior_ = $CustomizableWidget$CustomBackgroundResetBehavior$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaTexture" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$FmaTexture$FmaFrame, $FmaTexture$FmaFrame$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaTexture$FmaFrame"
import {$File, $File$Type} from "packages/java/io/$File"
import {$AspectRatio, $AspectRatio$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$AspectRatio"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$FmaTexture$DecodedFmaImage, $FmaTexture$DecodedFmaImage$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaTexture$DecodedFmaImage"
import {$FmaDecoder, $FmaDecoder$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaDecoder"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$PlayableResource, $PlayableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$PlayableResource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FmaTexture implements $ITexture, $PlayableResource {


public static "of"(arg0: $InputStream$Type): $FmaTexture
public static "of"(arg0: $InputStream$Type, arg1: string, arg2: $FmaTexture$Type): $FmaTexture
public "stop"(): void
public "close"(): void
public static "location"(arg0: $ResourceLocation$Type): $FmaTexture
public static "location"(arg0: $ResourceLocation$Type, arg1: $FmaTexture$Type): $FmaTexture
public "open"(): $InputStream
public "reset"(): void
public static "local"(arg0: $File$Type): $FmaTexture
public static "local"(arg0: $File$Type, arg1: $FmaTexture$Type): $FmaTexture
public "isReady"(): boolean
public "isClosed"(): boolean
public "play"(): void
public "getAspectRatio"(): $AspectRatio
public "isPlaying"(): boolean
public static "web"(arg0: string): $FmaTexture
public static "web"(arg0: string, arg1: $FmaTexture$Type): $FmaTexture
public "isPaused"(): boolean
public "getWidth"(): integer
public "pause"(): void
public "getHeight"(): integer
public "isLoadingFailed"(): boolean
public "isLoadingCompleted"(): boolean
public static "deliverFmaFrames"(arg0: $FmaDecoder$Type, arg1: string, arg2: $Consumer$Type<($FmaTexture$FmaFrame$Type)>): void
public static "decodeFma"(arg0: $InputStream$Type, arg1: string): $FmaTexture$DecodedFmaImage
public "getResourceLocation"(): $ResourceLocation
public static "deliverFmaIntroFrames"(arg0: $FmaDecoder$Type, arg1: string, arg2: $Consumer$Type<($FmaTexture$FmaFrame$Type)>): void
public "waitForLoadingCompletedOrFailed"(arg0: long): void
public "waitForReady"(arg0: long): void
get "ready"(): boolean
get "closed"(): boolean
get "aspectRatio"(): $AspectRatio
get "playing"(): boolean
get "paused"(): boolean
get "width"(): integer
get "height"(): integer
get "loadingFailed"(): boolean
get "loadingCompleted"(): boolean
get "resourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FmaTexture$Type = ($FmaTexture);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FmaTexture_ = $FmaTexture$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Utils" {
import {$Closeable, $Closeable$Type} from "packages/java/io/$Closeable"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"

export class $Utils {


public static "toString"(arg0: any): string
public static "isEmpty"(arg0: charseq): boolean
public static "join"(arg0: string, arg1: string, arg2: $Iterable$Type<(any)>): string
public static "join"(arg0: string, arg1: $Iterable$Type<(any)>): string
public static "concat"(...arg0: (charseq)[]): string
public static "hex"(arg0: character): string
public static "escape"(arg0: string, arg1: boolean): string
public static "unescape"(arg0: string): string
public static "isTrue"(arg0: boolean, arg1: string): void
public static "notNull"<T>(arg0: T, arg1: string): T
public static "notNull"<T>(arg0: T, arg1: string, ...arg2: (any)[]): T
public static "notEmpty"<T extends charseq>(arg0: T, arg1: string, ...arg2: (any)[]): T
public static "notEmpty"(arg0: (byte)[], arg1: string): (byte)[]
public static "notEmpty"<T extends charseq>(arg0: T, arg1: string): T
public static "closeQuietly"(arg0: $Closeable$Type): void
public static "onlyOneIsTrue"(arg0: string, ...arg1: (boolean)[]): void
public static "onlyOneIsTrueNonThrow"(...arg0: (boolean)[]): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Utils$Type = ($Utils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Utils_ = $Utils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/other/$QuitGameAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $QuitGameAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuitGameAction$Type = ($QuitGameAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuitGameAction_ = $QuitGameAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/entry/$TextScrollAreaEntry" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$ScrollAreaEntry, $ScrollAreaEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/entry/$ScrollAreaEntry"

export class $TextScrollAreaEntry extends $ScrollAreaEntry {
 "font": $Font
 "parent": $ScrollArea
 "deselectOtherEntriesOnSelect": boolean
 "selectOnClick": boolean
 "index": integer
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: $ScrollArea$Type, arg1: $Component$Type, arg2: $Consumer$Type<($TextScrollAreaEntry$Type)>)

public "getText"(): $Component
public "setText"(arg0: $Component$Type): void
public "renderEntry"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "onClick"(arg0: $ScrollAreaEntry$Type, arg1: double, arg2: double, arg3: integer): void
public "getTextWidth"(): integer
get "text"(): $Component
set "text"(value: $Component$Type)
get "textWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextScrollAreaEntry$Type = ($TextScrollAreaEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextScrollAreaEntry_ = $TextScrollAreaEntry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/ram/$PercentRamPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $PercentRamPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PercentRamPlaceholder$Type = ($PercentRamPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PercentRamPlaceholder_ = $PercentRamPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeSecondPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $RealtimeSecondPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RealtimeSecondPlaceholder$Type = ($RealtimeSecondPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RealtimeSecondPlaceholder_ = $RealtimeSecondPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/$PacketRegistry" {
import {$PacketCodec, $PacketCodec$Type} from "packages/de/keksuccino/fancymenu/networking/$PacketCodec"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Packet, $Packet$Type} from "packages/de/keksuccino/fancymenu/networking/$Packet"

export class $PacketRegistry {

constructor()

public static "register"(arg0: $PacketCodec$Type<(any)>): void
public static "getCodecs"(): $List<($PacketCodec<(any)>)>
public static "getCodecFor"<T extends $Packet>(arg0: T): $PacketCodec<(T)>
public static "endRegistrationPhase"(): void
public static "getCodec"(arg0: string): $PacketCodec<(any)>
get "codecs"(): $List<($PacketCodec<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketRegistry$Type = ($PacketRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketRegistry_ = $PacketRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$GifTexture$GifFrame" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GifTexture$GifFrame {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GifTexture$GifFrame$Type = ($GifTexture$GifFrame);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GifTexture$GifFrame_ = $GifTexture$GifFrame$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/video/$VideoResourceHandler" {
import {$IVideo, $IVideo$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/video/$IVideo"
import {$List, $List$Type} from "packages/java/util/$List"
import {$VideoFileType, $VideoFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$VideoFileType"
import {$ResourceHandler, $ResourceHandler$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceHandler"

export class $VideoResourceHandler extends $ResourceHandler<($IVideo), ($VideoFileType)> {
static readonly "INSTANCE": $VideoResourceHandler

constructor()

public "getAllowedFileTypes"(): $List<($VideoFileType)>
get "allowedFileTypes"(): $List<($VideoFileType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VideoResourceHandler$Type = ($VideoResourceHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VideoResourceHandler_ = $VideoResourceHandler$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$StandardDeviation" {
import {$AbstractAggregation, $AbstractAggregation$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$AbstractAggregation"

export class $StandardDeviation extends $AbstractAggregation {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StandardDeviation$Type = ($StandardDeviation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StandardDeviation_ = $StandardDeviation$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/filebrowser/$AbstractFileBrowserScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FileFilter, $FileFilter$Type} from "packages/de/keksuccino/fancymenu/util/file/$FileFilter"
import {$FileTypeGroup, $FileTypeGroup$Type} from "packages/de/keksuccino/fancymenu/util/file/type/groups/$FileTypeGroup"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"

export class $AbstractFileBrowserScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Component$Type, arg1: $File$Type, arg2: $File$Type, arg3: $Consumer$Type<($File$Type)>)

public "setVisibleDirectoryLevelsAboveRoot"(arg0: integer): $AbstractFileBrowserScreen
public "setShowSubDirectories"(arg0: boolean): $AbstractFileBrowserScreen
public "onClose"(): void
public "showBlockedResourceUnfriendlyFileNames"(): boolean
public "setBlockResourceUnfriendlyFileNames"(arg0: boolean): $AbstractFileBrowserScreen
public "setShowBlockedResourceUnfriendlyFiles"(arg0: boolean): $AbstractFileBrowserScreen
public "setFileTypes"(arg0: $FileTypeGroup$Type<(any)>): void
public "getFileTypes"(): $FileTypeGroup<(any)>
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "showSubDirectories"(): boolean
public "shouldShowFile"(arg0: $File$Type): boolean
public "setDirectory"(arg0: $File$Type, arg1: boolean): $AbstractFileBrowserScreen
public "updatePreview"(arg0: $File$Type): void
public "getFileFilter"(): $FileFilter
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "updateFileTypeScrollArea"(): void
public "blockResourceUnfriendlyFileNames"(): boolean
public "getVisibleDirectoryLevelsAboveRoot"(): integer
public "setFileFilter"(arg0: $FileFilter$Type): $AbstractFileBrowserScreen
set "visibleDirectoryLevelsAboveRoot"(value: integer)
set "showBlockedResourceUnfriendlyFiles"(value: boolean)
set "fileTypes"(value: $FileTypeGroup$Type<(any)>)
get "fileTypes"(): $FileTypeGroup<(any)>
get "fileFilter"(): $FileFilter
get "visibleDirectoryLevelsAboveRoot"(): integer
set "fileFilter"(value: $FileFilter$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractFileBrowserScreen$Type = ($AbstractFileBrowserScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractFileBrowserScreen_ = $AbstractFileBrowserScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$Trio" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Trio<F, S, T> {


public static "of"<F, S, T>(arg0: F, arg1: S, arg2: T): $Trio<(F), (S), (T)>
public "getFirst"(): F
public "getSecond"(): S
public "getThird"(): T
public "setThird"(arg0: T): void
public "setSecond"(arg0: S): void
public "setFirst"(arg0: F): void
get "first"(): F
get "second"(): S
get "third"(): T
set "third"(value: T)
set "second"(value: S)
set "first"(value: F)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Trio$Type<F, S, T> = ($Trio<(F), (S), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Trio_<F, S, T> = $Trio$Type<(F), (S), (T)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/splash/$TitleScreenSplashDeepElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TitleScreenSplashDeepElement extends $AbstractDeepElement {
static "cachedSplashText": string
 "deepElementHidden": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $DeepElementBuilder$Type<(any), (any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getAbsoluteX"(): integer
public "getAbsoluteWidth"(): integer
public "getAbsoluteHeight"(): integer
public "getAbsoluteY"(): integer
get "absoluteX"(): integer
get "absoluteWidth"(): integer
get "absoluteHeight"(): integer
get "absoluteY"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenSplashDeepElement$Type = ($TitleScreenSplashDeepElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenSplashDeepElement_ = $TitleScreenSplashDeepElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/preload/$ManageResourcePreLoadScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $ManageResourcePreLoadScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Consumer$Type<(boolean)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManageResourcePreLoadScreen$Type = ($ManageResourcePreLoadScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManageResourcePreLoadScreen_ = $ManageResourcePreLoadScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ElementPosXPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ElementPosXPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementPosXPlaceholder$Type = ($ElementPosXPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementPosXPlaceholder_ = $ElementPosXPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/animation/$AnimationData" {
import {$IAnimationRenderer, $IAnimationRenderer$Type} from "packages/de/keksuccino/konkrete/rendering/animation/$IAnimationRenderer"
import {$AnimationData$Type, $AnimationData$Type$Type} from "packages/de/keksuccino/fancymenu/customization/animation/$AnimationData$Type"

export class $AnimationData {
readonly "name": string
readonly "type": $AnimationData$Type
readonly "animation": $IAnimationRenderer

constructor(arg0: $IAnimationRenderer$Type, arg1: string, arg2: $AnimationData$Type$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationData$Type = ($AnimationData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationData_ = $AnimationData$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/$ResourceFile" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$ResourceSourceType, $ResourceSourceType$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSourceType"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"
import {$FileMediaType, $FileMediaType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileMediaType"

export class $ResourceFile {
static readonly "ASSETS_DIR": $File


public static "of"(arg0: string): $ResourceFile
public static "of"(arg0: $File$Type): $ResourceFile
public "getType"(): $FileType<(any)>
public "getFile"(): $File
public "getFileName"(): string
public "exists"(): boolean
public "getAbsolutePath"(): string
public "isDirectory"(): boolean
public "isFile"(): boolean
public "getMediaType"(): $FileMediaType
public "getFileExtension"(): string
public "getAsResourceSource"(): string
public "getResourceSourceType"(): $ResourceSourceType
public "getFileNameWithoutExtension"(): string
public "isExistingAsset"(): boolean
public "getShortPath"(): string
public "isAsset"(): boolean
public static "asset"(arg0: $File$Type): $ResourceFile
public static "asset"(arg0: string): $ResourceFile
get "type"(): $FileType<(any)>
get "file"(): $File
get "fileName"(): string
get "absolutePath"(): string
get "directory"(): boolean
get "file"(): boolean
get "mediaType"(): $FileMediaType
get "fileExtension"(): string
get "asResourceSource"(): string
get "resourceSourceType"(): $ResourceSourceType
get "fileNameWithoutExtension"(): string
get "existingAsset"(): boolean
get "shortPath"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceFile$Type = ($ResourceFile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceFile_ = $ResourceFile$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$RenderedScreenBackgroundEvent" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderedScreenBackgroundEvent extends $EventBase {

constructor(arg0: $Screen$Type, arg1: $GuiGraphics$Type)

public "isCancelable"(): boolean
public "getGraphics"(): $GuiGraphics
public "addWidget"<T extends ($GuiEventListener) & ($NarratableEntry)>(arg0: T): void
public "getRenderables"(): $List<($Renderable)>
public "getNarratables"(): $List<($NarratableEntry)>
public "getWidgets"(): $List<($GuiEventListener)>
public "getScreen"(): $Screen
public "addRenderableWidget"<T extends ($GuiEventListener) & ($NarratableEntry) & ($Renderable)>(arg0: T): void
get "cancelable"(): boolean
get "graphics"(): $GuiGraphics
get "renderables"(): $List<($Renderable)>
get "narratables"(): $List<($NarratableEntry)>
get "widgets"(): $List<($GuiEventListener)>
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderedScreenBackgroundEvent$Type = ($RenderedScreenBackgroundEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderedScreenBackgroundEvent_ = $RenderedScreenBackgroundEvent$Type;
}}
declare module "packages/de/keksuccino/konkrete/input/$CharacterFilter" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CharacterFilter {

constructor()

public "isAllowed"(arg0: string): boolean
public "isAllowed"(arg0: character): boolean
public static "getFilenameFilterWithUppercaseSupport"(): $CharacterFilter
public static "getBasicFilenameCharacterFilter"(): $CharacterFilter
public "filterForAllowedChars"(arg0: string): string
public static "getUrlCharacterFilter"(): $CharacterFilter
public "addAllowedCharacters"(...arg0: (character)[]): void
public "addAllowedCharacters"(...arg0: (string)[]): void
public static "getDoubleCharacterFiler"(): $CharacterFilter
public "addForbiddenCharacters"(...arg0: (character)[]): void
public "addForbiddenCharacters"(...arg0: (string)[]): void
public static "getIntegerCharacterFiler"(): $CharacterFilter
get "filenameFilterWithUppercaseSupport"(): $CharacterFilter
get "basicFilenameCharacterFilter"(): $CharacterFilter
get "urlCharacterFilter"(): $CharacterFilter
get "doubleCharacterFiler"(): $CharacterFilter
get "integerCharacterFiler"(): $CharacterFilter
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CharacterFilter$Type = ($CharacterFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CharacterFilter_ = $CharacterFilter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/cursor/$CursorEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"
import {$CursorElement, $CursorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/cursor/$CursorElement"

export class $CursorEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getElement"(): $CursorElement
get "element"(): $CursorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CursorEditorElement$Type = ($CursorEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CursorEditorElement_ = $CursorEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ButtonElement, $ButtonElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonElement"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ButtonEditorElement, $ButtonEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonEditorElement"

export class $ButtonElementBuilder extends $ElementBuilder<($ButtonElement), ($ButtonEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "buildDefaultInstance"(): $ButtonElement
public "wrapIntoEditorElement"(arg0: $ButtonElement$Type, arg1: $LayoutEditorScreen$Type): $ButtonEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ButtonElementBuilder$Type = ($ButtonElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ButtonElementBuilder_ = $ButtonElementBuilder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$EscapeLT" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JStylerObj$StringProtector, $JStylerObj$StringProtector$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$StringProtector"

export class $JStylerObj$EscapeLT implements $JStylerObj$StringProtector {


public "escape"(arg0: string, arg1: $Appendable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JStylerObj$EscapeLT$Type = ($JStylerObj$EscapeLT);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JStylerObj$EscapeLT_ = $JStylerObj$EscapeLT$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$CompiledPath" {
import {$RootPathToken, $RootPathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$RootPathToken"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$Path, $Path$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path"

export class $CompiledPath implements $Path {

constructor(arg0: $RootPathToken$Type, arg1: boolean)

public "toString"(): string
public "getRoot"(): $RootPathToken
public "evaluate"(arg0: any, arg1: any, arg2: $Configuration$Type, arg3: boolean): $EvaluationContext
public "evaluate"(arg0: any, arg1: any, arg2: $Configuration$Type): $EvaluationContext
public "isFunctionPath"(): boolean
public "isRootPath"(): boolean
public "isDefinite"(): boolean
get "root"(): $RootPathToken
get "functionPath"(): boolean
get "rootPath"(): boolean
get "definite"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompiledPath$Type = ($CompiledPath);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompiledPath_ = $CompiledPath$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$ModLoaderNamePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ModLoaderNamePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModLoaderNamePlaceholder$Type = ($ModLoaderNamePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModLoaderNamePlaceholder_ = $ModLoaderNamePlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/$ActionRegistry" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ActionRegistry {

constructor()

public static "register"(arg0: $Action$Type): void
public static "getActions"(): $List<($Action)>
public static "getAction"(arg0: string): $Action
get "actions"(): $List<($Action)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActionRegistry$Type = ($ActionRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActionRegistry_ = $ActionRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/image/$ImageMenuBackgroundConfigScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $ImageMenuBackgroundConfigScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "allowDone"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageMenuBackgroundConfigScreen$Type = ($ImageMenuBackgroundConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageMenuBackgroundConfigScreen_ = $ImageMenuBackgroundConfigScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$ElementStacker" {
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export interface $ElementStacker<E extends $AbstractElement> {

 "stackElements"(arg0: E, arg1: E): void
 "stackElementsSingleInternal"(arg0: $AbstractElement$Type, arg1: $AbstractElement$Type): void
 "stackElementsInternal"(arg0: $AbstractElement$Type, ...arg1: ($AbstractElement$Type)[]): E

(arg0: E, arg1: E): void
}

export namespace $ElementStacker {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementStacker$Type<E> = ($ElementStacker<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementStacker_<E> = $ElementStacker$Type<(E)>;
}}
declare module "packages/de/keksuccino/konkrete/events/$ScreenTickEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"

export class $ScreenTickEvent extends $Event {

constructor()

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenTickEvent$Type = ($ScreenTickEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenTickEvent_ = $ScreenTickEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/copyright/$TitleScreenForgeCopyrightDeepElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TitleScreenForgeCopyrightDeepElement extends $AbstractDeepElement {
 "deepElementHidden": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $DeepElementBuilder$Type<(any), (any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenForgeCopyrightDeepElement$Type = ($TitleScreenForgeCopyrightDeepElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenForgeCopyrightDeepElement_ = $TitleScreenForgeCopyrightDeepElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$DebugOverlay$LinePosition, $DebugOverlay$LinePosition$Type} from "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay$LinePosition"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$DebugOverlay$DebugOverlayLine, $DebugOverlay$DebugOverlayLine$Type} from "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay$DebugOverlayLine"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$DebugOverlay$DebugOverlaySpacerLine, $DebugOverlay$DebugOverlaySpacerLine$Type} from "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay$DebugOverlaySpacerLine"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ContainerEventHandler, $ContainerEventHandler$Type} from "packages/net/minecraft/client/gui/components/events/$ContainerEventHandler"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $DebugOverlay implements $Renderable, $NarratableEntry, $ContainerEventHandler {
 "allowRender": boolean

constructor()

public "children"(): $List<($GuiEventListener)>
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "setDragging"(arg0: boolean): void
public "setFocused"(arg0: $GuiEventListener$Type): void
public "isDragging"(): boolean
public "getFocused"(): $GuiEventListener
public "setFocused"(arg0: boolean): void
public "addLineAfter"(arg0: string, arg1: string, arg2: $DebugOverlay$LinePosition$Type, arg3: $ConsumingSupplier$Type<($DebugOverlay$DebugOverlayLine$Type), ($Component$Type)>): $DebugOverlay$DebugOverlayLine
public "addLineAfter"<T extends $DebugOverlay$DebugOverlayLine>(arg0: string, arg1: T): T
public "addSpacerLineAfter"(arg0: string, arg1: string, arg2: $DebugOverlay$LinePosition$Type, arg3: integer): $DebugOverlay$DebugOverlaySpacerLine
public "setLineTextColor"(arg0: $DrawableColor$Type): $DebugOverlay
public "setLineTextShadow"(arg0: boolean): $DebugOverlay
public "addSpacerLineAt"(arg0: integer, arg1: string, arg2: $DebugOverlay$LinePosition$Type, arg3: integer): $DebugOverlay$DebugOverlaySpacerLine
public "addLineAt"(arg0: integer, arg1: string, arg2: $DebugOverlay$LinePosition$Type, arg3: $ConsumingSupplier$Type<($DebugOverlay$DebugOverlayLine$Type), ($Component$Type)>): $DebugOverlay$DebugOverlayLine
public "addLineAt"<T extends $DebugOverlay$DebugOverlayLine>(arg0: integer, arg1: T): T
public "addLineBefore"<T extends $DebugOverlay$DebugOverlayLine>(arg0: string, arg1: T): T
public "addLineBefore"(arg0: string, arg1: string, arg2: $DebugOverlay$LinePosition$Type, arg3: $ConsumingSupplier$Type<($DebugOverlay$DebugOverlayLine$Type), ($Component$Type)>): $DebugOverlay$DebugOverlayLine
public "setLineBorderWidth"(arg0: integer): $DebugOverlay
public "addSpacerLine"(arg0: string, arg1: $DebugOverlay$LinePosition$Type, arg2: integer): $DebugOverlay$DebugOverlaySpacerLine
public "lineExists"(arg0: string): boolean
public "indexOfLine"(arg0: string): integer
public "getLine"(arg0: string): $DebugOverlay$DebugOverlayLine
public "resetOverlay"(): $DebugOverlay
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "isFocused"(): boolean
public "closeRightClickContextMenu"(): $DebugOverlay
public "setTopYOffsetSupplier"(arg0: $Supplier$Type<(integer)>): $DebugOverlay
public "setLineSpacerHeight"(arg0: integer): $DebugOverlay
public "setLineBackgroundColor"(arg0: $DrawableColor$Type): $DebugOverlay
public "setBottomYOffsetSupplier"(arg0: $Supplier$Type<(integer)>): $DebugOverlay
public "addSpacerLineBefore"(arg0: string, arg1: string, arg2: $DebugOverlay$LinePosition$Type, arg3: integer): $DebugOverlay$DebugOverlaySpacerLine
public "openRightClickContextMenu"(arg0: $ContextMenu$Type): $DebugOverlay
public "addLine"<T extends $DebugOverlay$DebugOverlayLine>(arg0: T): T
public "addLine"(arg0: string, arg1: $DebugOverlay$LinePosition$Type, arg2: $ConsumingSupplier$Type<($DebugOverlay$DebugOverlayLine$Type), ($Component$Type)>): $DebugOverlay$DebugOverlayLine
public "removeLine"(arg0: string): void
public "setFont"(arg0: $Font$Type): $DebugOverlay
public "isActive"(): boolean
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "getChildAt"(arg0: double, arg1: double): $Optional<($GuiEventListener)>
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "magicalSpecialHackyFocus"(arg0: $GuiEventListener$Type): void
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "getTabOrderGroup"(): integer
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getRectangle"(): $ScreenRectangle
public "mouseMoved"(arg0: double, arg1: double): void
set "dragging"(value: boolean)
set "focused"(value: $GuiEventListener$Type)
get "dragging"(): boolean
get "focused"(): $GuiEventListener
set "focused"(value: boolean)
set "lineTextColor"(value: $DrawableColor$Type)
set "lineTextShadow"(value: boolean)
set "lineBorderWidth"(value: integer)
get "focused"(): boolean
set "topYOffsetSupplier"(value: $Supplier$Type<(integer)>)
set "lineSpacerHeight"(value: integer)
set "lineBackgroundColor"(value: $DrawableColor$Type)
set "bottomYOffsetSupplier"(value: $Supplier$Type<(integer)>)
set "font"(value: $Font$Type)
get "active"(): boolean
get "currentFocusPath"(): $ComponentPath
get "tabOrderGroup"(): integer
get "rectangle"(): $ScreenRectangle
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugOverlay$Type = ($DebugOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugOverlay_ = $DebugOverlay$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/openal/$ALUtils" {
import {$AudioFormat, $AudioFormat$Type} from "packages/javax/sound/sampled/$AudioFormat"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ByteBuffer, $ByteBuffer$Type} from "packages/java/nio/$ByteBuffer"

export class $ALUtils {

constructor()

public static "getAudioFormatAsOpenAL"(arg0: $AudioFormat$Type): integer
public static "isOpenAlReady"(): boolean
public static "readStreamIntoBuffer"(arg0: $InputStream$Type): $ByteBuffer
get "openAlReady"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ALUtils$Type = ($ALUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ALUtils_ = $ALUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

/**
 * 
 * @deprecated
 */
export class $TextEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEditorElement$Type = ($TextEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEditorElement_ = $TextEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/text/v2/$TextEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $TextEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEditorElement$Type = ($TextEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEditorElement_ = $TextEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/$FileMediaType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $FileMediaType extends $Enum<($FileMediaType)> {
static readonly "IMAGE": $FileMediaType
static readonly "VIDEO": $FileMediaType
static readonly "AUDIO": $FileMediaType
static readonly "TEXT": $FileMediaType
static readonly "OTHER": $FileMediaType


public static "values"(): ($FileMediaType)[]
public static "valueOf"(arg0: string): $FileMediaType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileMediaType$Type = (("image") | ("other") | ("video") | ("audio") | ("text")) | ($FileMediaType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileMediaType_ = $FileMediaType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$InputFieldElement, $InputFieldElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $InputFieldEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getElement"(): $InputFieldElement
get "element"(): $InputFieldElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputFieldEditorElement$Type = ($InputFieldEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputFieldEditorElement_ = $InputFieldEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/shape/$ShapeElement$Shape" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ShapeElement$Shape extends $Enum<($ShapeElement$Shape)> {
static readonly "RECTANGLE": $ShapeElement$Shape
readonly "name": string


public static "values"(): ($ShapeElement$Shape)[]
public static "valueOf"(arg0: string): $ShapeElement$Shape
public static "getByName"(arg0: string): $ShapeElement$Shape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeElement$Shape$Type = (("rectangle")) | ($ShapeElement$Shape);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeElement$Shape_ = $ShapeElement$Shape$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/contexts/$WidgetIdentificationContexts" {
import {$DeathScreenWidgetIdentificationContext, $DeathScreenWidgetIdentificationContext$Type} from "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/contexts/$DeathScreenWidgetIdentificationContext"
import {$TitleScreenWidgetIdentificationContext, $TitleScreenWidgetIdentificationContext$Type} from "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/contexts/$TitleScreenWidgetIdentificationContext"
import {$PauseScreenWidgetIdentificationContext, $PauseScreenWidgetIdentificationContext$Type} from "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/contexts/$PauseScreenWidgetIdentificationContext"

export class $WidgetIdentificationContexts {
static readonly "TITLE_SCREEN_CONTEXT": $TitleScreenWidgetIdentificationContext
static readonly "DEATH_SCREEN_CONTEXT": $DeathScreenWidgetIdentificationContext
static readonly "PAUSE_SCREEN_CONTEXT": $PauseScreenWidgetIdentificationContext

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetIdentificationContexts$Type = ($WidgetIdentificationContexts);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetIdentificationContexts_ = $WidgetIdentificationContexts$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/$TextFormattingUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $TextFormattingUtils {

constructor()

public static "replaceFormattingCodes"(arg0: string, arg1: string, arg2: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextFormattingUtils$Type = ($TextFormattingUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextFormattingUtils_ = $TextFormattingUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$ElementMemories" {
import {$RuntimePropertyContainer, $RuntimePropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$RuntimePropertyContainer"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"

export class $ElementMemories {

constructor()

public static "init"(): void
public static "clearMemories"(): void
public "onReloadMod"(arg0: $ModReloadEvent$Type): void
public static "getMemory"(arg0: string): $RuntimePropertyContainer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementMemories$Type = ($ElementMemories);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementMemories_ = $ElementMemories$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/$TextEditorFormattingRules" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $TextEditorFormattingRules {

constructor()

public static "getRules"(): $List<($TextEditorFormattingRule)>
public static "addRuleAtBottom"(arg0: $Class$Type<(any)>): void
public static "addRuleAtTop"(arg0: $Class$Type<(any)>): void
get "rules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEditorFormattingRules$Type = ($TextEditorFormattingRules);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEditorFormattingRules_ = $TextEditorFormattingRules$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/$Expression" {
import {$ExecutorService, $ExecutorService$Type} from "packages/java/util/concurrent/$ExecutorService"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Future, $Future$Type} from "packages/java/util/concurrent/$Future"
import {$ValidationResult, $ValidationResult$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/$ValidationResult"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Expression {

constructor(arg0: $Expression$Type)

public "evaluateAsync"(arg0: $ExecutorService$Type): $Future<(double)>
public "validate"(): $ValidationResult
public "validate"(arg0: boolean): $ValidationResult
public "evaluate"(): double
public "clearVariables"(): $Expression
public "setVariable"(arg0: string, arg1: double): $Expression
public "setVariables"(arg0: $Map$Type<(string), (double)>): $Expression
public "getVariableNames"(): $Set<(string)>
set "variables"(value: $Map$Type<(string), (double)>)
get "variableNames"(): $Set<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Expression$Type = ($Expression);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Expression_ = $Expression$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/parser/$ParseException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$Exception, $Exception$Type} from "packages/java/lang/$Exception"

export class $ParseException extends $Exception {
static readonly "ERROR_UNEXPECTED_CHAR": integer
static readonly "ERROR_UNEXPECTED_TOKEN": integer
static readonly "ERROR_UNEXPECTED_EXCEPTION": integer
static readonly "ERROR_UNEXPECTED_EOF": integer
static readonly "ERROR_UNEXPECTED_UNICODE": integer
static readonly "ERROR_UNEXPECTED_DUPLICATE_KEY": integer
static readonly "ERROR_UNEXPECTED_LEADING_0": integer

constructor(arg0: integer, arg1: integer, arg2: any)
constructor(arg0: integer, arg1: $Throwable$Type)

public "getUnexpectedObject"(): any
public "getPosition"(): integer
public "getErrorType"(): integer
get "unexpectedObject"(): any
get "position"(): integer
get "errorType"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParseException$Type = ($ParseException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParseException_ = $ParseException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/animation/$AnimationMenuBackground" {
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MenuBackground, $MenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackground"

export class $AnimationMenuBackground extends $MenuBackground {
 "animationName": string
 "restartOnMenuLoad": boolean
readonly "builder": $MenuBackgroundBuilder<(any)>
 "opacity": float
 "keepBackgroundAspectRatio": boolean

constructor(arg0: $MenuBackgroundBuilder$Type<($AnimationMenuBackground$Type)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationMenuBackground$Type = ($AnimationMenuBackground);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationMenuBackground_ = $AnimationMenuBackground$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/brackets/$HighlightCurlyBracketsFormattingRule" {
import {$HighlightBracketsFormattingRuleBase, $HighlightBracketsFormattingRuleBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/brackets/$HighlightBracketsFormattingRuleBase"

export class $HighlightCurlyBracketsFormattingRule extends $HighlightBracketsFormattingRuleBase {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HighlightCurlyBracketsFormattingRule$Type = ($HighlightCurlyBracketsFormattingRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HighlightCurlyBracketsFormattingRule_ = $HighlightCurlyBracketsFormattingRule$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ImageResourceHandler" {
import {$ImageFileType, $ImageFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$ImageFileType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$ResourceHandler, $ResourceHandler$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceHandler"

export class $ImageResourceHandler extends $ResourceHandler<($ITexture), ($ImageFileType)> {
static readonly "INSTANCE": $ImageResourceHandler

constructor()

public "getAllowedFileTypes"(): $List<($ImageFileType)>
get "allowedFileTypes"(): $List<($ImageFileType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageResourceHandler$Type = ($ImageResourceHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageResourceHandler_ = $ImageResourceHandler$Type;
}}
declare module "packages/de/keksuccino/konkrete/input/$CharData" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CharData {
readonly "typedChar": character
readonly "modfiers": integer

constructor(arg0: character, arg1: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CharData$Type = ($CharData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CharData_ = $CharData$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PredicateContextImpl" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Path, $Path$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path"

export class $PredicateContextImpl implements $Predicate$PredicateContext {

constructor(arg0: any, arg1: any, arg2: $Configuration$Type, arg3: $HashMap$Type<($Path$Type), (any)>)

public "root"(): any
public "configuration"(): $Configuration
public "item"<T>(arg0: $Class$Type<(T)>): T
public "item"(): any
public "evaluate"(arg0: $Path$Type): any
public "documentPathCache"(): $HashMap<($Path), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PredicateContextImpl$Type = ($PredicateContextImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PredicateContextImpl_ = $PredicateContextImpl$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/latebinding/$PathLateBindingValue" {
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Path, $Path$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path"
import {$ILateBindingValue, $ILateBindingValue$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/latebinding/$ILateBindingValue"

export class $PathLateBindingValue implements $ILateBindingValue {

constructor(arg0: $Path$Type, arg1: any, arg2: $Configuration$Type)

public "get"(): any
public "equals"(arg0: any): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathLateBindingValue$Type = ($PathLateBindingValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathLateBindingValue_ = $PathLateBindingValue$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/$FileTypeRegistry" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"

export class $FileTypeRegistry {

constructor()

public static "register"(arg0: string, arg1: $FileType$Type<(any)>): void
public static "getFileTypes"(): $List<($FileType<(any)>)>
public static "getFileType"(arg0: string): $FileType<(any)>
get "fileTypes"(): $List<($FileType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileTypeRegistry$Type = ($FileTypeRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileTypeRegistry_ = $FileTypeRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layer/$ScreenCustomizationLayer$RandomLayoutContainer" {
import {$Layout, $Layout$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ScreenCustomizationLayer, $ScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/layer/$ScreenCustomizationLayer"

export class $ScreenCustomizationLayer$RandomLayoutContainer {
readonly "id": string
 "parent": $ScreenCustomizationLayer

constructor(arg0: string, arg1: $ScreenCustomizationLayer$Type)

public "addLayouts"(arg0: $List$Type<($Layout$Type)>): void
public "resetLastLayout"(): void
public "isOnlyFirstTime"(): boolean
public "addLayout"(arg0: $Layout$Type): void
public "setOnlyFirstTime"(arg0: boolean): void
public "clearLayouts"(): void
public "getLayouts"(): $List<($Layout)>
public "getRandomLayout"(): $Layout
get "onlyFirstTime"(): boolean
set "onlyFirstTime"(value: boolean)
get "layouts"(): $List<($Layout)>
get "randomLayout"(): $Layout
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCustomizationLayer$RandomLayoutContainer$Type = ($ScreenCustomizationLayer$RandomLayoutContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCustomizationLayer$RandomLayoutContainer_ = $ScreenCustomizationLayer$RandomLayoutContainer$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$EvaluatorFactory" {
import {$Evaluator, $Evaluator$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$Evaluator"
import {$RelationalOperator, $RelationalOperator$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$RelationalOperator"

export class $EvaluatorFactory {

constructor()

public static "createEvaluator"(arg0: $RelationalOperator$Type): $Evaluator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvaluatorFactory$Type = ($EvaluatorFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvaluatorFactory_ = $EvaluatorFactory$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/mapper/$GsonMappingProvider" {
import {$TypeRef, $TypeRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$TypeRef"
import {$Gson, $Gson$Type} from "packages/com/google/gson/$Gson"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Callable, $Callable$Type} from "packages/java/util/concurrent/$Callable"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$MappingProvider, $MappingProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/mapper/$MappingProvider"

export class $GsonMappingProvider implements $MappingProvider {

constructor()
constructor(arg0: $Callable$Type<($Gson$Type)>)
constructor(arg0: $Gson$Type)

public "map"<T>(arg0: any, arg1: $TypeRef$Type<(T)>, arg2: $Configuration$Type): T
public "map"<T>(arg0: any, arg1: $Class$Type<(T)>, arg2: $Configuration$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GsonMappingProvider$Type = ($GsonMappingProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GsonMappingProvider_ = $GsonMappingProvider$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerVersionPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ServerVersionPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerVersionPlaceholder$Type = ($ServerVersionPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerVersionPlaceholder_ = $ServerVersionPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/musiccontroller/$MusicControllerHandler" {
import {$MusicControllerElement, $MusicControllerElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/musiccontroller/$MusicControllerElement"
import {$ClientTickEvent$Post, $ClientTickEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Post"

export class $MusicControllerHandler {

constructor()

public static "notify"(arg0: $MusicControllerElement$Type): void
public static "init"(): void
public static "shouldPlayMenuMusic"(): boolean
public static "shouldPlayWorldMusic"(): boolean
public "onClientTickPost"(arg0: $ClientTickEvent$Post$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MusicControllerHandler$Type = ($MusicControllerHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MusicControllerHandler_ = $MusicControllerHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/platform/$ForgePlatformHelper" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$IPlatformHelper, $IPlatformHelper$Type} from "packages/de/keksuccino/fancymenu/platform/services/$IPlatformHelper"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $ForgePlatformHelper implements $IPlatformHelper {

constructor()

public "isOnClient"(): boolean
public "getLoadedModIds"(): $List<(string)>
public "getKeyMappingKey"(arg0: $KeyMapping$Type): $InputConstants$Key
public "getLoaderVersion"(): string
public "isDevelopmentEnvironment"(): boolean
public "getPlatformName"(): string
public "getModVersion"(arg0: string): string
public "getPlatformDisplayName"(): string
public "isModLoaded"(arg0: string): boolean
public "getEnvironmentName"(): string
get "onClient"(): boolean
get "loadedModIds"(): $List<(string)>
get "loaderVersion"(): string
get "developmentEnvironment"(): boolean
get "platformName"(): string
get "platformDisplayName"(): string
get "environmentName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgePlatformHelper$Type = ($ForgePlatformHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgePlatformHelper_ = $ForgePlatformHelper$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer" {
import {$TitleScreenRealmsNotificationBuilder, $TitleScreenRealmsNotificationBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/realmsnotification/$TitleScreenRealmsNotificationBuilder"
import {$TitleScreenLogoBuilder, $TitleScreenLogoBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/logo/$TitleScreenLogoBuilder"
import {$TitleScreenSplashBuilder, $TitleScreenSplashBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/splash/$TitleScreenSplashBuilder"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"
import {$TitleScreenBrandingBuilder, $TitleScreenBrandingBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/branding/$TitleScreenBrandingBuilder"

export class $TitleScreenLayer extends $DeepScreenCustomizationLayer {
readonly "logo": $TitleScreenLogoBuilder
readonly "branding": $TitleScreenBrandingBuilder
readonly "realmsNotification": $TitleScreenRealmsNotificationBuilder
readonly "splash": $TitleScreenSplashBuilder

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenLayer$Type = ($TitleScreenLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenLayer_ = $TitleScreenLayer$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$JsonFormatter" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $JsonFormatter {

constructor()

public static "prettyPrint"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonFormatter$Type = ($JsonFormatter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonFormatter_ = $JsonFormatter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea" {
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$ScrollAreaEntry, $ScrollAreaEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/entry/$ScrollAreaEntry"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$UIBase, $UIBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/$UIBase"
import {$ScrollBar, $ScrollBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollbar/$ScrollBar"

export class $ScrollArea extends $UIBase implements $GuiEventListener, $Renderable, $NarratableEntry {
 "verticalScrollBar": $ScrollBar
 "horizontalScrollBar": $ScrollBar
 "backgroundColor": $Supplier<($DrawableColor)>
 "borderColor": $Supplier<($DrawableColor)>
 "makeEntriesWidthOfArea": boolean
 "minimumEntryWidthIsAreaWidth": boolean
 "makeAllEntriesWidthOfWidestEntry": boolean
 "overriddenTotalScrollWidth": float
 "overriddenTotalScrollHeight": float
 "correctYOnAddingRemovingEntries": boolean
 "renderScale": float
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: float, arg1: float, arg2: float, arg3: float)

public "getInnerY"(): float
public "getInnerX"(): float
public "getFocusedEntry"(): $ScrollAreaEntry
public "addEntry"(arg0: $ScrollAreaEntry$Type): void
public "getEntries"(): $List<($ScrollAreaEntry)>
public "getEntry"(arg0: integer): $ScrollAreaEntry
public "removeEntry"(arg0: $ScrollAreaEntry$Type): void
public "setWidth"(arg0: float): void
public "setWidth"(arg0: float, arg1: boolean): void
public "correctYScrollAfterAddingOrRemovingEntries"(arg0: boolean, ...arg1: ($ScrollAreaEntry$Type)[]): void
public "isMouseOver"(arg0: double, arg1: double): boolean
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "setFocused"(arg0: boolean): void
public "setX"(arg0: float, arg1: boolean): void
public "setX"(arg0: float): void
public "setY"(arg0: float): void
public "setY"(arg0: float, arg1: boolean): void
public "isHovered"(): boolean
public "getTotalEntryWidth"(): float
public "renderEntries"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isInnerAreaHovered"(): boolean
public "getEntryCount"(): integer
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getTotalEntryHeight"(): float
public "getBorderThickness"(): float
public "setApplyScissor"(arg0: boolean): void
public "getWidthWithBorder"(): float
public "getYWithBorder"(): float
public "getXWithBorder"(): float
public "updateScrollArea"(): void
public "getInnerWidth"(): float
public "getInnerHeight"(): float
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "isFocused"(): boolean
public "getHeightWithBorder"(): float
public "clearEntries"(): void
public "renderBorder"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setHeight"(arg0: float): void
public "setHeight"(arg0: float, arg1: boolean): void
public "renderBackground"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isMouseInteractingWithGrabbers"(): boolean
public "getTotalScrollHeight"(): float
public "getTotalScrollWidth"(): float
public "setBorderThickness"(arg0: float): void
public "getIndexOfEntry"(arg0: $ScrollAreaEntry$Type): integer
public "updateEntries"(arg0: $Consumer$Type<($ScrollAreaEntry$Type)>): void
public "isApplyScissor"(): boolean
public "resetScrollOnFit"(): void
public "addEntryAtIndex"(arg0: $ScrollAreaEntry$Type, arg1: integer): void
public "removeEntryAtIndex"(arg0: integer): void
public "makeCurrentEntriesSameWidth"(): void
public "isMouseOverInnerArea"(arg0: double, arg1: double): boolean
public "getFocusedEntryIndex"(): integer
public "updateWheelScrollSpeed"(): void
public "getEntryRenderOffsetY"(): float
public "getEntryRenderOffsetY"(arg0: float): float
public "getEntryRenderOffsetX"(): float
public "getEntryRenderOffsetX"(arg0: float): float
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getRectangle"(): $ScreenRectangle
public "charTyped"(arg0: character, arg1: integer): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "isActive"(): boolean
public "getTabOrderGroup"(): integer
get "innerY"(): float
get "innerX"(): float
get "focusedEntry"(): $ScrollAreaEntry
get "entries"(): $List<($ScrollAreaEntry)>
set "width"(value: float)
set "focused"(value: boolean)
set "x"(value: float)
set "y"(value: float)
get "hovered"(): boolean
get "totalEntryWidth"(): float
get "innerAreaHovered"(): boolean
get "entryCount"(): integer
get "totalEntryHeight"(): float
get "borderThickness"(): float
set "applyScissor"(value: boolean)
get "widthWithBorder"(): float
get "yWithBorder"(): float
get "xWithBorder"(): float
get "innerWidth"(): float
get "innerHeight"(): float
get "focused"(): boolean
get "heightWithBorder"(): float
set "height"(value: float)
get "mouseInteractingWithGrabbers"(): boolean
get "totalScrollHeight"(): float
get "totalScrollWidth"(): float
set "borderThickness"(value: float)
get "applyScissor"(): boolean
get "focusedEntryIndex"(): integer
get "entryRenderOffsetY"(): float
get "entryRenderOffsetX"(): float
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "active"(): boolean
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollArea$Type = ($ScrollArea);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollArea_ = $ScrollArea$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Pre" {
import {$ClientTickEvent, $ClientTickEvent$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent"

export class $ClientTickEvent$Pre extends $ClientTickEvent {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTickEvent$Pre$Type = ($ClientTickEvent$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTickEvent$Pre_ = $ClientTickEvent$Pre$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioElementBuilder" {
import {$ClientTickEvent$Pre, $ClientTickEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Pre"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$AudioEditorElement, $AudioEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioEditorElement"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$AudioElement, $AudioElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioElement"
import {$InitOrResizeScreenStartingEvent, $InitOrResizeScreenStartingEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenStartingEvent"
import {$InitOrResizeScreenCompletedEvent, $InitOrResizeScreenCompletedEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenCompletedEvent"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

export class $AudioElementBuilder extends $ElementBuilder<($AudioElement), ($AudioEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "deserializeElement"(arg0: $SerializedElement$Type): $AudioElement
public "onClientTickPre"(arg0: $ClientTickEvent$Pre$Type): void
public "onInitOrResizeStarting"(arg0: $InitOrResizeScreenStartingEvent$Type): void
public "onInitOrResizeScreenCompleted"(arg0: $InitOrResizeScreenCompletedEvent$Type): void
public "onModReload"(arg0: $ModReloadEvent$Type): void
public "buildDefaultInstance"(): $AudioElement
public "wrapIntoEditorElement"(arg0: $AudioElement$Type, arg1: $LayoutEditorScreen$Type): $AudioEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AudioElementBuilder$Type = ($AudioElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AudioElementBuilder_ = $AudioElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsTextRequirement" {
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsTextRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "editValue"(arg0: $Screen$Type, arg1: $LoadingRequirementInstance$Type): void
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsTextRequirement$Type = ($IsTextRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsTextRequirement_ = $IsTextRequirement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes" {
import {$ValueNodes$BooleanNode, $ValueNodes$BooleanNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$BooleanNode"
import {$ValueNodes$UndefinedNode, $ValueNodes$UndefinedNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$UndefinedNode"
import {$ValueNodes$NullNode, $ValueNodes$NullNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$NullNode"

export interface $ValueNodes {

}

export namespace $ValueNodes {
const NULL_NODE: $ValueNodes$NullNode
const TRUE: $ValueNodes$BooleanNode
const FALSE: $ValueNodes$BooleanNode
const UNDEFINED: $ValueNodes$UndefinedNode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$Type = ($ValueNodes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes_ = $ValueNodes$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/screen/dummyscreen/$DummyScreenRegistry" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$DummyScreenBuilder, $DummyScreenBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/screen/dummyscreen/$DummyScreenBuilder"

export class $DummyScreenRegistry {

constructor()

public static "register"(arg0: $DummyScreenBuilder$Type): void
public static "getBuilderFor"(arg0: string): $DummyScreenBuilder
public static "getBuilders"(): $List<($DummyScreenBuilder)>
get "builders"(): $List<($DummyScreenBuilder)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummyScreenRegistry$Type = ($DummyScreenRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummyScreenRegistry_ = $DummyScreenRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/enums/$LocalizedCycleEnum" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$LocalizedEnum, $LocalizedEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedEnum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $LocalizedCycleEnum<E> extends $LocalizedEnum<(E)> {

 "getCycleComponentStyle"(): $Style
 "cycle"(arg0: E): $LocalizedGenericValueCycle<(E)>
 "cycle"(): $LocalizedGenericValueCycle<(E)>
 "getCycleComponent"(): $MutableComponent
 "getValueComponentStyle"(): $Style
 "getLocalizationKeyBase"(): string
 "getValueLocalizationKey"(): string
 "getValueComponent"(): $MutableComponent
 "getName"(): string
 "getByNameInternal"(arg0: string): E
 "getValues"(): (E)[]
}

export namespace $LocalizedCycleEnum {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalizedCycleEnum$Type<E> = ($LocalizedCycleEnum<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalizedCycleEnum_<E> = $LocalizedCycleEnum$Type<(E)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/preload/$ResourcePreLoader" {
import {$ResourceSource, $ResourceSource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSource"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ResourcePreLoader {
static readonly "CUBIC_PANORAMA_SOURCE_PREFIX": string
static readonly "SLIDESHOW_SOURCE_PREFIX": string

constructor()

public static "addResourceSource"(arg0: $ResourceSource$Type, arg1: string, arg2: boolean): string
public static "preLoadAll"(arg0: long): void
public static "buildSourceFromString"(arg0: string): $ResourceSource
public static "isResourceSourceRegistered"(arg0: $ResourceSource$Type, arg1: string): boolean
public static "removeResourceSource"(arg0: $ResourceSource$Type, arg1: string, arg2: boolean): string
public static "getRegisteredResourceSources"(arg0: string): $List<($ResourceSource)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourcePreLoader$Type = ($ResourcePreLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourcePreLoader_ = $ResourcePreLoader$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$NumberNode" {
import {$ValueNodes$StringNode, $ValueNodes$StringNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$StringNode"
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$BigDecimal, $BigDecimal$Type} from "packages/java/math/$BigDecimal"

export class $ValueNodes$NumberNode extends $ValueNode {
static "NAN": $ValueNodes$NumberNode


public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "getNumber"(): $BigDecimal
public "isNumberNode"(): boolean
public "asNumberNode"(): $ValueNodes$NumberNode
public "asStringNode"(): $ValueNodes$StringNode
get "number"(): $BigDecimal
get "numberNode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$NumberNode$Type = ($ValueNodes$NumberNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$NumberNode_ = $ValueNodes$NumberNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ApngTexture$DecodedApngImage" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Argb8888BitmapSequence, $Argb8888BitmapSequence$Type} from "packages/net/ellerton/japng/argb8888/$Argb8888BitmapSequence"

export class $ApngTexture$DecodedApngImage extends $Record {

constructor(sequence: $Argb8888BitmapSequence$Type, imageWidth: integer, imageHeight: integer, numPlays: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "sequence"(): $Argb8888BitmapSequence
public "imageHeight"(): integer
public "imageWidth"(): integer
public "numPlays"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ApngTexture$DecodedApngImage$Type = ($ApngTexture$DecodedApngImage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ApngTexture$DecodedApngImage_ = $ApngTexture$DecodedApngImage$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry$ClickAction" {
import {$ContextMenu$ClickableContextMenuEntry, $ContextMenu$ClickableContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export interface $ContextMenu$ClickableContextMenuEntry$ClickAction {

 "onClick"(arg0: $ContextMenu$Type, arg1: $ContextMenu$ClickableContextMenuEntry$Type<(any)>): void

(arg0: $ContextMenu$Type, arg1: $ContextMenu$ClickableContextMenuEntry$Type<(any)>): void
}

export namespace $ContextMenu$ClickableContextMenuEntry$ClickAction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$ClickableContextMenuEntry$ClickAction$Type = ($ContextMenu$ClickableContextMenuEntry$ClickAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$ClickableContextMenuEntry$ClickAction_ = $ContextMenu$ClickableContextMenuEntry$ClickAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/$Options" {
import {$AbstractOptions$Option, $AbstractOptions$Option$Type} from "packages/de/keksuccino/fancymenu/util/$AbstractOptions$Option"
import {$AbstractOptions, $AbstractOptions$Type} from "packages/de/keksuccino/fancymenu/util/$AbstractOptions"

export class $Options extends $AbstractOptions {
readonly "playVanillaMenuMusic": $AbstractOptions$Option<(boolean)>
readonly "defaultGuiScale": $AbstractOptions$Option<(integer)>
readonly "forceFullscreen": $AbstractOptions$Option<(boolean)>
readonly "advancedCustomizationMode": $AbstractOptions$Option<(boolean)>
readonly "showCustomizationOverlay": $AbstractOptions$Option<(boolean)>
readonly "modpackMode": $AbstractOptions$Option<(boolean)>
readonly "gameIntroAnimation": $AbstractOptions$Option<(string)>
readonly "gameIntroAllowSkip": $AbstractOptions$Option<(boolean)>
readonly "gameIntroFadeOut": $AbstractOptions$Option<(boolean)>
readonly "gameIntroCustomSkipText": $AbstractOptions$Option<(string)>
readonly "preLoadAnimations": $AbstractOptions$Option<(boolean)>
readonly "preLoadResources": $AbstractOptions$Option<(string)>
readonly "showCustomWindowIcon": $AbstractOptions$Option<(boolean)>
readonly "customWindowIcon16": $AbstractOptions$Option<(string)>
readonly "customWindowIcon32": $AbstractOptions$Option<(string)>
readonly "customWindowIconMacOS": $AbstractOptions$Option<(string)>
readonly "customWindowTitle": $AbstractOptions$Option<(string)>
readonly "showMultiplayerScreenServerIcons": $AbstractOptions$Option<(boolean)>
readonly "showSingleplayerScreenWorldIcons": $AbstractOptions$Option<(boolean)>
readonly "showLayoutEditorGrid": $AbstractOptions$Option<(boolean)>
readonly "layoutEditorGridSize": $AbstractOptions$Option<(integer)>
readonly "showAllAnchorOverlayConnections": $AbstractOptions$Option<(boolean)>
readonly "anchorOverlayChangeAnchorOnAreaHover": $AbstractOptions$Option<(boolean)>
readonly "anchorOverlayChangeAnchorOnElementHover": $AbstractOptions$Option<(boolean)>
readonly "invertAnchorOverlayColor": $AbstractOptions$Option<(boolean)>
readonly "anchorOverlayOpacityPercentageNormal": $AbstractOptions$Option<(float)>
readonly "anchorOverlayOpacityPercentageBusy": $AbstractOptions$Option<(float)>
readonly "anchorOverlayColorBaseOverride": $AbstractOptions$Option<(string)>
readonly "anchorOverlayColorBorderOverride": $AbstractOptions$Option<(string)>
readonly "anchorOverlayVisibilityMode": $AbstractOptions$Option<(string)>
readonly "anchorOverlayHoverChargingTimeSeconds": $AbstractOptions$Option<(double)>
readonly "uiScale": $AbstractOptions$Option<(float)>
readonly "playUiClickSounds": $AbstractOptions$Option<(boolean)>
readonly "enableUiTextShadow": $AbstractOptions$Option<(boolean)>
readonly "contextMenuHoverOpenSpeed": $AbstractOptions$Option<(integer)>
readonly "uiTheme": $AbstractOptions$Option<(string)>
readonly "showDebugOverlay": $AbstractOptions$Option<(boolean)>
readonly "debugOverlayShowBasicScreenCategory": $AbstractOptions$Option<(boolean)>
readonly "debugOverlayShowAdvancedScreenCategory": $AbstractOptions$Option<(boolean)>
readonly "debugOverlayShowResourcesCategory": $AbstractOptions$Option<(boolean)>
readonly "debugOverlayShowSystemCategory": $AbstractOptions$Option<(boolean)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Options$Type = ($Options);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Options_ = $Options$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$MinecraftResourceReloadObserver" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$MinecraftResourceReloadObserver$ReloadAction, $MinecraftResourceReloadObserver$ReloadAction$Type} from "packages/de/keksuccino/fancymenu/util/$MinecraftResourceReloadObserver$ReloadAction"
import {$List, $List$Type} from "packages/java/util/$List"

export class $MinecraftResourceReloadObserver {

constructor()

public static "getReloadListeners"(): $List<($Consumer<($MinecraftResourceReloadObserver$ReloadAction)>)>
public static "addReloadListener"(arg0: $Consumer$Type<($MinecraftResourceReloadObserver$ReloadAction$Type)>): long
public static "removeReloadListener"(arg0: long): void
get "reloadListeners"(): $List<($Consumer<($MinecraftResourceReloadObserver$ReloadAction)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinecraftResourceReloadObserver$Type = ($MinecraftResourceReloadObserver);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinecraftResourceReloadObserver_ = $MinecraftResourceReloadObserver$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$MousePosYPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MousePosYPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MousePosYPlaceholder$Type = ($MousePosYPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MousePosYPlaceholder_ = $MousePosYPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Tokenizer" {
import {$Function, $Function$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/function/$Function"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Token, $Token$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token"
import {$Operator, $Operator$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/operator/$Operator"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Tokenizer {

constructor(arg0: string, arg1: $Map$Type<(string), ($Function$Type)>, arg2: $Map$Type<(string), ($Operator$Type)>, arg3: $Set$Type<(string)>, arg4: boolean)
constructor(arg0: string, arg1: $Map$Type<(string), ($Function$Type)>, arg2: $Map$Type<(string), ($Operator$Type)>, arg3: $Set$Type<(string)>)

public "hasNext"(): boolean
public "nextToken"(): $Token
public static "isAlphabetic"(arg0: integer): boolean
public static "isVariableOrFunctionCharacter"(arg0: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Tokenizer$Type = ($Tokenizer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Tokenizer_ = $Tokenizer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$IExtendedWidget" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $IExtendedWidget {

 "renderScrollingLabelInternal"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $Component$Type, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: boolean, arg8: integer): void
 "renderScrollingLabel"(arg0: $AbstractWidget$Type, arg1: $GuiGraphics$Type, arg2: $Font$Type, arg3: integer, arg4: boolean, arg5: integer): void
}

export namespace $IExtendedWidget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IExtendedWidget$Type = ($IExtendedWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IExtendedWidget_ = $IExtendedWidget$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsFullscreenRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsFullscreenRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsFullscreenRequirement$Type = ($IsFullscreenRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsFullscreenRequirement_ = $IsFullscreenRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement" {
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"

export class $SerializedElement extends $PropertyContainer {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SerializedElement$Type = ($SerializedElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SerializedElement_ = $SerializedElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$BooleanSupplier" {
import {$ContextMenu$ContextMenuEntry, $ContextMenu$ContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuEntry"
import {$ContextMenu$Supplier, $ContextMenu$Supplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$Supplier"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export interface $ContextMenu$BooleanSupplier extends $ContextMenu$Supplier<(boolean)> {

 "getBoolean"(arg0: $ContextMenu$Type, arg1: $ContextMenu$ContextMenuEntry$Type<(any)>): boolean
 "get"(arg0: $ContextMenu$Type, arg1: $ContextMenu$ContextMenuEntry$Type<(any)>): boolean

(arg0: $ContextMenu$Type, arg1: $ContextMenu$ContextMenuEntry$Type<(any)>): boolean
}

export namespace $ContextMenu$BooleanSupplier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$BooleanSupplier$Type = ($ContextMenu$BooleanSupplier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$BooleanSupplier_ = $ContextMenu$BooleanSupplier$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONNavi" {
import {$JSONAwareEx, $JSONAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAwareEx"
import {$JSONArray, $JSONArray$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONArray"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"
import {$JSONObject, $JSONObject$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONObject"

export class $JSONNavi<T> {

constructor(arg0: string)
constructor(arg0: $JsonReaderI$Type<(any)>)
constructor(arg0: string, arg1: $Class$Type<(T)>)
constructor(arg0: string, arg1: $JsonReaderI$Type<(T)>)

public static "newInstanceArray"(): $JSONNavi<($JSONArray)>
public static "newInstanceObject"(): $JSONNavi<($JSONObject)>
public "asIntegerObj"(): integer
public "hasFailure"(): boolean
public "getCurrentObject"(): any
public "asLongObj"(): long
public "asFloatObj"(): float
public "asDoubleObj"(): double
public "atNext"(): $JSONNavi<(any)>
public "getJPath"(): string
public "asBooleanObj"(): boolean
public "add"(...arg0: (any)[]): $JSONNavi<(T)>
public "get"(arg0: string): any
public "get"(arg0: integer): any
public "toString"(): string
public "toString"(arg0: $JSONStyle$Type): string
public "isArray"(): boolean
public "getInt"(arg0: string): integer
public "getDouble"(arg0: string): double
public static "newInstance"(): $JSONNavi<($JSONAwareEx)>
public "array"(): $JSONNavi<(T)>
public "set"(arg0: string, arg1: long): $JSONNavi<(T)>
public "set"(arg0: string, arg1: number): $JSONNavi<(T)>
public "set"(arg0: number): $JSONNavi<(T)>
public "set"(arg0: boolean): $JSONNavi<(T)>
public "set"(arg0: string): $JSONNavi<(T)>
public "set"(arg0: string, arg1: double): $JSONNavi<(T)>
public "set"(arg0: string, arg1: integer): $JSONNavi<(T)>
public "set"(arg0: string, arg1: string): $JSONNavi<(T)>
public "set"(arg0: string, arg1: float): $JSONNavi<(T)>
public "root"(): $JSONNavi<(T)>
public "getRoot"(): T
public "getSize"(): integer
public "at"(arg0: string): $JSONNavi<(any)>
public "at"(arg0: integer): $JSONNavi<(any)>
public "getInteger"(arg0: string): integer
public "object"(): $JSONNavi<(T)>
public "up"(arg0: integer): $JSONNavi<(any)>
public "up"(): $JSONNavi<(any)>
public "asInt"(): integer
public "getString"(arg0: string): string
public "getKeys"(): $Collection<(string)>
public "asDouble"(): double
public "isObject"(): boolean
public "asString"(): string
public "hasKey"(arg0: string): boolean
public "asFloat"(): float
public "asBoolean"(): boolean
public "asLong"(): long
get "currentObject"(): any
get "jPath"(): string
get "size"(): integer
get "keys"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONNavi$Type<T> = ($JSONNavi<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONNavi_<T> = $JSONNavi$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/math/$MathUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $MathUtils {

constructor()

public static "isInteger"(arg0: string): boolean
public static "isFloat"(arg0: string): boolean
public static "isDouble"(arg0: string): boolean
public static "isIntegerOrDouble"(arg0: string): boolean
public static "isLong"(arg0: string): boolean
/**
 * 
 * @deprecated
 */
public static "isCalculateableString"(arg0: string): boolean
public static "calculateFromString"(arg0: string): double
public static "getRandomNumberInRange"(arg0: integer, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathUtils$Type = ($MathUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathUtils_ = $MathUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/realmsnotification/$TitleScreenRealmsNotificationBuilder" {
import {$TitleScreenLayer, $TitleScreenLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$TitleScreenRealmsNotificationDeepEditorElement, $TitleScreenRealmsNotificationDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/realmsnotification/$TitleScreenRealmsNotificationDeepEditorElement"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$TitleScreenRealmsNotificationDeepElement, $TitleScreenRealmsNotificationDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/realmsnotification/$TitleScreenRealmsNotificationDeepElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

export class $TitleScreenRealmsNotificationBuilder extends $DeepElementBuilder<($TitleScreenLayer), ($TitleScreenRealmsNotificationDeepElement), ($TitleScreenRealmsNotificationDeepEditorElement)> {
readonly "layer": D

constructor(arg0: $TitleScreenLayer$Type)

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "deserializeElement"(arg0: $SerializedElement$Type): $TitleScreenRealmsNotificationDeepElement
public "stackElements"(arg0: $TitleScreenRealmsNotificationDeepElement$Type, arg1: $TitleScreenRealmsNotificationDeepElement$Type): void
public "wrapIntoEditorElement"(arg0: $TitleScreenRealmsNotificationDeepElement$Type, arg1: $LayoutEditorScreen$Type): $TitleScreenRealmsNotificationDeepEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenRealmsNotificationBuilder$Type = ($TitleScreenRealmsNotificationBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenRealmsNotificationBuilder_ = $TitleScreenRealmsNotificationBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ElementHeightPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ElementHeightPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementHeightPlaceholder$Type = ($ElementHeightPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementHeightPlaceholder_ = $ElementHeightPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/brackets/$HighlightBracketsFormattingRuleBase" {
import {$TextEditorScreen, $TextEditorScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorScreen"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"
import {$TextEditorLine, $TextEditorLine$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorLine"

export class $HighlightBracketsFormattingRuleBase extends $TextEditorFormattingRule {

constructor()

public "resetRule"(arg0: $TextEditorScreen$Type): void
public "getStyle"(arg0: character, arg1: integer, arg2: integer, arg3: $TextEditorLine$Type, arg4: integer, arg5: $TextEditorScreen$Type): $Style
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HighlightBracketsFormattingRuleBase$Type = ($HighlightBracketsFormattingRuleBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HighlightBracketsFormattingRuleBase_ = $HighlightBracketsFormattingRuleBase$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/annotate/$JsonSmartAnnotation" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $JsonSmartAnnotation extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $JsonSmartAnnotation {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonSmartAnnotation$Type = ($JsonSmartAnnotation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonSmartAnnotation_ = $JsonSmartAnnotation$Type;
}}
declare module "packages/de/keksuccino/konkrete/reflection/$ReflectionHelper" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"
import {$Method, $Method$Type} from "packages/java/lang/reflect/$Method"

export class $ReflectionHelper {

constructor()

public static "getDeclaredField"(arg0: $Class$Type<(any)>, arg1: string): $Field
public static "findMethod"<T>(arg0: $Class$Type<(any)>, arg1: string, ...arg2: ($Class$Type<(any)>)[]): $Method
public static "setField"(arg0: $Field$Type, arg1: any, arg2: any): boolean
public static "findField"<T>(arg0: $Class$Type<(any)>, arg1: string): $Field
public static "setStaticFinalField"(arg0: $Field$Type, arg1: $Class$Type<(any)>, arg2: any): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReflectionHelper$Type = ($ReflectionHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReflectionHelper_ = $ReflectionHelper$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/color/colors/$TextColorFormatters" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $TextColorFormatters {

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextColorFormatters$Type = ($TextColorFormatters);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextColorFormatters_ = $TextColorFormatters$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/types/$FileTypes" {
import {$ResourceSource, $ResourceSource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSource"
import {$ImageFileType, $ImageFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$ImageFileType"
import {$File, $File$Type} from "packages/java/io/$File"
import {$AudioFileType, $AudioFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$AudioFileType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"
import {$VideoFileType, $VideoFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$VideoFileType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TextFileType, $TextFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$TextFileType"

export class $FileTypes {
static readonly "UNKNOWN": $FileType<(any)>
static readonly "JPEG_IMAGE": $ImageFileType
static readonly "PNG_IMAGE": $ImageFileType
static readonly "GIF_IMAGE": $ImageFileType
static readonly "APNG_IMAGE": $ImageFileType
static readonly "FMA_IMAGE": $ImageFileType
static readonly "OGG_AUDIO": $AudioFileType
static readonly "WAV_AUDIO": $AudioFileType
static readonly "MPEG_VIDEO": $VideoFileType
static readonly "MP4_VIDEO": $VideoFileType
static readonly "AVI_VIDEO": $VideoFileType
static readonly "TXT_TEXT": $TextFileType
static readonly "MARKDOWN_TEXT": $TextFileType
static readonly "JSON_TEXT": $TextFileType
static readonly "LOG_TEXT": $TextFileType
static readonly "LANG_TEXT": $TextFileType
static readonly "LOCAL_TEXT": $TextFileType
static readonly "PROPERTIES_TEXT": $TextFileType
static readonly "XML_TEXT": $TextFileType
static readonly "JAVASCRIPT_TEXT": $TextFileType
static readonly "HTML_TEXT": $TextFileType
static readonly "CSS_TEXT": $TextFileType
static readonly "CSV_TEXT": $TextFileType

constructor()

public static "getType"(arg0: $ResourceSource$Type, arg1: boolean): $FileType<(any)>
public static "registerAll"(): void
public static "getAllImageFileTypes"(): $List<($ImageFileType)>
public static "getAllVideoFileTypes"(): $List<($VideoFileType)>
public static "getAllAudioFileTypes"(): $List<($AudioFileType)>
public static "getAllTextFileTypes"(): $List<($TextFileType)>
public static "getAllAnimatedImageFileTypes"(): $List<($ImageFileType)>
public static "getLocationType"(arg0: $ResourceLocation$Type): $FileType<(any)>
public static "getWebType"(arg0: string, arg1: boolean): $FileType<(any)>
public static "getLocalType"(arg0: $File$Type): $FileType<(any)>
get "allImageFileTypes"(): $List<($ImageFileType)>
get "allVideoFileTypes"(): $List<($VideoFileType)>
get "allAudioFileTypes"(): $List<($AudioFileType)>
get "allTextFileTypes"(): $List<($TextFileType)>
get "allAnimatedImageFileTypes"(): $List<($ImageFileType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileTypes$Type = ($FileTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileTypes_ = $FileTypes$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/branding/$TitleScreenBrandingDeepElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TitleScreenBrandingDeepElement extends $AbstractDeepElement {
 "deepElementHidden": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $DeepElementBuilder$Type<(any), (any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenBrandingDeepElement$Type = ($TitleScreenBrandingDeepElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenBrandingDeepElement_ = $TitleScreenBrandingDeepElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListBackgroundEvent$Pre" {
import {$AbstractSelectionList, $AbstractSelectionList$Type} from "packages/net/minecraft/client/gui/components/$AbstractSelectionList"
import {$RenderGuiListBackgroundEvent, $RenderGuiListBackgroundEvent$Type} from "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListBackgroundEvent"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderGuiListBackgroundEvent$Pre extends $RenderGuiListBackgroundEvent {

constructor(arg0: $GuiGraphics$Type, arg1: $AbstractSelectionList$Type<(any)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderGuiListBackgroundEvent$Pre$Type = ($RenderGuiListBackgroundEvent$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderGuiListBackgroundEvent$Pre_ = $RenderGuiListBackgroundEvent$Pre$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioElement$AudioInstance" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $AudioElement$AudioInstance {

constructor(arg0: $ResourceSupplier$Type<($IAudio$Type)>)

public static "serializeAllToExistingContainer"(arg0: $List$Type<($AudioElement$AudioInstance$Type)>, arg1: $PropertyContainer$Type): void
public static "deserializeAllOfContainer"(arg0: $PropertyContainer$Type): $List<($AudioElement$AudioInstance)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AudioElement$AudioInstance$Type = ($AudioElement$AudioInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AudioElement$AudioInstance_ = $AudioElement$AudioInstance$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/$ResourceSource" {
import {$ResourceSourceType, $ResourceSourceType$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSourceType"

export class $ResourceSource {


public "toString"(): string
public static "of"(arg0: string, arg1: $ResourceSourceType$Type): $ResourceSource
public static "of"(arg0: string): $ResourceSource
public "getSourceWithoutPrefix"(): string
public "getSourceType"(): $ResourceSourceType
public "getSerializationSource"(): string
public "getSourceWithPrefix"(): string
get "sourceWithoutPrefix"(): string
get "sourceType"(): $ResourceSourceType
get "serializationSource"(): string
get "sourceWithPrefix"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceSource$Type = ($ResourceSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceSource_ = $ResourceSource$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/color/$TextColorFormatterRegistry" {
import {$TextColorFormatter, $TextColorFormatter$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/color/$TextColorFormatter"
import {$List, $List$Type} from "packages/java/util/$List"

export class $TextColorFormatterRegistry {

constructor()

public static "register"(arg0: string, arg1: $TextColorFormatter$Type): void
public static "getFormatter"(arg0: string): $TextColorFormatter
public static "getByCode"(arg0: character): $TextColorFormatter
public static "getFormatters"(): $List<($TextColorFormatter)>
get "formatters"(): $List<($TextColorFormatter)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextColorFormatterRegistry$Type = ($TextColorFormatterRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextColorFormatterRegistry_ = $TextColorFormatterRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/event/acara/$EventHandler" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $EventHandler {
static readonly "INSTANCE": $EventHandler

constructor()

public "registerListener"(arg0: $Consumer$Type<($EventBase$Type)>, arg1: $Class$Type<(any)>): void
public "registerListener"(arg0: $Consumer$Type<($EventBase$Type)>, arg1: $Class$Type<(any)>, arg2: integer): void
public "postEvent"(arg0: $EventBase$Type): void
public "eventsRegisteredForType"(arg0: $Class$Type<(any)>): boolean
public "registerListenersOf"(arg0: any): void
public "registerListenersOf"(arg0: $Class$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventHandler$Type = ($EventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventHandler_ = $EventHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$MathUtils" {
import {$MathUtils as $MathUtils$0, $MathUtils$Type as $MathUtils$0$Type} from "packages/de/keksuccino/konkrete/math/$MathUtils"

export class $MathUtils extends $MathUtils$0 {

constructor()

public static "round"(arg0: double, arg1: integer): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathUtils$Type = ($MathUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathUtils_ = $MathUtils$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/screens/popup/$FilePickerPopup" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$File, $File$Type} from "packages/java/io/$File"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$Popup, $Popup$Type} from "packages/de/keksuccino/konkrete/gui/screens/popup/$Popup"
import {$KeyboardData, $KeyboardData$Type} from "packages/de/keksuccino/konkrete/input/$KeyboardData"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $FilePickerPopup extends $Popup {
 "overlayColor": $Color
 "home": $File
 "directory": $File

constructor(arg0: string, arg1: string, arg2: $Popup$Type, arg3: boolean, arg4: $Consumer$Type<($File$Type)>, ...arg5: (string)[])
constructor(arg0: string, arg1: string, arg2: $Popup$Type, arg3: boolean, arg4: $Consumer$Type<($File$Type)>)

public "updateFileList"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: $Screen$Type): void
public "onEnterPressed"(arg0: $KeyboardData$Type): void
public "onEscapePressed"(arg0: $KeyboardData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilePickerPopup$Type = ($FilePickerPopup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilePickerPopup_ = $FilePickerPopup$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/animation/$AnimationMenuBackgroundConfigScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $AnimationMenuBackgroundConfigScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationMenuBackgroundConfigScreen$Type = ($AnimationMenuBackgroundConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationMenuBackgroundConfigScreen_ = $AnimationMenuBackgroundConfigScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/rendering/animation/$IAnimationRenderer" {
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $IAnimationRenderer {

 "getPath"(): string
 "currentFrame"(): integer
 "setWidth"(arg0: integer): void
 "resetAnimation"(): void
 "isReady"(): boolean
 "setLooped"(arg0: boolean): void
 "isGettingLooped"(): boolean
 "setOpacity"(arg0: float): void
 "setPosX"(arg0: integer): void
 "setPosY"(arg0: integer): void
 "prepareAnimation"(): void
 "render"(arg0: $GuiGraphics$Type): void
 "setStretchImageToScreensize"(arg0: boolean): void
 "isStretchedToStreensize"(): boolean
 "getPosY"(): integer
 "getPosX"(): integer
 "getWidth"(): integer
 "getHeight"(): integer
 "getFPS"(): integer
 "animationFrames"(): integer
 "setFPS"(arg0: integer): void
 "setHideAfterLastFrame"(arg0: boolean): void
 "setHeight"(arg0: integer): void
 "isFinished"(): boolean
}

export namespace $IAnimationRenderer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAnimationRenderer$Type = ($IAnimationRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAnimationRenderer_ = $IAnimationRenderer$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$BasicFiledFilter" {
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"
import {$FieldFilter, $FieldFilter$Type} from "packages/de/keksuccino/konkrete/json/minidev/asm/$FieldFilter"
import {$Method, $Method$Type} from "packages/java/lang/reflect/$Method"

export class $BasicFiledFilter implements $FieldFilter {
static readonly "SINGLETON": $BasicFiledFilter

constructor()

public "canRead"(arg0: $Field$Type): boolean
public "canUse"(arg0: $Field$Type, arg1: $Method$Type): boolean
public "canUse"(arg0: $Field$Type): boolean
public "canWrite"(arg0: $Field$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasicFiledFilter$Type = ($BasicFiledFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasicFiledFilter_ = $BasicFiledFilter$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/$AdvancedButton" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$IAnimationRenderer, $IAnimationRenderer$Type} from "packages/de/keksuccino/konkrete/rendering/animation/$IAnimationRenderer"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ExternalTextureResourceLocation, $ExternalTextureResourceLocation$Type} from "packages/de/keksuccino/konkrete/resources/$ExternalTextureResourceLocation"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $AdvancedButton extends $Button {
 "ignoreBlockedInput": boolean
 "ignoreLeftMouseDownClickBlock": boolean
 "enableRightclick": boolean
 "labelScale": float
 "renderLabel": boolean
 "loopBackgroundAnimations": boolean
 "restartBackgroundAnimationsOnHover": boolean
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: string, arg5: $Button$OnPress$Type)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: string, arg5: boolean, arg6: $Button$OnPress$Type)

public "getDescription"(): (string)[]
public "hasBorder"(): boolean
public "hasColorBackground"(): boolean
public "setHandleClick"(arg0: boolean): void
public "setBackgroundHover"(arg0: $ResourceLocation$Type): void
public "setBackgroundHover"(arg0: $IAnimationRenderer$Type): void
public "setPressAction"(arg0: $Button$OnPress$Type): void
public "getMessageString"(): string
public "setUseable"(arg0: boolean): void
public "isUseable"(): boolean
public "setClickSound"(arg0: string): void
public "setLabelShadow"(arg0: boolean): void
public "setDescription"(...arg0: (string)[]): void
public "hasCustomBackground"(): boolean
public static "isAnyButtonLeftClicked"(): boolean
public "hasCustomBackgroundHover"(): boolean
public "hasCustomBackgroundNormal"(): boolean
public "setBackgroundNormal"(arg0: $ResourceLocation$Type): void
public "setBackgroundNormal"(arg0: $IAnimationRenderer$Type): void
/**
 * 
 * @deprecated
 */
public "setBackgroundTexture"(arg0: $ResourceLocation$Type, arg1: $ResourceLocation$Type): void
/**
 * 
 * @deprecated
 */
public "setBackgroundTexture"(arg0: $ExternalTextureResourceLocation$Type, arg1: $ExternalTextureResourceLocation$Type): void
/**
 * 
 * @deprecated
 */
public "hasCustomTextureBackground"(): boolean
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "setHovered"(arg0: boolean): void
public "setMessage"(arg0: string): void
public "setBackgroundColor"(arg0: $Color$Type, arg1: $Color$Type, arg2: $Color$Type, arg3: $Color$Type, arg4: float): void
public "setBackgroundColor"(arg0: $Color$Type, arg1: $Color$Type, arg2: $Color$Type, arg3: $Color$Type, arg4: integer): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setWidth"(arg0: integer): void
public "setX"(arg0: integer): void
public "setY"(arg0: integer): void
public "onPress"(): void
public "getWidth"(): integer
public "getX"(): integer
public "getY"(): integer
get "description"(): (string)[]
set "handleClick"(value: boolean)
set "backgroundHover"(value: $ResourceLocation$Type)
set "backgroundHover"(value: $IAnimationRenderer$Type)
set "pressAction"(value: $Button$OnPress$Type)
get "messageString"(): string
set "useable"(value: boolean)
get "useable"(): boolean
set "clickSound"(value: string)
set "labelShadow"(value: boolean)
set "description"(value: (string)[])
get "anyButtonLeftClicked"(): boolean
set "backgroundNormal"(value: $ResourceLocation$Type)
set "backgroundNormal"(value: $IAnimationRenderer$Type)
set "hovered"(value: boolean)
set "message"(value: string)
set "width"(value: integer)
set "x"(value: integer)
set "y"(value: integer)
get "width"(): integer
get "x"(): integer
get "y"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancedButton$Type = ($AdvancedButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancedButton_ = $AdvancedButton$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layer/$ScreenCustomizationLayerHandler" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ScreenCustomizationLayer, $ScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/layer/$ScreenCustomizationLayer"
import {$InitOrResizeScreenStartingEvent, $InitOrResizeScreenStartingEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenStartingEvent"

export class $ScreenCustomizationLayerHandler {


public static "init"(): void
public static "getLayer"(arg0: string): $ScreenCustomizationLayer
public static "getLayerOfScreen"(arg0: $Class$Type<(any)>): $ScreenCustomizationLayer
public static "getLayerOfScreen"(arg0: $Screen$Type): $ScreenCustomizationLayer
public static "isBeforeFinishInitialMinecraftReload"(): boolean
public static "registerLayer"(arg0: string, arg1: $ScreenCustomizationLayer$Type): void
public static "registerLayer"(arg0: $ScreenCustomizationLayer$Type): void
public static "registerScreen"(arg0: $Screen$Type): void
public static "isLayerRegistered"(arg0: string): boolean
public static "getActiveLayer"(): $ScreenCustomizationLayer
public "onScreenInitOrResizeStarting"(arg0: $InitOrResizeScreenStartingEvent$Type): void
public static "isMinecraftCurrentlyReloading"(): boolean
get "beforeFinishInitialMinecraftReload"(): boolean
get "activeLayer"(): $ScreenCustomizationLayer
get "minecraftCurrentlyReloading"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCustomizationLayerHandler$Type = ($ScreenCustomizationLayerHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCustomizationLayerHandler_ = $ScreenCustomizationLayerHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/animation/$AnimationData$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $AnimationData$Type extends $Enum<($AnimationData$Type)> {
static readonly "INTERNAL": $AnimationData$Type
static readonly "EXTERNAL": $AnimationData$Type


public static "values"(): ($AnimationData$Type)[]
public static "valueOf"(arg0: string): $AnimationData$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationData$Type$Type = (("internal") | ("external")) | ($AnimationData$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationData$Type_ = $AnimationData$Type$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$ExecutableElement" {
import {$GenericExecutableBlock, $GenericExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$GenericExecutableBlock"

export interface $ExecutableElement {

 "getExecutableBlock"(): $GenericExecutableBlock

(): $GenericExecutableBlock
}

export namespace $ExecutableElement {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExecutableElement$Type = ($ExecutableElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExecutableElement_ = $ExecutableElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/variables/$ClearVariablesAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $ClearVariablesAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClearVariablesAction$Type = ($ClearVariablesAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClearVariablesAction_ = $ClearVariablesAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$OpenGLVersionPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $OpenGLVersionPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getAlternativeIdentifiers"(): $List<(string)>
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "alternativeIdentifiers"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenGLVersionPlaceholder$Type = ($OpenGLVersionPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenGLVersionPlaceholder_ = $OpenGLVersionPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ApngTexture$ApngFrame" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ApngTexture$ApngFrame {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ApngTexture$ApngFrame$Type = ($ApngTexture$ApngFrame);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ApngTexture$ApngFrame_ = $ApngTexture$ApngFrame$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/minecraftuser/v2/$UserProfile" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"

export class $UserProfile {

constructor()

public "getName"(): string
public "getUUID"(): $UUID
get "name"(): string
get "uUID"(): $UUID
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UserProfile$Type = ($UserProfile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UserProfile_ = $UserProfile$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAware" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $JSONAware {

 "toJSONString"(): string

(): string
}

export namespace $JSONAware {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONAware$Type = ($JSONAware);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONAware_ = $JSONAware$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$PatternNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $ValueNodes$PatternNode extends $ValueNode {


public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "asPatternNode"(): $ValueNodes$PatternNode
public "isPatternNode"(): boolean
get "patternNode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$PatternNode$Type = ($ValueNodes$PatternNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$PatternNode_ = $ValueNodes$PatternNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/closegui/$ClientSideCloseGuiCommandPacketLogic" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ClientSideCloseGuiCommandPacketLogic {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientSideCloseGuiCommandPacketLogic$Type = ($ClientSideCloseGuiCommandPacketLogic);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientSideCloseGuiCommandPacketLogic_ = $ClientSideCloseGuiCommandPacketLogic$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/animation/$AnimationElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$AnimationElement, $AnimationElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/animation/$AnimationElement"
import {$AnimationEditorElement, $AnimationEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/animation/$AnimationEditorElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $AnimationElementBuilder extends $ElementBuilder<($AnimationElement), ($AnimationEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "isDeprecated"(): boolean
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $AnimationElement$Type, arg1: $LayoutEditorScreen$Type): $AnimationEditorElement
get "deprecated"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationElementBuilder$Type = ($AnimationElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationElementBuilder_ = $AnimationElementBuilder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunction" {
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export interface $PathFunction {

 "invoke"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContext$Type, arg4: $List$Type<($Parameter$Type)>): any

(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContext$Type, arg4: $List$Type<($Parameter$Type)>): any
}

export namespace $PathFunction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathFunction$Type = ($PathFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathFunction_ = $PathFunction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement$ResizeGrabberType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $AbstractEditorElement$ResizeGrabberType extends $Enum<($AbstractEditorElement$ResizeGrabberType)> {
static readonly "TOP": $AbstractEditorElement$ResizeGrabberType
static readonly "RIGHT": $AbstractEditorElement$ResizeGrabberType
static readonly "BOTTOM": $AbstractEditorElement$ResizeGrabberType
static readonly "LEFT": $AbstractEditorElement$ResizeGrabberType


public static "values"(): ($AbstractEditorElement$ResizeGrabberType)[]
public static "valueOf"(arg0: string): $AbstractEditorElement$ResizeGrabberType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractEditorElement$ResizeGrabberType$Type = (("top") | ("left") | ("bottom") | ("right")) | ($AbstractEditorElement$ResizeGrabberType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractEditorElement$ResizeGrabberType_ = $AbstractEditorElement$ResizeGrabberType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/$PacketCodec" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Packet, $Packet$Type} from "packages/de/keksuccino/fancymenu/networking/$Packet"

export class $PacketCodec<T extends $Packet> {

constructor(arg0: string, arg1: $Class$Type<(T)>)

public "getType"(): $Class<(T)>
public "deserialize"(arg0: string): T
public "serialize"(arg0: T): string
public "getPacketIdentifier"(): string
get "type"(): $Class<(T)>
get "packetIdentifier"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketCodec$Type<T> = ($PacketCodec<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketCodec_<T> = $PacketCodec$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/video/$IVideo" {
import {$AspectRatio, $AspectRatio$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$AspectRatio"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$PlayableResourceWithAudio, $PlayableResourceWithAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$PlayableResourceWithAudio"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderableResource, $RenderableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$RenderableResource"

export interface $IVideo extends $RenderableResource, $PlayableResourceWithAudio {

 "reset"(): void
 "getAspectRatio"(): $AspectRatio
 "getWidth"(): integer
 "getHeight"(): integer
 "getResourceLocation"(): $ResourceLocation
 "setVolume"(arg0: float): void
 "getVolume"(): float
 "open"(): $InputStream
 "isReady"(): boolean
 "isClosed"(): boolean
 "waitForLoadingCompletedOrFailed"(arg0: long): void
 "waitForReady"(arg0: long): void
 "isLoadingFailed"(): boolean
 "isLoadingCompleted"(): boolean
 "stop"(): void
 "play"(): void
 "isPlaying"(): boolean
 "isPaused"(): boolean
 "pause"(): void
 "close"(): void
}

export namespace $IVideo {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IVideo$Type = ($IVideo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IVideo_ = $IVideo$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$ModVersionPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ModVersionPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModVersionPlaceholder$Type = ($ModVersionPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModVersionPlaceholder_ = $ModVersionPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/splash/$TitleScreenSplashBuilder" {
import {$TitleScreenLayer, $TitleScreenLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"
import {$TitleScreenSplashDeepElement, $TitleScreenSplashDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/splash/$TitleScreenSplashDeepElement"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$TitleScreenSplashDeepEditorElement, $TitleScreenSplashDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/splash/$TitleScreenSplashDeepEditorElement"

export class $TitleScreenSplashBuilder extends $DeepElementBuilder<($TitleScreenLayer), ($TitleScreenSplashDeepElement), ($TitleScreenSplashDeepEditorElement)> {
readonly "layer": D

constructor(arg0: $TitleScreenLayer$Type)

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "stackElements"(arg0: $TitleScreenSplashDeepElement$Type, arg1: $TitleScreenSplashDeepElement$Type): void
public "buildDefaultInstance"(): $TitleScreenSplashDeepElement
public "wrapIntoEditorElement"(arg0: $TitleScreenSplashDeepElement$Type, arg1: $LayoutEditorScreen$Type): $TitleScreenSplashDeepEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenSplashBuilder$Type = ($TitleScreenSplashBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenSplashBuilder_ = $TitleScreenSplashBuilder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$UpdaterMapper" {
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$Type, $Type$Type} from "packages/java/lang/reflect/$Type"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $UpdaterMapper<T> extends $JsonReaderI<(T)> {
readonly "base": $JsonReader

constructor(arg0: $JsonReader$Type, arg1: T)
constructor(arg0: $JsonReader$Type, arg1: T, arg2: $Type$Type)

public "convert"(arg0: any): T
public "setValue"(arg0: any, arg1: string, arg2: any): void
public "createObject"(): any
public "addValue"(arg0: any, arg1: any): void
public "createArray"(): any
public "startObject"(arg0: string): $JsonReaderI<(any)>
public "startArray"(arg0: string): $JsonReaderI<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdaterMapper$Type<T> = ($UpdaterMapper<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdaterMapper_<T> = $UpdaterMapper$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunctionFactory" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$PathFunction, $PathFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunction"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PathFunctionFactory {
static readonly "FUNCTIONS": $Map<(string), ($Class)>

constructor()

public static "newFunction"(arg0: string): $PathFunction
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathFunctionFactory$Type = ($PathFunctionFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathFunctionFactory_ = $PathFunctionFactory$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/types/$ImageFileType" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"
import {$FileCodec, $FileCodec$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileCodec"

export class $ImageFileType extends $FileType<($ITexture)> {

constructor(arg0: $FileCodec$Type<($ITexture$Type)>, arg1: string, ...arg2: (string)[])

public "setCustomDisplayName"(arg0: $Component$Type): $ImageFileType
public "isAnimated"(): boolean
public "setAnimated"(arg0: boolean): $ImageFileType
public "setLocalAllowed"(arg0: boolean): $ImageFileType
public "setWebAllowed"(arg0: boolean): $ImageFileType
set "customDisplayName"(value: $Component$Type)
get "animated"(): boolean
set "animated"(value: boolean)
set "localAllowed"(value: boolean)
set "webAllowed"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageFileType$Type = ($ImageFileType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageFileType_ = $ImageFileType$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI" {
import {$Type, $Type$Type} from "packages/java/lang/reflect/$Type"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $JsonReaderI<T> {
readonly "base": $JsonReader

constructor(arg0: $JsonReader$Type)

public "convert"(arg0: any): T
public "getValue"(arg0: any, arg1: string): any
public "setValue"(arg0: any, arg1: string, arg2: any): void
public "getType"(arg0: string): $Type
public "createObject"(): any
public "addValue"(arg0: any, arg1: any): void
public "createArray"(): any
public "startObject"(arg0: string): $JsonReaderI<(any)>
public "startArray"(arg0: string): $JsonReaderI<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonReaderI$Type<T> = ($JsonReaderI<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonReaderI_<T> = $JsonReaderI$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/reader/$JsonWriterI" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"

export interface $JsonWriterI<T> {

 "writeJSONString"<E extends T>(arg0: E, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void

(arg0: E, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void
}

export namespace $JsonWriterI {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonWriterI$Type<T> = ($JsonWriterI<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonWriterI_<T> = $JsonWriterI$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$InvalidCriteriaException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$JsonPathException, $JsonPathException$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPathException"

export class $InvalidCriteriaException extends $JsonPathException {

constructor(arg0: $Throwable$Type)
constructor(arg0: string, arg1: $Throwable$Type)
constructor(arg0: string)
constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvalidCriteriaException$Type = ($InvalidCriteriaException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvalidCriteriaException_ = $InvalidCriteriaException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$RenderScreenEvent$Pre" {
import {$RenderScreenEvent, $RenderScreenEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$RenderScreenEvent"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderScreenEvent$Pre extends $RenderScreenEvent {

constructor(arg0: $Screen$Type, arg1: $GuiGraphics$Type, arg2: integer, arg3: integer, arg4: float)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderScreenEvent$Pre$Type = ($RenderScreenEvent$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderScreenEvent$Pre_ = $RenderScreenEvent$Pre$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/groups/$FileTypeGroup" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Resource, $Resource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$Resource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"

export class $FileTypeGroup<T extends $FileType<(any)>> {

constructor(arg0: $Supplier$Type<($List$Type<(T)>)>)
constructor(arg0: $Supplier$Type<($List$Type<(T)>)>, arg1: $Component$Type)

public static "of"<T extends $FileType<(any)>>(...arg0: (T)[]): $FileTypeGroup<(T)>
public "getDisplayName"(): $Component
public "setDisplayName"(arg0: $Component$Type): void
public "getFileTypes"(): $List<(T)>
public static "allSupported"(): $FileTypeGroup<($FileType<($Resource)>)>
public "getTypeSupplier"(): $Supplier<($List<(T)>)>
public "setTypeSupplier"(arg0: $Supplier$Type<($List$Type<(T)>)>): void
get "displayName"(): $Component
set "displayName"(value: $Component$Type)
get "fileTypes"(): $List<(T)>
get "typeSupplier"(): $Supplier<($List<(T)>)>
set "typeSupplier"(value: $Supplier$Type<($List$Type<(T)>)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileTypeGroup$Type<T> = ($FileTypeGroup<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileTypeGroup_<T> = $FileTypeGroup$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/minecraftuser/v2/$MinecraftUsers" {
import {$MinecraftProfileTexture$Type, $MinecraftProfileTexture$Type$Type} from "packages/com/mojang/authlib/minecraft/$MinecraftProfileTexture$Type"
import {$UserProfile, $UserProfile$Type} from "packages/de/keksuccino/fancymenu/util/minecraftuser/v2/$UserProfile"
import {$MinecraftProfileTexture, $MinecraftProfileTexture$Type} from "packages/com/mojang/authlib/minecraft/$MinecraftProfileTexture"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MinecraftUsers {
static readonly "UNKNOWN_USER_PROFILE": $UserProfile
static readonly "MISSING_SKIN_TEXTURE": $MinecraftProfileTexture
static readonly "MISSING_CAPE_TEXTURE": $MinecraftProfileTexture
static readonly "MISSING_ELYTRA_TEXTURE": $MinecraftProfileTexture
static readonly "MISSING_PROFILE_TEXTURES": $Map<($MinecraftProfileTexture$Type), ($MinecraftProfileTexture)>

constructor()

public static "getProfileTextures"(arg0: string): $Map<($MinecraftProfileTexture$Type), ($MinecraftProfileTexture)>
public static "getUserProfile"(arg0: string): $UserProfile
public static "getProfileTexture"(arg0: string, arg1: $MinecraftProfileTexture$Type$Type): $MinecraftProfileTexture
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinecraftUsers$Type = ($MinecraftUsers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinecraftUsers_ = $MinecraftUsers$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FocusNavigationEvent$ArrowNavigation, $FocusNavigationEvent$ArrowNavigation$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent$ArrowNavigation"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ScreenDirection, $ScreenDirection$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenDirection"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"
import {$FocusNavigationEvent$TabNavigation, $FocusNavigationEvent$TabNavigation$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent$TabNavigation"

export class $CellScreen extends $Screen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "allowDone"(): boolean
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "onClose"(): void
public "createTabEvent"(): $FocusNavigationEvent$TabNavigation
public "createArrowEvent"(arg0: $ScreenDirection$Type): $FocusNavigationEvent$ArrowNavigation
public "getRightSideDefaultSpaceBetweenWidgets"(): integer
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "tick"(): void
public "getRightSideWidgetWidth"(): integer
public "rebuild"(): void
get "rightSideDefaultSpaceBetweenWidgets"(): integer
get "rightSideWidgetWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CellScreen$Type = ($CellScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CellScreen_ = $CellScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText" {
import {$Resource, $Resource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$Resource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"

export interface $IText extends $Resource {

 "getTextLines"(): $List<(string)>
 "open"(): $InputStream
 "isReady"(): boolean
 "isClosed"(): boolean
 "waitForLoadingCompletedOrFailed"(arg0: long): void
 "waitForReady"(arg0: long): void
 "isLoadingFailed"(): boolean
 "isLoadingCompleted"(): boolean
 "close"(): void
}

export namespace $IText {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IText$Type = ($IText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IText_ = $IText$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$ScreenMouseScrollEvent" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $ScreenMouseScrollEvent extends $EventBase {


public "isCancelable"(): boolean
public "addWidget"<T extends ($GuiEventListener) & ($NarratableEntry)>(arg0: T): void
public "getMouseX"(): double
public "getRenderables"(): $List<($Renderable)>
public "getMouseY"(): double
public "getNarratables"(): $List<($NarratableEntry)>
public "getWidgets"(): $List<($GuiEventListener)>
public "getScreen"(): $Screen
public "addRenderableWidget"<T extends ($GuiEventListener) & ($NarratableEntry) & ($Renderable)>(arg0: T): void
public "getScrollDelta"(): double
get "cancelable"(): boolean
get "mouseX"(): double
get "renderables"(): $List<($Renderable)>
get "mouseY"(): double
get "narratables"(): $List<($NarratableEntry)>
get "widgets"(): $List<($GuiEventListener)>
get "screen"(): $Screen
get "scrollDelta"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenMouseScrollEvent$Type = ($ScreenMouseScrollEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenMouseScrollEvent_ = $ScreenMouseScrollEvent$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$Criteria" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$Pattern, $Pattern$Type} from "packages/java/util/regex/$Pattern"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Path, $Path$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path"

export class $Criteria implements $Predicate {


public "type"(arg0: $Class$Type<(any)>): $Criteria
public "toString"(): string
public "matches"(arg0: $Predicate$Type): $Criteria
public "size"(arg0: integer): $Criteria
public "apply"(arg0: $Predicate$PredicateContext$Type): boolean
public "regex"(arg0: $Pattern$Type): $Criteria
public "contains"(arg0: any): $Criteria
public "empty"(arg0: boolean): $Criteria
public "in"(...arg0: (any)[]): $Criteria
public "in"(arg0: $Collection$Type<(any)>): $Criteria
/**
 * 
 * @deprecated
 */
public static "create"(arg0: string, arg1: string, arg2: string): $Criteria
public "is"(arg0: any): $Criteria
public "eq"(arg0: any): $Criteria
public "exists"(arg0: boolean): $Criteria
public "lt"(arg0: any): $Criteria
/**
 * 
 * @deprecated
 */
public static "parse"(arg0: string): $Criteria
public "and"(arg0: string): $Criteria
public "ne"(arg0: any): $Criteria
public "all"(arg0: $Collection$Type<(any)>): $Criteria
public "all"(...arg0: (any)[]): $Criteria
public "gt"(arg0: any): $Criteria
/**
 * 
 * @deprecated
 */
public "notEmpty"(): $Criteria
public "lte"(arg0: any): $Criteria
public "gte"(arg0: any): $Criteria
public "nin"(...arg0: (any)[]): $Criteria
public "nin"(arg0: $Collection$Type<(any)>): $Criteria
public "anyof"(...arg0: (any)[]): $Criteria
public "anyof"(arg0: $Collection$Type<(any)>): $Criteria
public "subsetof"(...arg0: (any)[]): $Criteria
public "subsetof"(arg0: $Collection$Type<(any)>): $Criteria
public "noneof"(arg0: $Collection$Type<(any)>): $Criteria
public "noneof"(...arg0: (any)[]): $Criteria
/**
 * 
 * @deprecated
 */
public static "where"(arg0: $Path$Type): $Criteria
public static "where"(arg0: string): $Criteria
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Criteria$Type = ($Criteria);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Criteria_ = $Criteria$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CustomizableScreen" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $CustomizableScreen {

 "removeOnInitChildrenFancyMenu"(): $List<($GuiEventListener)>

(): $List<($GuiEventListener)>
}

export namespace $CustomizableScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomizableScreen$Type = ($CustomizableScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomizableScreen_ = $CustomizableScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/layout/$ToggleLayoutAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $ToggleLayoutAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToggleLayoutAction$Type = ($ToggleLayoutAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToggleLayoutAction_ = $ToggleLayoutAction$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$ValueCompareException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$JsonPathException, $JsonPathException$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPathException"

export class $ValueCompareException extends $JsonPathException {

constructor(arg0: string, arg1: $Throwable$Type)
constructor(arg0: string)
constructor(arg0: any, arg1: any)
constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueCompareException$Type = ($ValueCompareException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueCompareException_ = $ValueCompareException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/opengui/$OpenGuiCommandPacketCodec" {
import {$PacketCodec, $PacketCodec$Type} from "packages/de/keksuccino/fancymenu/networking/$PacketCodec"
import {$OpenGuiCommandPacket, $OpenGuiCommandPacket$Type} from "packages/de/keksuccino/fancymenu/networking/packets/commands/opengui/$OpenGuiCommandPacket"

export class $OpenGuiCommandPacketCodec extends $PacketCodec<($OpenGuiCommandPacket)> {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenGuiCommandPacketCodec$Type = ($OpenGuiCommandPacketCodec);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenGuiCommandPacketCodec_ = $OpenGuiCommandPacketCodec$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/$PlaceholderRegistry" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"

export class $PlaceholderRegistry {

constructor()

public static "register"(arg0: $Placeholder$Type): void
public static "getPlaceholders"(): $List<($Placeholder)>
public static "getPlaceholder"(arg0: string): $Placeholder
get "placeholders"(): $List<($Placeholder)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaceholderRegistry$Type = ($PlaceholderRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaceholderRegistry_ = $PlaceholderRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$MinecraftVersionPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MinecraftVersionPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinecraftVersionPlaceholder$Type = ($MinecraftVersionPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinecraftVersionPlaceholder_ = $MinecraftVersionPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/logo/$TitleScreenLogoBuilder" {
import {$TitleScreenLayer, $TitleScreenLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$TitleScreenLogoDeepElement, $TitleScreenLogoDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/logo/$TitleScreenLogoDeepElement"
import {$TitleScreenLogoDeepEditorElement, $TitleScreenLogoDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/logo/$TitleScreenLogoDeepEditorElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

export class $TitleScreenLogoBuilder extends $DeepElementBuilder<($TitleScreenLayer), ($TitleScreenLogoDeepElement), ($TitleScreenLogoDeepEditorElement)> {
readonly "layer": D

constructor(arg0: $TitleScreenLayer$Type)

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "deserializeElement"(arg0: $SerializedElement$Type): $TitleScreenLogoDeepElement
public "stackElements"(arg0: $TitleScreenLogoDeepElement$Type, arg1: $TitleScreenLogoDeepElement$Type): void
public "wrapIntoEditorElement"(arg0: $TitleScreenLogoDeepElement$Type, arg1: $LayoutEditorScreen$Type): $TitleScreenLogoDeepEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenLogoBuilder$Type = ($TitleScreenLogoBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenLogoBuilder_ = $TitleScreenLogoBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/opengui/$OpenGuiCommandPacket" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Packet, $Packet$Type} from "packages/de/keksuccino/fancymenu/networking/$Packet"

export class $OpenGuiCommandPacket extends $Packet {
 "screen_identifier": string

constructor()

public "processPacket"(arg0: $ServerPlayer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenGuiCommandPacket$Type = ($OpenGuiCommandPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenGuiCommandPacket_ = $OpenGuiCommandPacket$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$ReadContext" {
import {$TypeRef, $TypeRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$TypeRef"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$JsonPath, $JsonPath$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPath"
import {$EvaluationListener, $EvaluationListener$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener"

export interface $ReadContext {

 "limit"(arg0: integer): $ReadContext
 "read"<T>(arg0: string, arg1: $Class$Type<(T)>, ...arg2: ($Predicate$Type)[]): T
 "read"<T>(arg0: $JsonPath$Type, arg1: $TypeRef$Type<(T)>): T
 "read"<T>(arg0: $JsonPath$Type, arg1: $Class$Type<(T)>): T
 "read"<T>(arg0: string, ...arg1: ($Predicate$Type)[]): T
 "read"<T>(arg0: string, arg1: $TypeRef$Type<(T)>): T
 "read"<T>(arg0: $JsonPath$Type): T
 "configuration"(): $Configuration
 "json"<T>(): T
 "jsonString"(): string
 "withListeners"(...arg0: ($EvaluationListener$Type)[]): $ReadContext
}

export namespace $ReadContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReadContext$Type = ($ReadContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReadContext_ = $ReadContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ElementWidthPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ElementWidthPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementWidthPlaceholder$Type = ($ElementWidthPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementWidthPlaceholder_ = $ElementWidthPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorThemeRegistry" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$UIColorTheme, $UIColorTheme$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorTheme"

export class $UIColorThemeRegistry {

constructor()

public static "register"(arg0: $UIColorTheme$Type): void
public static "getTheme"(arg0: string): $UIColorTheme
public static "getActiveTheme"(): $UIColorTheme
public static "clearThemes"(): void
public static "setActiveTheme"(arg0: string): void
public static "getThemes"(): $List<($UIColorTheme)>
get "activeTheme"(): $UIColorTheme
set "activeTheme"(value: string)
get "themes"(): $List<($UIColorTheme)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UIColorThemeRegistry$Type = ($UIColorThemeRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UIColorThemeRegistry_ = $UIColorThemeRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slideshow/$SlideshowEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $SlideshowEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlideshowEditorElement$Type = ($SlideshowEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlideshowEditorElement_ = $SlideshowEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonElement" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$GenericExecutableBlock, $GenericExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$GenericExecutableBlock"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ExecutableElement, $ExecutableElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ExecutableElement"
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"
import {$ButtonEditorElement, $ButtonEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonEditorElement"

export class $ButtonElement extends $AbstractElement implements $ExecutableElement {
 "clickSound": $ResourceSupplier<($IAudio)>
 "hoverSound": $ResourceSupplier<($IAudio)>
 "label": string
 "hoverLabel": string
 "tooltip": string
 "backgroundTextureNormal": $ResourceSupplier<($ITexture)>
 "backgroundTextureHover": $ResourceSupplier<($ITexture)>
 "backgroundTextureInactive": $ResourceSupplier<($ITexture)>
 "backgroundAnimationNormal": string
 "backgroundAnimationHover": string
 "backgroundAnimationInactive": string
 "loopBackgroundAnimations": boolean
 "restartBackgroundAnimationsOnHover": boolean
 "nineSliceCustomBackground": boolean
 "nineSliceBorderX": integer
 "nineSliceBorderY": integer
 "navigatable": boolean
 "actionExecutor": $GenericExecutableBlock
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<($ButtonElement$Type), ($ButtonEditorElement$Type)>)

public "tick"(): void
public "setWidget"(arg0: $AbstractWidget$Type): void
public "getExecutableBlock"(): $GenericExecutableBlock
public "updateWidgetSize"(): void
public "updateWidgetLabels"(): void
public "updateWidgetAlpha"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "updateWidgetVisibility"(): void
public "updateWidgetTooltip"(): void
public "updateWidgetHoverSound"(): void
public "updateWidgetClickSound"(): void
public "updateWidgetPosition"(): void
public "updateWidgetNavigatable"(): void
public "updateWidgetTexture"(): void
public "updateWidget"(): void
public "getWidget"(): $AbstractWidget
public "getWidgetsToRegister"(): $List<($GuiEventListener)>
set "widget"(value: $AbstractWidget$Type)
get "executableBlock"(): $GenericExecutableBlock
get "widget"(): $AbstractWidget
get "widgetsToRegister"(): $List<($GuiEventListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ButtonElement$Type = ($ButtonElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ButtonElement_ = $ButtonElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layer/$ElementFactory" {
import {$WidgetMeta, $WidgetMeta$Type} from "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta"
import {$Layout$OrderedElementCollection, $Layout$OrderedElementCollection$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout$OrderedElementCollection"
import {$Layout, $Layout$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$VanillaWidgetElement, $VanillaWidgetElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/vanillawidget/$VanillaWidgetElement"

export interface $ElementFactory {

 "constructElementInstances"(arg0: string, arg1: $List$Type<($WidgetMeta$Type)>, arg2: $Layout$Type, arg3: $Layout$OrderedElementCollection$Type, arg4: $List$Type<($VanillaWidgetElement$Type)>, arg5: $List$Type<($AbstractDeepElement$Type)>): void
 "constructElementInstances"(arg0: string, arg1: $List$Type<($WidgetMeta$Type)>, arg2: $List$Type<($Layout$Type)>, arg3: $Layout$OrderedElementCollection$Type, arg4: $List$Type<($VanillaWidgetElement$Type)>, arg5: $List$Type<($AbstractDeepElement$Type)>): void
}

export namespace $ElementFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementFactory$Type = ($ElementFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementFactory_ = $ElementFactory$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/ram/$MaxRamPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MaxRamPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MaxRamPlaceholder$Type = ($MaxRamPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MaxRamPlaceholder_ = $MaxRamPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/shape/$ShapeEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $ShapeEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeEditorElement$Type = ($ShapeEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeEditorElement_ = $ShapeEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Post" {
import {$ClientTickEvent, $ClientTickEvent$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent"

export class $ClientTickEvent$Post extends $ClientTickEvent {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTickEvent$Post$Type = ($ClientTickEvent$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTickEvent$Post_ = $ClientTickEvent$Post$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/$ScrollArea" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ScrollBar, $ScrollBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollbar/$ScrollBar"
import {$UIBase, $UIBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/$UIBase"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$ScrollAreaEntry, $ScrollAreaEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/entry/$ScrollAreaEntry"

export class $ScrollArea extends $UIBase {
 "verticalScrollBar": $ScrollBar
 "horizontalScrollBar": $ScrollBar
 "backgroundColor": $Color
 "borderColor": $Color
 "makeEntriesWidthOfArea": boolean
 "minimumEntryWidthIsAreaWidth": boolean
 "overriddenTotalScrollWidth": integer
 "overriddenTotalScrollHeight": integer
 "correctYOnAddingRemovingEntries": boolean
 "customGuiScale": float
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer)

public "getInnerY"(): integer
public "getInnerX"(): integer
public "getFocusedEntry"(): $ScrollAreaEntry
public "addEntry"(arg0: $ScrollAreaEntry$Type): void
public "getEntries"(): $List<($ScrollAreaEntry)>
public "getEntry"(arg0: integer): $ScrollAreaEntry
public "removeEntry"(arg0: $ScrollAreaEntry$Type): void
public "setWidth"(arg0: integer, arg1: boolean): void
public "setWidth"(arg0: integer): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "correctYScrollAfterAddingOrRemovingEntries"(arg0: boolean, ...arg1: ($ScrollAreaEntry$Type)[]): void
public "setX"(arg0: integer, arg1: boolean): void
public "setX"(arg0: integer): void
public "setY"(arg0: integer, arg1: boolean): void
public "setY"(arg0: integer): void
public "getTotalEntryWidth"(): integer
public "renderEntries"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getEntryCount"(): integer
public "getTotalEntryHeight"(): integer
public "getBorderThickness"(): integer
public "getWidthWithBorder"(): integer
public "getYWithBorder"(): integer
public "getXWithBorder"(): integer
public "isMouseInsideArea"(): boolean
public "updateScrollArea"(): void
public "getInnerWidth"(): integer
public "getInnerHeight"(): integer
public "getHeightWithBorder"(): integer
public "clearEntries"(): void
public "renderBorder"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setHeight"(arg0: integer): void
public "setHeight"(arg0: integer, arg1: boolean): void
public "renderBackground"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isMouseInteractingWithGrabbers"(): boolean
public "getTotalScrollHeight"(): integer
public "getTotalScrollWidth"(): integer
public "setBorderThickness"(arg0: integer): void
public "getIndexOfEntry"(arg0: $ScrollAreaEntry$Type): integer
public "updateEntries"(arg0: $Consumer$Type<($ScrollAreaEntry$Type)>): void
public "resetScrollOnFit"(): void
public "addEntryAtIndex"(arg0: $ScrollAreaEntry$Type, arg1: integer): void
public "removeEntryAtIndex"(arg0: integer): void
public "makeCurrentEntriesSameWidth"(): void
public "getFocusedEntryIndex"(): integer
public "updateWheelScrollSpeed"(): void
public "getEntryRenderOffsetY"(arg0: float): integer
public "getEntryRenderOffsetY"(): integer
public "getEntryRenderOffsetX"(arg0: float): integer
public "getEntryRenderOffsetX"(): integer
get "innerY"(): integer
get "innerX"(): integer
get "focusedEntry"(): $ScrollAreaEntry
get "entries"(): $List<($ScrollAreaEntry)>
set "width"(value: integer)
set "x"(value: integer)
set "y"(value: integer)
get "totalEntryWidth"(): integer
get "entryCount"(): integer
get "totalEntryHeight"(): integer
get "borderThickness"(): integer
get "widthWithBorder"(): integer
get "yWithBorder"(): integer
get "xWithBorder"(): integer
get "mouseInsideArea"(): boolean
get "innerWidth"(): integer
get "innerHeight"(): integer
get "heightWithBorder"(): integer
set "height"(value: integer)
get "mouseInteractingWithGrabbers"(): boolean
get "totalScrollHeight"(): integer
get "totalScrollWidth"(): integer
set "borderThickness"(value: integer)
get "focusedEntryIndex"(): integer
get "entryRenderOffsetY"(): integer
get "entryRenderOffsetX"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollArea$Type = ($ScrollArea);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollArea_ = $ScrollArea$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/other/$CopyToClipboardAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $CopyToClipboardAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CopyToClipboardAction$Type = ($CopyToClipboardAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CopyToClipboardAction_ = $CopyToClipboardAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/gamemode/$IsCreativeRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsCreativeRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsCreativeRequirement$Type = ($IsCreativeRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsCreativeRequirement_ = $IsCreativeRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/customlocals/$CustomLocalsHandler" {
import {$File, $File$Type} from "packages/java/io/$File"

export class $CustomLocalsHandler {
static readonly "CUSTOM_LOCALS_DIR": $File

constructor()

public static "loadLocalizations"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomLocalsHandler$Type = ($CustomLocalsHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomLocalsHandler_ = $CustomLocalsHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/properties/$RuntimePropertyContainer" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $RuntimePropertyContainer {

constructor()

public "getProperty"<T>(arg0: string, arg1: $Class$Type<(any)>): T
public "clear"(): void
public "getBooleanProperty"(arg0: string): boolean
public "getStringProperty"(arg0: string): string
public "putProperty"<T>(arg0: string, arg1: T): $RuntimePropertyContainer
public "getIntegerProperty"(arg0: string): integer
public "hasProperty"(arg0: string): boolean
public "removeProperty"(arg0: string): $RuntimePropertyContainer
public "putPropertyIfAbsentAndGet"<T>(arg0: string, arg1: T): T
public "putPropertyIfAbsent"<T>(arg0: string, arg1: T): $RuntimePropertyContainer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RuntimePropertyContainer$Type = ($RuntimePropertyContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RuntimePropertyContainer_ = $RuntimePropertyContainer$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration$Defaults" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$MappingProvider, $MappingProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/mapper/$MappingProvider"
import {$Option, $Option$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Option"
import {$JsonProvider, $JsonProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$JsonProvider"

export interface $Configuration$Defaults {

 "options"(): $Set<($Option)>
 "jsonProvider"(): $JsonProvider
 "mappingProvider"(): $MappingProvider
}

export namespace $Configuration$Defaults {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Configuration$Defaults$Type = ($Configuration$Defaults);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Configuration$Defaults_ = $Configuration$Defaults$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$LoadedModsPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $LoadedModsPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadedModsPlaceholder$Type = ($LoadedModsPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadedModsPlaceholder_ = $LoadedModsPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/$ManageLayoutsScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$Layout, $Layout$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ManageLayoutsScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $List$Type<($Layout$Type)>, arg1: $Screen$Type, arg2: $Consumer$Type<($List$Type<($Layout$Type)>)>)

public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManageLayoutsScreen$Type = ($ManageLayoutsScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManageLayoutsScreen_ = $ManageLayoutsScreen$Type;
}}
declare module "packages/de/keksuccino/melody/mixin/$MelodyMixinPlugin" {
import {$IMixinInfo, $IMixinInfo$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinInfo"
import {$ClassNode, $ClassNode$Type} from "packages/org/objectweb/asm/tree/$ClassNode"
import {$IMixinConfigPlugin, $IMixinConfigPlugin$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinConfigPlugin"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"

export class $MelodyMixinPlugin implements $IMixinConfigPlugin {

constructor()

public "onLoad"(arg0: string): void
public "postApply"(arg0: string, arg1: $ClassNode$Type, arg2: string, arg3: $IMixinInfo$Type): void
public "getMixins"(): $List<(string)>
public "getRefMapperConfig"(): string
public "shouldApplyMixin"(arg0: string, arg1: string): boolean
public "preApply"(arg0: string, arg1: $ClassNode$Type, arg2: string, arg3: $IMixinInfo$Type): void
public "acceptTargets"(arg0: $Set$Type<(string)>, arg1: $Set$Type<(string)>): void
get "mixins"(): $List<(string)>
get "refMapperConfig"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MelodyMixinPlugin$Type = ($MelodyMixinPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MelodyMixinPlugin_ = $MelodyMixinPlugin$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$AnchorPointOverlay$AnchorPointArea, $AnchorPointOverlay$AnchorPointArea$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$AnchorPointOverlay$AnchorPointArea"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$AbstractEditorElement$ResizeGrabber, $AbstractEditorElement$ResizeGrabber$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement$ResizeGrabber"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $AbstractEditorElement implements $Renderable, $GuiEventListener {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type, arg2: $EditorElementSettings$Type)
constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getY"(): integer
public "isMouseOver"(arg0: double, arg1: double): boolean
public "setFocused"(arg0: boolean): void
public "getX"(): integer
public "isHovered"(): boolean
public "getWidth"(): integer
public "getHeight"(): integer
public "isSelected"(): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "isFocused"(): boolean
public "setAnchorPoint"(arg0: $ElementAnchorPoint$Type, arg1: boolean, arg2: integer, arg3: integer, arg4: boolean): void
public "resetElementStates"(): void
public "isMultiSelected"(): boolean
public "isGettingResized"(): boolean
public "isDragged"(): boolean
public "deleteElement"(): boolean
public "setMultiSelected"(arg0: boolean): void
public "onSettingsChanged"(): void
public "isPressed"(): boolean
public "setSelected"(arg0: boolean): void
public "updateResizingStartPos"(arg0: integer, arg1: integer): void
public "getHoveredResizeGrabber"(): $AbstractEditorElement$ResizeGrabber
public "setAnchorPointViaOverlay"(arg0: $AnchorPointOverlay$AnchorPointArea$Type, arg1: integer, arg2: integer): void
public "updateMovingStartPos"(arg0: integer, arg1: integer): void
public "isElementAnchorAndParentIsSelected"(): boolean
public "updateLeftMouseDownCachedValues"(arg0: integer, arg1: integer): void
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getRectangle"(): $ScreenRectangle
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "getTabOrderGroup"(): integer
get "y"(): integer
set "focused"(value: boolean)
get "x"(): integer
get "hovered"(): boolean
get "width"(): integer
get "height"(): integer
get "selected"(): boolean
get "focused"(): boolean
get "multiSelected"(): boolean
get "gettingResized"(): boolean
get "dragged"(): boolean
set "multiSelected"(value: boolean)
get "pressed"(): boolean
set "selected"(value: boolean)
get "hoveredResizeGrabber"(): $AbstractEditorElement$ResizeGrabber
get "elementAnchorAndParentIsSelected"(): boolean
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractEditorElement$Type = ($AbstractEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractEditorElement_ = $AbstractEditorElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$BeansAccessBuilder" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$DynamicClassLoader, $DynamicClassLoader$Type} from "packages/de/keksuccino/konkrete/json/minidev/asm/$DynamicClassLoader"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$Accessor, $Accessor$Type} from "packages/de/keksuccino/konkrete/json/minidev/asm/$Accessor"

export class $BeansAccessBuilder {

constructor(arg0: $Class$Type<(any)>, arg1: ($Accessor$Type)[], arg2: $DynamicClassLoader$Type)

public "bulid"(): $Class<(any)>
public "addConversion"(arg0: $Class$Type<(any)>): void
public "addConversion"(arg0: $Iterable$Type<($Class$Type<(any)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeansAccessBuilder$Type = ($BeansAccessBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeansAccessBuilder_ = $BeansAccessBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$UnoptimizedMixin" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $UnoptimizedMixin extends $Annotation {

 "value"(): string
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $UnoptimizedMixin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UnoptimizedMixin$Type = ($UnoptimizedMixin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UnoptimizedMixin_ = $UnoptimizedMixin$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/command/$ClientSideVariableCommandPacketLogic" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ClientSideVariableCommandPacketLogic {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientSideVariableCommandPacketLogic$Type = ($ClientSideVariableCommandPacketLogic);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientSideVariableCommandPacketLogic_ = $ClientSideVariableCommandPacketLogic$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/loadingrequirements/$ManageRequirementsScreen" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ManageRequirementsScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $LoadingRequirementContainer$Type, arg1: $Consumer$Type<($LoadingRequirementContainer$Type)>)

public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManageRequirementsScreen$Type = ($ManageRequirementsScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManageRequirementsScreen_ = $ManageRequirementsScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$Supplier" {
import {$ContextMenu$ContextMenuEntry, $ContextMenu$ContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuEntry"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export interface $ContextMenu$Supplier<T> {

 "get"(arg0: $ContextMenu$Type, arg1: $ContextMenu$ContextMenuEntry$Type<(any)>): T

(arg0: $ContextMenu$Type, arg1: $ContextMenu$ContextMenuEntry$Type<(any)>): T
}

export namespace $ContextMenu$Supplier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$Supplier$Type<T> = ($ContextMenu$Supplier<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$Supplier_<T> = $ContextMenu$Supplier$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/blocks/statements/$IfExecutableBlock" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$AbstractExecutableBlock, $AbstractExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$AbstractExecutableBlock"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $IfExecutableBlock extends $AbstractExecutableBlock {
 "condition": $LoadingRequirementContainer
 "identifier": string

constructor()
constructor(arg0: $LoadingRequirementContainer$Type)

public "execute"(): void
public "check"(): boolean
public "getAppendedBlock"(): $AbstractExecutableBlock
public "setAppendedBlock"(arg0: $AbstractExecutableBlock$Type): void
public "addValuePlaceholder"(arg0: string, arg1: $Supplier$Type<(string)>): void
public "serialize"(): $PropertyContainer
public "getBlockType"(): string
public static "deserializeEmptyWithIdentifier"(arg0: $PropertyContainer$Type, arg1: string): $IfExecutableBlock
get "appendedBlock"(): $AbstractExecutableBlock
set "appendedBlock"(value: $AbstractExecutableBlock$Type)
get "blockType"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IfExecutableBlock$Type = ($IfExecutableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IfExecutableBlock_ = $IfExecutableBlock$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathSinhPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MathSinhPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathSinhPlaceholder$Type = ($MathSinhPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathSinhPlaceholder_ = $MathSinhPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/screen/identifier/$ScreenIdentifierHandler" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $ScreenIdentifierHandler {

constructor()

public static "tryFixInvalidIdentifierWithNonUniversal"(arg0: string): string
public static "equalIdentifiers"(arg0: string, arg1: string): boolean
public static "isValidIdentifier"(arg0: string): boolean
public static "getBestIdentifier"(arg0: string): string
public static "tryConvertToNonUniversal"(arg0: string): string
public static "getIdentifierOfScreen"(arg0: $Screen$Type): string
public static "isIdentifierOfScreen"(arg0: string, arg1: $Screen$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenIdentifierHandler$Type = ($ScreenIdentifierHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenIdentifierHandler_ = $ScreenIdentifierHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/$UIColorThemeChangedEvent" {
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$UIColorTheme, $UIColorTheme$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorTheme"

export class $UIColorThemeChangedEvent extends $EventBase {

constructor(arg0: $UIColorTheme$Type)

public "getScheme"(): $UIColorTheme
public "isCancelable"(): boolean
get "scheme"(): $UIColorTheme
get "cancelable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UIColorThemeChangedEvent$Type = ($UIColorThemeChangedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UIColorThemeChangedEvent_ = $UIColorThemeChangedEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$SetAudioVolumeScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $SetAudioVolumeScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetAudioVolumeScreen$Type = ($SetAudioVolumeScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetAudioVolumeScreen_ = $SetAudioVolumeScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/entry/$TextListScrollAreaEntry" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/$ScrollArea"
import {$AdvancedButton, $AdvancedButton$Type} from "packages/de/keksuccino/konkrete/gui/content/$AdvancedButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$ScrollAreaEntry, $ScrollAreaEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/entry/$ScrollAreaEntry"

export class $TextListScrollAreaEntry extends $ScrollAreaEntry {
 "listDotColor": $Color
 "font": $Font
 "parent": $ScrollArea
 "buttonBase": $AdvancedButton
 "deselectOtherEntriesOnSelect": boolean
 "selectOnClick": boolean
 "index": integer
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: $ScrollArea$Type, arg1: $Component$Type, arg2: $Color$Type, arg3: $Consumer$Type<($TextListScrollAreaEntry$Type)>)

public "getText"(): $Component
public "setText"(arg0: $Component$Type): void
public "onClick"(arg0: $ScrollAreaEntry$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getTextWidth"(): integer
get "text"(): $Component
set "text"(value: $Component$Type)
get "textWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextListScrollAreaEntry$Type = ($TextListScrollAreaEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextListScrollAreaEntry_ = $TextListScrollAreaEntry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/panorama/$LocalTexturePanoramaRenderer" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $LocalTexturePanoramaRenderer implements $Renderable {
 "propertiesFile": $File
 "panoramaImageDir": $File
 "overlayImageFile": $File
readonly "panoramaImageSuppliers": $List<($ResourceSupplier<($ITexture)>)>
 "overlayTextureSupplier": $ResourceSupplier<($ITexture)>
 "opacity": float


public "getName"(): string
public static "build"(arg0: $File$Type, arg1: $File$Type, arg2: $File$Type): $LocalTexturePanoramaRenderer
public "setFov"(arg0: double): void
public "setAngle"(arg0: float): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "renderRaw"(arg0: $GuiGraphics$Type, arg1: float, arg2: float): void
public "setSpeed"(arg0: float): void
get "name"(): string
set "fov"(value: double)
set "angle"(value: float)
set "speed"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalTexturePanoramaRenderer$Type = ($LocalTexturePanoramaRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalTexturePanoramaRenderer_ = $LocalTexturePanoramaRenderer$Type;
}}
declare module "packages/de/keksuccino/konkrete/input/$KeyboardHandler" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ScreenEvent$KeyPressed$Post, $ScreenEvent$KeyPressed$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$KeyPressed$Post"
import {$ScreenEvent$CharacterTyped$Post, $ScreenEvent$CharacterTyped$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$CharacterTyped$Post"
import {$KeyboardData, $KeyboardData$Type} from "packages/de/keksuccino/konkrete/input/$KeyboardData"
import {$ScreenEvent$KeyReleased$Post, $ScreenEvent$KeyReleased$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$KeyReleased$Post"
import {$CharData, $CharData$Type} from "packages/de/keksuccino/konkrete/input/$CharData"

export class $KeyboardHandler {

constructor()

public static "init"(): void
public static "addKeyReleasedListener"(arg0: $Consumer$Type<($KeyboardData$Type)>): integer
public static "isCtrlPressed"(): boolean
public "onKeyReleasedPost"(arg0: $ScreenEvent$KeyReleased$Post$Type): void
public "onKeyPressPost"(arg0: $ScreenEvent$KeyPressed$Post$Type): void
public static "isKeyPressed"(): boolean
public static "isAltPressed"(): boolean
public static "getCurrentChar"(): character
public static "getCurrentKeyCode"(): integer
public "onCharTyped"(arg0: $ScreenEvent$CharacterTyped$Post$Type): void
public static "addKeyPressedListener"(arg0: $Consumer$Type<($KeyboardData$Type)>): integer
public static "getCurrentKeyModifiers"(): integer
public static "removeCharTypedListener"(arg0: integer): void
public static "addCharTypedListener"(arg0: $Consumer$Type<($CharData$Type)>): integer
public static "getCurrentCharModifiers"(): integer
public static "removeKeyReleasedListener"(arg0: integer): void
public static "removeKeyPressedListener"(arg0: integer): void
public static "getCurrentKeyScanCode"(): integer
get "ctrlPressed"(): boolean
get "keyPressed"(): boolean
get "altPressed"(): boolean
get "currentChar"(): character
get "currentKeyCode"(): integer
get "currentKeyModifiers"(): integer
get "currentCharModifiers"(): integer
get "currentKeyScanCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyboardHandler$Type = ($KeyboardHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyboardHandler_ = $KeyboardHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/$PlaceholderParser" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PlaceholderParser$ParsedPlaceholder, $PlaceholderParser$ParsedPlaceholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$PlaceholderParser$ParsedPlaceholder"

export class $PlaceholderParser {

constructor()

public static "replaceVariableReferences"(arg0: string): string
public static "containsPlaceholders"(arg0: string, arg1: boolean, arg2: boolean): boolean
public static "containsPlaceholders"(arg0: string, arg1: boolean): boolean
public static "replacePlaceholders"(arg0: string): string
public static "replacePlaceholders"(arg0: string, arg1: boolean): string
public static "findPlaceholders"(arg0: string, arg1: $HashMap$Type<(string), (string)>, arg2: boolean): $List<($PlaceholderParser$ParsedPlaceholder)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaceholderParser$Type = ($PlaceholderParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaceholderParser_ = $PlaceholderParser$Type;
}}
declare module "packages/de/keksuccino/konkrete/rendering/animation/$ExternalGifAnimationRenderer" {
import {$IAnimationRenderer, $IAnimationRenderer$Type} from "packages/de/keksuccino/konkrete/rendering/animation/$IAnimationRenderer"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ExternalGifAnimationRenderer implements $IAnimationRenderer {

constructor(arg0: string, arg1: boolean, arg2: integer, arg3: integer, arg4: integer, arg5: integer)

public "getPath"(): string
public "currentFrame"(): integer
public "setWidth"(arg0: integer): void
public "resetAnimation"(): void
public "isReady"(): boolean
public "setLooped"(arg0: boolean): void
public "isGettingLooped"(): boolean
public "setOpacity"(arg0: float): void
public "setPosX"(arg0: integer): void
public "setPosY"(arg0: integer): void
public "prepareAnimation"(): void
public "render"(arg0: $GuiGraphics$Type): void
public "setStretchImageToScreensize"(arg0: boolean): void
public "isStretchedToStreensize"(): boolean
public "getPosY"(): integer
public "getPosX"(): integer
public "getWidth"(): integer
public "getHeight"(): integer
public "getFPS"(): integer
public "animationFrames"(): integer
public "setFPS"(arg0: integer): void
public "setHideAfterLastFrame"(arg0: boolean): void
public "setHeight"(arg0: integer): void
public "isFinished"(): boolean
public "getOpacity"(): float
get "path"(): string
set "width"(value: integer)
get "ready"(): boolean
set "looped"(value: boolean)
get "gettingLooped"(): boolean
set "opacity"(value: float)
set "posX"(value: integer)
set "posY"(value: integer)
set "stretchImageToScreensize"(value: boolean)
get "stretchedToStreensize"(): boolean
get "posY"(): integer
get "posX"(): integer
get "width"(): integer
get "height"(): integer
get "fPS"(): integer
set "fPS"(value: integer)
set "hideAfterLastFrame"(value: boolean)
set "height"(value: integer)
get "finished"(): boolean
get "opacity"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExternalGifAnimationRenderer$Type = ($ExternalGifAnimationRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExternalGifAnimationRenderer_ = $ExternalGifAnimationRenderer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$ChooseSlideshowScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ChooseSlideshowScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: string, arg1: $Consumer$Type<(string)>)

public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChooseSlideshowScreen$Type = ($ChooseSlideshowScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChooseSlideshowScreen_ = $ChooseSlideshowScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/$NonStackableOverlayUI" {
import {$ContextMenu$ClickableContextMenuEntry, $ContextMenu$ClickableContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry"
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/fancymenu/util/input/$CharacterFilter"
import {$IVideo, $IVideo$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/video/$IVideo"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FileFilter, $FileFilter$Type} from "packages/de/keksuccino/fancymenu/util/file/$FileFilter"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$FileTypeGroup, $FileTypeGroup$Type} from "packages/de/keksuccino/fancymenu/util/file/type/groups/$FileTypeGroup"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$Tooltip, $Tooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip"
import {$File, $File$Type} from "packages/java/io/$File"
import {$Resource, $Resource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$Resource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceChooserScreen, $ResourceChooserScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/resource/$ResourceChooserScreen"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $NonStackableOverlayUI {

constructor()

public static "addGenericInputContextMenuEntryTo"<T>(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(T)>, arg4: $Consumer$Type<(T)>, arg5: boolean, arg6: T, arg7: $Consumer$Type<($Consumer$Type<(T)>)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addFileChooserContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(string)>, arg4: $Consumer$Type<(string)>, arg5: boolean, arg6: string, arg7: $FileFilter$Type, arg8: $FileTypeGroup$Type<(any)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addFileChooserContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(string)>, arg4: $Consumer$Type<(string)>, arg5: boolean, arg6: string, arg7: $FileFilter$Type): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addFileChooserContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(string)>, arg4: $Consumer$Type<(string)>, arg5: boolean, arg6: string, arg7: $FileFilter$Type, arg8: $FileTypeGroup$Type<(any)>, arg9: $BiConsumer$Type<($Screen$Type), ($File$Type)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addGenericResourceChooserContextMenuEntryTo"<R extends $Resource, F extends $FileType<(R)>>(arg0: $ContextMenu$Type, arg1: string, arg2: $Supplier$Type<($ResourceChooserScreen$Type<(R), (F)>)>, arg3: $ConsumingSupplier$Type<(string), ($ResourceSupplier$Type<(R)>)>, arg4: $ResourceSupplier$Type<(R)>, arg5: $Supplier$Type<($ResourceSupplier$Type<(R)>)>, arg6: $Consumer$Type<($ResourceSupplier$Type<(R)>)>, arg7: $Component$Type, arg8: boolean, arg9: $FileTypeGroup$Type<(F)>, arg10: $FileFilter$Type, arg11: boolean, arg12: boolean, arg13: boolean): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addTextResourceChooserContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $ResourceSupplier$Type<($IText$Type)>, arg3: $Supplier$Type<($ResourceSupplier$Type<($IText$Type)>)>, arg4: $Consumer$Type<($ResourceSupplier$Type<($IText$Type)>)>, arg5: $Component$Type, arg6: boolean, arg7: $FileFilter$Type, arg8: boolean, arg9: boolean, arg10: boolean): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addAudioResourceChooserContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $ResourceSupplier$Type<($IAudio$Type)>, arg3: $Supplier$Type<($ResourceSupplier$Type<($IAudio$Type)>)>, arg4: $Consumer$Type<($ResourceSupplier$Type<($IAudio$Type)>)>, arg5: $Component$Type, arg6: boolean, arg7: $FileFilter$Type, arg8: boolean, arg9: boolean, arg10: boolean): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addImageResourceChooserContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $ResourceSupplier$Type<($ITexture$Type)>, arg3: $Supplier$Type<($ResourceSupplier$Type<($ITexture$Type)>)>, arg4: $Consumer$Type<($ResourceSupplier$Type<($ITexture$Type)>)>, arg5: $Component$Type, arg6: boolean, arg7: $FileFilter$Type, arg8: boolean, arg9: boolean, arg10: boolean): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addVideoResourceChooserContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $ResourceSupplier$Type<($IVideo$Type)>, arg3: $Supplier$Type<($ResourceSupplier$Type<($IVideo$Type)>)>, arg4: $Consumer$Type<($ResourceSupplier$Type<($IVideo$Type)>)>, arg5: $Component$Type, arg6: boolean, arg7: $FileFilter$Type, arg8: boolean, arg9: boolean, arg10: boolean): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addRangeSliderInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(double)>, arg4: $Consumer$Type<(double)>, arg5: boolean, arg6: double, arg7: double, arg8: double, arg9: $ConsumingSupplier$Type<(double), ($Component$Type)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addFloatInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(float)>, arg4: $Consumer$Type<(float)>, arg5: boolean, arg6: float, arg7: $ConsumingSupplier$Type<(string), (boolean)>, arg8: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>, arg9: $BiConsumer$Type<($Screen$Type), (string)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addFloatInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(float)>, arg4: $Consumer$Type<(float)>, arg5: boolean, arg6: float, arg7: $ConsumingSupplier$Type<(string), (boolean)>, arg8: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addDoubleInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(double)>, arg4: $Consumer$Type<(double)>, arg5: boolean, arg6: double, arg7: $ConsumingSupplier$Type<(string), (boolean)>, arg8: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addDoubleInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(double)>, arg4: $Consumer$Type<(double)>, arg5: boolean, arg6: double, arg7: $ConsumingSupplier$Type<(string), (boolean)>, arg8: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>, arg9: $BiConsumer$Type<($Screen$Type), (string)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(string)>, arg4: $Consumer$Type<(string)>, arg5: boolean, arg6: string, arg7: $CharacterFilter$Type, arg8: boolean, arg9: boolean, arg10: $ConsumingSupplier$Type<(string), (boolean)>, arg11: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>, arg12: $BiConsumer$Type<($Screen$Type), (string)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(string)>, arg4: $Consumer$Type<(string)>, arg5: boolean, arg6: string, arg7: $CharacterFilter$Type, arg8: boolean, arg9: boolean, arg10: $ConsumingSupplier$Type<(string), (boolean)>, arg11: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addLongInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(long)>, arg4: $Consumer$Type<(long)>, arg5: boolean, arg6: long, arg7: $ConsumingSupplier$Type<(string), (boolean)>, arg8: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>, arg9: $BiConsumer$Type<($Screen$Type), (string)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addLongInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(long)>, arg4: $Consumer$Type<(long)>, arg5: boolean, arg6: long, arg7: $ConsumingSupplier$Type<(string), (boolean)>, arg8: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addIntegerInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(integer)>, arg4: $Consumer$Type<(integer)>, arg5: boolean, arg6: integer, arg7: $ConsumingSupplier$Type<(string), (boolean)>, arg8: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>): $ContextMenu$ClickableContextMenuEntry<(any)>
public static "addIntegerInputContextMenuEntryTo"(arg0: $ContextMenu$Type, arg1: string, arg2: $Component$Type, arg3: $Supplier$Type<(integer)>, arg4: $Consumer$Type<(integer)>, arg5: boolean, arg6: integer, arg7: $ConsumingSupplier$Type<(string), (boolean)>, arg8: $ConsumingSupplier$Type<(string), ($Tooltip$Type)>, arg9: $BiConsumer$Type<($Screen$Type), (string)>): $ContextMenu$ClickableContextMenuEntry<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NonStackableOverlayUI$Type = ($NonStackableOverlayUI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NonStackableOverlayUI_ = $NonStackableOverlayUI$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$TickerElement$TickMode, $TickerElement$TickMode$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerElement$TickMode"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$GenericExecutableBlock, $GenericExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$GenericExecutableBlock"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ExecutableElement, $ExecutableElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ExecutableElement"

export class $TickerElement extends $AbstractElement implements $ExecutableElement {
 "actionExecutor": $GenericExecutableBlock
 "tickDelayMs": long
 "isAsync": boolean
 "tickMode": $TickerElement$TickMode
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "getExecutableBlock"(): $GenericExecutableBlock
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
get "executableBlock"(): $GenericExecutableBlock
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickerElement$Type = ($TickerElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickerElement_ = $TickerElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeHourRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsRealTimeHourRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsRealTimeHourRequirement$Type = ($IsRealTimeHourRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsRealTimeHourRequirement_ = $IsRealTimeHourRequirement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$MapFunction, $MapFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$MapFunction"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"

export class $PathRef implements $Comparable<($PathRef)> {
static readonly "NO_OP": $PathRef


public "add"(arg0: any, arg1: $Configuration$Type): void
public "put"(arg0: string, arg1: any, arg2: $Configuration$Type): void
public "compareTo"(arg0: $PathRef$Type): integer
public "convert"(arg0: $MapFunction$Type, arg1: $Configuration$Type): void
public "set"(arg0: any, arg1: $Configuration$Type): void
public "delete"(arg0: $Configuration$Type): void
public static "create"(arg0: any, arg1: string): $PathRef
public static "create"(arg0: any, arg1: $Collection$Type<(string)>): $PathRef
public static "create"(arg0: any, arg1: integer): $PathRef
public static "createRoot"(arg0: any): $PathRef
public "renameKey"(arg0: string, arg1: string, arg2: $Configuration$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathRef$Type = ($PathRef);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathRef_ = $PathRef$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$Side" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $MenuBar$Side extends $Enum<($MenuBar$Side)> {
static readonly "LEFT": $MenuBar$Side
static readonly "RIGHT": $MenuBar$Side


public static "values"(): ($MenuBar$Side)[]
public static "valueOf"(arg0: string): $MenuBar$Side
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$Side$Type = (("left") | ("right")) | ($MenuBar$Side);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar$Side_ = $MenuBar$Side$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter" {
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$ParamType, $ParamType$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$ParamType"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Path, $Path$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path"
import {$ILateBindingValue, $ILateBindingValue$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/latebinding/$ILateBindingValue"

export class $Parameter {

constructor(arg0: $Path$Type)
constructor(arg0: string)
constructor()

public "getValue"(): any
public static "toList"<T>(arg0: $Class$Type<(T)>, arg1: $EvaluationContext$Type, arg2: $List$Type<($Parameter$Type)>): $List<(T)>
public "getType"(): $ParamType
public "getPath"(): $Path
public static "consume"(arg0: $Class$Type<(any)>, arg1: $EvaluationContext$Type, arg2: $Collection$Type<(any)>, arg3: any): void
public "setType"(arg0: $ParamType$Type): void
public "setJson"(arg0: string): void
public "setEvaluated"(arg0: boolean): void
public "hasEvaluated"(): boolean
public "setLateBinding"(arg0: $ILateBindingValue$Type): void
public "getILateBingValue"(): $ILateBindingValue
public "setPath"(arg0: $Path$Type): void
public "getJson"(): string
get "value"(): any
get "type"(): $ParamType
get "path"(): $Path
set "type"(value: $ParamType$Type)
set "json"(value: string)
set "evaluated"(value: boolean)
set "lateBinding"(value: $ILateBindingValue$Type)
get "iLateBingValue"(): $ILateBindingValue
set "path"(value: $Path$Type)
get "json"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Parameter$Type = ($Parameter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Parameter_ = $Parameter$Type;
}}
declare module "packages/de/keksuccino/konkrete/properties/$PropertiesSerializer" {
import {$PropertiesSet, $PropertiesSet$Type} from "packages/de/keksuccino/konkrete/properties/$PropertiesSet"

export class $PropertiesSerializer {

constructor()

public static "getProperties"(arg0: string): $PropertiesSet
public static "writeProperties"(arg0: $PropertiesSet$Type, arg1: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PropertiesSerializer$Type = ($PropertiesSerializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PropertiesSerializer_ = $PropertiesSerializer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaTexture$FmaFrame" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FmaTexture$FmaFrame {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FmaTexture$FmaFrame$Type = ($FmaTexture$FmaFrame);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FmaTexture$FmaFrame_ = $FmaTexture$FmaFrame$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/cache/$NOOPCache" {
import {$Cache, $Cache$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/cache/$Cache"
import {$JsonPath, $JsonPath$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPath"

export class $NOOPCache implements $Cache {

constructor()

public "get"(arg0: string): $JsonPath
public "put"(arg0: string, arg1: $JsonPath$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NOOPCache$Type = ($NOOPCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NOOPCache_ = $NOOPCache$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/other/$SendMessageAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $SendMessageAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SendMessageAction$Type = ($SendMessageAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SendMessageAction_ = $SendMessageAction$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/$SimpleAudioFactory" {
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$ALAudioClip, $ALAudioClip$Type} from "packages/de/keksuccino/melody/resources/audio/openal/$ALAudioClip"
import {$SimpleAudioFactory$SourceType, $SimpleAudioFactory$SourceType$Type} from "packages/de/keksuccino/melody/resources/audio/$SimpleAudioFactory$SourceType"

export class $SimpleAudioFactory {

constructor()

public static "ogg"(arg0: string, arg1: $SimpleAudioFactory$SourceType$Type): $CompletableFuture<($ALAudioClip)>
public static "wav"(arg0: string, arg1: $SimpleAudioFactory$SourceType$Type): $CompletableFuture<($ALAudioClip)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleAudioFactory$Type = ($SimpleAudioFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleAudioFactory_ = $SimpleAudioFactory$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinConnectScreen" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMixinConnectScreen {

}

export namespace $IMixinConnectScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinConnectScreen$Type = ($IMixinConnectScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinConnectScreen_ = $IMixinConnectScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ScanPathToken" {
import {$PathToken, $PathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken"
import {$EvaluationContextImpl, $EvaluationContextImpl$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$ScanPathToken$Predicate, $ScanPathToken$Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ScanPathToken$Predicate"

export class $ScanPathToken extends $PathToken {


public "isTokenDefinite"(): boolean
public static "walk"(arg0: $PathToken$Type, arg1: string, arg2: $PathRef$Type, arg3: any, arg4: $EvaluationContextImpl$Type, arg5: $ScanPathToken$Predicate$Type): void
public "evaluate"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContextImpl$Type): void
public static "walkArray"(arg0: $PathToken$Type, arg1: string, arg2: $PathRef$Type, arg3: any, arg4: $EvaluationContextImpl$Type, arg5: $ScanPathToken$Predicate$Type): void
public static "walkObject"(arg0: $PathToken$Type, arg1: string, arg2: $PathRef$Type, arg3: any, arg4: $EvaluationContextImpl$Type, arg5: $ScanPathToken$Predicate$Type): void
public "getPathFragment"(): string
get "tokenDefinite"(): boolean
get "pathFragment"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScanPathToken$Type = ($ScanPathToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScanPathToken_ = $ScanPathToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$Hyperlink" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$MarkdownTextFragment, $MarkdownTextFragment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment"

export class $MarkdownTextFragment$Hyperlink {
 "link": string
readonly "hyperlinkFragments": $List<($MarkdownTextFragment)>

constructor()

public "isHovered"(): boolean
get "hovered"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTextFragment$Hyperlink$Type = ($MarkdownTextFragment$Hyperlink);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTextFragment$Hyperlink_ = $MarkdownTextFragment$Hyperlink$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$InvalidPathException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$JsonPathException, $JsonPathException$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPathException"

export class $InvalidPathException extends $JsonPathException {

constructor(arg0: $Throwable$Type)
constructor(arg0: string, arg1: $Throwable$Type)
constructor(arg0: string)
constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvalidPathException$Type = ($InvalidPathException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvalidPathException_ = $InvalidPathException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinMusicManager" {
import {$SoundInstance, $SoundInstance$Type} from "packages/net/minecraft/client/resources/sounds/$SoundInstance"

export interface $IMixinMusicManager {

 "getCurrentMusic_FancyMenu"(): $SoundInstance

(): $SoundInstance
}

export namespace $IMixinMusicManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinMusicManager$Type = ($IMixinMusicManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinMusicManager_ = $IMixinMusicManager$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$RuntimePropertyContainer, $RuntimePropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$RuntimePropertyContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$Layout, $Layout$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"

export class $AbstractElement implements $Renderable, $GuiEventListener, $NarratableEntry, $NavigatableWidget {
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "getDisplayName"(): $Component
public "tick"(): void
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "isNavigatable"(): boolean
public "setFocused"(arg0: boolean): void
public static "getScreenWidth"(): integer
public static "getScreenHeight"(): integer
public "shouldRender"(): boolean
public static "getScreen"(): $Screen
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isFocused"(): boolean
public "onCloseScreen"(): void
public "onDestroyElement"(): void
public "getAbsoluteX"(): integer
public "getAbsoluteWidth"(): integer
public "getAbsoluteHeight"(): integer
public "setParentLayout"(arg0: $Layout$Type): void
public static "buildComponent"(arg0: string): $Component
public static "fixBackslashPath"(arg0: string): string
public "setNavigatable"(arg0: boolean): void
public "getParentLayout"(): $Layout
public "getAbsoluteY"(): integer
public static "getElementByInstanceIdentifier"(arg0: string): $AbstractElement
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "onOpenScreen"(): void
public "getMemory"(): $RuntimePropertyContainer
public "setInstanceIdentifier"(arg0: string): void
public "getInstanceIdentifier"(): string
public "getWidgetsToRegister"(): $List<($GuiEventListener)>
public "onBeforeResizeScreen"(): void
public "getChildElementAnchorPointX"(): integer
public "setElementAnchorPointParent"(arg0: $AbstractElement$Type): void
public "getElementAnchorPointParent"(): $AbstractElement
public "getChildElementAnchorPointY"(): integer
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getRectangle"(): $ScreenRectangle
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "isActive"(): boolean
public "getTabOrderGroup"(): integer
get "displayName"(): $Component
get "navigatable"(): boolean
set "focused"(value: boolean)
get "screenWidth"(): integer
get "screenHeight"(): integer
get "screen"(): $Screen
get "focused"(): boolean
get "absoluteX"(): integer
get "absoluteWidth"(): integer
get "absoluteHeight"(): integer
set "parentLayout"(value: $Layout$Type)
set "navigatable"(value: boolean)
get "parentLayout"(): $Layout
get "absoluteY"(): integer
get "focusable"(): boolean
set "focusable"(value: boolean)
get "memory"(): $RuntimePropertyContainer
set "instanceIdentifier"(value: string)
get "instanceIdentifier"(): string
get "widgetsToRegister"(): $List<($GuiEventListener)>
get "childElementAnchorPointX"(): integer
set "elementAnchorPointParent"(value: $AbstractElement$Type)
get "elementAnchorPointParent"(): $AbstractElement
get "childElementAnchorPointY"(): integer
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "active"(): boolean
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractElement$Type = ($AbstractElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractElement_ = $AbstractElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinMinecraft" {
import {$ResourceLoadStateTracker, $ResourceLoadStateTracker$Type} from "packages/net/minecraft/client/$ResourceLoadStateTracker"

export interface $IMixinMinecraft {

 "getReloadStateTrackerFancyMenu"(): $ResourceLoadStateTracker
 "openChatScreenFancyMenu"(arg0: string): void
 "getPausePartialTickFancyMenu"(): float
}

export namespace $IMixinMinecraft {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinMinecraft$Type = ($IMixinMinecraft);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinMinecraft_ = $IMixinMinecraft$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/input/$CharacterFilter" {
import {$CharacterFilter as $CharacterFilter$0, $CharacterFilter$Type as $CharacterFilter$0$Type} from "packages/de/keksuccino/konkrete/input/$CharacterFilter"

export class $CharacterFilter {

constructor()

public static "buildOnlyLowercaseFileNameFilter"(): $CharacterFilter
public static "buildLowercaseAndUppercaseFileNameFilter"(): $CharacterFilter
public "isAllowedText"(arg0: string): boolean
public static "buildResourceNameFilter"(): $CharacterFilter
public static "buildDecimalFiler"(): $CharacterFilter
public static "buildIntegerFiler"(): $CharacterFilter
public "filterForAllowedChars"(arg0: string): string
public "addAllowedCharacters"(...arg0: (string)[]): void
public "addAllowedCharacters"(...arg0: (character)[]): void
public "addForbiddenCharacters"(...arg0: (character)[]): void
public "addForbiddenCharacters"(...arg0: (string)[]): void
public "convertToLegacyFilter"(): $CharacterFilter$0
public static "buildUrlFilter"(): $CharacterFilter
public "isAllowedChar"(arg0: character): boolean
public "isAllowedChar"(arg0: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CharacterFilter$Type = ($CharacterFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CharacterFilter_ = $CharacterFilter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/$IsMultiplayerRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsMultiplayerRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsMultiplayerRequirement$Type = ($IsMultiplayerRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsMultiplayerRequirement_ = $IsMultiplayerRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$ChooseAnimationScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ChooseAnimationScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: string, arg1: $Consumer$Type<(string)>)

public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChooseAnimationScreen$Type = ($ChooseAnimationScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChooseAnimationScreen_ = $ChooseAnimationScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/splash/$TitleScreenSplashDeepEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractDeepEditorElement, $AbstractDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepEditorElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $TitleScreenSplashDeepEditorElement extends $AbstractDeepEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractDeepElement$Type, arg1: $LayoutEditorScreen$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenSplashDeepEditorElement$Type = ($TitleScreenSplashDeepEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenSplashDeepEditorElement_ = $TitleScreenSplashDeepEditorElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/screens/popup/$YesNoPopup" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$KeyboardData, $KeyboardData$Type} from "packages/de/keksuccino/konkrete/input/$KeyboardData"
import {$Popup, $Popup$Type} from "packages/de/keksuccino/konkrete/gui/screens/popup/$Popup"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $YesNoPopup extends $Popup {

constructor(arg0: integer, arg1: $Color$Type, arg2: integer, arg3: $Consumer$Type<(boolean)>, ...arg4: (string)[])

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: $Screen$Type): void
public "onEnterPressed"(arg0: $KeyboardData$Type): void
public "onEscapePressed"(arg0: $KeyboardData$Type): void
public "setNotificationText"(...arg0: (string)[]): void
set "notificationText"(value: (string)[])
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $YesNoPopup$Type = ($YesNoPopup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $YesNoPopup_ = $YesNoPopup$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorLine" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/konkrete/input/$CharacterFilter"
import {$AdvancedTextField, $AdvancedTextField$Type} from "packages/de/keksuccino/konkrete/gui/content/$AdvancedTextField"
import {$TextEditorScreen, $TextEditorScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IMixinEditBox, $IMixinEditBox$Type} from "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinEditBox"

export class $TextEditorLine extends $AdvancedTextField {
 "parent": $TextEditorScreen
 "isInMouseHighlightingMode": boolean
 "textWidth": integer
 "lineIndex": integer
static readonly "BACKWARDS": integer
static readonly "FORWARDS": integer
static readonly "DEFAULT_TEXT_COLOR": integer
readonly "font": $Font
 "displayPos": integer
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: boolean, arg6: $CharacterFilter$Type, arg7: $TextEditorScreen$Type)

public "getActualHeight"(): integer
public "getAsAccessor"(): $IMixinEditBox
public "isInEditorArea"(): boolean
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "deleteChars"(arg0: integer): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "setValue"(arg0: string): void
public "setMaxLength"(arg0: integer): void
public "insertText"(arg0: string): void
public "tick"(): void
public "setCursorPosition"(arg0: integer): void
public "renderWidget"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isHighlightedHovered"(): boolean
get "actualHeight"(): integer
get "asAccessor"(): $IMixinEditBox
get "inEditorArea"(): boolean
set "value"(value: string)
set "maxLength"(value: integer)
set "cursorPosition"(value: integer)
get "highlightedHovered"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEditorLine$Type = ($TextEditorLine);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEditorLine_ = $TextEditorLine$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/enums/$NamedEnum" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $NamedEnum<E> {

 "getName"(): string
 "getByNameInternal"(arg0: string): E
 "getValues"(): (E)[]
}

export namespace $NamedEnum {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NamedEnum$Type<E> = ($NamedEnum<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NamedEnum_<E> = $NamedEnum$Type<(E)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$InputFieldEditorElement, $InputFieldEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldEditorElement"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$InputFieldElement$InputFieldType, $InputFieldElement$InputFieldType$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldElement$InputFieldType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ExtendedEditBox, $ExtendedEditBox$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/editbox/$ExtendedEditBox"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $InputFieldElement extends $AbstractElement {
 "linkedVariable": string
 "type": $InputFieldElement$InputFieldType
 "maxTextLength": integer
 "editBox": $ExtendedEditBox
 "lastValue": string
 "navigatable": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<($InputFieldElement$Type), ($InputFieldEditorElement$Type)>)

public "tick"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getWidgetsToRegister"(): $List<($GuiEventListener)>
get "widgetsToRegister"(): $List<($GuiEventListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputFieldElement$Type = ($InputFieldElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputFieldElement_ = $InputFieldElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/cycle/$ILocalizedValueCycle" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IValueCycle, $IValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$IValueCycle"

export interface $ILocalizedValueCycle<T> extends $IValueCycle<(T)> {

 "setCycleComponentStyleSupplier"(arg0: $ConsumingSupplier$Type<(T), ($Style$Type)>): $ILocalizedValueCycle<(T)>
 "getCurrentValueComponent"(): $MutableComponent
 "getCycleLocalizationKey"(): string
 "getCycleComponent"(): $MutableComponent
 "next"(): T
 "current"(): T
 "setCurrentValueByIndex"(arg0: integer): $IValueCycle<(T)>
 "setCurrentValueByIndex"(arg0: integer, arg1: boolean): $IValueCycle<(T)>
 "clearCycleListeners"(): $IValueCycle<(T)>
 "addCycleListener"(arg0: $Consumer$Type<(T)>): $IValueCycle<(T)>
 "setCurrentValue"(arg0: T): $IValueCycle<(T)>
 "setCurrentValue"(arg0: T, arg1: boolean): $IValueCycle<(T)>
 "removeValue"(arg0: T): $IValueCycle<(T)>
 "getValues"(): $List<(T)>
}

export namespace $ILocalizedValueCycle {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILocalizedValueCycle$Type<T> = ($ILocalizedValueCycle<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILocalizedValueCycle_<T> = $ILocalizedValueCycle$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$SimpleTexture" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$AspectRatio, $AspectRatio$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$AspectRatio"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$NativeImage, $NativeImage$Type} from "packages/com/mojang/blaze3d/platform/$NativeImage"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $SimpleTexture implements $ITexture {
static readonly "FULLY_TRANSPARENT_SIMPLE_TEXTURE_SUPPLIER": $ResourceSupplier<($ITexture)>


public static "of"(arg0: $InputStream$Type): $SimpleTexture
public static "of"(arg0: $InputStream$Type, arg1: string, arg2: $SimpleTexture$Type): $SimpleTexture
public static "of"(arg0: $NativeImage$Type): $SimpleTexture
public "close"(): void
public static "location"(arg0: $ResourceLocation$Type): $SimpleTexture
public static "location"(arg0: $ResourceLocation$Type, arg1: $SimpleTexture$Type): $SimpleTexture
public "open"(): $InputStream
public "reset"(): void
public static "local"(arg0: $File$Type): $SimpleTexture
public static "local"(arg0: $File$Type, arg1: $SimpleTexture$Type): $SimpleTexture
public "isReady"(): boolean
public "isClosed"(): boolean
public "getAspectRatio"(): $AspectRatio
public static "web"(arg0: string): $SimpleTexture
public static "web"(arg0: string, arg1: $SimpleTexture$Type): $SimpleTexture
public "getWidth"(): integer
public "getHeight"(): integer
public "isLoadingFailed"(): boolean
public "isLoadingCompleted"(): boolean
public "getResourceLocation"(): $ResourceLocation
public "waitForLoadingCompletedOrFailed"(arg0: long): void
public "waitForReady"(arg0: long): void
get "ready"(): boolean
get "closed"(): boolean
get "aspectRatio"(): $AspectRatio
get "width"(): integer
get "height"(): integer
get "loadingFailed"(): boolean
get "loadingCompleted"(): boolean
get "resourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleTexture$Type = ($SimpleTexture);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleTexture_ = $SimpleTexture$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/$AdvancedTextField" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/konkrete/input/$CharacterFilter"
import {$ExtendedEditBox, $ExtendedEditBox$Type} from "packages/de/keksuccino/konkrete/gui/content/$ExtendedEditBox"
import {$IMixinEditBox, $IMixinEditBox$Type} from "packages/de/keksuccino/konkrete/mixin/client/$IMixinEditBox"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

/**
 * 
 * @deprecated
 */
export class $AdvancedTextField extends $ExtendedEditBox {
static readonly "BACKWARDS": integer
static readonly "FORWARDS": integer
static readonly "DEFAULT_TEXT_COLOR": integer
readonly "font": $Font
 "displayPos": integer
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

/**
 * 
 * @deprecated
 */
constructor(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: boolean, arg6: $CharacterFilter$Type)

public "getAccessor"(): $IMixinEditBox
/**
 * 
 * @deprecated
 */
public "getMaxStringLength"(): integer
/**
 * 
 * @deprecated
 */
public "isEnabled"(): boolean
public "isLeftClicked"(): boolean
/**
 * 
 * @deprecated
 */
public "getSelectionEnd"(): integer
public "m_94222_"(): boolean
/**
 * 
 * @deprecated
 */
public "isHoveredOrFocused"(): boolean
get "accessor"(): $IMixinEditBox
get "maxStringLength"(): integer
get "enabled"(): boolean
get "leftClicked"(): boolean
get "selectionEnd"(): integer
get "hoveredOrFocused"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancedTextField$Type = ($AdvancedTextField);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancedTextField_ = $AdvancedTextField$Type;
}}
declare module "packages/de/keksuccino/konkrete/rendering/$GifDecoder" {
import {$GifDecoder$GifImage, $GifDecoder$GifImage$Type} from "packages/de/keksuccino/konkrete/rendering/$GifDecoder$GifImage"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"

export class $GifDecoder {

constructor()

public static "read"(arg0: $InputStream$Type): $GifDecoder$GifImage
public static "read"(arg0: (byte)[]): $GifDecoder$GifImage
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GifDecoder$Type = ($GifDecoder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GifDecoder_ = $GifDecoder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/component/$ComponentWidget" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"

export class $ComponentWidget extends $AbstractWidget implements $NavigatableWidget {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer


public "getBaseColorSupplier"(): $ConsumingSupplier<($ComponentWidget), ($DrawableColor)>
public "setOnHoverOrFocusStart"(arg0: $Consumer$Type<($ComponentWidget$Type)>): $ComponentWidget
public "setOnHoverOrFocusEnd"(arg0: $Consumer$Type<($ComponentWidget$Type)>): $ComponentWidget
public "append"(arg0: $ComponentWidget$Type): $ComponentWidget
public static "of"(arg0: $MutableComponent$Type, arg1: integer, arg2: integer): $ComponentWidget
public static "empty"(arg0: integer, arg1: integer): $ComponentWidget
public "getParent"(): $ComponentWidget
public static "literal"(arg0: string, arg1: integer, arg2: integer): $ComponentWidget
public "getText"(): $MutableComponent
public "getChildren"(): $List<($ComponentWidget)>
public "setText"(arg0: $MutableComponent$Type): $ComponentWidget
public "setShadow"(arg0: boolean): $ComponentWidget
public static "translatable"(arg0: string, arg1: integer, arg2: integer): $ComponentWidget
public "isNavigatable"(): boolean
public "setTextSupplier"(arg0: $ConsumingSupplier$Type<($ComponentWidget$Type), ($MutableComponent$Type)>): $ComponentWidget
public "hasShadow"(): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setOnClick"(arg0: $Consumer$Type<($ComponentWidget$Type)>): $ComponentWidget
public "getBaseColor"(): $DrawableColor
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
/**
 * 
 * @deprecated
 */
public "setMessage"(arg0: $Component$Type): void
public "setBaseColorSupplier"(arg0: $ConsumingSupplier$Type<($ComponentWidget$Type), ($DrawableColor$Type)>): $ComponentWidget
public "setNavigatable"(arg0: boolean): void
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getHeight"(): integer
/**
 * 
 * @deprecated
 */
public "getMessage"(): $Component
public "getWidth"(): integer
public "setBaseColor"(arg0: $DrawableColor$Type): $ComponentWidget
public "getTextSupplier"(): $ConsumingSupplier<($ComponentWidget), ($MutableComponent)>
get "baseColorSupplier"(): $ConsumingSupplier<($ComponentWidget), ($DrawableColor)>
set "onHoverOrFocusStart"(value: $Consumer$Type<($ComponentWidget$Type)>)
set "onHoverOrFocusEnd"(value: $Consumer$Type<($ComponentWidget$Type)>)
get "parent"(): $ComponentWidget
get "text"(): $MutableComponent
get "children"(): $List<($ComponentWidget)>
set "text"(value: $MutableComponent$Type)
set "shadow"(value: boolean)
get "navigatable"(): boolean
set "textSupplier"(value: $ConsumingSupplier$Type<($ComponentWidget$Type), ($MutableComponent$Type)>)
set "onClick"(value: $Consumer$Type<($ComponentWidget$Type)>)
get "baseColor"(): $DrawableColor
set "message"(value: $Component$Type)
set "baseColorSupplier"(value: $ConsumingSupplier$Type<($ComponentWidget$Type), ($DrawableColor$Type)>)
set "navigatable"(value: boolean)
get "focusable"(): boolean
set "focusable"(value: boolean)
get "height"(): integer
get "message"(): $Component
get "width"(): integer
set "baseColor"(value: $DrawableColor$Type)
get "textSupplier"(): $ConsumingSupplier<($ComponentWidget), ($MutableComponent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ComponentWidget$Type = ($ComponentWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ComponentWidget_ = $ComponentWidget$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/$ScreenCustomization" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ScreenCustomization$ScreenBlacklistRule, $ScreenCustomization$ScreenBlacklistRule$Type} from "packages/de/keksuccino/fancymenu/customization/$ScreenCustomization$ScreenBlacklistRule"

export class $ScreenCustomization {
static readonly "CUSTOMIZABLE_MENUS_FILE": $File

constructor()

public static "init"(): void
public static "setIsNewMenu"(arg0: boolean): void
public static "isNewMenu"(): boolean
public static "reloadFancyMenu"(): void
public static "isCustomizationEnabledForScreen"(arg0: $Screen$Type, arg1: boolean): boolean
public static "isCustomizationEnabledForScreen"(arg0: $Screen$Type): boolean
public static "generateUniqueIdentifier"(): string
/**
 * 
 * @deprecated
 */
public static "getAbsoluteGameDirectoryPath"(arg0: string): string
/**
 * 
 * @deprecated
 */
public static "getPathWithoutGameDirectory"(arg0: string): string
/**
 * 
 * @deprecated
 */
public static "isExistingGameDirectoryPath"(arg0: string): boolean
public static "readCustomizableScreensFromFile"(): void
public static "reloadCurrentScreen"(): void
public static "addScreenBlacklistRule"(arg0: $ScreenCustomization$ScreenBlacklistRule$Type): void
public static "isScreenBlacklisted"(arg0: string): boolean
public static "isScreenBlacklisted"(arg0: $Screen$Type): boolean
public static "setScreenCustomizationEnabled"(arg0: boolean): void
public static "setCustomizationForScreenEnabled"(arg0: $Screen$Type, arg1: boolean): void
public static "isCurrentMenuScrollable"(): boolean
public static "reInitCurrentScreen"(): void
public static "isScreenCustomizationEnabled"(): boolean
public static "disableCustomizationForAllScreens"(): void
public static "getScreenBlacklistRules"(): $List<($ScreenCustomization$ScreenBlacklistRule)>
get "newMenu"(): boolean
set "screenCustomizationEnabled"(value: boolean)
get "currentMenuScrollable"(): boolean
get "screenCustomizationEnabled"(): boolean
get "screenBlacklistRules"(): $List<($ScreenCustomization$ScreenBlacklistRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCustomization$Type = ($ScreenCustomization);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCustomization_ = $ScreenCustomization$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONValue" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$JsonWriterI, $JsonWriterI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/reader/$JsonWriterI"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"
import {$JsonWriter, $JsonWriter$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/reader/$JsonWriter"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"
import {$Reader, $Reader$Type} from "packages/java/io/$Reader"

export class $JSONValue {
static "COMPRESSION": $JSONStyle
static readonly "defaultWriter": $JsonWriter
static readonly "defaultReader": $JsonReader

constructor()

public static "compress"(arg0: string, arg1: $JSONStyle$Type): string
public static "compress"(arg0: string): string
public static "parse"<T>(arg0: string, arg1: T): T
public static "parse"<T>(arg0: $InputStream$Type, arg1: T): T
public static "parse"(arg0: string): any
public static "parse"(arg0: $InputStream$Type): any
public static "parse"<T>(arg0: (byte)[], arg1: $Class$Type<(T)>): T
public static "parse"(arg0: $Reader$Type): any
public static "parse"<T>(arg0: $InputStream$Type, arg1: $Class$Type<(T)>): T
public static "parse"(arg0: (byte)[]): any
public static "parse"<T>(arg0: $Reader$Type, arg1: T): T
public static "parse"<T>(arg0: string, arg1: $Class$Type<(T)>): T
public static "parse"<T>(arg0: $Reader$Type, arg1: $Class$Type<(T)>): T
public static "escape"(arg0: string): string
public static "escape"(arg0: string, arg1: $JSONStyle$Type): string
public static "escape"(arg0: string, arg1: $Appendable$Type): void
public static "escape"(arg0: string, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void
public static "parseStrict"(arg0: string): any
public static "parseStrict"(arg0: $Reader$Type): any
public static "parseWithException"(arg0: $InputStream$Type): any
public static "parseWithException"(arg0: $Reader$Type): any
public static "parseWithException"(arg0: (byte)[]): any
public static "parseWithException"(arg0: string): any
public static "parseWithException"<T>(arg0: string, arg1: $Class$Type<(T)>): T
public static "registerReader"<T>(arg0: $Class$Type<(T)>, arg1: $JsonReaderI$Type<(T)>): void
public static "isValidJson"(arg0: string): boolean
public static "isValidJson"(arg0: $Reader$Type): boolean
public static "isValidJsonStrict"(arg0: string): boolean
public static "isValidJsonStrict"(arg0: $Reader$Type): boolean
public static "parseKeepingOrder"(arg0: string): any
public static "parseKeepingOrder"(arg0: $Reader$Type): any
public static "uncompress"(arg0: string): string
public static "toJSONString"(arg0: any): string
public static "toJSONString"(arg0: any, arg1: $JSONStyle$Type): string
public static "remapField"<T>(arg0: $Class$Type<(T)>, arg1: string, arg2: string): void
public static "registerWriter"<T>(arg0: $Class$Type<(any)>, arg1: $JsonWriterI$Type<(T)>): void
public static "writeJSONString"(arg0: any, arg1: $Appendable$Type): void
public static "writeJSONString"(arg0: any, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONValue$Type = ($JSONValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONValue_ = $JSONValue$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$ArgumentSeparatorToken" {
import {$Token, $Token$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token"

export class $ArgumentSeparatorToken extends $Token {
static readonly "TOKEN_NUMBER": short
static readonly "TOKEN_OPERATOR": short
static readonly "TOKEN_FUNCTION": short
static readonly "TOKEN_PARENTHESES_OPEN": short
static readonly "TOKEN_PARENTHESES_CLOSE": short
static readonly "TOKEN_VARIABLE": short
static readonly "TOKEN_SEPARATOR": short


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArgumentSeparatorToken$Type = ($ArgumentSeparatorToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArgumentSeparatorToken_ = $ArgumentSeparatorToken$Type;
}}
declare module "packages/de/keksuccino/melody/mixin/mixins/common/client/$IMixinSoundManager" {
import {$SoundEngine, $SoundEngine$Type} from "packages/net/minecraft/client/sounds/$SoundEngine"

export interface $IMixinSoundManager {

 "getSoundEngineMelody"(): $SoundEngine

(): $SoundEngine
}

export namespace $IMixinSoundManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinSoundManager$Type = ($IMixinSoundManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinSoundManager_ = $IMixinSoundManager$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/types/$VideoFileType" {
import {$IVideo, $IVideo$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/video/$IVideo"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"
import {$FileCodec, $FileCodec$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileCodec"

export class $VideoFileType extends $FileType<($IVideo)> {

constructor(arg0: $FileCodec$Type<($IVideo$Type)>, arg1: string, ...arg2: (string)[])

public "setLocalAllowed"(arg0: boolean): $VideoFileType
public "addExtension"(arg0: string): $VideoFileType
set "localAllowed"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VideoFileType$Type = ($VideoFileType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VideoFileType_ = $VideoFileType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsServerOnlineRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsServerOnlineRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsServerOnlineRequirement$Type = ($IsServerOnlineRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsServerOnlineRequirement_ = $IsServerOnlineRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/screen/$ScreenInstanceFactory" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ScreenInstanceFactory {

constructor()

public static "tryConstruct"(arg0: string): $Screen
public static "getScreenProvider"(arg0: string): $Supplier<(any)>
public static "registerScreenProvider"(arg0: string, arg1: $Supplier$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenInstanceFactory$Type = ($ScreenInstanceFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenInstanceFactory_ = $ScreenInstanceFactory$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$PredicateNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $ValueNodes$PredicateNode extends $ValueNode {

constructor(arg0: $Predicate$Type)

public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "isPredicateNode"(): boolean
public "asPredicateNode"(): $ValueNodes$PredicateNode
public "getPredicate"(): $Predicate
get "predicateNode"(): boolean
get "predicate"(): $Predicate
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$PredicateNode$Type = ($ValueNodes$PredicateNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$PredicateNode_ = $ValueNodes$PredicateNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/contexts/$DeathScreenWidgetIdentificationContext" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$WidgetIdentificationContext, $WidgetIdentificationContext$Type} from "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/$WidgetIdentificationContext"

export class $DeathScreenWidgetIdentificationContext extends $WidgetIdentificationContext {

constructor()

public "getTargetScreen"(): $Class<(any)>
get "targetScreen"(): $Class<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeathScreenWidgetIdentificationContext$Type = ($DeathScreenWidgetIdentificationContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeathScreenWidgetIdentificationContext_ = $DeathScreenWidgetIdentificationContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$CalculatorPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $CalculatorPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CalculatorPlaceholder$Type = ($CalculatorPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CalculatorPlaceholder_ = $CalculatorPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserBase" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $JSONParserBase {
static readonly "EOI": byte

constructor(arg0: integer)

public "checkLeadinZero"(): void
public "checkControleChar"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONParserBase$Type = ($JSONParserBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONParserBase_ = $JSONParserBase$Type;
}}
declare module "packages/de/keksuccino/konkrete/rendering/$RenderUtils" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderUtils {

constructor()

public static "fill"(arg0: $GuiGraphics$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: integer, arg6: float): void
public static "fill"(arg0: $PoseStack$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: integer, arg6: float): void
public static "setScale"(arg0: $GuiGraphics$Type, arg1: float): void
public static "setScale"(arg0: $PoseStack$Type, arg1: float): void
public static "getColorFromHexString"(arg0: string): $Color
public static "setZLevelPre"(arg0: $PoseStack$Type, arg1: integer): void
public static "setZLevelPre"(arg0: $GuiGraphics$Type, arg1: integer): void
public static "setZLevelPost"(arg0: $PoseStack$Type): void
public static "setZLevelPost"(arg0: $GuiGraphics$Type): void
public static "bindTexture"(arg0: $ResourceLocation$Type): void
public static "bindTexture"(arg0: $ResourceLocation$Type, arg1: boolean): void
public static "postScale"(arg0: $PoseStack$Type): void
public static "postScale"(arg0: $GuiGraphics$Type): void
public static "getBlankImageResource"(): $ResourceLocation
public static "getWhiteImageResource"(): $ResourceLocation
public static "doubleBlit"(arg0: double, arg1: double, arg2: float, arg3: float, arg4: integer, arg5: integer): void
public static "innerDoubleBlit"(arg0: double, arg1: double, arg2: double, arg3: double, arg4: integer, arg5: float, arg6: float, arg7: float, arg8: float): void
set "zLevelPost"(value: $PoseStack$Type)
set "zLevelPost"(value: $GuiGraphics$Type)
get "blankImageResource"(): $ResourceLocation
get "whiteImageResource"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderUtils$Type = ($RenderUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderUtils_ = $RenderUtils$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$MapFunction" {
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"

export interface $MapFunction {

 "map"(arg0: any, arg1: $Configuration$Type): any

(arg0: any, arg1: $Configuration$Type): any
}

export namespace $MapFunction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapFunction$Type = ($MapFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapFunction_ = $MapFunction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListBackgroundEvent$Post" {
import {$AbstractSelectionList, $AbstractSelectionList$Type} from "packages/net/minecraft/client/gui/components/$AbstractSelectionList"
import {$RenderGuiListBackgroundEvent, $RenderGuiListBackgroundEvent$Type} from "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListBackgroundEvent"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderGuiListBackgroundEvent$Post extends $RenderGuiListBackgroundEvent {

constructor(arg0: $GuiGraphics$Type, arg1: $AbstractSelectionList$Type<(any)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderGuiListBackgroundEvent$Post$Type = ($RenderGuiListBackgroundEvent$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderGuiListBackgroundEvent$Post_ = $RenderGuiListBackgroundEvent$Post$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinOptions" {
import {$PlayerModelPart, $PlayerModelPart$Type} from "packages/net/minecraft/world/entity/player/$PlayerModelPart"
import {$Options$FieldAccess, $Options$FieldAccess$Type} from "packages/net/minecraft/client/$Options$FieldAccess"
import {$Set, $Set$Type} from "packages/java/util/$Set"

export interface $IMixinOptions {

 "getModelPartsFancyMenu"(): $Set<($PlayerModelPart)>
 "invokeProcessOptionsFancyMenu"(arg0: $Options$FieldAccess$Type): void
}

export namespace $IMixinOptions {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinOptions$Type = ($IMixinOptions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinOptions_ = $IMixinOptions$Type;
}}
declare module "packages/de/keksuccino/konkrete/localization/$LocaleUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LocaleUtils {

constructor()

public static "getKeyForString"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocaleUtils$Type = ($LocaleUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocaleUtils_ = $LocaleUtils$Type;
}}
declare module "packages/de/keksuccino/konkrete/mixin/client/$IMixinEditBox" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMixinEditBox {

 "getIsEditableKonkrete"(): boolean
 "getHightlightPosKonkrete"(): integer
 "onValueChangeKonkrete"(arg0: string): void
 "getMaxLengthKonkrete"(): integer
}

export namespace $IMixinEditBox {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinEditBox$Type = ($IMixinEditBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinEditBox_ = $IMixinEditBox$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$JsonContext" {
import {$ReadContext, $ReadContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$ReadContext"
import {$TypeRef, $TypeRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$TypeRef"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$MapFunction, $MapFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$MapFunction"
import {$JsonPath, $JsonPath$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPath"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$DocumentContext, $DocumentContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$DocumentContext"
import {$EvaluationListener, $EvaluationListener$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener"

export class $JsonContext implements $DocumentContext {


public "add"(arg0: string, arg1: any, ...arg2: ($Predicate$Type)[]): $DocumentContext
public "add"(arg0: $JsonPath$Type, arg1: any): $DocumentContext
public "put"(arg0: $JsonPath$Type, arg1: string, arg2: any): $DocumentContext
public "put"(arg0: string, arg1: string, arg2: any, ...arg3: ($Predicate$Type)[]): $DocumentContext
public "map"(arg0: string, arg1: $MapFunction$Type, ...arg2: ($Predicate$Type)[]): $DocumentContext
public "map"(arg0: $JsonPath$Type, arg1: $MapFunction$Type): $DocumentContext
public "limit"(arg0: integer): $ReadContext
public "set"(arg0: string, arg1: any, ...arg2: ($Predicate$Type)[]): $DocumentContext
public "set"(arg0: $JsonPath$Type, arg1: any): $DocumentContext
public "read"<T>(arg0: $JsonPath$Type, arg1: $Class$Type<(T)>): T
public "read"<T>(arg0: $JsonPath$Type): T
public "read"<T>(arg0: string, arg1: $Class$Type<(T)>, ...arg2: ($Predicate$Type)[]): T
public "read"<T>(arg0: string, ...arg1: ($Predicate$Type)[]): T
public "read"<T>(arg0: string, arg1: $TypeRef$Type<(T)>): T
public "read"<T>(arg0: $JsonPath$Type, arg1: $TypeRef$Type<(T)>): T
public "delete"(arg0: string, ...arg1: ($Predicate$Type)[]): $DocumentContext
public "delete"(arg0: $JsonPath$Type): $DocumentContext
public "configuration"(): $Configuration
public "json"(): any
public "jsonString"(): string
public "renameKey"(arg0: $JsonPath$Type, arg1: string, arg2: string): $DocumentContext
public "renameKey"(arg0: string, arg1: string, arg2: string, ...arg3: ($Predicate$Type)[]): $DocumentContext
public "withListeners"(...arg0: ($EvaluationListener$Type)[]): $ReadContext
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonContext$Type = ($JsonContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonContext_ = $JsonContext$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl" {
import {$RootPathToken, $RootPathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$RootPathToken"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Path, $Path$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$Option, $Option$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Option"
import {$JsonProvider, $JsonProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$JsonProvider"

export class $EvaluationContextImpl implements $EvaluationContext {

constructor(arg0: $Path$Type, arg1: any, arg2: $Configuration$Type, arg3: boolean)

public "forUpdate"(): boolean
public "getValue"<T>(arg0: boolean): T
public "getValue"<T>(): T
public "configuration"(): $Configuration
public "getRoot"(): $RootPathToken
public "getPath"<T>(): T
public "options"(): $Set<($Option)>
public "addResult"(arg0: string, arg1: $PathRef$Type, arg2: any): void
public "documentEvalCache"(): $HashMap<($Path), (any)>
public "jsonProvider"(): $JsonProvider
public "updateOperations"(): $Collection<($PathRef)>
public "getPathList"(): $List<(string)>
public "rootDocument"(): any
get "value"(): T
get "root"(): $RootPathToken
get "path"(): T
get "pathList"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvaluationContextImpl$Type = ($EvaluationContextImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvaluationContextImpl_ = $EvaluationContextImpl$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPathException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$RuntimeException, $RuntimeException$Type} from "packages/java/lang/$RuntimeException"

export class $JsonPathException extends $RuntimeException {

constructor(arg0: $Throwable$Type)
constructor(arg0: string, arg1: $Throwable$Type)
constructor(arg0: string)
constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonPathException$Type = ($JsonPathException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonPathException_ = $JsonPathException$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/text/$Length" {
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathFunction, $PathFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunction"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export class $Length implements $PathFunction {
static readonly "TOKEN_NAME": string

constructor()

public "invoke"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContext$Type, arg4: $List$Type<($Parameter$Type)>): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Length$Type = ($Length);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Length_ = $Length$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$ModLoaderVersionPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ModLoaderVersionPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModLoaderVersionPlaceholder$Type = ($ModLoaderVersionPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModLoaderVersionPlaceholder_ = $ModLoaderVersionPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinEditBox" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $IMixinEditBox {

 "getFrameFancyMenu"(): integer
 "getHintFancyMenu"(): $Component
 "getDisplayPosFancyMenu"(): integer
 "setDisplayPosFancyMenu"(arg0: integer): void
 "getIsEditableFancyMenu"(): boolean
 "getSuggestionFancyMenu"(): string
 "getFormatterFancyMenu"(): $BiFunction<(string), (integer), ($FormattedCharSequence)>
 "setShiftPressedFancyMenu"(arg0: boolean): void
 "getTextColorFancyMenu"(): integer
 "getMaxLengthFancyMenu"(): integer
 "getBorderedFancyMenu"(): boolean
 "invokeRenderHighlightFancyMenu"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
 "invokeDeleteTextFancyMenu"(arg0: integer): void
 "getTextColorUneditableFancyMenu"(): integer
 "getHighlightPosFancyMenu"(): integer
}

export namespace $IMixinEditBox {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinEditBox$Type = ($IMixinEditBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinEditBox_ = $IMixinEditBox$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/$PacketMessageBaseForge" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PacketMessageBaseForge {
 "direction": string

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketMessageBaseForge$Type = ($PacketMessageBaseForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketMessageBaseForge_ = $PacketMessageBaseForge$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/splash/$SplashTextElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$SplashTextElement, $SplashTextElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/splash/$SplashTextElement"
import {$SplashTextEditorElement, $SplashTextEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/splash/$SplashTextEditorElement"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$InitOrResizeScreenStartingEvent, $InitOrResizeScreenStartingEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenStartingEvent"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

export class $SplashTextElementBuilder extends $ElementBuilder<($SplashTextElement), ($SplashTextEditorElement)> {
readonly "splashCache": $Map<(string), ($SplashTextElement)>
 "isNewMenu": boolean

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "deserializeElement"(arg0: $SerializedElement$Type): $SplashTextElement
public "onInitScreenPre"(arg0: $InitOrResizeScreenStartingEvent$Type): void
public "onModReloaded"(arg0: $ModReloadEvent$Type): void
public "buildDefaultInstance"(): $SplashTextElement
public "wrapIntoEditorElement"(arg0: $SplashTextElement$Type, arg1: $LayoutEditorScreen$Type): $SplashTextEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SplashTextElementBuilder$Type = ($SplashTextElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SplashTextElementBuilder_ = $SplashTextElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$StringifyPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $StringifyPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringifyPlaceholder$Type = ($StringifyPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringifyPlaceholder_ = $StringifyPlaceholder$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/$AudioClip" {
import {$Closeable, $Closeable$Type} from "packages/java/io/$Closeable"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"

export interface $AudioClip extends $Closeable {

 "resume"(): void
 "stop"(): void
 "isClosed"(): boolean
 "play"(): void
 "isPlaying"(): boolean
 "isPaused"(): boolean
 "pause"(): void
 "setSoundChannel"(arg0: $SoundSource$Type): void
 "getSoundChannel"(): $SoundSource
 "setVolume"(arg0: float): void
 "getVolume"(): float
 "close"(): void
}

export namespace $AudioClip {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AudioClip$Type = ($AudioClip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AudioClip_ = $AudioClip$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorThemeSerializer" {
import {$TypeAdapter, $TypeAdapter$Type} from "packages/com/google/gson/$TypeAdapter"
import {$File, $File$Type} from "packages/java/io/$File"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$UIColorTheme, $UIColorTheme$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorTheme"

export class $UIColorThemeSerializer {
static readonly "DRAWABLE_COLOR_TYPE_ADAPTER": $TypeAdapter<($DrawableColor)>

constructor()

public static "serializeTheme"(arg0: $UIColorTheme$Type): string
public static "deserializeTheme"(arg0: string): $UIColorTheme
public static "deserializeThemeFromFile"(arg0: $File$Type): $UIColorTheme
public static "serializeThemeToFile"(arg0: $UIColorTheme$Type, arg1: $File$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UIColorThemeSerializer$Type = ($UIColorThemeSerializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UIColorThemeSerializer_ = $UIColorThemeSerializer$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArraySliceOperation" {
import {$ArraySliceOperation$Operation, $ArraySliceOperation$Operation$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArraySliceOperation$Operation"

export class $ArraySliceOperation {


public "toString"(): string
public "to"(): integer
public "from"(): integer
public static "parse"(arg0: string): $ArraySliceOperation
public "operation"(): $ArraySliceOperation$Operation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArraySliceOperation$Type = ($ArraySliceOperation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArraySliceOperation_ = $ArraySliceOperation$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$Escape4Web" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JStylerObj$StringProtector, $JStylerObj$StringProtector$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$StringProtector"

export class $JStylerObj$Escape4Web implements $JStylerObj$StringProtector {


public "escape"(arg0: string, arg1: $Appendable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JStylerObj$Escape4Web$Type = ($JStylerObj$Escape4Web);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JStylerObj$Escape4Web_ = $JStylerObj$Escape4Web$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinReceivingLevelScreen" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMixinReceivingLevelScreen {

 "setCreatedAtFancyMenu"(arg0: long): void

(arg0: long): void
}

export namespace $IMixinReceivingLevelScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinReceivingLevelScreen$Type = ($IMixinReceivingLevelScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinReceivingLevelScreen_ = $IMixinReceivingLevelScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$StringListChooserScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $StringListChooserScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Component$Type, arg1: $List$Type<(string)>, arg2: $Consumer$Type<(string)>)

public "allowDone"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringListChooserScreen$Type = ($StringListChooserScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringListChooserScreen_ = $StringListChooserScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/themes/$LightUIColorTheme" {
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$UIColorTheme, $UIColorTheme$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorTheme"

export class $LightUIColorTheme extends $UIColorTheme {
 "menu_bar_bottom_line_color": $DrawableColor
 "layout_editor_mouse_selection_rectangle_color": $DrawableColor
 "layout_editor_grid_color_normal": $DrawableColor
 "layout_editor_grid_color_center": $DrawableColor
 "layout_editor_element_border_color_normal": $DrawableColor
 "layout_editor_element_border_color_selected": $DrawableColor
 "layout_editor_element_dragging_not_allowed_color": $DrawableColor
 "layout_editor_anchor_point_overlay_color_base": $DrawableColor
 "layout_editor_anchor_point_overlay_color_border": $DrawableColor
 "layout_editor_close_icon_color": $DrawableColor
 "scroll_grabber_color_normal": $DrawableColor
 "scroll_grabber_color_hover": $DrawableColor
 "screen_background_color": $DrawableColor
 "screen_background_color_darker": $DrawableColor
 "element_border_color_normal": $DrawableColor
 "element_border_color_hover": $DrawableColor
 "element_background_color_normal": $DrawableColor
 "element_background_color_hover": $DrawableColor
 "slider_handle_color_normal": $DrawableColor
 "slider_handle_color_hover": $DrawableColor
 "area_background_color": $DrawableColor
 "edit_box_background_color": $DrawableColor
 "edit_box_border_color_normal": $DrawableColor
 "edit_box_border_color_focused": $DrawableColor
 "list_entry_color_selected_hovered": $DrawableColor
 "text_editor_sidebar_color": $DrawableColor
 "text_editor_line_number_text_color_normal": $DrawableColor
 "text_editor_line_number_text_color_selected": $DrawableColor
 "listing_dot_color_1": $DrawableColor
 "listing_dot_color_2": $DrawableColor
 "listing_dot_color_3": $DrawableColor
 "suggestions_background_color": $DrawableColor
 "suggestions_text_color_normal": $DrawableColor
 "suggestions_text_color_selected": $DrawableColor
 "ui_texture_color": $DrawableColor
 "generic_text_base_color": $DrawableColor
 "element_label_color_normal": $DrawableColor
 "element_label_color_inactive": $DrawableColor
 "edit_box_text_color_normal": $DrawableColor
 "edit_box_text_color_uneditable": $DrawableColor
 "edit_box_suggestion_text_color": $DrawableColor
 "description_area_text_color": $DrawableColor
 "text_editor_text_color": $DrawableColor
 "success_text_color": $DrawableColor
 "error_text_color": $DrawableColor
 "warning_text_color": $DrawableColor
 "text_editor_text_formatting_nested_text_color_1": $DrawableColor
 "text_editor_text_formatting_nested_text_color_2": $DrawableColor
 "text_editor_text_formatting_nested_text_color_3": $DrawableColor
 "text_editor_text_formatting_nested_text_color_4": $DrawableColor
 "text_editor_text_formatting_nested_text_color_5": $DrawableColor
 "text_editor_text_formatting_nested_text_color_6": $DrawableColor
 "text_editor_text_formatting_nested_text_color_7": $DrawableColor
 "text_editor_text_formatting_nested_text_color_8": $DrawableColor
 "text_editor_text_formatting_nested_text_color_9": $DrawableColor
 "text_editor_text_formatting_nested_text_color_10": $DrawableColor
 "text_editor_text_formatting_nested_text_color_11": $DrawableColor
 "text_editor_text_formatting_nested_text_color_12": $DrawableColor
 "text_editor_text_formatting_brackets_color": $DrawableColor

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightUIColorTheme$Type = ($LightUIColorTheme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightUIColorTheme_ = $LightUIColorTheme$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$OpenScreenEvent" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $OpenScreenEvent extends $EventBase {

constructor(arg0: $Screen$Type)

public "isCancelable"(): boolean
public "getScreen"(): $Screen
get "cancelable"(): boolean
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenScreenEvent$Type = ($OpenScreenEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenScreenEvent_ = $OpenScreenEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$SerializationUtils" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$IVideo, $IVideo$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/video/$IVideo"
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$ResourceFile, $ResourceFile$Type} from "packages/de/keksuccino/fancymenu/util/file/$ResourceFile"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $SerializationUtils {

constructor()

public static "deserializeBoolean"(arg0: boolean, arg1: string): boolean
public static "deserializeNumber"<T extends number>(arg0: $Class$Type<(T)>, arg1: T, arg2: string): T
public static "deserializeAssetResourceFile"(arg0: string): $ResourceFile
public static "deserializeTextResourceSupplier"(arg0: string): $ResourceSupplier<($IText)>
public static "deserializeImageResourceSupplier"(arg0: string): $ResourceSupplier<($ITexture)>
public static "deserializeAudioResourceSupplier"(arg0: string): $ResourceSupplier<($IAudio)>
public static "deserializeVideoResourceSupplier"(arg0: string): $ResourceSupplier<($IVideo)>
public static "deserializeResourceFile"(arg0: string): $ResourceFile
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SerializationUtils$Type = ($SerializationUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SerializationUtils_ = $SerializationUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidgetBuilder" {
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$File, $File$Type} from "packages/java/io/$File"
import {$AbstractLayoutEditorWidget, $AbstractLayoutEditorWidget$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidget"
import {$AbstractLayoutEditorWidgetBuilder$WidgetSettings, $AbstractLayoutEditorWidgetBuilder$WidgetSettings$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidgetBuilder$WidgetSettings"

export class $AbstractLayoutEditorWidgetBuilder<T extends $AbstractLayoutEditorWidget> {
static readonly "WIDGET_SETTINGS_DIR": $File

constructor(arg0: string)

public "getIdentifier"(): string
public "writeSettingsInternal"(arg0: $AbstractLayoutEditorWidget$Type): void
public "getSettingsFile"(): $File
public "buildWithSettingsInternal"(arg0: $LayoutEditorScreen$Type): $AbstractLayoutEditorWidget
public "readSettingsInternal"(): $AbstractLayoutEditorWidgetBuilder$WidgetSettings
public "writeSettings"(arg0: $AbstractLayoutEditorWidgetBuilder$WidgetSettings$Type, arg1: T): void
public "applySettings"(arg0: $LayoutEditorScreen$Type, arg1: $AbstractLayoutEditorWidgetBuilder$WidgetSettings$Type, arg2: T): void
public "buildDefaultInstance"(arg0: $LayoutEditorScreen$Type): T
get "identifier"(): string
get "settingsFile"(): $File
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractLayoutEditorWidgetBuilder$Type<T> = ($AbstractLayoutEditorWidgetBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractLayoutEditorWidgetBuilder_<T> = $AbstractLayoutEditorWidgetBuilder$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/rendering/$CurrentScreenHandler" {
import {$ScreenEvent$Init$Post, $ScreenEvent$Init$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Init$Post"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ScreenEvent$Render$Pre, $ScreenEvent$Render$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Render$Pre"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $CurrentScreenHandler {

constructor()

public static "init"(): void
public "onInitPost"(arg0: $ScreenEvent$Init$Post$Type): void
public static "getLastScreen"(): $Screen
public "onDrawScreen"(arg0: $ScreenEvent$Render$Pre$Type): void
public static "setWidth"(arg0: integer): void
public static "getGraphics"(): $GuiGraphics
public static "getWidth"(): integer
public static "getHeight"(): integer
public static "getPoseStack"(): $PoseStack
public static "getScreen"(): $Screen
public static "setHeight"(arg0: integer): void
get "lastScreen"(): $Screen
set "width"(value: integer)
get "graphics"(): $GuiGraphics
get "width"(): integer
get "height"(): integer
get "poseStack"(): $PoseStack
get "screen"(): $Screen
set "height"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurrentScreenHandler$Type = ($CurrentScreenHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurrentScreenHandler_ = $CurrentScreenHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/$Resource" {
import {$Closeable, $Closeable$Type} from "packages/java/io/$Closeable"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"

export interface $Resource extends $Closeable {

 "open"(): $InputStream
 "isReady"(): boolean
 "isClosed"(): boolean
 "waitForLoadingCompletedOrFailed"(arg0: long): void
 "waitForReady"(arg0: long): void
 "isLoadingFailed"(): boolean
 "isLoadingCompleted"(): boolean
 "close"(): void
}

export namespace $Resource {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Resource$Type = ($Resource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Resource_ = $Resource$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/image/$ImageMenuBackgroundBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ImageMenuBackground, $ImageMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/backgrounds/image/$ImageMenuBackground"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$SerializedMenuBackground, $SerializedMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$SerializedMenuBackground"
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"

export class $ImageMenuBackgroundBuilder extends $MenuBackgroundBuilder<($ImageMenuBackground)> {

constructor()

public "getDisplayName"(): $Component
public "getDescription"(): ($Component)[]
public "serializedBackground"(arg0: $ImageMenuBackground$Type): $SerializedMenuBackground
public "buildNewOrEditInstance"(arg0: $Screen$Type, arg1: $ImageMenuBackground$Type, arg2: $Consumer$Type<($ImageMenuBackground$Type)>): void
get "displayName"(): $Component
get "description"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageMenuBackgroundBuilder$Type = ($ImageMenuBackgroundBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageMenuBackgroundBuilder_ = $ImageMenuBackgroundBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/actions/$BuildActionScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ActionInstance, $ActionInstance$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ActionInstance"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $BuildActionScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ActionInstance$Type, arg1: $Consumer$Type<($ActionInstance$Type)>)

public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuildActionScreen$Type = ($BuildActionScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuildActionScreen_ = $BuildActionScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/$FancyMenuForgeServerEvents" {
import {$RegisterCommandsEvent, $RegisterCommandsEvent$Type} from "packages/net/minecraftforge/event/$RegisterCommandsEvent"

export class $FancyMenuForgeServerEvents {

constructor()

public static "registerAll"(): void
public "onRegisterServerCommands"(arg0: $RegisterCommandsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FancyMenuForgeServerEvents$Type = ($FancyMenuForgeServerEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FancyMenuForgeServerEvents_ = $FancyMenuForgeServerEvents$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/$Layout" {
import {$Layout$OrderedElementCollection, $Layout$OrderedElementCollection$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout$OrderedElementCollection"
import {$PropertyContainerSet, $PropertyContainerSet$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainerSet"
import {$LayoutBase, $LayoutBase$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$LayoutBase"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"
import {$VanillaWidgetElement, $VanillaWidgetElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/vanillawidget/$VanillaWidgetElement"
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$File, $File$Type} from "packages/java/io/$File"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$MenuBackground, $MenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackground"
import {$Layout$LayoutStatus, $Layout$LayoutStatus$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout$LayoutStatus"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $Layout extends $LayoutBase {
static readonly "UNIVERSAL_LAYOUT_IDENTIFIER": string
 "screenIdentifier": string
 "layoutFile": $File
 "lastEditedTime": long
 "layoutIndex": integer
 "renderElementsBehindVanilla": boolean
 "randomMode": boolean
 "randomGroup": string
 "randomOnlyFirstTime": boolean
 "universalLayoutMenuWhitelist": $List<(string)>
 "universalLayoutMenuBlacklist": $List<(string)>
 "layoutWideLoadingRequirementContainer": $LoadingRequirementContainer
 "serializedElements": $List<($SerializedElement)>
 "serializedVanillaButtonElements": $List<($SerializedElement)>
 "serializedDeepElements": $List<($SerializedElement)>
 "deepScreenCustomizationLayer": $DeepScreenCustomizationLayer
 "legacyLayout": boolean
 "menuBackground": $MenuBackground
 "preserveBackgroundAspectRatio": boolean
 "openAudio": $ResourceSupplier<($IAudio)>
 "closeAudio": $ResourceSupplier<($IAudio)>
 "forcedScale": float
 "autoScalingWidth": integer
 "autoScalingHeight": integer
 "customMenuTitle": string
 "preserveScrollListHeaderFooterAspectRatio": boolean
 "repeatScrollListHeaderTexture": boolean
 "repeatScrollListFooterTexture": boolean
 "scrollListHeaderTexture": $ResourceSupplier<($ITexture)>
 "scrollListFooterTexture": $ResourceSupplier<($ITexture)>
 "renderScrollListHeaderShadow": boolean
 "renderScrollListFooterShadow": boolean
 "showScrollListHeaderFooterPreviewInEditor": boolean

constructor(arg0: $Screen$Type)
constructor()
constructor(arg0: string)

public "delete"(arg0: boolean): void
public "copy"(): $Layout
public "isEnabled"(): boolean
public static "deserialize"(arg0: $PropertyContainerSet$Type, arg1: $File$Type): $Layout
public "saveToFileIfPossible"(): boolean
public "updateLastEditedTime"(): $Layout
public "setEnabled"(arg0: boolean, arg1: boolean): $Layout
public "isUniversalLayout"(): boolean
public "getLayoutName"(): string
public static "buildUniversal"(): $Layout
public static "buildForScreen"(arg0: $Screen$Type): $Layout
public static "buildForScreen"(arg0: string): $Layout
public "serialize"(): $PropertyContainerSet
public "getStatus"(): $Layout$LayoutStatus
public "layoutWideLoadingRequirementsMet"(): boolean
public "setScreenIdentifier"(arg0: string): $Layout
public "setToUniversalLayout"(): $Layout
public "buildElementInstances"(): $Layout$OrderedElementCollection
public "buildDeepElementInstances"(): $List<($AbstractDeepElement)>
public "buildVanillaButtonElementInstances"(): $List<($VanillaWidgetElement)>
get "enabled"(): boolean
get "universalLayout"(): boolean
get "layoutName"(): string
get "status"(): $Layout$LayoutStatus
set "screenIdentifier"(value: string)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Layout$Type = ($Layout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Layout_ = $Layout$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/shape/$ShapeElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$ShapeElement$Shape, $ShapeElement$Shape$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/shape/$ShapeElement$Shape"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $ShapeElement extends $AbstractElement {
 "shape": $ShapeElement$Shape
 "color": $DrawableColor
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeElement$Type = ($ShapeElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeElement_ = $ShapeElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/gamemode/$IsSurvivalRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsSurvivalRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsSurvivalRequirement$Type = ($IsSurvivalRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsSurvivalRequirement_ = $IsSurvivalRequirement$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/operator/$Operators" {
import {$Operator, $Operator$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/operator/$Operator"

export class $Operators {

constructor()

public static "getBuiltinOperator"(arg0: character, arg1: integer): $Operator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Operators$Type = ($Operators);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Operators_ = $Operators$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip$TooltipTextAlignment" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Tooltip$TooltipTextAlignment extends $Enum<($Tooltip$TooltipTextAlignment)> {
static readonly "LEFT": $Tooltip$TooltipTextAlignment
static readonly "RIGHT": $Tooltip$TooltipTextAlignment
static readonly "CENTERED": $Tooltip$TooltipTextAlignment


public static "values"(): ($Tooltip$TooltipTextAlignment)[]
public static "valueOf"(arg0: string): $Tooltip$TooltipTextAlignment
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Tooltip$TooltipTextAlignment$Type = (("left") | ("centered") | ("right")) | ($Tooltip$TooltipTextAlignment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Tooltip$TooltipTextAlignment_ = $Tooltip$TooltipTextAlignment$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/animation/exceptions/$AnimationNotFoundException" {
import {$Exception, $Exception$Type} from "packages/java/lang/$Exception"

export class $AnimationNotFoundException extends $Exception {

constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationNotFoundException$Type = ($AnimationNotFoundException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationNotFoundException_ = $AnimationNotFoundException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/commands/$CloseGuiScreenCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CloseGuiScreenCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloseGuiScreenCommand$Type = ($CloseGuiScreenCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloseGuiScreenCommand_ = $CloseGuiScreenCommand$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/screen/dummyscreen/$DummyScreens" {
import {$DummyScreenBuilder, $DummyScreenBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/screen/dummyscreen/$DummyScreenBuilder"

export class $DummyScreens {
static readonly "LEVEL_LOADING_SCREEN_DUMMY": $DummyScreenBuilder
static readonly "GENERIC_DIRT_MESSAGE_SCREEN_DUMMY": $DummyScreenBuilder
static readonly "PROGRESS_SCREEN_DUMMY": $DummyScreenBuilder
static readonly "CONNECT_SCREEN_DUMMY": $DummyScreenBuilder
static readonly "RECEIVING_LEVEL_SCREEN_DUMMY": $DummyScreenBuilder

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummyScreens$Type = ($DummyScreens);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummyScreens_ = $DummyScreens$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/button/$CycleButton" {
import {$ILocalizedValueCycle, $ILocalizedValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$ILocalizedValueCycle"
import {$CycleButton$CycleButtonClickFeedback, $CycleButton$CycleButtonClickFeedback$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/button/$CycleButton$CycleButtonClickFeedback"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ExtendedButton, $ExtendedButton$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/button/$ExtendedButton"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $CycleButton<T> extends $ExtendedButton {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $ILocalizedValueCycle$Type<(T)>, arg5: $CycleButton$CycleButtonClickFeedback$Type<(T)>)

public "setSelectedValue"(arg0: T): $CycleButton<(T)>
public "getSelectedValue"(): T
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "click"(): void
set "selectedValue"(value: T)
get "selectedValue"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CycleButton$Type<T> = ($CycleButton<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CycleButton_<T> = $CycleButton$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/$FancyMenu" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$Options, $Options$Type} from "packages/de/keksuccino/fancymenu/$Options"

export class $FancyMenu {
static readonly "VERSION": string
static readonly "MOD_LOADER": string
static readonly "MOD_ID": string
static readonly "MOD_DIR": $File
static readonly "INSTANCE_DATA_DIR": $File
static readonly "TEMP_DATA_DIR": $File
static readonly "CACHE_DIR": $File

constructor()

public static "init"(): void
public static "reloadOptions"(): void
public static "getOptions"(): $Options
public static "getMinecraftVersion"(): string
public static "lateClientInit"(): void
get "options"(): $Options
get "minecraftVersion"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FancyMenu$Type = ($FancyMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FancyMenu_ = $FancyMenu$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer" {
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PropertyContainer {

constructor(arg0: string)

public "toString"(): string
public "getValue"(arg0: string): string
public "getProperties"(): $Map<(string), (string)>
public "getType"(): string
public "setType"(arg0: string): void
public "putProperty"(arg0: string, arg1: string): void
public "hasProperty"(arg0: string): boolean
public "removeProperty"(arg0: string): void
get "properties"(): $Map<(string), (string)>
get "type"(): string
set "type"(value: string)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PropertyContainer$Type = ($PropertyContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PropertyContainer_ = $PropertyContainer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/$ScreenWidgetDiscoverer" {
import {$WidgetMeta, $WidgetMeta$Type} from "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $ScreenWidgetDiscoverer {

constructor()

public static "getWidgetsOfScreen"(arg0: $Screen$Type, arg1: boolean): $List<($WidgetMeta)>
public static "getWidgetsOfScreen"(arg0: $Screen$Type): $List<($WidgetMeta)>
public static "getWidgetsOfScreen"(arg0: $Screen$Type, arg1: integer, arg2: integer): $List<($WidgetMeta)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenWidgetDiscoverer$Type = ($ScreenWidgetDiscoverer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenWidgetDiscoverer_ = $ScreenWidgetDiscoverer$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/$ExpressionBuilder" {
import {$Function, $Function$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/function/$Function"
import {$Expression, $Expression$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/$Expression"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Operator, $Operator$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/operator/$Operator"

export class $ExpressionBuilder {

constructor(arg0: string)

public "function"(arg0: $Function$Type): $ExpressionBuilder
public "operator"(...arg0: ($Operator$Type)[]): $ExpressionBuilder
public "operator"(arg0: $Operator$Type): $ExpressionBuilder
public "operator"(arg0: $List$Type<($Operator$Type)>): $ExpressionBuilder
public "build"(): $Expression
public "functions"(arg0: $List$Type<($Function$Type)>): $ExpressionBuilder
public "functions"(...arg0: ($Function$Type)[]): $ExpressionBuilder
public "variable"(arg0: string): $ExpressionBuilder
public "variables"(...arg0: (string)[]): $ExpressionBuilder
public "variables"(arg0: $Set$Type<(string)>): $ExpressionBuilder
public "implicitMultiplication"(arg0: boolean): $ExpressionBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpressionBuilder$Type = ($ExpressionBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpressionBuilder_ = $ExpressionBuilder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$CompessorMapper" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $CompessorMapper extends $JsonReaderI<($CompessorMapper)> {
readonly "base": $JsonReader

constructor(arg0: $JsonReader$Type, arg1: $Appendable$Type, arg2: $JSONStyle$Type, arg3: boolean)
constructor(arg0: $JsonReader$Type, arg1: $Appendable$Type, arg2: $JSONStyle$Type)

public "convert"(arg0: any): $CompessorMapper
public "setValue"(arg0: any, arg1: string, arg2: any): void
public "createObject"(): any
public "addValue"(arg0: any, arg1: any): void
public "createArray"(): any
public "startObject"(arg0: string): $JsonReaderI<(any)>
public "startArray"(arg0: string): $JsonReaderI<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompessorMapper$Type = ($CompessorMapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompessorMapper_ = $CompessorMapper$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/screen/$UpdateScreenAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $UpdateScreenAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdateScreenAction$Type = ($UpdateScreenAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdateScreenAction_ = $UpdateScreenAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextElement" {
import {$AbstractElement$Alignment, $AbstractElement$Alignment$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$Alignment"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$TextElement$CaseMode, $TextElement$CaseMode$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextElement$CaseMode"
import {$TextElement$SourceMode, $TextElement$SourceMode$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextElement$SourceMode"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/$ScrollArea"
import {$LinkedListMultimap, $LinkedListMultimap$Type} from "packages/com/google/common/collect/$LinkedListMultimap"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

/**
 * 
 * @deprecated
 */
export class $TextElement extends $AbstractElement {
 "sourceMode": $TextElement$SourceMode
 "source": string
 "shadow": boolean
 "caseMode": $TextElement$CaseMode
 "scale": float
 "alignment": $AbstractElement$Alignment
 "baseColorHex": string
 "textBorder": integer
 "lineSpacing": integer
 "scrollGrabberTextureNormal": string
 "scrollGrabberTextureHover": string
 "scrollGrabberColorHexNormal": string
 "scrollGrabberColorHexHover": string
 "enableScrolling": boolean
 "scrollArea": $ScrollArea
 "lines": $LinkedListMultimap<(string), (float)>
 "updating": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "updateContent"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "updateScrollArea"(): void
public "getBaseColor"(): $Color
get "baseColor"(): $Color
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextElement$Type = ($TextElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextElement_ = $TextElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/text/v2/$TextElement" {
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$MarkdownRenderer, $MarkdownRenderer$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$TextElement$SourceMode, $TextElement$SourceMode$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/text/v2/$TextElement$SourceMode"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $TextElement extends $AbstractElement {
 "textResourceSupplier": $ResourceSupplier<($IText)>
 "verticalScrollGrabberTextureNormal": $ResourceSupplier<($ITexture)>
 "verticalScrollGrabberTextureHover": $ResourceSupplier<($ITexture)>
 "horizontalScrollGrabberTextureNormal": $ResourceSupplier<($ITexture)>
 "horizontalScrollGrabberTextureHover": $ResourceSupplier<($ITexture)>
 "scrollGrabberColorHexNormal": string
 "scrollGrabberColorHexHover": string
 "enableScrolling": boolean
 "interactable": boolean
 "markdownRenderer": $MarkdownRenderer
 "scrollArea": $ScrollArea
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "setSource"(arg0: $TextElement$SourceMode$Type, arg1: string): void
public "updateContent"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getWidgetsToRegister"(): $List<($GuiEventListener)>
get "widgetsToRegister"(): $List<($GuiEventListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextElement$Type = ($TextElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextElement_ = $TextElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$WebTextPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"

export class $WebTextPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public static "onReload"(arg0: $ModReloadEvent$Type): void
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WebTextPlaceholder$Type = ($WebTextPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WebTextPlaceholder_ = $WebTextPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$DefaultConverter" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $DefaultConverter {

constructor()

public static "convertTobool"(arg0: any): boolean
public static "convertToBool"(arg0: any): boolean
public static "convertToInt"(arg0: any): integer
public static "convertToint"(arg0: any): integer
public static "convertToshort"(arg0: any): short
public static "convertToByte"(arg0: any): byte
public static "convertToFloat"(arg0: any): float
public static "convertToLong"(arg0: any): long
public static "convertTobyte"(arg0: any): byte
public static "convertTofloat"(arg0: any): float
public static "convertToShort"(arg0: any): short
public static "convertTolong"(arg0: any): long
public static "convertTodouble"(arg0: any): double
public static "convertTochar"(arg0: any): character
public static "convertToChar"(arg0: any): character
public static "convertToDouble"(arg0: any): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultConverter$Type = ($DefaultConverter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultConverter_ = $DefaultConverter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/musiccontroller/$MusicControllerElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$MusicControllerElement, $MusicControllerElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/musiccontroller/$MusicControllerElement"
import {$MusicControllerEditorElement, $MusicControllerEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/musiccontroller/$MusicControllerEditorElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $MusicControllerElementBuilder extends $ElementBuilder<($MusicControllerElement), ($MusicControllerEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $MusicControllerElement$Type, arg1: $LayoutEditorScreen$Type): $MusicControllerEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MusicControllerElementBuilder$Type = ($MusicControllerElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MusicControllerElementBuilder_ = $MusicControllerElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/animation/$ResourcePackAnimationRenderer" {
import {$IAnimationRenderer, $IAnimationRenderer$Type} from "packages/de/keksuccino/konkrete/rendering/animation/$IAnimationRenderer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ResourcePackAnimationRenderer implements $IAnimationRenderer {
 "resources": $List<($ResourceLocation)>
 "prevTime": long

constructor(arg0: string, arg1: $List$Type<(string)>, arg2: integer, arg3: boolean, arg4: integer, arg5: integer, arg6: integer, arg7: integer)

public "getPath"(): string
public "currentFrame"(): integer
public "setWidth"(arg0: integer): void
public "resetAnimation"(): void
public "isReady"(): boolean
public "setLooped"(arg0: boolean): void
public "isGettingLooped"(): boolean
public "setOpacity"(arg0: float): void
public "setPosX"(arg0: integer): void
public "setPosY"(arg0: integer): void
public "prepareAnimation"(): void
public "render"(arg0: $GuiGraphics$Type): void
public "setStretchImageToScreensize"(arg0: boolean): void
public "isStretchedToStreensize"(): boolean
public "getPosY"(): integer
public "getPosX"(): integer
public "getWidth"(): integer
public "getHeight"(): integer
public "setupAnimationSize"(): boolean
public "getFPS"(): integer
public "animationFrames"(): integer
public "setFPS"(arg0: integer): void
public "setHideAfterLastFrame"(arg0: boolean): void
public "setHeight"(arg0: integer): void
public "getAnimationFrames"(): $List<($ResourceLocation)>
public "isFinished"(): boolean
public "updateFrame"(arg0: long): void
get "path"(): string
set "width"(value: integer)
get "ready"(): boolean
set "looped"(value: boolean)
get "gettingLooped"(): boolean
set "opacity"(value: float)
set "posX"(value: integer)
set "posY"(value: integer)
set "stretchImageToScreensize"(value: boolean)
get "stretchedToStreensize"(): boolean
get "posY"(): integer
get "posX"(): integer
get "width"(): integer
get "height"(): integer
get "fPS"(): integer
set "fPS"(value: integer)
set "hideAfterLastFrame"(value: boolean)
set "height"(value: integer)
get "finished"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourcePackAnimationRenderer$Type = ($ResourcePackAnimationRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourcePackAnimationRenderer_ = $ResourcePackAnimationRenderer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$NotificationScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $NotificationScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public static "error"(arg0: $Consumer$Type<(boolean)>, ...arg1: ($Component$Type)[]): $NotificationScreen
public static "error"(arg0: $Consumer$Type<(boolean)>, ...arg1: (string)[]): $NotificationScreen
public static "warning"(arg0: $Consumer$Type<(boolean)>, ...arg1: ($Component$Type)[]): $NotificationScreen
public static "warning"(arg0: $Consumer$Type<(boolean)>, ...arg1: (string)[]): $NotificationScreen
public "setHeadlineBold"(arg0: boolean): $NotificationScreen
public "isHeadlineBold"(): boolean
public static "ofComponents"(arg0: $Consumer$Type<(boolean)>, arg1: $List$Type<($Component$Type)>): $NotificationScreen
public static "ofComponents"(arg0: $Consumer$Type<(boolean)>, ...arg1: ($Component$Type)[]): $NotificationScreen
public "setHeadlineColor"(arg0: $DrawableColor$Type): $NotificationScreen
public "getHeadlineColor"(): $DrawableColor
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public static "ofStrings"(arg0: $Consumer$Type<(boolean)>, ...arg1: (string)[]): $NotificationScreen
public static "ofStrings"(arg0: $Consumer$Type<(boolean)>, arg1: $List$Type<(string)>): $NotificationScreen
public static "notificationWithHeadline"(arg0: $Consumer$Type<(boolean)>, ...arg1: ($Component$Type)[]): $NotificationScreen
public static "notificationWithHeadline"(arg0: $Consumer$Type<(boolean)>, ...arg1: (string)[]): $NotificationScreen
set "headlineBold"(value: boolean)
get "headlineBold"(): boolean
set "headlineColor"(value: $DrawableColor$Type)
get "headlineColor"(): $DrawableColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationScreen$Type = ($NotificationScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationScreen_ = $NotificationScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/shape/$ShapeElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ShapeEditorElement, $ShapeEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/shape/$ShapeEditorElement"
import {$ShapeElement, $ShapeElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/shape/$ShapeElement"

export class $ShapeElementBuilder extends $ElementBuilder<($ShapeElement), ($ShapeEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $ShapeElement$Type, arg1: $LayoutEditorScreen$Type): $ShapeEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeElementBuilder$Type = ($ShapeElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeElementBuilder_ = $ShapeElementBuilder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$ClassNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $ValueNodes$ClassNode extends $ValueNode {


public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "getClazz"(): $Class<(any)>
public "isClassNode"(): boolean
public "asClassNode"(): $ValueNodes$ClassNode
get "clazz"(): $Class<(any)>
get "classNode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$ClassNode$Type = ($ValueNodes$ClassNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$ClassNode_ = $ValueNodes$ClassNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/panorama/$PanoramaMenuBackgroundBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$SerializedMenuBackground, $SerializedMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$SerializedMenuBackground"
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"
import {$PanoramaMenuBackground, $PanoramaMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/backgrounds/panorama/$PanoramaMenuBackground"

export class $PanoramaMenuBackgroundBuilder extends $MenuBackgroundBuilder<($PanoramaMenuBackground)> {

constructor()

public "getDisplayName"(): $Component
public "getDescription"(): ($Component)[]
public "serializedBackground"(arg0: $PanoramaMenuBackground$Type): $SerializedMenuBackground
public "buildNewOrEditInstance"(arg0: $Screen$Type, arg1: $PanoramaMenuBackground$Type, arg2: $Consumer$Type<($PanoramaMenuBackground$Type)>): void
get "displayName"(): $Component
get "description"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PanoramaMenuBackgroundBuilder$Type = ($PanoramaMenuBackgroundBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PanoramaMenuBackgroundBuilder_ = $PanoramaMenuBackgroundBuilder$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/$MinecraftSoundSettingsObserver" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"

export class $MinecraftSoundSettingsObserver {

constructor()

public static "registerSoundEngineReloadListener"(arg0: $Runnable$Type): long
public static "registerVolumeListener"(arg0: $BiConsumer$Type<($SoundSource$Type), (float)>): long
public static "unregisterVolumeListener"(arg0: long): void
public static "getVolumeListeners"(): $List<($BiConsumer<($SoundSource), (float)>)>
public static "getSoundEngineReloadListeners"(): $List<($Runnable)>
public static "unregisterSoundEngineReloadListener"(arg0: long): void
get "volumeListeners"(): $List<($BiConsumer<($SoundSource), (float)>)>
get "soundEngineReloadListeners"(): $List<($Runnable)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinecraftSoundSettingsObserver$Type = ($MinecraftSoundSettingsObserver);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinecraftSoundSettingsObserver_ = $MinecraftSoundSettingsObserver$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/actions/$ManageActionsScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$GenericExecutableBlock, $GenericExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$GenericExecutableBlock"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ManageActionsScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $GenericExecutableBlock$Type, arg1: $Consumer$Type<($GenericExecutableBlock$Type)>)

public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManageActionsScreen$Type = ($ManageActionsScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManageActionsScreen_ = $ManageActionsScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/cache/$LRUCache" {
import {$Cache, $Cache$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/cache/$Cache"
import {$JsonPath, $JsonPath$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPath"

export class $LRUCache implements $Cache {

constructor(arg0: integer)

public "remove"(arg0: string): void
public "get"(arg0: string): $JsonPath
public "put"(arg0: string, arg1: $JsonPath$Type): void
public "toString"(): string
public "size"(): integer
public "getSilent"(arg0: string): $JsonPath
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LRUCache$Type = ($LRUCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LRUCache_ = $LRUCache$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v1/$ListSliderButton" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ExtendedSliderButton, $ExtendedSliderButton$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v1/$ExtendedSliderButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ListSliderButton extends $ExtendedSliderButton {
 "values": $List<(string)>
 "handleClick": boolean
 "enableRightClick": boolean
 "ignoreBlockedInput": boolean
 "ignoreGlobalLeftMouseDown": boolean
static readonly "SLIDER_LOCATION": $ResourceLocation
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: boolean, arg5: $List$Type<(string)>, arg6: double, arg7: $Consumer$Type<($ExtendedSliderButton$Type)>)

public "getSelectedIndex"(): integer
public "getSelectedListValue"(): string
public "setSelectedIndex"(arg0: double): void
public "getSliderMessageWithoutPrefixSuffix"(): string
get "selectedIndex"(): integer
get "selectedListValue"(): string
set "selectedIndex"(value: double)
get "sliderMessageWithoutPrefixSuffix"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListSliderButton$Type = ($ListSliderButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListSliderButton_ = $ListSliderButton$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoints" {
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ElementAnchorPoints {
static readonly "ELEMENT": $ElementAnchorPoint
static readonly "VANILLA": $ElementAnchorPoint
static readonly "TOP_LEFT": $ElementAnchorPoint
static readonly "MID_LEFT": $ElementAnchorPoint
static readonly "BOTTOM_LEFT": $ElementAnchorPoint
static readonly "TOP_CENTERED": $ElementAnchorPoint
static readonly "MID_CENTERED": $ElementAnchorPoint
static readonly "BOTTOM_CENTERED": $ElementAnchorPoint
static readonly "TOP_RIGHT": $ElementAnchorPoint
static readonly "MID_RIGHT": $ElementAnchorPoint
static readonly "BOTTOM_RIGHT": $ElementAnchorPoint

constructor()

public static "registerAnchorPoint"(arg0: $ElementAnchorPoint$Type): $ElementAnchorPoint
public static "getAnchorPoints"(): $List<($ElementAnchorPoint)>
public static "getAnchorPointByName"(arg0: string): $ElementAnchorPoint
get "anchorPoints"(): $List<($ElementAnchorPoint)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementAnchorPoints$Type = ($ElementAnchorPoints);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementAnchorPoints_ = $ElementAnchorPoints$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$SerializedMenuBackground, $SerializedMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$SerializedMenuBackground"
import {$MenuBackground, $MenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackground"

export class $MenuBackgroundBuilder<T extends $MenuBackground> {

constructor(arg0: string)

public "getDisplayName"(): $Component
public "isDeprecated"(): boolean
public "getDescription"(): ($Component)[]
public "getIdentifier"(): string
public "deserializeBackground"(arg0: $SerializedMenuBackground$Type): T
public "shouldShowUpInEditorBackgroundMenu"(arg0: $LayoutEditorScreen$Type): boolean
public "serializedBackground"(arg0: T): $SerializedMenuBackground
public "buildNewOrEditInstance"(arg0: $Screen$Type, arg1: T, arg2: $Consumer$Type<(T)>): void
public "buildNewOrEditInstanceInternal"(arg0: $Screen$Type, arg1: $MenuBackground$Type, arg2: $Consumer$Type<($MenuBackground$Type)>): void
public "deserializeBackgroundInternal"(arg0: $SerializedMenuBackground$Type): T
public "serializedBackgroundInternal"(arg0: $MenuBackground$Type): $SerializedMenuBackground
get "displayName"(): $Component
get "deprecated"(): boolean
get "description"(): ($Component)[]
get "identifier"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBackgroundBuilder$Type<T> = ($MenuBackgroundBuilder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBackgroundBuilder_<T> = $MenuBackgroundBuilder$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/screen/$OpenScreenAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $OpenScreenAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenScreenAction$Type = ($OpenScreenAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenScreenAction_ = $OpenScreenAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent" {
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $ClientTickEvent extends $EventBase {


public "isCancelable"(): boolean
get "cancelable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTickEvent$Type = ($ClientTickEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTickEvent_ = $ClientTickEvent$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration$ConfigurationBuilder" {
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$EvaluationListener, $EvaluationListener$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener"
import {$MappingProvider, $MappingProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/mapper/$MappingProvider"
import {$Option, $Option$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Option"
import {$JsonProvider, $JsonProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$JsonProvider"

export class $Configuration$ConfigurationBuilder {

constructor()

public "options"(arg0: $Set$Type<($Option$Type)>): $Configuration$ConfigurationBuilder
public "options"(...arg0: ($Option$Type)[]): $Configuration$ConfigurationBuilder
public "build"(): $Configuration
public "jsonProvider"(arg0: $JsonProvider$Type): $Configuration$ConfigurationBuilder
public "evaluationListener"(arg0: $Collection$Type<($EvaluationListener$Type)>): $Configuration$ConfigurationBuilder
public "evaluationListener"(...arg0: ($EvaluationListener$Type)[]): $Configuration$ConfigurationBuilder
public "mappingProvider"(arg0: $MappingProvider$Type): $Configuration$ConfigurationBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Configuration$ConfigurationBuilder$Type = ($Configuration$ConfigurationBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Configuration$ConfigurationBuilder_ = $Configuration$ConfigurationBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/$FancyMenuForgeClientEvents" {
import {$ScreenEvent$KeyPressed$Post, $ScreenEvent$KeyPressed$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$KeyPressed$Post"

export class $FancyMenuForgeClientEvents {

constructor()

public static "registerAll"(): void
public "afterScreenKeyPress"(arg0: $ScreenEvent$KeyPressed$Post$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FancyMenuForgeClientEvents$Type = ($FancyMenuForgeClientEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FancyMenuForgeClientEvents_ = $FancyMenuForgeClientEvents$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextElement$CaseMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $TextElement$CaseMode extends $Enum<($TextElement$CaseMode)> {
static readonly "NORMAL": $TextElement$CaseMode
static readonly "ALL_LOWER": $TextElement$CaseMode
static readonly "ALL_UPPER": $TextElement$CaseMode


public "getName"(): string
public static "values"(): ($TextElement$CaseMode)[]
public static "valueOf"(arg0: string): $TextElement$CaseMode
public static "getByName"(arg0: string): $TextElement$CaseMode
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextElement$CaseMode$Type = (("normal") | ("all_lower") | ("all_upper")) | ($TextElement$CaseMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextElement$CaseMode_ = $TextElement$CaseMode$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$RelationalExpressionNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$RelationalOperator, $RelationalOperator$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$RelationalOperator"
import {$ExpressionNode, $ExpressionNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ExpressionNode"

export class $RelationalExpressionNode extends $ExpressionNode {

constructor(arg0: $ValueNode$Type, arg1: $RelationalOperator$Type, arg2: $ValueNode$Type)

public "toString"(): string
public "apply"(arg0: $Predicate$PredicateContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RelationalExpressionNode$Type = ($RelationalExpressionNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RelationalExpressionNode_ = $RelationalExpressionNode$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserByteArray" {
import {$JSONParserMemory, $JSONParserMemory$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserMemory"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"

export class $JSONParserByteArray extends $JSONParserMemory {
static readonly "EOI": byte

constructor(arg0: integer)

public "parse"(arg0: (byte)[]): any
public "parse"<T>(arg0: (byte)[], arg1: $JsonReaderI$Type<(T)>): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONParserByteArray$Type = ($JSONParserByteArray);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONParserByteArray_ = $JSONParserByteArray$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/$WidgetIdentificationContextRegistry" {
import {$WidgetIdentificationContext, $WidgetIdentificationContext$Type} from "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/$WidgetIdentificationContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $WidgetIdentificationContextRegistry {

constructor()

public static "register"(arg0: $WidgetIdentificationContext$Type): void
public static "getContexts"(): $List<($WidgetIdentificationContext)>
public static "getContextForScreen"(arg0: $Class$Type<(any)>): $WidgetIdentificationContext
get "contexts"(): $List<($WidgetIdentificationContext)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetIdentificationContextRegistry$Type = ($WidgetIdentificationContextRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetIdentificationContextRegistry_ = $WidgetIdentificationContextRegistry$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/function/$Functions" {
import {$Function, $Function$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/function/$Function"

export class $Functions {

constructor()

public static "getBuiltinFunction"(arg0: string): $Function
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Functions$Type = ($Functions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Functions_ = $Functions$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollbar/$ScrollBar" {
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$ScrollBar$ScrollBarDirection, $ScrollBar$ScrollBarDirection$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollbar/$ScrollBar$ScrollBarDirection"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$UIBase, $UIBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/$UIBase"

export class $ScrollBar extends $UIBase implements $GuiEventListener, $Renderable, $NarratableEntry {
 "grabberWidth": float
 "grabberHeight": float
 "scrollAreaStartX": float
 "scrollAreaStartY": float
 "scrollAreaEndX": float
 "scrollAreaEndY": float
 "idleBarColor": $Supplier<($DrawableColor)>
 "hoverBarColor": $Supplier<($DrawableColor)>
 "idleBarTexture": $ResourceLocation
 "hoverBarTexture": $ResourceLocation
 "active": boolean
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: $ScrollBar$ScrollBarDirection$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: $Supplier$Type<($DrawableColor$Type)>, arg8: $Supplier$Type<($DrawableColor$Type)>)
constructor(arg0: $ScrollBar$ScrollBarDirection$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: $ResourceLocation$Type, arg8: $ResourceLocation$Type)

public "isMouseInsideScrollArea"(arg0: double, arg1: double, arg2: boolean): boolean
public "getGrabberScrollSpeed"(): float
public "registerScrollListener"(arg0: $Consumer$Type<($ScrollBar$Type)>): void
public "setGrabberScrollSpeed"(arg0: float): void
public "isScrollWheelAllowed"(): boolean
public "isGrabberGrabbed"(): boolean
public "isGrabberHovered"(): boolean
public "isMouseOverGrabber"(arg0: double, arg1: double): boolean
public "isMouseOver"(arg0: double, arg1: double): boolean
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "setFocused"(arg0: boolean): void
public "getScroll"(): float
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "isFocused"(): boolean
public "setScroll"(arg0: float, arg1: boolean): void
public "setScroll"(arg0: float): void
public "getDirection"(): $ScrollBar$ScrollBarDirection
public "setScrollWheelAllowed"(arg0: boolean): void
public "setWheelScrollSpeed"(arg0: float): void
public "getWheelScrollSpeed"(): float
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getRectangle"(): $ScreenRectangle
public "charTyped"(arg0: character, arg1: integer): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "isActive"(): boolean
public "getTabOrderGroup"(): integer
get "grabberScrollSpeed"(): float
set "grabberScrollSpeed"(value: float)
get "scrollWheelAllowed"(): boolean
get "grabberGrabbed"(): boolean
get "grabberHovered"(): boolean
set "focused"(value: boolean)
get "scroll"(): float
get "focused"(): boolean
set "scroll"(value: float)
get "direction"(): $ScrollBar$ScrollBarDirection
set "scrollWheelAllowed"(value: boolean)
set "wheelScrollSpeed"(value: float)
get "wheelScrollSpeed"(): float
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "active"(): boolean
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollBar$Type = ($ScrollBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollBar_ = $ScrollBar$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeYearRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsRealTimeYearRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsRealTimeYearRequirement$Type = ($IsRealTimeYearRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsRealTimeYearRequirement_ = $IsRealTimeYearRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/audio/ogg/$OggAudio" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$ALAudioClip, $ALAudioClip$Type} from "packages/de/keksuccino/melody/resources/audio/openal/$ALAudioClip"
import {$File, $File$Type} from "packages/java/io/$File"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"

export class $OggAudio implements $IAudio {


public static "of"(arg0: $InputStream$Type): $OggAudio
public static "of"(arg0: $InputStream$Type, arg1: string, arg2: $OggAudio$Type, arg3: $ALAudioClip$Type): $OggAudio
public "stop"(): void
public "close"(): void
public static "location"(arg0: $ResourceLocation$Type): $OggAudio
public static "location"(arg0: $ResourceLocation$Type, arg1: $OggAudio$Type): $OggAudio
public "open"(): $InputStream
public static "local"(arg0: $File$Type, arg1: $OggAudio$Type): $OggAudio
public static "local"(arg0: $File$Type): $OggAudio
public "isReady"(): boolean
public "isClosed"(): boolean
public "play"(): void
public "isPlaying"(): boolean
public "getClip"(): $ALAudioClip
public static "web"(arg0: string, arg1: $OggAudio$Type): $OggAudio
public static "web"(arg0: string): $OggAudio
public "isPaused"(): boolean
public "pause"(): void
public "isLoadingFailed"(): boolean
public "isLoadingCompleted"(): boolean
public "setSoundChannel"(arg0: $SoundSource$Type): void
public "getSoundChannel"(): $SoundSource
public "setVolume"(arg0: float): void
public "getVolume"(): float
public "isValidOpenAlSource"(): boolean
public "waitForLoadingCompletedOrFailed"(arg0: long): void
public "waitForReady"(arg0: long): void
get "ready"(): boolean
get "closed"(): boolean
get "playing"(): boolean
get "clip"(): $ALAudioClip
get "paused"(): boolean
get "loadingFailed"(): boolean
get "loadingCompleted"(): boolean
set "soundChannel"(value: $SoundSource$Type)
get "soundChannel"(): $SoundSource
set "volume"(value: float)
get "volume"(): float
get "validOpenAlSource"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OggAudio$Type = ($OggAudio);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OggAudio_ = $OggAudio$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/screens/$ConfigScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Config, $Config$Type} from "packages/de/keksuccino/konkrete/config/$Config"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ConfigScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Config$Type, arg1: string, arg2: $Screen$Type)

public "shouldCloseOnEsc"(): boolean
public "onClose"(): void
public "removed"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setValueDisplayName"(arg0: string, arg1: string): void
public "setCategoryDisplayName"(arg0: string, arg1: string): void
public "setValueDescription"(arg0: string, arg1: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigScreen$Type = ($ConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigScreen_ = $ConfigScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/events/$ScreenMouseClickedEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"

export class $ScreenMouseClickedEvent extends $Event {
readonly "mouseX": double
readonly "mouseY": double
readonly "mouseButton": integer

constructor()
constructor(arg0: double, arg1: double, arg2: integer)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenMouseClickedEvent$Type = ($ScreenMouseClickedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenMouseClickedEvent_ = $ScreenMouseClickedEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/$Compat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Compat {

constructor()

public static "printInfoLog"(): void
public static "isOptiFineLoaded"(): boolean
public static "isVideoExtensionLoaded"(): boolean
public static "isAudioExtensionLoaded"(): boolean
get "optiFineLoaded"(): boolean
get "videoExtensionLoaded"(): boolean
get "audioExtensionLoaded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Compat$Type = ($Compat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Compat_ = $Compat$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/$WidgetLocatorHandler" {
import {$WidgetMeta, $WidgetMeta$Type} from "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta"

export class $WidgetLocatorHandler {

constructor()

public static "clearCache"(): void
public static "getWidget"(arg0: string): $WidgetMeta
public static "invokeWidgetOnClick"(arg0: string): boolean
public static "invokeWidgetOnClick"(arg0: $WidgetMeta$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetLocatorHandler$Type = ($WidgetLocatorHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetLocatorHandler_ = $WidgetLocatorHandler$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj" {
import {$JStylerObj$Escape4Web, $JStylerObj$Escape4Web$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$Escape4Web"
import {$JStylerObj$MPAgressive, $JStylerObj$MPAgressive$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MPAgressive"
import {$JStylerObj$MPSimple, $JStylerObj$MPSimple$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MPSimple"
import {$JStylerObj$MPTrue, $JStylerObj$MPTrue$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MPTrue"
import {$JStylerObj$EscapeLT, $JStylerObj$EscapeLT$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$EscapeLT"

export class $JStylerObj {
static readonly "MP_SIMPLE": $JStylerObj$MPSimple
static readonly "MP_TRUE": $JStylerObj$MPTrue
static readonly "MP_AGGRESIVE": $JStylerObj$MPAgressive
static readonly "ESCAPE_LT": $JStylerObj$EscapeLT
static readonly "ESCAPE4Web": $JStylerObj$Escape4Web


public static "isSpace"(arg0: character): boolean
public static "isUnicode"(arg0: character): boolean
public static "isSpecialClose"(arg0: character): boolean
public static "isSpecialOpen"(arg0: character): boolean
public static "isSpecialChar"(arg0: character): boolean
public static "isSpecial"(arg0: character): boolean
public static "isKeyword"(arg0: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JStylerObj$Type = ($JStylerObj);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JStylerObj_ = $JStylerObj$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/mapper/$MappingProvider" {
import {$TypeRef, $TypeRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$TypeRef"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $MappingProvider {

 "map"<T>(arg0: any, arg1: $Class$Type<(T)>, arg2: $Configuration$Type): T
 "map"<T>(arg0: any, arg1: $TypeRef$Type<(T)>, arg2: $Configuration$Type): T
}

export namespace $MappingProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MappingProvider$Type = ($MappingProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MappingProvider_ = $MappingProvider$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext" {
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"

export interface $EvaluationContext {

 "getValue"<T>(arg0: boolean): T
 "getValue"<T>(): T
 "configuration"(): $Configuration
 "getPath"<T>(): T
 "updateOperations"(): $Collection<($PathRef)>
 "getPathList"(): $List<(string)>
 "rootDocument"(): any
}

export namespace $EvaluationContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvaluationContext$Type = ($EvaluationContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvaluationContext_ = $EvaluationContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/image/$ImageMenuBackground" {
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MenuBackground, $MenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackground"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $ImageMenuBackground extends $MenuBackground {
 "textureSupplier": $ResourceSupplier<($ITexture)>
 "fallbackTextureSupplier": $ResourceSupplier<($ITexture)>
 "slideLeftRight": boolean
 "repeat": boolean
readonly "builder": $MenuBackgroundBuilder<(any)>
 "opacity": float
 "keepBackgroundAspectRatio": boolean

constructor(arg0: $MenuBackgroundBuilder$Type<($ImageMenuBackground$Type)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageMenuBackground$Type = ($ImageMenuBackground);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageMenuBackground_ = $ImageMenuBackground$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$SpacerMenuBarEntry" {
import {$MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier, $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier"
import {$MenuBar$MenuBarEntry, $MenuBar$MenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"

export class $MenuBar$SpacerMenuBarEntry extends $MenuBar$MenuBarEntry {

constructor(arg0: string, arg1: $MenuBar$Type)

public "setWidth"(arg0: integer): $MenuBar$SpacerMenuBarEntry
public "setActiveSupplier"(arg0: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type): $MenuBar$SpacerMenuBarEntry
set "width"(value: integer)
set "activeSupplier"(value: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$SpacerMenuBarEntry$Type = ($MenuBar$SpacerMenuBarEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar$SpacerMenuBarEntry_ = $MenuBar$SpacerMenuBarEntry$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken" {
import {$EvaluationContextImpl, $EvaluationContextImpl$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl"
import {$PathFunction, $PathFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunction"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"

export class $PathToken {

constructor()

public "isTokenDefinite"(): boolean
public "invoke"(arg0: $PathFunction$Type, arg1: string, arg2: $PathRef$Type, arg3: any, arg4: $EvaluationContextImpl$Type): void
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "evaluate"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContextImpl$Type): void
public "getNext"(): $PathToken
public "setNext"(arg0: $PathToken$Type): void
public "isPathDefinite"(): boolean
public "getTokenCount"(): integer
public "setUpstreamArrayIndex"(arg0: integer): void
get "tokenDefinite"(): boolean
get "next"(): $PathToken
set "next"(value: $PathToken$Type)
get "pathDefinite"(): boolean
get "tokenCount"(): integer
set "upstreamArrayIndex"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathToken$Type = ($PathToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathToken_ = $PathToken$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Token {
static readonly "TOKEN_NUMBER": short
static readonly "TOKEN_OPERATOR": short
static readonly "TOKEN_FUNCTION": short
static readonly "TOKEN_PARENTHESES_OPEN": short
static readonly "TOKEN_PARENTHESES_CLOSE": short
static readonly "TOKEN_VARIABLE": short
static readonly "TOKEN_SEPARATOR": short


public "getType"(): integer
get "type"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Token$Type = ($Token);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Token_ = $Token$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$JsonPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"

export class $JsonPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public static "onReload"(arg0: $ModReloadEvent$Type): void
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonPlaceholder$Type = ($JsonPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonPlaceholder_ = $JsonPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$NullNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $ValueNodes$NullNode extends $ValueNode {


public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "asNullNode"(): $ValueNodes$NullNode
public "isNullNode"(): boolean
get "nullNode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$NullNode$Type = ($ValueNodes$NullNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$NullNode_ = $ValueNodes$NullNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/themes/$DarkUIColorTheme" {
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$UIColorTheme, $UIColorTheme$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorTheme"

export class $DarkUIColorTheme extends $UIColorTheme {
 "menu_bar_bottom_line_color": $DrawableColor
 "layout_editor_mouse_selection_rectangle_color": $DrawableColor
 "layout_editor_grid_color_normal": $DrawableColor
 "layout_editor_grid_color_center": $DrawableColor
 "layout_editor_element_border_color_normal": $DrawableColor
 "layout_editor_element_border_color_selected": $DrawableColor
 "layout_editor_element_dragging_not_allowed_color": $DrawableColor
 "layout_editor_anchor_point_overlay_color_base": $DrawableColor
 "layout_editor_anchor_point_overlay_color_border": $DrawableColor
 "layout_editor_close_icon_color": $DrawableColor
 "scroll_grabber_color_normal": $DrawableColor
 "scroll_grabber_color_hover": $DrawableColor
 "screen_background_color": $DrawableColor
 "screen_background_color_darker": $DrawableColor
 "element_border_color_normal": $DrawableColor
 "element_border_color_hover": $DrawableColor
 "element_background_color_normal": $DrawableColor
 "element_background_color_hover": $DrawableColor
 "slider_handle_color_normal": $DrawableColor
 "slider_handle_color_hover": $DrawableColor
 "area_background_color": $DrawableColor
 "edit_box_background_color": $DrawableColor
 "edit_box_border_color_normal": $DrawableColor
 "edit_box_border_color_focused": $DrawableColor
 "list_entry_color_selected_hovered": $DrawableColor
 "text_editor_sidebar_color": $DrawableColor
 "text_editor_line_number_text_color_normal": $DrawableColor
 "text_editor_line_number_text_color_selected": $DrawableColor
 "listing_dot_color_1": $DrawableColor
 "listing_dot_color_2": $DrawableColor
 "listing_dot_color_3": $DrawableColor
 "suggestions_background_color": $DrawableColor
 "suggestions_text_color_normal": $DrawableColor
 "suggestions_text_color_selected": $DrawableColor
 "ui_texture_color": $DrawableColor
 "generic_text_base_color": $DrawableColor
 "element_label_color_normal": $DrawableColor
 "element_label_color_inactive": $DrawableColor
 "edit_box_text_color_normal": $DrawableColor
 "edit_box_text_color_uneditable": $DrawableColor
 "edit_box_suggestion_text_color": $DrawableColor
 "description_area_text_color": $DrawableColor
 "text_editor_text_color": $DrawableColor
 "success_text_color": $DrawableColor
 "error_text_color": $DrawableColor
 "warning_text_color": $DrawableColor
 "text_editor_text_formatting_nested_text_color_1": $DrawableColor
 "text_editor_text_formatting_nested_text_color_2": $DrawableColor
 "text_editor_text_formatting_nested_text_color_3": $DrawableColor
 "text_editor_text_formatting_nested_text_color_4": $DrawableColor
 "text_editor_text_formatting_nested_text_color_5": $DrawableColor
 "text_editor_text_formatting_nested_text_color_6": $DrawableColor
 "text_editor_text_formatting_nested_text_color_7": $DrawableColor
 "text_editor_text_formatting_nested_text_color_8": $DrawableColor
 "text_editor_text_formatting_nested_text_color_9": $DrawableColor
 "text_editor_text_formatting_nested_text_color_10": $DrawableColor
 "text_editor_text_formatting_nested_text_color_11": $DrawableColor
 "text_editor_text_formatting_nested_text_color_12": $DrawableColor
 "text_editor_text_formatting_brackets_color": $DrawableColor

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DarkUIColorTheme$Type = ($DarkUIColorTheme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DarkUIColorTheme_ = $DarkUIColorTheme$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollbar/$ScrollBar" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ScrollBar$ScrollBarDirection, $ScrollBar$ScrollBarDirection$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollbar/$ScrollBar$ScrollBarDirection"

export class $ScrollBar {
 "grabberWidth": integer
 "grabberHeight": integer
 "scrollAreaStartX": integer
 "scrollAreaStartY": integer
 "scrollAreaEndX": integer
 "scrollAreaEndY": integer
 "idleBarColor": $Color
 "hoverBarColor": $Color
 "idleBarTexture": $ResourceLocation
 "hoverBarTexture": $ResourceLocation
 "active": boolean

constructor(arg0: $ScrollBar$ScrollBarDirection$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: $Color$Type, arg8: $Color$Type)
constructor(arg0: $ScrollBar$ScrollBarDirection$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: $ResourceLocation$Type, arg8: $ResourceLocation$Type)

public "isMouseInsideScrollArea"(arg0: boolean): boolean
public "getGrabberScrollSpeed"(): float
public "registerScrollListener"(arg0: $Consumer$Type<($ScrollBar$Type)>): void
public "setGrabberScrollSpeed"(arg0: float): void
public "isScrollWheelAllowed"(): boolean
public "render"(arg0: $GuiGraphics$Type): void
public "isGrabberGrabbed"(): boolean
public "isGrabberHovered"(): boolean
public "getScroll"(): float
public "setScroll"(arg0: float): void
public "setScroll"(arg0: float, arg1: boolean): void
public "getDirection"(): $ScrollBar$ScrollBarDirection
public "setScrollWheelAllowed"(arg0: boolean): void
public "setWheelScrollSpeed"(arg0: float): void
public "getWheelScrollSpeed"(): float
get "grabberScrollSpeed"(): float
set "grabberScrollSpeed"(value: float)
get "scrollWheelAllowed"(): boolean
get "grabberGrabbed"(): boolean
get "grabberHovered"(): boolean
get "scroll"(): float
set "scroll"(value: float)
get "direction"(): $ScrollBar$ScrollBarDirection
set "scrollWheelAllowed"(value: boolean)
set "wheelScrollSpeed"(value: float)
get "wheelScrollSpeed"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollBar$Type = ($ScrollBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollBar_ = $ScrollBar$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/customgui/$ManageCustomGuisScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ManageCustomGuisScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Runnable$Type)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManageCustomGuisScreen$Type = ($ManageCustomGuisScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManageCustomGuisScreen_ = $ManageCustomGuisScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuEntry$EntryTask" {
import {$ContextMenu$ContextMenuEntry, $ContextMenu$ContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuEntry"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export interface $ContextMenu$ContextMenuEntry$EntryTask {

 "run"(arg0: $ContextMenu$Type, arg1: $ContextMenu$ContextMenuEntry$Type<(any)>, arg2: boolean): void

(arg0: $ContextMenu$Type, arg1: $ContextMenu$ContextMenuEntry$Type<(any)>, arg2: boolean): void
}

export namespace $ContextMenu$ContextMenuEntry$EntryTask {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$ContextMenuEntry$EntryTask$Type = ($ContextMenu$ContextMenuEntry$EntryTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$ContextMenuEntry$EntryTask_ = $ContextMenu$ContextMenuEntry$EntryTask$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONArray" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$JSONAwareEx, $JSONAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAwareEx"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$ListIterator, $ListIterator$Type} from "packages/java/util/$ListIterator"
import {$JSONStreamAwareEx, $JSONStreamAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStreamAwareEx"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$Spliterator, $Spliterator$Type} from "packages/java/util/$Spliterator"
import {$UnaryOperator, $UnaryOperator$Type} from "packages/java/util/function/$UnaryOperator"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"
import {$Iterator, $Iterator$Type} from "packages/java/util/$Iterator"

export class $JSONArray extends $ArrayList<(any)> implements $List<(any)>, $JSONAwareEx, $JSONStreamAwareEx {

constructor()
constructor(arg0: integer)

public "toString"(): string
public "toString"(arg0: $JSONStyle$Type): string
public "merge"(arg0: any): void
public static "toJSONString"(arg0: $List$Type<(any)>, arg1: $JSONStyle$Type): string
public static "toJSONString"(arg0: $List$Type<(any)>): string
public "toJSONString"(): string
public "toJSONString"(arg0: $JSONStyle$Type): string
public "writeJSONString"(arg0: $Appendable$Type, arg1: $JSONStyle$Type): void
public "writeJSONString"(arg0: $Appendable$Type): void
public static "writeJSONString"(arg0: $List$Type<(any)>, arg1: $Appendable$Type): void
public static "writeJSONString"(arg0: $Iterable$Type<(any)>, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void
public "appendElement"(arg0: any): $JSONArray
public "add"(arg0: integer, arg1: any): void
public "add"(arg0: any): boolean
public "remove"(arg0: any): boolean
public "remove"(arg0: integer): any
public "get"(arg0: integer): any
public "equals"(arg0: any): boolean
public "hashCode"(): integer
public static "copyOf"<E>(arg0: $Collection$Type<(any)>): $List<(any)>
public "indexOf"(arg0: any): integer
public "clear"(): void
public "lastIndexOf"(arg0: any): integer
public "isEmpty"(): boolean
public "replaceAll"(arg0: $UnaryOperator$Type<(any)>): void
public "size"(): integer
public "subList"(arg0: integer, arg1: integer): $List<(any)>
public "toArray"(): (any)[]
public "toArray"<T>(arg0: (T)[]): (T)[]
public "iterator"(): $Iterator<(any)>
public static "of"<E>(arg0: any, arg1: any, arg2: any, arg3: any): $List<(any)>
public static "of"<E>(arg0: any, arg1: any, arg2: any): $List<(any)>
public static "of"<E>(arg0: any, arg1: any): $List<(any)>
public static "of"<E>(arg0: any): $List<(any)>
public static "of"<E>(): $List<(any)>
public static "of"<E>(arg0: any, arg1: any, arg2: any, arg3: any, arg4: any, arg5: any, arg6: any, arg7: any): $List<(any)>
public static "of"<E>(arg0: any, arg1: any, arg2: any, arg3: any, arg4: any, arg5: any, arg6: any): $List<(any)>
public static "of"<E>(arg0: any, arg1: any, arg2: any, arg3: any, arg4: any, arg5: any): $List<(any)>
public static "of"<E>(arg0: any, arg1: any, arg2: any, arg3: any, arg4: any): $List<(any)>
public static "of"<E>(arg0: any, arg1: any, arg2: any, arg3: any, arg4: any, arg5: any, arg6: any, arg7: any, arg8: any, arg9: any): $List<(any)>
public static "of"<E>(arg0: any, arg1: any, arg2: any, arg3: any, arg4: any, arg5: any, arg6: any, arg7: any, arg8: any): $List<(any)>
public static "of"<E>(...arg0: (any)[]): $List<(any)>
public "contains"(arg0: any): boolean
public "spliterator"(): $Spliterator<(any)>
public "addAll"(arg0: integer, arg1: $Collection$Type<(any)>): boolean
public "addAll"(arg0: $Collection$Type<(any)>): boolean
public "set"(arg0: integer, arg1: any): any
public "sort"(arg0: $Comparator$Type<(any)>): void
public "removeAll"(arg0: $Collection$Type<(any)>): boolean
public "retainAll"(arg0: $Collection$Type<(any)>): boolean
public "listIterator"(arg0: integer): $ListIterator<(any)>
public "listIterator"(): $ListIterator<(any)>
public "containsAll"(arg0: $Collection$Type<(any)>): boolean
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONArray$Type = ($JSONArray);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONArray_ = $JSONArray$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/$SimpleAudioFactory$SourceType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SimpleAudioFactory$SourceType extends $Enum<($SimpleAudioFactory$SourceType)> {
static readonly "RESOURCE_LOCATION": $SimpleAudioFactory$SourceType
static readonly "LOCAL_FILE": $SimpleAudioFactory$SourceType
static readonly "WEB_FILE": $SimpleAudioFactory$SourceType


public static "values"(): ($SimpleAudioFactory$SourceType)[]
public static "valueOf"(arg0: string): $SimpleAudioFactory$SourceType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleAudioFactory$SourceType$Type = (("web_file") | ("local_file") | ("resource_location")) | ($SimpleAudioFactory$SourceType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleAudioFactory$SourceType_ = $SimpleAudioFactory$SourceType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$OSNamePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $OSNamePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getAlternativeIdentifiers"(): $List<(string)>
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "alternativeIdentifiers"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OSNamePlaceholder$Type = ($OSNamePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OSNamePlaceholder_ = $OSNamePlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/$LayoutBase" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$SerializedMenuBackground, $SerializedMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$SerializedMenuBackground"
import {$MenuBackground, $MenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackground"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $LayoutBase {
 "menuBackground": $MenuBackground
 "preserveBackgroundAspectRatio": boolean
 "openAudio": $ResourceSupplier<($IAudio)>
 "closeAudio": $ResourceSupplier<($IAudio)>
 "forcedScale": float
 "autoScalingWidth": integer
 "autoScalingHeight": integer
 "customMenuTitle": string
 "preserveScrollListHeaderFooterAspectRatio": boolean
 "repeatScrollListHeaderTexture": boolean
 "repeatScrollListFooterTexture": boolean
 "scrollListHeaderTexture": $ResourceSupplier<($ITexture)>
 "scrollListFooterTexture": $ResourceSupplier<($ITexture)>
 "renderScrollListHeaderShadow": boolean
 "renderScrollListFooterShadow": boolean
 "showScrollListHeaderFooterPreviewInEditor": boolean

constructor()

public static "convertSectionToBackground"(arg0: $PropertyContainer$Type): $SerializedMenuBackground
public static "stackLayoutBases"(...arg0: ($LayoutBase$Type)[]): $LayoutBase
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutBase$Type = ($LayoutBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutBase_ = $LayoutBase$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/window/$WindowHandler" {
import {$File, $File$Type} from "packages/java/io/$File"

export class $WindowHandler {

constructor()

public static "resetWindowIcon"(): void
public static "updateWindowTitle"(): void
public static "getCustomWindowTitle"(): string
public static "getCustomWindowIcon16"(): $File
public static "allCustomWindowIconsSetAndFound"(): boolean
public static "updateCustomWindowIcon"(): void
public static "getCustomWindowIcon32"(): $File
public static "handleForceFullscreen"(): void
public static "isCustomWindowIconEnabled"(): boolean
public static "getCustomWindowIconMacOS"(): $File
get "customWindowTitle"(): string
get "customWindowIcon16"(): $File
get "customWindowIcon32"(): $File
get "customWindowIconEnabled"(): boolean
get "customWindowIconMacOS"(): $File
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WindowHandler$Type = ($WindowHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WindowHandler_ = $WindowHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/$SerializedMenuBackground" {
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"

export class $SerializedMenuBackground extends $PropertyContainer {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SerializedMenuBackground$Type = ($SerializedMenuBackground);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SerializedMenuBackground_ = $SerializedMenuBackground$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/cursor/$CursorHandler$CustomCursor" {
import {$SimpleTexture, $SimpleTexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$SimpleTexture"

export class $CursorHandler$CustomCursor {
readonly "id_long": long
readonly "hotspotX": integer
readonly "hotspotY": integer
readonly "texture": $SimpleTexture
readonly "textureName": string


public "destroy"(): void
public static "create"(arg0: $SimpleTexture$Type, arg1: integer, arg2: integer, arg3: string): $CursorHandler$CustomCursor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CursorHandler$CustomCursor$Type = ($CursorHandler$CustomCursor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CursorHandler$CustomCursor_ = $CursorHandler$CustomCursor$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationAbortException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$RuntimeException, $RuntimeException$Type} from "packages/java/lang/$RuntimeException"

export class $EvaluationAbortException extends $RuntimeException {

constructor()

public "fillInStackTrace"(): $Throwable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvaluationAbortException$Type = ($EvaluationAbortException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvaluationAbortException_ = $EvaluationAbortException$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/json/$Append" {
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathFunction, $PathFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunction"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export class $Append implements $PathFunction {

constructor()

public "invoke"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContext$Type, arg4: $List$Type<($Parameter$Type)>): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Append$Type = ($Append);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Append_ = $Append$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$GifTexture$DecodedGifImage" {
import {$GifDecoder, $GifDecoder$Type} from "packages/com/madgag/gif/fmsware/$GifDecoder"
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $GifTexture$DecodedGifImage extends $Record {

constructor(decoder: $GifDecoder$Type, imageWidth: integer, imageHeight: integer, numPlays: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "decoder"(): $GifDecoder
public "imageHeight"(): integer
public "imageWidth"(): integer
public "numPlays"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GifTexture$DecodedGifImage$Type = ($GifTexture$DecodedGifImage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GifTexture$DecodedGifImage_ = $GifTexture$DecodedGifImage$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserInputStream" {
import {$JSONParserReader, $JSONParserReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserReader"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"

export class $JSONParserInputStream extends $JSONParserReader {
static readonly "EOI": byte

constructor(arg0: integer)

public "parse"(arg0: $InputStream$Type): any
public "parse"<T>(arg0: $InputStream$Type, arg1: $JsonReaderI$Type<(T)>): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONParserInputStream$Type = ($JSONParserInputStream);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONParserInputStream_ = $JSONParserInputStream$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$OpenScreenPostInitEvent" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $OpenScreenPostInitEvent extends $EventBase {

constructor(arg0: $Screen$Type)

public "isCancelable"(): boolean
public "getScreen"(): $Screen
get "cancelable"(): boolean
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenScreenPostInitEvent$Type = ($OpenScreenPostInitEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenScreenPostInitEvent_ = $OpenScreenPostInitEvent$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener$EvaluationContinuation" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $EvaluationListener$EvaluationContinuation extends $Enum<($EvaluationListener$EvaluationContinuation)> {
static readonly "CONTINUE": $EvaluationListener$EvaluationContinuation
static readonly "ABORT": $EvaluationListener$EvaluationContinuation


public static "values"(): ($EvaluationListener$EvaluationContinuation)[]
public static "valueOf"(arg0: string): $EvaluationListener$EvaluationContinuation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvaluationListener$EvaluationContinuation$Type = (("abort") | ("continue")) | ($EvaluationListener$EvaluationContinuation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvaluationListener$EvaluationContinuation_ = $EvaluationListener$EvaluationContinuation$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$AbsoluteNumberPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $AbsoluteNumberPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsoluteNumberPlaceholder$Type = ($AbsoluteNumberPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsoluteNumberPlaceholder_ = $AbsoluteNumberPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$TextWidget" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$UniqueWidget, $UniqueWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$UniqueWidget"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$TextWidget$TextAlignment, $TextWidget$TextAlignment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$TextWidget$TextAlignment"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"

export class $TextWidget extends $AbstractWidget implements $UniqueWidget, $NavigatableWidget {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Font$Type, arg5: $Component$Type)

public static "of"(arg0: string, arg1: integer, arg2: integer, arg3: integer): $TextWidget
public static "of"(arg0: $Component$Type, arg1: integer, arg2: integer, arg3: integer): $TextWidget
public static "empty"(arg0: integer, arg1: integer, arg2: integer): $TextWidget
public "isNavigatable"(): boolean
public "getTextAlignment"(): $TextWidget$TextAlignment
public "setTextAlignment"(arg0: $TextWidget$TextAlignment$Type): $TextWidget
public "getBaseColor"(): $DrawableColor
public "centerWidget"(arg0: $Screen$Type): $TextWidget
public "setNavigatable"(arg0: boolean): void
public "getFont"(): $Font
public "setFont"(arg0: $Font$Type): $TextWidget
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "playDownSound"(arg0: $SoundManager$Type): void
public "getTextWidth"(): integer
public "getWidgetIdentifierFancyMenu"(): string
public "setBaseColor"(arg0: $DrawableColor$Type): $TextWidget
public "isShadowEnabled"(): boolean
public "setShadowEnabled"(arg0: boolean): $TextWidget
get "navigatable"(): boolean
get "textAlignment"(): $TextWidget$TextAlignment
set "textAlignment"(value: $TextWidget$TextAlignment$Type)
get "baseColor"(): $DrawableColor
set "navigatable"(value: boolean)
get "font"(): $Font
set "font"(value: $Font$Type)
get "focusable"(): boolean
set "focusable"(value: boolean)
get "textWidth"(): integer
get "widgetIdentifierFancyMenu"(): string
set "baseColor"(value: $DrawableColor$Type)
get "shadowEnabled"(): boolean
set "shadowEnabled"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextWidget$Type = ($TextWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextWidget_ = $TextWidget$Type;
}}
declare module "packages/de/keksuccino/konkrete/rendering/animation/$AnimationRenderer" {
import {$IAnimationRenderer, $IAnimationRenderer$Type} from "packages/de/keksuccino/konkrete/rendering/animation/$IAnimationRenderer"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $AnimationRenderer implements $IAnimationRenderer {

constructor(arg0: string, arg1: integer, arg2: boolean, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: string)

public "getPath"(): string
public "currentFrame"(): integer
public "setWidth"(arg0: integer): void
public "resetAnimation"(): void
public "isReady"(): boolean
public "setLooped"(arg0: boolean): void
public "isGettingLooped"(): boolean
public "setOpacity"(arg0: float): void
public "setPosX"(arg0: integer): void
public "setPosY"(arg0: integer): void
public "prepareAnimation"(): void
public "render"(arg0: $GuiGraphics$Type): void
public "setStretchImageToScreensize"(arg0: boolean): void
public "isStretchedToStreensize"(): boolean
public "getPosY"(): integer
public "getPosX"(): integer
public "getWidth"(): integer
public "getHeight"(): integer
public "getFPS"(): integer
public "animationFrames"(): integer
public "setFPS"(arg0: integer): void
public "setHideAfterLastFrame"(arg0: boolean): void
public "setHeight"(arg0: integer): void
public "isFinished"(): boolean
get "path"(): string
set "width"(value: integer)
get "ready"(): boolean
set "looped"(value: boolean)
get "gettingLooped"(): boolean
set "opacity"(value: float)
set "posX"(value: integer)
set "posY"(value: integer)
set "stretchImageToScreensize"(value: boolean)
get "stretchedToStreensize"(): boolean
get "posY"(): integer
get "posX"(): integer
get "width"(): integer
get "height"(): integer
get "fPS"(): integer
set "fPS"(value: integer)
set "hideAfterLastFrame"(value: boolean)
set "height"(value: integer)
get "finished"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationRenderer$Type = ($AnimationRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationRenderer_ = $AnimationRenderer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/$ActionInstance" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Executable, $Executable$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Executable"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$ValuePlaceholderHolder, $ValuePlaceholderHolder$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ValuePlaceholderHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ActionInstance implements $Executable, $ValuePlaceholderHolder {
 "action": $Action
 "value": string
 "identifier": string

constructor(arg0: $Action$Type, arg1: string)

public "execute"(): void
public "copy"(arg0: boolean): $ActionInstance
public "getIdentifier"(): string
public "addValuePlaceholder"(arg0: string, arg1: $Supplier$Type<(string)>): void
public "serialize"(): $PropertyContainer
public static "deserializeAll"(arg0: $PropertyContainer$Type): $List<($ActionInstance)>
public "getValuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
public "serializeToExistingPropertyContainer"(arg0: $PropertyContainer$Type): void
get "identifier"(): string
get "valuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActionInstance$Type = ($ActionInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActionInstance_ = $ActionInstance$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$ObjectUtils" {
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ObjectUtils {

constructor()

public static "build"<T>(arg0: $Supplier$Type<(T)>): T
public static "getOfAllUnsafe"(arg0: $List$Type<(any)>, arg1: $ConsumingSupplier$Type<(any), (any)>): $List<(any)>
public static "isFalseForAll"<T>(arg0: $List$Type<(T)>, arg1: $ConsumingSupplier$Type<(T), (boolean)>): boolean
public static "isTrueForAll"<T>(arg0: $List$Type<(T)>, arg1: $ConsumingSupplier$Type<(T), (boolean)>): boolean
public static "getOfAll"<O, F>(arg0: $Class$Type<(any)>, arg1: $List$Type<(O)>, arg2: $ConsumingSupplier$Type<(O), (F)>): $List<(F)>
public static "isTrueOrFalseForAll"<T>(arg0: $List$Type<(T)>, arg1: $ConsumingSupplier$Type<(T), (boolean)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectUtils$Type = ($ObjectUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectUtils_ = $ObjectUtils$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPath" {
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$ParseContext, $ParseContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$ParseContext"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$File, $File$Type} from "packages/java/io/$File"
import {$MapFunction, $MapFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$MapFunction"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$DocumentContext, $DocumentContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$DocumentContext"
import {$URL, $URL$Type} from "packages/java/net/$URL"
import {$JsonProvider, $JsonProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$JsonProvider"

export class $JsonPath {


public "add"<T>(arg0: any, arg1: any, arg2: $Configuration$Type): T
public "put"<T>(arg0: any, arg1: string, arg2: any, arg3: $Configuration$Type): T
public static "compile"(arg0: string, ...arg1: ($Predicate$Type)[]): $JsonPath
public "map"<T>(arg0: any, arg1: $MapFunction$Type, arg2: $Configuration$Type): T
public "set"<T>(arg0: any, arg1: any, arg2: $Configuration$Type): T
public "read"<T>(arg0: $InputStream$Type, arg1: string, arg2: $Configuration$Type): T
public "read"<T>(arg0: $InputStream$Type, arg1: $Configuration$Type): T
public "read"<T>(arg0: $InputStream$Type): T
public "read"<T>(arg0: $File$Type): T
public "read"<T>(arg0: $File$Type, arg1: $Configuration$Type): T
public static "read"<T>(arg0: $InputStream$Type, arg1: string, ...arg2: ($Predicate$Type)[]): T
public static "read"<T>(arg0: $File$Type, arg1: string, ...arg2: ($Predicate$Type)[]): T
/**
 * 
 * @deprecated
 */
public static "read"<T>(arg0: $URL$Type, arg1: string, ...arg2: ($Predicate$Type)[]): T
public static "read"<T>(arg0: string, arg1: string, ...arg2: ($Predicate$Type)[]): T
public static "read"<T>(arg0: any, arg1: string, ...arg2: ($Predicate$Type)[]): T
public "read"<T>(arg0: any, arg1: $Configuration$Type): T
public "read"<T>(arg0: any): T
public "read"<T>(arg0: string): T
public "read"<T>(arg0: string, arg1: $Configuration$Type): T
public "read"<T>(arg0: $URL$Type): T
public "delete"<T>(arg0: any, arg1: $Configuration$Type): T
public "getPath"(): string
public static "parse"(arg0: any, arg1: $Configuration$Type): $DocumentContext
/**
 * 
 * @deprecated
 */
public static "parse"(arg0: $URL$Type): $DocumentContext
public static "parse"(arg0: $InputStream$Type): $DocumentContext
public static "parse"(arg0: $File$Type): $DocumentContext
public static "parse"(arg0: $InputStream$Type, arg1: $Configuration$Type): $DocumentContext
public static "parse"(arg0: $File$Type, arg1: $Configuration$Type): $DocumentContext
/**
 * 
 * @deprecated
 */
public static "parse"(arg0: $URL$Type, arg1: $Configuration$Type): $DocumentContext
public static "parse"(arg0: string, arg1: $Configuration$Type): $DocumentContext
public static "parse"(arg0: string): $DocumentContext
public static "parse"(arg0: any): $DocumentContext
public static "using"(arg0: $Configuration$Type): $ParseContext
/**
 * 
 * @deprecated
 */
public static "using"(arg0: $JsonProvider$Type): $ParseContext
public "renameKey"<T>(arg0: any, arg1: string, arg2: string, arg3: $Configuration$Type): T
public static "isPathDefinite"(arg0: string): boolean
public "isDefinite"(): boolean
get "path"(): string
get "definite"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonPath$Type = ($JsonPath);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonPath_ = $JsonPath$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/text/v2/$TextElement$SourceMode" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$LocalizedCycleEnum, $LocalizedCycleEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedCycleEnum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TextElement$SourceMode extends $Enum<($TextElement$SourceMode)> implements $LocalizedCycleEnum<($TextElement$SourceMode)> {
static readonly "DIRECT": $TextElement$SourceMode
static readonly "RESOURCE": $TextElement$SourceMode


public "getName"(): string
public static "values"(): ($TextElement$SourceMode)[]
public static "valueOf"(arg0: string): $TextElement$SourceMode
public static "getByName"(arg0: string): $TextElement$SourceMode
public "getValueComponentStyle"(): $Style
public "getLocalizationKeyBase"(): string
public "getByNameInternal"(arg0: string): $TextElement$SourceMode
public "getValues"(): ($TextElement$SourceMode)[]
public "getCycleComponentStyle"(): $Style
public "cycle"(arg0: $TextElement$SourceMode$Type): $LocalizedGenericValueCycle<($TextElement$SourceMode)>
public "cycle"(): $LocalizedGenericValueCycle<($TextElement$SourceMode)>
public "getCycleComponent"(): $MutableComponent
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "valueComponentStyle"(): $Style
get "localizationKeyBase"(): string
get "cycleComponentStyle"(): $Style
get "cycleComponent"(): $MutableComponent
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextElement$SourceMode$Type = (("resource") | ("direct")) | ($TextElement$SourceMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextElement$SourceMode_ = $TextElement$SourceMode$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$StringNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNodes$NumberNode, $ValueNodes$NumberNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$NumberNode"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $ValueNodes$StringNode extends $ValueNode {


public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "length"(): integer
public "toString"(): string
public "isEmpty"(): boolean
public "contains"(arg0: string): boolean
public "getString"(): string
public "isStringNode"(): boolean
public "asNumberNode"(): $ValueNodes$NumberNode
public "asStringNode"(): $ValueNodes$StringNode
get "empty"(): boolean
get "string"(): string
get "stringNode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$StringNode$Type = ($ValueNodes$StringNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$StringNode_ = $ValueNodes$StringNode$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$LogicalExpressionNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$LogicalOperator, $LogicalOperator$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$LogicalOperator"
import {$ExpressionNode, $ExpressionNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ExpressionNode"

export class $LogicalExpressionNode extends $ExpressionNode {


public "toString"(): string
public "append"(arg0: $ExpressionNode$Type): $LogicalExpressionNode
public "apply"(arg0: $Predicate$PredicateContext$Type): boolean
public "or"(arg0: $LogicalExpressionNode$Type): $LogicalExpressionNode
public "and"(arg0: $LogicalExpressionNode$Type): $LogicalExpressionNode
public "getOperator"(): $LogicalOperator
public static "createLogicalAnd"(arg0: $Collection$Type<($ExpressionNode$Type)>): $LogicalExpressionNode
public static "createLogicalAnd"(arg0: $ExpressionNode$Type, arg1: $ExpressionNode$Type): $LogicalExpressionNode
public static "createLogicalOr"(arg0: $ExpressionNode$Type, arg1: $ExpressionNode$Type): $LogicalExpressionNode
public static "createLogicalOr"(arg0: $Collection$Type<($ExpressionNode$Type)>): $LogicalExpressionNode
public static "createLogicalNot"(arg0: $ExpressionNode$Type): $ExpressionNode
get "operator"(): $LogicalOperator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LogicalExpressionNode$Type = ($LogicalExpressionNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LogicalExpressionNode_ = $LogicalExpressionNode$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/openal/$ALErrorHandler" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ALErrorHandler {

constructor()

public static "checkAndPrintOpenAlError"(): boolean
public static "getOpenAlError"(): string
public static "checkOpenAlError"(): void
get "openAlError"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ALErrorHandler$Type = ($ALErrorHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ALErrorHandler_ = $ALErrorHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/widgets/layer/$LayerLayoutEditorWidget" {
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$AbstractLayoutEditorWidgetBuilder, $AbstractLayoutEditorWidgetBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidgetBuilder"
import {$AbstractLayoutEditorWidget, $AbstractLayoutEditorWidget$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidget"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $LayerLayoutEditorWidget extends $AbstractLayoutEditorWidget {
 "posZ": float
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: $LayoutEditorScreen$Type, arg1: $AbstractLayoutEditorWidgetBuilder$Type<(any)>)

public "tick"(): void
public "refresh"(): void
public "editorElementRemovedOrHidden"(arg0: $AbstractEditorElement$Type): void
public "editorElementAdded"(arg0: $AbstractEditorElement$Type): void
public "editorElementOrderChanged"(arg0: $AbstractEditorElement$Type, arg1: boolean): void
public "updateList"(arg0: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayerLayoutEditorWidget$Type = ($LayerLayoutEditorWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayerLayoutEditorWidget_ = $LayerLayoutEditorWidget$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$TypeRef" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Type, $Type$Type} from "packages/java/lang/reflect/$Type"

export class $TypeRef<T> implements $Comparable<($TypeRef<(T)>)> {


public "compareTo"(arg0: $TypeRef$Type<(T)>): integer
public "getType"(): $Type
get "type"(): $Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TypeRef$Type<T> = ($TypeRef<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TypeRef_<T> = $TypeRef$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/shuntingyard/$ShuntingYard" {
import {$Function, $Function$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/function/$Function"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Token, $Token$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token"
import {$Operator, $Operator$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/operator/$Operator"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ShuntingYard {

constructor()

public static "convertToRPN"(arg0: string, arg1: $Map$Type<(string), ($Function$Type)>, arg2: $Map$Type<(string), ($Operator$Type)>, arg3: $Set$Type<(string)>, arg4: boolean): ($Token)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShuntingYard$Type = ($ShuntingYard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShuntingYard_ = $ShuntingYard$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextElement$SourceMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $TextElement$SourceMode extends $Enum<($TextElement$SourceMode)> {
static readonly "DIRECT": $TextElement$SourceMode
static readonly "LOCAL_SOURCE": $TextElement$SourceMode
static readonly "WEB_SOURCE": $TextElement$SourceMode


public "getName"(): string
public static "values"(): ($TextElement$SourceMode)[]
public static "valueOf"(arg0: string): $TextElement$SourceMode
public static "getByName"(arg0: string): $TextElement$SourceMode
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextElement$SourceMode$Type = (("local_source") | ("web_source") | ("direct")) | ($TextElement$SourceMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextElement$SourceMode_ = $TextElement$SourceMode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/$AspectRatio" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $AspectRatio {

constructor(arg0: integer, arg1: integer)

public "getAspectRatioSizeByMinimumSize"(arg0: integer, arg1: integer): (integer)[]
public "getAspectRatioSizeByMaximumSize"(arg0: integer, arg1: integer): (integer)[]
public "getAspectRatioHeight"(arg0: integer): integer
public "getAspectRatioWidth"(arg0: integer): integer
public "getInputWidth"(): integer
public "getInputHeight"(): integer
get "inputWidth"(): integer
get "inputHeight"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AspectRatio$Type = ($AspectRatio);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AspectRatio_ = $AspectRatio$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v2/$SliderEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"
import {$SliderElement, $SliderElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v2/$SliderElement"

export class $SliderEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getElement"(): $SliderElement
get "element"(): $SliderElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliderEditorElement$Type = ($SliderEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliderEditorElement_ = $SliderEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v1/$SliderEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

/**
 * 
 * @deprecated
 */
export class $SliderEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliderEditorElement$Type = ($SliderEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliderEditorElement_ = $SliderEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/customgui/$BuildCustomGuiScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $BuildCustomGuiScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "allowDone"(): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuildCustomGuiScreen$Type = ($BuildCustomGuiScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuildCustomGuiScreen_ = $BuildCustomGuiScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/entry/$ScrollAreaEntry" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/$ScrollArea"
import {$UIBase, $UIBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/$UIBase"
import {$AdvancedButton, $AdvancedButton$Type} from "packages/de/keksuccino/konkrete/gui/content/$AdvancedButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $ScrollAreaEntry extends $UIBase implements $Renderable {
 "parent": $ScrollArea
 "buttonBase": $AdvancedButton
 "deselectOtherEntriesOnSelect": boolean
 "selectOnClick": boolean
 "index": integer
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: $ScrollArea$Type, arg1: integer, arg2: integer)

public "updateEntry"(): void
public "isPlayClickSound"(): boolean
public "isSelectable"(): boolean
public "setWidth"(arg0: integer): void
public "getY"(): integer
public "setX"(arg0: integer): void
public "setY"(arg0: integer): void
public "getX"(): integer
public "isHovered"(): boolean
public "onClick"(arg0: $ScrollAreaEntry$Type): void
public "getWidth"(): integer
public "getHeight"(): integer
public "setTooltip"(...arg0: (string)[]): void
public "isSelected"(): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getBackgroundColorHover"(): $Color
public "setBackgroundColorHover"(arg0: $Color$Type): void
public "setSelectable"(arg0: boolean): void
public "setPlayClickSound"(arg0: boolean): void
public "getBackgroundColorIdle"(): $Color
public "setSelected"(arg0: boolean): void
public "setHeight"(arg0: integer): void
public "setBackgroundColorIdle"(arg0: $Color$Type): void
get "playClickSound"(): boolean
get "selectable"(): boolean
set "width"(value: integer)
get "y"(): integer
set "x"(value: integer)
set "y"(value: integer)
get "x"(): integer
get "hovered"(): boolean
get "width"(): integer
get "height"(): integer
set "tooltip"(value: (string)[])
get "selected"(): boolean
get "backgroundColorHover"(): $Color
set "backgroundColorHover"(value: $Color$Type)
set "selectable"(value: boolean)
set "playClickSound"(value: boolean)
get "backgroundColorIdle"(): $Color
set "selected"(value: boolean)
set "height"(value: integer)
set "backgroundColorIdle"(value: $Color$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollAreaEntry$Type = ($ScrollAreaEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollAreaEntry_ = $ScrollAreaEntry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/$MenuBackground" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"

export class $MenuBackground implements $Renderable, $GuiEventListener, $NarratableEntry, $NavigatableWidget {
readonly "builder": $MenuBackgroundBuilder<(any)>
 "opacity": float
 "keepBackgroundAspectRatio": boolean

constructor(arg0: $MenuBackgroundBuilder$Type<(any)>)

public "copy"(): $MenuBackground
public "tick"(): void
public static "isEditor"(): boolean
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "isNavigatable"(): boolean
public "setFocused"(arg0: boolean): void
public static "getScreenWidth"(): integer
public static "getScreenHeight"(): integer
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isFocused"(): boolean
public "onCloseScreen"(): void
public "setNavigatable"(arg0: boolean): void
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "onOpenScreen"(): void
public "onAfterResizeScreen"(): void
public "onBeforeResizeScreen"(): void
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getRectangle"(): $ScreenRectangle
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "isActive"(): boolean
public "getTabOrderGroup"(): integer
get "editor"(): boolean
get "navigatable"(): boolean
set "focused"(value: boolean)
get "screenWidth"(): integer
get "screenHeight"(): integer
get "focused"(): boolean
set "navigatable"(value: boolean)
get "focusable"(): boolean
set "focusable"(value: boolean)
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "active"(): boolean
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBackground$Type = ($MenuBackground);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBackground_ = $MenuBackground$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PropertyPathToken" {
import {$PathToken, $PathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EvaluationContextImpl, $EvaluationContextImpl$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"

export class $PropertyPathToken extends $PathToken {

constructor(arg0: $List$Type<(string)>, arg1: character)

public "isTokenDefinite"(): boolean
public "getProperties"(): $List<(string)>
public "evaluate"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContextImpl$Type): void
public "singlePropertyCase"(): boolean
public "getPathFragment"(): string
public "multiPropertyMergeCase"(): boolean
public "multiPropertyIterationCase"(): boolean
get "tokenDefinite"(): boolean
get "properties"(): $List<(string)>
get "pathFragment"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PropertyPathToken$Type = ($PropertyPathToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PropertyPathToken_ = $PropertyPathToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/$ChooseMenuBackgroundScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MenuBackground, $MenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackground"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ChooseMenuBackgroundScreen extends $Screen {
static readonly "NO_BACKGROUND": $MenuBackground
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $MenuBackground$Type, arg1: boolean, arg2: $Consumer$Type<($MenuBackground$Type)>)

public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChooseMenuBackgroundScreen$Type = ($ChooseMenuBackgroundScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChooseMenuBackgroundScreen_ = $ChooseMenuBackgroundScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/event/acara/$EventCancellationException" {
import {$Exception, $Exception$Type} from "packages/java/lang/$Exception"

export class $EventCancellationException extends $Exception {

constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventCancellationException$Type = ($EventCancellationException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventCancellationException_ = $EventCancellationException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ContextMenuBarEntry" {
import {$MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier, $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$MenuBar$ClickableMenuBarEntry, $MenuBar$ClickableMenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ClickableMenuBarEntry"
import {$MenuBar$MenuBarEntry$MenuBarEntrySupplier, $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry$MenuBarEntrySupplier"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MenuBar$ClickableMenuBarEntry$ClickAction, $MenuBar$ClickableMenuBarEntry$ClickAction$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ClickableMenuBarEntry$ClickAction"

export class $MenuBar$ContextMenuBarEntry extends $MenuBar$ClickableMenuBarEntry {

constructor(arg0: string, arg1: $MenuBar$Type, arg2: $Component$Type, arg3: $ContextMenu$Type)

public "getContextMenu"(): $ContextMenu
public "openContextMenu"(): void
public "openContextMenu"(arg0: $List$Type<(string)>): void
public "setClickAction"(arg0: $MenuBar$ClickableMenuBarEntry$ClickAction$Type): $MenuBar$ContextMenuBarEntry
public "setActiveSupplier"(arg0: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type): $MenuBar$ContextMenuBarEntry
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "setIconTextureSupplier"(arg0: $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<($ITexture$Type)>): $MenuBar$ContextMenuBarEntry
public "setLabelSupplier"(arg0: $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<($Component$Type)>): $MenuBar$ContextMenuBarEntry
get "contextMenu"(): $ContextMenu
set "clickAction"(value: $MenuBar$ClickableMenuBarEntry$ClickAction$Type)
set "activeSupplier"(value: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type)
set "iconTextureSupplier"(value: $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<($ITexture$Type)>)
set "labelSupplier"(value: $MenuBar$MenuBarEntry$MenuBarEntrySupplier$Type<($Component$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$ContextMenuBarEntry$Type = ($MenuBar$ContextMenuBarEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar$ContextMenuBarEntry_ = $MenuBar$ContextMenuBarEntry$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MPSimple" {
import {$JStylerObj$MustProtect, $JStylerObj$MustProtect$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$MustProtect"

export class $JStylerObj$MPSimple implements $JStylerObj$MustProtect {


public "mustBeProtect"(arg0: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JStylerObj$MPSimple$Type = ($JStylerObj$MPSimple);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JStylerObj$MPSimple_ = $JStylerObj$MPSimple$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/customgui/$CustomGuiHandler" {
import {$CustomGuiBaseScreen, $CustomGuiBaseScreen$Type} from "packages/de/keksuccino/fancymenu/customization/customgui/$CustomGuiBaseScreen"
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$CustomGui, $CustomGui$Type} from "packages/de/keksuccino/fancymenu/customization/customgui/$CustomGui"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CustomGuiHandler {
static readonly "CUSTOM_GUIS_FILE": $File

constructor()

public static "init"(): void
public static "reload"(): void
public static "guiExists"(arg0: string): boolean
public static "constructInstance"(arg0: string, arg1: $Screen$Type, arg2: $Screen$Type): $CustomGuiBaseScreen
public static "constructInstance"(arg0: $CustomGui$Type, arg1: $Screen$Type, arg2: $Screen$Type): $CustomGuiBaseScreen
public "onReloadFancyMenu"(arg0: $ModReloadEvent$Type): void
public static "getGuiIdentifiers"(): $List<(string)>
public static "addGui"(arg0: $CustomGui$Type): void
public static "saveChanges"(): void
public static "removeGui"(arg0: string): void
public static "getGuis"(): $List<($CustomGui)>
public static "getGuiForOverriddenScreen"(arg0: $Screen$Type): $CustomGui
public static "removeScreenOverrideFor"(arg0: string): void
public static "overrideScreenWithCustomGui"(arg0: string, arg1: string): void
public static "getOverriddenScreens"(): $Map<(string), (string)>
public static "getGui"(arg0: string): $CustomGui
public static "beforeSetScreen"(arg0: $Screen$Type): $Screen
get "guiIdentifiers"(): $List<(string)>
get "guis"(): $List<($CustomGui)>
get "overriddenScreens"(): $Map<(string), (string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomGuiHandler$Type = ($CustomGuiHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomGuiHandler_ = $CustomGuiHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/splash/$SplashTextElement" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$SplashTextElement$SourceMode, $SplashTextElement$SourceMode$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/splash/$SplashTextElement$SourceMode"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $SplashTextElement extends $AbstractElement {
 "sourceMode": $SplashTextElement$SourceMode
 "source": string
 "textFileSupplier": $ResourceSupplier<($IText)>
 "scale": float
 "shadow": boolean
 "bounce": boolean
 "rotation": float
 "baseColor": $DrawableColor
 "refreshOnMenuReload": boolean
 "font": $Font
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "refresh"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SplashTextElement$Type = ($SplashTextElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SplashTextElement_ = $SplashTextElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/other/$EditMinecraftOptionAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ActionInstance, $ActionInstance$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ActionInstance"

export class $EditMinecraftOptionAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "editValue"(arg0: $Screen$Type, arg1: $ActionInstance$Type): void
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditMinecraftOptionAction$Type = ($EditMinecraftOptionAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditMinecraftOptionAction_ = $EditMinecraftOptionAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/animation/$AnimationHandler" {
import {$IAnimationRenderer, $IAnimationRenderer$Type} from "packages/de/keksuccino/konkrete/rendering/animation/$IAnimationRenderer"
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AnimationData$Type, $AnimationData$Type$Type} from "packages/de/keksuccino/fancymenu/customization/animation/$AnimationData$Type"

export class $AnimationHandler {
static readonly "ANIMATIONS_DIR": $File

constructor()

public static "register"(arg0: $IAnimationRenderer$Type, arg1: string, arg2: $AnimationData$Type$Type): void
public static "init"(): void
public static "unregister"(arg0: $IAnimationRenderer$Type): void
public static "unregister"(arg0: string): void
public static "getAnimation"(arg0: string): $IAnimationRenderer
public static "discoverAndRegisterExternalAnimations"(): void
public static "animationExists"(arg0: string): boolean
public static "getAnimations"(): $List<($IAnimationRenderer)>
public static "preloadAnimations"(arg0: boolean): void
public static "getExternalAnimationNames"(): $List<(string)>
public static "resetAnimations"(): void
public static "preloadingCompleted"(): boolean
public static "resetAnimationSounds"(): void
public static "stopAnimationSounds"(): void
public static "updateAnimationSizes"(): void
get "animations"(): $List<($IAnimationRenderer)>
get "externalAnimationNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationHandler$Type = ($AnimationHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationHandler_ = $AnimationHandler$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/reader/$BeansWriterASMRemap" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JsonWriterI, $JsonWriterI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/reader/$JsonWriterI"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"

export class $BeansWriterASMRemap implements $JsonWriterI<(any)> {

constructor()

public "renameField"(arg0: string, arg1: string): void
public "writeJSONString"<E>(arg0: E, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeansWriterASMRemap$Type = ($BeansWriterASMRemap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeansWriterASMRemap_ = $BeansWriterASMRemap$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/$Packets" {
import {$OpenGuiCommandPacketCodec, $OpenGuiCommandPacketCodec$Type} from "packages/de/keksuccino/fancymenu/networking/packets/commands/opengui/$OpenGuiCommandPacketCodec"
import {$CloseGuiCommandPacketCodec, $CloseGuiCommandPacketCodec$Type} from "packages/de/keksuccino/fancymenu/networking/packets/commands/closegui/$CloseGuiCommandPacketCodec"
import {$VariableCommandSuggestionsPacketCodec, $VariableCommandSuggestionsPacketCodec$Type} from "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/suggestions/$VariableCommandSuggestionsPacketCodec"
import {$VariableCommandPacketCodec, $VariableCommandPacketCodec$Type} from "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/command/$VariableCommandPacketCodec"

export class $Packets {
static readonly "CLOSE_GUI_COMMAND_PACKET_CODEC": $CloseGuiCommandPacketCodec
static readonly "OPEN_GUI_COMMAND_PACKET_CODEC": $OpenGuiCommandPacketCodec
static readonly "VARIABLE_COMMAND_PACKET_CODEC": $VariableCommandPacketCodec
static readonly "VARIABLE_COMMAND_SUGGESTIONS_PACKET_CODEC": $VariableCommandSuggestionsPacketCodec

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Packets$Type = ($Packets);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Packets_ = $Packets$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$SeparatorMenuBarEntry" {
import {$MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier, $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier"
import {$MenuBar$MenuBarEntry, $MenuBar$MenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $MenuBar$SeparatorMenuBarEntry extends $MenuBar$MenuBarEntry {

constructor(arg0: string, arg1: $MenuBar$Type)

public "setColor"(arg0: $DrawableColor$Type): $MenuBar$SeparatorMenuBarEntry
public "setVisible"(arg0: boolean): $MenuBar$SeparatorMenuBarEntry
public "setActiveSupplier"(arg0: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type): $MenuBar$SeparatorMenuBarEntry
public "getColor"(): $DrawableColor
set "color"(value: $DrawableColor$Type)
set "visible"(value: boolean)
set "activeSupplier"(value: $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type)
get "color"(): $DrawableColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$SeparatorMenuBarEntry$Type = ($MenuBar$SeparatorMenuBarEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar$SeparatorMenuBarEntry_ = $MenuBar$SeparatorMenuBarEntry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/contexts/$TitleScreenWidgetIdentificationContext" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$WidgetIdentificationContext, $WidgetIdentificationContext$Type} from "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/$WidgetIdentificationContext"

export class $TitleScreenWidgetIdentificationContext extends $WidgetIdentificationContext {

constructor()

public "getTargetScreen"(): $Class<(any)>
get "targetScreen"(): $Class<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenWidgetIdentificationContext$Type = ($TitleScreenWidgetIdentificationContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenWidgetIdentificationContext_ = $TitleScreenWidgetIdentificationContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$UniqueWidget" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"

export interface $UniqueWidget {

 "setWidgetIdentifierFancyMenu"(arg0: string): $AbstractWidget
 "getWidgetIdentifierFancyMenu"(): string
}

export namespace $UniqueWidget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UniqueWidget$Type = ($UniqueWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UniqueWidget_ = $UniqueWidget$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/image/$ImageElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$ImageEditorElement, $ImageEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/image/$ImageEditorElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ImageElement, $ImageElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/image/$ImageElement"

export class $ImageElementBuilder extends $ElementBuilder<($ImageElement), ($ImageEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $ImageElement$Type, arg1: $LayoutEditorScreen$Type): $ImageEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageElementBuilder$Type = ($ImageElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageElementBuilder_ = $ImageElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment$QuoteContext" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$MarkdownTextFragment, $MarkdownTextFragment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment"

export class $MarkdownTextFragment$QuoteContext {
readonly "quoteFragments": $List<($MarkdownTextFragment)>

constructor()

public "getQuoteEnd"(): $MarkdownTextFragment
public "getQuoteStart"(): $MarkdownTextFragment
get "quoteEnd"(): $MarkdownTextFragment
get "quoteStart"(): $MarkdownTextFragment
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTextFragment$QuoteContext$Type = ($MarkdownTextFragment$QuoteContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTextFragment$QuoteContext_ = $MarkdownTextFragment$QuoteContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu" {
import {$ContextMenu$ClickableContextMenuEntry, $ContextMenu$ClickableContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$ContextMenu$SeparatorContextMenuEntry, $ContextMenu$SeparatorContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$SeparatorContextMenuEntry"
import {$ContextMenu$ClickableContextMenuEntry$ClickAction, $ContextMenu$ClickableContextMenuEntry$ClickAction$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry$ClickAction"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ContextMenu$ContextMenuEntry, $ContextMenu$ContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$ILocalizedValueCycle, $ILocalizedValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$ILocalizedValueCycle"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ContextMenu$ValueCycleContextMenuEntry, $ContextMenu$ValueCycleContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ValueCycleContextMenuEntry"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ContextMenu$SubMenuOpeningSide, $ContextMenu$SubMenuOpeningSide$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$SubMenuOpeningSide"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ContextMenu$SubMenuContextMenuEntry, $ContextMenu$SubMenuContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$SubMenuContextMenuEntry"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"

export class $ContextMenu implements $Renderable, $GuiEventListener, $NarratableEntry, $NavigatableWidget {

constructor()

public "isOpen"(): boolean
public "addEntry"<T extends $ContextMenu$ContextMenuEntry<(any)>>(arg0: T): T
public "getEntries"(): $List<($ContextMenu$ContextMenuEntry<(any)>)>
public "getEntry"(arg0: string): $ContextMenu$ContextMenuEntry<(any)>
public "removeEntry"(arg0: string): $ContextMenu
public "setScale"(arg0: float): $ContextMenu
public "setShadow"(arg0: boolean): $ContextMenu
public "getSubMenuOpeningSide"(): $ContextMenu$SubMenuOpeningSide
public "addSubMenuEntryBefore"(arg0: string, arg1: string, arg2: $Component$Type, arg3: $ContextMenu$Type): $ContextMenu$SubMenuContextMenuEntry
public "addSubMenuEntryAfter"(arg0: string, arg1: string, arg2: $Component$Type, arg3: $ContextMenu$Type): $ContextMenu$SubMenuContextMenuEntry
public "addValueCycleEntryBefore"<T>(arg0: string, arg1: string, arg2: $ILocalizedValueCycle$Type<(T)>): $ContextMenu$ValueCycleContextMenuEntry<(T)>
public "getScaledBorderThickness"(): float
public "setSubMenuOpeningSide"(arg0: $ContextMenu$SubMenuOpeningSide$Type): $ContextMenu
public "isUserNavigatingInSubMenu"(): boolean
public "addValueCycleEntryAt"<T>(arg0: integer, arg1: string, arg2: $ILocalizedValueCycle$Type<(T)>): $ContextMenu$ValueCycleContextMenuEntry<(T)>
public "setKeepDistanceToEdges"(arg0: boolean): $ContextMenu
public "setForceSideSubMenus"(arg0: boolean): $ContextMenu
public "addValueCycleEntryAfter"<T>(arg0: string, arg1: string, arg2: $ILocalizedValueCycle$Type<(T)>): $ContextMenu$ValueCycleContextMenuEntry<(T)>
public "isKeepDistanceToEdges"(): boolean
public "isForceSideSubMenus"(): boolean
public "getScaledHeightWithBorder"(): float
public "getScaledWidthWithBorder"(): float
public "getY"(): float
public "openMenuAtMouse"(): $ContextMenu
public "openMenuAtMouse"(arg0: $List$Type<(string)>): $ContextMenu
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "isNavigatable"(): boolean
public "setFocused"(arg0: boolean): void
public "getEntryIndex"(arg0: string): integer
public "addEntryAfter"<T extends $ContextMenu$ContextMenuEntry<(any)>>(arg0: string, arg1: T): T
public "addEntryBefore"<T extends $ContextMenu$ContextMenuEntry<(any)>>(arg0: string, arg1: T): T
public "addEntryAt"<T extends $ContextMenu$ContextMenuEntry<(any)>>(arg0: integer, arg1: T): T
public "isForceUIScale"(): boolean
public "setForceUIScale"(arg0: boolean): $ContextMenu
public "hasEntry"(arg0: string): boolean
public "getX"(): float
public "isHovered"(): boolean
public "getWidth"(): float
public "getHeight"(): float
public static "stackContextMenus"(arg0: $List$Type<($ContextMenu$Type)>): $ContextMenu
public static "stackContextMenus"(...arg0: ($ContextMenu$Type)[]): $ContextMenu
public "getScale"(): float
public "setForceRawXY"(arg0: boolean): $ContextMenu
public "openMenuAt"(arg0: float, arg1: float, arg2: $List$Type<(string)>): $ContextMenu
public "openMenuAt"(arg0: float, arg1: float): $ContextMenu
public "setForceSide"(arg0: boolean): $ContextMenu
public "hasShadow"(): boolean
public "getScaledHeight"(): float
public "addSubMenuEntryAt"(arg0: integer, arg1: string, arg2: $Component$Type, arg3: $ContextMenu$Type): $ContextMenu$SubMenuContextMenuEntry
public "isSubMenu"(): boolean
public "getScaledWidth"(): float
public "isSubMenuHovered"(): boolean
public "isForceRawXY"(): boolean
public "closeSubMenus"(): $ContextMenu
public "isForceSide"(): boolean
public "isSubMenuOpen"(): boolean
public "getParentEntry"(): $ContextMenu$SubMenuContextMenuEntry
public "closeMenu"(): $ContextMenu
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isForceDefaultTooltipStyle"(): boolean
public "setForceDefaultTooltipStyle"(arg0: boolean): $ContextMenu
public "getBorderThickness"(): float
public "getWidthWithBorder"(): float
public "addValueCycleEntry"<T>(arg0: string, arg1: $ILocalizedValueCycle$Type<(T)>): $ContextMenu$ValueCycleContextMenuEntry<(T)>
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "isFocused"(): boolean
public "addClickableEntryBefore"(arg0: string, arg1: string, arg2: $Component$Type, arg3: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type): $ContextMenu$ClickableContextMenuEntry<(any)>
public "addClickableEntryAt"(arg0: integer, arg1: string, arg2: $Component$Type, arg3: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type): $ContextMenu$ClickableContextMenuEntry<(any)>
public "addSeparatorEntryBefore"(arg0: string, arg1: string): $ContextMenu$SeparatorContextMenuEntry
public "addClickableEntryAfter"(arg0: string, arg1: string, arg2: $Component$Type, arg3: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type): $ContextMenu$ClickableContextMenuEntry<(any)>
public "addSeparatorEntryAt"(arg0: integer, arg1: string): $ContextMenu$SeparatorContextMenuEntry
public "addSeparatorEntryAfter"(arg0: string, arg1: string): $ContextMenu$SeparatorContextMenuEntry
public "getHeightWithBorder"(): float
public "setNavigatable"(arg0: boolean): void
public "clearEntries"(): $ContextMenu
public "addSubMenuEntry"(arg0: string, arg1: $Component$Type, arg2: $ContextMenu$Type): $ContextMenu$SubMenuContextMenuEntry
public "addClickableEntry"(arg0: string, arg1: $Component$Type, arg2: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type): $ContextMenu$ClickableContextMenuEntry<(any)>
public "addSeparatorEntry"(arg0: string): $ContextMenu$SeparatorContextMenuEntry
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "isUserNavigatingInMenu"(): boolean
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getRectangle"(): $ScreenRectangle
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "isActive"(): boolean
public "getTabOrderGroup"(): integer
get "open"(): boolean
get "entries"(): $List<($ContextMenu$ContextMenuEntry<(any)>)>
set "scale"(value: float)
set "shadow"(value: boolean)
get "subMenuOpeningSide"(): $ContextMenu$SubMenuOpeningSide
get "scaledBorderThickness"(): float
set "subMenuOpeningSide"(value: $ContextMenu$SubMenuOpeningSide$Type)
get "userNavigatingInSubMenu"(): boolean
set "keepDistanceToEdges"(value: boolean)
set "forceSideSubMenus"(value: boolean)
get "keepDistanceToEdges"(): boolean
get "forceSideSubMenus"(): boolean
get "scaledHeightWithBorder"(): float
get "scaledWidthWithBorder"(): float
get "y"(): float
get "navigatable"(): boolean
set "focused"(value: boolean)
get "forceUIScale"(): boolean
set "forceUIScale"(value: boolean)
get "x"(): float
get "hovered"(): boolean
get "width"(): float
get "height"(): float
get "scale"(): float
set "forceRawXY"(value: boolean)
set "forceSide"(value: boolean)
get "scaledHeight"(): float
get "subMenu"(): boolean
get "scaledWidth"(): float
get "subMenuHovered"(): boolean
get "forceRawXY"(): boolean
get "forceSide"(): boolean
get "subMenuOpen"(): boolean
get "parentEntry"(): $ContextMenu$SubMenuContextMenuEntry
get "forceDefaultTooltipStyle"(): boolean
set "forceDefaultTooltipStyle"(value: boolean)
get "borderThickness"(): float
get "widthWithBorder"(): float
get "focused"(): boolean
get "heightWithBorder"(): float
set "navigatable"(value: boolean)
get "focusable"(): boolean
set "focusable"(value: boolean)
get "userNavigatingInMenu"(): boolean
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "active"(): boolean
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$Type = ($ContextMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu_ = $ContextMenu$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsElementHoveredRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsElementHoveredRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsElementHoveredRequirement$Type = ($IsElementHoveredRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsElementHoveredRequirement_ = $IsElementHoveredRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $EditorElementSettings {

constructor()

public "shouldHideInsteadOfDestroy"(): boolean
public "setDelayable"(arg0: boolean): void
public "setDestroyable"(arg0: boolean): void
public "setFadeable"(arg0: boolean): void
public "isStretchable"(): boolean
public "isCopyable"(): boolean
public "isOrderable"(): boolean
public "isDestroyable"(): boolean
public "isDelayable"(): boolean
public "isResizeable"(): boolean
public "setResizeable"(arg0: boolean): void
public "setMovable"(arg0: boolean): void
public "setOrderable"(arg0: boolean): void
public "setStretchable"(arg0: boolean): void
public "setCopyable"(arg0: boolean): void
public "setVanillaAnchorPointAllowed"(arg0: boolean): void
public "setLoadingRequirementsEnabled"(arg0: boolean): void
public "isMovable"(): boolean
public "isElementAnchorPointAllowed"(): boolean
public "isAdvancedPositioningSupported"(): boolean
public "isIdentifierCopyable"(): boolean
public "isAnchorPointChangeable"(): boolean
public "isLoadingRequirementsEnabled"(): boolean
public "isVanillaAnchorPointAllowed"(): boolean
public "isAdvancedSizingSupported"(): boolean
public "setAnchorPointChangeable"(arg0: boolean): void
public "setAdvancedPositioningSupported"(arg0: boolean): void
public "setAdvancedSizingSupported"(arg0: boolean): void
public "setHideInsteadOfDestroy"(arg0: boolean): void
public "setResizeableX"(arg0: boolean): void
public "isResizeableY"(): boolean
public "setResizeableY"(arg0: boolean): void
public "settingsChanged"(): void
public "isFadeable"(): boolean
public "isResizeableX"(): boolean
public "setElementAnchorPointAllowed"(arg0: boolean): void
public "setIdentifierCopyable"(arg0: boolean): void
public "setSkipReInitAfterSettingsChanged"(arg0: boolean): void
set "delayable"(value: boolean)
set "destroyable"(value: boolean)
set "fadeable"(value: boolean)
get "stretchable"(): boolean
get "copyable"(): boolean
get "orderable"(): boolean
get "destroyable"(): boolean
get "delayable"(): boolean
get "resizeable"(): boolean
set "resizeable"(value: boolean)
set "movable"(value: boolean)
set "orderable"(value: boolean)
set "stretchable"(value: boolean)
set "copyable"(value: boolean)
set "vanillaAnchorPointAllowed"(value: boolean)
set "loadingRequirementsEnabled"(value: boolean)
get "movable"(): boolean
get "elementAnchorPointAllowed"(): boolean
get "advancedPositioningSupported"(): boolean
get "identifierCopyable"(): boolean
get "anchorPointChangeable"(): boolean
get "loadingRequirementsEnabled"(): boolean
get "vanillaAnchorPointAllowed"(): boolean
get "advancedSizingSupported"(): boolean
set "anchorPointChangeable"(value: boolean)
set "advancedPositioningSupported"(value: boolean)
set "advancedSizingSupported"(value: boolean)
set "hideInsteadOfDestroy"(value: boolean)
set "resizeableX"(value: boolean)
get "resizeableY"(): boolean
set "resizeableY"(value: boolean)
get "fadeable"(): boolean
get "resizeableX"(): boolean
set "elementAnchorPointAllowed"(value: boolean)
set "identifierCopyable"(value: boolean)
set "skipReInitAfterSettingsChanged"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditorElementSettings$Type = ($EditorElementSettings);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditorElementSettings_ = $EditorElementSettings$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v2/$ListSlider" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractExtendedSlider, $AbstractExtendedSlider$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v2/$AbstractExtendedSlider"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ListSlider<T> extends $AbstractExtendedSlider {
static readonly "SLIDER_LOCATION": $ResourceLocation
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Component$Type, arg5: $List$Type<(T)>, arg6: integer)

public "getSelectedIndex"(): integer
public "getSelectedListValue"(): T
public "getValueDisplayText"(): string
public "setSelectedIndex"(arg0: double): $ListSlider<(T)>
public "setListValueStringSupplier"(arg0: $ConsumingSupplier$Type<(T), (string)>): void
get "selectedIndex"(): integer
get "selectedListValue"(): T
get "valueDisplayText"(): string
set "selectedIndex"(value: double)
set "listValueStringSupplier"(value: $ConsumingSupplier$Type<(T), (string)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListSlider$Type<T> = ($ListSlider<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListSlider_<T> = $ListSlider$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorHistory" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $TextEditorHistory {


public "stepForward"(): void
public "stepBack"(): void
public "saveSnapshot"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEditorHistory$Type = ($TextEditorHistory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEditorHistory_ = $TextEditorHistory$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/brackets/$HighlightSquareBracketsFormattingRule" {
import {$HighlightBracketsFormattingRuleBase, $HighlightBracketsFormattingRuleBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/brackets/$HighlightBracketsFormattingRuleBase"

export class $HighlightSquareBracketsFormattingRule extends $HighlightBracketsFormattingRuleBase {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HighlightSquareBracketsFormattingRule$Type = ($HighlightSquareBracketsFormattingRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HighlightSquareBracketsFormattingRule_ = $HighlightSquareBracketsFormattingRule$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArrayPathToken" {
import {$PathToken, $PathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken"

export class $ArrayPathToken extends $PathToken {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrayPathToken$Type = ($ArrayPathToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrayPathToken_ = $ArrayPathToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$AudioElement$PlayMode, $AudioElement$PlayMode$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioElement$PlayMode"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AudioElement$AudioInstance, $AudioElement$AudioInstance$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioElement$AudioInstance"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"

export class $AudioElement extends $AbstractElement {
 "audios": $List<($AudioElement$AudioInstance)>
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "renderTick"(): void
public "setLooping"(arg0: boolean, arg1: boolean): void
public "setPlayMode"(arg0: $AudioElement$PlayMode$Type, arg1: boolean): void
public "setSoundSource"(arg0: $SoundSource$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setVolume"(arg0: float): void
public "getVolume"(): float
public "getPlayMode"(): $AudioElement$PlayMode
public "getSoundSource"(): $SoundSource
public "isLooping"(): boolean
public "skipToNextAudio"(arg0: boolean): void
public "clearCacheForElement"(): void
public "resetAudioElementKeepAudios"(): void
set "soundSource"(value: $SoundSource$Type)
set "volume"(value: float)
get "volume"(): float
get "playMode"(): $AudioElement$PlayMode
get "soundSource"(): $SoundSource
get "looping"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AudioElement$Type = ($AudioElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AudioElement_ = $AudioElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/ex/$ConvertException" {
import {$RuntimeException, $RuntimeException$Type} from "packages/java/lang/$RuntimeException"

export class $ConvertException extends $RuntimeException {

constructor()
constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConvertException$Type = ($ConvertException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConvertException_ = $ConvertException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollbar/$ScrollBarHandler" {
import {$ScreenMouseScrollEvent$Pre, $ScreenMouseScrollEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/screen/$ScreenMouseScrollEvent$Pre"
import {$ClientTickEvent$Post, $ClientTickEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Post"
import {$ScrollBar, $ScrollBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollbar/$ScrollBar"

export class $ScrollBarHandler {

constructor()

public static "handleScrollBar"(arg0: $ScrollBar$Type): void
public "onMouseScrollPre"(arg0: $ScreenMouseScrollEvent$Pre$Type): void
public "onClientTick"(arg0: $ClientTickEvent$Post$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollBarHandler$Type = ($ScrollBarHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollBarHandler_ = $ScrollBarHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorHistory" {
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$LayoutEditorHistory$Snapshot, $LayoutEditorHistory$Snapshot$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorHistory$Snapshot"

export class $LayoutEditorHistory {

constructor(arg0: $LayoutEditorScreen$Type)

public "stepForward"(): void
public "stepBack"(): void
public "createSnapshot"(): $LayoutEditorHistory$Snapshot
public "setPreventSnapshotSaving"(arg0: boolean): void
public "saveSnapshot"(): void
public "saveSnapshot"(arg0: $LayoutEditorHistory$Snapshot$Type): void
set "preventSnapshotSaving"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutEditorHistory$Type = ($LayoutEditorHistory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutEditorHistory_ = $LayoutEditorHistory$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextLine$SingleLineCodeBlockPart" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $MarkdownTextLine$SingleLineCodeBlockPart {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTextLine$SingleLineCodeBlockPart$Type = ($MarkdownTextLine$SingleLineCodeBlockPart);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTextLine$SingleLineCodeBlockPart_ = $MarkdownTextLine$SingleLineCodeBlockPart$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$PerformanceUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PerformanceUtils {

constructor()

public static "getOsCpuUsage"(): double
public static "getJvmCpuUsage"(): double
get "osCpuUsage"(): double
get "jvmCpuUsage"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PerformanceUtils$Type = ($PerformanceUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PerformanceUtils_ = $PerformanceUtils$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/$ContextMenu" {
import {$IMenu, $IMenu$Type} from "packages/de/keksuccino/konkrete/gui/content/$IMenu"
import {$AdvancedButton, $AdvancedButton$Type} from "packages/de/keksuccino/konkrete/gui/content/$AdvancedButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ContextMenu implements $IMenu {
 "menuScale": float

constructor(arg0: integer, arg1: integer, arg2: integer)

public "isOpen"(): boolean
public "setWidth"(arg0: integer): void
public "setUseable"(arg0: boolean): void
public "isUseable"(): boolean
public "setAlignment"(arg0: boolean, arg1: boolean): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
public "isLeftClicked"(): boolean
public "isHovered"(): boolean
public "getWidth"(): integer
public "openMenuAt"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): void
public "openMenuAt"(arg0: integer, arg1: integer): void
public "getScaledWidth"(): integer
public "closeMenu"(): void
public "addChild"(arg0: $ContextMenu$Type): void
public "removeChild"(arg0: $ContextMenu$Type): void
public "setParentButton"(arg0: $AdvancedButton$Type): void
public "setAutoAlignment"(arg0: boolean): void
public "isRenderedUp"(): boolean
public "autoCloseChilds"(arg0: boolean): void
public "getLastHeight"(): integer
public "isRenderedLeft"(): boolean
public "getParentButton"(): $AdvancedButton
public "setButtonHeight"(arg0: integer): void
public "closeChilds"(): void
public "setAlwaysOnTop"(arg0: boolean): void
public "setAutoclose"(arg0: boolean): void
public "addContent"(arg0: $AdvancedButton$Type): void
/**
 * 
 * @deprecated
 */
public "isHoveredOrFocused"(): boolean
get "open"(): boolean
set "width"(value: integer)
set "useable"(value: boolean)
get "useable"(): boolean
get "leftClicked"(): boolean
get "hovered"(): boolean
get "width"(): integer
get "scaledWidth"(): integer
set "parentButton"(value: $AdvancedButton$Type)
set "autoAlignment"(value: boolean)
get "renderedUp"(): boolean
get "lastHeight"(): integer
get "renderedLeft"(): boolean
get "parentButton"(): $AdvancedButton
set "buttonHeight"(value: integer)
set "alwaysOnTop"(value: boolean)
set "autoclose"(value: boolean)
get "hoveredOrFocused"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$Type = ($ContextMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu_ = $ContextMenu$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder" {
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractDeepEditorElement, $AbstractDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepEditorElement"
import {$ElementStacker, $ElementStacker$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementStacker"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

export class $DeepElementBuilder<D extends $DeepScreenCustomizationLayer, E extends $AbstractDeepElement, L extends $AbstractDeepEditorElement> extends $ElementBuilder<(E), (L)> implements $ElementStacker<(E)> {
readonly "layer": D

constructor(arg0: string, arg1: D)

public "stackElements"(arg0: E, arg1: E): void
public "stackElementsSingleInternal"(arg0: $AbstractElement$Type, arg1: $AbstractElement$Type): void
public "stackElementsInternal"(arg0: $AbstractElement$Type, ...arg1: ($AbstractElement$Type)[]): E
public "serializeElementInternal"(arg0: $AbstractElement$Type): $SerializedElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeepElementBuilder$Type<D, E, L> = ($DeepElementBuilder<(D), (E), (L)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeepElementBuilder_<D, E, L> = $DeepElementBuilder$Type<(D), (E), (L)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/$ListUtils" {
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ListUtils {

constructor()

public static "of"<T>(...arg0: (T)[]): $List<(T)>
public static "getLast"<T>(arg0: $List$Type<(T)>): T
public static "mergeLists"<T>(...arg0: ($List$Type<(T)>)[]): $List<(T)>
/**
 * 
 * @deprecated
 */
public static "filterList"<T>(arg0: $List$Type<(T)>, arg1: $ConsumingSupplier$Type<(T), (boolean)>): $List<(T)>
public static "contentEqualIgnoreOrder"<T>(arg0: $List$Type<(T)>, arg1: $List$Type<(T)>): boolean
public static "allInListEqual"(arg0: $List$Type<(any)>): boolean
public static "offsetIndexOf"<T>(arg0: $List$Type<(T)>, arg1: T, arg2: integer): void
public static "changeIndexOf"<T>(arg0: $List$Type<(T)>, arg1: T, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListUtils$Type = ($ListUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListUtils_ = $ListUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/$MenuBackgrounds" {
import {$AnimationMenuBackgroundBuilder, $AnimationMenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/backgrounds/animation/$AnimationMenuBackgroundBuilder"
import {$PanoramaMenuBackgroundBuilder, $PanoramaMenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/backgrounds/panorama/$PanoramaMenuBackgroundBuilder"
import {$ImageMenuBackgroundBuilder, $ImageMenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/backgrounds/image/$ImageMenuBackgroundBuilder"
import {$SlideshowMenuBackgroundBuilder, $SlideshowMenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/backgrounds/slideshow/$SlideshowMenuBackgroundBuilder"

export class $MenuBackgrounds {
static readonly "IMAGE": $ImageMenuBackgroundBuilder
static readonly "ANIMATION": $AnimationMenuBackgroundBuilder
static readonly "SLIDESHOW": $SlideshowMenuBackgroundBuilder
static readonly "PANORAMA": $PanoramaMenuBackgroundBuilder

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBackgrounds$Type = ($MenuBackgrounds);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBackgrounds_ = $MenuBackgrounds$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ValueCycleContextMenuEntry" {
import {$ContextMenu$ClickableContextMenuEntry, $ContextMenu$ClickableContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry"
import {$ILocalizedValueCycle, $ILocalizedValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$ILocalizedValueCycle"
import {$ContextMenu$ClickableContextMenuEntry$ClickAction, $ContextMenu$ClickableContextMenuEntry$ClickAction$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ClickableContextMenuEntry$ClickAction"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $ContextMenu$ValueCycleContextMenuEntry<V> extends $ContextMenu$ClickableContextMenuEntry<($ContextMenu$ValueCycleContextMenuEntry<(V)>)> {

constructor(arg0: string, arg1: $ContextMenu$Type, arg2: $ILocalizedValueCycle$Type<(V)>)

public "copy"(): $ContextMenu$ValueCycleContextMenuEntry<(V)>
public "setClickAction"(arg0: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type): $ContextMenu$ValueCycleContextMenuEntry<(V)>
public "getValueCycle"(): $ILocalizedValueCycle<(V)>
set "clickAction"(value: $ContextMenu$ClickableContextMenuEntry$ClickAction$Type)
get "valueCycle"(): $ILocalizedValueCycle<(V)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$ValueCycleContextMenuEntry$Type<V> = ($ContextMenu$ValueCycleContextMenuEntry<(V)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$ValueCycleContextMenuEntry_<V> = $ContextMenu$ValueCycleContextMenuEntry$Type<(V)>;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/contexts/$PauseScreenWidgetIdentificationContext" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$WidgetIdentificationContext, $WidgetIdentificationContext$Type} from "packages/de/keksuccino/fancymenu/customization/widget/identification/identificationcontext/$WidgetIdentificationContext"

export class $PauseScreenWidgetIdentificationContext extends $WidgetIdentificationContext {

constructor()

public "getTargetScreen"(): $Class<(any)>
get "targetScreen"(): $Class<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PauseScreenWidgetIdentificationContext$Type = ($PauseScreenWidgetIdentificationContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PauseScreenWidgetIdentificationContext_ = $PauseScreenWidgetIdentificationContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$RendererWidget" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$UniqueWidget, $UniqueWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$UniqueWidget"
import {$RendererWidget$RendererWidgetBody, $RendererWidget$RendererWidgetBody$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$RendererWidget$RendererWidgetBody"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"

export class $RendererWidget extends $AbstractWidget implements $UniqueWidget, $NavigatableWidget {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $RendererWidget$RendererWidgetBody$Type)

public "isNavigatable"(): boolean
public "setNavigatable"(arg0: boolean): void
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "playDownSound"(arg0: $SoundManager$Type): void
public "getWidgetIdentifierFancyMenu"(): string
public "setBody"(arg0: $RendererWidget$RendererWidgetBody$Type): $RendererWidget
get "navigatable"(): boolean
set "navigatable"(value: boolean)
get "focusable"(): boolean
set "focusable"(value: boolean)
get "widgetIdentifierFancyMenu"(): string
set "body"(value: $RendererWidget$RendererWidgetBody$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RendererWidget$Type = ($RendererWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RendererWidget_ = $RendererWidget$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinAbstractWidget" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export interface $IMixinAbstractWidget {

 "getAlphaFancyMenu"(): float
 "setHeightFancyMenu"(arg0: integer): void
 "setMessageFieldFancyMenu"(arg0: $Component$Type): void
}

export namespace $IMixinAbstractWidget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinAbstractWidget$Type = ($IMixinAbstractWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinAbstractWidget_ = $IMixinAbstractWidget$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$Option" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Option extends $Enum<($Option)> {
static readonly "DEFAULT_PATH_LEAF_TO_NULL": $Option
static readonly "ALWAYS_RETURN_LIST": $Option
static readonly "AS_PATH_LIST": $Option
static readonly "SUPPRESS_EXCEPTIONS": $Option
static readonly "REQUIRE_PROPERTIES": $Option


public static "values"(): ($Option)[]
public static "valueOf"(arg0: string): $Option
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Option$Type = (("require_properties") | ("always_return_list") | ("as_path_list") | ("default_path_leaf_to_null") | ("suppress_exceptions")) | ($Option);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Option_ = $Option$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStreamAware" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"

export interface $JSONStreamAware {

 "writeJSONString"(arg0: $Appendable$Type): void

(arg0: $Appendable$Type): void
}

export namespace $JSONStreamAware {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONStreamAware$Type = ($JSONStreamAware);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONStreamAware_ = $JSONStreamAware$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ScreenHeightPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ScreenHeightPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenHeightPlaceholder$Type = ($ScreenHeightPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenHeightPlaceholder_ = $ScreenHeightPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeMinuteRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsRealTimeMinuteRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsRealTimeMinuteRequirement$Type = ($IsRealTimeMinuteRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsRealTimeMinuteRequirement_ = $IsRealTimeMinuteRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/button/vanillawidget/$VanillaWidgetEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AnchorPointOverlay$AnchorPointArea, $AnchorPointOverlay$AnchorPointArea$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$AnchorPointOverlay$AnchorPointArea"
import {$HideableElement, $HideableElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$HideableElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$ButtonEditorElement, $ButtonEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonEditorElement"

export class $VanillaWidgetEditorElement extends $ButtonEditorElement implements $HideableElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "isHidden"(): boolean
public "init"(): void
public "isMouseOver"(arg0: double, arg1: double): boolean
public "isHovered"(): boolean
public "isCopyrightButton"(): boolean
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "setSelected"(arg0: boolean): void
public "setHidden"(arg0: boolean): void
public "setAnchorPointViaOverlay"(arg0: $AnchorPointOverlay$AnchorPointArea$Type, arg1: integer, arg2: integer): void
get "hidden"(): boolean
get "hovered"(): boolean
get "copyrightButton"(): boolean
set "selected"(value: boolean)
set "hidden"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaWidgetEditorElement$Type = ($VanillaWidgetEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaWidgetEditorElement_ = $VanillaWidgetEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/layers/$PlayerEntityShoulderParrotLayer" {
import {$PlayerEntityProperties, $PlayerEntityProperties$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityProperties"
import {$PlayerEntityElementRenderer, $PlayerEntityElementRenderer$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityElementRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$PlayerEntityRenderLayer, $PlayerEntityRenderLayer$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/layers/$PlayerEntityRenderLayer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PlayerEntityShoulderParrotLayer extends $PlayerEntityRenderLayer {
readonly "properties": $PlayerEntityProperties

constructor(arg0: $PlayerEntityElementRenderer$Type, arg1: $EntityModelSet$Type, arg2: $PlayerEntityProperties$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Entity$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityShoulderParrotLayer$Type = ($PlayerEntityShoulderParrotLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityShoulderParrotLayer_ = $PlayerEntityShoulderParrotLayer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/$PacketHandlerForge" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$PacketDistributor$PacketTarget, $PacketDistributor$PacketTarget$Type} from "packages/net/minecraftforge/network/$PacketDistributor$PacketTarget"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$SimpleChannel, $SimpleChannel$Type} from "packages/net/minecraftforge/network/simple/$SimpleChannel"

export class $PacketHandlerForge {
static readonly "PROTOCOL_VERSION": string
static readonly "INSTANCE": $SimpleChannel

constructor()

public static "send"(arg0: $PacketDistributor$PacketTarget$Type, arg1: any): void
public static "registerMessage"<MSG>(arg0: $Class$Type<(MSG)>, arg1: $BiConsumer$Type<(MSG), ($FriendlyByteBuf$Type)>, arg2: $Function$Type<($FriendlyByteBuf$Type), (MSG)>, arg3: $BiConsumer$Type<(MSG), ($Supplier$Type<($NetworkEvent$Context$Type)>)>): void
public static "sendToServer"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketHandlerForge$Type = ($PacketHandlerForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketHandlerForge_ = $PacketHandlerForge$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$ParseContext" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$DocumentContext, $DocumentContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$DocumentContext"
import {$URL, $URL$Type} from "packages/java/net/$URL"

export interface $ParseContext {

/**
 * 
 * @deprecated
 */
 "parse"(arg0: $URL$Type): $DocumentContext
 "parse"(arg0: $File$Type): $DocumentContext
 "parse"(arg0: $InputStream$Type, arg1: string): $DocumentContext
 "parse"(arg0: string): $DocumentContext
 "parse"(arg0: any): $DocumentContext
 "parse"(arg0: $InputStream$Type): $DocumentContext
 "parseUtf8"(arg0: (byte)[]): $DocumentContext
}

export namespace $ParseContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParseContext$Type = ($ParseContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParseContext_ = $ParseContext$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$OffsetDateTimeNode" {
import {$ValueNodes$StringNode, $ValueNodes$StringNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$StringNode"
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$OffsetDateTime, $OffsetDateTime$Type} from "packages/java/time/$OffsetDateTime"

export class $ValueNodes$OffsetDateTimeNode extends $ValueNode {


public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "getDate"(): $OffsetDateTime
public "asStringNode"(): $ValueNodes$StringNode
public "asOffsetDateTimeNode"(): $ValueNodes$OffsetDateTimeNode
public "isOffsetDateTimeNode"(): boolean
get "date"(): $OffsetDateTime
get "offsetDateTimeNode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$OffsetDateTimeNode$Type = ($ValueNodes$OffsetDateTimeNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$OffsetDateTimeNode_ = $ValueNodes$OffsetDateTimeNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ApngTexture" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$File, $File$Type} from "packages/java/io/$File"
import {$AspectRatio, $AspectRatio$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$AspectRatio"
import {$ApngTexture$ApngFrame, $ApngTexture$ApngFrame$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ApngTexture$ApngFrame"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$PlayableResource, $PlayableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$PlayableResource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Argb8888BitmapSequence, $Argb8888BitmapSequence$Type} from "packages/net/ellerton/japng/argb8888/$Argb8888BitmapSequence"
import {$ApngTexture$DecodedApngImage, $ApngTexture$DecodedApngImage$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ApngTexture$DecodedApngImage"

export class $ApngTexture implements $ITexture, $PlayableResource {


public static "of"(arg0: $InputStream$Type): $ApngTexture
public static "of"(arg0: $InputStream$Type, arg1: string, arg2: $ApngTexture$Type): $ApngTexture
public "stop"(): void
public "close"(): void
public static "location"(arg0: $ResourceLocation$Type): $ApngTexture
public static "location"(arg0: $ResourceLocation$Type, arg1: $ApngTexture$Type): $ApngTexture
public "open"(): $InputStream
public "reset"(): void
public static "local"(arg0: $File$Type): $ApngTexture
public static "local"(arg0: $File$Type, arg1: $ApngTexture$Type): $ApngTexture
public "isReady"(): boolean
public "isClosed"(): boolean
public "play"(): void
public "getAspectRatio"(): $AspectRatio
public "isPlaying"(): boolean
public static "web"(arg0: string): $ApngTexture
public static "web"(arg0: string, arg1: $ApngTexture$Type): $ApngTexture
public "isPaused"(): boolean
public "getWidth"(): integer
public "pause"(): void
public "getHeight"(): integer
public "isLoadingFailed"(): boolean
public "isLoadingCompleted"(): boolean
public "getResourceLocation"(): $ResourceLocation
public static "deliverApngFrames"(arg0: $Argb8888BitmapSequence$Type, arg1: string, arg2: boolean, arg3: $Consumer$Type<($ApngTexture$ApngFrame$Type)>): void
public static "decodeApng"(arg0: $Argb8888BitmapSequence$Type): $ApngTexture$DecodedApngImage
public static "decodeApng"(arg0: $InputStream$Type, arg1: string): $ApngTexture$DecodedApngImage
public "waitForLoadingCompletedOrFailed"(arg0: long): void
public "waitForReady"(arg0: long): void
get "ready"(): boolean
get "closed"(): boolean
get "aspectRatio"(): $AspectRatio
get "playing"(): boolean
get "paused"(): boolean
get "width"(): integer
get "height"(): integer
get "loadingFailed"(): boolean
get "loadingCompleted"(): boolean
get "resourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ApngTexture$Type = ($ApngTexture);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ApngTexture_ = $ApngTexture$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$RenderScreenEvent" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderScreenEvent extends $EventBase {


public "isCancelable"(): boolean
public "getGraphics"(): $GuiGraphics
public "addWidget"<T extends ($GuiEventListener) & ($NarratableEntry)>(arg0: T): void
public "getMouseX"(): integer
public "getPartial"(): float
public "getRenderables"(): $List<($Renderable)>
public "getMouseY"(): integer
public "getNarratables"(): $List<($NarratableEntry)>
public "getWidgets"(): $List<($GuiEventListener)>
public "getScreen"(): $Screen
public "addRenderableWidget"<T extends ($GuiEventListener) & ($NarratableEntry) & ($Renderable)>(arg0: T): void
get "cancelable"(): boolean
get "graphics"(): $GuiGraphics
get "mouseX"(): integer
get "partial"(): float
get "renderables"(): $List<($Renderable)>
get "mouseY"(): integer
get "narratables"(): $List<($NarratableEntry)>
get "widgets"(): $List<($GuiEventListener)>
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderScreenEvent$Type = ($RenderScreenEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderScreenEvent_ = $RenderScreenEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/system/$IsOsMacOSRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsOsMacOSRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsOsMacOSRequirement$Type = ($IsOsMacOSRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsOsMacOSRequirement_ = $IsOsMacOSRequirement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ScanPathToken$Predicate" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ScanPathToken$Predicate {

 "matches"(arg0: any): boolean

(arg0: any): boolean
}

export namespace $ScanPathToken$Predicate {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScanPathToken$Predicate$Type = ($ScanPathToken$Predicate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScanPathToken$Predicate_ = $ScanPathToken$Predicate$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay$DebugOverlayLine" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$DebugOverlay$LinePosition, $DebugOverlay$LinePosition$Type} from "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay$LinePosition"

export class $DebugOverlay$DebugOverlayLine {


public "getPosition"(): $DebugOverlay$LinePosition
public "getIdentifier"(): string
public "setTextSupplier"(arg0: $ConsumingSupplier$Type<($DebugOverlay$DebugOverlayLine$Type), ($Component$Type)>): $DebugOverlay$DebugOverlayLine
public "setClickAction"(arg0: $Consumer$Type<($DebugOverlay$DebugOverlayLine$Type)>): $DebugOverlay$DebugOverlayLine
public "isHovered"(): boolean
public "setPosition"(arg0: $DebugOverlay$LinePosition$Type): $DebugOverlay$DebugOverlayLine
public "recentlyClicked"(): boolean
public "getTextSupplier"(): $ConsumingSupplier<($DebugOverlay$DebugOverlayLine), ($Component)>
get "position"(): $DebugOverlay$LinePosition
get "identifier"(): string
set "textSupplier"(value: $ConsumingSupplier$Type<($DebugOverlay$DebugOverlayLine$Type), ($Component$Type)>)
set "clickAction"(value: $Consumer$Type<($DebugOverlay$DebugOverlayLine$Type)>)
get "hovered"(): boolean
set "position"(value: $DebugOverlay$LinePosition$Type)
get "textSupplier"(): $ConsumingSupplier<($DebugOverlay$DebugOverlayLine), ($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugOverlay$DebugOverlayLine$Type = ($DebugOverlay$DebugOverlayLine);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugOverlay$DebugOverlayLine_ = $DebugOverlay$DebugOverlayLine$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeDayPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $RealtimeDayPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RealtimeDayPlaceholder$Type = ($RealtimeDayPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RealtimeDayPlaceholder_ = $RealtimeDayPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/cpu/$OsCpuUsagePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $OsCpuUsagePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OsCpuUsagePlaceholder$Type = ($OsCpuUsagePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OsCpuUsagePlaceholder_ = $OsCpuUsagePlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinAbstractSliderButton" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMixinAbstractSliderButton {

 "getCanChangeValueFancyMenu"(): boolean

(): boolean
}

export namespace $IMixinAbstractSliderButton {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinAbstractSliderButton$Type = ($IMixinAbstractSliderButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinAbstractSliderButton_ = $IMixinAbstractSliderButton$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsMenuTitleRequirement" {
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsMenuTitleRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "editValue"(arg0: $Screen$Type, arg1: $LoadingRequirementInstance$Type): void
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsMenuTitleRequirement$Type = ($IsMenuTitleRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsMenuTitleRequirement_ = $IsMenuTitleRequirement$Type;
}}
declare module "packages/de/keksuccino/konkrete/input/$KeyboardData" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $KeyboardData {
readonly "keycode": integer
readonly "scancode": integer
readonly "modfiers": integer

constructor(arg0: integer, arg1: integer, arg2: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyboardData$Type = ($KeyboardData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyboardData_ = $KeyboardData$Type;
}}
declare module "packages/de/keksuccino/melody/platform/$Services" {
import {$IPlatformCompatibilityLayer, $IPlatformCompatibilityLayer$Type} from "packages/de/keksuccino/melody/platform/services/$IPlatformCompatibilityLayer"
import {$IPlatformHelper, $IPlatformHelper$Type} from "packages/de/keksuccino/melody/platform/services/$IPlatformHelper"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $Services {
static readonly "PLATFORM": $IPlatformHelper
static readonly "COMPAT": $IPlatformCompatibilityLayer

constructor()

public static "load"<T>(arg0: $Class$Type<(T)>): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Services$Type = ($Services);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Services_ = $Services$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v2/$SliderElement$SliderType" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$LocalizedCycleEnum, $LocalizedCycleEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedCycleEnum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $SliderElement$SliderType extends $Enum<($SliderElement$SliderType)> implements $LocalizedCycleEnum<($SliderElement$SliderType)> {
static readonly "LIST": $SliderElement$SliderType
static readonly "INTEGER_RANGE": $SliderElement$SliderType
static readonly "DECIMAL_RANGE": $SliderElement$SliderType


public "getName"(): string
public static "values"(): ($SliderElement$SliderType)[]
public static "valueOf"(arg0: string): $SliderElement$SliderType
public static "getByName"(arg0: string): $SliderElement$SliderType
public "getLocalizationKeyBase"(): string
public "getCycleComponentStyle"(): $Style
public "cycle"(arg0: $SliderElement$SliderType$Type): $LocalizedGenericValueCycle<($SliderElement$SliderType)>
public "cycle"(): $LocalizedGenericValueCycle<($SliderElement$SliderType)>
public "getCycleComponent"(): $MutableComponent
public "getValueComponentStyle"(): $Style
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "localizationKeyBase"(): string
get "cycleComponentStyle"(): $Style
get "cycleComponent"(): $MutableComponent
get "valueComponentStyle"(): $Style
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliderElement$SliderType$Type = (("decimal_range") | ("list") | ("integer_range")) | ($SliderElement$SliderType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliderElement$SliderType_ = $SliderElement$SliderType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/system/$IsOsWindowsRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsOsWindowsRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsOsWindowsRequirement$Type = ($IsOsWindowsRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsOsWindowsRequirement_ = $IsOsWindowsRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityElementRenderer" {
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$PlayerEntityModel, $PlayerEntityModel$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityModel"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PlayerEntityProperties, $PlayerEntityProperties$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityProperties"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$PlayerRenderer, $PlayerRenderer$Type} from "packages/net/minecraft/client/renderer/entity/player/$PlayerRenderer"

export class $PlayerEntityElementRenderer extends $PlayerRenderer {
static readonly "ENTITY_MODEL_SET": $EntityModelSet
static readonly "RENDER_CONTEXT": $EntityRendererProvider$Context
readonly "properties": $PlayerEntityProperties
readonly "playerModel": $PlayerEntityModel
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: boolean)

public "getRenderOffset"(arg0: $AbstractClientPlayer$Type, arg1: float): $Vec3
public "getTextureLocation"(arg0: $AbstractClientPlayer$Type): $ResourceLocation
public "renderPlayerEntityItem"(arg0: double, arg1: double, arg2: double, arg3: float, arg4: float, arg5: $PoseStack$Type, arg6: $MultiBufferSource$Type, arg7: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityElementRenderer$Type = ($PlayerEntityElementRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityElementRenderer_ = $PlayerEntityElementRenderer$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/function/$Function" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Function {

constructor(arg0: string, arg1: integer)
constructor(arg0: string)

public "getName"(): string
public "apply"(...arg0: (double)[]): double
public static "isValidFunctionName"(arg0: string): boolean
public static "getAllowedFunctionCharacters"(): (character)[]
public "getNumArguments"(): integer
get "name"(): string
get "allowedFunctionCharacters"(): (character)[]
get "numArguments"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Function$Type = ($Function);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Function_ = $Function$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/input/$InputUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $InputUtils {

constructor()

public static "getKeyName"(arg0: integer, arg1: integer): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputUtils$Type = ($InputUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputUtils_ = $InputUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v1/$SliderElement$SliderType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SliderElement$SliderType extends $Enum<($SliderElement$SliderType)> {
static readonly "LIST": $SliderElement$SliderType
static readonly "RANGE": $SliderElement$SliderType


public "getName"(): string
public static "values"(): ($SliderElement$SliderType)[]
public static "valueOf"(arg0: string): $SliderElement$SliderType
public static "getByName"(arg0: string): $SliderElement$SliderType
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliderElement$SliderType$Type = (("range") | ("list")) | ($SliderElement$SliderType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliderElement$SliderType_ = $SliderElement$SliderType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$WidgetifiedScreen" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $WidgetifiedScreen extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $WidgetifiedScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetifiedScreen$Type = ($WidgetifiedScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetifiedScreen_ = $WidgetifiedScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/$FocuslessContainerEventHandler" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ContainerEventHandler, $ContainerEventHandler$Type} from "packages/net/minecraft/client/gui/components/events/$ContainerEventHandler"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"

export interface $FocuslessContainerEventHandler extends $ContainerEventHandler {

 "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
 "setFocused"(arg0: $GuiEventListener$Type): void
 "getFocused"(): $GuiEventListener
 "setFocused"(arg0: boolean): void
 "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
 "charTyped"(arg0: character, arg1: integer): boolean
 "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
 "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
 "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
 "getCurrentFocusPath"(): $ComponentPath
 "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
 "children"(): $List<(any)>
 "setDragging"(arg0: boolean): void
 "isDragging"(): boolean
 "getChildAt"(arg0: double, arg1: double): $Optional<($GuiEventListener)>
 "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
 "isFocused"(): boolean
 "magicalSpecialHackyFocus"(arg0: $GuiEventListener$Type): void
 "isMouseOver"(arg0: double, arg1: double): boolean
 "getRectangle"(): $ScreenRectangle
 "mouseMoved"(arg0: double, arg1: double): void
 "getTabOrderGroup"(): integer
}

export namespace $FocuslessContainerEventHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FocuslessContainerEventHandler$Type = ($FocuslessContainerEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FocuslessContainerEventHandler_ = $FocuslessContainerEventHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$RandomNumberPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $RandomNumberPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomNumberPlaceholder$Type = ($RandomNumberPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomNumberPlaceholder_ = $RandomNumberPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration" {
import {$Configuration$ConfigurationBuilder, $Configuration$ConfigurationBuilder$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration$ConfigurationBuilder"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$EvaluationListener, $EvaluationListener$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$EvaluationListener"
import {$MappingProvider, $MappingProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/mapper/$MappingProvider"
import {$Configuration$Defaults, $Configuration$Defaults$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration$Defaults"
import {$Option, $Option$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Option"
import {$JsonProvider, $JsonProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$JsonProvider"

export class $Configuration {


public "equals"(arg0: any): boolean
public static "builder"(): $Configuration$ConfigurationBuilder
public "getOptions"(): $Set<($Option)>
public "addOptions"(...arg0: ($Option$Type)[]): $Configuration
public "jsonProvider"(arg0: $JsonProvider$Type): $Configuration
public "jsonProvider"(): $JsonProvider
public "containsOption"(arg0: $Option$Type): boolean
public static "setDefaults"(arg0: $Configuration$Defaults$Type): void
public "setOptions"(...arg0: ($Option$Type)[]): $Configuration
public "setEvaluationListeners"(...arg0: ($EvaluationListener$Type)[]): $Configuration
public "getEvaluationListeners"(): $Collection<($EvaluationListener)>
public "addEvaluationListeners"(...arg0: ($EvaluationListener$Type)[]): $Configuration
public static "defaultConfiguration"(): $Configuration
public "mappingProvider"(): $MappingProvider
public "mappingProvider"(arg0: $MappingProvider$Type): $Configuration
get "options"(): $Set<($Option)>
set "defaults"(value: $Configuration$Defaults$Type)
set "options"(value: ($Option$Type)[])
set "evaluationListeners"(value: ($EvaluationListener$Type)[])
get "evaluationListeners"(): $Collection<($EvaluationListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Configuration$Type = ($Configuration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Configuration_ = $Configuration$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/audio/wav/$WavAudio" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$ALAudioClip, $ALAudioClip$Type} from "packages/de/keksuccino/melody/resources/audio/openal/$ALAudioClip"
import {$File, $File$Type} from "packages/java/io/$File"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"

export class $WavAudio implements $IAudio {


public static "of"(arg0: $InputStream$Type): $WavAudio
public static "of"(arg0: $InputStream$Type, arg1: string, arg2: $WavAudio$Type, arg3: $ALAudioClip$Type): $WavAudio
public "stop"(): void
public "close"(): void
public static "location"(arg0: $ResourceLocation$Type): $WavAudio
public static "location"(arg0: $ResourceLocation$Type, arg1: $WavAudio$Type): $WavAudio
public "open"(): $InputStream
public static "local"(arg0: $File$Type, arg1: $WavAudio$Type): $WavAudio
public static "local"(arg0: $File$Type): $WavAudio
public "isReady"(): boolean
public "isClosed"(): boolean
public "play"(): void
public "isPlaying"(): boolean
public "getClip"(): $ALAudioClip
public static "web"(arg0: string, arg1: $WavAudio$Type): $WavAudio
public static "web"(arg0: string): $WavAudio
public "isPaused"(): boolean
public "pause"(): void
public "isLoadingFailed"(): boolean
public "isLoadingCompleted"(): boolean
public "setSoundChannel"(arg0: $SoundSource$Type): void
public "getSoundChannel"(): $SoundSource
public "setVolume"(arg0: float): void
public "getVolume"(): float
public "isValidOpenAlSource"(): boolean
public "waitForLoadingCompletedOrFailed"(arg0: long): void
public "waitForReady"(arg0: long): void
get "ready"(): boolean
get "closed"(): boolean
get "playing"(): boolean
get "clip"(): $ALAudioClip
get "paused"(): boolean
get "loadingFailed"(): boolean
get "loadingCompleted"(): boolean
set "soundChannel"(value: $SoundSource$Type)
get "soundChannel"(): $SoundSource
set "volume"(value: float)
get "volume"(): float
get "validOpenAlSource"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WavAudio$Type = ($WavAudio);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WavAudio_ = $WavAudio$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/image/$ImageEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$ImageElement, $ImageElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/image/$ImageElement"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $ImageEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getElement"(): $ImageElement
get "element"(): $ImageElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageEditorElement$Type = ($ImageEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageEditorElement_ = $ImageEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/server/$ServerCache" {
import {$ServerData, $ServerData$Type} from "packages/net/minecraft/client/multiplayer/$ServerData"

export class $ServerCache {

constructor()

public static "clear"(): void
public static "init"(): void
public static "pingServers"(): void
public static "removeServer"(arg0: string): void
public static "cacheServer"(arg0: $ServerData$Type, arg1: $ServerData$Type): void
public static "getServer"(arg0: string): $ServerData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerCache$Type = ($ServerCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerCache_ = $ServerCache$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/$ScreenReloadEvent" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $ScreenReloadEvent extends $EventBase {

constructor(arg0: $Screen$Type)

public "isCancelable"(): boolean
public "getScreen"(): $Screen
get "cancelable"(): boolean
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenReloadEvent$Type = ($ScreenReloadEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenReloadEvent_ = $ScreenReloadEvent$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/$MelodyAudioException" {
import {$Exception, $Exception$Type} from "packages/java/lang/$Exception"

export class $MelodyAudioException extends $Exception {

constructor()
constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MelodyAudioException$Type = ($MelodyAudioException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MelodyAudioException_ = $MelodyAudioException$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$FunctionToken" {
import {$Function, $Function$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/function/$Function"
import {$Token, $Token$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token"

export class $FunctionToken extends $Token {
static readonly "TOKEN_NUMBER": short
static readonly "TOKEN_OPERATOR": short
static readonly "TOKEN_FUNCTION": short
static readonly "TOKEN_PARENTHESES_OPEN": short
static readonly "TOKEN_PARENTHESES_CLOSE": short
static readonly "TOKEN_VARIABLE": short
static readonly "TOKEN_SEPARATOR": short

constructor(arg0: $Function$Type)

public "getFunction"(): $Function
get "function"(): $Function
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FunctionToken$Type = ($FunctionToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FunctionToken_ = $FunctionToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/input/$InputConstants" {
import {$InputConstants as $InputConstants$0, $InputConstants$Type as $InputConstants$0$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $InputConstants extends $InputConstants$0 {
static readonly "KEY_ENTER": integer
static readonly "KEY_0": integer
static readonly "KEY_1": integer
static readonly "KEY_2": integer
static readonly "KEY_3": integer
static readonly "KEY_4": integer
static readonly "KEY_5": integer
static readonly "KEY_6": integer
static readonly "KEY_7": integer
static readonly "KEY_8": integer
static readonly "KEY_9": integer
static readonly "KEY_A": integer
static readonly "KEY_B": integer
static readonly "KEY_C": integer
static readonly "KEY_D": integer
static readonly "KEY_E": integer
static readonly "KEY_F": integer
static readonly "KEY_G": integer
static readonly "KEY_H": integer
static readonly "KEY_I": integer
static readonly "KEY_J": integer
static readonly "KEY_K": integer
static readonly "KEY_L": integer
static readonly "KEY_M": integer
static readonly "KEY_N": integer
static readonly "KEY_O": integer
static readonly "KEY_P": integer
static readonly "KEY_Q": integer
static readonly "KEY_R": integer
static readonly "KEY_S": integer
static readonly "KEY_T": integer
static readonly "KEY_U": integer
static readonly "KEY_V": integer
static readonly "KEY_W": integer
static readonly "KEY_X": integer
static readonly "KEY_Y": integer
static readonly "KEY_Z": integer
static readonly "KEY_F1": integer
static readonly "KEY_F2": integer
static readonly "KEY_F3": integer
static readonly "KEY_F4": integer
static readonly "KEY_F5": integer
static readonly "KEY_F6": integer
static readonly "KEY_F7": integer
static readonly "KEY_F8": integer
static readonly "KEY_F9": integer
static readonly "KEY_F10": integer
static readonly "KEY_F11": integer
static readonly "KEY_F12": integer
static readonly "KEY_F13": integer
static readonly "KEY_F14": integer
static readonly "KEY_F15": integer
static readonly "KEY_F16": integer
static readonly "KEY_F17": integer
static readonly "KEY_F18": integer
static readonly "KEY_F19": integer
static readonly "KEY_F20": integer
static readonly "KEY_F21": integer
static readonly "KEY_F22": integer
static readonly "KEY_F23": integer
static readonly "KEY_F24": integer
static readonly "KEY_F25": integer
static readonly "KEY_NUMLOCK": integer
static readonly "KEY_NUMPAD0": integer
static readonly "KEY_NUMPAD1": integer
static readonly "KEY_NUMPAD2": integer
static readonly "KEY_NUMPAD3": integer
static readonly "KEY_NUMPAD4": integer
static readonly "KEY_NUMPAD5": integer
static readonly "KEY_NUMPAD6": integer
static readonly "KEY_NUMPAD7": integer
static readonly "KEY_NUMPAD8": integer
static readonly "KEY_NUMPAD9": integer
static readonly "KEY_NUMPADCOMMA": integer
static readonly "KEY_NUMPADENTER": integer
static readonly "KEY_NUMPADEQUALS": integer
static readonly "KEY_DOWN": integer
static readonly "KEY_LEFT": integer
static readonly "KEY_RIGHT": integer
static readonly "KEY_UP": integer
static readonly "KEY_ADD": integer
static readonly "KEY_APOSTROPHE": integer
static readonly "KEY_BACKSLASH": integer
static readonly "KEY_COMMA": integer
static readonly "KEY_EQUALS": integer
static readonly "KEY_GRAVE": integer
static readonly "KEY_LBRACKET": integer
static readonly "KEY_MINUS": integer
static readonly "KEY_MULTIPLY": integer
static readonly "KEY_PERIOD": integer
static readonly "KEY_RBRACKET": integer
static readonly "KEY_SEMICOLON": integer
static readonly "KEY_SLASH": integer
static readonly "KEY_SPACE": integer
static readonly "KEY_TAB": integer
static readonly "KEY_LALT": integer
static readonly "KEY_LCONTROL": integer
static readonly "KEY_LSHIFT": integer
static readonly "KEY_LWIN": integer
static readonly "KEY_RALT": integer
static readonly "KEY_RCONTROL": integer
static readonly "KEY_RSHIFT": integer
static readonly "KEY_RWIN": integer
static readonly "KEY_RETURN": integer
static readonly "KEY_ESCAPE": integer
static readonly "KEY_BACKSPACE": integer
static readonly "KEY_DELETE": integer
static readonly "KEY_END": integer
static readonly "KEY_HOME": integer
static readonly "KEY_INSERT": integer
static readonly "KEY_PAGEDOWN": integer
static readonly "KEY_PAGEUP": integer
static readonly "KEY_CAPSLOCK": integer
static readonly "KEY_PAUSE": integer
static readonly "KEY_SCROLLLOCK": integer
static readonly "KEY_PRINTSCREEN": integer
static readonly "PRESS": integer
static readonly "RELEASE": integer
static readonly "REPEAT": integer
static readonly "MOUSE_BUTTON_LEFT": integer
static readonly "MOUSE_BUTTON_MIDDLE": integer
static readonly "MOUSE_BUTTON_RIGHT": integer
static readonly "MOD_CONTROL": integer
static readonly "CURSOR": integer
static readonly "CURSOR_DISABLED": integer
static readonly "CURSOR_NORMAL": integer
static readonly "UNKNOWN": $InputConstants$Key

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputConstants$Type = ($InputConstants);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputConstants_ = $InputConstants$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAwareEx" {
import {$JSONAware, $JSONAware$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAware"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"

export interface $JSONAwareEx extends $JSONAware {

 "toJSONString"(arg0: $JSONStyle$Type): string
 "toJSONString"(): string
}

export namespace $JSONAwareEx {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONAwareEx$Type = ($JSONAwareEx);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONAwareEx_ = $JSONAwareEx$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder" {
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $Placeholder {

constructor(arg0: string)

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getIdentifier"(): string
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getAlternativeIdentifiers"(): $List<(string)>
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "shouldShowUpInPlaceholderMenu"(arg0: $LayoutEditorScreen$Type): boolean
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "identifier"(): string
get "alternativeIdentifiers"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Placeholder$Type = ($Placeholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Placeholder_ = $Placeholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlayBuilder" {
import {$DebugOverlay, $DebugOverlay$Type} from "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"

export class $DebugOverlayBuilder {

constructor()

public static "buildDebugOverlay"(arg0: $MenuBar$Type): $DebugOverlay
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugOverlayBuilder$Type = ($DebugOverlayBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugOverlayBuilder_ = $DebugOverlayBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor" {
import {$Color, $Color$Type} from "packages/java/awt/$Color"

export class $DrawableColor {
static readonly "EMPTY": $DrawableColor
static readonly "WHITE": $DrawableColor
static readonly "BLACK": $DrawableColor


public static "of"(arg0: $Color$Type): $DrawableColor
public static "of"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): $DrawableColor
public static "of"(arg0: string): $DrawableColor
public static "of"(arg0: integer, arg1: integer, arg2: integer): $DrawableColor
public "copy"(): $DrawableColor
public "getColorInt"(): integer
public "getHex"(): string
public "getColor"(): $Color
public "getColorIntWithAlpha"(arg0: float): integer
get "colorInt"(): integer
get "hex"(): string
get "color"(): $Color
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawableColor$Type = ($DrawableColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawableColor_ = $DrawableColor$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirementRegistry" {
import {$LinkedHashMap, $LinkedHashMap$Type} from "packages/java/util/$LinkedHashMap"
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"

export class $LoadingRequirementRegistry {

constructor()

public static "register"(arg0: $LoadingRequirement$Type): void
public static "getRequirement"(arg0: string): $LoadingRequirement
public static "getRequirementsOrderedByCategories"(): $LinkedHashMap<(string), ($List<($LoadingRequirement)>)>
public static "getRequirementsWithoutCategory"(): $List<($LoadingRequirement)>
public static "getRequirements"(): $List<($LoadingRequirement)>
get "requirementsOrderedByCategories"(): $LinkedHashMap<(string), ($List<($LoadingRequirement)>)>
get "requirementsWithoutCategory"(): $List<($LoadingRequirement)>
get "requirements"(): $List<($LoadingRequirement)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadingRequirementRegistry$Type = ($LoadingRequirementRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadingRequirementRegistry_ = $LoadingRequirementRegistry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$ScrollableMarkdownRenderer" {
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$MarkdownRenderer, $MarkdownRenderer$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ContainerEventHandler, $ContainerEventHandler$Type} from "packages/net/minecraft/client/gui/components/events/$ContainerEventHandler"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $ScrollableMarkdownRenderer implements $Renderable, $ContainerEventHandler, $NarratableEntry {

constructor(arg0: float, arg1: float, arg2: float, arg3: float)

public "setText"(arg0: string): $ScrollableMarkdownRenderer
public "getMarkdownRenderer"(): $MarkdownRenderer
public "children"(): $List<($GuiEventListener)>
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "setDragging"(arg0: boolean): void
public "setFocused"(arg0: $GuiEventListener$Type): void
public "isDragging"(): boolean
public "getFocused"(): $GuiEventListener
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "rebuild"(arg0: float, arg1: float, arg2: float, arg3: float): void
public "setScrollingAllowed"(arg0: boolean): $ScrollableMarkdownRenderer
public "isScrollingAllowed"(): boolean
public "getScrollArea"(): $ScrollArea
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "setFocused"(arg0: boolean): void
public "getChildAt"(arg0: double, arg1: double): $Optional<($GuiEventListener)>
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "isFocused"(): boolean
public "magicalSpecialHackyFocus"(arg0: $GuiEventListener$Type): void
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "isActive"(): boolean
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getRectangle"(): $ScreenRectangle
public "mouseMoved"(arg0: double, arg1: double): void
public "getTabOrderGroup"(): integer
set "text"(value: string)
get "markdownRenderer"(): $MarkdownRenderer
set "dragging"(value: boolean)
set "focused"(value: $GuiEventListener$Type)
get "dragging"(): boolean
get "focused"(): $GuiEventListener
set "scrollingAllowed"(value: boolean)
get "scrollingAllowed"(): boolean
get "scrollArea"(): $ScrollArea
get "currentFocusPath"(): $ComponentPath
set "focused"(value: boolean)
get "focused"(): boolean
get "active"(): boolean
get "rectangle"(): $ScreenRectangle
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollableMarkdownRenderer$Type = ($ScrollableMarkdownRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollableMarkdownRenderer_ = $ScrollableMarkdownRenderer$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$BeansAccessConfig" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $BeansAccessConfig {

constructor()

public static "addTypeMapper"(arg0: $Class$Type<(any)>, arg1: $Class$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeansAccessConfig$Type = ($BeansAccessConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeansAccessConfig_ = $BeansAccessConfig$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$TooltipHandler" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Tooltip, $Tooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip"
import {$TooltipHandler$HandledTooltip, $TooltipHandler$HandledTooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$TooltipHandler$HandledTooltip"
import {$RenderScreenEvent$Post, $RenderScreenEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/screen/$RenderScreenEvent$Post"
import {$InitOrResizeScreenEvent$Pre, $InitOrResizeScreenEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$Pre"

export class $TooltipHandler {
static readonly "INSTANCE": $TooltipHandler

constructor()

public "onScreenRenderPost"(arg0: $RenderScreenEvent$Post$Type): void
public "addWidgetTooltip"(arg0: $AbstractWidget$Type, arg1: $Tooltip$Type, arg2: boolean, arg3: boolean): $TooltipHandler$HandledTooltip
public "removeTooltip"(arg0: $TooltipHandler$HandledTooltip$Type): void
public "addTooltip"(arg0: $Tooltip$Type, arg1: $BooleanSupplier$Type, arg2: boolean, arg3: boolean): $TooltipHandler$HandledTooltip
public "onScreenInitResizePre"(arg0: $InitOrResizeScreenEvent$Pre$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipHandler$Type = ($TooltipHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipHandler_ = $TooltipHandler$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/scrollarea/$ScrollAreaEntry" {
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/konkrete/gui/content/scrollarea/$ScrollArea"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ScrollAreaEntry {
 "x": integer
 "y": integer
readonly "parent": $ScrollArea

constructor(arg0: $ScrollArea$Type)

public "renderEntry"(arg0: $GuiGraphics$Type): void
public "render"(arg0: $GuiGraphics$Type): void
public "isVisible"(): boolean
public "isHovered"(): boolean
public "getWidth"(): integer
public "getHeight"(): integer
/**
 * 
 * @deprecated
 */
public "isHoveredOrFocused"(): boolean
get "visible"(): boolean
get "hovered"(): boolean
get "width"(): integer
get "height"(): integer
get "hoveredOrFocused"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollAreaEntry$Type = ($ScrollAreaEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollAreaEntry_ = $ScrollAreaEntry$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$PlayableResourceWithAudio" {
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$PlayableResource, $PlayableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$PlayableResource"

export interface $PlayableResourceWithAudio extends $PlayableResource {

 "setVolume"(arg0: float): void
 "getVolume"(): float
 "stop"(): void
 "play"(): void
 "isPlaying"(): boolean
 "isPaused"(): boolean
 "pause"(): void
 "open"(): $InputStream
 "isReady"(): boolean
 "isClosed"(): boolean
 "waitForLoadingCompletedOrFailed"(arg0: long): void
 "waitForReady"(arg0: long): void
 "isLoadingFailed"(): boolean
 "isLoadingCompleted"(): boolean
 "close"(): void
}

export namespace $PlayableResourceWithAudio {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayableResourceWithAudio$Type = ($PlayableResourceWithAudio);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayableResourceWithAudio_ = $PlayableResourceWithAudio$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v1/$SliderElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ExtendedSliderButton, $ExtendedSliderButton$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v1/$ExtendedSliderButton"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$SliderElement$SliderType, $SliderElement$SliderType$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v1/$SliderElement$SliderType"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

/**
 * 
 * @deprecated
 */
export class $SliderElement extends $AbstractElement {
 "linkedVariable": string
 "type": $SliderElement$SliderType
 "listValues": $List<(string)>
 "minRangeValue": integer
 "maxRangeValue": integer
 "labelPrefix": string
 "labelSuffix": string
 "slider": $ExtendedSliderButton
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "initializeSlider"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliderElement$Type = ($SliderElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliderElement_ = $SliderElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v2/$SliderElement" {
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$SliderElement$SliderType, $SliderElement$SliderType$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v2/$SliderElement$SliderType"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$GenericExecutableBlock, $GenericExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$GenericExecutableBlock"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ExecutableElement, $ExecutableElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ExecutableElement"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$AbstractExtendedSlider, $AbstractExtendedSlider$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v2/$AbstractExtendedSlider"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $SliderElement extends $AbstractElement implements $ExecutableElement {
static readonly "VALUE_PLACEHOLDER": string
 "slider": $AbstractExtendedSlider
 "type": $SliderElement$SliderType
 "preSelectedValue": string
 "listValues": $List<(string)>
 "minRangeValue": double
 "maxRangeValue": double
 "roundingDecimalPlace": integer
 "label": string
 "tooltip": string
 "handleTextureNormal": $ResourceSupplier<($ITexture)>
 "handleTextureHover": $ResourceSupplier<($ITexture)>
 "handleTextureInactive": $ResourceSupplier<($ITexture)>
 "handleAnimationNormal": string
 "handleAnimationHover": string
 "handleAnimationInactive": string
 "sliderBackgroundTextureNormal": $ResourceSupplier<($ITexture)>
 "sliderBackgroundTextureHighlighted": $ResourceSupplier<($ITexture)>
 "sliderBackgroundAnimationNormal": string
 "sliderBackgroundAnimationHighlighted": string
 "loopBackgroundAnimations": boolean
 "restartBackgroundAnimationsOnHover": boolean
 "nineSliceCustomBackground": boolean
 "nineSliceBorderX": integer
 "nineSliceBorderY": integer
 "nineSliceSliderHandle": boolean
 "nineSliceSliderHandleBorderX": integer
 "nineSliceSliderHandleBorderY": integer
 "navigatable": boolean
 "executableBlock": $GenericExecutableBlock
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "getExecutableBlock"(): $GenericExecutableBlock
public "buildSlider"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "prepareLoadingRequirementContainer"(): void
public "prepareExecutableBlock"(): void
public "updateWidgetTooltip"(): void
public "updateWidgetTexture"(): void
public "updateWidget"(): void
public "getWidgetsToRegister"(): $List<($GuiEventListener)>
get "executableBlock"(): $GenericExecutableBlock
get "widgetsToRegister"(): $List<($GuiEventListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliderElement$Type = ($SliderElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliderElement_ = $SliderElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$ThreadUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ThreadUtils {

constructor()

public static "sleep"(arg0: long): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThreadUtils$Type = ($ThreadUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThreadUtils_ = $ThreadUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AudioElement, $AudioElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$AudioElement"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $AudioEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getElement"(): $AudioElement
get "element"(): $AudioElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AudioEditorElement$Type = ($AudioEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AudioEditorElement_ = $AudioEditorElement$Type;
}}
declare module "packages/de/keksuccino/melody/mixin/mixins/common/client/$IMixinSoundEngine" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMixinSoundEngine {

 "getLoadedMelody"(): boolean

(): boolean
}

export namespace $IMixinSoundEngine {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinSoundEngine$Type = ($IMixinSoundEngine);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinSoundEngine_ = $IMixinSoundEngine$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/widget/$RenderGuiListBackgroundEvent" {
import {$AbstractSelectionList, $AbstractSelectionList$Type} from "packages/net/minecraft/client/gui/components/$AbstractSelectionList"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderGuiListBackgroundEvent extends $EventBase {

constructor(arg0: $GuiGraphics$Type, arg1: $AbstractSelectionList$Type<(any)>)

public "getList"(): $AbstractSelectionList<(any)>
public "isCancelable"(): boolean
public "getGraphics"(): $GuiGraphics
get "list"(): $AbstractSelectionList<(any)>
get "cancelable"(): boolean
get "graphics"(): $GuiGraphics
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderGuiListBackgroundEvent$Type = ($RenderGuiListBackgroundEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderGuiListBackgroundEvent_ = $RenderGuiListBackgroundEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/themes/$UIColorThemes" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$DarkUIColorTheme, $DarkUIColorTheme$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/themes/$DarkUIColorTheme"
import {$LightUIColorTheme, $LightUIColorTheme$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/themes/$LightUIColorTheme"
import {$UIColorTheme, $UIColorTheme$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorTheme"

export class $UIColorThemes {
static readonly "THEME_DIR": $File
static readonly "DARK": $DarkUIColorTheme
static readonly "LIGHT": $LightUIColorTheme
static readonly "DEFAULT_THEMES": ($UIColorTheme)[]

constructor()

public static "registerAll"(): void
public static "reloadThemes"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UIColorThemes$Type = ($UIColorThemes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UIColorThemes_ = $UIColorThemes$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$OpenParenthesesToken" {
import {$Token, $Token$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token"

export class $OpenParenthesesToken extends $Token {
static readonly "TOKEN_NUMBER": short
static readonly "TOKEN_OPERATOR": short
static readonly "TOKEN_FUNCTION": short
static readonly "TOKEN_PARENTHESES_OPEN": short
static readonly "TOKEN_PARENTHESES_CLOSE": short
static readonly "TOKEN_VARIABLE": short
static readonly "TOKEN_SEPARATOR": short


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenParenthesesToken$Type = ($OpenParenthesesToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenParenthesesToken_ = $OpenParenthesesToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio" {
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$PlayableResourceWithAudio, $PlayableResourceWithAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$PlayableResourceWithAudio"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"

export interface $IAudio extends $PlayableResourceWithAudio {

 "play"(): void
 "setSoundChannel"(arg0: $SoundSource$Type): void
 "getSoundChannel"(): $SoundSource
 "setVolume"(arg0: float): void
 "getVolume"(): float
 "stop"(): void
 "isPlaying"(): boolean
 "isPaused"(): boolean
 "pause"(): void
 "open"(): $InputStream
 "isReady"(): boolean
 "isClosed"(): boolean
 "waitForLoadingCompletedOrFailed"(arg0: long): void
 "waitForReady"(arg0: long): void
 "isLoadingFailed"(): boolean
 "isLoadingCompleted"(): boolean
 "close"(): void
}

export namespace $IAudio {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAudio$Type = ($IAudio);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAudio_ = $IAudio$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsVariableValueRequirement" {
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsVariableValueRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "editValue"(arg0: $Screen$Type, arg1: $LoadingRequirementInstance$Type): void
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsVariableValueRequirement$Type = ($IsVariableValueRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsVariableValueRequirement_ = $IsVariableValueRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/$LayoutHandler" {
import {$PropertyContainerSet, $PropertyContainerSet$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainerSet"
import {$File, $File$Type} from "packages/java/io/$File"
import {$Layout, $Layout$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$Layout"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LayoutHandler$UniversalLayoutInclusionRule, $LayoutHandler$UniversalLayoutInclusionRule$Type} from "packages/de/keksuccino/fancymenu/customization/layout/$LayoutHandler$UniversalLayoutInclusionRule"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $LayoutHandler {
static readonly "LAYOUT_DIR": $File
static readonly "ASSETS_DIR": $File

constructor()

public static "init"(): void
public static "getEnabledLayouts"(): $List<($Layout)>
public static "getEnabledLayoutsForScreenIdentifier"(arg0: string, arg1: boolean): $List<($Layout)>
public static "deserializeLayout"(arg0: $PropertyContainerSet$Type, arg1: $File$Type): $Layout
public static "getAllLayouts"(): $List<($Layout)>
public static "openLayoutEditor"(arg0: $Layout$Type, arg1: $Screen$Type): void
public static "getDisabledLayouts"(): $List<($Layout)>
public static "deleteLayout"(arg0: $Layout$Type, arg1: boolean): void
public static "saveLayoutToFile"(arg0: $Layout$Type, arg1: string): boolean
public static "getLayout"(arg0: string): $Layout
public static "registerUniversalLayoutInclusionRule"(arg0: $LayoutHandler$UniversalLayoutInclusionRule$Type): string
public static "unregisterUniversalLayoutInclusionRule"(arg0: string): void
public static "getDisabledLayoutsForScreenIdentifier"(arg0: string): $List<($Layout)>
public static "deserializeLayoutFilesInDirectory"(arg0: $File$Type): $List<($Layout)>
public static "getAllLayoutsForScreenIdentifier"(arg0: string, arg1: boolean): $List<($Layout)>
public static "sortLayoutListByLastEdited"(arg0: $List$Type<($Layout$Type)>, arg1: boolean, arg2: integer): $List<($Layout)>
public static "sortLayoutListByLastEdited"(arg0: $List$Type<($Layout$Type)>, arg1: boolean): $List<($Layout)>
public static "sortLayoutListByName"(arg0: $List$Type<($Layout$Type)>): $List<($Layout)>
public static "sortLayoutListByStatus"(arg0: $List$Type<($Layout$Type)>, arg1: boolean): $List<($Layout)>
public static "reloadLayouts"(): void
public static "addLayout"(arg0: $Layout$Type, arg1: boolean): void
get "enabledLayouts"(): $List<($Layout)>
get "allLayouts"(): $List<($Layout)>
get "disabledLayouts"(): $List<($Layout)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutHandler$Type = ($LayoutHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutHandler_ = $LayoutHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/button/vanillawidget/$VanillaWidgetElement" {
import {$WidgetMeta, $WidgetMeta$Type} from "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta"
import {$ButtonElement, $ButtonElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonElement"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$HideableElement, $HideableElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$HideableElement"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$GenericExecutableBlock, $GenericExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$GenericExecutableBlock"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"
import {$ButtonEditorElement, $ButtonEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonEditorElement"

export class $VanillaWidgetElement extends $ButtonElement implements $HideableElement {
 "widgetMeta": $WidgetMeta
 "vanillaButtonHidden": boolean
 "automatedButtonClicks": integer
 "sliderBackgroundTextureNormal": $ResourceSupplier<($ITexture)>
 "sliderBackgroundTextureHighlighted": $ResourceSupplier<($ITexture)>
 "sliderBackgroundAnimationNormal": string
 "sliderBackgroundAnimationHighlighted": string
 "nineSliceSliderHandle": boolean
 "nineSliceSliderHandleBorderX": integer
 "nineSliceSliderHandleBorderY": integer
 "clickSound": $ResourceSupplier<($IAudio)>
 "hoverSound": $ResourceSupplier<($IAudio)>
 "label": string
 "hoverLabel": string
 "tooltip": string
 "backgroundTextureNormal": $ResourceSupplier<($ITexture)>
 "backgroundTextureHover": $ResourceSupplier<($ITexture)>
 "backgroundTextureInactive": $ResourceSupplier<($ITexture)>
 "backgroundAnimationNormal": string
 "backgroundAnimationHover": string
 "backgroundAnimationInactive": string
 "loopBackgroundAnimations": boolean
 "restartBackgroundAnimationsOnHover": boolean
 "nineSliceCustomBackground": boolean
 "nineSliceBorderX": integer
 "nineSliceBorderY": integer
 "navigatable": boolean
 "actionExecutor": $GenericExecutableBlock
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<($ButtonElement$Type), ($ButtonEditorElement$Type)>)

public "isHidden"(): boolean
public "tick"(): void
public "updateWidgetSize"(): void
public "updateWidgetLabels"(): void
public "updateWidgetVisibility"(): void
public "updateWidgetPosition"(): void
public "updateWidgetNavigatable"(): void
public "updateWidgetTexture"(): void
public "isCopyrightButton"(): boolean
public "mirrorVanillaWidgetSize"(): void
public "mirrorVanillaWidgetPosition"(): void
public "resetVanillaWidgetSizeAndPosition"(): void
public "setVanillaWidget"(arg0: $WidgetMeta$Type, arg1: boolean): void
public "setHidden"(arg0: boolean): void
public "getInstanceIdentifier"(): string
public "getWidgetsToRegister"(): $List<($GuiEventListener)>
public "mirrorVanillaWidgetSizeAndPosition"(): void
get "hidden"(): boolean
get "copyrightButton"(): boolean
set "hidden"(value: boolean)
get "instanceIdentifier"(): string
get "widgetsToRegister"(): $List<($GuiEventListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaWidgetElement$Type = ($VanillaWidgetElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaWidgetElement_ = $VanillaWidgetElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/$ResourceHandler" {
import {$ResourceSource, $ResourceSource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSource"
import {$Resource, $Resource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$Resource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"

export class $ResourceHandler<R extends $Resource, F extends $FileType<(R)>> {

constructor()

public "get"(arg0: $ResourceSource$Type): R
public "get"(arg0: string): R
public "release"(arg0: R): void
public "release"(arg0: string, arg1: boolean): void
public "getIfRegistered"(arg0: string): R
public "getFallbackFileType"(): F
public "registerIfKeyAbsent"(arg0: string, arg1: R): void
public "getAllowedFileTypes"(): $List<(F)>
public "releaseAll"(): void
public "hasResource"(arg0: string): boolean
get "fallbackFileType"(): F
get "allowedFileTypes"(): $List<(F)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceHandler$Type<R, F> = ($ResourceHandler<(R), (F)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceHandler_<R, F> = $ResourceHandler$Type<(R), (F)>;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$WriteContext" {
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$MapFunction, $MapFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$MapFunction"
import {$JsonPath, $JsonPath$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPath"
import {$DocumentContext, $DocumentContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$DocumentContext"

export interface $WriteContext {

 "add"(arg0: $JsonPath$Type, arg1: any): $DocumentContext
 "add"(arg0: string, arg1: any, ...arg2: ($Predicate$Type)[]): $DocumentContext
 "put"(arg0: $JsonPath$Type, arg1: string, arg2: any): $DocumentContext
 "put"(arg0: string, arg1: string, arg2: any, ...arg3: ($Predicate$Type)[]): $DocumentContext
 "map"(arg0: $JsonPath$Type, arg1: $MapFunction$Type): $DocumentContext
 "map"(arg0: string, arg1: $MapFunction$Type, ...arg2: ($Predicate$Type)[]): $DocumentContext
 "set"(arg0: $JsonPath$Type, arg1: any): $DocumentContext
 "set"(arg0: string, arg1: any, ...arg2: ($Predicate$Type)[]): $DocumentContext
 "delete"(arg0: string, ...arg1: ($Predicate$Type)[]): $DocumentContext
 "delete"(arg0: $JsonPath$Type): $DocumentContext
 "configuration"(): $Configuration
 "json"<T>(): T
 "jsonString"(): string
 "renameKey"(arg0: string, arg1: string, arg2: string, ...arg3: ($Predicate$Type)[]): $DocumentContext
 "renameKey"(arg0: $JsonPath$Type, arg1: string, arg2: string): $DocumentContext
}

export namespace $WriteContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WriteContext$Type = ($WriteContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WriteContext_ = $WriteContext$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/$PlayerEntityElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$PlayerEntityProperties, $PlayerEntityProperties$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityProperties"
import {$PlayerEntityElementRenderer, $PlayerEntityElementRenderer$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityElementRenderer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$SkinResourceSupplier, $SkinResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/textures/$SkinResourceSupplier"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$CapeResourceSupplier, $CapeResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/textures/$CapeResourceSupplier"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $PlayerEntityElement extends $AbstractElement {
readonly "normalRenderer": $PlayerEntityElementRenderer
readonly "slimRenderer": $PlayerEntityElementRenderer
 "copyClientPlayer": boolean
 "playerName": string
 "showPlayerName": boolean
 "hasParrotOnShoulder": boolean
 "parrotOnLeftShoulder": boolean
 "crouching": boolean
 "isBaby": boolean
 "scale": string
 "headFollowsMouse": boolean
 "bodyFollowsMouse": boolean
 "slim": boolean
 "autoSkin": boolean
 "autoCape": boolean
 "skinTextureSupplier": $SkinResourceSupplier
 "capeTextureSupplier": $CapeResourceSupplier
 "bodyXRot": string
 "bodyYRot": string
 "headXRot": string
 "headYRot": string
 "headZRot": string
 "leftArmXRot": string
 "leftArmYRot": string
 "leftArmZRot": string
 "rightArmXRot": string
 "rightArmYRot": string
 "rightArmZRot": string
 "leftLegXRot": string
 "leftLegYRot": string
 "leftLegZRot": string
 "rightLegXRot": string
 "rightLegYRot": string
 "rightLegZRot": string
 "bodyXRotAdvancedMode": boolean
 "bodyYRotAdvancedMode": boolean
 "headXRotAdvancedMode": boolean
 "headYRotAdvancedMode": boolean
 "headZRotAdvancedMode": boolean
 "leftArmXRotAdvancedMode": boolean
 "leftArmYRotAdvancedMode": boolean
 "leftArmZRotAdvancedMode": boolean
 "rightArmXRotAdvancedMode": boolean
 "rightArmYRotAdvancedMode": boolean
 "rightArmZRotAdvancedMode": boolean
 "leftLegXRotAdvancedMode": boolean
 "leftLegYRotAdvancedMode": boolean
 "leftLegZRotAdvancedMode": boolean
 "rightLegXRotAdvancedMode": boolean
 "rightLegYRotAdvancedMode": boolean
 "rightLegZRotAdvancedMode": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "setPlayerName"(arg0: string): void
public "setSkinBySource"(arg0: string): void
public "setIsBaby"(arg0: boolean): void
public "setShowPlayerName"(arg0: boolean): void
public "setCrouching"(arg0: boolean): void
public "setCapeBySource"(arg0: string): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getActiveEntityProperties"(): $PlayerEntityProperties
public "setSkinByPlayerName"(): void
public "setCapeByPlayerName"(): void
public "setCopyClientPlayer"(arg0: boolean): void
public "setHasParrotOnShoulder"(arg0: boolean, arg1: boolean): void
public "getActiveRenderer"(): $PlayerEntityElementRenderer
set "playerName"(value: string)
set "skinBySource"(value: string)
set "isBaby"(value: boolean)
set "showPlayerName"(value: boolean)
set "crouching"(value: boolean)
set "capeBySource"(value: string)
get "activeEntityProperties"(): $PlayerEntityProperties
set "copyClientPlayer"(value: boolean)
get "activeRenderer"(): $PlayerEntityElementRenderer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityElement$Type = ($PlayerEntityElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityElement_ = $PlayerEntityElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/$Executable" {
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"

export interface $Executable {

 "execute"(): void
 "copy"(arg0: boolean): $Executable
 "getIdentifier"(): string
 "serializeToExistingPropertyContainer"(arg0: $PropertyContainer$Type): void
 "serialize"(): $PropertyContainer
}

export namespace $Executable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Executable$Type = ($Executable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Executable_ = $Executable$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v1/$ExtendedSliderButton" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AbstractSliderButton, $AbstractSliderButton$Type} from "packages/net/minecraft/client/gui/components/$AbstractSliderButton"
import {$UniqueWidget, $UniqueWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$UniqueWidget"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"
import {$IMixinAbstractSliderButton, $IMixinAbstractSliderButton$Type} from "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinAbstractSliderButton"

/**
 * 
 * @deprecated
 */
export class $ExtendedSliderButton extends $AbstractSliderButton implements $UniqueWidget, $NavigatableWidget {
 "handleClick": boolean
 "enableRightClick": boolean
 "ignoreBlockedInput": boolean
 "ignoreGlobalLeftMouseDown": boolean
static readonly "SLIDER_LOCATION": $ResourceLocation
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

/**
 * 
 * @deprecated
 */
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: boolean, arg5: double, arg6: $Consumer$Type<($ExtendedSliderButton$Type)>)

public "getValue"(): double
public "getAccessor"(): $IMixinAbstractSliderButton
public "setLabelShadow"(arg0: boolean): void
public "getBackgroundColor"(): $DrawableColor
public "isNavigatable"(): boolean
public "setFocused"(arg0: boolean): void
public "getBorderColor"(): $DrawableColor
public "isLabelShadow"(): boolean
public "setBorderColor"(arg0: $DrawableColor$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setBackgroundColor"(arg0: $DrawableColor$Type): void
public "setLabelSuffix"(arg0: string): void
public "setLabelPrefix"(arg0: string): void
public "isFocused"(): boolean
public "setHandleColorNormal"(arg0: $DrawableColor$Type): void
public "setHandleColorHover"(arg0: $DrawableColor$Type): void
public "setLabelColorNormal"(arg0: $DrawableColor$Type): void
public "setLabelColorInactive"(arg0: $DrawableColor$Type): void
public "setNavigatable"(arg0: boolean): void
public "setWidgetIdentifierFancyMenu"(arg0: string): $ExtendedSliderButton
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "renderWidget"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "onClick"(arg0: double, arg1: double): void
public "onRelease"(arg0: double, arg1: double): void
public "m_93611_"(arg0: double): void
public "canChangeValue"(): boolean
public "m_5695_"(): void
public "getWidgetIdentifierFancyMenu"(): string
public "getSliderMessageWithoutPrefixSuffix"(): string
public "getLabelColorNormal"(): $DrawableColor
public "getLabelColorInactive"(): $DrawableColor
public "getHandleColorNormal"(): $DrawableColor
public "getHandleColorHover"(): $DrawableColor
get "value"(): double
get "accessor"(): $IMixinAbstractSliderButton
set "labelShadow"(value: boolean)
get "backgroundColor"(): $DrawableColor
get "navigatable"(): boolean
set "focused"(value: boolean)
get "borderColor"(): $DrawableColor
get "labelShadow"(): boolean
set "borderColor"(value: $DrawableColor$Type)
set "backgroundColor"(value: $DrawableColor$Type)
set "labelSuffix"(value: string)
set "labelPrefix"(value: string)
get "focused"(): boolean
set "handleColorNormal"(value: $DrawableColor$Type)
set "handleColorHover"(value: $DrawableColor$Type)
set "labelColorNormal"(value: $DrawableColor$Type)
set "labelColorInactive"(value: $DrawableColor$Type)
set "navigatable"(value: boolean)
set "widgetIdentifierFancyMenu"(value: string)
get "focusable"(): boolean
set "focusable"(value: boolean)
get "widgetIdentifierFancyMenu"(): string
get "sliderMessageWithoutPrefixSuffix"(): string
get "labelColorNormal"(): $DrawableColor
get "labelColorInactive"(): $DrawableColor
get "handleColorNormal"(): $DrawableColor
get "handleColorHover"(): $DrawableColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedSliderButton$Type = ($ExtendedSliderButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedSliderButton_ = $ExtendedSliderButton$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/latebinding/$JsonLateBindingValue" {
import {$ILateBindingValue, $ILateBindingValue$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/latebinding/$ILateBindingValue"
import {$JsonProvider, $JsonProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$JsonProvider"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export class $JsonLateBindingValue implements $ILateBindingValue {

constructor(arg0: $JsonProvider$Type, arg1: $Parameter$Type)

public "get"(): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonLateBindingValue$Type = ($JsonLateBindingValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonLateBindingValue_ = $JsonLateBindingValue$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/splash/$SplashTextEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$SplashTextElement, $SplashTextElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/splash/$SplashTextElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $SplashTextEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getElement"(): $SplashTextElement
get "element"(): $SplashTextElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SplashTextEditorElement$Type = ($SplashTextEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SplashTextEditorElement_ = $SplashTextEditorElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/$CharacterIndex" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CharacterIndex {

constructor(arg0: charseq)

public "length"(): integer
public "toString"(): string
public "position"(): integer
public "charAt"(arg0: integer): character
public "trim"(): $CharacterIndex
public "subSequence"(arg0: integer, arg1: integer): charseq
public "currentChar"(): character
public "charSequence"(): charseq
public "lastCharIs"(arg0: character): boolean
public "currentCharIs"(arg0: character): boolean
public "nextCharIs"(arg0: character): boolean
public "skipBlanks"(): $CharacterIndex
public "nextIndexOf"(arg0: character): integer
public "nextIndexOf"(arg0: integer, arg1: character): integer
public "incrementPosition"(arg0: integer): integer
public "inBounds"(): boolean
public "inBounds"(arg0: integer): boolean
public "charAtOr"(arg0: integer, arg1: character): character
public "isNumberCharacter"(arg0: integer): boolean
public "currentIsTail"(): boolean
public "hasMoreCharacters"(): boolean
public "isOutOfBounds"(arg0: integer): boolean
public "setPosition"(arg0: integer): integer
public "indexOfClosingBracket"(arg0: integer, arg1: boolean, arg2: boolean): integer
public "nextIndexOfUnescaped"(arg0: character): integer
public "nextIndexOfUnescaped"(arg0: integer, arg1: character): integer
public "nextSignificantCharIs"(arg0: character): boolean
public "nextSignificantCharIs"(arg0: integer, arg1: character): boolean
public "nextSignificantChar"(arg0: integer): character
public "nextSignificantChar"(): character
public "readSignificantChar"(arg0: character): void
public "indexOfNextSignificantChar"(arg0: character): integer
public "indexOfNextSignificantChar"(arg0: integer, arg1: character): integer
public "hasSignificantSubSequence"(arg0: charseq): boolean
public "indexOfClosingSquareBracket"(arg0: integer): integer
public "indexOfMatchingCloseChar"(arg0: integer, arg1: character, arg2: character, arg3: boolean, arg4: boolean): integer
public "previousSignificantChar"(arg0: integer): character
public "previousSignificantChar"(): character
public "indexOfPreviousSignificantChar"(): integer
public "indexOfPreviousSignificantChar"(arg0: integer): integer
public "decrementEndPosition"(arg0: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CharacterIndex$Type = ($CharacterIndex);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CharacterIndex_ = $CharacterIndex$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$AnchorPointOverlay" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$AnchorPointOverlay$AnchorOverlayVisibilityMode, $AnchorPointOverlay$AnchorOverlayVisibilityMode$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$AnchorPointOverlay$AnchorOverlayVisibilityMode"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $AnchorPointOverlay implements $Renderable, $GuiEventListener {

constructor(arg0: $LayoutEditorScreen$Type)

public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "setFocused"(arg0: boolean): void
public "resetOverlay"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getVisibilityMode"(): $AnchorPointOverlay$AnchorOverlayVisibilityMode
public "getOverlayOpacity"(): integer
public "isOverlayBusy"(): boolean
public "isOverlayVisible"(): boolean
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "isFocused"(): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "resetAreaHoverCache"(): void
public "getOverlayHoverChargingTimeMs"(): long
public "invertOverlayColors"(): boolean
public "getOverlayColorBase"(): $DrawableColor
public "getOverlayColorBorder"(): $DrawableColor
public "getOverlayColorBaseOverride"(): $DrawableColor
public "getOverlayOpacityNormal"(): float
public "getOverlayColorBorderOverride"(): $DrawableColor
public "getOverlayOpacityBusy"(): float
public "getOverlayHoverChargingTimeSeconds"(): double
public "getCurrentFocusPath"(): $ComponentPath
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getRectangle"(): $ScreenRectangle
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "getTabOrderGroup"(): integer
set "focused"(value: boolean)
get "visibilityMode"(): $AnchorPointOverlay$AnchorOverlayVisibilityMode
get "overlayOpacity"(): integer
get "overlayBusy"(): boolean
get "overlayVisible"(): boolean
get "focused"(): boolean
get "overlayHoverChargingTimeMs"(): long
get "overlayColorBase"(): $DrawableColor
get "overlayColorBorder"(): $DrawableColor
get "overlayColorBaseOverride"(): $DrawableColor
get "overlayOpacityNormal"(): float
get "overlayColorBorderOverride"(): $DrawableColor
get "overlayOpacityBusy"(): float
get "overlayHoverChargingTimeSeconds"(): double
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnchorPointOverlay$Type = ($AnchorPointOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnchorPointOverlay_ = $AnchorPointOverlay$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/$ButtonScriptHandler" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$ButtonScriptHandler$ButtonScript, $ButtonScriptHandler$ButtonScript$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ButtonScriptHandler$ButtonScript"
import {$ModReloadEvent, $ModReloadEvent$Type} from "packages/de/keksuccino/fancymenu/events/$ModReloadEvent"

/**
 * 
 * @deprecated
 */
export class $ButtonScriptHandler {
static readonly "BUTTONSCRIPT_DIR": $File

constructor()

public static "init"(): void
public static "getScript"(arg0: string): $ButtonScriptHandler$ButtonScript
public "onReloadFancyMenu"(arg0: $ModReloadEvent$Type): void
public static "updateButtonScripts"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ButtonScriptHandler$Type = ($ButtonScriptHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ButtonScriptHandler_ = $ButtonScriptHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/animation/$AnimationMenuBackgroundBuilder" {
import {$AnimationMenuBackground, $AnimationMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/backgrounds/animation/$AnimationMenuBackground"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$SerializedMenuBackground, $SerializedMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$SerializedMenuBackground"
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"

export class $AnimationMenuBackgroundBuilder extends $MenuBackgroundBuilder<($AnimationMenuBackground)> {

constructor()

public "getDisplayName"(): $Component
public "isDeprecated"(): boolean
public "getDescription"(): ($Component)[]
public "serializedBackground"(arg0: $AnimationMenuBackground$Type): $SerializedMenuBackground
public "buildNewOrEditInstance"(arg0: $Screen$Type, arg1: $AnimationMenuBackground$Type, arg2: $Consumer$Type<($AnimationMenuBackground$Type)>): void
get "displayName"(): $Component
get "deprecated"(): boolean
get "description"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationMenuBackgroundBuilder$Type = ($AnimationMenuBackgroundBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationMenuBackgroundBuilder_ = $AnimationMenuBackgroundBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule" {
import {$TextEditorScreen, $TextEditorScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorScreen"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$TextEditorLine, $TextEditorLine$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorLine"

export class $TextEditorFormattingRule {

constructor()

public "resetRule"(arg0: $TextEditorScreen$Type): void
public "getStyle"(arg0: character, arg1: integer, arg2: integer, arg3: $TextEditorLine$Type, arg4: integer, arg5: $TextEditorScreen$Type): $Style
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEditorFormattingRule$Type = ($TextEditorFormattingRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEditorFormattingRule_ = $TextEditorFormattingRule$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$FakeMapper" {
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $FakeMapper extends $JsonReaderI<(any)> {
static "DEFAULT": $JsonReaderI<(any)>
readonly "base": $JsonReader


public "setValue"(arg0: any, arg1: string, arg2: any): void
public "createObject"(): any
public "addValue"(arg0: any, arg1: any): void
public "createArray"(): any
public "startObject"(arg0: string): $JsonReaderI<(any)>
public "startArray"(arg0: string): $JsonReaderI<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FakeMapper$Type = ($FakeMapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FakeMapper_ = $FakeMapper$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MaxNumberPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MaxNumberPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MaxNumberPlaceholder$Type = ($MaxNumberPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MaxNumberPlaceholder_ = $MaxNumberPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/level/$JoinLastWorldServerAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $JoinLastWorldServerAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JoinLastWorldServerAction$Type = ($JoinLastWorldServerAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JoinLastWorldServerAction_ = $JoinLastWorldServerAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v1/$RangeSliderButton" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ExtendedSliderButton, $ExtendedSliderButton$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v1/$ExtendedSliderButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $RangeSliderButton extends $ExtendedSliderButton {
 "minValue": double
 "maxValue": double
 "handleClick": boolean
 "enableRightClick": boolean
 "ignoreBlockedInput": boolean
 "ignoreGlobalLeftMouseDown": boolean
static readonly "SLIDER_LOCATION": $ResourceLocation
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: boolean, arg5: double, arg6: double, arg7: double, arg8: $Consumer$Type<($ExtendedSliderButton$Type)>)

public "getSelectedRangeValue"(): integer
public "setSelectedRangeValue"(arg0: double): void
public "getSliderMessageWithoutPrefixSuffix"(): string
public "getSelectedRangeDoubleValue"(): double
get "selectedRangeValue"(): integer
set "selectedRangeValue"(value: double)
get "sliderMessageWithoutPrefixSuffix"(): string
get "selectedRangeDoubleValue"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RangeSliderButton$Type = ($RangeSliderButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RangeSliderButton_ = $RangeSliderButton$Type;
}}
declare module "packages/de/keksuccino/melody/$MelodyForge" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $MelodyForge {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MelodyForge$Type = ($MelodyForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MelodyForge_ = $MelodyForge$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/$JsonUtils" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$URL, $URL$Type} from "packages/java/net/$URL"

export class $JsonUtils {

constructor()

public static "getJsonValueByPath"(arg0: $URL$Type, arg1: string): $List<(string)>
public static "getJsonValueByPath"(arg0: $File$Type, arg1: string): $List<(string)>
public static "getJsonValueByPath"(arg0: string, arg1: string): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonUtils$Type = ($JsonUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonUtils_ = $JsonUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/types/$TextFileType" {
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"
import {$FileCodec, $FileCodec$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileCodec"

export class $TextFileType extends $FileType<($IText)> {

constructor(arg0: $FileCodec$Type<($IText$Type)>, arg1: string, ...arg2: (string)[])

public "setLocalAllowed"(arg0: boolean): $TextFileType
public "addExtension"(arg0: string): $TextFileType
set "localAllowed"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextFileType$Type = ($TextFileType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextFileType_ = $TextFileType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/gamemode/$IsAdventureRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsAdventureRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsAdventureRequirement$Type = ($IsAdventureRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsAdventureRequirement_ = $IsAdventureRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$LoadingRequirements" {
import {$IsTextRequirement, $IsTextRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsTextRequirement"
import {$IsRealTimeSecondRequirement, $IsRealTimeSecondRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeSecondRequirement"
import {$IsSpectatorRequirement, $IsSpectatorRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/gamemode/$IsSpectatorRequirement"
import {$IsRealTimeDayRequirement, $IsRealTimeDayRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeDayRequirement"
import {$IsOsLinuxRequirement, $IsOsLinuxRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/system/$IsOsLinuxRequirement"
import {$IsWorldLoadedRequirement, $IsWorldLoadedRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/$IsWorldLoadedRequirement"
import {$IsElementHoveredRequirement, $IsElementHoveredRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsElementHoveredRequirement"
import {$IsServerIpRequirement, $IsServerIpRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsServerIpRequirement"
import {$IsLanguageRequirement, $IsLanguageRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsLanguageRequirement"
import {$IsFullscreenRequirement, $IsFullscreenRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsFullscreenRequirement"
import {$IsWindowHeightRequirement, $IsWindowHeightRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsWindowHeightRequirement"
import {$IsCreativeRequirement, $IsCreativeRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/gamemode/$IsCreativeRequirement"
import {$IsButtonActiveRequirement, $IsButtonActiveRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsButtonActiveRequirement"
import {$IsRealTimeYearRequirement, $IsRealTimeYearRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeYearRequirement"
import {$IsSurvivalRequirement, $IsSurvivalRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/gamemode/$IsSurvivalRequirement"
import {$IsWindowHeightBiggerThanRequirement, $IsWindowHeightBiggerThanRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsWindowHeightBiggerThanRequirement"
import {$IsOsMacOSRequirement, $IsOsMacOSRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/system/$IsOsMacOSRequirement"
import {$IsLayoutEnabledRequirement, $IsLayoutEnabledRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsLayoutEnabledRequirement"
import {$IsRealTimeWeekDayRequirement, $IsRealTimeWeekDayRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeWeekDayRequirement"
import {$IsMultiplayerRequirement, $IsMultiplayerRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/$IsMultiplayerRequirement"
import {$IsModLoadedRequirement, $IsModLoadedRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsModLoadedRequirement"
import {$IsMenuTitleRequirement, $IsMenuTitleRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsMenuTitleRequirement"
import {$IsAdventureRequirement, $IsAdventureRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/gamemode/$IsAdventureRequirement"
import {$IsWindowWidthBiggerThanRequirement, $IsWindowWidthBiggerThanRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsWindowWidthBiggerThanRequirement"
import {$IsNumberRequirement, $IsNumberRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsNumberRequirement"
import {$IsRealTimeHourRequirement, $IsRealTimeHourRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeHourRequirement"
import {$IsRealTimeMonthRequirement, $IsRealTimeMonthRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeMonthRequirement"
import {$FileExistsRequirement, $FileExistsRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/system/$FileExistsRequirement"
import {$IsRealTimeMinuteRequirement, $IsRealTimeMinuteRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeMinuteRequirement"
import {$IsOsWindowsRequirement, $IsOsWindowsRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/system/$IsOsWindowsRequirement"
import {$IsAnyElementHoveredRequirement, $IsAnyElementHoveredRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsAnyElementHoveredRequirement"
import {$IsAnyButtonHoveredRequirement, $IsAnyButtonHoveredRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsAnyButtonHoveredRequirement"
import {$IsServerOnlineRequirement, $IsServerOnlineRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsServerOnlineRequirement"
import {$IsGuiScaleRequirement, $IsGuiScaleRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsGuiScaleRequirement"
import {$IsSingleplayerRequirement, $IsSingleplayerRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/$IsSingleplayerRequirement"
import {$IsWindowWidthRequirement, $IsWindowWidthRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsWindowWidthRequirement"
import {$IsVariableValueRequirement, $IsVariableValueRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsVariableValueRequirement"

export class $LoadingRequirements {
static readonly "IS_ELEMENT_HOVERED": $IsElementHoveredRequirement
static readonly "IS_ANY_ELEMENT_HOVERED": $IsAnyElementHoveredRequirement
static readonly "IS_ANY_BUTTON_HOVERED": $IsAnyButtonHoveredRequirement
static readonly "IS_LAYOUT_ENABLED": $IsLayoutEnabledRequirement
static readonly "IS_GUI_SCALE": $IsGuiScaleRequirement
static readonly "IS_BUTTON_ACTIVE": $IsButtonActiveRequirement
static readonly "IS_MENU_TITLE": $IsMenuTitleRequirement
static readonly "IS_REAL_TIME_DAY": $IsRealTimeDayRequirement
static readonly "IS_REAL_TIME_HOUR": $IsRealTimeHourRequirement
static readonly "IS_REAL_TIME_MINUTE": $IsRealTimeMinuteRequirement
static readonly "IS_REAL_TIME_MONTH": $IsRealTimeMonthRequirement
static readonly "IS_REAL_TIME_SECOND": $IsRealTimeSecondRequirement
static readonly "IS_REAL_TIME_WEEK_DAY": $IsRealTimeWeekDayRequirement
static readonly "IS_REAL_TIME_YEAR": $IsRealTimeYearRequirement
static readonly "FILE_EXISTS": $FileExistsRequirement
static readonly "IS_OS_LINUX": $IsOsLinuxRequirement
static readonly "IS_OS_MAC_OS": $IsOsMacOSRequirement
static readonly "IS_OS_WINDOWS": $IsOsWindowsRequirement
static readonly "IS_FULLSCREEN": $IsFullscreenRequirement
static readonly "IS_WINDOW_WIDTH": $IsWindowWidthRequirement
static readonly "IS_WINDOW_HEIGHT": $IsWindowHeightRequirement
static readonly "IS_WINDOW_WIDTH_BIGGER_THAN": $IsWindowWidthBiggerThanRequirement
static readonly "IS_WINDOW_HEIGHT_BIGGER_THAN": $IsWindowHeightBiggerThanRequirement
static readonly "IS_ADVENTURE": $IsAdventureRequirement
static readonly "IS_CREATIVE": $IsCreativeRequirement
static readonly "IS_SPECTATOR": $IsSpectatorRequirement
static readonly "IS_SURVIVAL": $IsSurvivalRequirement
static readonly "IS_MULTIPLAYER": $IsMultiplayerRequirement
static readonly "IS_SINGLEPLAYER": $IsSingleplayerRequirement
static readonly "IS_WORLD_LOADED": $IsWorldLoadedRequirement
static readonly "IS_LANGUAGE": $IsLanguageRequirement
static readonly "IS_MOD_LOADED": $IsModLoadedRequirement
static readonly "IS_NUMBER": $IsNumberRequirement
static readonly "IS_TEXT": $IsTextRequirement
static readonly "IS_SERVER_IP": $IsServerIpRequirement
static readonly "IS_SERVER_ONLINE": $IsServerOnlineRequirement
static readonly "IS_VARIABLE_VALUE": $IsVariableValueRequirement

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadingRequirements$Type = ($LoadingRequirements);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadingRequirements_ = $LoadingRequirements$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/konkrete/input/$CharacterFilter"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TextEditorLine, $TextEditorLine$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorLine"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Tooltip, $Tooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EditBox, $EditBox$Type} from "packages/net/minecraft/client/gui/components/$EditBox"

export class $TextEditorScreen extends $Screen {
 "formattingRules": $List<($TextEditorFormattingRule)>
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Component$Type, arg1: $CharacterFilter$Type, arg2: $Consumer$Type<(string)>)
constructor(arg0: $CharacterFilter$Type, arg1: $Consumer$Type<(string)>)

public static "build"(arg0: $Component$Type, arg1: $CharacterFilter$Type, arg2: $Consumer$Type<(string)>): $TextEditorScreen
public "getText"(): string
public "setText"(arg0: string): $TextEditorScreen
public "getLines"(): $List<($TextEditorLine)>
public "getEditorAreaY"(): integer
public "getEditorAreaWidth"(): integer
public "getTotalLineHeight"(): integer
public "updateLines"(arg0: $Consumer$Type<($TextEditorLine$Type)>): void
public "goUpLine"(): void
public "addLineAtIndex"(arg0: integer): $TextEditorLine
public "setFocusedLine"(arg0: integer): void
public "resetHighlighting"(): void
public "getLineIndex"(arg0: $TextEditorLine$Type): integer
public "getFocusedLine"(): $TextEditorLine
public "removeLastLine"(): void
public "getHoveredLine"(): $TextEditorLine
public "isLineFocused"(): boolean
public "getLineAfter"(arg0: $TextEditorLine$Type): $TextEditorLine
public "removeLineAtIndex"(arg0: integer): void
public "getLineBefore"(arg0: $TextEditorLine$Type): $TextEditorLine
public "isTextHighlighted"(): boolean
public "pasteText"(arg0: string): void
public "cutHighlightedText"(): string
public "isMultilineMode"(): boolean
public "isBoldTitle"(): boolean
public "getHighlightedText"(): string
public "correctYScroll"(arg0: integer): void
public "goDownLine"(arg0: boolean): void
public "getTextAfterCursor"(): string
public "setBoldTitle"(arg0: boolean): $TextEditorScreen
public "getCopyOfLines"(): $List<($TextEditorLine)>
public "getEditBoxCursorX"(arg0: $EditBox$Type): integer
public "correctXScroll"(arg0: $TextEditorLine$Type): void
public "scrollToLine"(arg0: integer, arg1: boolean): void
public "scrollToLine"(arg0: integer, arg1: integer): void
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "onClose"(): void
public "m_7856_"(): void
public "getLine"(arg0: integer): $TextEditorLine
public "isMouseInteractingWithPlaceholderGrabbers"(): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "tick"(): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "addLine"(): $TextEditorLine
public "setMultilineMode"(arg0: boolean): $TextEditorScreen
public "setTextValidator"(arg0: $ConsumingSupplier$Type<($TextEditorScreen$Type), (boolean)>): $TextEditorScreen
public "getLineCount"(): integer
public "updateRightClickContextMenu"(): void
public "updateCurrentLineWidth"(): void
public "updatePlaceholderEntries"(arg0: string, arg1: boolean, arg2: boolean): void
public "getEditorAreaHeight"(): integer
public "isHighlightedTextHovered"(): boolean
public "isMouseInteractingWithGrabbers"(): boolean
public "getPlaceholderEntriesRenderOffsetY"(): integer
public "getPlaceholderEntriesRenderOffsetX"(): integer
public "getLineRenderOffsetX"(): integer
public "placeholdersAllowed"(): boolean
public "isMouseInsideEditorArea"(): boolean
public "getFocusedLineIndex"(): integer
public "getTotalScrollHeight"(): integer
public "isAtLeastOneLineInHighlightMode"(): boolean
public "getTotalPlaceholderEntriesWidth"(): integer
public "getTotalPlaceholderEntriesHeight"(): integer
public "isInMouseHighlightingMode"(): boolean
public "getTotalScrollWidth"(): integer
public "getLineRenderOffsetY"(): integer
public "deleteHighlightedText"(): void
public "getLinesBetweenIndexes"(arg0: integer, arg1: integer): $List<($TextEditorLine)>
public "getTextBeforeCursor"(): string
public "setPlaceholdersAllowed"(arg0: boolean): $TextEditorScreen
public "setTextValidatorUserFeedback"(arg0: $Tooltip$Type): $TextEditorScreen
public "getEditorAreaX"(): integer
get "text"(): string
set "text"(value: string)
get "lines"(): $List<($TextEditorLine)>
get "editorAreaY"(): integer
get "editorAreaWidth"(): integer
get "totalLineHeight"(): integer
set "focusedLine"(value: integer)
get "focusedLine"(): $TextEditorLine
get "hoveredLine"(): $TextEditorLine
get "lineFocused"(): boolean
get "textHighlighted"(): boolean
get "multilineMode"(): boolean
get "boldTitle"(): boolean
get "highlightedText"(): string
get "textAfterCursor"(): string
set "boldTitle"(value: boolean)
get "copyOfLines"(): $List<($TextEditorLine)>
get "mouseInteractingWithPlaceholderGrabbers"(): boolean
set "multilineMode"(value: boolean)
set "textValidator"(value: $ConsumingSupplier$Type<($TextEditorScreen$Type), (boolean)>)
get "lineCount"(): integer
get "editorAreaHeight"(): integer
get "highlightedTextHovered"(): boolean
get "mouseInteractingWithGrabbers"(): boolean
get "placeholderEntriesRenderOffsetY"(): integer
get "placeholderEntriesRenderOffsetX"(): integer
get "lineRenderOffsetX"(): integer
get "mouseInsideEditorArea"(): boolean
get "focusedLineIndex"(): integer
get "totalScrollHeight"(): integer
get "atLeastOneLineInHighlightMode"(): boolean
get "totalPlaceholderEntriesWidth"(): integer
get "totalPlaceholderEntriesHeight"(): integer
get "inMouseHighlightingMode"(): boolean
get "totalScrollWidth"(): integer
get "lineRenderOffsetY"(): integer
get "textBeforeCursor"(): string
set "textValidatorUserFeedback"(value: $Tooltip$Type)
get "editorAreaX"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEditorScreen$Type = ($TextEditorScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEditorScreen_ = $TextEditorScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture" {
import {$AspectRatio, $AspectRatio$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$AspectRatio"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderableResource, $RenderableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$RenderableResource"

export interface $ITexture extends $RenderableResource {

 "reset"(): void
 "getAspectRatio"(): $AspectRatio
 "getWidth"(): integer
 "getHeight"(): integer
 "getResourceLocation"(): $ResourceLocation
 "open"(): $InputStream
 "isReady"(): boolean
 "isClosed"(): boolean
 "waitForLoadingCompletedOrFailed"(arg0: long): void
 "waitForReady"(arg0: long): void
 "isLoadingFailed"(): boolean
 "isLoadingCompleted"(): boolean
 "close"(): void
}

export namespace $ITexture {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITexture$Type = ($ITexture);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITexture_ = $ITexture$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/$FileUtils" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FileUtils as $FileUtils$0, $FileUtils$Type as $FileUtils$0$Type} from "packages/de/keksuccino/konkrete/file/$FileUtils"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"

export class $FileUtils extends $FileUtils$0 {

constructor()

public static "createDirectory"(arg0: $File$Type): $File
public static "readTextLinesFrom"(arg0: $InputStream$Type): $List<(string)>
public static "readTextLinesFrom"(arg0: $File$Type): $List<(string)>
public static "openFile"(arg0: $File$Type): void
public static "generateUniqueFileName"(arg0: $File$Type, arg1: boolean): $File
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileUtils$Type = ($FileUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileUtils_ = $FileUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$StringBuilderScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $StringBuilderScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "buildString"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringBuilderScreen$Type = ($StringBuilderScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringBuilderScreen_ = $StringBuilderScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MinNumberPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MinNumberPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinNumberPlaceholder$Type = ($MinNumberPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinNumberPlaceholder_ = $MinNumberPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/input/$TextValidators" {
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"

export class $TextValidators {
static readonly "NO_EMPTY_STRING_TEXT_VALIDATOR": $ConsumingSupplier<(string), (boolean)>
static readonly "NO_EMPTY_STRING_SPACES_ALLOWED_TEXT_VALIDATOR": $ConsumingSupplier<(string), (boolean)>
static readonly "BASIC_URL_TEXT_VALIDATOR": $ConsumingSupplier<(string), (boolean)>
static readonly "HEX_COLOR_TEXT_VALIDATOR": $ConsumingSupplier<(string), (boolean)>
static readonly "INTEGER_TEXT_VALIDATOR": $ConsumingSupplier<(string), (boolean)>
static readonly "DOUBLE_TEXT_VALIDATOR": $ConsumingSupplier<(string), (boolean)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextValidators$Type = ($TextValidators);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextValidators_ = $TextValidators$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$Average" {
import {$AbstractAggregation, $AbstractAggregation$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$AbstractAggregation"

export class $Average extends $AbstractAggregation {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Average$Type = ($Average);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Average_ = $Average$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/$PacketHandler$PacketDirection" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $PacketHandler$PacketDirection extends $Enum<($PacketHandler$PacketDirection)> {
static readonly "TO_SERVER": $PacketHandler$PacketDirection
static readonly "TO_CLIENT": $PacketHandler$PacketDirection


public static "values"(): ($PacketHandler$PacketDirection)[]
public static "valueOf"(arg0: string): $PacketHandler$PacketDirection
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketHandler$PacketDirection$Type = (("to_server") | ("to_client")) | ($PacketHandler$PacketDirection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketHandler$PacketDirection_ = $PacketHandler$PacketDirection$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$JsonProvider" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"

export interface $JsonProvider {

 "length"(arg0: any): integer
 "isArray"(arg0: any): boolean
 "setProperty"(arg0: any, arg1: any, arg2: any): void
 "unwrap"(arg0: any): any
 "createMap"(): any
 "parse"(arg0: string): any
 "parse"(arg0: $InputStream$Type, arg1: string): any
 "parse"(arg0: (byte)[]): any
 "toJson"(arg0: any): string
 "setArrayIndex"(arg0: any, arg1: integer, arg2: any): void
 "toIterable"(arg0: any): $Iterable<(any)>
 "createArray"(): any
 "getMapValue"(arg0: any, arg1: string): any
 "getPropertyKeys"(arg0: any): $Collection<(string)>
 "isMap"(arg0: any): boolean
 "removeProperty"(arg0: any, arg1: any): void
 "getArrayIndex"(arg0: any, arg1: integer): any
/**
 * 
 * @deprecated
 */
 "getArrayIndex"(arg0: any, arg1: integer, arg2: boolean): any
}

export namespace $JsonProvider {
const UNDEFINED: any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonProvider$Type = ($JsonProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonProvider_ = $JsonProvider$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/animation/$AnimationElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $AnimationElement extends $AbstractElement {
 "animationName": string
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "restoreAspectRatio"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationElement$Type = ($AnimationElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationElement_ = $AnimationElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/entry/$TextListScrollAreaEntry" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$ScrollAreaEntry, $ScrollAreaEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/entry/$ScrollAreaEntry"

export class $TextListScrollAreaEntry extends $ScrollAreaEntry {
 "listDotColor": $DrawableColor
 "font": $Font
 "parent": $ScrollArea
 "deselectOtherEntriesOnSelect": boolean
 "selectOnClick": boolean
 "index": integer
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: $ScrollArea$Type, arg1: $Component$Type, arg2: $DrawableColor$Type, arg3: $Consumer$Type<($TextListScrollAreaEntry$Type)>)

public "getText"(): $Component
public "setText"(arg0: $Component$Type): void
public "renderEntry"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "onClick"(arg0: $ScrollAreaEntry$Type, arg1: double, arg2: double, arg3: integer): void
public "getTextWidth"(): integer
get "text"(): $Component
set "text"(value: $Component$Type)
get "textWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextListScrollAreaEntry$Type = ($TextListScrollAreaEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextListScrollAreaEntry_ = $TextListScrollAreaEntry$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode" {
import {$ValueNodes$StringNode, $ValueNodes$StringNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$StringNode"
import {$ValueNodes$PathNode, $ValueNodes$PathNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$PathNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ValueNodes$ClassNode, $ValueNodes$ClassNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$ClassNode"
import {$ValueNodes$PredicateNode, $ValueNodes$PredicateNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$PredicateNode"
import {$Path, $Path$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$Path"
import {$ValueNodes$JsonNode, $ValueNodes$JsonNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$JsonNode"
import {$ValueNodes$PatternNode, $ValueNodes$PatternNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$PatternNode"
import {$ValueNodes$ValueListNode, $ValueNodes$ValueListNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$ValueListNode"
import {$ValueNodes$OffsetDateTimeNode, $ValueNodes$OffsetDateTimeNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$OffsetDateTimeNode"
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$Pattern, $Pattern$Type} from "packages/java/util/regex/$Pattern"
import {$ValueNodes$NumberNode, $ValueNodes$NumberNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$NumberNode"
import {$ValueNodes$BooleanNode, $ValueNodes$BooleanNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$BooleanNode"
import {$ValueNodes$UndefinedNode, $ValueNodes$UndefinedNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$UndefinedNode"
import {$ValueNodes$NullNode, $ValueNodes$NullNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$NullNode"

export class $ValueNode {

constructor()

public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public static "createJsonNode"(arg0: any): $ValueNodes$JsonNode
public static "createJsonNode"(arg0: charseq): $ValueNodes$JsonNode
public static "createNullNode"(): $ValueNodes$NullNode
public "asPathNode"(): $ValueNodes$PathNode
public static "createPatternNode"(arg0: $Pattern$Type): $ValueNodes$PatternNode
public static "createPatternNode"(arg0: charseq): $ValueNodes$PatternNode
public static "createStringNode"(arg0: charseq, arg1: boolean): $ValueNodes$StringNode
public "isNumberNode"(): boolean
public "asPatternNode"(): $ValueNodes$PatternNode
public "isStringNode"(): boolean
public "asNumberNode"(): $ValueNodes$NumberNode
public "isPatternNode"(): boolean
public "isPathNode"(): boolean
public "asStringNode"(): $ValueNodes$StringNode
public static "createPathNode"(arg0: $Path$Type): $ValueNode
public static "createPathNode"(arg0: charseq, arg1: boolean, arg2: boolean): $ValueNodes$PathNode
public static "createNumberNode"(arg0: charseq): $ValueNodes$NumberNode
public static "createBooleanNode"(arg0: charseq): $ValueNodes$BooleanNode
public "isBooleanNode"(): boolean
public "asNullNode"(): $ValueNodes$NullNode
public "isClassNode"(): boolean
public "isNullNode"(): boolean
public static "toValueNode"(arg0: any): $ValueNode
public "asValueListNode"(): $ValueNodes$ValueListNode
public "isUndefinedNode"(): boolean
public "isPredicateNode"(): boolean
public "asClassNode"(): $ValueNodes$ClassNode
public "asJsonNode"(): $ValueNodes$JsonNode
public "asPredicateNode"(): $ValueNodes$PredicateNode
public "isValueListNode"(): boolean
public "asBooleanNode"(): $ValueNodes$BooleanNode
public "isJsonNode"(): boolean
public "asUndefinedNode"(): $ValueNodes$UndefinedNode
public static "createClassNode"(arg0: $Class$Type<(any)>): $ValueNodes$ClassNode
public static "createUndefinedNode"(): $ValueNodes$UndefinedNode
public "asOffsetDateTimeNode"(): $ValueNodes$OffsetDateTimeNode
public static "createOffsetDateTimeNode"(arg0: charseq): $ValueNodes$OffsetDateTimeNode
public "isOffsetDateTimeNode"(): boolean
get "numberNode"(): boolean
get "stringNode"(): boolean
get "patternNode"(): boolean
get "pathNode"(): boolean
get "booleanNode"(): boolean
get "classNode"(): boolean
get "nullNode"(): boolean
get "undefinedNode"(): boolean
get "predicateNode"(): boolean
get "valueListNode"(): boolean
get "jsonNode"(): boolean
get "offsetDateTimeNode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNode$Type = ($ValueNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNode_ = $ValueNode$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$UnknownFunctionOrVariableException" {
import {$IllegalArgumentException, $IllegalArgumentException$Type} from "packages/java/lang/$IllegalArgumentException"

export class $UnknownFunctionOrVariableException extends $IllegalArgumentException {

constructor(arg0: string, arg1: integer, arg2: integer)

public "getMessage"(): string
public "getPosition"(): integer
public "getToken"(): string
public "getExpression"(): string
get "message"(): string
get "position"(): integer
get "token"(): string
get "expression"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UnknownFunctionOrVariableException$Type = ($UnknownFunctionOrVariableException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UnknownFunctionOrVariableException_ = $UnknownFunctionOrVariableException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$TooltipHandler$HandledTooltip" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Tooltip, $Tooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip"

export class $TooltipHandler$HandledTooltip {
readonly "tooltip": $Tooltip
readonly "shouldRender": $BooleanSupplier
readonly "removeOnScreenInitOrResize": boolean
readonly "removeAfterScreenRender": boolean


public "remove"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipHandler$HandledTooltip$Type = ($TooltipHandler$HandledTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipHandler$HandledTooltip_ = $TooltipHandler$HandledTooltip$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/$LayoutHandler$UniversalLayoutInclusionRule" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $LayoutHandler$UniversalLayoutInclusionRule {

 "includeUniversalLayouts"(arg0: string): boolean

(arg0: string): boolean
}

export namespace $LayoutHandler$UniversalLayoutInclusionRule {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutHandler$UniversalLayoutInclusionRule$Type = ($LayoutHandler$UniversalLayoutInclusionRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutHandler$UniversalLayoutInclusionRule_ = $LayoutHandler$UniversalLayoutInclusionRule$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier" {
import {$MenuBar$MenuBarEntry, $MenuBar$MenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry"
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"

export interface $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier {

 "get"(arg0: $MenuBar$Type, arg1: $MenuBar$MenuBarEntry$Type): boolean

(arg0: $MenuBar$Type, arg1: $MenuBar$MenuBarEntry$Type): boolean
}

export namespace $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type = ($MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier_ = $MenuBar$MenuBarEntry$MenuBarEntryBooleanSupplier$Type;
}}
declare module "packages/de/keksuccino/melody/platform/services/$IPlatformCompatibilityLayer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IPlatformCompatibilityLayer {

}

export namespace $IPlatformCompatibilityLayer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPlatformCompatibilityLayer$Type = ($IPlatformCompatibilityLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPlatformCompatibilityLayer_ = $IPlatformCompatibilityLayer$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/text/$Concatenate" {
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathFunction, $PathFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunction"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export class $Concatenate implements $PathFunction {

constructor()

public "invoke"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContext$Type, arg4: $List$Type<($Parameter$Type)>): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Concatenate$Type = ($Concatenate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Concatenate_ = $Concatenate$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/event/acara/$EventListener" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $EventListener extends $Annotation {

 "priority"(): integer
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $EventListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventListener$Type = ($EventListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventListener_ = $EventListener$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/$UIComponent" {
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FocuslessContainerEventHandler, $FocuslessContainerEventHandler$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/$FocuslessContainerEventHandler"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$UIBase, $UIBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/$UIBase"

export class $UIComponent extends $UIBase implements $FocuslessContainerEventHandler, $Renderable, $NarratableEntry {
 "posZ": float
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor()

public "setVisible"(arg0: boolean): void
public "children"(): $List<($GuiEventListener)>
/**
 * 
 * @deprecated
 */
public "isMouseOver"(arg0: double, arg1: double): boolean
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "setDragging"(arg0: boolean): void
public "isDragging"(): boolean
public "setFocused"(arg0: boolean): void
public "isVisible"(): boolean
public "isHovered"(): boolean
public "getWidth"(): float
public "getHeight"(): float
public "getRealMouseY"(): double
public "getComponentScale"(): float
public "renderComponent"(arg0: $GuiGraphics$Type, arg1: double, arg2: double, arg3: float): void
public "getTranslatedX"(): float
public "getTranslatedY"(): float
public "getRealMouseX"(): double
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
/**
 * 
 * @deprecated
 */
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
/**
 * 
 * @deprecated
 */
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
/**
 * 
 * @deprecated
 */
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
/**
 * 
 * @deprecated
 */
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "isFocused"(): boolean
/**
 * 
 * @deprecated
 */
public "mouseMoved"(arg0: double, arg1: double): void
public "getTranslatedMouseX"(): double
public "getTranslatedMouseY"(): double
public "getFixedComponentScale"(): float
public "isMouseOver"(): boolean
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "setFocused"(arg0: $GuiEventListener$Type): void
public "getFocused"(): $GuiEventListener
public "charTyped"(arg0: character, arg1: integer): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "isActive"(): boolean
public "getCurrentFocusPath"(): $ComponentPath
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getChildAt"(arg0: double, arg1: double): $Optional<($GuiEventListener)>
public "magicalSpecialHackyFocus"(arg0: $GuiEventListener$Type): void
public "getTabOrderGroup"(): integer
public "getRectangle"(): $ScreenRectangle
set "visible"(value: boolean)
set "dragging"(value: boolean)
get "dragging"(): boolean
set "focused"(value: boolean)
get "visible"(): boolean
get "hovered"(): boolean
get "width"(): float
get "height"(): float
get "realMouseY"(): double
get "componentScale"(): float
get "translatedX"(): float
get "translatedY"(): float
get "realMouseX"(): double
get "focused"(): boolean
get "translatedMouseX"(): double
get "translatedMouseY"(): double
get "fixedComponentScale"(): float
get "mouseOver"(): boolean
set "focused"(value: $GuiEventListener$Type)
get "focused"(): $GuiEventListener
get "active"(): boolean
get "currentFocusPath"(): $ComponentPath
get "tabOrderGroup"(): integer
get "rectangle"(): $ScreenRectangle
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UIComponent$Type = ($UIComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UIComponent_ = $UIComponent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$ClassExtender" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $ClassExtender extends $Annotation {

 "value"(): ($Class<(any)>)[]
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $ClassExtender {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClassExtender$Type = ($ClassExtender);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClassExtender_ = $ClassExtender$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/cycle/$CommonCycles$CycleOnOff" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$LocalizedEnum, $LocalizedEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedEnum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $CommonCycles$CycleOnOff extends $Enum<($CommonCycles$CycleOnOff)> implements $LocalizedEnum<($CommonCycles$CycleOnOff)> {
static readonly "ON": $CommonCycles$CycleOnOff
static readonly "OFF": $CommonCycles$CycleOnOff


public "getName"(): string
public static "values"(): ($CommonCycles$CycleOnOff)[]
public static "valueOf"(arg0: string): $CommonCycles$CycleOnOff
public static "getByName"(arg0: string): $CommonCycles$CycleOnOff
public "getAsBoolean"(): boolean
public "getValueComponentStyle"(): $Style
public "getLocalizationKeyBase"(): string
public static "getByBoolean"(arg0: boolean): $CommonCycles$CycleOnOff
public "getByNameInternal"(arg0: string): $CommonCycles$CycleOnOff
public "getValues"(): ($CommonCycles$CycleOnOff)[]
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "asBoolean"(): boolean
get "valueComponentStyle"(): $Style
get "localizationKeyBase"(): string
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonCycles$CycleOnOff$Type = (("off") | ("on")) | ($CommonCycles$CycleOnOff);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonCycles$CycleOnOff_ = $CommonCycles$CycleOnOff$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/customgui/$CustomGuiBaseScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$CustomGui, $CustomGui$Type} from "packages/de/keksuccino/fancymenu/customization/customgui/$CustomGui"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $CustomGuiBaseScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $CustomGui$Type, arg1: $Screen$Type, arg2: $Screen$Type)

public "getIdentifier"(): string
public "getTitleString"(): string
public "shouldCloseOnEsc"(): boolean
public "onClose"(): void
public "renderBackground"(arg0: $GuiGraphics$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isPauseScreen"(): boolean
public "getOverriddenScreen"(): $Screen
get "identifier"(): string
get "titleString"(): string
get "pauseScreen"(): boolean
get "overriddenScreen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomGuiBaseScreen$Type = ($CustomGuiBaseScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomGuiBaseScreen_ = $CustomGuiBaseScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/cpu/$CpuInfoPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $CpuInfoPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getAlternativeIdentifiers"(): $List<(string)>
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "alternativeIdentifiers"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CpuInfoPlaceholder$Type = ($CpuInfoPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CpuInfoPlaceholder_ = $CpuInfoPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/branding/$TitleScreenBrandingBuilder" {
import {$TitleScreenLayer, $TitleScreenLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer"
import {$TitleScreenBrandingDeepEditorElement, $TitleScreenBrandingDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/branding/$TitleScreenBrandingDeepEditorElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$TitleScreenBrandingDeepElement, $TitleScreenBrandingDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/branding/$TitleScreenBrandingDeepElement"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

export class $TitleScreenBrandingBuilder extends $DeepElementBuilder<($TitleScreenLayer), ($TitleScreenBrandingDeepElement), ($TitleScreenBrandingDeepEditorElement)> {
readonly "layer": D

constructor(arg0: $TitleScreenLayer$Type)

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "deserializeElement"(arg0: $SerializedElement$Type): $TitleScreenBrandingDeepElement
public "stackElements"(arg0: $TitleScreenBrandingDeepElement$Type, arg1: $TitleScreenBrandingDeepElement$Type): void
public "wrapIntoEditorElement"(arg0: $TitleScreenBrandingDeepElement$Type, arg1: $LayoutEditorScreen$Type): $TitleScreenBrandingDeepEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenBrandingBuilder$Type = ($TitleScreenBrandingBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenBrandingBuilder_ = $TitleScreenBrandingBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $NavigatableWidget {

 "isNavigatable"(): boolean
 "setNavigatable"(arg0: boolean): void
 "isFocusable"(): boolean
 "setFocusable"(arg0: boolean): void
}

export namespace $NavigatableWidget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NavigatableWidget$Type = ($NavigatableWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NavigatableWidget_ = $NavigatableWidget$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$Evaluator" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"

export interface $Evaluator {

 "evaluate"(arg0: $ValueNode$Type, arg1: $ValueNode$Type, arg2: $Predicate$PredicateContext$Type): boolean

(arg0: $ValueNode$Type, arg1: $ValueNode$Type, arg2: $Predicate$PredicateContext$Type): boolean
}

export namespace $Evaluator {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Evaluator$Type = ($Evaluator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Evaluator_ = $Evaluator$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeMinutePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $RealtimeMinutePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RealtimeMinutePlaceholder$Type = ($RealtimeMinutePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RealtimeMinutePlaceholder_ = $RealtimeMinutePlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinCommandSuggestions" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$CommandSuggestions$SuggestionsList, $CommandSuggestions$SuggestionsList$Type} from "packages/net/minecraft/client/gui/components/$CommandSuggestions$SuggestionsList"
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ParseResults, $ParseResults$Type} from "packages/com/mojang/brigadier/$ParseResults"
import {$Suggestion, $Suggestion$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestion"
import {$SharedSuggestionProvider, $SharedSuggestionProvider$Type} from "packages/net/minecraft/commands/$SharedSuggestionProvider"

export interface $IMixinCommandSuggestions {

 "getAllowSuggestionsFancyMenu"(): boolean
 "setPendingSuggestionsFancyMenu"(arg0: $CompletableFuture$Type<($Suggestions$Type)>): void
 "getCommandUsageFancyMenu"(): $List<($FormattedCharSequence)>
 "invokeUpdateUsageInfoFancyMenu"(): void
 "setSuggestionsFancyMenu"(arg0: $CommandSuggestions$SuggestionsList$Type): void
 "getSuggestionsFancyMenu"(): $CommandSuggestions$SuggestionsList
 "setCurrentParseFancyMenu"(arg0: $ParseResults$Type<($SharedSuggestionProvider$Type)>): void
 "getPendingSuggestionsFancyMenu"(): $CompletableFuture<($Suggestions)>
 "invokeSortSuggestionsFancyMenu"(arg0: $Suggestions$Type): $List<($Suggestion)>
 "getCurrentParseFancyMenu"(): $ParseResults<($SharedSuggestionProvider)>
 "getKeepSuggestionsFancyMenu"(): boolean
}

export namespace $IMixinCommandSuggestions {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinCommandSuggestions$Type = ($IMixinCommandSuggestions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinCommandSuggestions_ = $IMixinCommandSuggestions$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/widgets/$LayoutEditorWidgets" {
import {$LayerLayoutEditorWidgetBuilder, $LayerLayoutEditorWidgetBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/widgets/layer/$LayerLayoutEditorWidgetBuilder"

export class $LayoutEditorWidgets {
static readonly "LAYERS": $LayerLayoutEditorWidgetBuilder

constructor()

public static "registerAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutEditorWidgets$Type = ($LayoutEditorWidgets);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutEditorWidgets_ = $LayoutEditorWidgets$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/variables/$SetVariableAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $SetVariableAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetVariableAction$Type = ($SetVariableAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetVariableAction_ = $SetVariableAction$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$CollectionMapper" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CollectionMapper {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CollectionMapper$Type = ($CollectionMapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CollectionMapper_ = $CollectionMapper$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/color/$TextColorFormatter" {
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $TextColorFormatter {

constructor(arg0: character, arg1: $DrawableColor$Type)

public "getCode"(): character
public "getColor"(): $DrawableColor
public "getCodeString"(): string
public "getStyle"(): $Style
get "code"(): character
get "color"(): $DrawableColor
get "codeString"(): string
get "style"(): $Style
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextColorFormatter$Type = ($TextColorFormatter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextColorFormatter_ = $TextColorFormatter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/ticker/$TickerElement$TickerElementThreadController" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $TickerElement$TickerElementThreadController {
 "running": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickerElement$TickerElementThreadController$Type = ($TickerElement$TickerElementThreadController);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickerElement$TickerElementThreadController_ = $TickerElement$TickerElementThreadController$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsButtonActiveRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsButtonActiveRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsButtonActiveRequirement$Type = ($IsButtonActiveRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsButtonActiveRequirement_ = $IsButtonActiveRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorTheme" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $UIColorTheme {
 "menu_bar_bottom_line_color": $DrawableColor
 "layout_editor_mouse_selection_rectangle_color": $DrawableColor
 "layout_editor_grid_color_normal": $DrawableColor
 "layout_editor_grid_color_center": $DrawableColor
 "layout_editor_element_border_color_normal": $DrawableColor
 "layout_editor_element_border_color_selected": $DrawableColor
 "layout_editor_element_dragging_not_allowed_color": $DrawableColor
 "layout_editor_anchor_point_overlay_color_base": $DrawableColor
 "layout_editor_anchor_point_overlay_color_border": $DrawableColor
 "layout_editor_close_icon_color": $DrawableColor
 "scroll_grabber_color_normal": $DrawableColor
 "scroll_grabber_color_hover": $DrawableColor
 "screen_background_color": $DrawableColor
 "screen_background_color_darker": $DrawableColor
 "element_border_color_normal": $DrawableColor
 "element_border_color_hover": $DrawableColor
 "element_background_color_normal": $DrawableColor
 "element_background_color_hover": $DrawableColor
 "slider_handle_color_normal": $DrawableColor
 "slider_handle_color_hover": $DrawableColor
 "area_background_color": $DrawableColor
 "edit_box_background_color": $DrawableColor
 "edit_box_border_color_normal": $DrawableColor
 "edit_box_border_color_focused": $DrawableColor
 "list_entry_color_selected_hovered": $DrawableColor
 "text_editor_sidebar_color": $DrawableColor
 "text_editor_line_number_text_color_normal": $DrawableColor
 "text_editor_line_number_text_color_selected": $DrawableColor
 "listing_dot_color_1": $DrawableColor
 "listing_dot_color_2": $DrawableColor
 "listing_dot_color_3": $DrawableColor
 "suggestions_background_color": $DrawableColor
 "suggestions_text_color_normal": $DrawableColor
 "suggestions_text_color_selected": $DrawableColor
 "ui_texture_color": $DrawableColor
 "generic_text_base_color": $DrawableColor
 "element_label_color_normal": $DrawableColor
 "element_label_color_inactive": $DrawableColor
 "edit_box_text_color_normal": $DrawableColor
 "edit_box_text_color_uneditable": $DrawableColor
 "edit_box_suggestion_text_color": $DrawableColor
 "description_area_text_color": $DrawableColor
 "text_editor_text_color": $DrawableColor
 "success_text_color": $DrawableColor
 "error_text_color": $DrawableColor
 "warning_text_color": $DrawableColor
 "text_editor_text_formatting_nested_text_color_1": $DrawableColor
 "text_editor_text_formatting_nested_text_color_2": $DrawableColor
 "text_editor_text_formatting_nested_text_color_3": $DrawableColor
 "text_editor_text_formatting_nested_text_color_4": $DrawableColor
 "text_editor_text_formatting_nested_text_color_5": $DrawableColor
 "text_editor_text_formatting_nested_text_color_6": $DrawableColor
 "text_editor_text_formatting_nested_text_color_7": $DrawableColor
 "text_editor_text_formatting_nested_text_color_8": $DrawableColor
 "text_editor_text_formatting_nested_text_color_9": $DrawableColor
 "text_editor_text_formatting_nested_text_color_10": $DrawableColor
 "text_editor_text_formatting_nested_text_color_11": $DrawableColor
 "text_editor_text_formatting_nested_text_color_12": $DrawableColor
 "text_editor_text_formatting_brackets_color": $DrawableColor

constructor(arg0: string, arg1: string)

public "getDisplayName"(): $Component
public "getIdentifier"(): string
public "setUITextureShaderColor"(arg0: $GuiGraphics$Type, arg1: float): void
get "displayName"(): $Component
get "identifier"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UIColorTheme$Type = ($UIColorTheme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UIColorTheme_ = $UIColorTheme$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/animation/$AnimationEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $AnimationEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationEditorElement$Type = ($AnimationEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationEditorElement_ = $AnimationEditorElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$LogicalOperator" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $LogicalOperator extends $Enum<($LogicalOperator)> {
static readonly "AND": $LogicalOperator
static readonly "NOT": $LogicalOperator
static readonly "OR": $LogicalOperator


public "toString"(): string
public static "values"(): ($LogicalOperator)[]
public static "valueOf"(arg0: string): $LogicalOperator
public static "fromString"(arg0: string): $LogicalOperator
public "getOperatorString"(): string
get "operatorString"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LogicalOperator$Type = (("not") | ("or") | ("and")) | ($LogicalOperator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LogicalOperator_ = $LogicalOperator$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/numeric/$AbstractAggregation" {
import {$EvaluationContext, $EvaluationContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$EvaluationContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PathFunction, $PathFunction$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$PathFunction"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export class $AbstractAggregation implements $PathFunction {

constructor()

public "invoke"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContext$Type, arg4: $List$Type<($Parameter$Type)>): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractAggregation$Type = ($AbstractAggregation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractAggregation_ = $AbstractAggregation$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$ParamType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ParamType extends $Enum<($ParamType)> {
static readonly "JSON": $ParamType
static readonly "PATH": $ParamType


public static "values"(): ($ParamType)[]
public static "valueOf"(arg0: string): $ParamType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParamType$Type = (("path") | ("json")) | ($ParamType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParamType_ = $ParamType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ProgressBarEditorElement, $ProgressBarEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarEditorElement"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$ProgressBarElement, $ProgressBarElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $ProgressBarElementBuilder extends $ElementBuilder<($ProgressBarElement), ($ProgressBarEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $ProgressBarElement$Type, arg1: $LayoutEditorScreen$Type): $ProgressBarEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProgressBarElementBuilder$Type = ($ProgressBarElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProgressBarElementBuilder_ = $ProgressBarElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$VanillaButtonLabelPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $VanillaButtonLabelPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaButtonLabelPlaceholder$Type = ($VanillaButtonLabelPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaButtonLabelPlaceholder_ = $VanillaButtonLabelPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/editbox/$EditBoxSuggestions" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$EditBoxSuggestions$SuggestionsRenderPosition, $EditBoxSuggestions$SuggestionsRenderPosition$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/editbox/$EditBoxSuggestions$SuggestionsRenderPosition"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ParseResults, $ParseResults$Type} from "packages/com/mojang/brigadier/$ParseResults"
import {$IMixinCommandSuggestions, $IMixinCommandSuggestions$Type} from "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinCommandSuggestions"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$CommandSuggestions$SuggestionsList, $CommandSuggestions$SuggestionsList$Type} from "packages/net/minecraft/client/gui/components/$CommandSuggestions$SuggestionsList"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CommandSuggestions, $CommandSuggestions$Type} from "packages/net/minecraft/client/gui/components/$CommandSuggestions"
import {$SharedSuggestionProvider, $SharedSuggestionProvider$Type} from "packages/net/minecraft/commands/$SharedSuggestionProvider"
import {$EditBox, $EditBox$Type} from "packages/net/minecraft/client/gui/components/$EditBox"

export class $EditBoxSuggestions extends $CommandSuggestions {
 "suggestions": $CommandSuggestions$SuggestionsList

constructor(arg0: $Minecraft$Type, arg1: $Screen$Type, arg2: $EditBox$Type, arg3: $Font$Type, arg4: boolean, arg5: boolean, arg6: integer, arg7: integer, arg8: boolean)

public "getAccessor"(): $IMixinCommandSuggestions
public "getBackgroundColor"(): $DrawableColor
public "enableOnlyCustomSuggestionsMode"(arg0: boolean): void
public "setAllowRenderUsage"(arg0: boolean): void
public "setSuggestionsRenderPosition"(arg0: $EditBoxSuggestions$SuggestionsRenderPosition$Type): void
public "setCustomSuggestions"(arg0: $List$Type<(string)>): void
public "setPendingSuggestions"(arg0: $CompletableFuture$Type<($Suggestions$Type)>): void
public "getPendingSuggestions"(): $CompletableFuture<($Suggestions)>
public "setAutoSuggestionsEnabled"(arg0: boolean): void
public "autoSuggestionsEnabled"(): boolean
public "getSuggestionsRenderPosition"(): $EditBoxSuggestions$SuggestionsRenderPosition
public "isOnlyCustomSuggestionsMode"(): boolean
public "setNormalTextColor"(arg0: $DrawableColor$Type): void
public "setBackgroundColor"(arg0: $DrawableColor$Type): void
public "isTextShadow"(): boolean
public "setTextShadow"(arg0: boolean): void
public "updateCommandInfo"(): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseScrolled"(arg0: double): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer): void
public "setSelectedTextColor"(arg0: $DrawableColor$Type): void
public "showSuggestions"(arg0: boolean): void
public "renderUsage"(arg0: $GuiGraphics$Type): void
public static "createWithCustomSuggestions"(arg0: $Screen$Type, arg1: $EditBox$Type, arg2: $EditBoxSuggestions$SuggestionsRenderPosition$Type, arg3: $List$Type<(string)>): $EditBoxSuggestions
public "getSuggestions"(): $CommandSuggestions$SuggestionsList
public "getSelectedTextColor"(): $DrawableColor
public "isKeepSuggestions"(): boolean
public "getCommandUsage"(): $List<($FormattedCharSequence)>
public "setSuggestions"(arg0: $CommandSuggestions$SuggestionsList$Type): void
public "getCurrentParse"(): $ParseResults<($SharedSuggestionProvider)>
public "suggestionsAllowed"(): boolean
public "isAllowRenderUsage"(): boolean
public "setCurrentParse"(arg0: $ParseResults$Type<($SharedSuggestionProvider$Type)>): void
public "getNormalTextColor"(): $DrawableColor
get "accessor"(): $IMixinCommandSuggestions
get "backgroundColor"(): $DrawableColor
set "allowRenderUsage"(value: boolean)
set "suggestionsRenderPosition"(value: $EditBoxSuggestions$SuggestionsRenderPosition$Type)
set "customSuggestions"(value: $List$Type<(string)>)
set "pendingSuggestions"(value: $CompletableFuture$Type<($Suggestions$Type)>)
get "pendingSuggestions"(): $CompletableFuture<($Suggestions)>
get "suggestionsRenderPosition"(): $EditBoxSuggestions$SuggestionsRenderPosition
get "onlyCustomSuggestionsMode"(): boolean
set "normalTextColor"(value: $DrawableColor$Type)
set "backgroundColor"(value: $DrawableColor$Type)
get "textShadow"(): boolean
set "textShadow"(value: boolean)
set "selectedTextColor"(value: $DrawableColor$Type)
get "suggestions"(): $CommandSuggestions$SuggestionsList
get "selectedTextColor"(): $DrawableColor
get "keepSuggestions"(): boolean
get "commandUsage"(): $List<($FormattedCharSequence)>
set "suggestions"(value: $CommandSuggestions$SuggestionsList$Type)
get "currentParse"(): $ParseResults<($SharedSuggestionProvider)>
get "allowRenderUsage"(): boolean
set "currentParse"(value: $ParseResults$Type<($SharedSuggestionProvider$Type)>)
get "normalTextColor"(): $DrawableColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditBoxSuggestions$Type = ($EditBoxSuggestions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditBoxSuggestions_ = $EditBoxSuggestions$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/splash/$SplashTextElement$SourceMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SplashTextElement$SourceMode extends $Enum<($SplashTextElement$SourceMode)> {
static readonly "DIRECT_TEXT": $SplashTextElement$SourceMode
static readonly "TEXT_FILE": $SplashTextElement$SourceMode
static readonly "VANILLA": $SplashTextElement$SourceMode


public "getName"(): string
public static "values"(): ($SplashTextElement$SourceMode)[]
public static "valueOf"(arg0: string): $SplashTextElement$SourceMode
public static "getByName"(arg0: string): $SplashTextElement$SourceMode
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SplashTextElement$SourceMode$Type = (("direct_text") | ("text_file") | ("vanilla")) | ($SplashTextElement$SourceMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SplashTextElement$SourceMode_ = $SplashTextElement$SourceMode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/system/$IsOsLinuxRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsOsLinuxRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public static "isWindows"(): boolean
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public static "isMacOS"(): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "windows"(): boolean
get "description"(): $List<(string)>
get "valuePreset"(): string
get "macOS"(): boolean
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsOsLinuxRequirement$Type = ($IsOsLinuxRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsOsLinuxRequirement_ = $IsOsLinuxRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/$FilenameComparator" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ToIntFunction, $ToIntFunction$Type} from "packages/java/util/function/$ToIntFunction"
import {$ToLongFunction, $ToLongFunction$Type} from "packages/java/util/function/$ToLongFunction"
import {$ToDoubleFunction, $ToDoubleFunction$Type} from "packages/java/util/function/$ToDoubleFunction"

export class $FilenameComparator implements $Comparator<(string)> {

constructor()

public "compare"(arg0: string, arg1: string): integer
public "equals"(arg0: any): boolean
public static "reverseOrder"<T extends $Comparable<(any)>>(): $Comparator<(string)>
public static "comparing"<T, U extends $Comparable<(any)>>(arg0: $Function$Type<(any), (any)>): $Comparator<(string)>
public static "comparing"<T, U>(arg0: $Function$Type<(any), (any)>, arg1: $Comparator$Type<(any)>): $Comparator<(string)>
public "thenComparing"(arg0: $Comparator$Type<(any)>): $Comparator<(string)>
public "thenComparing"<U>(arg0: $Function$Type<(any), (any)>, arg1: $Comparator$Type<(any)>): $Comparator<(string)>
public "thenComparing"<U extends $Comparable<(any)>>(arg0: $Function$Type<(any), (any)>): $Comparator<(string)>
public static "comparingInt"<T>(arg0: $ToIntFunction$Type<(any)>): $Comparator<(string)>
public static "comparingLong"<T>(arg0: $ToLongFunction$Type<(any)>): $Comparator<(string)>
public static "comparingDouble"<T>(arg0: $ToDoubleFunction$Type<(any)>): $Comparator<(string)>
public "reversed"(): $Comparator<(string)>
public "thenComparingInt"(arg0: $ToIntFunction$Type<(any)>): $Comparator<(string)>
public "thenComparingLong"(arg0: $ToLongFunction$Type<(any)>): $Comparator<(string)>
public "thenComparingDouble"(arg0: $ToDoubleFunction$Type<(any)>): $Comparator<(string)>
public static "naturalOrder"<T extends $Comparable<(any)>>(): $Comparator<(string)>
public static "nullsFirst"<T>(arg0: $Comparator$Type<(any)>): $Comparator<(string)>
public static "nullsLast"<T>(arg0: $Comparator$Type<(any)>): $Comparator<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilenameComparator$Type = ($FilenameComparator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilenameComparator_ = $FilenameComparator$Type;
}}
declare module "packages/de/keksuccino/fancymenu/commands/$VariableCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $VariableCommand {
static readonly "CACHED_VARIABLE_SUGGESTIONS": $Map<(string), ($List<(string)>)>

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariableCommand$Type = ($VariableCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariableCommand_ = $VariableCommand$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ProgressBarElement$BarDirection, $ProgressBarElement$BarDirection$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarElement$BarDirection"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$ProgressBarElement$ProgressValueMode, $ProgressBarElement$ProgressValueMode$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarElement$ProgressValueMode"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $ProgressBarElement extends $AbstractElement {
 "direction": $ProgressBarElement$BarDirection
 "barColor": $DrawableColor
 "barTextureSupplier": $ResourceSupplier<($ITexture)>
 "backgroundColor": $DrawableColor
 "backgroundTextureSupplier": $ResourceSupplier<($ITexture)>
 "useProgressForElementAnchor": boolean
 "progressSource": string
 "progressValueMode": $ProgressBarElement$ProgressValueMode
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $ElementBuilder$Type<(any), (any)>)

public "getCurrentProgress"(): float
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getProgressX"(): integer
public "getProgressWidth"(): integer
public "getProgressHeight"(): integer
public "getProgressY"(): integer
public "getChildElementAnchorPointX"(): integer
public "getChildElementAnchorPointY"(): integer
get "currentProgress"(): float
get "progressX"(): integer
get "progressWidth"(): integer
get "progressHeight"(): integer
get "progressY"(): integer
get "childElementAnchorPointX"(): integer
get "childElementAnchorPointY"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProgressBarElement$Type = ($ProgressBarElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProgressBarElement_ = $ProgressBarElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/musiccontroller/$MusicControllerEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$MusicControllerElement, $MusicControllerElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/musiccontroller/$MusicControllerElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $MusicControllerEditorElement extends $AbstractEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractElement$Type, arg1: $LayoutEditorScreen$Type)

public "init"(): void
public "getElement"(): $MusicControllerElement
get "element"(): $MusicControllerElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MusicControllerEditorElement$Type = ($MusicControllerEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MusicControllerEditorElement_ = $MusicControllerEditorElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"

export class $JSONStyle {
static readonly "FLAG_PROTECT_KEYS": integer
static readonly "FLAG_PROTECT_4WEB": integer
static readonly "FLAG_PROTECT_VALUES": integer
static readonly "FLAG_AGRESSIVE": integer
static readonly "FLAG_IGNORE_NULL": integer
static readonly "NO_COMPRESS": $JSONStyle
static readonly "MAX_COMPRESS": $JSONStyle
static readonly "LT_COMPRESS": $JSONStyle

constructor(arg0: integer)
constructor()

public "indent"(): boolean
public "escape"(arg0: string, arg1: $Appendable$Type): void
public "writeString"(arg0: $Appendable$Type, arg1: string): void
public "objectStart"(arg0: $Appendable$Type): void
public "mustProtectValue"(arg0: string): boolean
public "protect4Web"(): boolean
public "protectKeys"(): boolean
public "protectValues"(): boolean
public "arrayStart"(arg0: $Appendable$Type): void
public "arrayfirstObject"(arg0: $Appendable$Type): void
public "objectEndOfKey"(arg0: $Appendable$Type): void
public "mustProtectKey"(arg0: string): boolean
public "objectElmStop"(arg0: $Appendable$Type): void
public "objectFirstStart"(arg0: $Appendable$Type): void
public "arrayObjectEnd"(arg0: $Appendable$Type): void
public "arrayNextElm"(arg0: $Appendable$Type): void
public "ignoreNull"(): boolean
public "arrayStop"(arg0: $Appendable$Type): void
public "objectStop"(arg0: $Appendable$Type): void
public "objectNext"(arg0: $Appendable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONStyle$Type = ($JSONStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONStyle_ = $JSONStyle$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/logo/$TitleScreenLogoDeepEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractDeepEditorElement, $AbstractDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepEditorElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $TitleScreenLogoDeepEditorElement extends $AbstractDeepEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractDeepElement$Type, arg1: $LayoutEditorScreen$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenLogoDeepEditorElement$Type = ($TitleScreenLogoDeepEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenLogoDeepEditorElement_ = $TitleScreenLogoDeepEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/variables/$VariableHandler" {
import {$Variable, $Variable$Type} from "packages/de/keksuccino/fancymenu/customization/variables/$Variable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $VariableHandler {

constructor()

public static "init"(): void
public static "clearVariables"(): void
public static "variableExists"(arg0: string): boolean
public static "getVariables"(): $List<($Variable)>
public static "getVariable"(arg0: string): $Variable
public static "setVariable"(arg0: string, arg1: string): void
public static "removeVariable"(arg0: string): void
public static "getVariableNames"(): $List<(string)>
get "variables"(): $List<($Variable)>
get "variableNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariableHandler$Type = ($VariableHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariableHandler_ = $VariableHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownParser" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$MarkdownTextFragment, $MarkdownTextFragment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownTextFragment"
import {$MarkdownRenderer, $MarkdownRenderer$Type} from "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer"

export class $MarkdownParser {

constructor()

public static "parse"(arg0: $MarkdownRenderer$Type, arg1: string, arg2: boolean): $List<($MarkdownTextFragment)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownParser$Type = ($MarkdownParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownParser_ = $MarkdownParser$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$ValueListNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Iterator, $Iterator$Type} from "packages/java/util/$Iterator"
import {$Spliterator, $Spliterator$Type} from "packages/java/util/$Spliterator"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"

export class $ValueNodes$ValueListNode extends $ValueNode implements $Iterable<($ValueNode)> {

constructor(arg0: $Collection$Type<(any)>)

public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "iterator"(): $Iterator<($ValueNode)>
public "contains"(arg0: $ValueNode$Type): boolean
public "asValueListNode"(): $ValueNodes$ValueListNode
public "isValueListNode"(): boolean
public "subsetof"(arg0: $ValueNodes$ValueListNode$Type): boolean
public "getNodes"(): $List<($ValueNode)>
public "spliterator"(): $Spliterator<($ValueNode)>
public "forEach"(arg0: $Consumer$Type<(any)>): void
[Symbol.iterator](): IterableIterator<$ValueNode>;
get "valueListNode"(): boolean
get "nodes"(): $List<($ValueNode)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$ValueListNode$Type = ($ValueNodes$ValueListNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$ValueListNode_ = $ValueNodes$ValueListNode$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$InvalidModificationException" {
import {$JsonPathException, $JsonPathException$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPathException"

export class $InvalidModificationException extends $JsonPathException {

constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvalidModificationException$Type = ($InvalidModificationException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvalidModificationException_ = $InvalidModificationException$Type;
}}
declare module "packages/de/keksuccino/melody/resources/audio/openal/$ALAudioClip" {
import {$ALAudioBuffer, $ALAudioBuffer$Type} from "packages/de/keksuccino/melody/resources/audio/openal/$ALAudioBuffer"
import {$AudioClip, $AudioClip$Type} from "packages/de/keksuccino/melody/resources/audio/$AudioClip"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"

export class $ALAudioClip implements $AudioClip {


public static "of"(arg0: $ALAudioBuffer$Type): $ALAudioClip
public "resume"(): void
public "stop"(): void
public "getState"(): integer
public "close"(): void
public static "create"(): $ALAudioClip
public "isClosed"(): boolean
public "setLooping"(arg0: boolean): void
public "play"(): void
public "isPlaying"(): boolean
public "tryUpdateVolume"(): void
public "setStaticBuffer"(arg0: $ALAudioBuffer$Type): void
public "isPaused"(): boolean
public "pause"(): void
public "setSoundChannel"(arg0: $SoundSource$Type): void
public "getSoundChannel"(): $SoundSource
public "setVolume"(arg0: float): void
public "getVolume"(): float
public "isLooping"(): boolean
public "closeQuietly"(): void
public "isStopped"(): boolean
public "isValidOpenAlSource"(): boolean
get "state"(): integer
get "closed"(): boolean
set "looping"(value: boolean)
get "playing"(): boolean
set "staticBuffer"(value: $ALAudioBuffer$Type)
get "paused"(): boolean
set "soundChannel"(value: $SoundSource$Type)
get "soundChannel"(): $SoundSource
set "volume"(value: float)
get "volume"(): float
get "looping"(): boolean
get "stopped"(): boolean
get "validOpenAlSource"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ALAudioClip$Type = ($ALAudioClip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ALAudioClip_ = $ALAudioClip$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$TotalModsPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $TotalModsPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TotalModsPlaceholder$Type = ($TotalModsPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TotalModsPlaceholder_ = $TotalModsPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$AudioResourceHandler" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AudioFileType, $AudioFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$AudioFileType"
import {$ResourceHandler, $ResourceHandler$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceHandler"

export class $AudioResourceHandler extends $ResourceHandler<($IAudio), ($AudioFileType)> {
static readonly "INSTANCE": $AudioResourceHandler

constructor()

public "getAllowedFileTypes"(): $List<($AudioFileType)>
get "allowedFileTypes"(): $List<($AudioFileType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AudioResourceHandler$Type = ($AudioResourceHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AudioResourceHandler_ = $AudioResourceHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/widgets/layer/$LayerLayoutEditorWidgetBuilder" {
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$File, $File$Type} from "packages/java/io/$File"
import {$AbstractLayoutEditorWidgetBuilder, $AbstractLayoutEditorWidgetBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidgetBuilder"
import {$LayerLayoutEditorWidget, $LayerLayoutEditorWidget$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/widgets/layer/$LayerLayoutEditorWidget"
import {$AbstractLayoutEditorWidgetBuilder$WidgetSettings, $AbstractLayoutEditorWidgetBuilder$WidgetSettings$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidgetBuilder$WidgetSettings"

export class $LayerLayoutEditorWidgetBuilder extends $AbstractLayoutEditorWidgetBuilder<($LayerLayoutEditorWidget)> {
static readonly "WIDGET_SETTINGS_DIR": $File

constructor()

public "writeSettings"(arg0: $AbstractLayoutEditorWidgetBuilder$WidgetSettings$Type, arg1: $LayerLayoutEditorWidget$Type): void
public "applySettings"(arg0: $LayoutEditorScreen$Type, arg1: $AbstractLayoutEditorWidgetBuilder$WidgetSettings$Type, arg2: $LayerLayoutEditorWidget$Type): void
public "buildDefaultInstance"(arg0: $LayoutEditorScreen$Type): $LayerLayoutEditorWidget
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayerLayoutEditorWidgetBuilder$Type = ($LayerLayoutEditorWidgetBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayerLayoutEditorWidgetBuilder_ = $LayerLayoutEditorWidgetBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/minecraftoptions/$MinecraftOption" {
import {$OptionInstance, $OptionInstance$Type} from "packages/net/minecraft/client/$OptionInstance"
import {$PlayerModelPart, $PlayerModelPart$Type} from "packages/net/minecraft/world/entity/player/$PlayerModelPart"
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"

export class $MinecraftOption {


public "getName"(): string
public "get"(): string
public static "of"(arg0: $KeyMapping$Type): $MinecraftOption
public static "of"(arg0: string, arg1: $OptionInstance$Type<(any)>): $MinecraftOption
public static "of"(arg0: $PlayerModelPart$Type): $MinecraftOption
public "set"(arg0: string): void
public "getOptionInstance"(): $OptionInstance<(any)>
get "name"(): string
get "optionInstance"(): $OptionInstance<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinecraftOption$Type = ($MinecraftOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinecraftOption_ = $MinecraftOption$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/cursor/$CursorHandler" {
import {$ClientTickEvent$Pre, $ClientTickEvent$Pre$Type} from "packages/de/keksuccino/fancymenu/events/ticking/$ClientTickEvent$Pre"
import {$CursorHandler$CustomCursor, $CursorHandler$CustomCursor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/cursor/$CursorHandler$CustomCursor"

export class $CursorHandler {
static readonly "CURSOR_RESIZE_HORIZONTAL": long
static readonly "CURSOR_RESIZE_VERTICAL": long
static readonly "CURSOR_RESIZE_ALL": long
static readonly "CURSOR_WRITING": long
static readonly "CURSOR_POINTING_HAND": long

constructor()

public static "init"(): void
public "onClientTickPre"(arg0: $ClientTickEvent$Pre$Type): void
public static "getCustomCursor"(arg0: string): $CursorHandler$CustomCursor
public static "registerCustomCursor"(arg0: string, arg1: $CursorHandler$CustomCursor$Type): void
public static "setClientTickCursor"(arg0: long): void
public static "setClientTickCursor"(arg0: string): void
public static "unregisterCustomCursor"(arg0: string): void
set "clientTickCursor"(value: long)
set "clientTickCursor"(value: string)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CursorHandler$Type = ($CursorHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CursorHandler_ = $CursorHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/bridge/$BridgePacketHandlerForge" {
import {$BridgePacketMessageForge, $BridgePacketMessageForge$Type} from "packages/de/keksuccino/fancymenu/networking/bridge/$BridgePacketMessageForge"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PacketHandler$PacketDirection, $PacketHandler$PacketDirection$Type} from "packages/de/keksuccino/fancymenu/networking/$PacketHandler$PacketDirection"

export class $BridgePacketHandlerForge {

constructor()

public static "handle"(arg0: $ServerPlayer$Type, arg1: $BridgePacketMessageForge$Type, arg2: $PacketHandler$PacketDirection$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BridgePacketHandlerForge$Type = ($BridgePacketHandlerForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BridgePacketHandlerForge_ = $BridgePacketHandlerForge$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/$Action" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ActionInstance, $ActionInstance$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ActionInstance"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $Action {
static readonly "EMPTY": $Action

constructor(arg0: string)

public "execute"(arg0: string): void
public "isDeprecated"(): boolean
public "hasValue"(): boolean
public "getIdentifier"(): string
public "editValue"(arg0: $Screen$Type, arg1: $ActionInstance$Type): void
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "shouldShowUpInEditorActionMenu"(arg0: $LayoutEditorScreen$Type): boolean
public "getActionDescription"(): ($Component)[]
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "deprecated"(): boolean
get "identifier"(): string
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Action$Type = ($Action);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Action_ = $Action$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathTokenFactory" {
import {$PathToken, $PathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken"
import {$RootPathToken, $RootPathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$RootPathToken"
import {$ArrayIndexOperation, $ArrayIndexOperation$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArrayIndexOperation"
import {$ArraySliceOperation, $ArraySliceOperation$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArraySliceOperation"
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Parameter, $Parameter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/$Parameter"

export class $PathTokenFactory {

constructor()

public static "crateScanToken"(): $PathToken
public static "createRootPathToken"(arg0: character): $RootPathToken
public static "createWildCardPathToken"(): $PathToken
public static "createFunctionPathToken"(arg0: string, arg1: $List$Type<($Parameter$Type)>): $PathToken
public static "createIndexArrayPathToken"(arg0: $ArrayIndexOperation$Type): $PathToken
public static "createSinglePropertyPathToken"(arg0: string, arg1: character): $PathToken
public static "createPredicatePathToken"(arg0: $Predicate$Type): $PathToken
public static "createPredicatePathToken"(arg0: $Collection$Type<($Predicate$Type)>): $PathToken
public static "createPropertyPathToken"(arg0: $List$Type<(string)>, arg1: character): $PathToken
public static "createSliceArrayPathToken"(arg0: $ArraySliceOperation$Type): $PathToken
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathTokenFactory$Type = ($PathTokenFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathTokenFactory_ = $PathTokenFactory$Type;
}}
declare module "packages/de/keksuccino/konkrete/$PostLoadingHandler" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PostLoadingHandler {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PostLoadingHandler$Type = ($PostLoadingHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PostLoadingHandler_ = $PostLoadingHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/$LegacyHandler" {
import {$LegacyHandler$LegacyCheckList, $LegacyHandler$LegacyCheckList$Type} from "packages/de/keksuccino/fancymenu/$LegacyHandler$LegacyCheckList"

export class $LegacyHandler {

constructor()

public static "getCheckList"(): $LegacyHandler$LegacyCheckList
public static "updateCheckList"(): void
get "checkList"(): $LegacyHandler$LegacyCheckList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LegacyHandler$Type = ($LegacyHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LegacyHandler_ = $LegacyHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/player/$PlayerNamePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $PlayerNamePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerNamePlaceholder$Type = ($PlayerNamePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerNamePlaceholder_ = $PlayerNamePlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinChatScreen" {
import {$EditBox, $EditBox$Type} from "packages/net/minecraft/client/gui/components/$EditBox"

export interface $IMixinChatScreen {

 "getInputFancyMenu"(): $EditBox

(): $EditBox
}

export namespace $IMixinChatScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinChatScreen$Type = ($IMixinChatScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinChatScreen_ = $IMixinChatScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/widget/$RenderTabNavigationBarHeaderBackgroundEvent" {
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$TabNavigationBar, $TabNavigationBar$Type} from "packages/net/minecraft/client/gui/components/tabs/$TabNavigationBar"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderTabNavigationBarHeaderBackgroundEvent extends $EventBase {


public "isCancelable"(): boolean
public "getGraphics"(): $GuiGraphics
public "getHeaderWidth"(): integer
public "getHeaderHeight"(): integer
public "getTabNavigationBar"(): $TabNavigationBar
get "cancelable"(): boolean
get "graphics"(): $GuiGraphics
get "headerWidth"(): integer
get "headerHeight"(): integer
get "tabNavigationBar"(): $TabNavigationBar
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderTabNavigationBarHeaderBackgroundEvent$Type = ($RenderTabNavigationBarHeaderBackgroundEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderTabNavigationBarHeaderBackgroundEvent_ = $RenderTabNavigationBarHeaderBackgroundEvent$Type;
}}
declare module "packages/de/keksuccino/konkrete/web/$WebUtils" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$URL, $URL$Type} from "packages/java/net/$URL"

export class $WebUtils {

constructor()

public static "isValidUrl"(arg0: string): boolean
public static "getPlainTextContentOfPage"(arg0: $URL$Type): $List<(string)>
public static "filterURL"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WebUtils$Type = ($WebUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WebUtils_ = $WebUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $WidgetMeta {
 "label": $Component
 "x": integer
 "y": integer
 "width": integer
 "height": integer

constructor(arg0: $AbstractWidget$Type, arg1: long, arg2: $Screen$Type)

public "getIdentifier"(): string
public "getLocator"(): string
public "getScreen"(): $Screen
public "getLongIdentifier"(): long
public "getWidgetLocalizationKey"(): string
public "getUniversalIdentifier"(): string
public "setUniversalIdentifier"(arg0: string): void
public "getWidget"(): $AbstractWidget
get "identifier"(): string
get "locator"(): string
get "screen"(): $Screen
get "longIdentifier"(): long
get "widgetLocalizationKey"(): string
get "universalIdentifier"(): string
set "universalIdentifier"(value: string)
get "widget"(): $AbstractWidget
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetMeta$Type = ($WidgetMeta);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetMeta_ = $WidgetMeta$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/world/$IsWorldLoadedRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsWorldLoadedRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsWorldLoadedRequirement$Type = ($IsWorldLoadedRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsWorldLoadedRequirement_ = $IsWorldLoadedRequirement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$ArraysMapper" {
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $ArraysMapper<T> extends $JsonReaderI<(T)> {
static "MAPPER_PRIM_INT": $JsonReaderI<((integer)[])>
static "MAPPER_INT": $JsonReaderI<((integer)[])>
static "MAPPER_PRIM_SHORT": $JsonReaderI<((short)[])>
static "MAPPER_SHORT": $JsonReaderI<((short)[])>
static "MAPPER_PRIM_BYTE": $JsonReaderI<((byte)[])>
static "MAPPER_BYTE": $JsonReaderI<((byte)[])>
static "MAPPER_PRIM_CHAR": $JsonReaderI<((character)[])>
static "MAPPER_CHAR": $JsonReaderI<((character)[])>
static "MAPPER_PRIM_LONG": $JsonReaderI<((long)[])>
static "MAPPER_LONG": $JsonReaderI<((long)[])>
static "MAPPER_PRIM_FLOAT": $JsonReaderI<((float)[])>
static "MAPPER_FLOAT": $JsonReaderI<((float)[])>
static "MAPPER_PRIM_DOUBLE": $JsonReaderI<((double)[])>
static "MAPPER_DOUBLE": $JsonReaderI<((double)[])>
static "MAPPER_PRIM_BOOL": $JsonReaderI<((boolean)[])>
static "MAPPER_BOOL": $JsonReaderI<((boolean)[])>
readonly "base": $JsonReader

constructor(arg0: $JsonReader$Type)

public "convert"(arg0: any): T
public "addValue"(arg0: any, arg1: any): void
public "createArray"(): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArraysMapper$Type<T> = ($ArraysMapper<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArraysMapper_<T> = $ArraysMapper$Type<(T)>;
}}
declare module "packages/de/keksuccino/melody/platform/$ForgePlatformHelper" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$IPlatformHelper, $IPlatformHelper$Type} from "packages/de/keksuccino/melody/platform/services/$IPlatformHelper"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $ForgePlatformHelper implements $IPlatformHelper {

constructor()

public "isOnClient"(): boolean
public "getLoadedModIds"(): $List<(string)>
public "getKeyMappingKey"(arg0: $KeyMapping$Type): $InputConstants$Key
public "getLoaderVersion"(): string
public "isDevelopmentEnvironment"(): boolean
public "getPlatformName"(): string
public "getModVersion"(arg0: string): string
public "getPlatformDisplayName"(): string
public "isModLoaded"(arg0: string): boolean
public "getEnvironmentName"(): string
get "onClient"(): boolean
get "loadedModIds"(): $List<(string)>
get "loaderVersion"(): string
get "developmentEnvironment"(): boolean
get "platformName"(): string
get "platformDisplayName"(): string
get "environmentName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgePlatformHelper$Type = ($ForgePlatformHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgePlatformHelper_ = $ForgePlatformHelper$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/copyright/$TitleScreenForgeCopyrightBuilder" {
import {$TitleScreenLayer, $TitleScreenLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TitleScreenForgeCopyrightDeepElement, $TitleScreenForgeCopyrightDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/copyright/$TitleScreenForgeCopyrightDeepElement"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$TitleScreenForgeCopyrightDeepEditorElement, $TitleScreenForgeCopyrightDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/copyright/$TitleScreenForgeCopyrightDeepEditorElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

export class $TitleScreenForgeCopyrightBuilder extends $DeepElementBuilder<($TitleScreenLayer), ($TitleScreenForgeCopyrightDeepElement), ($TitleScreenForgeCopyrightDeepEditorElement)> {
readonly "layer": D

constructor(arg0: $TitleScreenLayer$Type)

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "deserializeElement"(arg0: $SerializedElement$Type): $TitleScreenForgeCopyrightDeepElement
public "stackElements"(arg0: $TitleScreenForgeCopyrightDeepElement$Type, arg1: $TitleScreenForgeCopyrightDeepElement$Type): void
public "wrapIntoEditorElement"(arg0: $TitleScreenForgeCopyrightDeepElement$Type, arg1: $LayoutEditorScreen$Type): $TitleScreenForgeCopyrightDeepEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenForgeCopyrightBuilder$Type = ($TitleScreenForgeCopyrightBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenForgeCopyrightBuilder_ = $TitleScreenForgeCopyrightBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/$AnchorPointOverlay$AnchorPointArea" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $AnchorPointOverlay$AnchorPointArea implements $Renderable, $GuiEventListener {
readonly "anchorPoint": $ElementAnchorPoint


public "toString"(): string
public "isMouseOver"(arg0: double, arg1: double): boolean
public "setFocused"(arg0: boolean): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isFocused"(): boolean
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getRectangle"(): $ScreenRectangle
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "getTabOrderGroup"(): integer
set "focused"(value: boolean)
get "focused"(): boolean
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnchorPointOverlay$AnchorPointArea$Type = ($AnchorPointOverlay$AnchorPointArea);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnchorPointOverlay$AnchorPointArea_ = $AnchorPointOverlay$AnchorPointArea$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$GifTexture" {
import {$GifDecoder, $GifDecoder$Type} from "packages/com/madgag/gif/fmsware/$GifDecoder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$File, $File$Type} from "packages/java/io/$File"
import {$GifTexture$DecodedGifImage, $GifTexture$DecodedGifImage$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$GifTexture$DecodedGifImage"
import {$AspectRatio, $AspectRatio$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$AspectRatio"
import {$GifTexture$GifFrame, $GifTexture$GifFrame$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$GifTexture$GifFrame"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$PlayableResource, $PlayableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$PlayableResource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GifTexture implements $ITexture, $PlayableResource {


public static "of"(arg0: $InputStream$Type): $GifTexture
public static "of"(arg0: $InputStream$Type, arg1: string, arg2: $GifTexture$Type): $GifTexture
public "stop"(): void
public "close"(): void
public static "location"(arg0: $ResourceLocation$Type): $GifTexture
public static "location"(arg0: $ResourceLocation$Type, arg1: $GifTexture$Type): $GifTexture
public "open"(): $InputStream
public "reset"(): void
public static "local"(arg0: $File$Type, arg1: $GifTexture$Type): $GifTexture
public static "local"(arg0: $File$Type): $GifTexture
public "isReady"(): boolean
public "isClosed"(): boolean
public "play"(): void
public "getAspectRatio"(): $AspectRatio
public "isPlaying"(): boolean
public static "web"(arg0: string, arg1: $GifTexture$Type): $GifTexture
public static "web"(arg0: string): $GifTexture
public "isPaused"(): boolean
public "getWidth"(): integer
public "pause"(): void
public "getHeight"(): integer
public "isLoadingFailed"(): boolean
public "isLoadingCompleted"(): boolean
public static "decodeGif"(arg0: $InputStream$Type, arg1: string): $GifTexture$DecodedGifImage
public static "deliverGifFrames"(arg0: $GifDecoder$Type, arg1: string, arg2: $Consumer$Type<($GifTexture$GifFrame$Type)>): void
public "getResourceLocation"(): $ResourceLocation
public "waitForLoadingCompletedOrFailed"(arg0: long): void
public "waitForReady"(arg0: long): void
get "ready"(): boolean
get "closed"(): boolean
get "aspectRatio"(): $AspectRatio
get "playing"(): boolean
get "paused"(): boolean
get "width"(): integer
get "height"(): integer
get "loadingFailed"(): boolean
get "loadingCompleted"(): boolean
get "resourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GifTexture$Type = ($GifTexture);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GifTexture_ = $GifTexture$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/client/$WorldLoadProgressPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $WorldLoadProgressPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldLoadProgressPlaceholder$Type = ($WorldLoadProgressPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldLoadProgressPlaceholder_ = $WorldLoadProgressPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v2/$AbstractExtendedSlider$SliderValueUpdateListener" {
import {$AbstractExtendedSlider, $AbstractExtendedSlider$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/slider/v2/$AbstractExtendedSlider"

export interface $AbstractExtendedSlider$SliderValueUpdateListener {

 "update"(arg0: $AbstractExtendedSlider$Type, arg1: string, arg2: double): void

(arg0: $AbstractExtendedSlider$Type, arg1: string, arg2: double): void
}

export namespace $AbstractExtendedSlider$SliderValueUpdateListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractExtendedSlider$SliderValueUpdateListener$Type = ($AbstractExtendedSlider$SliderValueUpdateListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractExtendedSlider$SliderValueUpdateListener_ = $AbstractExtendedSlider$SliderValueUpdateListener$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MenuBar$SeparatorMenuBarEntry, $MenuBar$SeparatorMenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$SeparatorMenuBarEntry"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$MenuBar$MenuBarEntry, $MenuBar$MenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$MenuBarEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MenuBar$ContextMenuBarEntry, $MenuBar$ContextMenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ContextMenuBarEntry"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$MenuBar$ClickableMenuBarEntry$ClickAction, $MenuBar$ClickableMenuBarEntry$ClickAction$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ClickableMenuBarEntry$ClickAction"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$MenuBar$Side, $MenuBar$Side$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$Side"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MenuBar$SpacerMenuBarEntry, $MenuBar$SpacerMenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$SpacerMenuBarEntry"
import {$MenuBar$ClickableMenuBarEntry, $MenuBar$ClickableMenuBarEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar$ClickableMenuBarEntry"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"

export class $MenuBar implements $Renderable, $GuiEventListener, $NarratableEntry, $NavigatableWidget {

constructor()

public "addEntry"<T extends $MenuBar$MenuBarEntry>(arg0: $MenuBar$Side$Type, arg1: T): T
public "getEntries"(): $List<($MenuBar$MenuBarEntry)>
public "getEntry"(arg0: string): $MenuBar$MenuBarEntry
public "removeEntry"(arg0: string): $MenuBar
public "setScale"(arg0: float): $MenuBar
public "setExpanded"(arg0: boolean): $MenuBar
public "closeAllContextMenus"(): $MenuBar
public "isEntryContextMenuOpen"(): boolean
public "isUserNavigatingInMenuBar"(): boolean
public "isMouseOver"(arg0: double, arg1: double): boolean
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "isNavigatable"(): boolean
public "setFocused"(arg0: boolean): void
public "getEntryIndex"(arg0: string): integer
public "getEntrySide"(arg0: string): $MenuBar$Side
public "addEntryAfter"<T extends $MenuBar$MenuBarEntry>(arg0: string, arg1: T): T
public "addEntryBefore"<T extends $MenuBar$MenuBarEntry>(arg0: string, arg1: T): T
public "addSpacerEntryAt"(arg0: integer, arg1: $MenuBar$Side$Type, arg2: string): $MenuBar$SpacerMenuBarEntry
public "addEntryAt"<T extends $MenuBar$MenuBarEntry>(arg0: integer, arg1: $MenuBar$Side$Type, arg2: T): T
public "addSpacerEntry"(arg0: $MenuBar$Side$Type, arg1: string): $MenuBar$SpacerMenuBarEntry
public "clearRightEntries"(): $MenuBar
public "getRightEntries"(): $List<($MenuBar$MenuBarEntry)>
public "getLeftEntries"(): $List<($MenuBar$MenuBarEntry)>
public "isForceUIScale"(): boolean
public "setForceUIScale"(arg0: boolean): $MenuBar
public "hasEntry"(arg0: string): boolean
public "clearLeftEntries"(): $MenuBar
public "isHovered"(): boolean
public "getHeight"(): integer
public "getScale"(): float
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "isFocused"(): boolean
public "addContextMenuEntryAfter"(arg0: string, arg1: string, arg2: $Component$Type, arg3: $ContextMenu$Type): $MenuBar$ContextMenuBarEntry
public "addContextMenuEntryAt"(arg0: integer, arg1: string, arg2: $Component$Type, arg3: $ContextMenu$Type): $MenuBar$ContextMenuBarEntry
public "addClickableEntryBefore"(arg0: string, arg1: string, arg2: $Component$Type, arg3: $MenuBar$ClickableMenuBarEntry$ClickAction$Type): $MenuBar$ClickableMenuBarEntry
public "addClickableEntryAt"(arg0: integer, arg1: $MenuBar$Side$Type, arg2: string, arg3: $Component$Type, arg4: $MenuBar$ClickableMenuBarEntry$ClickAction$Type): $MenuBar$ClickableMenuBarEntry
public "addSpacerEntryAfter"(arg0: string, arg1: string): $MenuBar$SpacerMenuBarEntry
public "addSeparatorEntryBefore"(arg0: string, arg1: string): $MenuBar$SeparatorMenuBarEntry
public "addClickableEntryAfter"(arg0: string, arg1: string, arg2: $Component$Type, arg3: $MenuBar$ClickableMenuBarEntry$ClickAction$Type): $MenuBar$ClickableMenuBarEntry
public "addContextMenuEntry"(arg0: string, arg1: $Component$Type, arg2: $ContextMenu$Type): $MenuBar$ContextMenuBarEntry
public "addSpacerEntryBefore"(arg0: string, arg1: string): $MenuBar$SpacerMenuBarEntry
public "addSeparatorEntryAt"(arg0: integer, arg1: $MenuBar$Side$Type, arg2: string): $MenuBar$SeparatorMenuBarEntry
public "getBottomLineThickness"(): integer
public "addSeparatorEntryAfter"(arg0: string, arg1: string): $MenuBar$SeparatorMenuBarEntry
public "addContextMenuEntryBefore"(arg0: string, arg1: string, arg2: $Component$Type, arg3: $ContextMenu$Type): $MenuBar$ContextMenuBarEntry
public "setNavigatable"(arg0: boolean): void
public "clearEntries"(): $MenuBar
public "addClickableEntry"(arg0: $MenuBar$Side$Type, arg1: string, arg2: $Component$Type, arg3: $MenuBar$ClickableMenuBarEntry$ClickAction$Type): $MenuBar$ClickableMenuBarEntry
public "addSeparatorEntry"(arg0: $MenuBar$Side$Type, arg1: string): $MenuBar$SeparatorMenuBarEntry
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "setHeight"(arg0: integer): $MenuBar
public "isExpanded"(): boolean
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getRectangle"(): $ScreenRectangle
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "isActive"(): boolean
public "getTabOrderGroup"(): integer
get "entries"(): $List<($MenuBar$MenuBarEntry)>
set "scale"(value: float)
set "expanded"(value: boolean)
get "entryContextMenuOpen"(): boolean
get "userNavigatingInMenuBar"(): boolean
get "navigatable"(): boolean
set "focused"(value: boolean)
get "rightEntries"(): $List<($MenuBar$MenuBarEntry)>
get "leftEntries"(): $List<($MenuBar$MenuBarEntry)>
get "forceUIScale"(): boolean
set "forceUIScale"(value: boolean)
get "hovered"(): boolean
get "height"(): integer
get "scale"(): float
get "focused"(): boolean
get "bottomLineThickness"(): integer
set "navigatable"(value: boolean)
get "focusable"(): boolean
set "focusable"(value: boolean)
set "height"(value: integer)
get "expanded"(): boolean
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "active"(): boolean
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBar$Type = ($MenuBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBar_ = $MenuBar$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/types/$AudioFileType" {
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$FileType, $FileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileType"
import {$FileCodec, $FileCodec$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileCodec"

export class $AudioFileType extends $FileType<($IAudio)> {

constructor(arg0: $FileCodec$Type<($IAudio$Type)>, arg1: string, ...arg2: (string)[])

public "setLocalAllowed"(arg0: boolean): $AudioFileType
public "addExtension"(arg0: string): $AudioFileType
set "localAllowed"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AudioFileType$Type = ($AudioFileType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AudioFileType_ = $AudioFileType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/widget/$RenderWidgetEvent" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderWidgetEvent extends $EventBase {

constructor(arg0: $GuiGraphics$Type, arg1: $AbstractWidget$Type, arg2: float)

public "isCancelable"(): boolean
public "getGraphics"(): $GuiGraphics
public "getAlpha"(): float
public "getWidget"(): $AbstractWidget
get "cancelable"(): boolean
get "graphics"(): $GuiGraphics
get "alpha"(): float
get "widget"(): $AbstractWidget
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderWidgetEvent$Type = ($RenderWidgetEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderWidgetEvent_ = $RenderWidgetEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/level/$DisconnectAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $DisconnectAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisconnectAction$Type = ($DisconnectAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisconnectAction_ = $DisconnectAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ElementPosYPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ElementPosYPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementPosYPlaceholder$Type = ($ElementPosYPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementPosYPlaceholder_ = $ElementPosYPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/gameintro/$GameIntroHandler" {
import {$PlayableResource, $PlayableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$PlayableResource"

export class $GameIntroHandler {
static "introPlayed": boolean

constructor()

public static "shouldPlayIntro"(): boolean
public static "getIntro"(): $PlayableResource
public static "introIsAnimation"(): boolean
get "intro"(): $PlayableResource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GameIntroHandler$Type = ($GameIntroHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GameIntroHandler_ = $GameIntroHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/overlay/$CustomizationOverlayMenuBar" {
import {$MenuBar, $MenuBar$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/menubar/v2/$MenuBar"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $CustomizationOverlayMenuBar extends $MenuBar {
 "allowRender": boolean

constructor()

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomizationOverlayMenuBar$Type = ($CustomizationOverlayMenuBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomizationOverlayMenuBar_ = $CustomizationOverlayMenuBar$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/screen/dummyscreen/$DummyScreenBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $DummyScreenBuilder {

constructor(arg0: string, arg1: $Component$Type, arg2: $Supplier$Type<(any)>)

public "tryConstruct"(): $Screen
public "getScreenProvider"(): $Supplier<(any)>
public "setScreenDescriptionSupplier"(arg0: $Supplier$Type<($List$Type<($Component$Type)>)>): $DummyScreenBuilder
public "getScreenDescriptionSupplier"(): $Supplier<($List<($Component)>)>
public "getScreenDisplayName"(): $Component
public "getScreenIdentifier"(): string
get "screenProvider"(): $Supplier<(any)>
set "screenDescriptionSupplier"(value: $Supplier$Type<($List$Type<($Component$Type)>)>)
get "screenDescriptionSupplier"(): $Supplier<($List<($Component)>)>
get "screenDisplayName"(): $Component
get "screenIdentifier"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummyScreenBuilder$Type = ($DummyScreenBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummyScreenBuilder_ = $DummyScreenBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $AbstractElement$AppearanceDelay extends $Enum<($AbstractElement$AppearanceDelay)> {
static readonly "NO_DELAY": $AbstractElement$AppearanceDelay
static readonly "FIRST_TIME": $AbstractElement$AppearanceDelay
static readonly "EVERY_TIME": $AbstractElement$AppearanceDelay
readonly "name": string


public static "values"(): ($AbstractElement$AppearanceDelay)[]
public static "valueOf"(arg0: string): $AbstractElement$AppearanceDelay
public static "getByName"(arg0: string): $AbstractElement$AppearanceDelay
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractElement$AppearanceDelay$Type = (("first_time") | ("no_delay") | ("every_time")) | ($AbstractElement$AppearanceDelay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractElement$AppearanceDelay_ = $AbstractElement$AppearanceDelay$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/textures/$SkinResourceSupplier" {
import {$SimpleTexture, $SimpleTexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$SimpleTexture"
import {$ResourceSourceType, $ResourceSourceType$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSourceType"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $SkinResourceSupplier extends $ResourceSupplier<($ITexture)> {
static readonly "DEFAULT_SKIN_LOCATION": $ResourceLocation
static readonly "DEFAULT_SKIN": $SimpleTexture

constructor(arg0: string, arg1: boolean)

public "setSource"(arg0: string): void
public "getSourceWithoutPrefix"(): string
public "getSourceType"(): $ResourceSourceType
public "isSlimPlayerNameSkin"(): boolean
public "getSkinLocation"(): $ResourceLocation
public "getSourceWithPrefix"(): string
set "source"(value: string)
get "sourceWithoutPrefix"(): string
get "sourceType"(): $ResourceSourceType
get "slimPlayerNameSkin"(): boolean
get "skinLocation"(): $ResourceLocation
get "sourceWithPrefix"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkinResourceSupplier$Type = ($SkinResourceSupplier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkinResourceSupplier_ = $SkinResourceSupplier$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/loadingrequirements/$BuildRequirementGroupScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LoadingRequirementGroup, $LoadingRequirementGroup$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementGroup"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $BuildRequirementGroupScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Screen$Type, arg1: $LoadingRequirementContainer$Type, arg2: $LoadingRequirementGroup$Type, arg3: $Consumer$Type<($LoadingRequirementGroup$Type)>)

public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuildRequirementGroupScreen$Type = ($BuildRequirementGroupScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuildRequirementGroupScreen_ = $BuildRequirementGroupScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AbstractEditorElement$ResizeGrabberType, $AbstractEditorElement$ResizeGrabberType$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement$ResizeGrabberType"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $ElementAnchorPoint {

constructor(arg0: string)

public "getName"(): string
public "getDisplayName"(): $Component
public "getOriginX"(arg0: $AbstractElement$Type): integer
public "getOriginY"(arg0: $AbstractElement$Type): integer
public "getElementPositionX"(arg0: $AbstractElement$Type): integer
public "getElementPositionY"(arg0: $AbstractElement$Type): integer
public "getResizePositionOffsetY"(arg0: $AbstractElement$Type, arg1: integer, arg2: $AbstractEditorElement$ResizeGrabberType$Type): integer
public "getResizePositionOffsetX"(arg0: $AbstractElement$Type, arg1: integer, arg2: $AbstractEditorElement$ResizeGrabberType$Type): integer
public "getDefaultElementBaseX"(arg0: $AbstractElement$Type): integer
public "getDefaultElementBaseY"(arg0: $AbstractElement$Type): integer
get "name"(): string
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElementAnchorPoint$Type = ($ElementAnchorPoint);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElementAnchorPoint_ = $ElementAnchorPoint$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/overlay/$CustomizationOverlay" {
import {$ScreenKeyPressedEvent, $ScreenKeyPressedEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$ScreenKeyPressedEvent"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$DebugOverlay, $DebugOverlay$Type} from "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$CustomizationOverlayMenuBar, $CustomizationOverlayMenuBar$Type} from "packages/de/keksuccino/fancymenu/customization/overlay/$CustomizationOverlayMenuBar"
import {$RenderScreenEvent$Post, $RenderScreenEvent$Post$Type} from "packages/de/keksuccino/fancymenu/events/screen/$RenderScreenEvent$Post"
import {$InitOrResizeScreenCompletedEvent, $InitOrResizeScreenCompletedEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenCompletedEvent"

export class $CustomizationOverlay {

constructor()

public static "init"(): void
public static "getCurrentMenuBarInstance"(): $CustomizationOverlayMenuBar
public static "isOverlayVisible"(arg0: $Screen$Type): boolean
public static "rebuildOverlay"(): void
public "onInitScreenPost"(arg0: $InitOrResizeScreenCompletedEvent$Type): void
public static "registerOverlayVisibilityController"(arg0: $ConsumingSupplier$Type<($Screen$Type), (boolean)>): string
public static "unregisterOverlayVisibilityController"(arg0: string): void
public static "rebuildDebugOverlay"(): void
public static "getCurrentDebugOverlayInstance"(): $DebugOverlay
public "onRenderPost"(arg0: $RenderScreenEvent$Post$Type): void
public "onScreenKeyPressed"(arg0: $ScreenKeyPressedEvent$Type): void
get "currentMenuBarInstance"(): $CustomizationOverlayMenuBar
get "currentDebugOverlayInstance"(): $DebugOverlay
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomizationOverlay$Type = ($CustomizationOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomizationOverlay_ = $CustomizationOverlay$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PredicatePathToken" {
import {$PathToken, $PathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken"
import {$Configuration, $Configuration$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Configuration"
import {$EvaluationContextImpl, $EvaluationContextImpl$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"

export class $PredicatePathToken extends $PathToken {


public "isTokenDefinite"(): boolean
public "accept"(arg0: any, arg1: any, arg2: $Configuration$Type, arg3: $EvaluationContextImpl$Type): boolean
public "evaluate"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContextImpl$Type): void
public "getPathFragment"(): string
get "tokenDefinite"(): boolean
get "pathFragment"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PredicatePathToken$Type = ($PredicatePathToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PredicatePathToken_ = $PredicatePathToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/realmsnotification/$TitleScreenRealmsNotificationDeepEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractDeepEditorElement, $AbstractDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepEditorElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $TitleScreenRealmsNotificationDeepEditorElement extends $AbstractDeepEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractDeepElement$Type, arg1: $LayoutEditorScreen$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenRealmsNotificationDeepEditorElement$Type = ($TitleScreenRealmsNotificationDeepEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenRealmsNotificationDeepEditorElement_ = $TitleScreenRealmsNotificationDeepEditorElement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$BeansAccess" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$FieldFilter, $FieldFilter$Type} from "packages/de/keksuccino/konkrete/json/minidev/asm/$FieldFilter"
import {$Accessor, $Accessor$Type} from "packages/de/keksuccino/konkrete/json/minidev/asm/$Accessor"

export class $BeansAccess<T> {

constructor()

public "get"(arg0: T, arg1: string): any
public static "get"<P>(arg0: $Class$Type<(P)>, arg1: $FieldFilter$Type): $BeansAccess<(P)>
public static "get"<P>(arg0: $Class$Type<(P)>): $BeansAccess<(P)>
public "get"(arg0: T, arg1: integer): any
public "newInstance"(): T
public "set"(arg0: T, arg1: integer, arg2: any): void
public "set"(arg0: T, arg1: string, arg2: any): void
public "getIndex"(arg0: string): integer
public "getMap"(): $HashMap<(string), ($Accessor)>
public "getAccessors"(): ($Accessor)[]
get "map"(): $HashMap<(string), ($Accessor)>
get "accessors"(): ($Accessor)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeansAccess$Type<T> = ($BeansAccess<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeansAccess_<T> = $BeansAccess$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$Pre" {
import {$InitOrResizeScreenEvent, $InitOrResizeScreenEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$InitOrResizeScreenEvent$InitializationPhase, $InitOrResizeScreenEvent$InitializationPhase$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$InitializationPhase"

export class $InitOrResizeScreenEvent$Pre extends $InitOrResizeScreenEvent {

constructor(arg0: $Screen$Type, arg1: $InitOrResizeScreenEvent$InitializationPhase$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InitOrResizeScreenEvent$Pre$Type = ($InitOrResizeScreenEvent$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InitOrResizeScreenEvent$Pre_ = $InitOrResizeScreenEvent$Pre$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$GetVariablePlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $GetVariablePlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GetVariablePlaceholder$Type = ($GetVariablePlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GetVariablePlaceholder_ = $GetVariablePlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/other/$MimicButtonAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $MimicButtonAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MimicButtonAction$Type = ($MimicButtonAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MimicButtonAction_ = $MimicButtonAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayerRegistry" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"

export class $DeepScreenCustomizationLayerRegistry {

constructor()

public static "register"(arg0: $DeepScreenCustomizationLayer$Type): void
public static "getLayer"(arg0: string): $DeepScreenCustomizationLayer
public static "getLayers"(): $List<($DeepScreenCustomizationLayer)>
public "hasLayer"(arg0: string): boolean
get "layers"(): $List<($DeepScreenCustomizationLayer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeepScreenCustomizationLayerRegistry$Type = ($DeepScreenCustomizationLayerRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeepScreenCustomizationLayerRegistry_ = $DeepScreenCustomizationLayerRegistry$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/$AdvancedButtonHandler" {
import {$ScreenEvent$Render$Post, $ScreenEvent$Render$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Render$Post"
import {$AdvancedButton, $AdvancedButton$Type} from "packages/de/keksuccino/konkrete/gui/content/$AdvancedButton"

export class $AdvancedButtonHandler {

constructor()

public static "init"(): void
public "onDrawScreen"(arg0: $ScreenEvent$Render$Post$Type): void
public static "setActiveDescriptionButton"(arg0: $AdvancedButton$Type): void
set "activeDescriptionButton"(value: $AdvancedButton$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancedButtonHandler$Type = ($AdvancedButtonHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancedButtonHandler_ = $AdvancedButtonHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DeserializedPlaceholderString {
 "placeholderIdentifier": string
 "values": $HashMap<(string), (string)>
 "placeholderString": string

constructor(arg0: string, arg1: $HashMap$Type<(string), (string)>, arg2: string)
/**
 * 
 * @deprecated
 */
constructor()

public "toString"(): string
/**
 * 
 * @deprecated
 */
public static "build"(arg0: string, arg1: $Map$Type<(string), (string)>): $DeserializedPlaceholderString
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeserializedPlaceholderString$Type = ($DeserializedPlaceholderString);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeserializedPlaceholderString_ = $DeserializedPlaceholderString$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/progressbar/$ProgressBarElement$BarDirection" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$LocalizedCycleEnum, $LocalizedCycleEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedCycleEnum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ProgressBarElement$BarDirection extends $Enum<($ProgressBarElement$BarDirection)> implements $LocalizedCycleEnum<($ProgressBarElement$BarDirection)> {
static readonly "LEFT": $ProgressBarElement$BarDirection
static readonly "RIGHT": $ProgressBarElement$BarDirection
static readonly "UP": $ProgressBarElement$BarDirection
static readonly "DOWN": $ProgressBarElement$BarDirection


public "getName"(): string
public static "values"(): ($ProgressBarElement$BarDirection)[]
public static "valueOf"(arg0: string): $ProgressBarElement$BarDirection
public static "getByName"(arg0: string): $ProgressBarElement$BarDirection
public "getValueComponentStyle"(): $Style
public "getLocalizationKeyBase"(): string
public "getByNameInternal"(arg0: string): $ProgressBarElement$BarDirection
public "getValues"(): ($ProgressBarElement$BarDirection)[]
public "getCycleComponentStyle"(): $Style
public "cycle"(arg0: $ProgressBarElement$BarDirection$Type): $LocalizedGenericValueCycle<($ProgressBarElement$BarDirection)>
public "cycle"(): $LocalizedGenericValueCycle<($ProgressBarElement$BarDirection)>
public "getCycleComponent"(): $MutableComponent
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "valueComponentStyle"(): $Style
get "localizationKeyBase"(): string
get "cycleComponentStyle"(): $Style
get "cycleComponent"(): $MutableComponent
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProgressBarElement$BarDirection$Type = (("left") | ("right") | ("up") | ("down")) | ($ProgressBarElement$BarDirection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProgressBarElement$BarDirection_ = $ProgressBarElement$BarDirection$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slideshow/$SlideshowElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$SlideshowElement, $SlideshowElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slideshow/$SlideshowElement"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$SlideshowEditorElement, $SlideshowEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slideshow/$SlideshowEditorElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $SlideshowElementBuilder extends $ElementBuilder<($SlideshowElement), ($SlideshowEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $SlideshowElement$Type, arg1: $LayoutEditorScreen$Type): $SlideshowEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlideshowElementBuilder$Type = ($SlideshowElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlideshowElementBuilder_ = $SlideshowElementBuilder$Type;
}}
declare module "packages/de/keksuccino/konkrete/resources/$ITextureResourceLocation" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ITextureResourceLocation {

 "isReady"(): boolean
 "loadTexture"(): void
 "getWidth"(): integer
 "getHeight"(): integer
 "getResourceLocation"(): $ResourceLocation
}

export namespace $ITextureResourceLocation {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITextureResourceLocation$Type = ($ITextureResourceLocation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITextureResourceLocation_ = $ITextureResourceLocation$Type;
}}
declare module "packages/de/keksuccino/konkrete/annotations/$OptifineFix" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $OptifineFix extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $OptifineFix {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptifineFix$Type = ($OptifineFix);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptifineFix_ = $OptifineFix$Type;
}}
declare module "packages/de/keksuccino/fancymenu/$FancyMenuForge" {
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"

export class $FancyMenuForge {

constructor()

public "onSetup"(arg0: $FMLCommonSetupEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FancyMenuForge$Type = ($FancyMenuForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FancyMenuForge_ = $FancyMenuForge$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/screens/popup/$Popup" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$AdvancedButton, $AdvancedButton$Type} from "packages/de/keksuccino/konkrete/gui/content/$AdvancedButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $Popup {

constructor(arg0: integer)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: $Screen$Type): void
public "isDisplayed"(): boolean
public "setDisplayed"(arg0: boolean): void
public "getButtons"(): $List<($AdvancedButton)>
get "displayed"(): boolean
set "displayed"(value: boolean)
get "buttons"(): $List<($AdvancedButton)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Popup$Type = ($Popup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Popup_ = $Popup$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v2/$SliderElementBuilder" {
import {$SliderEditorElement, $SliderEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v2/$SliderEditorElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$SliderElement, $SliderElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v2/$SliderElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

export class $SliderElementBuilder extends $ElementBuilder<($SliderElement), ($SliderEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "deserializeElement"(arg0: $SerializedElement$Type): $SliderElement
public "buildDefaultInstance"(): $SliderElement
public "wrapIntoEditorElement"(arg0: $SliderElement$Type, arg1: $LayoutEditorScreen$Type): $SliderEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliderElementBuilder$Type = ($SliderElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliderElementBuilder_ = $SliderElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v1/$SliderElementBuilder" {
import {$SliderElement, $SliderElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v1/$SliderElement"
import {$SliderEditorElement, $SliderEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/slider/v1/$SliderEditorElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

/**
 * 
 * @deprecated
 */
export class $SliderElementBuilder extends $ElementBuilder<($SliderElement), ($SliderEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "isDeprecated"(): boolean
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $SliderElement$Type, arg1: $LayoutEditorScreen$Type): $SliderEditorElement
get "deprecated"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliderElementBuilder$Type = ($SliderElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliderElementBuilder_ = $SliderElementBuilder$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/reader/$ArrayWriter" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JsonWriterI, $JsonWriterI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/reader/$JsonWriterI"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"

export class $ArrayWriter implements $JsonWriterI<(any)> {

constructor()

public "writeJSONString"<E>(arg0: E, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrayWriter$Type = ($ArrayWriter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrayWriter_ = $ArrayWriter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/text/markdown/$MarkdownRenderer$TextCase" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $MarkdownRenderer$TextCase extends $Enum<($MarkdownRenderer$TextCase)> {
static readonly "NORMAL": $MarkdownRenderer$TextCase
static readonly "ALL_LOWER": $MarkdownRenderer$TextCase
static readonly "ALL_UPPER": $MarkdownRenderer$TextCase


public static "values"(): ($MarkdownRenderer$TextCase)[]
public static "valueOf"(arg0: string): $MarkdownRenderer$TextCase
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownRenderer$TextCase$Type = (("normal") | ("all_lower") | ("all_upper")) | ($MarkdownRenderer$TextCase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownRenderer$TextCase_ = $MarkdownRenderer$TextCase$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/realtime/$RealtimeMonthPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $RealtimeMonthPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RealtimeMonthPlaceholder$Type = ($RealtimeMonthPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RealtimeMonthPlaceholder_ = $RealtimeMonthPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/variables/$ManageVariablesScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Variable, $Variable$Type} from "packages/de/keksuccino/fancymenu/customization/variables/$Variable"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ManageVariablesScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Consumer$Type<($List$Type<($Variable$Type)>)>)

public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManageVariablesScreen$Type = ($ManageVariablesScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManageVariablesScreen_ = $ManageVariablesScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/cache/$CacheProvider" {
import {$Cache, $Cache$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/cache/$Cache"

export class $CacheProvider {

constructor()

public static "getCache"(): $Cache
public static "setCache"(arg0: $Cache$Type): void
get "cache"(): $Cache
set "cache"(value: $Cache$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CacheProvider$Type = ($CacheProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CacheProvider_ = $CacheProvider$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/function/latebinding/$ILateBindingValue" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ILateBindingValue {

 "get"(): any

(): any
}

export namespace $ILateBindingValue {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILateBindingValue$Type = ($ILateBindingValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILateBindingValue_ = $ILateBindingValue$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/text/v2/$TextElementBuilder" {
import {$TextElement, $TextElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/text/v2/$TextElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$TextEditorElement, $TextEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/text/v2/$TextEditorElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $TextElementBuilder extends $ElementBuilder<($TextElement), ($TextEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $TextElement$Type, arg1: $LayoutEditorScreen$Type): $TextEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextElementBuilder$Type = ($TextElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextElementBuilder_ = $TextElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$TextEditorElement, $TextEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextEditorElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$TextElement, $TextElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/text/v1/$TextElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

/**
 * 
 * @deprecated
 */
export class $TextElementBuilder extends $ElementBuilder<($TextElement), ($TextEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "isDeprecated"(): boolean
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "deserializeElement"(arg0: $SerializedElement$Type): $TextElement
public "wrapIntoEditorElement"(arg0: $TextElement$Type, arg1: $LayoutEditorScreen$Type): $TextEditorElement
get "deprecated"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextElementBuilder$Type = ($TextElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextElementBuilder_ = $TextElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$RenderScreenEvent$Post" {
import {$RenderScreenEvent, $RenderScreenEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$RenderScreenEvent"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $RenderScreenEvent$Post extends $RenderScreenEvent {

constructor(arg0: $Screen$Type, arg1: $GuiGraphics$Type, arg2: integer, arg3: integer, arg4: float)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderScreenEvent$Post$Type = ($RenderScreenEvent$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderScreenEvent$Post_ = $RenderScreenEvent$Post$Type;
}}
declare module "packages/de/keksuccino/konkrete/$Konkrete" {
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $Konkrete {
static readonly "VERSION": string
static "LOGGER": $Logger
static "isOptifineLoaded": boolean

constructor()

public static "addPostLoadingEvent"(arg0: string, arg1: $Runnable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Konkrete$Type = ($Konkrete);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Konkrete_ = $Konkrete$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$CloseScreenEvent" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $CloseScreenEvent extends $EventBase {

constructor(arg0: $Screen$Type)

public "isCancelable"(): boolean
public "getScreen"(): $Screen
get "cancelable"(): boolean
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloseScreenEvent$Type = ($CloseScreenEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloseScreenEvent_ = $CloseScreenEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidgetBuilder$WidgetSettings" {
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"

export class $AbstractLayoutEditorWidgetBuilder$WidgetSettings extends $PropertyContainer {

constructor()

public static "convertContainerToSettings"(arg0: $PropertyContainer$Type): $AbstractLayoutEditorWidgetBuilder$WidgetSettings
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractLayoutEditorWidgetBuilder$WidgetSettings$Type = ($AbstractLayoutEditorWidgetBuilder$WidgetSettings);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractLayoutEditorWidgetBuilder$WidgetSettings_ = $AbstractLayoutEditorWidgetBuilder$WidgetSettings$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathTanhPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MathTanhPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathTanhPlaceholder$Type = ($MathTanhPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathTanhPlaceholder_ = $MathTanhPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$MinecraftResourceReloadObserver$ReloadAction" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $MinecraftResourceReloadObserver$ReloadAction extends $Enum<($MinecraftResourceReloadObserver$ReloadAction)> {
static readonly "STARTING": $MinecraftResourceReloadObserver$ReloadAction
static readonly "FINISHED": $MinecraftResourceReloadObserver$ReloadAction


public static "values"(): ($MinecraftResourceReloadObserver$ReloadAction)[]
public static "valueOf"(arg0: string): $MinecraftResourceReloadObserver$ReloadAction
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MinecraftResourceReloadObserver$ReloadAction$Type = (("finished") | ("starting")) | ($MinecraftResourceReloadObserver$ReloadAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MinecraftResourceReloadObserver$ReloadAction_ = $MinecraftResourceReloadObserver$ReloadAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$SeparatorContextMenuEntry" {
import {$ContextMenu$ContextMenuEntry, $ContextMenu$ContextMenuEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu$ContextMenuEntry"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ContextMenu$SeparatorContextMenuEntry extends $ContextMenu$ContextMenuEntry<($ContextMenu$SeparatorContextMenuEntry)> {

constructor(arg0: string, arg1: $ContextMenu$Type)

public "setFocused"(arg0: boolean): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getMinWidth"(): float
public "isFocused"(): boolean
set "focused"(value: boolean)
get "minWidth"(): float
get "focused"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$SeparatorContextMenuEntry$Type = ($ContextMenu$SeparatorContextMenuEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$SeparatorContextMenuEntry_ = $ContextMenu$SeparatorContextMenuEntry$Type;
}}
declare module "packages/de/keksuccino/konkrete/resources/$ExternalTextureResourceLocation" {
import {$ITextureResourceLocation, $ITextureResourceLocation$Type} from "packages/de/keksuccino/konkrete/resources/$ITextureResourceLocation"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ExternalTextureResourceLocation implements $ITextureResourceLocation {

constructor(arg0: string)
constructor(arg0: $InputStream$Type)

public "getPath"(): string
public "isReady"(): boolean
public "loadTexture"(): void
public "getWidth"(): integer
public "getHeight"(): integer
public "getResourceLocation"(): $ResourceLocation
get "path"(): string
get "ready"(): boolean
get "width"(): integer
get "height"(): integer
get "resourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExternalTextureResourceLocation$Type = ($ExternalTextureResourceLocation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExternalTextureResourceLocation_ = $ExternalTextureResourceLocation$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/player/$PlayerUuidPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $PlayerUuidPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerUuidPlaceholder$Type = ($PlayerUuidPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerUuidPlaceholder_ = $PlayerUuidPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/realmsnotification/$TitleScreenRealmsNotificationDeepElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TitleScreenRealmsNotificationDeepElement extends $AbstractDeepElement {
 "deepElementHidden": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $DeepElementBuilder$Type<(any), (any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenRealmsNotificationDeepElement$Type = ($TitleScreenRealmsNotificationDeepElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenRealmsNotificationDeepElement_ = $TitleScreenRealmsNotificationDeepElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementGroup" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"
import {$ValuePlaceholderHolder, $ValuePlaceholderHolder$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ValuePlaceholderHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LoadingRequirementGroup$GroupMode, $LoadingRequirementGroup$GroupMode$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementGroup$GroupMode"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LoadingRequirementGroup implements $ValuePlaceholderHolder {
 "parent": $LoadingRequirementContainer
 "identifier": string
 "mode": $LoadingRequirementGroup$GroupMode

constructor(arg0: string, arg1: $LoadingRequirementGroup$GroupMode$Type, arg2: $LoadingRequirementContainer$Type)

public "equals"(arg0: any): boolean
public "copy"(arg0: boolean): $LoadingRequirementGroup
public "addValuePlaceholder"(arg0: string, arg1: $Supplier$Type<(string)>): void
public "removeInstance"(arg0: $LoadingRequirementInstance$Type): $LoadingRequirementInstance
public static "deserializeRequirementGroup"(arg0: string, arg1: string, arg2: $LoadingRequirementContainer$Type): $LoadingRequirementGroup
public static "serializeRequirementGroup"(arg0: $LoadingRequirementGroup$Type): $PropertyContainer
public "getValuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
public "requirementsMet"(): boolean
public "addInstance"(arg0: $LoadingRequirementInstance$Type): void
public "getInstances"(): $List<($LoadingRequirementInstance)>
get "valuePlaceholders"(): $Map<(string), ($Supplier<(string)>)>
get "instances"(): $List<($LoadingRequirementInstance)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadingRequirementGroup$Type = ($LoadingRequirementGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadingRequirementGroup_ = $LoadingRequirementGroup$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$RootPathToken" {
import {$PathToken, $PathToken$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathToken"
import {$EvaluationContextImpl, $EvaluationContextImpl$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$EvaluationContextImpl"
import {$PathTokenAppender, $PathTokenAppender$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$PathTokenAppender"
import {$PathRef, $PathRef$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/$PathRef"

export class $RootPathToken extends $PathToken {


public "isTokenDefinite"(): boolean
public "append"(arg0: $PathToken$Type): $RootPathToken
public "evaluate"(arg0: string, arg1: $PathRef$Type, arg2: any, arg3: $EvaluationContextImpl$Type): void
public "getTail"(): $PathToken
public "setTail"(arg0: $PathToken$Type): void
public "isFunctionPath"(): boolean
public "getPathFragment"(): string
public "getPathTokenAppender"(): $PathTokenAppender
public "getTokenCount"(): integer
get "tokenDefinite"(): boolean
get "tail"(): $PathToken
set "tail"(value: $PathToken$Type)
get "functionPath"(): boolean
get "pathFragment"(): string
get "pathTokenAppender"(): $PathTokenAppender
get "tokenCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RootPathToken$Type = ($RootPathToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RootPathToken_ = $RootPathToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/platform/services/$IPlatformCompatibilityLayer" {
import {$TitleScreenLayer, $TitleScreenLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $IPlatformCompatibilityLayer {

 "registerTitleScreenDeepCustomizationLayerElements"(arg0: $TitleScreenLayer$Type): void
 "getTitleScreenBrandingLines"(): $List<($Component)>
}

export namespace $IPlatformCompatibilityLayer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPlatformCompatibilityLayer$Type = ($IPlatformCompatibilityLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPlatformCompatibilityLayer_ = $IPlatformCompatibilityLayer$Type;
}}
declare module "packages/de/keksuccino/konkrete/events/$ScreenKeyReleasedEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"

export class $ScreenKeyReleasedEvent extends $Event {
readonly "keyCode": integer
readonly "scanCode": integer
readonly "modifiers": integer

constructor()
constructor(arg0: integer, arg1: integer, arg2: integer)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenKeyReleasedEvent$Type = ($ScreenKeyReleasedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenKeyReleasedEvent_ = $ScreenKeyReleasedEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/slideshow/$SlideshowMenuBackgroundBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$SlideshowMenuBackground, $SlideshowMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/backgrounds/slideshow/$SlideshowMenuBackground"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$SerializedMenuBackground, $SerializedMenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$SerializedMenuBackground"
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"

export class $SlideshowMenuBackgroundBuilder extends $MenuBackgroundBuilder<($SlideshowMenuBackground)> {

constructor()

public "getDisplayName"(): $Component
public "getDescription"(): ($Component)[]
public "serializedBackground"(arg0: $SlideshowMenuBackground$Type): $SerializedMenuBackground
public "buildNewOrEditInstance"(arg0: $Screen$Type, arg1: $SlideshowMenuBackground$Type, arg2: $Consumer$Type<($SlideshowMenuBackground$Type)>): void
get "displayName"(): $Component
get "description"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlideshowMenuBackgroundBuilder$Type = ($SlideshowMenuBackgroundBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlideshowMenuBackgroundBuilder_ = $SlideshowMenuBackgroundBuilder$Type;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/handling/$IAdvancedWidgetBase" {
import {$CharData, $CharData$Type} from "packages/de/keksuccino/konkrete/input/$CharData"
import {$KeyboardData, $KeyboardData$Type} from "packages/de/keksuccino/konkrete/input/$KeyboardData"

export interface $IAdvancedWidgetBase {

 "onCharTyped"(arg0: $CharData$Type): void
 "onMouseClicked"(arg0: double, arg1: double, arg2: integer): void
 "onKeyPress"(arg0: $KeyboardData$Type): void
 "onKeyReleased"(arg0: $KeyboardData$Type): void
 "onTick"(): void
}

export namespace $IAdvancedWidgetBase {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAdvancedWidgetBase$Type = ($IAdvancedWidgetBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAdvancedWidgetBase_ = $IAdvancedWidgetBase$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$WebUtils" {
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"

export class $WebUtils {

constructor()

public static "openWebLink"(arg0: string): void
public static "isValidUrl"(arg0: string): boolean
public static "getMimeType"(arg0: string): string
public static "openResourceStream"(arg0: string): $InputStream
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WebUtils$Type = ($WebUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WebUtils_ = $WebUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsNumberRequirement" {
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsNumberRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "editValue"(arg0: $Screen$Type, arg1: $LoadingRequirementInstance$Type): void
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsNumberRequirement$Type = ($IsNumberRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsNumberRequirement_ = $IsNumberRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/top/$TitleScreenForgeTopBuilder" {
import {$TitleScreenLayer, $TitleScreenLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/$TitleScreenLayer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$DeepScreenCustomizationLayer, $DeepScreenCustomizationLayer$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$TitleScreenForgeTopDeepElement, $TitleScreenForgeTopDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/top/$TitleScreenForgeTopDeepElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"
import {$TitleScreenForgeTopDeepEditorElement, $TitleScreenForgeTopDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/top/$TitleScreenForgeTopDeepEditorElement"

export class $TitleScreenForgeTopBuilder extends $DeepElementBuilder<($TitleScreenLayer), ($TitleScreenForgeTopDeepElement), ($TitleScreenForgeTopDeepEditorElement)> {
readonly "layer": D

constructor(arg0: $TitleScreenLayer$Type)

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "deserializeElement"(arg0: $SerializedElement$Type): $TitleScreenForgeTopDeepElement
public "stackElements"(arg0: $TitleScreenForgeTopDeepElement$Type, arg1: $TitleScreenForgeTopDeepElement$Type): void
public "wrapIntoEditorElement"(arg0: $TitleScreenForgeTopDeepElement$Type, arg1: $LayoutEditorScreen$Type): $TitleScreenForgeTopDeepEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenForgeTopBuilder$Type = ($TitleScreenForgeTopBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenForgeTopBuilder_ = $TitleScreenForgeTopBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/$DeepScreenCustomizationLayer" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"

export class $DeepScreenCustomizationLayer {

constructor(arg0: string)

public "registerBuilder"(arg0: $DeepElementBuilder$Type<(any), (any), (any)>): void
public "getBuilder"(arg0: string): $DeepElementBuilder<(any), (any), (any)>
public "unregisterBuilder"(arg0: string): void
public "hasBuilder"(arg0: string): boolean
public "getTargetScreenClassPath"(): string
public "getBuilders"(): $List<($DeepElementBuilder<(any), (any), (any)>)>
get "targetScreenClassPath"(): string
get "builders"(): $List<($DeepElementBuilder<(any), (any), (any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeepScreenCustomizationLayer$Type = ($DeepScreenCustomizationLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeepScreenCustomizationLayer_ = $DeepScreenCustomizationLayer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/$UIBase" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Color, $Color$Type} from "packages/java/awt/$Color"
import {$RenderingUtils, $RenderingUtils$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$RenderingUtils"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$UIColorTheme, $UIColorTheme$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/theme/$UIColorTheme"

export class $UIBase extends $RenderingUtils {
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor()

public static "calculateFixedScale"(arg0: float): float
public static "drawElementLabel"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: string, arg3: integer, arg4: integer, arg5: integer): integer
public static "drawElementLabel"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $Component$Type, arg3: integer, arg4: integer): integer
public static "drawElementLabel"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: string, arg3: integer, arg4: integer): integer
public static "drawElementLabel"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $Component$Type, arg3: integer, arg4: integer, arg5: integer): integer
public static "getFixedUIScale"(): float
public static "renderListingDot"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: $Color$Type): void
public static "renderListingDot"(arg0: $GuiGraphics$Type, arg1: float, arg2: float, arg3: integer): void
public static "getUIColorTheme"(): $UIColorTheme
public static "getUIScale"(): float
public static "renderBorder"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: $DrawableColor$Type, arg7: boolean, arg8: boolean, arg9: boolean, arg10: boolean): void
public static "renderBorder"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: $Color$Type, arg7: boolean, arg8: boolean, arg9: boolean, arg10: boolean): void
public static "renderBorder"(arg0: $GuiGraphics$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: integer, arg7: boolean, arg8: boolean, arg9: boolean, arg10: boolean): void
public static "applyDefaultWidgetSkinTo"<T>(arg0: T): T
get "fixedUIScale"(): float
get "uIColorTheme"(): $UIColorTheme
get "uIScale"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UIBase$Type = ($UIBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UIBase_ = $UIBase$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip" {
import {$Tooltip$TooltipTextAlignment, $Tooltip$TooltipTextAlignment$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip$TooltipTextAlignment"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $Tooltip implements $Renderable {

constructor()

public "isEmpty"(): boolean
public static "of"(...arg0: ($Component$Type)[]): $Tooltip
public static "of"(...arg0: (string)[]): $Tooltip
public static "empty"(): $Tooltip
public "setScale"(arg0: float): $Tooltip
public "getBackgroundColor"(): $DrawableColor
public "setKeepBackgroundAspectRatio"(arg0: boolean): $Tooltip
public "setBackgroundTexture"(arg0: $ITexture$Type): $Tooltip
public "getTextAlignment"(): $Tooltip$TooltipTextAlignment
public "setTextAlignment"(arg0: $Tooltip$TooltipTextAlignment$Type): $Tooltip
public "setTooltipText"(...arg0: ($Component$Type)[]): $Tooltip
public "setTooltipText"(...arg0: (string)[]): $Tooltip
public "setTooltipText"(arg0: $List$Type<($Component$Type)>): $Tooltip
public "setTextBaseColor"(arg0: $DrawableColor$Type): $Tooltip
public "getTextBaseColor"(): $DrawableColor
public "getScale"(): float
public "setVanillaLike"(arg0: boolean): $Tooltip
public "setMouseOffset"(arg0: integer): $Tooltip
public "setCustomX"(arg0: integer): $Tooltip
public "getCustomX"(): integer
public "hasTextShadow"(): boolean
public "getTextBorderSize"(): integer
public "setTextBorderSize"(arg0: integer): $Tooltip
public "setCustomY"(arg0: integer): $Tooltip
public "getCustomY"(): integer
public "isVanillaLike"(): boolean
public "copyStyleOf"(arg0: $Tooltip$Type): $Tooltip
public "getMouseOffset"(): integer
public "getBorderColor"(): $DrawableColor
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setBackgroundColor"(arg0: $DrawableColor$Type, arg1: $DrawableColor$Type): $Tooltip
public "getTooltip"(): $List<($Component)>
public "setDefaultStyle"(): $Tooltip
public "setTextShadow"(arg0: boolean): $Tooltip
public "getFont"(): $Font
public "setFont"(arg0: $Font$Type): $Tooltip
public "getBackgroundTexture"(): $ITexture
public "keepBackgroundAspectRatio"(): boolean
set "scale"(value: float)
get "backgroundColor"(): $DrawableColor
set "backgroundTexture"(value: $ITexture$Type)
get "textAlignment"(): $Tooltip$TooltipTextAlignment
set "textAlignment"(value: $Tooltip$TooltipTextAlignment$Type)
set "tooltipText"(value: ($Component$Type)[])
set "tooltipText"(value: (string)[])
set "tooltipText"(value: $List$Type<($Component$Type)>)
set "textBaseColor"(value: $DrawableColor$Type)
get "textBaseColor"(): $DrawableColor
get "scale"(): float
set "vanillaLike"(value: boolean)
set "mouseOffset"(value: integer)
set "customX"(value: integer)
get "customX"(): integer
get "textBorderSize"(): integer
set "textBorderSize"(value: integer)
set "customY"(value: integer)
get "customY"(): integer
get "vanillaLike"(): boolean
get "mouseOffset"(): integer
get "borderColor"(): $DrawableColor
get "tooltip"(): $List<($Component)>
set "textShadow"(value: boolean)
get "font"(): $Font
set "font"(value: $Font$Type)
get "backgroundTexture"(): $ITexture
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Tooltip$Type = ($Tooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Tooltip_ = $Tooltip$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$BooleanNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $ValueNodes$BooleanNode extends $ValueNode {


public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "getBoolean"(): boolean
public "isBooleanNode"(): boolean
public "asBooleanNode"(): $ValueNodes$BooleanNode
get "boolean"(): boolean
get "booleanNode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$BooleanNode$Type = ($ValueNodes$BooleanNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$BooleanNode_ = $ValueNodes$BooleanNode$Type;
}}
declare module "packages/de/keksuccino/konkrete/config/exceptions/$InvalidValueException" {
import {$Exception, $Exception$Type} from "packages/java/lang/$Exception"

export class $InvalidValueException extends $Exception {

constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvalidValueException$Type = ($InvalidValueException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvalidValueException_ = $InvalidValueException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/text/$TextResourceHandler" {
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextFileType, $TextFileType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/types/$TextFileType"
import {$ResourceHandler, $ResourceHandler$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceHandler"

export class $TextResourceHandler extends $ResourceHandler<($IText), ($TextFileType)> {
static readonly "INSTANCE": $TextResourceHandler

constructor()

public "getAllowedFileTypes"(): $List<($TextFileType)>
get "allowedFileTypes"(): $List<($TextFileType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextResourceHandler$Type = ($TextResourceHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextResourceHandler_ = $TextResourceHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance$RequirementMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $LoadingRequirementInstance$RequirementMode extends $Enum<($LoadingRequirementInstance$RequirementMode)> {
static readonly "IF": $LoadingRequirementInstance$RequirementMode
static readonly "IF_NOT": $LoadingRequirementInstance$RequirementMode
readonly "name": string


public static "values"(): ($LoadingRequirementInstance$RequirementMode)[]
public static "valueOf"(arg0: string): $LoadingRequirementInstance$RequirementMode
public static "getByName"(arg0: string): $LoadingRequirementInstance$RequirementMode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadingRequirementInstance$RequirementMode$Type = (("if_not") | ("if")) | ($LoadingRequirementInstance$RequirementMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadingRequirementInstance$RequirementMode_ = $LoadingRequirementInstance$RequirementMode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsModLoadedRequirement" {
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsModLoadedRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "editValue"(arg0: $Screen$Type, arg1: $LoadingRequirementInstance$Type): void
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsModLoadedRequirement$Type = ($IsModLoadedRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsModLoadedRequirement_ = $IsModLoadedRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/animation/$AdvancedAnimation" {
import {$IAnimationRenderer, $IAnimationRenderer$Type} from "packages/de/keksuccino/konkrete/rendering/animation/$IAnimationRenderer"
import {$AspectRatio, $AspectRatio$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$AspectRatio"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$PlayableResource, $PlayableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$PlayableResource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderableResource, $RenderableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$RenderableResource"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $AdvancedAnimation implements $IAnimationRenderer, $RenderableResource, $PlayableResource {
 "propertiesPath": string

constructor(arg0: $IAnimationRenderer$Type, arg1: $IAnimationRenderer$Type, arg2: string, arg3: string, arg4: boolean)

public "stop"(): void
public "close"(): void
public "open"(): $InputStream
public "reset"(): void
public "getPath"(): string
public "currentFrame"(): integer
public "setWidth"(arg0: integer): void
public "resetAnimation"(): void
public "isReady"(): boolean
public "setLooped"(arg0: boolean): void
public "isGettingLooped"(): boolean
public "setOpacity"(arg0: float): void
public "setPosX"(arg0: integer): void
public "setPosY"(arg0: integer): void
public "prepareAnimation"(): void
public "isClosed"(): boolean
public "hasStarted"(): boolean
/**
 * 
 * @deprecated
 */
public "render"(arg0: $GuiGraphics$Type): void
public "setStretchImageToScreensize"(arg0: boolean): void
public "isStretchedToStreensize"(): boolean
public "play"(): void
public "getAspectRatio"(): $AspectRatio
public "isPlaying"(): boolean
public "getPosY"(): integer
public "getPosX"(): integer
public "isPaused"(): boolean
public "getWidth"(): integer
public "pause"(): void
public "getHeight"(): integer
public "resetAudio"(): void
public "stopAudio"(): void
public "isLoadingFailed"(): boolean
public "isLoadingCompleted"(): boolean
public "replayIntro"(): boolean
public "getFPS"(): integer
public "animationFrames"(): integer
public "setFPS"(arg0: integer): void
public "getMainAnimationRenderer"(): $IAnimationRenderer
public "setHideAfterLastFrame"(arg0: boolean): void
public "getIntroAnimationRenderer"(): $IAnimationRenderer
public "setHeight"(arg0: integer): void
public "getResourceLocation"(): $ResourceLocation
public "isFinished"(): boolean
public "setMuteAudio"(arg0: boolean): void
public "hasIntro"(): boolean
public "hasMainAudio"(): boolean
public "hasIntroAudio"(): boolean
public "waitForLoadingCompletedOrFailed"(arg0: long): void
public "waitForReady"(arg0: long): void
get "path"(): string
set "width"(value: integer)
get "ready"(): boolean
set "looped"(value: boolean)
get "gettingLooped"(): boolean
set "opacity"(value: float)
set "posX"(value: integer)
set "posY"(value: integer)
get "closed"(): boolean
set "stretchImageToScreensize"(value: boolean)
get "stretchedToStreensize"(): boolean
get "aspectRatio"(): $AspectRatio
get "playing"(): boolean
get "posY"(): integer
get "posX"(): integer
get "paused"(): boolean
get "width"(): integer
get "height"(): integer
get "loadingFailed"(): boolean
get "loadingCompleted"(): boolean
get "fPS"(): integer
set "fPS"(value: integer)
get "mainAnimationRenderer"(): $IAnimationRenderer
set "hideAfterLastFrame"(value: boolean)
get "introAnimationRenderer"(): $IAnimationRenderer
set "height"(value: integer)
get "resourceLocation"(): $ResourceLocation
get "finished"(): boolean
set "muteAudio"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancedAnimation$Type = ($AdvancedAnimation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancedAnimation_ = $AdvancedAnimation$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$AbstractJsonProvider" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$JsonProvider, $JsonProvider$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/spi/json/$JsonProvider"

export class $AbstractJsonProvider implements $JsonProvider {

constructor()

public "length"(arg0: any): integer
public "isArray"(arg0: any): boolean
public "setProperty"(arg0: any, arg1: any, arg2: any): void
public "unwrap"(arg0: any): any
public "setArrayIndex"(arg0: any, arg1: integer, arg2: any): void
public "toIterable"(arg0: any): $Iterable<(any)>
public "getMapValue"(arg0: any, arg1: string): any
public "getPropertyKeys"(arg0: any): $Collection<(string)>
public "isMap"(arg0: any): boolean
public "removeProperty"(arg0: any, arg1: any): void
public "getArrayIndex"(arg0: any, arg1: integer): any
/**
 * 
 * @deprecated
 */
public "getArrayIndex"(arg0: any, arg1: integer, arg2: boolean): any
public "createMap"(): any
public "parse"(arg0: string): any
public "parse"(arg0: $InputStream$Type, arg1: string): any
public "parse"(arg0: (byte)[]): any
public "toJson"(arg0: any): string
public "createArray"(): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractJsonProvider$Type = ($AbstractJsonProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractJsonProvider_ = $AbstractJsonProvider$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/$InvalidJsonException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$JsonPathException, $JsonPathException$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPathException"

export class $InvalidJsonException extends $JsonPathException {

constructor(arg0: $Throwable$Type, arg1: string)
constructor(arg0: $Throwable$Type)
constructor(arg0: string, arg1: $Throwable$Type)
constructor(arg0: string)
constructor()

public "getJson"(): string
get "json"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvalidJsonException$Type = ($InvalidJsonException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvalidJsonException_ = $InvalidJsonException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/window/$IsWindowHeightBiggerThanRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsWindowHeightBiggerThanRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsWindowHeightBiggerThanRequirement$Type = ($IsWindowHeightBiggerThanRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsWindowHeightBiggerThanRequirement_ = $IsWindowHeightBiggerThanRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$InputFieldEditorElement, $InputFieldEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldEditorElement"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$InputFieldElement, $InputFieldElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/inputfield/$InputFieldElement"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"

export class $InputFieldElementBuilder extends $ElementBuilder<($InputFieldElement), ($InputFieldEditorElement)> {

constructor()

public "getDisplayName"(arg0: $AbstractElement$Type): $Component
public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "wrapIntoEditorElement"(arg0: $InputFieldElement$Type, arg1: $LayoutEditorScreen$Type): $InputFieldEditorElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputFieldElementBuilder$Type = ($InputFieldElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputFieldElementBuilder_ = $InputFieldElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$MousePosXPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MousePosXPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MousePosXPlaceholder$Type = ($MousePosXPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MousePosXPlaceholder_ = $MousePosXPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/brackets/$HighlightAngleBracketsFormattingRule" {
import {$HighlightBracketsFormattingRuleBase, $HighlightBracketsFormattingRuleBase$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/formattingrules/brackets/$HighlightBracketsFormattingRuleBase"

export class $HighlightAngleBracketsFormattingRule extends $HighlightBracketsFormattingRuleBase {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HighlightAngleBracketsFormattingRule$Type = ($HighlightAngleBracketsFormattingRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HighlightAngleBracketsFormattingRule_ = $HighlightAngleBracketsFormattingRule$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/$IsServerIpRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsServerIpRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsServerIpRequirement$Type = ($IsServerIpRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsServerIpRequirement_ = $IsServerIpRequirement$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/reader/$JsonWriter" {
import {$JSONAwareEx, $JSONAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAwareEx"
import {$JSONAware, $JSONAware$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONAware"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JsonWriterI, $JsonWriterI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/reader/$JsonWriterI"
import {$JSONStreamAwareEx, $JSONStreamAwareEx$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStreamAwareEx"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $JsonWriter {
static readonly "JSONStreamAwareWriter": $JsonWriterI<($JSONStreamAwareEx)>
static readonly "JSONStreamAwareExWriter": $JsonWriterI<($JSONStreamAwareEx)>
static readonly "JSONJSONAwareExWriter": $JsonWriterI<($JSONAwareEx)>
static readonly "JSONJSONAwareWriter": $JsonWriterI<($JSONAware)>
static readonly "JSONIterableWriter": $JsonWriterI<($Iterable<(any)>)>
static readonly "EnumWriter": $JsonWriterI<($Enum<(any)>)>
static readonly "JSONMapWriter": $JsonWriterI<($Map<(string), (any)>)>
static readonly "beansWriterASM": $JsonWriterI<(any)>
static readonly "beansWriter": $JsonWriterI<(any)>
static readonly "arrayWriter": $JsonWriterI<(any)>
static readonly "toStringWriter": $JsonWriterI<(any)>

constructor()

public "init"(): void
public "addInterfaceWriterLast"(arg0: $Class$Type<(any)>, arg1: $JsonWriterI$Type<(any)>): void
public "registerWriterInterfaceLast"(arg0: $Class$Type<(any)>, arg1: $JsonWriterI$Type<(any)>): void
public "registerWriterInterfaceFirst"(arg0: $Class$Type<(any)>, arg1: $JsonWriterI$Type<(any)>): void
public "getWriterByInterface"(arg0: $Class$Type<(any)>): $JsonWriterI<(any)>
public "registerWriterInterface"(arg0: $Class$Type<(any)>, arg1: $JsonWriterI$Type<(any)>): void
public "addInterfaceWriterFirst"(arg0: $Class$Type<(any)>, arg1: $JsonWriterI$Type<(any)>): void
public "remapField"<T>(arg0: $Class$Type<(T)>, arg1: string, arg2: string): void
public "registerWriter"<T>(arg0: $JsonWriterI$Type<(T)>, ...arg1: ($Class$Type<(any)>)[]): void
public "getWrite"(arg0: $Class$Type<(any)>): $JsonWriterI<(any)>
public static "writeJSONKV"(arg0: string, arg1: any, arg2: $Appendable$Type, arg3: $JSONStyle$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonWriter$Type = ($JsonWriter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonWriter_ = $JsonWriter$Type;
}}
declare module "packages/de/keksuccino/konkrete/mixin/client/$IMixinScreen" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $IMixinScreen {

 "setFontKonkrete"(arg0: $Font$Type): void
 "getRenderablesKonkrete"(): $List<($Renderable)>
 "getChildrenKonkrete"(): $List<($GuiEventListener)>
}

export namespace $IMixinScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinScreen$Type = ($IMixinScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinScreen_ = $IMixinScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$ASMUtil" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Label, $Label$Type} from "packages/org/objectweb/asm/$Label"
import {$MethodVisitor, $MethodVisitor$Type} from "packages/org/objectweb/asm/$MethodVisitor"
import {$FieldFilter, $FieldFilter$Type} from "packages/de/keksuccino/konkrete/json/minidev/asm/$FieldFilter"
import {$Accessor, $Accessor$Type} from "packages/de/keksuccino/konkrete/json/minidev/asm/$Accessor"

export class $ASMUtil {

constructor()

public static "autoBoxing"(arg0: $MethodVisitor$Type, arg1: $Class$Type<(any)>): void
public static "newLabels"(arg0: integer): ($Label)[]
public static "getAccessors"(arg0: $Class$Type<(any)>, arg1: $FieldFilter$Type): ($Accessor)[]
public static "getSetterName"(arg0: string): string
public static "getGetterName"(arg0: string): string
public static "getIsName"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ASMUtil$Type = ($ASMUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ASMUtil_ = $ASMUtil$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeSecondRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsRealTimeSecondRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsRealTimeSecondRequirement$Type = ($IsRealTimeSecondRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsRealTimeSecondRequirement_ = $IsRealTimeSecondRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/bridge/$BridgePacketMessageForge" {
import {$PacketMessageBaseForge, $PacketMessageBaseForge$Type} from "packages/de/keksuccino/fancymenu/networking/$PacketMessageBaseForge"

export class $BridgePacketMessageForge extends $PacketMessageBaseForge {
 "dataWithIdentifier": string
 "direction": string

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BridgePacketMessageForge$Type = ($BridgePacketMessageForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BridgePacketMessageForge_ = $BridgePacketMessageForge$Type;
}}
declare module "packages/de/keksuccino/konkrete/sound/$ExternalAudioResourceLocation" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ExternalAudioResourceLocation {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExternalAudioResourceLocation$Type = ($ExternalAudioResourceLocation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExternalAudioResourceLocation_ = $ExternalAudioResourceLocation$Type;
}}
declare module "packages/de/keksuccino/fancymenu/commands/$OpenGuiScreenCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $OpenGuiScreenCommand {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenGuiScreenCommand$Type = ($OpenGuiScreenCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenGuiScreenCommand_ = $OpenGuiScreenCommand$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/cycle/$CommonCycles$CycleEnabledDisabled" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$LocalizedEnum, $LocalizedEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedEnum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $CommonCycles$CycleEnabledDisabled extends $Enum<($CommonCycles$CycleEnabledDisabled)> implements $LocalizedEnum<($CommonCycles$CycleEnabledDisabled)> {
static readonly "ENABLED": $CommonCycles$CycleEnabledDisabled
static readonly "DISABLED": $CommonCycles$CycleEnabledDisabled


public "getName"(): string
public static "values"(): ($CommonCycles$CycleEnabledDisabled)[]
public static "valueOf"(arg0: string): $CommonCycles$CycleEnabledDisabled
public static "getByName"(arg0: string): $CommonCycles$CycleEnabledDisabled
public "getAsBoolean"(): boolean
public "getValueComponentStyle"(): $Style
public "getLocalizationKeyBase"(): string
public static "getByBoolean"(arg0: boolean): $CommonCycles$CycleEnabledDisabled
public "getByNameInternal"(arg0: string): $CommonCycles$CycleEnabledDisabled
public "getValues"(): ($CommonCycles$CycleEnabledDisabled)[]
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "asBoolean"(): boolean
get "valueComponentStyle"(): $Style
get "localizationKeyBase"(): string
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonCycles$CycleEnabledDisabled$Type = (("disabled") | ("enabled")) | ($CommonCycles$CycleEnabledDisabled);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonCycles$CycleEnabledDisabled_ = $CommonCycles$CycleEnabledDisabled$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$JsonNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $ValueNodes$JsonNode extends $ValueNode {


public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: $ValueNodes$JsonNode$Type, arg1: $Predicate$PredicateContext$Type): boolean
public "equals"(arg0: any): boolean
public "length"(arg0: $Predicate$PredicateContext$Type): integer
public "toString"(): string
public "isArray"(arg0: $Predicate$PredicateContext$Type): boolean
public "isEmpty"(arg0: $Predicate$PredicateContext$Type): boolean
public "parse"(arg0: $Predicate$PredicateContext$Type): any
public "asValueListNode"(arg0: $Predicate$PredicateContext$Type): $ValueNode
public "asJsonNode"(): $ValueNodes$JsonNode
public "isJsonNode"(): boolean
public "isParsed"(): boolean
public "isMap"(arg0: $Predicate$PredicateContext$Type): boolean
public "getJson"(): any
get "jsonNode"(): boolean
get "parsed"(): boolean
get "json"(): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$JsonNode$Type = ($ValueNodes$JsonNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$JsonNode_ = $ValueNodes$JsonNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$InitializationPhase" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $InitOrResizeScreenEvent$InitializationPhase extends $Enum<($InitOrResizeScreenEvent$InitializationPhase)> {
static readonly "INIT": $InitOrResizeScreenEvent$InitializationPhase
static readonly "RESIZE": $InitOrResizeScreenEvent$InitializationPhase


public static "values"(): ($InitOrResizeScreenEvent$InitializationPhase)[]
public static "valueOf"(arg0: string): $InitOrResizeScreenEvent$InitializationPhase
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InitOrResizeScreenEvent$InitializationPhase$Type = (("init") | ("resize")) | ($InitOrResizeScreenEvent$InitializationPhase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InitOrResizeScreenEvent$InitializationPhase_ = $InitOrResizeScreenEvent$InitializationPhase$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/gui/$ScreenWidthPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ScreenWidthPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenWidthPlaceholder$Type = ($ScreenWidthPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenWidthPlaceholder_ = $ScreenWidthPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/command/$VariableCommandPacketCodec" {
import {$PacketCodec, $PacketCodec$Type} from "packages/de/keksuccino/fancymenu/networking/$PacketCodec"
import {$VariableCommandPacket, $VariableCommandPacket$Type} from "packages/de/keksuccino/fancymenu/networking/packets/commands/variable/command/$VariableCommandPacket"

export class $VariableCommandPacketCodec extends $PacketCodec<($VariableCommandPacket)> {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariableCommandPacketCodec$Type = ($VariableCommandPacketCodec);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariableCommandPacketCodec_ = $VariableCommandPacketCodec$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsAnyButtonHoveredRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsAnyButtonHoveredRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsAnyButtonHoveredRequirement$Type = ($IsAnyButtonHoveredRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsAnyButtonHoveredRequirement_ = $IsAnyButtonHoveredRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaTexture$DecodedFmaImage" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$FmaDecoder, $FmaDecoder$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/fma/$FmaDecoder"

export class $FmaTexture$DecodedFmaImage extends $Record {

constructor(decoder: $FmaDecoder$Type, imageWidth: integer, imageHeight: integer, numPlays: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "decoder"(): $FmaDecoder
public "imageHeight"(): integer
public "imageWidth"(): integer
public "numPlays"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FmaTexture$DecodedFmaImage$Type = ($FmaTexture$DecodedFmaImage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FmaTexture$DecodedFmaImage_ = $FmaTexture$DecodedFmaImage$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier" {
import {$IVideo, $IVideo$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/video/$IVideo"
import {$ResourceSourceType, $ResourceSourceType$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSourceType"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceHandler, $ResourceHandler$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceHandler"
import {$IAudio, $IAudio$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/audio/$IAudio"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$IText, $IText$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/text/$IText"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Resource, $Resource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$Resource"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$FileMediaType, $FileMediaType$Type} from "packages/de/keksuccino/fancymenu/util/file/type/$FileMediaType"

export class $ResourceSupplier<R extends $Resource> {

constructor(arg0: $Class$Type<(R)>, arg1: $FileMediaType$Type, arg2: string)

public "get"(): R
public "isEmpty"(): boolean
public static "empty"<R extends $Resource>(arg0: $Class$Type<(R)>, arg1: $FileMediaType$Type): $ResourceSupplier<(R)>
public static "text"(arg0: string): $ResourceSupplier<($IText)>
public static "image"(arg0: string): $ResourceSupplier<($ITexture)>
public static "audio"(arg0: string): $ResourceSupplier<($IAudio)>
public "setSource"(arg0: string): void
public "getSourceWithoutPrefix"(): string
public "getSourceType"(): $ResourceSourceType
public "getMediaType"(): $FileMediaType
public "setOnUpdateResourceTask"(arg0: $Consumer$Type<(R)>): $ResourceSupplier<(R)>
public "forRenderable"(arg0: $BiConsumer$Type<(R), ($ResourceLocation$Type)>): void
public "getResourceType"(): $Class<(R)>
public "getResourceHandler"(): $ResourceHandler<(any), (any)>
public static "video"(arg0: string): $ResourceSupplier<($IVideo)>
public "getSourceWithPrefix"(): string
set "source"(value: string)
get "sourceWithoutPrefix"(): string
get "sourceType"(): $ResourceSourceType
get "mediaType"(): $FileMediaType
set "onUpdateResourceTask"(value: $Consumer$Type<(R)>)
get "resourceType"(): $Class<(R)>
get "resourceHandler"(): $ResourceHandler<(any), (any)>
get "sourceWithPrefix"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceSupplier$Type<R> = ($ResourceSupplier<(R)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceSupplier_<R> = $ResourceSupplier$Type<(R)>;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/$ArrayStack" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ArrayStack {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrayStack$Type = ($ArrayStack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrayStack_ = $ArrayStack$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/$PacketHandler" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$PacketHandler$PacketDirection, $PacketHandler$PacketDirection$Type} from "packages/de/keksuccino/fancymenu/networking/$PacketHandler$PacketDirection"
import {$Packet, $Packet$Type} from "packages/de/keksuccino/fancymenu/networking/$Packet"

export class $PacketHandler {

constructor()

public static "onPacketReceived"(arg0: $ServerPlayer$Type, arg1: $PacketHandler$PacketDirection$Type, arg2: string): void
public static "sendToClient"<T extends $Packet>(arg0: $ServerPlayer$Type, arg1: T): void
public static "setSendToClientLogic"(arg0: $BiConsumer$Type<($ServerPlayer$Type), (string)>): void
public static "setSendToServerLogic"(arg0: $Consumer$Type<(string)>): void
public static "sendToServer"<T extends $Packet>(arg0: T): void
set "sendToClientLogic"(value: $BiConsumer$Type<($ServerPlayer$Type), (string)>)
set "sendToServerLogic"(value: $Consumer$Type<(string)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketHandler$Type = ($PacketHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketHandler_ = $PacketHandler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/server/$ServerPlayerCountPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $ServerPlayerCountPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerPlayerCountPlaceholder$Type = ($ServerPlayerCountPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerPlayerCountPlaceholder_ = $ServerPlayerCountPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/textures/$CapeResourceSupplier" {
import {$SimpleTexture, $SimpleTexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$SimpleTexture"
import {$ResourceSourceType, $ResourceSourceType$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSourceType"
import {$ITexture, $ITexture$Type} from "packages/de/keksuccino/fancymenu/util/resource/resources/texture/$ITexture"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceSupplier, $ResourceSupplier$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSupplier"

export class $CapeResourceSupplier extends $ResourceSupplier<($ITexture)> {
static readonly "DEFAULT_CAPE_LOCATION": $ResourceLocation
static readonly "DEFAULT_CAPE": $SimpleTexture

constructor(arg0: string, arg1: boolean)

public "get"(): $ITexture
public "setSource"(arg0: string): void
public "getSourceWithoutPrefix"(): string
public "getSourceType"(): $ResourceSourceType
public "getCapeLocation"(): $ResourceLocation
public "hasNoCape"(): boolean
public "getSourceWithPrefix"(): string
set "source"(value: string)
get "sourceWithoutPrefix"(): string
get "sourceType"(): $ResourceSourceType
get "capeLocation"(): $ResourceLocation
get "sourceWithPrefix"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapeResourceSupplier$Type = ($CapeResourceSupplier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapeResourceSupplier_ = $CapeResourceSupplier$Type;
}}
declare module "packages/de/keksuccino/konkrete/localization/$Locals" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LocalizationPackage, $LocalizationPackage$Type} from "packages/de/keksuccino/konkrete/localization/$LocalizationPackage"

export class $Locals {

constructor()

public static "getPackage"(arg0: string): $LocalizationPackage
public static "localize"(arg0: string, ...arg1: (string)[]): string
public static "localizeTo"(arg0: string, arg1: string, ...arg2: (string)[]): string
public static "getLocalsFromFile"(arg0: string): void
public static "getLocalsFromFile"(arg0: $File$Type): void
public static "getLocalsFromDir"(arg0: string): void
public static "copyLocalsFileToDir"(arg0: $ResourceLocation$Type, arg1: string, arg2: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Locals$Type = ($Locals);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Locals_ = $Locals$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/$ResourceSourceType" {
import {$LocalizedGenericValueCycle, $LocalizedGenericValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$LocalizedGenericValueCycle"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$LocalizedCycleEnum, $LocalizedCycleEnum$Type} from "packages/de/keksuccino/fancymenu/util/enums/$LocalizedCycleEnum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ResourceSourceType extends $Enum<($ResourceSourceType)> implements $LocalizedCycleEnum<($ResourceSourceType)> {
static readonly "LOCATION": $ResourceSourceType
static readonly "LOCAL": $ResourceSourceType
static readonly "WEB": $ResourceSourceType


public "getName"(): string
public static "values"(): ($ResourceSourceType)[]
public static "valueOf"(arg0: string): $ResourceSourceType
public static "getByName"(arg0: string): $ResourceSourceType
public "getValueComponentStyle"(): $Style
public "getLocalizationKeyBase"(): string
public static "getWithoutSourcePrefix"(arg0: string): string
public static "getSourceTypeOf"(arg0: string): $ResourceSourceType
public "getSourcePrefix"(): string
public static "hasSourcePrefix"(arg0: string): boolean
public "getCycleComponentStyle"(): $Style
public "cycle"(arg0: $ResourceSourceType$Type): $LocalizedGenericValueCycle<($ResourceSourceType)>
public "cycle"(): $LocalizedGenericValueCycle<($ResourceSourceType)>
public "getCycleComponent"(): $MutableComponent
public "getValueLocalizationKey"(): string
public "getValueComponent"(): $MutableComponent
get "name"(): string
get "valueComponentStyle"(): $Style
get "localizationKeyBase"(): string
get "sourcePrefix"(): string
get "cycleComponentStyle"(): $Style
get "cycleComponent"(): $MutableComponent
get "valueLocalizationKey"(): string
get "valueComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceSourceType$Type = (("web") | ("location") | ("local")) | ($ResourceSourceType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceSourceType_ = $ResourceSourceType$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/$WidgetCacheUpdatedEvent" {
import {$WidgetMeta, $WidgetMeta$Type} from "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta"
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"

export class $WidgetCacheUpdatedEvent extends $EventBase {

constructor(arg0: $Screen$Type, arg1: $List$Type<($WidgetMeta$Type)>, arg2: boolean)

public "isCancelable"(): boolean
public "getScreen"(): $Screen
public "getCachedWidgetMetaList"(): $List<($WidgetMeta)>
public "getCachedWidgetsList"(): $List<($AbstractWidget)>
public "addWidgetToScreen"(arg0: $GuiEventListener$Type): void
public "cacheUpdated"(): boolean
get "cancelable"(): boolean
get "screen"(): $Screen
get "cachedWidgetMetaList"(): $List<($WidgetMeta)>
get "cachedWidgetsList"(): $List<($AbstractWidget)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetCacheUpdatedEvent$Type = ($WidgetCacheUpdatedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetCacheUpdatedEvent_ = $WidgetCacheUpdatedEvent$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$ScreenMouseScrollEvent$Pre" {
import {$ScreenMouseScrollEvent, $ScreenMouseScrollEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$ScreenMouseScrollEvent"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $ScreenMouseScrollEvent$Pre extends $ScreenMouseScrollEvent {

constructor(arg0: $Screen$Type, arg1: double, arg2: double, arg3: double)

public "isCancelable"(): boolean
get "cancelable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenMouseScrollEvent$Pre$Type = ($ScreenMouseScrollEvent$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenMouseScrollEvent$Pre_ = $ScreenMouseScrollEvent$Pre$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidget" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$AbstractLayoutEditorWidgetBuilder, $AbstractLayoutEditorWidgetBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/widget/$AbstractLayoutEditorWidgetBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UIComponent, $UIComponent$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/$UIComponent"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$AbstractEditorElement, $AbstractEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$AbstractEditorElement"

export class $AbstractLayoutEditorWidget extends $UIComponent {
 "posZ": float
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: $LayoutEditorScreen$Type, arg1: $AbstractLayoutEditorWidgetBuilder$Type<(any)>)

public "tick"(): void
public "refresh"(): void
public "setExpanded"(arg0: boolean): $AbstractLayoutEditorWidget
public "getBuilder"(): $AbstractLayoutEditorWidgetBuilder<(any)>
public "editorElementRemovedOrHidden"(arg0: $AbstractEditorElement$Type): void
public "isHovered"(): boolean
public "getWidth"(): float
public "getHeight"(): float
public "editorElementAdded"(arg0: $AbstractEditorElement$Type): void
public "setBodyHeight"(arg0: float): void
public "setBodyWidth"(arg0: float): void
public "getBodyHeight"(): float
public "getBodyWidth"(): float
public "renderComponent"(arg0: $GuiGraphics$Type, arg1: double, arg2: double, arg3: float): void
public "getTranslatedX"(): float
public "getTranslatedY"(): float
public "isMouseOverHeader"(): boolean
public "getBorderThickness"(): float
public "getRealBodyX"(): float
public "getDisplayLabel"(): $Component
public "getRealBodyY"(): float
public "isHeaderHovered"(): boolean
public "setUnscaledWidgetOffsetX"(arg0: float, arg1: boolean): void
public "setUnscaledWidgetOffsetY"(arg0: float, arg1: boolean): void
public "getUnscaledWidgetOffsetY"(): float
public "getUnscaledWidgetOffsetX"(): float
public "isHeaderButtonHovered"(): boolean
public "getAllWidgetsExceptThis"(): $List<($AbstractLayoutEditorWidget)>
public "getCombinedHeaderButtonWidth"(): float
public "getHeaderHeight"(): float
public "isExpanded"(): boolean
public "editorElementOrderChanged"(arg0: $AbstractEditorElement$Type, arg1: boolean): void
set "expanded"(value: boolean)
get "builder"(): $AbstractLayoutEditorWidgetBuilder<(any)>
get "hovered"(): boolean
get "width"(): float
get "height"(): float
set "bodyHeight"(value: float)
set "bodyWidth"(value: float)
get "bodyHeight"(): float
get "bodyWidth"(): float
get "translatedX"(): float
get "translatedY"(): float
get "mouseOverHeader"(): boolean
get "borderThickness"(): float
get "realBodyX"(): float
get "displayLabel"(): $Component
get "realBodyY"(): float
get "headerHovered"(): boolean
get "unscaledWidgetOffsetY"(): float
get "unscaledWidgetOffsetX"(): float
get "headerButtonHovered"(): boolean
get "allWidgetsExceptThis"(): $List<($AbstractLayoutEditorWidget)>
get "combinedHeaderButtonWidth"(): float
get "headerHeight"(): float
get "expanded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractLayoutEditorWidget$Type = ($AbstractLayoutEditorWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractLayoutEditorWidget_ = $AbstractLayoutEditorWidget$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONUtil" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$JSONUtil$JsonSmartFieldFilter, $JSONUtil$JsonSmartFieldFilter$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONUtil$JsonSmartFieldFilter"

export class $JSONUtil {
static readonly "JSON_SMART_FIELD_FILTER": $JSONUtil$JsonSmartFieldFilter

constructor()

public static "convertToX"(arg0: any, arg1: $Class$Type<(any)>): any
public static "getSetterName"(arg0: string): string
public static "getGetterName"(arg0: string): string
public static "getIsName"(arg0: string): string
public static "convertToStrict"(arg0: any, arg1: $Class$Type<(any)>): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONUtil$Type = ($JSONUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONUtil_ = $JSONUtil$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JSONUtil$JsonSmartFieldFilter" {
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"
import {$FieldFilter, $FieldFilter$Type} from "packages/de/keksuccino/konkrete/json/minidev/asm/$FieldFilter"
import {$Method, $Method$Type} from "packages/java/lang/reflect/$Method"

export class $JSONUtil$JsonSmartFieldFilter implements $FieldFilter {

constructor()

public "canRead"(arg0: $Field$Type): boolean
public "canUse"(arg0: $Field$Type, arg1: $Method$Type): boolean
public "canUse"(arg0: $Field$Type): boolean
public "canWrite"(arg0: $Field$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONUtil$JsonSmartFieldFilter$Type = ($JSONUtil$JsonSmartFieldFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONUtil$JsonSmartFieldFilter_ = $JSONUtil$JsonSmartFieldFilter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$WorldUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $WorldUtils {

constructor()

public static "isMultiplayer"(): boolean
public static "isSingleplayer"(): boolean
get "multiplayer"(): boolean
get "singleplayer"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldUtils$Type = ($WorldUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldUtils_ = $WorldUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/realtime/$IsRealTimeWeekDayRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsRealTimeWeekDayRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsRealTimeWeekDayRequirement$Type = ($IsRealTimeWeekDayRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsRealTimeWeekDayRequirement_ = $IsRealTimeWeekDayRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/layout/editor/loadingrequirements/$BuildRequirementScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$LoadingRequirementInstance, $LoadingRequirementInstance$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementInstance"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $BuildRequirementScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Screen$Type, arg1: $LoadingRequirementContainer$Type, arg2: $LoadingRequirementInstance$Type, arg3: $Consumer$Type<($LoadingRequirementInstance$Type)>)

public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuildRequirementScreen$Type = ($BuildRequirementScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuildRequirementScreen_ = $BuildRequirementScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$RandomTextPlaceholder$RandomTextPackage" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $RandomTextPlaceholder$RandomTextPackage {
 "currentText": string
 "lastChange": long

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomTextPlaceholder$RandomTextPackage$Type = ($RandomTextPlaceholder$RandomTextPackage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomTextPlaceholder$RandomTextPackage_ = $RandomTextPlaceholder$RandomTextPackage$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathCoshPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MathCoshPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathCoshPlaceholder$Type = ($MathCoshPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathCoshPlaceholder_ = $MathCoshPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$LocalPlayerUtils" {
import {$LocalPlayer, $LocalPlayer$Type} from "packages/net/minecraft/client/player/$LocalPlayer"

export class $LocalPlayerUtils {

constructor()

public static "sendPlayerCommand"(arg0: $LocalPlayer$Type, arg1: string): void
public static "sendPlayerChatMessage"(arg0: $LocalPlayer$Type, arg1: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalPlayerUtils$Type = ($LocalPlayerUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalPlayerUtils_ = $LocalPlayerUtils$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/spi/mapper/$MappingException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$JsonPathException, $JsonPathException$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$JsonPathException"

export class $MappingException extends $JsonPathException {

constructor(arg0: $Throwable$Type)
constructor(arg0: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MappingException$Type = ($MappingException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MappingException_ = $MappingException$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/editbox/$ExtendedEditBox" {
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/fancymenu/util/input/$CharacterFilter"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ExtendedEditBox$CharacterRenderFormatter, $ExtendedEditBox$CharacterRenderFormatter$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/editbox/$ExtendedEditBox$CharacterRenderFormatter"
import {$UniqueWidget, $UniqueWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$UniqueWidget"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"
import {$EditBox, $EditBox$Type} from "packages/net/minecraft/client/gui/components/$EditBox"

export class $ExtendedEditBox extends $EditBox implements $UniqueWidget, $NavigatableWidget {
static readonly "BACKWARDS": integer
static readonly "FORWARDS": integer
static readonly "DEFAULT_TEXT_COLOR": integer
readonly "font": $Font
 "displayPos": integer
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: $Component$Type)
constructor(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: $EditBox$Type, arg6: $Component$Type)

public "getBackgroundColor"(): $DrawableColor
public "getValueWithoutPrefixSuffix"(): string
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "isNavigatable"(): boolean
public "setFocused"(arg0: boolean): void
public "applyInputPrefixSuffixCharacterRenderFormatter"(): $ExtendedEditBox
public "setCharacterFilter"(arg0: $CharacterFilter$Type): $ExtendedEditBox
public "hasTextShadow"(): boolean
public "setInputPrefix"(arg0: string): $ExtendedEditBox
public "deleteChars"(arg0: integer): void
/**
 * 
 * @deprecated
 */
public "setTextColorUneditable"(arg0: integer): void
public "setBackgroundColor"(arg0: $DrawableColor$Type): $ExtendedEditBox
public "setDisplayPosition"(arg0: integer): void
public "getCharacterFilter"(): $CharacterFilter
public "setInputSuffix"(arg0: string): $ExtendedEditBox
public "setTextShadow"(arg0: boolean): $ExtendedEditBox
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "isFocused"(): boolean
public "setValue"(arg0: string): void
public "insertText"(arg0: string): void
public "setBorderNormalColor"(arg0: $DrawableColor$Type): $ExtendedEditBox
public "setSuggestionTextColor"(arg0: $DrawableColor$Type): $ExtendedEditBox
public "setTextColorUneditable"(arg0: $DrawableColor$Type): $ExtendedEditBox
public "setBorderFocusedColor"(arg0: $DrawableColor$Type): $ExtendedEditBox
public "setNavigatable"(arg0: boolean): void
public "setWidgetIdentifierFancyMenu"(arg0: string): $ExtendedEditBox
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "renderWidget"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setHeight"(arg0: integer): void
public "getWidgetIdentifierFancyMenu"(): string
/**
 * 
 * @deprecated
 */
public "setTextColor"(arg0: integer): void
public "getTextColor"(): $DrawableColor
public "setTextColor"(arg0: $DrawableColor$Type): $ExtendedEditBox
public "getInputPrefix"(): string
public "isInPrefixSuffix"(arg0: integer, arg1: integer, arg2: integer): boolean
public "getDisplayPosition"(): integer
public "getInputSuffix"(): string
public "canConsumeUserInput"(): boolean
public "getHighlightPosition"(): integer
public "getBorderNormalColor"(): $DrawableColor
public "getBorderFocusedColor"(): $DrawableColor
public "getCharacterRenderFormatter"(): $ExtendedEditBox$CharacterRenderFormatter
public "setCharacterRenderFormatter"(arg0: $ExtendedEditBox$CharacterRenderFormatter$Type): $ExtendedEditBox
public "getSuggestionTextColor"(): $DrawableColor
public "getTextColorUneditable"(): $DrawableColor
public "setCanConsumeUserInput"(arg0: boolean): $ExtendedEditBox
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
get "backgroundColor"(): $DrawableColor
get "valueWithoutPrefixSuffix"(): string
get "navigatable"(): boolean
set "focused"(value: boolean)
set "characterFilter"(value: $CharacterFilter$Type)
set "inputPrefix"(value: string)
set "textColorUneditable"(value: integer)
set "backgroundColor"(value: $DrawableColor$Type)
set "displayPosition"(value: integer)
get "characterFilter"(): $CharacterFilter
set "inputSuffix"(value: string)
set "textShadow"(value: boolean)
get "focused"(): boolean
set "value"(value: string)
set "borderNormalColor"(value: $DrawableColor$Type)
set "suggestionTextColor"(value: $DrawableColor$Type)
set "textColorUneditable"(value: $DrawableColor$Type)
set "borderFocusedColor"(value: $DrawableColor$Type)
set "navigatable"(value: boolean)
set "widgetIdentifierFancyMenu"(value: string)
get "focusable"(): boolean
set "focusable"(value: boolean)
set "height"(value: integer)
get "widgetIdentifierFancyMenu"(): string
set "textColor"(value: integer)
get "textColor"(): $DrawableColor
set "textColor"(value: $DrawableColor$Type)
get "inputPrefix"(): string
get "displayPosition"(): integer
get "inputSuffix"(): string
get "highlightPosition"(): integer
get "borderNormalColor"(): $DrawableColor
get "borderFocusedColor"(): $DrawableColor
get "characterRenderFormatter"(): $ExtendedEditBox$CharacterRenderFormatter
set "characterRenderFormatter"(value: $ExtendedEditBox$CharacterRenderFormatter$Type)
get "suggestionTextColor"(): $DrawableColor
get "textColorUneditable"(): $DrawableColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedEditBox$Type = ($ExtendedEditBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedEditBox_ = $ExtendedEditBox$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ConsumingSupplier<C, R> {

 "get"(arg0: C): R

(arg0: C): R
}

export namespace $ConsumingSupplier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConsumingSupplier$Type<C, R> = ($ConsumingSupplier<(C), (R)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConsumingSupplier_<C, R> = $ConsumingSupplier$Type<(C), (R)>;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$PatternFlag" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $PatternFlag extends $Enum<($PatternFlag)> {
static readonly "UNIX_LINES": $PatternFlag
static readonly "CASE_INSENSITIVE": $PatternFlag
static readonly "COMMENTS": $PatternFlag
static readonly "MULTILINE": $PatternFlag
static readonly "DOTALL": $PatternFlag
static readonly "UNICODE_CASE": $PatternFlag
static readonly "UNICODE_CHARACTER_CLASS": $PatternFlag


public static "values"(): ($PatternFlag)[]
public static "valueOf"(arg0: string): $PatternFlag
public static "parseFlags"(arg0: integer): string
public static "parseFlags"(arg0: (character)[]): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatternFlag$Type = (("comments") | ("case_insensitive") | ("unix_lines") | ("multiline") | ("unicode_character_class") | ("unicode_case") | ("dotall")) | ($PatternFlag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatternFlag_ = $PatternFlag$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/button/$ExtendedButton" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderableResource, $RenderableResource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$RenderableResource"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$CustomizableWidget, $CustomizableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$CustomizableWidget"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IExtendedWidget, $IExtendedWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$IExtendedWidget"
import {$Tooltip, $Tooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip"
import {$UniqueWidget, $UniqueWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$UniqueWidget"
import {$Button$CreateNarration, $Button$CreateNarration$Type} from "packages/net/minecraft/client/gui/components/$Button$CreateNarration"
import {$NavigatableWidget, $NavigatableWidget$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/widget/$NavigatableWidget"

export class $ExtendedButton extends $Button implements $IExtendedWidget, $UniqueWidget, $NavigatableWidget {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Component$Type, arg5: $Button$OnPress$Type, arg6: $Button$CreateNarration$Type)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Component$Type, arg5: $Button$OnPress$Type)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: string, arg5: $Button$OnPress$Type, arg6: $Button$CreateNarration$Type)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: string, arg5: $Button$OnPress$Type)

public "setTooltipSupplier"(arg0: $ConsumingSupplier$Type<($ExtendedButton$Type), ($Tooltip$Type)>): $ExtendedButton
public "setBackgroundHover"(arg0: $RenderableResource$Type): $ExtendedButton
public "setPressAction"(arg0: $Button$OnPress$Type): $ExtendedButton
public "setBackgroundNormal"(arg0: $RenderableResource$Type): $ExtendedButton
public "isNavigatable"(): boolean
public "setFocused"(arg0: boolean): void
public "getLabelSupplier"(): $ConsumingSupplier<($ExtendedButton), ($Component)>
public "getPressAction"(): $Button$OnPress
public "setLabelEnabled"(arg0: boolean): $ExtendedButton
public "getBackgroundHover"(): $RenderableResource
public "isLabelEnabled"(): boolean
public "setTooltip"(arg0: $Tooltip$Type): $ExtendedButton
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setBackgroundColor"(arg0: $DrawableColor$Type, arg1: $DrawableColor$Type, arg2: $DrawableColor$Type, arg3: $DrawableColor$Type, arg4: $DrawableColor$Type, arg5: $DrawableColor$Type): void
public "setBorderColorNormal"(arg0: $DrawableColor$Type): void
public "getBackgroundColorHover"(): $DrawableColor
public "isForceDefaultTooltipStyle"(): boolean
public "getBackgroundInactive"(): $RenderableResource
public "getLabelBaseColorInactive"(): $DrawableColor
public "isLabelShadowEnabled"(): boolean
public "setBackgroundColorNormal"(arg0: $DrawableColor$Type): void
public "getBackgroundColorInactive"(): $DrawableColor
public "setLabelShadowEnabled"(arg0: boolean): $ExtendedButton
public "setBackgroundInactive"(arg0: $RenderableResource$Type): $ExtendedButton
public "setBackgroundColorHover"(arg0: $DrawableColor$Type): void
public "getBorderColorHover"(): $DrawableColor
public "getBackgroundColorNormal"(): $DrawableColor
public "setLabelBaseColorInactive"(arg0: $DrawableColor$Type): void
public "setBorderColorInactive"(arg0: $DrawableColor$Type): void
public "setBackgroundColorInactive"(arg0: $DrawableColor$Type): void
public "setLabelBaseColorNormal"(arg0: $DrawableColor$Type): void
public "setForceDefaultTooltipStyle"(arg0: boolean): $ExtendedButton
public "getBorderColorNormal"(): $DrawableColor
public "getBackgroundNormal"(): $RenderableResource
public "setBorderColorHover"(arg0: $DrawableColor$Type): void
public "getExtendedAsCustomizableWidget"(): $CustomizableWidget
public "getIsActiveSupplier"(): $ConsumingSupplier<($ExtendedButton), (boolean)>
public "getBorderColorInactive"(): $DrawableColor
public "getTooltipFancyMenu"(): $Tooltip
public "getLabelBaseColorNormal"(): $DrawableColor
public "setLabel"(arg0: string): $ExtendedButton
public "setLabel"(arg0: $Component$Type): $ExtendedButton
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "isFocused"(): boolean
/**
 * 
 * @deprecated
 */
public "setMessage"(arg0: $Component$Type): void
public "setNavigatable"(arg0: boolean): void
public "setLabelSupplier"(arg0: $ConsumingSupplier$Type<($ExtendedButton$Type), ($Component$Type)>): $ExtendedButton
public "setWidgetIdentifierFancyMenu"(arg0: string): $ExtendedButton
public "isFocusable"(): boolean
public "setFocusable"(arg0: boolean): void
public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
/**
 * 
 * @deprecated
 */
public "getMessage"(): $Component
public "setHeight"(arg0: integer): void
public "getTooltipSupplier"(): $ConsumingSupplier<($ExtendedButton), ($Tooltip)>
public "getLabel"(): $Component
public "getWidgetIdentifierFancyMenu"(): string
public "setIsActiveSupplier"(arg0: $ConsumingSupplier$Type<($ExtendedButton$Type), (boolean)>): $ExtendedButton
public "renderScrollingLabelInternal"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $Component$Type, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: boolean, arg8: integer): void
public "renderScrollingLabel"(arg0: $AbstractWidget$Type, arg1: $GuiGraphics$Type, arg2: $Font$Type, arg3: integer, arg4: boolean, arg5: integer): void
set "tooltipSupplier"(value: $ConsumingSupplier$Type<($ExtendedButton$Type), ($Tooltip$Type)>)
set "backgroundHover"(value: $RenderableResource$Type)
set "pressAction"(value: $Button$OnPress$Type)
set "backgroundNormal"(value: $RenderableResource$Type)
get "navigatable"(): boolean
set "focused"(value: boolean)
get "labelSupplier"(): $ConsumingSupplier<($ExtendedButton), ($Component)>
get "pressAction"(): $Button$OnPress
set "labelEnabled"(value: boolean)
get "backgroundHover"(): $RenderableResource
get "labelEnabled"(): boolean
set "tooltip"(value: $Tooltip$Type)
set "borderColorNormal"(value: $DrawableColor$Type)
get "backgroundColorHover"(): $DrawableColor
get "forceDefaultTooltipStyle"(): boolean
get "backgroundInactive"(): $RenderableResource
get "labelBaseColorInactive"(): $DrawableColor
get "labelShadowEnabled"(): boolean
set "backgroundColorNormal"(value: $DrawableColor$Type)
get "backgroundColorInactive"(): $DrawableColor
set "labelShadowEnabled"(value: boolean)
set "backgroundInactive"(value: $RenderableResource$Type)
set "backgroundColorHover"(value: $DrawableColor$Type)
get "borderColorHover"(): $DrawableColor
get "backgroundColorNormal"(): $DrawableColor
set "labelBaseColorInactive"(value: $DrawableColor$Type)
set "borderColorInactive"(value: $DrawableColor$Type)
set "backgroundColorInactive"(value: $DrawableColor$Type)
set "labelBaseColorNormal"(value: $DrawableColor$Type)
set "forceDefaultTooltipStyle"(value: boolean)
get "borderColorNormal"(): $DrawableColor
get "backgroundNormal"(): $RenderableResource
set "borderColorHover"(value: $DrawableColor$Type)
get "extendedAsCustomizableWidget"(): $CustomizableWidget
get "isActiveSupplier"(): $ConsumingSupplier<($ExtendedButton), (boolean)>
get "borderColorInactive"(): $DrawableColor
get "tooltipFancyMenu"(): $Tooltip
get "labelBaseColorNormal"(): $DrawableColor
set "label"(value: string)
set "label"(value: $Component$Type)
get "focused"(): boolean
set "message"(value: $Component$Type)
set "navigatable"(value: boolean)
set "labelSupplier"(value: $ConsumingSupplier$Type<($ExtendedButton$Type), ($Component$Type)>)
set "widgetIdentifierFancyMenu"(value: string)
get "focusable"(): boolean
set "focusable"(value: boolean)
get "message"(): $Component
set "height"(value: integer)
get "tooltipSupplier"(): $ConsumingSupplier<($ExtendedButton), ($Tooltip)>
get "label"(): $Component
get "widgetIdentifierFancyMenu"(): string
set "isActiveSupplier"(value: $ConsumingSupplier$Type<($ExtendedButton$Type), (boolean)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedButton$Type = ($ExtendedButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedButton_ = $ExtendedButton$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/$AbstractOptions$Option" {
import {$Config, $Config$Type} from "packages/de/keksuccino/konkrete/config/$Config"

export class $AbstractOptions$Option<T> {

constructor(arg0: $Config$Type, arg1: string, arg2: T, arg3: string)

public "getValue"(): T
public "getKey"(): string
public "setValue"(arg0: T): $AbstractOptions$Option<(T)>
public "getDefaultValue"(): T
public "resetToDefault"(): $AbstractOptions$Option<(T)>
get "value"(): T
get "key"(): string
set "value"(value: T)
get "defaultValue"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractOptions$Option$Type<T> = ($AbstractOptions$Option<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractOptions$Option_<T> = $AbstractOptions$Option$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/gui/content/$IMenu" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMenu {

 "isOpen"(): boolean
 "setUseable"(arg0: boolean): void
 "isUseable"(): boolean
 "closeMenu"(): void
}

export namespace $IMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMenu$Type = ($IMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMenu_ = $IMenu$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$BeansMapper" {
import {$Date, $Date$Type} from "packages/java/util/$Date"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $BeansMapper<T> extends $JsonReaderI<(T)> {
static "MAPPER_DATE": $JsonReaderI<($Date)>
readonly "base": $JsonReader

constructor(arg0: $JsonReader$Type)

public "getValue"(arg0: any, arg1: string): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeansMapper$Type<T> = ($BeansMapper<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeansMapper_<T> = $BeansMapper$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/util/event/acara/$EventPriority" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $EventPriority {
static readonly "VERY_LOW": integer
static readonly "LOWER": integer
static readonly "LOW": integer
static readonly "NORMAL": integer
static readonly "HIGH": integer
static readonly "HIGHER": integer
static readonly "VERY_HIGH": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventPriority$Type = ($EventPriority);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventPriority_ = $EventPriority$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArraySliceOperation$Operation" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ArraySliceOperation$Operation extends $Enum<($ArraySliceOperation$Operation)> {
static readonly "SLICE_FROM": $ArraySliceOperation$Operation
static readonly "SLICE_TO": $ArraySliceOperation$Operation
static readonly "SLICE_BETWEEN": $ArraySliceOperation$Operation


public static "values"(): ($ArraySliceOperation$Operation)[]
public static "valueOf"(arg0: string): $ArraySliceOperation$Operation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArraySliceOperation$Operation$Type = (("slice_from") | ("slice_between") | ("slice_to")) | ($ArraySliceOperation$Operation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArraySliceOperation$Operation_ = $ArraySliceOperation$Operation$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/entry/$TextScrollAreaEntry" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/$ScrollArea"
import {$AdvancedButton, $AdvancedButton$Type} from "packages/de/keksuccino/konkrete/gui/content/$AdvancedButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"
import {$ScrollAreaEntry, $ScrollAreaEntry$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v1/scrollarea/entry/$ScrollAreaEntry"

export class $TextScrollAreaEntry extends $ScrollAreaEntry {
 "font": $Font
 "parent": $ScrollArea
 "buttonBase": $AdvancedButton
 "deselectOtherEntriesOnSelect": boolean
 "selectOnClick": boolean
 "index": integer
static readonly "ELEMENT_BORDER_THICKNESS": integer
static readonly "VERTICAL_SCROLL_BAR_WIDTH": integer
static readonly "VERTICAL_SCROLL_BAR_HEIGHT": integer
static readonly "HORIZONTAL_SCROLL_BAR_WIDTH": integer
static readonly "HORIZONTAL_SCROLL_BAR_HEIGHT": integer
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor(arg0: $ScrollArea$Type, arg1: $Component$Type, arg2: $Consumer$Type<($TextScrollAreaEntry$Type)>)

public "getText"(): $Component
public "setText"(arg0: $Component$Type): void
public "onClick"(arg0: $ScrollAreaEntry$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getTextWidth"(): integer
get "text"(): $Component
set "text"(value: $Component$Type)
get "textWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextScrollAreaEntry$Type = ($TextScrollAreaEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextScrollAreaEntry_ = $TextScrollAreaEntry$Type;
}}
declare module "packages/de/keksuccino/konkrete/file/$FileUtils" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"

export class $FileUtils {

constructor()

public static "copyFile"(arg0: $File$Type, arg1: $File$Type): boolean
public static "getFileLines"(arg0: $File$Type): $List<(string)>
public static "getFilenames"(arg0: string, arg1: boolean): $List<(string)>
public static "compressToZip"(arg0: $List$Type<(string)>, arg1: string): void
public static "compressToZip"(arg0: string, arg1: string): void
public static "unpackZip"(arg0: string, arg1: string): void
public static "writeTextToFile"(arg0: $File$Type, arg1: boolean, ...arg2: (string)[]): void
public static "moveFile"(arg0: $File$Type, arg1: $File$Type): boolean
public static "generateAvailableFilename"(arg0: string, arg1: string, arg2: string): string
public static "getFiles"(arg0: string): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileUtils$Type = ($FileUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileUtils_ = $FileUtils$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/overlay/$DebugOverlay$LinePosition" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $DebugOverlay$LinePosition extends $Enum<($DebugOverlay$LinePosition)> {
static readonly "TOP_LEFT": $DebugOverlay$LinePosition
static readonly "TOP_RIGHT": $DebugOverlay$LinePosition
static readonly "BOTTOM_LEFT": $DebugOverlay$LinePosition
static readonly "BOTTOM_RIGHT": $DebugOverlay$LinePosition


public static "values"(): ($DebugOverlay$LinePosition)[]
public static "valueOf"(arg0: string): $DebugOverlay$LinePosition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugOverlay$LinePosition$Type = (("top_right") | ("top_left") | ("bottom_right") | ("bottom_left")) | ($DebugOverlay$LinePosition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugOverlay$LinePosition_ = $DebugOverlay$LinePosition$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/screen/$CloseScreenAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $CloseScreenAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloseScreenAction$Type = ($CloseScreenAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloseScreenAction_ = $CloseScreenAction$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$DynamicClassLoader" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ClassLoader, $ClassLoader$Type} from "packages/java/lang/$ClassLoader"

export class $DynamicClassLoader extends $ClassLoader {


public static "directInstance"<T>(arg0: $Class$Type<(any)>, arg1: string, arg2: (byte)[]): T
public static "directLoad"<T>(arg0: $Class$Type<(any)>, arg1: string, arg2: (byte)[]): $Class<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicClassLoader$Type = ($DynamicClassLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicClassLoader_ = $DynamicClassLoader$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserMemory" {
import {$JSONParserBase, $JSONParserBase$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/parser/$JSONParserBase"

export class $JSONParserMemory extends $JSONParserBase {
static readonly "EOI": byte

constructor(arg0: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JSONParserMemory$Type = ($JSONParserMemory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JSONParserMemory_ = $JSONParserMemory$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$FpsPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $FpsPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getAlternativeIdentifiers"(): $List<(string)>
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "alternativeIdentifiers"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FpsPlaceholder$Type = ($FpsPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FpsPlaceholder_ = $FpsPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/$CreditsScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $CreditsScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Screen$Type)

public "shouldCloseOnEsc"(): boolean
public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreditsScreen$Type = ($CreditsScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreditsScreen_ = $CreditsScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$ConvertDate" {
import {$Date, $Date$Type} from "packages/java/util/$Date"
import {$TimeZone, $TimeZone$Type} from "packages/java/util/$TimeZone"

export class $ConvertDate {
static "defaultTimeZone": $TimeZone

constructor()

public static "getMonth"(arg0: string): integer
public static "convertToDate"(arg0: any): $Date
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConvertDate$Type = ($ConvertDate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConvertDate_ = $ConvertDate$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/widget/identification/$WidgetIdentifierHandler" {
import {$WidgetMeta, $WidgetMeta$Type} from "packages/de/keksuccino/fancymenu/customization/widget/$WidgetMeta"

export class $WidgetIdentifierHandler {

constructor()

public static "getUniversalIdentifierForWidgetMeta"(arg0: $WidgetMeta$Type): string
public static "setUniversalIdentifierOfWidgetMeta"(arg0: $WidgetMeta$Type): void
public static "isIdentifierOfWidget"(arg0: string, arg1: $WidgetMeta$Type): boolean
set "universalIdentifierOfWidgetMeta"(value: $WidgetMeta$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetIdentifierHandler$Type = ($WidgetIdentifierHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetIdentifierHandler_ = $WidgetIdentifierHandler$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNodes$UndefinedNode" {
import {$Predicate$PredicateContext, $Predicate$PredicateContext$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate$PredicateContext"
import {$ValueNode, $ValueNode$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$ValueNode"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $ValueNodes$UndefinedNode extends $ValueNode {

constructor()

public "type"(arg0: $Predicate$PredicateContext$Type): $Class<(any)>
public "equals"(arg0: any): boolean
public "isUndefinedNode"(): boolean
public "asUndefinedNode"(): $ValueNodes$UndefinedNode
get "undefinedNode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueNodes$UndefinedNode$Type = ($ValueNodes$UndefinedNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueNodes$UndefinedNode_ = $ValueNodes$UndefinedNode$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$RandomTextPlaceholder" {
import {$RandomTextPlaceholder$RandomTextPackage, $RandomTextPlaceholder$RandomTextPackage$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/other/$RandomTextPlaceholder$RandomTextPackage"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RandomTextPlaceholder extends $Placeholder {
static "randomTextIntervals": $Map<(string), ($RandomTextPlaceholder$RandomTextPackage)>

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomTextPlaceholder$Type = ($RandomTextPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomTextPlaceholder_ = $RandomTextPlaceholder$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$NumberToken" {
import {$Token, $Token$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token"

export class $NumberToken extends $Token {
static readonly "TOKEN_NUMBER": short
static readonly "TOKEN_OPERATOR": short
static readonly "TOKEN_FUNCTION": short
static readonly "TOKEN_PARENTHESES_OPEN": short
static readonly "TOKEN_PARENTHESES_CLOSE": short
static readonly "TOKEN_VARIABLE": short
static readonly "TOKEN_SEPARATOR": short

constructor(arg0: double)

public "getValue"(): double
get "value"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NumberToken$Type = ($NumberToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NumberToken_ = $NumberToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/cycle/$ValueCycle" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$IValueCycle, $IValueCycle$Type} from "packages/de/keksuccino/fancymenu/util/cycle/$IValueCycle"

export class $ValueCycle<T> implements $IValueCycle<(T)> {


public "next"(): T
public "current"(): T
public static "fromList"<T>(arg0: $List$Type<(T)>): $ValueCycle<(T)>
public "setCurrentValueByIndex"(arg0: integer): $ValueCycle<(T)>
public "clearCycleListeners"(): $ValueCycle<(T)>
public static "fromArray"<T>(...arg0: (T)[]): $ValueCycle<(T)>
public "getValues"(): $List<(T)>
set "currentValueByIndex"(value: integer)
get "values"(): $List<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueCycle$Type<T> = ($ValueCycle<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueCycle_<T> = $ValueCycle$Type<(T)>;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/path/$ArrayIndexOperation" {
import {$List, $List$Type} from "packages/java/util/$List"

export class $ArrayIndexOperation {


public "toString"(): string
public static "parse"(arg0: string): $ArrayIndexOperation
public "indexes"(): $List<(integer)>
public "isSingleIndexOperation"(): boolean
get "singleIndexOperation"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrayIndexOperation$Type = ($ArrayIndexOperation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrayIndexOperation_ = $ArrayIndexOperation$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinButton" {
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export interface $IMixinButton {

 "setPressActionFancyMenu"(arg0: $Button$OnPress$Type): void

(arg0: $Button$OnPress$Type): void
}

export namespace $IMixinButton {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinButton$Type = ($IMixinButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinButton_ = $IMixinButton$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/reader/$BeansWriterASM" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$JsonWriterI, $JsonWriterI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/reader/$JsonWriterI"
import {$JSONStyle, $JSONStyle$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/$JSONStyle"

export class $BeansWriterASM implements $JsonWriterI<(any)> {

constructor()

public "writeJSONString"<E>(arg0: E, arg1: $Appendable$Type, arg2: $JSONStyle$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeansWriterASM$Type = ($BeansWriterASM);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeansWriterASM_ = $BeansWriterASM$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$LocalizationPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $LocalizationPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalizationPlaceholder$Type = ($LocalizationPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalizationPlaceholder_ = $LocalizationPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityModel" {
import {$PlayerEntityProperties, $PlayerEntityProperties$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/playerentity/model/$PlayerEntityProperties"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$PlayerModel, $PlayerModel$Type} from "packages/net/minecraft/client/model/$PlayerModel"

export class $PlayerEntityModel extends $PlayerModel<(any)> {
readonly "properties": $PlayerEntityProperties
readonly "leftSleeve": $ModelPart
readonly "rightSleeve": $ModelPart
readonly "leftPants": $ModelPart
readonly "rightPants": $ModelPart
readonly "jacket": $ModelPart
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type, arg1: boolean, arg2: $PlayerEntityProperties$Type)

public "setupAnimWithoutEntity"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerEntityModel$Type = ($PlayerEntityModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerEntityModel_ = $PlayerEntityModel$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$CloseParenthesesToken" {
import {$Token, $Token$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token"

export class $CloseParenthesesToken extends $Token {
static readonly "TOKEN_NUMBER": short
static readonly "TOKEN_OPERATOR": short
static readonly "TOKEN_FUNCTION": short
static readonly "TOKEN_PARENTHESES_OPEN": short
static readonly "TOKEN_PARENTHESES_CLOSE": short
static readonly "TOKEN_VARIABLE": short
static readonly "TOKEN_SEPARATOR": short


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloseParenthesesToken$Type = ($CloseParenthesesToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloseParenthesesToken_ = $CloseParenthesesToken$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinAbstractSelectionList" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMixinAbstractSelectionList {

 "getX1FancyMenu"(): integer
 "getHeightFancyMenu"(): integer
 "getY0FancyMenu"(): integer
 "getY1FancyMenu"(): integer
 "getWidthFancyMenu"(): integer
 "getX0FancyMenu"(): integer
}

export namespace $IMixinAbstractSelectionList {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinAbstractSelectionList$Type = ($IMixinAbstractSelectionList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinAbstractSelectionList_ = $IMixinAbstractSelectionList$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/logo/$TitleScreenLogoDeepElement" {
import {$LoadingRequirementContainer, $LoadingRequirementContainer$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/internal/$LoadingRequirementContainer"
import {$ElementAnchorPoint, $ElementAnchorPoint$Type} from "packages/de/keksuccino/fancymenu/customization/element/anchor/$ElementAnchorPoint"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractElement$AppearanceDelay, $AbstractElement$AppearanceDelay$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement$AppearanceDelay"
import {$DeepElementBuilder, $DeepElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$DeepElementBuilder"
import {$ElementBuilder, $ElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementBuilder"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TitleScreenLogoDeepElement extends $AbstractDeepElement {
 "deepElementHidden": boolean
static readonly "EMPTY_ELEMENT": $AbstractElement
static readonly "STAY_ON_SCREEN_EDGE_ZONE_SIZE": integer
readonly "builder": $ElementBuilder<(any), (any)>
 "anchorPoint": $ElementAnchorPoint
 "anchorPointElementIdentifier": string
 "posOffsetX": integer
 "posOffsetY": integer
 "baseWidth": integer
 "baseHeight": integer
 "advancedX": string
 "cachedAdvancedX": integer
 "lastAdvancedXParse": long
 "advancedY": string
 "cachedAdvancedY": integer
 "lastAdvancedYParse": long
 "advancedWidth": string
 "cachedAdvancedWidth": integer
 "lastAdvancedWidthParse": long
 "advancedHeight": string
 "cachedAdvancedHeight": integer
 "lastAdvancedHeightParse": long
 "stretchX": boolean
 "stretchY": boolean
 "stayOnScreen": boolean
 "visible": boolean
 "appearanceDelay": $AbstractElement$AppearanceDelay
 "appearanceDelayInSeconds": float
 "fadeIn": boolean
 "fadeInSpeed": float
 "opacity": float
 "customGuiScale": float
 "loadingRequirementContainer": $LoadingRequirementContainer
 "customElementLayerName": string

constructor(arg0: $DeepElementBuilder$Type<(any), (any), (any)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenLogoDeepElement$Type = ($TitleScreenLogoDeepElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenLogoDeepElement_ = $TitleScreenLogoDeepElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/deep/layers/titlescreen/forge/copyright/$TitleScreenForgeCopyrightDeepEditorElement" {
import {$EditorElementSettings, $EditorElementSettings$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementSettings"
import {$LayoutEditorScreen, $LayoutEditorScreen$Type} from "packages/de/keksuccino/fancymenu/customization/layout/editor/$LayoutEditorScreen"
import {$EditorElementBorderDisplay, $EditorElementBorderDisplay$Type} from "packages/de/keksuccino/fancymenu/customization/element/editor/$EditorElementBorderDisplay"
import {$AbstractDeepElement, $AbstractDeepElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepElement"
import {$AbstractDeepEditorElement, $AbstractDeepEditorElement$Type} from "packages/de/keksuccino/fancymenu/customization/deep/$AbstractDeepEditorElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$ContextMenu, $ContextMenu$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/contextmenu/v2/$ContextMenu"

export class $TitleScreenForgeCopyrightDeepEditorElement extends $AbstractDeepEditorElement {
 "element": $AbstractElement
readonly "settings": $EditorElementSettings
 "rightClickMenu": $ContextMenu
 "topLeftDisplay": $EditorElementBorderDisplay
 "bottomRightDisplay": $EditorElementBorderDisplay
 "editor": $LayoutEditorScreen
 "renderMovingNotAllowedTime": long
 "recentlyMovedByDragging": boolean
 "recentlyLeftClickSelected": boolean
 "movingCrumpleZonePassed": boolean

constructor(arg0: $AbstractDeepElement$Type, arg1: $LayoutEditorScreen$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TitleScreenForgeCopyrightDeepEditorElement$Type = ($TitleScreenForgeCopyrightDeepEditorElement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TitleScreenForgeCopyrightDeepEditorElement_ = $TitleScreenForgeCopyrightDeepEditorElement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/file/type/$FileCodec" {
import {$ResourceSource, $ResourceSource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$ResourceSource"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$File, $File$Type} from "packages/java/io/$File"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FileCodec<T> {

constructor()

public static "empty"<T>(arg0: $Class$Type<(T)>): $FileCodec<(T)>
public "read"(arg0: $ResourceSource$Type): T
public "read"(arg0: $InputStream$Type): T
public static "generic"<T>(arg0: $Class$Type<(T)>, arg1: $ConsumingSupplier$Type<($InputStream$Type), (T)>): $FileCodec<(T)>
public static "basic"<T>(arg0: $Class$Type<(T)>, arg1: $ConsumingSupplier$Type<($InputStream$Type), (T)>, arg2: $ConsumingSupplier$Type<($ResourceLocation$Type), (T)>): $FileCodec<(T)>
public "readLocal"(arg0: $File$Type): T
public static "basicWithLocal"<T>(arg0: $Class$Type<(T)>, arg1: $ConsumingSupplier$Type<($InputStream$Type), (T)>, arg2: $ConsumingSupplier$Type<($ResourceLocation$Type), (T)>, arg3: $ConsumingSupplier$Type<($File$Type), (T)>): $FileCodec<(T)>
public "readLocation"(arg0: $ResourceLocation$Type): T
public "readWeb"(arg0: string): T
public static "basicWithWeb"<T>(arg0: $Class$Type<(T)>, arg1: $ConsumingSupplier$Type<($InputStream$Type), (T)>, arg2: $ConsumingSupplier$Type<($ResourceLocation$Type), (T)>, arg3: $ConsumingSupplier$Type<(string), (T)>): $FileCodec<(T)>
public static "advanced"<T>(arg0: $Class$Type<(T)>, arg1: $ConsumingSupplier$Type<($InputStream$Type), (T)>, arg2: $ConsumingSupplier$Type<($ResourceLocation$Type), (T)>, arg3: $ConsumingSupplier$Type<($File$Type), (T)>, arg4: $ConsumingSupplier$Type<(string), (T)>): $FileCodec<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileCodec$Type<T> = ($FileCodec<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileCodec_<T> = $FileCodec$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinProgressScreen" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMixinProgressScreen {

 "getProgressFancyMenu"(): integer

(): integer
}

export namespace $IMixinProgressScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinProgressScreen$Type = ($IMixinProgressScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinProgressScreen_ = $IMixinProgressScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/loadingrequirement/requirements/gui/$IsGuiScaleRequirement" {
import {$LoadingRequirement, $LoadingRequirement$Type} from "packages/de/keksuccino/fancymenu/customization/loadingrequirement/$LoadingRequirement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TextEditorFormattingRule, $TextEditorFormattingRule$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/texteditor/$TextEditorFormattingRule"

export class $IsGuiScaleRequirement extends $LoadingRequirement {

constructor()

public "getDisplayName"(): string
public "hasValue"(): boolean
public "getDescription"(): $List<(string)>
public "getValuePreset"(): string
public "isRequirementMet"(arg0: string): boolean
public "getCategory"(): string
public "getValueDisplayName"(): string
public "getValueFormattingRules"(): $List<($TextEditorFormattingRule)>
get "displayName"(): string
get "description"(): $List<(string)>
get "valuePreset"(): string
get "category"(): string
get "valueDisplayName"(): string
get "valueFormattingRules"(): $List<($TextEditorFormattingRule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IsGuiScaleRequirement$Type = ($IsGuiScaleRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IsGuiScaleRequirement_ = $IsGuiScaleRequirement$Type;
}}
declare module "packages/de/keksuccino/fancymenu/networking/$PacketsForge" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PacketsForge {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketsForge$Type = ($PacketsForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketsForge_ = $PacketsForge$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/$JStylerObj$StringProtector" {
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"

export interface $JStylerObj$StringProtector {

 "escape"(arg0: string, arg1: $Appendable$Type): void

(arg0: string, arg1: $Appendable$Type): void
}

export namespace $JStylerObj$StringProtector {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JStylerObj$StringProtector$Type = ($JStylerObj$StringProtector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JStylerObj$StringProtector_ = $JStylerObj$StringProtector$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/background/backgrounds/panorama/$PanoramaMenuBackground" {
import {$MenuBackgroundBuilder, $MenuBackgroundBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackgroundBuilder"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MenuBackground, $MenuBackground$Type} from "packages/de/keksuccino/fancymenu/customization/background/$MenuBackground"

export class $PanoramaMenuBackground extends $MenuBackground {
 "panoramaName": string
readonly "builder": $MenuBackgroundBuilder<(any)>
 "opacity": float
 "keepBackgroundAspectRatio": boolean

constructor(arg0: $MenuBackgroundBuilder$Type<($PanoramaMenuBackground$Type)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PanoramaMenuBackground$Type = ($PanoramaMenuBackground);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PanoramaMenuBackground_ = $PanoramaMenuBackground$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/blocks/$GenericExecutableBlock" {
import {$AbstractExecutableBlock, $AbstractExecutableBlock$Type} from "packages/de/keksuccino/fancymenu/customization/action/blocks/$AbstractExecutableBlock"
import {$PropertyContainer, $PropertyContainer$Type} from "packages/de/keksuccino/fancymenu/util/properties/$PropertyContainer"

export class $GenericExecutableBlock extends $AbstractExecutableBlock {
 "identifier": string

constructor()

public "getBlockType"(): string
public static "deserializeEmptyWithIdentifier"(arg0: $PropertyContainer$Type, arg1: string): $GenericExecutableBlock
get "blockType"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericExecutableBlock$Type = ($GenericExecutableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericExecutableBlock_ = $GenericExecutableBlock$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/resource/$PlayableResource" {
import {$Resource, $Resource$Type} from "packages/de/keksuccino/fancymenu/util/resource/$Resource"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"

export interface $PlayableResource extends $Resource {

 "stop"(): void
 "play"(): void
 "isPlaying"(): boolean
 "isPaused"(): boolean
 "pause"(): void
 "open"(): $InputStream
 "isReady"(): boolean
 "isClosed"(): boolean
 "waitForLoadingCompletedOrFailed"(arg0: long): void
 "waitForReady"(arg0: long): void
 "isLoadingFailed"(): boolean
 "isLoadingCompleted"(): boolean
 "close"(): void
}

export namespace $PlayableResource {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayableResource$Type = ($PlayableResource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayableResource_ = $PlayableResource$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/$RenderingUtils" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$DrawableColor, $DrawableColor$Type} from "packages/de/keksuccino/fancymenu/util/rendering/$DrawableColor"

export class $RenderingUtils {
static readonly "MISSING_TEXTURE_COLOR_MAGENTA": $DrawableColor
static readonly "MISSING_TEXTURE_COLOR_BLACK": $DrawableColor

constructor()

public static "resetGuiScale"(): void
public static "getPartialTick"(): float
public static "resetShaderColor"(arg0: $GuiGraphics$Type): void
public static "blitF"(arg0: $GuiGraphics$Type, arg1: $ResourceLocation$Type, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
public static "fillF"(arg0: $GuiGraphics$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: integer): void
public static "fillF"(arg0: $GuiGraphics$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: integer): void
public static "setShaderColor"(arg0: $GuiGraphics$Type, arg1: $DrawableColor$Type): void
public static "setShaderColor"(arg0: $GuiGraphics$Type, arg1: $DrawableColor$Type, arg2: float): void
public static "renderMissing"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
public static "blitRepeat"(arg0: $GuiGraphics$Type, arg1: $ResourceLocation$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: integer, arg9: integer, arg10: integer, arg11: integer, arg12: integer, arg13: integer): void
public static "blitRepeat"(arg0: $GuiGraphics$Type, arg1: $ResourceLocation$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: integer): void
public static "isXYInArea"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer): boolean
public static "isXYInArea"(arg0: double, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double): boolean
public static "blitNineSliced"(arg0: $GuiGraphics$Type, arg1: $ResourceLocation$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: integer, arg9: integer, arg10: integer, arg11: integer, arg12: integer, arg13: integer, arg14: integer, arg15: integer): void
public static "replaceAlphaInColor"(arg0: integer, arg1: integer): integer
public static "replaceAlphaInColor"(arg0: integer, arg1: float): integer
get "partialTick"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderingUtils$Type = ($RenderingUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderingUtils_ = $RenderingUtils$Type;
}}
declare module "packages/de/keksuccino/melody/platform/$ForgeCompatibilityLayer" {
import {$IPlatformCompatibilityLayer, $IPlatformCompatibilityLayer$Type} from "packages/de/keksuccino/melody/platform/services/$IPlatformCompatibilityLayer"

export class $ForgeCompatibilityLayer implements $IPlatformCompatibilityLayer {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeCompatibilityLayer$Type = ($ForgeCompatibilityLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeCompatibilityLayer_ = $ForgeCompatibilityLayer$Type;
}}
declare module "packages/de/keksuccino/fancymenu/mixin/mixins/common/client/$IMixinPlayerModel" {
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"

export interface $IMixinPlayerModel {

 "getCloakFancyMenu"(): $ModelPart

(): $ModelPart
}

export namespace $IMixinPlayerModel {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMixinPlayerModel$Type = ($IMixinPlayerModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMixinPlayerModel_ = $IMixinPlayerModel$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/json/writer/$DefaultMapperCollection" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$JsonReaderI, $JsonReaderI$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReaderI"
import {$JsonReader, $JsonReader$Type} from "packages/de/keksuccino/konkrete/json/minidev/json/writer/$JsonReader"

export class $DefaultMapperCollection<T> extends $JsonReaderI<(T)> {
readonly "base": $JsonReader

constructor(arg0: $JsonReader$Type, arg1: $Class$Type<(T)>)

public "setValue"(arg0: any, arg1: string, arg2: any): void
public "createObject"(): any
public "addValue"(arg0: any, arg1: any): void
public "createArray"(): any
public "startObject"(arg0: string): $JsonReaderI<(T)>
public "startArray"(arg0: string): $JsonReaderI<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultMapperCollection$Type<T> = ($DefaultMapperCollection<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultMapperCollection_<T> = $DefaultMapperCollection$Type<(T)>;
}}
declare module "packages/de/keksuccino/fancymenu/networking/packets/commands/closegui/$CloseGuiCommandPacket" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Packet, $Packet$Type} from "packages/de/keksuccino/fancymenu/networking/$Packet"

export class $CloseGuiCommandPacket extends $Packet {

constructor()

public "processPacket"(arg0: $ServerPlayer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloseGuiCommandPacket$Type = ($CloseGuiCommandPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloseGuiCommandPacket_ = $CloseGuiCommandPacket$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$ScreenTickEvent$Post" {
import {$ScreenTickEvent, $ScreenTickEvent$Type} from "packages/de/keksuccino/fancymenu/events/screen/$ScreenTickEvent"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $ScreenTickEvent$Post extends $ScreenTickEvent {

constructor(arg0: $Screen$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenTickEvent$Post$Type = ($ScreenTickEvent$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenTickEvent$Post_ = $ScreenTickEvent$Post$Type;
}}
declare module "packages/de/keksuccino/konkrete/input/$StringUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $StringUtils {

constructor()

public static "convertFormatCodes"(arg0: string, arg1: string, arg2: string): string
public static "replaceAllExceptOf"(arg0: string, arg1: string, ...arg2: (string)[]): string
public static "splitLines"(arg0: string, arg1: string): (string)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringUtils$Type = ($StringUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringUtils_ = $StringUtils$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/jsonpath/internal/filter/$FilterCompiler" {
import {$Predicate, $Predicate$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Predicate"
import {$Filter, $Filter$Type} from "packages/de/keksuccino/konkrete/json/jsonpath/$Filter"

export class $FilterCompiler {


public static "compile"(arg0: string): $Filter
public "compile"(): $Predicate
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilterCompiler$Type = ($FilterCompiler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilterCompiler_ = $FilterCompiler$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/placeholder/placeholders/advanced/$MathPiPlaceholder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Placeholder, $Placeholder$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$Placeholder"
import {$DeserializedPlaceholderString, $DeserializedPlaceholderString$Type} from "packages/de/keksuccino/fancymenu/customization/placeholder/$DeserializedPlaceholderString"

export class $MathPiPlaceholder extends $Placeholder {

constructor()

public "getDisplayName"(): string
public "getDescription"(): $List<(string)>
public "getReplacementFor"(arg0: $DeserializedPlaceholderString$Type): string
public "getCategory"(): string
public "getDefaultPlaceholderString"(): $DeserializedPlaceholderString
public "getValueNames"(): $List<(string)>
get "displayName"(): string
get "description"(): $List<(string)>
get "category"(): string
get "defaultPlaceholderString"(): $DeserializedPlaceholderString
get "valueNames"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathPiPlaceholder$Type = ($MathPiPlaceholder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathPiPlaceholder_ = $MathPiPlaceholder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$TextInputScreen" {
import {$CharacterFilter, $CharacterFilter$Type} from "packages/de/keksuccino/fancymenu/util/input/$CharacterFilter"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConsumingSupplier, $ConsumingSupplier$Type} from "packages/de/keksuccino/fancymenu/util/$ConsumingSupplier"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Tooltip, $Tooltip$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/tooltip/$Tooltip"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $TextInputScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Component$Type, arg1: $CharacterFilter$Type, arg2: $Consumer$Type<(string)>)

public static "build"(arg0: $Component$Type, arg1: $CharacterFilter$Type, arg2: $Consumer$Type<(string)>): $TextInputScreen
public "getText"(): string
public "setText"(arg0: string): $TextInputScreen
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "tick"(): void
public "setTextValidator"(arg0: $ConsumingSupplier$Type<($TextInputScreen$Type), (boolean)>): $TextInputScreen
public "setTextValidatorUserFeedback"(arg0: $Tooltip$Type): $TextInputScreen
get "text"(): string
set "text"(value: string)
set "textValidator"(value: $ConsumingSupplier$Type<($TextInputScreen$Type), (boolean)>)
set "textValidatorUserFeedback"(value: $Tooltip$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextInputScreen$Type = ($TextInputScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextInputScreen_ = $TextInputScreen$Type;
}}
declare module "packages/de/keksuccino/konkrete/json/minidev/asm/$FieldFilter" {
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"
import {$Method, $Method$Type} from "packages/java/lang/reflect/$Method"

export interface $FieldFilter {

 "canRead"(arg0: $Field$Type): boolean
 "canUse"(arg0: $Field$Type): boolean
 "canUse"(arg0: $Field$Type, arg1: $Method$Type): boolean
 "canWrite"(arg0: $Field$Type): boolean
}

export namespace $FieldFilter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FieldFilter$Type = ($FieldFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FieldFilter_ = $FieldFilter$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/action/actions/other/$PasteToChatAction" {
import {$Action, $Action$Type} from "packages/de/keksuccino/fancymenu/customization/action/$Action"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ActionInstance, $ActionInstance$Type} from "packages/de/keksuccino/fancymenu/customization/action/$ActionInstance"

export class $PasteToChatAction extends $Action {
static readonly "EMPTY": $Action

constructor()

public "execute"(arg0: string): void
public "hasValue"(): boolean
public "editValue"(arg0: $Screen$Type, arg1: $ActionInstance$Type): void
public "getValueExample"(): string
public "getValueDisplayName"(): $Component
public "getActionDisplayName"(): $Component
public "getActionDescription"(): ($Component)[]
get "valueExample"(): string
get "valueDisplayName"(): $Component
get "actionDisplayName"(): $Component
get "actionDescription"(): ($Component)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PasteToChatAction$Type = ($PasteToChatAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PasteToChatAction_ = $PasteToChatAction$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/audio/$ManageAudiosScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CellScreen, $CellScreen$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/screen/$CellScreen"
import {$ScrollArea, $ScrollArea$Type} from "packages/de/keksuccino/fancymenu/util/rendering/ui/scroll/v2/scrollarea/$ScrollArea"

export class $ManageAudiosScreen extends $CellScreen {
 "scrollArea": $ScrollArea
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManageAudiosScreen$Type = ($ManageAudiosScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManageAudiosScreen_ = $ManageAudiosScreen$Type;
}}
declare module "packages/de/keksuccino/fancymenu/customization/element/elements/button/vanillawidget/$VanillaWidgetElementBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ElementStacker, $ElementStacker$Type} from "packages/de/keksuccino/fancymenu/customization/element/$ElementStacker"
import {$ButtonElementBuilder, $ButtonElementBuilder$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/custombutton/$ButtonElementBuilder"
import {$VanillaWidgetElement, $VanillaWidgetElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/elements/button/vanillawidget/$VanillaWidgetElement"
import {$AbstractElement, $AbstractElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$AbstractElement"
import {$SerializedElement, $SerializedElement$Type} from "packages/de/keksuccino/fancymenu/customization/element/$SerializedElement"

export class $VanillaWidgetElementBuilder extends $ButtonElementBuilder implements $ElementStacker<($VanillaWidgetElement)> {
static readonly "INSTANCE": $VanillaWidgetElementBuilder

constructor()

public "getDescription"(arg0: $AbstractElement$Type): ($Component)[]
public "getIdentifier"(): string
public "stackElements"(arg0: $VanillaWidgetElement$Type, arg1: $VanillaWidgetElement$Type): void
public "buildDefaultInstance"(): $VanillaWidgetElement
public "deserializeElementInternal"(arg0: $SerializedElement$Type): $VanillaWidgetElement
public "stackElementsSingleInternal"(arg0: $AbstractElement$Type, arg1: $AbstractElement$Type): void
public "serializeElementInternal"(arg0: $AbstractElement$Type): $SerializedElement
get "identifier"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaWidgetElementBuilder$Type = ($VanillaWidgetElementBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaWidgetElementBuilder_ = $VanillaWidgetElementBuilder$Type;
}}
declare module "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EventBase, $EventBase$Type} from "packages/de/keksuccino/fancymenu/util/event/acara/$EventBase"
import {$InitOrResizeScreenEvent$InitializationPhase, $InitOrResizeScreenEvent$InitializationPhase$Type} from "packages/de/keksuccino/fancymenu/events/screen/$InitOrResizeScreenEvent$InitializationPhase"

export class $InitOrResizeScreenEvent extends $EventBase {


public "isCancelable"(): boolean
public "getScreen"(): $Screen
public "getInitializationPhase"(): $InitOrResizeScreenEvent$InitializationPhase
get "cancelable"(): boolean
get "screen"(): $Screen
get "initializationPhase"(): $InitOrResizeScreenEvent$InitializationPhase
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InitOrResizeScreenEvent$Type = ($InitOrResizeScreenEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InitOrResizeScreenEvent_ = $InitOrResizeScreenEvent$Type;
}}
declare module "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$OperatorToken" {
import {$Token, $Token$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/tokenizer/$Token"
import {$Operator, $Operator$Type} from "packages/de/keksuccino/konkrete/objecthunter/exp4j/operator/$Operator"

export class $OperatorToken extends $Token {
static readonly "TOKEN_NUMBER": short
static readonly "TOKEN_OPERATOR": short
static readonly "TOKEN_FUNCTION": short
static readonly "TOKEN_PARENTHESES_OPEN": short
static readonly "TOKEN_PARENTHESES_CLOSE": short
static readonly "TOKEN_VARIABLE": short
static readonly "TOKEN_SEPARATOR": short

constructor(arg0: $Operator$Type)

public "getOperator"(): $Operator
get "operator"(): $Operator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OperatorToken$Type = ($OperatorToken);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OperatorToken_ = $OperatorToken$Type;
}}
