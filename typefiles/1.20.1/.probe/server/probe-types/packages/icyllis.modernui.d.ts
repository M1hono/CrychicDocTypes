declare module "packages/icyllis/modernui/widget/$PopupMenu$OnMenuItemClickListener" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"

export interface $PopupMenu$OnMenuItemClickListener {

 "onMenuItemClick"(arg0: $MenuItem$Type): boolean

(arg0: $MenuItem$Type): boolean
}

export namespace $PopupMenu$OnMenuItemClickListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PopupMenu$OnMenuItemClickListener$Type = ($PopupMenu$OnMenuItemClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PopupMenu$OnMenuItemClickListener_ = $PopupMenu$OnMenuItemClickListener$Type;
}}
declare module "packages/icyllis/modernui/transition/$VisibilityPropagation" {
import {$TransitionPropagation, $TransitionPropagation$Type} from "packages/icyllis/modernui/transition/$TransitionPropagation"
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"

export class $VisibilityPropagation extends $TransitionPropagation {

constructor()

public "getPropagationProperties"(): (string)[]
public "getViewY"(values: $TransitionValues$Type): integer
public "getViewVisibility"(values: $TransitionValues$Type): integer
public "getViewX"(values: $TransitionValues$Type): integer
public "captureValues"(values: $TransitionValues$Type): void
get "propagationProperties"(): (string)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VisibilityPropagation$Type = ($VisibilityPropagation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VisibilityPropagation_ = $VisibilityPropagation$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuView" {
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"

export interface $MenuView {

 "initialize"(arg0: $MenuBuilder$Type): void
 "getWindowAnimations"(): integer
}

export namespace $MenuView {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuView$Type = ($MenuView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuView_ = $MenuView$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$LifecycleRegistry" {
import {$Lifecycle, $Lifecycle$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle"
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$LifecycleObserver, $LifecycleObserver$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleObserver"
import {$Lifecycle$Event, $Lifecycle$Event$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle$Event"
import {$Lifecycle$State, $Lifecycle$State$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle$State"

export class $LifecycleRegistry extends $Lifecycle {

constructor(provider: $LifecycleOwner$Type)

public "handleLifecycleEvent"(event: $Lifecycle$Event$Type): void
public "removeObserver"(observer: $LifecycleObserver$Type): void
public "addObserver"(observer: $LifecycleObserver$Type): void
public "setCurrentState"(state: $Lifecycle$State$Type): void
public "getCurrentState"(): $Lifecycle$State
public "getObserverCount"(): integer
set "currentState"(value: $Lifecycle$State$Type)
get "currentState"(): $Lifecycle$State
get "observerCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LifecycleRegistry$Type = ($LifecycleRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LifecycleRegistry_ = $LifecycleRegistry$Type;
}}
declare module "packages/icyllis/modernui/fragment/$DefaultSpecialEffectsController" {
import {$SpecialEffectsController, $SpecialEffectsController$Type} from "packages/icyllis/modernui/fragment/$SpecialEffectsController"

export class $DefaultSpecialEffectsController extends $SpecialEffectsController {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultSpecialEffectsController$Type = ($DefaultSpecialEffectsController);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultSpecialEffectsController_ = $DefaultSpecialEffectsController$Type;
}}
declare module "packages/icyllis/modernui/view/$InputEvent" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $InputEvent {


public "copy"(): $InputEvent
public "cancel"(): void
public "recycle"(): void
public "getEventTime"(): long
public "getEventTimeNano"(): long
get "eventTime"(): long
get "eventTimeNano"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputEvent$Type = ($InputEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputEvent_ = $InputEvent$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnClickListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $View$OnClickListener {

 "onClick"(arg0: $View$Type): void

(arg0: $View$Type): void
}

export namespace $View$OnClickListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnClickListener$Type = ($View$OnClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnClickListener_ = $View$OnClickListener$Type;
}}
declare module "packages/icyllis/modernui/widget/$GridView" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ListAdapter, $ListAdapter$Type} from "packages/icyllis/modernui/widget/$ListAdapter"
import {$AbsListView, $AbsListView$Type} from "packages/icyllis/modernui/widget/$AbsListView"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $GridView extends $AbsListView {
static readonly "NO_STRETCH": integer
static readonly "STRETCH_SPACING": integer
static readonly "STRETCH_COLUMN_WIDTH": integer
static readonly "STRETCH_SPACING_UNIFORM": integer
static readonly "AUTO_FIT": integer
static readonly "TRANSCRIPT_MODE_DISABLED": integer
static readonly "TRANSCRIPT_MODE_NORMAL": integer
static readonly "TRANSCRIPT_MODE_ALWAYS_SCROLL": integer
static readonly "CHOICE_MODE_NONE": integer
static readonly "CHOICE_MODE_SINGLE": integer
static readonly "CHOICE_MODE_MULTIPLE": integer
static readonly "CHOICE_MODE_MULTIPLE_MODAL": integer
static readonly "ITEM_VIEW_TYPE_IGNORE": integer
static readonly "ITEM_VIEW_TYPE_HEADER_OR_FOOTER": integer
static readonly "INVALID_POSITION": integer
static readonly "INVALID_ROW_ID": long
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setAdapter"(adapter: $ListAdapter$Type): void
public "setVerticalSpacing"(verticalSpacing: integer): void
public "setStretchMode"(stretchMode: integer): void
public "getStretchMode"(): integer
public "setColumnWidth"(columnWidth: integer): void
public "setNumColumns"(numColumns: integer): void
public "getNumColumns"(): integer
public "getRequestedColumnWidth"(): integer
public "setHorizontalSpacing"(horizontalSpacing: integer): void
public "getRequestedHorizontalSpacing"(): integer
public "onKeyMultiple"(keyCode: integer, repeatCount: integer, event: $KeyEvent$Type): boolean
public "onKeyDown"(keyCode: integer, event: $KeyEvent$Type): boolean
public "onKeyUp"(keyCode: integer, event: $KeyEvent$Type): boolean
public "setGravity"(gravity: integer): void
public "getGravity"(): integer
public "setSelection"(position: integer): void
public "smoothScrollByOffset"(offset: integer): void
public "smoothScrollToPosition"(position: integer): void
public "getHorizontalSpacing"(): integer
public "getColumnWidth"(): integer
public "getVerticalSpacing"(): integer
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "adapter"(value: $ListAdapter$Type)
set "verticalSpacing"(value: integer)
set "stretchMode"(value: integer)
get "stretchMode"(): integer
set "columnWidth"(value: integer)
set "numColumns"(value: integer)
get "numColumns"(): integer
get "requestedColumnWidth"(): integer
set "horizontalSpacing"(value: integer)
get "requestedHorizontalSpacing"(): integer
set "gravity"(value: integer)
get "gravity"(): integer
set "selection"(value: integer)
get "horizontalSpacing"(): integer
get "columnWidth"(): integer
get "verticalSpacing"(): integer
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GridView$Type = ($GridView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GridView_ = $GridView$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentContainer" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $FragmentContainer {

 "onFindViewById"(arg0: integer): $View
 "onHasView"(): boolean
}

export namespace $FragmentContainer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentContainer$Type = ($FragmentContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentContainer_ = $FragmentContainer$Type;
}}
declare module "packages/icyllis/modernui/text/$Directions" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Directions {
static readonly "ALL_LEFT_TO_RIGHT": $Directions
static readonly "ALL_RIGHT_TO_LEFT": $Directions
 "mDirections": (integer)[]

constructor(dirs: (integer)[])

public "getRunCount"(): integer
public "getRunStart"(runIndex: integer): integer
public "isRunRtl"(runIndex: integer): boolean
public "getRunLength"(runIndex: integer): integer
get "runCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Directions$Type = ($Directions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Directions_ = $Directions$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$NetworkHandler" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$LocalPlayer, $LocalPlayer$Type} from "packages/net/minecraft/client/player/$LocalPlayer"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PacketBuffer, $PacketBuffer$Type} from "packages/icyllis/modernui/mc/forge/$PacketBuffer"

export class $NetworkHandler {

constructor(name: $ResourceLocation$Type, protocol: string, optional: boolean)

public "buffer"(index: integer): $PacketBuffer
public "getProtocol"(): string
public static "getServerPlayer"(source: $Supplier$Type<($NetworkEvent$Context$Type)>): $ServerPlayer
public static "getClientPlayer"(source: $Supplier$Type<($NetworkEvent$Context$Type)>): $LocalPlayer
get "protocol"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkHandler$Type = ($NetworkHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkHandler_ = $NetworkHandler$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Matrix" {
import {$PointF, $PointF$Type} from "packages/icyllis/modernui/graphics/$PointF"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$RectF, $RectF$Type} from "packages/icyllis/modernui/graphics/$RectF"
import {$Matrix as $Matrix$0, $Matrix$Type as $Matrix$0$Type} from "packages/icyllis/arc3d/core/$Matrix"

export class $Matrix extends $Matrix$0 {

constructor(scaleX: float, shearY: float, persp0: float, shearX: float, scaleY: float, persp1: float, transX: float, transY: float, persp2: float)
constructor(m: $Matrix$Type)
constructor()

public "set"(m: $Matrix$Type): void
public "mapRect"(left: float, top: float, right: float, bottom: float, out: $Rect$Type): void
public "mapRect"(r: $Rect$Type, out: $Rect$Type): void
public "mapRect"(r: $RectF$Type, out: $Rect$Type): void
public "mapRect"(r: $RectF$Type): void
public "mapPoint"(p: $PointF$Type): void
public "mapRectOut"(r: $RectF$Type, out: $Rect$Type): void
public "mapRectOut"(left: float, top: float, right: float, bottom: float, out: $Rect$Type): void
public "mapRectOut"(r: $Rect$Type, out: $Rect$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Matrix$Type = ($Matrix);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Matrix_ = $Matrix$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentLifecycleCallbacks" {
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$FragmentManager, $FragmentManager$Type} from "packages/icyllis/modernui/fragment/$FragmentManager"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export interface $FragmentLifecycleCallbacks {

 "onFragmentPreCreated"(fm: $FragmentManager$Type, f: $Fragment$Type, savedInstanceState: $DataSet$Type): void
 "onFragmentViewCreated"(fm: $FragmentManager$Type, f: $Fragment$Type, v: $View$Type, savedInstanceState: $DataSet$Type): void
 "onFragmentPreAttached"(fm: $FragmentManager$Type, f: $Fragment$Type): void
 "onFragmentPaused"(fm: $FragmentManager$Type, f: $Fragment$Type): void
 "onFragmentDetached"(fm: $FragmentManager$Type, f: $Fragment$Type): void
 "onFragmentStarted"(fm: $FragmentManager$Type, f: $Fragment$Type): void
 "onFragmentAttached"(fm: $FragmentManager$Type, f: $Fragment$Type): void
 "onFragmentStopped"(fm: $FragmentManager$Type, f: $Fragment$Type): void
 "onFragmentCreated"(fm: $FragmentManager$Type, f: $Fragment$Type, savedInstanceState: $DataSet$Type): void
 "onFragmentResumed"(fm: $FragmentManager$Type, f: $Fragment$Type): void
 "onFragmentDestroyed"(fm: $FragmentManager$Type, f: $Fragment$Type): void
 "onFragmentSaveInstanceState"(fm: $FragmentManager$Type, f: $Fragment$Type, outState: $DataSet$Type): void
 "onFragmentViewDestroyed"(fm: $FragmentManager$Type, f: $Fragment$Type): void
}

export namespace $FragmentLifecycleCallbacks {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentLifecycleCallbacks$Type = ($FragmentLifecycleCallbacks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentLifecycleCallbacks_ = $FragmentLifecycleCallbacks$Type;
}}
declare module "packages/icyllis/modernui/mc/text/mixin/$AccessFontManager" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FontSet, $FontSet$Type} from "packages/net/minecraft/client/gui/font/$FontSet"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $AccessFontManager {

 "getFontSets"(): $Map<($ResourceLocation), ($FontSet)>

(): $Map<($ResourceLocation), ($FontSet)>
}

export namespace $AccessFontManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessFontManager$Type = ($AccessFontManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessFontManager_ = $AccessFontManager$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$CenterFragment" {
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ScreenCallback, $ScreenCallback$Type} from "packages/icyllis/modernui/mc/$ScreenCallback"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

/**
 * 
 * @deprecated
 */
export class $CenterFragment extends $Fragment implements $ScreenCallback {

constructor()

public "onCreateAnimator"(transit: integer, enter: boolean, nextAnim: integer): $Animator
public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
public "isPauseScreen"(): boolean
public "shouldClose"(): boolean
public "isBackKey"(keyCode: integer, event: $KeyEvent$Type): boolean
public "hasDefaultBackground"(): boolean
public "shouldBlurBackground"(): boolean
get "pauseScreen"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CenterFragment$Type = ($CenterFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CenterFragment_ = $CenterFragment$Type;
}}
declare module "packages/icyllis/modernui/text/style/$AlignmentSpan" {
import {$ParagraphStyle, $ParagraphStyle$Type} from "packages/icyllis/modernui/text/style/$ParagraphStyle"
import {$Layout$Alignment, $Layout$Alignment$Type} from "packages/icyllis/modernui/text/$Layout$Alignment"

export interface $AlignmentSpan extends $ParagraphStyle {

 "getAlignment"(): $Layout$Alignment

(): $Layout$Alignment
}

export namespace $AlignmentSpan {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlignmentSpan$Type = ($AlignmentSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlignmentSpan_ = $AlignmentSpan$Type;
}}
declare module "packages/icyllis/modernui/util/$StateSet" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $StateSet {
static readonly "WILD_CARD": (integer)[]
static readonly "VIEW_STATE_WINDOW_FOCUSED": integer
static readonly "VIEW_STATE_SELECTED": integer
static readonly "VIEW_STATE_FOCUSED": integer
static readonly "VIEW_STATE_ENABLED": integer
static readonly "VIEW_STATE_PRESSED": integer
static readonly "VIEW_STATE_ACTIVATED": integer
static readonly "VIEW_STATE_HOVERED": integer
static readonly "VIEW_STATE_DRAG_CAN_ACCEPT": integer
static readonly "VIEW_STATE_DRAG_HOVERED": integer


public static "get"(mask: integer): (integer)[]
public static "stateSetMatches"(stateSpec: (integer)[], state: integer): boolean
public static "stateSetMatches"(stateSpec: (integer)[], stateSet: (integer)[]): boolean
public static "containsAttribute"(stateSpecs: ((integer)[])[], attr: integer): boolean
public static "isWildCard"(state: (integer)[]): boolean
public static "trimStateSet"(states: (integer)[], newSize: integer): (integer)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StateSet$Type = ($StateSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StateSet_ = $StateSet$Type;
}}
declare module "packages/icyllis/modernui/transition/$TransitionSet" {
import {$TransitionPropagation, $TransitionPropagation$Type} from "packages/icyllis/modernui/transition/$TransitionPropagation"
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$Transition$EpicenterCallback, $Transition$EpicenterCallback$Type} from "packages/icyllis/modernui/transition/$Transition$EpicenterCallback"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $TransitionSet extends $Transition {
static readonly "ORDERING_TOGETHER": integer
static readonly "ORDERING_SEQUENTIAL": integer
static readonly "MATCH_INSTANCE": integer
static readonly "MATCH_NAME": integer
static readonly "MATCH_ID": integer
static readonly "MATCH_ITEM_ID": integer

constructor()

public "clone"(): $Transition
public "resume"(sceneRoot: $View$Type): void
public "cancel"(): void
public "setStartDelay"(startDelay: long): $TransitionSet
public "pause"(sceneRoot: $View$Type): void
public "addTransition"(transition: $Transition$Type): $TransitionSet
public "removeTransition"(transition: $Transition$Type): $TransitionSet
public "getOrdering"(): integer
public "setEpicenterCallback"(epicenterCallback: $Transition$EpicenterCallback$Type): void
public "addTarget"(targetId: integer): $TransitionSet
public "addTarget"(targetName: string): $TransitionSet
public "addTarget"(targetType: $Class$Type<(any)>): $TransitionSet
public "addTarget"(target: $View$Type): $TransitionSet
public "captureEndValues"(transitionValues: $TransitionValues$Type): void
public "captureStartValues"(transitionValues: $TransitionValues$Type): void
public "excludeTarget"(type: $Class$Type<(any)>, exclude: boolean): $Transition
public "excludeTarget"(targetName: string, exclude: boolean): $Transition
public "excludeTarget"(target: $View$Type, exclude: boolean): $Transition
public "excludeTarget"(targetId: integer, exclude: boolean): $Transition
public "removeTarget"(target: string): $TransitionSet
public "removeTarget"(targetId: integer): $TransitionSet
public "removeTarget"(target: $Class$Type<(any)>): $TransitionSet
public "setPropagation"(propagation: $TransitionPropagation$Type): void
public "setOrdering"(ordering: integer): $TransitionSet
public "getTransitionAt"(index: integer): $Transition
public "getTransitionCount"(): integer
set "startDelay"(value: long)
get "ordering"(): integer
set "epicenterCallback"(value: $Transition$EpicenterCallback$Type)
set "propagation"(value: $TransitionPropagation$Type)
set "ordering"(value: integer)
get "transitionCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TransitionSet$Type = ($TransitionSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TransitionSet_ = $TransitionSet$Type;
}}
declare module "packages/icyllis/modernui/widget/$HorizontalScrollView" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FrameLayout, $FrameLayout$Type} from "packages/icyllis/modernui/widget/$FrameLayout"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $HorizontalScrollView extends $FrameLayout {
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "requestChildRectangleOnScreen"(child: $View$Type, rectangle: $Rect$Type, immediate: boolean): boolean
public "onGenericMotionEvent"(event: $MotionEvent$Type): boolean
public "shouldDelayChildPressedState"(): boolean
public "onInterceptTouchEvent"(ev: $MotionEvent$Type): boolean
public "requestDisallowInterceptTouchEvent"(disallowIntercept: boolean): void
public "setEdgeEffectColor"(color: integer): void
public "setFillViewport"(fillViewport: boolean): void
public "arrowScroll"(direction: integer): boolean
public "isFillViewport"(): boolean
public "executeKeyEvent"(event: $KeyEvent$Type): boolean
public "fullScroll"(direction: integer): boolean
public "pageScroll"(direction: integer): boolean
public "smoothScrollBy"(delta: integer): boolean
public "smoothScrollTo"(x: integer): void
public "fling"(velocityX: integer): void
public "draw"(canvas: $Canvas$Type): void
public "onTouchEvent"(ev: $MotionEvent$Type): boolean
public "dispatchKeyEvent"(event: $KeyEvent$Type): boolean
public "setSmoothScrollingEnabled"(smoothScrollingEnabled: boolean): void
public "isSmoothScrollingEnabled"(): boolean
public "addView"(child: $View$Type): void
public "addView"(child: $View$Type, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type, index: integer, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type, index: integer): void
public "computeScroll"(): void
public "requestLayout"(): void
public "requestChildFocus"(child: $View$Type, focused: $View$Type): void
public "scrollTo"(x: integer, y: integer): void
public "setLeftEdgeEffectColor"(color: integer): void
public "getLeftEdgeEffectColor"(): integer
public "getRightEdgeEffectColor"(): integer
public "setRightEdgeEffectColor"(color: integer): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "edgeEffectColor"(value: integer)
set "fillViewport"(value: boolean)
get "fillViewport"(): boolean
set "smoothScrollingEnabled"(value: boolean)
get "smoothScrollingEnabled"(): boolean
set "leftEdgeEffectColor"(value: integer)
get "leftEdgeEffectColor"(): integer
get "rightEdgeEffectColor"(): integer
set "rightEdgeEffectColor"(value: integer)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HorizontalScrollView$Type = ($HorizontalScrollView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HorizontalScrollView_ = $HorizontalScrollView$Type;
}}
declare module "packages/icyllis/modernui/graphics/$BitmapFactory" {
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Bitmap, $Bitmap$Type} from "packages/icyllis/modernui/graphics/$Bitmap"
import {$File, $File$Type} from "packages/java/io/$File"
import {$ReadableByteChannel, $ReadableByteChannel$Type} from "packages/java/nio/channels/$ReadableByteChannel"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$BitmapFactory$Options, $BitmapFactory$Options$Type} from "packages/icyllis/modernui/graphics/$BitmapFactory$Options"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ByteBuffer, $ByteBuffer$Type} from "packages/java/nio/$ByteBuffer"
import {$ImageInputStream, $ImageInputStream$Type} from "packages/javax/imageio/stream/$ImageInputStream"

export class $BitmapFactory {

constructor()

public static "decodeMimeType"(opts: $BitmapFactory$Options$Type, input: any): void
public static "decodeFileInfo"(file: $File$Type, opts: $BitmapFactory$Options$Type): void
public static "decodeBuffer"(buffer: $ByteBuffer$Type, opts: $BitmapFactory$Options$Type): $Bitmap
public static "decodePathInfo"(path: $Path$Type, opts: $BitmapFactory$Options$Type): void
public static "decodeFile"(file: $File$Type, opts: $BitmapFactory$Options$Type): $Bitmap
public static "decodeFile"(file: $File$Type): $Bitmap
public static "decodePath"(path: $Path$Type, opts: $BitmapFactory$Options$Type): $Bitmap
public static "decodePath"(path: $Path$Type): $Bitmap
public static "decodeBufferInfo"(buffer: $ByteBuffer$Type, opts: $BitmapFactory$Options$Type): void
public static "filterPIC"(stream: $ImageInputStream$Type): boolean
public static "decodeChannelInfo"(channel: $ReadableByteChannel$Type, opts: $BitmapFactory$Options$Type): void
public static "decodeByteArray"(data: (byte)[], offset: integer, length: integer): $Bitmap
public static "decodeByteArray"(data: (byte)[], offset: integer, length: integer, opts: $BitmapFactory$Options$Type): $Bitmap
public static "decodeStreamInfo"(stream: $InputStream$Type, opts: $BitmapFactory$Options$Type): void
public static "filterPSD"(stream: $ImageInputStream$Type): boolean
public static "filterHDR"(stream: $ImageInputStream$Type): boolean
public static "filterTGA"(stream: $ImageInputStream$Type): boolean
public static "filterPGM"(stream: $ImageInputStream$Type): boolean
public static "filterPPM"(stream: $ImageInputStream$Type): boolean
public static "test"(stream: $ImageInputStream$Type, filter: $Predicate$Type<($ImageInputStream$Type)>): boolean
public static "decodeChannel"(channel: $ReadableByteChannel$Type): $Bitmap
public static "decodeChannel"(channel: $ReadableByteChannel$Type, opts: $BitmapFactory$Options$Type): $Bitmap
public static "decodeStream"(stream: $InputStream$Type, opts: $BitmapFactory$Options$Type): $Bitmap
public static "decodeStream"(stream: $InputStream$Type): $Bitmap
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BitmapFactory$Type = ($BitmapFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BitmapFactory_ = $BitmapFactory$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentContainerView" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FrameLayout, $FrameLayout$Type} from "packages/icyllis/modernui/widget/$FrameLayout"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $FragmentContainerView extends $FrameLayout {
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentContainerView$Type = ($FragmentContainerView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentContainerView_ = $FragmentContainerView$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/$ShaderShard" {
import {$ShaderShard$Type, $ShaderShard$Type$Type} from "packages/icyllis/modernui/mc/testforge/shader/$ShaderShard$Type"
import {$GLProgram, $GLProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/$GLProgram"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

/**
 * 
 * @deprecated
 */
export class $ShaderShard {


public "delete"(): void
public "attach"(program: $GLProgram$Type): void
public "detach"(program: $GLProgram$Type): void
public static "getOrCreate"(manager: $ResourceManager$Type, location: $ResourceLocation$Type, type: $ShaderShard$Type$Type): $ShaderShard
public static "deleteAll"(): void
public "getAttachCount"(): integer
get "attachCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShaderShard$Type = ($ShaderShard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShaderShard_ = $ShaderShard$Type;
}}
declare module "packages/icyllis/modernui/widget/$LinearLayout" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $LinearLayout extends $ViewGroup {
static readonly "HORIZONTAL": integer
static readonly "VERTICAL": integer
static readonly "SHOW_DIVIDER_NONE": integer
static readonly "SHOW_DIVIDER_BEGINNING": integer
static readonly "SHOW_DIVIDER_MIDDLE": integer
static readonly "SHOW_DIVIDER_END": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "onRtlPropertiesChanged"(layoutDirection: integer): void
public "getShowDividers"(): integer
public "getDividerDrawable"(): $Drawable
public "setBaselineAligned"(baselineAligned: boolean): void
public "getWeightSum"(): float
public "getDividerWidth"(): integer
public "getDividerPadding"(): integer
public "setWeightSum"(weightSum: float): void
public "isBaselineAligned"(): boolean
public "setVerticalGravity"(verticalGravity: integer): void
public "setOrientation"(orientation: integer): void
public "setShowDividers"(showDividers: integer): void
public "setDividerDrawable"(divider: $Drawable$Type): void
public "setDividerPadding"(padding: integer): void
public "getBaseline"(): integer
public "setGravity"(gravity: integer): void
public "getGravity"(): integer
public "isMeasureWithLargestChildEnabled"(): boolean
public "setBaselineAlignedChildIndex"(i: integer): void
public "getBaselineAlignedChildIndex"(): integer
public "setMeasureWithLargestChildEnabled"(enabled: boolean): void
public "getOrientation"(): integer
public "setHorizontalGravity"(horizontalGravity: integer): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
get "showDividers"(): integer
get "dividerDrawable"(): $Drawable
set "baselineAligned"(value: boolean)
get "weightSum"(): float
get "dividerWidth"(): integer
get "dividerPadding"(): integer
set "weightSum"(value: float)
get "baselineAligned"(): boolean
set "verticalGravity"(value: integer)
set "orientation"(value: integer)
set "showDividers"(value: integer)
set "dividerDrawable"(value: $Drawable$Type)
set "dividerPadding"(value: integer)
get "baseline"(): integer
set "gravity"(value: integer)
get "gravity"(): integer
get "measureWithLargestChildEnabled"(): boolean
set "baselineAlignedChildIndex"(value: integer)
get "baselineAlignedChildIndex"(): integer
set "measureWithLargestChildEnabled"(value: boolean)
get "orientation"(): integer
set "horizontalGravity"(value: integer)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LinearLayout$Type = ($LinearLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LinearLayout_ = $LinearLayout$Type;
}}
declare module "packages/icyllis/modernui/util/$PmxModel" {
import {$FileChannel, $FileChannel$Type} from "packages/java/nio/channels/$FileChannel"
import {$PmxModel$Vertex, $PmxModel$Vertex$Type} from "packages/icyllis/modernui/util/$PmxModel$Vertex"
import {$Charset, $Charset$Type} from "packages/java/nio/charset/$Charset"

export class $PmxModel {
 "mPmxVersion": float
 "mTextEncoding": $Charset
 "mAdditionalUV": byte
 "mModelName": string
 "mModelNameEn": string
 "mModelComment": string
 "mModelCommentEn": string
 "mVertices": ($PmxModel$Vertex)[]

constructor()

public static "decode"(channel: $FileChannel$Type): $PmxModel
public "debug"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PmxModel$Type = ($PmxModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PmxModel_ = $PmxModel$Type;
}}
declare module "packages/icyllis/modernui/util/$DataSet" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Parcelable$ClassLoaderCreator, $Parcelable$ClassLoaderCreator$Type} from "packages/icyllis/modernui/util/$Parcelable$ClassLoaderCreator"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$Parcelable, $Parcelable$Type} from "packages/icyllis/modernui/util/$Parcelable"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map$Entry, $Map$Entry$Type} from "packages/java/util/$Map$Entry"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DataSet implements $Map<(string), (any)>, $Parcelable {
static readonly "CREATOR": $Parcelable$ClassLoaderCreator<($DataSet)>

constructor()

public "remove"(key: any): any
public "get"(key: any): any
public "put"(key: string, value: any): any
public "equals"(o: any): boolean
public "toString"(): string
public "values"(): $Collection<(any)>
public "hashCode"(): integer
public "getBoolean"(key: string, defaultValue: boolean): boolean
public "getBoolean"(key: string): boolean
public "putBoolean"(key: string, value: boolean): void
public "getByte"(key: string, defaultValue: byte): byte
public "getByte"(key: string): byte
public "putByte"(key: string, value: byte): void
public "getShort"(key: string): short
public "getShort"(key: string, defaultValue: short): short
public "putShort"(key: string, value: short): void
public "getChar"(key: string, defaultValue: character): character
public "getChar"(key: string): character
public "getInt"(key: string, defaultValue: integer): integer
public "getInt"(key: string): integer
public "putInt"(key: string, value: integer): void
public "getLong"(key: string): long
public "getLong"(key: string, defaultValue: long): long
public "putLong"(key: string, value: long): void
public "getFloat"(key: string, defaultValue: float): float
public "getFloat"(key: string): float
public "putFloat"(key: string, value: float): void
public "getDouble"(key: string): double
public "getDouble"(key: string, defaultValue: double): double
public "putDouble"(key: string, value: double): void
public "clear"(): void
public "getValue"<T>(key: string): T
public "getValue"<T>(key: string, clazz: $Class$Type<(T)>): T
public "isEmpty"(): boolean
public "size"(): integer
public "entrySet"(): $Set<($Map$Entry<(string), (any)>)>
public "putAll"(map: $Map$Type<(any), (any)>): void
public "putIfAbsent"(key: string, value: any): any
public "containsKey"(key: any): boolean
public "keySet"(): $Set<(string)>
public "containsValue"(value: any): boolean
public "getOrDefault"(key: any, defaultValue: any): any
public "removeFirst"(): any
public "removeLast"(): any
public "getString"(key: string): string
public "getString"(key: string, defaultValue: string): string
public "putByteArray"(key: string, value: (byte)[]): void
public "getList"<T>(key: string): $List<(T)>
public "putString"(key: string, value: string): void
public "getShortArray"(key: string): (short)[]
public "getIntArray"(key: string): (integer)[]
public "getFloatArray"(key: string): (float)[]
public "getLongArray"(key: string): (long)[]
public "getDoubleArray"(key: string): (double)[]
public "putUUID"(key: string, value: $UUID$Type): void
public "putDataSet"(key: string, value: $DataSet$Type): void
public "putShortArray"(key: string, value: (short)[]): void
public "getDataSet"(key: string): $DataSet
public "putList"(key: string, value: $List$Type<(any)>): void
public "putDoubleArray"(key: string, value: (double)[]): void
public "putIntArray"(key: string, value: (integer)[]): void
public "putLongArray"(key: string, value: (long)[]): void
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
public "getByteArray"(key: string): (byte)[]
public "putFloatArray"(key: string, value: (float)[]): void
public "getUUID"(key: string, defaultValue: $UUID$Type): $UUID
public "getUUID"(key: string): $UUID
public "remove"(arg0: any, arg1: any): boolean
public static "copyOf"<K, V>(arg0: $Map$Type<(any), (any)>): $Map<(string), (any)>
public "replace"(arg0: string, arg1: any): any
public "replace"(arg0: string, arg1: any, arg2: any): boolean
public "replaceAll"(arg0: $BiFunction$Type<(any), (any), (any)>): void
public static "of"<K, V>(arg0: string, arg1: any, arg2: string, arg3: any, arg4: string, arg5: any, arg6: string, arg7: any, arg8: string, arg9: any): $Map<(string), (any)>
public static "of"<K, V>(arg0: string, arg1: any, arg2: string, arg3: any, arg4: string, arg5: any, arg6: string, arg7: any): $Map<(string), (any)>
public static "of"<K, V>(arg0: string, arg1: any, arg2: string, arg3: any, arg4: string, arg5: any): $Map<(string), (any)>
public static "of"<K, V>(): $Map<(string), (any)>
public static "of"<K, V>(arg0: string, arg1: any, arg2: string, arg3: any): $Map<(string), (any)>
public static "of"<K, V>(arg0: string, arg1: any): $Map<(string), (any)>
public static "of"<K, V>(arg0: string, arg1: any, arg2: string, arg3: any, arg4: string, arg5: any, arg6: string, arg7: any, arg8: string, arg9: any, arg10: string, arg11: any, arg12: string, arg13: any, arg14: string, arg15: any, arg16: string, arg17: any, arg18: string, arg19: any): $Map<(string), (any)>
public static "of"<K, V>(arg0: string, arg1: any, arg2: string, arg3: any, arg4: string, arg5: any, arg6: string, arg7: any, arg8: string, arg9: any, arg10: string, arg11: any, arg12: string, arg13: any, arg14: string, arg15: any, arg16: string, arg17: any): $Map<(string), (any)>
public static "of"<K, V>(arg0: string, arg1: any, arg2: string, arg3: any, arg4: string, arg5: any, arg6: string, arg7: any, arg8: string, arg9: any, arg10: string, arg11: any, arg12: string, arg13: any, arg14: string, arg15: any): $Map<(string), (any)>
public static "of"<K, V>(arg0: string, arg1: any, arg2: string, arg3: any, arg4: string, arg5: any, arg6: string, arg7: any, arg8: string, arg9: any, arg10: string, arg11: any, arg12: string, arg13: any): $Map<(string), (any)>
public static "of"<K, V>(arg0: string, arg1: any, arg2: string, arg3: any, arg4: string, arg5: any, arg6: string, arg7: any, arg8: string, arg9: any, arg10: string, arg11: any): $Map<(string), (any)>
public "merge"(arg0: string, arg1: any, arg2: $BiFunction$Type<(any), (any), (any)>): any
public "compute"(arg0: string, arg1: $BiFunction$Type<(any), (any), (any)>): any
public static "entry"<K, V>(arg0: string, arg1: any): $Map$Entry<(string), (any)>
public "forEach"(arg0: $BiConsumer$Type<(any), (any)>): void
public "computeIfAbsent"(arg0: string, arg1: $Function$Type<(any), (any)>): any
public "computeIfPresent"(arg0: string, arg1: $BiFunction$Type<(any), (any), (any)>): any
public static "ofEntries"<K, V>(...arg0: ($Map$Entry$Type<(any), (any)>)[]): $Map<(string), (any)>
[index: string | number]: any
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataSet$Type = ($DataSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataSet_ = $DataSet$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentLifecycleCallbacksDispatcher" {
import {$FragmentLifecycleCallbacks, $FragmentLifecycleCallbacks$Type} from "packages/icyllis/modernui/fragment/$FragmentLifecycleCallbacks"

export class $FragmentLifecycleCallbacksDispatcher {


public "unregisterFragmentLifecycleCallbacks"(cb: $FragmentLifecycleCallbacks$Type): void
public "registerFragmentLifecycleCallbacks"(cb: $FragmentLifecycleCallbacks$Type, recursive: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentLifecycleCallbacksDispatcher$Type = ($FragmentLifecycleCallbacksDispatcher);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentLifecycleCallbacksDispatcher_ = $FragmentLifecycleCallbacksDispatcher$Type;
}}
declare module "packages/icyllis/modernui/widget/$EdgeEffect" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"

export class $EdgeEffect {

constructor()

public "finish"(): void
public "setColor"(color: integer): void
public "setSize"(width: integer, height: integer): void
public "getMaxHeight"(): integer
public "onPullDistance"(deltaDistance: float, displacement: float): float
public "onAbsorb"(velocity: integer): void
public "getDistance"(): float
public "draw"(canvas: $Canvas$Type): boolean
public "onRelease"(): void
public "getColor"(): integer
public "isFinished"(): boolean
public "onPull"(deltaDistance: float, displacement: float): void
public "onPull"(deltaDistance: float): void
set "color"(value: integer)
get "maxHeight"(): integer
get "distance"(): float
get "color"(): integer
get "finished"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EdgeEffect$Type = ($EdgeEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EdgeEffect_ = $EdgeEffect$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$ViewModelStore" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ViewModelStore {

constructor()

public "clear"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewModelStore$Type = ($ViewModelStore);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewModelStore_ = $ViewModelStore$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/game/$BejeweledTwist" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $BejeweledTwist {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BejeweledTwist$Type = ($BejeweledTwist);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BejeweledTwist_ = $BejeweledTwist$Type;
}}
declare module "packages/icyllis/modernui/annotation/$FloatRange" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $FloatRange extends $Annotation {

 "to"(): double
 "from"(): double
 "fromInclusive"(): boolean
 "toInclusive"(): boolean
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $FloatRange {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FloatRange$Type = ($FloatRange);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FloatRange_ = $FloatRange$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$LayoutCache" {
import {$FontPaint, $FontPaint$Type} from "packages/icyllis/modernui/graphics/text/$FontPaint"
import {$LayoutPiece, $LayoutPiece$Type} from "packages/icyllis/modernui/graphics/text/$LayoutPiece"

export class $LayoutCache {
static readonly "MAX_PIECE_LENGTH": integer
static readonly "COMPUTE_CLUSTER_ADVANCES": integer
static readonly "COMPUTE_GLYPHS_PIXEL_BOUNDS": integer

constructor()

public static "clear"(): void
public static "getSize"(): integer
public static "getOrCreate"(buf: (character)[], contextStart: integer, contextLimit: integer, start: integer, limit: integer, isRtl: boolean, paint: $FontPaint$Type, computeFlags: integer): $LayoutPiece
public static "getMemoryUsage"(): integer
get "size"(): integer
get "memoryUsage"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutCache$Type = ($LayoutCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutCache_ = $LayoutCache$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$GLVertexAttrib$GpuType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $GLVertexAttrib$GpuType extends $Enum<($GLVertexAttrib$GpuType)> {
static readonly "FLOAT": $GLVertexAttrib$GpuType
static readonly "VEC2": $GLVertexAttrib$GpuType
static readonly "VEC3": $GLVertexAttrib$GpuType
static readonly "VEC4": $GLVertexAttrib$GpuType
static readonly "MAT4": $GLVertexAttrib$GpuType


public static "values"(): ($GLVertexAttrib$GpuType)[]
public static "valueOf"(name: string): $GLVertexAttrib$GpuType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLVertexAttrib$GpuType$Type = (("vec4") | ("mat4") | ("vec3") | ("vec2") | ("float")) | ($GLVertexAttrib$GpuType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLVertexAttrib$GpuType_ = $GLVertexAttrib$GpuType$Type;
}}
declare module "packages/icyllis/modernui/fragment/$OnBackPressedCallback" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $OnBackPressedCallback {

constructor(enabled: boolean)

public "remove"(): void
public "isEnabled"(): boolean
public "handleOnBackPressed"(): void
public "setEnabled"(enabled: boolean): void
get "enabled"(): boolean
set "enabled"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OnBackPressedCallback$Type = ($OnBackPressedCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OnBackPressedCallback_ = $OnBackPressedCallback$Type;
}}
declare module "packages/icyllis/modernui/view/$ContextMenu" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$SubMenu, $SubMenu$Type} from "packages/icyllis/modernui/view/$SubMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$Menu, $Menu$Type} from "packages/icyllis/modernui/view/$Menu"

export interface $ContextMenu extends $Menu {

 "clearHeader"(): void
 "setHeaderView"(arg0: $View$Type): $ContextMenu
 "setHeaderIcon"(arg0: $Drawable$Type): $ContextMenu
 "setHeaderTitle"(arg0: charseq): $ContextMenu
 "add"(arg0: charseq): $MenuItem
 "add"(arg0: integer, arg1: integer, arg2: integer, arg3: charseq): $MenuItem
 "clear"(): void
 "size"(): integer
 "close"(): void
 "getItem"(arg0: integer): $MenuItem
 "setQwertyMode"(arg0: boolean): void
 "removeItem"(arg0: integer): void
 "addSubMenu"(arg0: integer, arg1: integer, arg2: integer, arg3: charseq): $SubMenu
 "addSubMenu"(arg0: charseq): $SubMenu
 "setGroupCheckable"(arg0: integer, arg1: boolean, arg2: boolean): void
 "setGroupEnabled"(arg0: integer, arg1: boolean): void
 "hasVisibleItems"(): boolean
 "findItem"(arg0: integer): $MenuItem
 "isShortcutKey"(arg0: integer, arg1: $KeyEvent$Type): boolean
 "setGroupVisible"(arg0: integer, arg1: boolean): void
 "performShortcut"(arg0: integer, arg1: $KeyEvent$Type, arg2: integer): boolean
 "removeGroup"(arg0: integer): void
 "setGroupDividerEnabled"(arg0: boolean): void
 "performIdentifierAction"(arg0: integer, arg1: integer): boolean
}

export namespace $ContextMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$Type = ($ContextMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu_ = $ContextMenu$Type;
}}
declare module "packages/icyllis/modernui/text/$ParcelableSpan" {
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$Parcelable, $Parcelable$Type} from "packages/icyllis/modernui/util/$Parcelable"

export interface $ParcelableSpan extends $Parcelable {

 "getSpanTypeId"(): integer
 "writeToParcel"(arg0: $Parcel$Type, arg1: integer): void
}

export namespace $ParcelableSpan {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParcelableSpan$Type = ($ParcelableSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParcelableSpan_ = $ParcelableSpan$Type;
}}
declare module "packages/icyllis/modernui/animation/$Animator" {
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Cloneable, $Cloneable$Type} from "packages/java/lang/$Cloneable"
import {$AnimatorListener, $AnimatorListener$Type} from "packages/icyllis/modernui/animation/$AnimatorListener"

export class $Animator implements $Cloneable {
static readonly "MARKER": $Marker
static readonly "DURATION_INFINITE": long

constructor()

public "clone"(): $Animator
public "start"(): void
public "end"(): void
public "resume"(): void
public "setTarget"(target: any): void
public "reverse"(): void
public "getDuration"(): long
public "cancel"(): void
public "setStartDelay"(arg0: long): void
public "setInterpolator"(arg0: $TimeInterpolator$Type): void
public "removeListener"(listener: $AnimatorListener$Type): void
public "getListeners"(): $List<($AnimatorListener)>
public "isPaused"(): boolean
public "pause"(): void
public "isRunning"(): boolean
public "addListener"(listener: $AnimatorListener$Type): void
public "isStarted"(): boolean
public "setDuration"(arg0: long): $Animator
public "getInterpolator"(): $TimeInterpolator
public "setupStartValues"(): void
public "getStartDelay"(): long
public "getTotalDuration"(): long
public "setupEndValues"(): void
public "canReverse"(): boolean
public "removeAllListeners"(): void
set "target"(value: any)
get "duration"(): long
set "startDelay"(value: long)
set "interpolator"(value: $TimeInterpolator$Type)
get "listeners"(): $List<($AnimatorListener)>
get "paused"(): boolean
get "running"(): boolean
get "started"(): boolean
set "duration"(value: long)
get "interpolator"(): $TimeInterpolator
get "startDelay"(): long
get "totalDuration"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Animator$Type = ($Animator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Animator_ = $Animator$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$Drawable$ConstantState" {
import {$Resources, $Resources$Type} from "packages/icyllis/modernui/resources/$Resources"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"

export class $Drawable$ConstantState {

constructor()

public "newDrawable"(res: $Resources$Type): $Drawable
public "newDrawable"(): $Drawable
public "getChangingConfigurations"(): integer
public "canApplyTheme"(): boolean
get "changingConfigurations"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Drawable$ConstantState$Type = ($Drawable$ConstantState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Drawable$ConstantState_ = $Drawable$ConstantState$Type;
}}
declare module "packages/icyllis/modernui/animation/$TimeInterpolator" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $TimeInterpolator {

 "getInterpolation"(arg0: float): float

(cycle: float): $TimeInterpolator
}

export namespace $TimeInterpolator {
const LINEAR: $TimeInterpolator
const ACCELERATE: $TimeInterpolator
const DECELERATE: $TimeInterpolator
const DECELERATE_CUBIC: $TimeInterpolator
const DECELERATE_QUINTIC: $TimeInterpolator
const ACCELERATE_DECELERATE: $TimeInterpolator
const SINE: $TimeInterpolator
const ANTICIPATE: $TimeInterpolator
const OVERSHOOT: $TimeInterpolator
const ANTICIPATE_OVERSHOOT: $TimeInterpolator
const BOUNCE: $TimeInterpolator
const VISCOUS_FLUID: $TimeInterpolator
function cycle(cycle: float): $TimeInterpolator
function overshoot(): $TimeInterpolator
function overshoot(tension: float): $TimeInterpolator
function bounce(): $TimeInterpolator
function accelerate(factor: float): $TimeInterpolator
function accelerate(): $TimeInterpolator
function anticipate(tension: float): $TimeInterpolator
function anticipate(): $TimeInterpolator
function decelerate(factor: float): $TimeInterpolator
function decelerate(): $TimeInterpolator
function linear(): $TimeInterpolator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimeInterpolator$Type = ($TimeInterpolator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimeInterpolator_ = $TimeInterpolator$Type;
}}
declare module "packages/icyllis/modernui/util/$BadParcelableException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$RuntimeException, $RuntimeException$Type} from "packages/java/lang/$RuntimeException"
import {$Exception, $Exception$Type} from "packages/java/lang/$Exception"

export class $BadParcelableException extends $RuntimeException {

constructor(msg: string)
constructor(cause: $Exception$Type)
constructor(msg: string, cause: $Throwable$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BadParcelableException$Type = ($BadParcelableException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BadParcelableException_ = $BadParcelableException$Type;
}}
declare module "packages/icyllis/modernui/widget/$TableRow" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$LinearLayout, $LinearLayout$Type} from "packages/icyllis/modernui/widget/$LinearLayout"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $TableRow extends $LinearLayout {
static readonly "HORIZONTAL": integer
static readonly "VERTICAL": integer
static readonly "SHOW_DIVIDER_NONE": integer
static readonly "SHOW_DIVIDER_BEGINNING": integer
static readonly "SHOW_DIVIDER_MIDDLE": integer
static readonly "SHOW_DIVIDER_END": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "getVirtualChildAt"(i: integer): $View
public "getVirtualChildCount"(): integer
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
get "virtualChildCount"(): integer
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TableRow$Type = ($TableRow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TableRow_ = $TableRow$Type;
}}
declare module "packages/icyllis/modernui/widget/$PopupMenu" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$PopupMenu$OnMenuItemClickListener, $PopupMenu$OnMenuItemClickListener$Type} from "packages/icyllis/modernui/widget/$PopupMenu$OnMenuItemClickListener"
import {$PopupMenu$OnDismissListener, $PopupMenu$OnDismissListener$Type} from "packages/icyllis/modernui/widget/$PopupMenu$OnDismissListener"
import {$ListView, $ListView$Type} from "packages/icyllis/modernui/widget/$ListView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$View$OnTouchListener, $View$OnTouchListener$Type} from "packages/icyllis/modernui/view/$View$OnTouchListener"
import {$Menu, $Menu$Type} from "packages/icyllis/modernui/view/$Menu"

export class $PopupMenu {

constructor(context: $Context$Type, anchor: $View$Type)
constructor(context: $Context$Type, anchor: $View$Type, gravity: integer)

public "dismiss"(): void
public "setGravity"(gravity: integer): void
public "getGravity"(): integer
public "setOnMenuItemClickListener"(listener: $PopupMenu$OnMenuItemClickListener$Type): void
public "getMenu"(): $Menu
public "show"(): void
public "setForceShowIcon"(forceShowIcon: boolean): void
public "getDragToOpenListener"(): $View$OnTouchListener
public "setOnDismissListener"(listener: $PopupMenu$OnDismissListener$Type): void
public "getMenuListView"(): $ListView
set "gravity"(value: integer)
get "gravity"(): integer
set "onMenuItemClickListener"(value: $PopupMenu$OnMenuItemClickListener$Type)
get "menu"(): $Menu
set "forceShowIcon"(value: boolean)
get "dragToOpenListener"(): $View$OnTouchListener
set "onDismissListener"(value: $PopupMenu$OnDismissListener$Type)
get "menuListView"(): $ListView
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PopupMenu$Type = ($PopupMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PopupMenu_ = $PopupMenu$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$LiveData" {
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$Observer, $Observer$Type} from "packages/icyllis/modernui/lifecycle/$Observer"

export class $LiveData<T> {

constructor(value: T)
constructor()

public "getValue"(): T
public "removeObserver"(observer: $Observer$Type<(any)>): void
public "observe"(owner: $LifecycleOwner$Type, observer: $Observer$Type<(any)>): void
public "hasActiveObservers"(): boolean
public "removeObservers"(owner: $LifecycleOwner$Type): void
public "hasObservers"(): boolean
public "observeForever"(observer: $Observer$Type<(any)>): void
get "value"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LiveData$Type<T> = ($LiveData<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LiveData_<T> = $LiveData$Type<(T)>;
}}
declare module "packages/icyllis/modernui/mc/forge/$ContainerDrawHelper" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ContainerDrawHelper {

constructor()

public static "drawItem"(canvas: $Canvas$Type, item: $ItemStack$Type, x: float, y: float, z: float, size: float, seed: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContainerDrawHelper$Type = ($ContainerDrawHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContainerDrawHelper_ = $ContainerDrawHelper$Type;
}}
declare module "packages/icyllis/modernui/widget/$ExpandableListAdapter" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export interface $ExpandableListAdapter {

 "isEmpty"(): boolean
 "getChild"(arg0: integer, arg1: integer): any
 "registerDataSetObserver"(arg0: $DataSetObserver$Type): void
 "unregisterDataSetObserver"(arg0: $DataSetObserver$Type): void
 "getChildId"(arg0: integer, arg1: integer): long
 "getGroup"(arg0: integer): any
 "getGroupId"(arg0: integer): long
 "hasStableIds"(): boolean
 "getGroupCount"(): integer
 "getCombinedGroupId"(arg0: long): long
 "isChildSelectable"(arg0: integer, arg1: integer): boolean
 "getCombinedChildId"(arg0: long, arg1: long): long
 "getChildView"(arg0: integer, arg1: integer, arg2: boolean, arg3: $View$Type, arg4: $ViewGroup$Type): $View
 "getGroupView"(arg0: integer, arg1: boolean, arg2: $View$Type, arg3: $ViewGroup$Type): $View
 "getChildrenCount"(arg0: integer): integer
 "onGroupCollapsed"(arg0: integer): void
 "onGroupExpanded"(arg0: integer): void
 "areAllItemsEnabled"(): boolean
}

export namespace $ExpandableListAdapter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandableListAdapter$Type = ($ExpandableListAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandableListAdapter_ = $ExpandableListAdapter$Type;
}}
declare module "packages/icyllis/modernui/markdown/core/$CorePlugin" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$MarkdownTheme$Builder, $MarkdownTheme$Builder$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme$Builder"
import {$MarkdownPlugin, $MarkdownPlugin$Type} from "packages/icyllis/modernui/markdown/$MarkdownPlugin"
import {$MarkdownPlugin$Registry, $MarkdownPlugin$Registry$Type} from "packages/icyllis/modernui/markdown/$MarkdownPlugin$Registry"
import {$MarkdownConfig$Builder, $MarkdownConfig$Builder$Type} from "packages/icyllis/modernui/markdown/$MarkdownConfig$Builder"
import {$Node, $Node$Type} from "packages/com/vladsch/flexmark/util/ast/$Node"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$Parser$Builder, $Parser$Builder$Type} from "packages/com/vladsch/flexmark/parser/$Parser$Builder"
import {$MarkdownVisitor, $MarkdownVisitor$Type} from "packages/icyllis/modernui/markdown/$MarkdownVisitor"

export class $CorePlugin implements $MarkdownPlugin {
static readonly "CORE_ORDERED_LIST_ITEM_NUMBER": string


public "configureConfig"(builder: $MarkdownConfig$Builder$Type): void
public "beforeSetText"(textView: $TextView$Type, markdown: $Spanned$Type): void
public static "create"(): $CorePlugin
public "afterSetText"(textView: $TextView$Type): void
public "processMarkdown"(markdown: string): string
public "configureParser"(builder: $Parser$Builder$Type): void
public "configureTheme"(builder: $MarkdownTheme$Builder$Type): void
public "configure"(registry: $MarkdownPlugin$Registry$Type): void
public "beforeRender"(document: $Node$Type): void
public "afterRender"(document: $Node$Type, visitor: $MarkdownVisitor$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CorePlugin$Type = ($CorePlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CorePlugin_ = $CorePlugin$Type;
}}
declare module "packages/icyllis/modernui/fragment/$BackStackRecord" {
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$FragmentManager$OpGenerator, $FragmentManager$OpGenerator$Type} from "packages/icyllis/modernui/fragment/$FragmentManager$OpGenerator"
import {$FragmentManager$BackStackEntry, $FragmentManager$BackStackEntry$Type} from "packages/icyllis/modernui/fragment/$FragmentManager$BackStackEntry"
import {$FragmentTransaction, $FragmentTransaction$Type} from "packages/icyllis/modernui/fragment/$FragmentTransaction"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$BooleanArrayList, $BooleanArrayList$Type} from "packages/it/unimi/dsi/fastutil/booleans/$BooleanArrayList"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"
import {$Lifecycle$State, $Lifecycle$State$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle$State"

export class $BackStackRecord extends $FragmentTransaction implements $FragmentManager$BackStackEntry, $FragmentManager$OpGenerator {
static readonly "TRANSIT_ENTER_MASK": integer
static readonly "TRANSIT_EXIT_MASK": integer
static readonly "TRANSIT_UNSET": integer
static readonly "TRANSIT_NONE": integer
static readonly "TRANSIT_FRAGMENT_OPEN": integer
static readonly "TRANSIT_FRAGMENT_CLOSE": integer
static readonly "TRANSIT_FRAGMENT_FADE": integer
static readonly "TRANSIT_FRAGMENT_MATCH_ACTIVITY_OPEN": integer
static readonly "TRANSIT_FRAGMENT_MATCH_ACTIVITY_CLOSE": integer


public "getName"(): string
public "remove"(fragment: $Fragment$Type): $FragmentTransaction
public "toString"(): string
public "isEmpty"(): boolean
public "getId"(): integer
public "commit"(): integer
public "detach"(fragment: $Fragment$Type): $FragmentTransaction
public "hide"(fragment: $Fragment$Type): $FragmentTransaction
public "runOnCommitRunnables"(): void
public "commitAllowingStateLoss"(): integer
public "commitNowAllowingStateLoss"(): void
public "show"(fragment: $Fragment$Type): $FragmentTransaction
public "dump"(prefix: string, writer: $PrintWriter$Type): void
public "dump"(prefix: string, writer: $PrintWriter$Type, full: boolean): void
public "setPrimaryNavigationFragment"(fragment: $Fragment$Type): $FragmentTransaction
public "generateOps"(records: $ArrayList$Type<($BackStackRecord$Type)>, isRecordPop: $BooleanArrayList$Type): boolean
public "setMaxLifecycle"(fragment: $Fragment$Type, state: $Lifecycle$State$Type): $FragmentTransaction
public "commitNow"(): void
get "name"(): string
get "empty"(): boolean
get "id"(): integer
set "primaryNavigationFragment"(value: $Fragment$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackStackRecord$Type = ($BackStackRecord);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackStackRecord_ = $BackStackRecord$Type;
}}
declare module "packages/icyllis/modernui/widget/$Filter" {
import {$Filter$FilterListener, $Filter$FilterListener$Type} from "packages/icyllis/modernui/widget/$Filter$FilterListener"
import {$Filter$Delayer, $Filter$Delayer$Type} from "packages/icyllis/modernui/widget/$Filter$Delayer"

export class $Filter {

constructor()

public "filter"(constraint: charseq): void
public "filter"(constraint: charseq, listener: $Filter$FilterListener$Type): void
public "setDelayer"(delayer: $Filter$Delayer$Type): void
public "convertResultToString"(resultValue: any): charseq
set "delayer"(value: $Filter$Delayer$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Filter$Type = ($Filter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Filter_ = $Filter$Type;
}}
declare module "packages/icyllis/modernui/view/$PointerIcon" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PointerIcon {
static readonly "TYPE_DEFAULT": integer
static readonly "TYPE_ARROW": integer
static readonly "TYPE_HAND": integer
static readonly "TYPE_TEXT": integer


public "getType"(): integer
public "getHandle"(): long
public static "getSystemIcon"(type: integer): $PointerIcon
get "type"(): integer
get "handle"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PointerIcon$Type = ($PointerIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PointerIcon_ = $PointerIcon$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$ModernUIText" {
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"

export class $ModernUIText {


public static "init"(): void
public static "setupClient"(event: $FMLClientSetupEvent$Type): void
set "upClient"(value: $FMLClientSetupEvent$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModernUIText$Type = ($ModernUIText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModernUIText_ = $ModernUIText$Type;
}}
declare module "packages/icyllis/modernui/text/style/$TrailingMarginSpan" {
import {$ParagraphStyle, $ParagraphStyle$Type} from "packages/icyllis/modernui/text/style/$ParagraphStyle"

export interface $TrailingMarginSpan extends $ParagraphStyle {

 "getTrailingMargin"(): integer

(): integer
}

export namespace $TrailingMarginSpan {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrailingMarginSpan$Type = ($TrailingMarginSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrailingMarginSpan_ = $TrailingMarginSpan$Type;
}}
declare module "packages/icyllis/modernui/graphics/$ImageStore" {
import {$Image, $Image$Type} from "packages/icyllis/modernui/graphics/$Image"

/**
 * 
 * @deprecated
 */
export class $ImageStore {


public "clear"(): void
public static "getInstance"(): $ImageStore
public "getOrCreate"(namespace: string, path: string): $Image
get "instance"(): $ImageStore
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageStore$Type = ($ImageStore);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageStore_ = $ImageStore$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$FormattedTextWrapper" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$FormattedText, $FormattedText$Type} from "packages/net/minecraft/network/chat/$FormattedText"
import {$Int2IntFunction, $Int2IntFunction$Type} from "packages/it/unimi/dsi/fastutil/ints/$Int2IntFunction"
import {$FormattedCharSink, $FormattedCharSink$Type} from "packages/net/minecraft/util/$FormattedCharSink"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"

export class $FormattedTextWrapper implements $FormattedCharSequence {
readonly "mText": $FormattedText

constructor(text: $FormattedText$Type)

public "accept"(sink: $FormattedCharSink$Type): boolean
public static "decorateOutput"(arg0: $FormattedCharSink$Type, arg1: $Int2IntFunction$Type): $FormattedCharSink
public static "codepoint"(arg0: integer, arg1: $Style$Type): $FormattedCharSequence
public static "backward"(arg0: string, arg1: $Style$Type): $FormattedCharSequence
public static "forward"(arg0: string, arg1: $Style$Type): $FormattedCharSequence
public static "forward"(arg0: string, arg1: $Style$Type, arg2: $Int2IntFunction$Type): $FormattedCharSequence
public static "backward"(arg0: string, arg1: $Style$Type, arg2: $Int2IntFunction$Type): $FormattedCharSequence
public static "composite"(): $FormattedCharSequence
public static "fromList"(arg0: $List$Type<($FormattedCharSequence$Type)>): $FormattedCharSequence
public static "composite"(arg0: $List$Type<($FormattedCharSequence$Type)>): $FormattedCharSequence
public static "composite"(...arg0: ($FormattedCharSequence$Type)[]): $FormattedCharSequence
public static "composite"(arg0: $FormattedCharSequence$Type): $FormattedCharSequence
public static "fromPair"(arg0: $FormattedCharSequence$Type, arg1: $FormattedCharSequence$Type): $FormattedCharSequence
public static "composite"(arg0: $FormattedCharSequence$Type, arg1: $FormattedCharSequence$Type): $FormattedCharSequence
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FormattedTextWrapper$Type = ($FormattedTextWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FormattedTextWrapper_ = $FormattedTextWrapper$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$PluginLoader" {
import {$ExecutorService, $ExecutorService$Type} from "packages/java/util/concurrent/$ExecutorService"

/**
 * 
 * @deprecated
 */
export class $PluginLoader {


public static "get"(): $PluginLoader
public static "create"(parallel: $ExecutorService$Type): $PluginLoader
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PluginLoader$Type = ($PluginLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PluginLoader_ = $PluginLoader$Type;
}}
declare module "packages/icyllis/modernui/view/$MotionEvent" {
import {$InputEvent, $InputEvent$Type} from "packages/icyllis/modernui/view/$InputEvent"
import {$Matrix, $Matrix$Type} from "packages/icyllis/modernui/graphics/$Matrix"

export class $MotionEvent extends $InputEvent {
static readonly "INVALID_POINTER_ID": integer
static readonly "ACTION_MASK": integer
static readonly "ACTION_DOWN": integer
static readonly "ACTION_UP": integer
static readonly "ACTION_MOVE": integer
static readonly "ACTION_CANCEL": integer
static readonly "ACTION_OUTSIDE": integer
static readonly "ACTION_POINTER_DOWN": integer
static readonly "ACTION_POINTER_UP": integer
static readonly "ACTION_HOVER_MOVE": integer
static readonly "ACTION_SCROLL": integer
static readonly "ACTION_HOVER_ENTER": integer
static readonly "ACTION_HOVER_EXIT": integer
static readonly "ACTION_BUTTON_PRESS": integer
static readonly "ACTION_BUTTON_RELEASE": integer
static readonly "ACTION_POINTER_INDEX_MASK": integer
static readonly "ACTION_POINTER_INDEX_SHIFT": integer
static readonly "FLAG_HOVER_EXIT_PENDING": integer
static readonly "FLAG_TAINTED": integer
static readonly "BUTTON_PRIMARY": integer
static readonly "BUTTON_SECONDARY": integer
static readonly "BUTTON_TERTIARY": integer
static readonly "BUTTON_BACK": integer
static readonly "BUTTON_FORWARD": integer
static readonly "TOOL_TYPE_UNKNOWN": integer
static readonly "AXIS_X": integer
static readonly "AXIS_Y": integer
static readonly "AXIS_VSCROLL": integer
static readonly "AXIS_HSCROLL": integer


public "toString"(): string
public "getModifiers"(): integer
public "transform"(matrix: $Matrix$Type): void
public "copy"(): $MotionEvent
public "cancel"(): void
public "setHoverExitPending"(hoverExitPending: boolean): void
public static "buttonStateToString"(buttonState: integer): string
public "isCtrlPressed"(): boolean
public "isAltPressed"(): boolean
public "getY"(): float
public "isTouchEvent"(): boolean
public "getX"(): float
public "getActionButton"(): integer
public "isButtonPressed"(button: integer): boolean
public "getButtonState"(): integer
public static "obtain"(eventTime: long, action: integer, actionButton: integer, x: float, y: float, modifiers: integer, buttonState: integer, flags: integer): $MotionEvent
public static "obtain"(eventTime: long, action: integer, x: float, y: float, modifiers: integer): $MotionEvent
public "recycle"(): void
public "setAction"(action: integer): void
public "isHoverExitPending"(): boolean
public "offsetLocation"(deltaX: float, deltaY: float): void
public "hasModifiers"(modifiers: integer): boolean
public "getRawX"(): float
public "getPointerCount"(): integer
public "getActionMasked"(): integer
public "getRawY"(): float
public "setAxisValue"(axis: integer, value: float): void
public "getAction"(): integer
public "setLocation"(x: float, y: float): void
public "getEventTime"(): long
public "getEventTimeNano"(): long
public "isNumLockOn"(): boolean
public "getAxisValue"(axis: integer): float
public "getToolType"(pointerIndex: integer): integer
public "isSuperPressed"(): boolean
public "isCapsLockOn"(): boolean
public static "actionToString"(action: integer): string
public "getPointerId"(pointerIndex: integer): integer
public "isShiftPressed"(): boolean
get "modifiers"(): integer
set "hoverExitPending"(value: boolean)
get "ctrlPressed"(): boolean
get "altPressed"(): boolean
get "y"(): float
get "touchEvent"(): boolean
get "x"(): float
get "actionButton"(): integer
get "buttonState"(): integer
set "action"(value: integer)
get "hoverExitPending"(): boolean
get "rawX"(): float
get "pointerCount"(): integer
get "actionMasked"(): integer
get "rawY"(): float
get "action"(): integer
get "eventTime"(): long
get "eventTimeNano"(): long
get "numLockOn"(): boolean
get "superPressed"(): boolean
get "capsLockOn"(): boolean
get "shiftPressed"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MotionEvent$Type = ($MotionEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MotionEvent_ = $MotionEvent$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$DefinePlugin" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

/**
 * 
 * @deprecated
 */
export interface $DefinePlugin extends $Annotation {

 "value"(): string
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $DefinePlugin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefinePlugin$Type = ($DefinePlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefinePlugin_ = $DefinePlugin$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$PluginList" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
/**
 * 
 * @deprecated
 */
export class $PluginList {


public static "get"(): $PluginList
public "size"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PluginList$Type = ($PluginList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PluginList_ = $PluginList$Type;
}}
declare module "packages/icyllis/modernui/animation/$AnimationHandler" {
import {$AnimationHandler$FrameCallback, $AnimationHandler$FrameCallback$Type} from "packages/icyllis/modernui/animation/$AnimationHandler$FrameCallback"

export class $AnimationHandler {


public static "getAnimationCount"(): integer
public static "getInstance"(): $AnimationHandler
public "removeCallback"(callback: $AnimationHandler$FrameCallback$Type): void
public "addFrameCallback"(callback: $AnimationHandler$FrameCallback$Type, delay: long): void
get "animationCount"(): integer
get "instance"(): $AnimationHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationHandler$Type = ($AnimationHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationHandler_ = $AnimationHandler$Type;
}}
declare module "packages/icyllis/modernui/$TestFragment" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $TestFragment extends $Fragment {

constructor()

public static "main"(args: (string)[]): void
public "onAttach"(context: $Context$Type): void
public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
public "onCreate"(savedInstanceState: $DataSet$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TestFragment$Type = ($TestFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TestFragment_ = $TestFragment$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$BitmapFont$Glyph" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$BakedGlyph, $BakedGlyph$Type} from "packages/icyllis/modernui/graphics/font/$BakedGlyph"
import {$SheetGlyphInfo, $SheetGlyphInfo$Type} from "packages/com/mojang/blaze3d/font/$SheetGlyphInfo"
import {$BakedGlyph as $BakedGlyph$0, $BakedGlyph$Type as $BakedGlyph$0$Type} from "packages/net/minecraft/client/gui/font/glyphs/$BakedGlyph"
import {$GlyphInfo, $GlyphInfo$Type} from "packages/com/mojang/blaze3d/font/$GlyphInfo"

export class $BitmapFont$Glyph extends $BakedGlyph implements $GlyphInfo {
readonly "advance": float
 "x": short
 "y": short
 "width": short
 "height": short
 "u1": float
 "v1": float
 "u2": float
 "v2": float

constructor(advance: integer)

public "getAdvance"(): float
public "bake"(arg0: $Function$Type<($SheetGlyphInfo$Type), ($BakedGlyph$0$Type)>): $BakedGlyph$0
public "getShadowOffset"(): float
public "getAdvance"(arg0: boolean): float
public "getBoldOffset"(): float
get "advance"(): float
get "shadowOffset"(): float
get "boldOffset"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BitmapFont$Glyph$Type = ($BitmapFont$Glyph);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BitmapFont$Glyph_ = $BitmapFont$Glyph$Type;
}}
declare module "packages/icyllis/modernui/mc/$MuiModApi" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MuiModApi$OnDebugDumpListener, $MuiModApi$OnDebugDumpListener$Type} from "packages/icyllis/modernui/mc/$MuiModApi$OnDebugDumpListener"
import {$Window, $Window$Type} from "packages/com/mojang/blaze3d/platform/$Window"
import {$ScreenCallback, $ScreenCallback$Type} from "packages/icyllis/modernui/mc/$ScreenCallback"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$ResourceProvider, $ResourceProvider$Type} from "packages/net/minecraft/server/packs/resources/$ResourceProvider"
import {$Pattern, $Pattern$Type} from "packages/java/util/regex/$Pattern"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$MenuAccess, $MenuAccess$Type} from "packages/net/minecraft/client/gui/screens/inventory/$MenuAccess"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$GameRenderer, $GameRenderer$Type} from "packages/net/minecraft/client/renderer/$GameRenderer"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MuiModApi$OnScreenChangeListener, $MuiModApi$OnScreenChangeListener$Type} from "packages/icyllis/modernui/mc/$MuiModApi$OnScreenChangeListener"
import {$Rarity, $Rarity$Type} from "packages/net/minecraft/world/item/$Rarity"
import {$VertexFormat, $VertexFormat$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat"
import {$MuiScreen, $MuiScreen$Type} from "packages/icyllis/modernui/mc/$MuiScreen"
import {$MuiModApi$OnWindowResizeListener, $MuiModApi$OnWindowResizeListener$Type} from "packages/icyllis/modernui/mc/$MuiModApi$OnWindowResizeListener"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"
import {$MuiModApi$OnScrollListener, $MuiModApi$OnScrollListener$Type} from "packages/icyllis/modernui/mc/$MuiModApi$OnScrollListener"

export class $MuiModApi {
static readonly "MAX_GUI_SCALE": integer
static readonly "EMOJI_SHORTCODE_PATTERN": $Pattern

constructor()

public static "get"(): $MuiModApi
public static "calcGuiScales"(): integer
public static "calcGuiScales"(window: $Window$Type): integer
public static "calcGuiScales"(framebufferWidth: integer, framebufferHeight: integer): integer
public static "offsetByGrapheme"(value: string, cursor: integer, dir: integer): integer
public static "postToUiThread"(r: $Runnable$Type): void
public static "openScreen"(fragment: $Fragment$Type): void
public static "getElapsedTime"(): long
public "createScreen"<T extends ($Screen) & ($MuiScreen)>(arg0: $Fragment$Type, arg1: $ScreenCallback$Type, arg2: $Screen$Type, arg3: charseq): T
public "createScreen"<T extends ($Screen) & ($MuiScreen)>(fragment: $Fragment$Type): T
public "createScreen"<T extends ($Screen) & ($MuiScreen)>(fragment: $Fragment$Type, callback: $ScreenCallback$Type): T
public "createScreen"<T extends ($Screen) & ($MuiScreen)>(fragment: $Fragment$Type, callback: $ScreenCallback$Type, previousScreen: $Screen$Type): T
public "makeShaderInstance"(arg0: $ResourceProvider$Type, arg1: $ResourceLocation$Type, arg2: $VertexFormat$Type): $ShaderInstance
public static "getFrameTime"(): long
public static "getFrameTimeNanos"(): long
public "loadEffect"(arg0: $GameRenderer$Type, arg1: $ResourceLocation$Type): void
public "createMenuScreen"<T extends $AbstractContainerMenu, U extends ($Screen) & ($MenuAccess<(T)>) & ($MuiScreen)>(arg0: $Fragment$Type, arg1: $ScreenCallback$Type, arg2: T, arg3: $Inventory$Type, arg4: $Component$Type): U
public static "dispatchOnScroll"(scrollX: double, scrollY: double): void
public "applyRarityTo"(arg0: $Rarity$Type, arg1: $Style$Type): $Style
public static "dispatchOnScreenChange"(oldScreen: $Screen$Type, newScreen: $Screen$Type): void
public static "removeOnWindowResizeListener"(listener: $MuiModApi$OnWindowResizeListener$Type): void
public static "addOnDebugDumpListener"(listener: $MuiModApi$OnDebugDumpListener$Type): void
public static "addOnWindowResizeListener"(listener: $MuiModApi$OnWindowResizeListener$Type): void
public static "addOnScrollListener"(listener: $MuiModApi$OnScrollListener$Type): void
public static "removeOnScreenChangeListener"(listener: $MuiModApi$OnScreenChangeListener$Type): void
public static "addOnScreenChangeListener"(listener: $MuiModApi$OnScreenChangeListener$Type): void
public static "removeOnScrollListener"(listener: $MuiModApi$OnScrollListener$Type): void
public "isKeyBindingMatches"(arg0: $KeyMapping$Type, arg1: $InputConstants$Key$Type): boolean
public static "dispatchOnDebugDump"(writer: $PrintWriter$Type): void
public static "removeOnDebugDumpListener"(listener: $MuiModApi$OnDebugDumpListener$Type): void
public static "getFormattingByCode"(code: character): $ChatFormatting
public "isGLVersionPromoted"(): boolean
public static "dispatchOnWindowResize"(width: integer, height: integer, guiScale: integer, oldGuiScale: integer): void
get "elapsedTime"(): long
get "frameTime"(): long
get "frameTimeNanos"(): long
get "gLVersionPromoted"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiModApi$Type = ($MuiModApi);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiModApi_ = $MuiModApi$Type;
}}
declare module "packages/icyllis/modernui/view/$Menu" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$SubMenu, $SubMenu$Type} from "packages/icyllis/modernui/view/$SubMenu"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"

export interface $Menu {

 "add"(arg0: charseq): $MenuItem
 "add"(arg0: integer, arg1: integer, arg2: integer, arg3: charseq): $MenuItem
 "clear"(): void
 "size"(): integer
 "close"(): void
 "getItem"(arg0: integer): $MenuItem
 "setQwertyMode"(arg0: boolean): void
 "removeItem"(arg0: integer): void
 "addSubMenu"(arg0: integer, arg1: integer, arg2: integer, arg3: charseq): $SubMenu
 "addSubMenu"(arg0: charseq): $SubMenu
 "setGroupCheckable"(arg0: integer, arg1: boolean, arg2: boolean): void
 "setGroupEnabled"(arg0: integer, arg1: boolean): void
 "hasVisibleItems"(): boolean
 "findItem"(arg0: integer): $MenuItem
 "isShortcutKey"(arg0: integer, arg1: $KeyEvent$Type): boolean
 "setGroupVisible"(arg0: integer, arg1: boolean): void
 "performShortcut"(arg0: integer, arg1: $KeyEvent$Type, arg2: integer): boolean
 "removeGroup"(arg0: integer): void
 "setGroupDividerEnabled"(arg0: boolean): void
 "performIdentifierAction"(arg0: integer, arg1: integer): boolean
}

export namespace $Menu {
const USER_MASK: integer
const USER_SHIFT: integer
const CATEGORY_MASK: integer
const CATEGORY_SHIFT: integer
const SUPPORTED_MODIFIERS_MASK: integer
const NONE: integer
const FIRST: integer
const CATEGORY_CONTAINER: integer
const CATEGORY_SYSTEM: integer
const CATEGORY_SECONDARY: integer
const CATEGORY_ALTERNATIVE: integer
const FLAG_PERFORM_NO_CLOSE: integer
const FLAG_ALWAYS_PERFORM_CLOSE: integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Menu$Type = ($Menu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Menu_ = $Menu$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Registration" {
import {$RegisterEvent, $RegisterEvent$Type} from "packages/net/minecraftforge/registries/$RegisterEvent"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"

export class $Registration {


public static "register"(event: $RegisterEvent$Type): void
public static "setupCommon"(event: $FMLCommonSetupEvent$Type): void
set "upCommon"(value: $FMLCommonSetupEvent$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Registration$Type = ($Registration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Registration_ = $Registration$Type;
}}
declare module "packages/icyllis/modernui/text/$TextPaint" {
import {$Typeface, $Typeface$Type} from "packages/icyllis/modernui/text/$Typeface"
import {$FontPaint, $FontPaint$Type} from "packages/icyllis/modernui/graphics/text/$FontPaint"
import {$Paint, $Paint$Type} from "packages/icyllis/modernui/graphics/$Paint"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $TextPaint extends $Paint {
static readonly "UNDERLINE_FLAG": integer
static readonly "STRIKETHROUGH_FLAG": integer
 "bgColor": integer
 "baselineShift": integer
 "linkColor": integer
 "density": float
 "underlineColor": integer
static readonly "FILL": integer
static readonly "STROKE": integer
static readonly "FILL_AND_STROKE": integer
static readonly "CAP_BUTT": integer
static readonly "CAP_ROUND": integer
static readonly "CAP_SQUARE": integer
static readonly "JOIN_MITER": integer
static readonly "JOIN_ROUND": integer
static readonly "JOIN_BEVEL": integer
static readonly "NORMAL": integer
static readonly "BOLD": integer
static readonly "ITALIC": integer
static readonly "BOLD_ITALIC": integer
static readonly "FONT_STYLE_MASK": integer
static readonly "LINEAR_TEXT_FLAG": integer
static readonly "STROKE_AND_FILL": integer
static readonly "ALIGN_CENTER": integer
static readonly "ALIGN_INSIDE": integer
static readonly "ALIGN_OUTSIDE": integer
static readonly "FILTER_MODE_NEAREST": integer
static readonly "FILTER_MODE_LINEAR": integer
static readonly "MIPMAP_MODE_NONE": integer
static readonly "MIPMAP_MODE_NEAREST": integer
static readonly "MIPMAP_MODE_LINEAR": integer

constructor()
constructor(paint: $TextPaint$Type)

public "set"(paint: $TextPaint$Type): void
public "getTextRunCursor"(text: charseq, contextStart: integer, contextEnd: integer, offset: integer, op: integer): integer
public "getTextRunCursor"(text: (character)[], contextStart: integer, contextLength: integer, offset: integer, op: integer): integer
public static "obtain"(): $TextPaint
public "recycle"(): void
public "getFontMetricsInt"(): $FontMetricsInt
public "getFontMetricsInt"(fm: $FontMetricsInt$Type): integer
public "setUnderline"(underline: boolean): void
public "setStrikethrough"(strikethrough: boolean): void
public "getTextLocale"(): $Locale
public "isUnderline"(): boolean
public "getUnderlineOffset"(fm: $FontMetricsInt$Type): float
public "isStrikethrough"(): boolean
public "setTypeface"(typeface: $Typeface$Type): void
public "getTypeface"(): $Typeface
public "setTextLocale"(locale: $Locale$Type): void
public "getInternalPaint"(): $FontPaint
public "getStrikethroughOffset"(fm: $FontMetricsInt$Type): float
public "getStrikethroughThickness"(fm: $FontMetricsInt$Type): float
public "equalsForTextMeasurement"(paint: $TextPaint$Type): boolean
public "getUnderlineThickness"(fm: $FontMetricsInt$Type): float
public "createInternalPaint"(): $FontPaint
get "fontMetricsInt"(): $FontMetricsInt
set "underline"(value: boolean)
set "strikethrough"(value: boolean)
get "textLocale"(): $Locale
get "underline"(): boolean
get "strikethrough"(): boolean
set "typeface"(value: $Typeface$Type)
get "typeface"(): $Typeface
set "textLocale"(value: $Locale$Type)
get "internalPaint"(): $FontPaint
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextPaint$Type = ($TextPaint);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextPaint_ = $TextPaint$Type;
}}
declare module "packages/icyllis/modernui/util/$TypedValue" {
import {$DisplayMetrics, $DisplayMetrics$Type} from "packages/icyllis/modernui/util/$DisplayMetrics"

export class $TypedValue {
static readonly "TYPE_NULL": integer
static readonly "TYPE_REFERENCE": integer
static readonly "TYPE_ATTRIBUTE": integer
static readonly "TYPE_STRING": integer
static readonly "TYPE_FLOAT": integer
static readonly "TYPE_DIMENSION": integer
static readonly "TYPE_FRACTION": integer
static readonly "COMPLEX_UNIT_SHIFT": integer
static readonly "COMPLEX_UNIT_MASK": integer
static readonly "COMPLEX_UNIT_PX": integer
static readonly "COMPLEX_UNIT_DP": integer
static readonly "COMPLEX_UNIT_SP": integer
static readonly "COMPLEX_UNIT_PT": integer
static readonly "COMPLEX_UNIT_IN": integer
static readonly "COMPLEX_UNIT_MM": integer
static readonly "COMPLEX_UNIT_FRACTION": integer
static readonly "COMPLEX_UNIT_FRACTION_PARENT": integer
static readonly "COMPLEX_RADIX_SHIFT": integer
static readonly "COMPLEX_RADIX_MASK": integer
static readonly "COMPLEX_RADIX_23p0": integer
static readonly "COMPLEX_RADIX_16p7": integer
static readonly "COMPLEX_RADIX_8p15": integer
static readonly "COMPLEX_RADIX_0p23": integer
static readonly "COMPLEX_MANTISSA_SHIFT": integer
static readonly "COMPLEX_MANTISSA_MASK": integer

constructor()

public static "complexToFraction"(data: integer, base: float, pbase: float): float
public static "applyDimension"(unit: integer, value: float, metrics: $DisplayMetrics$Type): float
public static "complexToFloat"(complex: integer): float
public static "complexToDimension"(data: integer, metrics: $DisplayMetrics$Type): float
public static "intToComplex"(value: integer): integer
public static "floatToComplex"(value: float): integer
public static "complexToDimensionPixelSize"(data: integer, metrics: $DisplayMetrics$Type): integer
public static "complexToDimensionPixelOffset"(data: integer, metrics: $DisplayMetrics$Type): integer
public static "createComplexDimension"(value: integer, units: integer): integer
public static "createComplexDimension"(value: float, units: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TypedValue$Type = ($TypedValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TypedValue_ = $TypedValue$Type;
}}
declare module "packages/icyllis/modernui/graphics/$RenderNode" {
import {$RenderProperties, $RenderProperties$Type} from "packages/icyllis/modernui/graphics/$RenderProperties"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"

export class $RenderNode extends $RenderProperties {

constructor()

public "beginRecording"(width: integer, height: integer): $Canvas
public "endRecording"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderNode$Type = ($RenderNode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderNode_ = $RenderNode$Type;
}}
declare module "packages/icyllis/modernui/core/$UndoManager" {
import {$UndoOwner, $UndoOwner$Type} from "packages/icyllis/modernui/core/$UndoOwner"
import {$UndoOperation, $UndoOperation$Type} from "packages/icyllis/modernui/core/$UndoOperation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ClassLoader, $ClassLoader$Type} from "packages/java/lang/$ClassLoader"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"

export class $UndoManager {
static readonly "MERGE_MODE_NONE": integer
static readonly "MERGE_MODE_UNIQUE": integer
static readonly "MERGE_MODE_ANY": integer

constructor()

public "getOwner"(tag: string, data: any): $UndoOwner
public "forgetUndos"(owners: ($UndoOwner$Type)[], count: integer): integer
public "forgetRedos"(owners: ($UndoOwner$Type)[], count: integer): integer
public "saveInstanceState"(p: $Parcel$Type): void
public "setHistorySize"(size: integer): void
public "getRedoLabel"(owners: ($UndoOwner$Type)[]): charseq
public "isInUpdate"(): boolean
public "getHistorySize"(): integer
public "suggestUndoLabel"(label: charseq): void
public "hasOperation"(owner: $UndoOwner$Type): boolean
public "getUndoLabel"(owners: ($UndoOwner$Type)[]): charseq
public "setUndoLabel"(label: charseq): void
public "uncommitState"(commitId: integer, owner: $UndoOwner$Type): boolean
public "redo"(owners: ($UndoOwner$Type)[], count: integer): integer
public "undo"(owners: ($UndoOwner$Type)[], count: integer): integer
public "commitState"(owner: $UndoOwner$Type): integer
public "endUpdate"(): void
public "getLastOperation"(mergeMode: integer): $UndoOperation<(any)>
public "getLastOperation"(owner: $UndoOwner$Type, mergeMode: integer): $UndoOperation<(any)>
public "getLastOperation"<T extends $UndoOperation<(any)>>(clazz: $Class$Type<(T)>, owner: $UndoOwner$Type, mergeMode: integer): T
public "countRedos"(owners: ($UndoOwner$Type)[]): integer
public "addOperation"(op: $UndoOperation$Type<(any)>, mergeMode: integer): void
public "countUndos"(owners: ($UndoOwner$Type)[]): integer
public "beginUpdate"(label: charseq): void
public "isInUndo"(): boolean
public "restoreInstanceState"(p: $Parcel$Type, loader: $ClassLoader$Type): void
public "getUpdateNestingLevel"(): integer
set "historySize"(value: integer)
get "inUpdate"(): boolean
get "historySize"(): integer
set "undoLabel"(value: charseq)
get "inUndo"(): boolean
get "updateNestingLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UndoManager$Type = ($UndoManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UndoManager_ = $UndoManager$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Canvas" {
import {$RectF, $RectF$Type} from "packages/icyllis/modernui/graphics/$RectF"
import {$ShortBuffer, $ShortBuffer$Type} from "packages/java/nio/$ShortBuffer"
import {$Paint, $Paint$Type} from "packages/icyllis/modernui/graphics/$Paint"
import {$Image, $Image$Type} from "packages/icyllis/modernui/graphics/$Image"
import {$ShapedText, $ShapedText$Type} from "packages/icyllis/modernui/graphics/text/$ShapedText"
import {$Matrix, $Matrix$Type} from "packages/icyllis/modernui/graphics/$Matrix"
import {$Matrix4, $Matrix4$Type} from "packages/icyllis/arc3d/core/$Matrix4"
import {$FloatBuffer, $FloatBuffer$Type} from "packages/java/nio/$FloatBuffer"
import {$Blender, $Blender$Type} from "packages/icyllis/arc3d/core/$Blender"
import {$PointF, $PointF$Type} from "packages/icyllis/modernui/graphics/$PointF"
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$CustomDrawable, $CustomDrawable$Type} from "packages/icyllis/modernui/graphics/$CustomDrawable"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$IntBuffer, $IntBuffer$Type} from "packages/java/nio/$IntBuffer"
import {$Canvas$VertexMode, $Canvas$VertexMode$Type} from "packages/icyllis/modernui/graphics/$Canvas$VertexMode"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"

export class $Canvas {
static readonly "MARKER": $Marker


public "clear"(color: integer): void
public "scale"(sx: float, sy: float, px: float, py: float): void
public "scale"(sx: float, sy: float): void
public "concat"(matrix: $Matrix4$Type): void
public "concat"(matrix: $Matrix$Type): void
public "save"(): integer
public "rotate"(degrees: float, px: float, py: float): void
public "rotate"(degrees: float): void
public "drawRect"(r: $RectF$Type, paint: $Paint$Type): void
public "drawRect"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: $Paint$Type): void
public "drawRect"(r: $Rect$Type, paint: $Paint$Type): void
public "translate"(dx: float, dy: float): void
public "drawMesh"(mode: $Canvas$VertexMode$Type, pos: $FloatBuffer$Type, color: $IntBuffer$Type, tex: $FloatBuffer$Type, indices: $ShortBuffer$Type, blender: $Blender$Type, paint: $Paint$Type): void
public "drawImage"(arg0: $Image$Type, arg1: float, arg2: float, arg3: $Paint$Type): void
public "drawImage"(image: $Image$Type, src: $Rect$Type, dst: $Rect$Type, paint: $Paint$Type): void
public "drawImage"(arg0: $Image$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: $Paint$Type): void
public "drawImage"(image: $Image$Type, src: $Rect$Type, dst: $RectF$Type, paint: $Paint$Type): void
public "restore"(): void
public "drawLine"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: $Paint$Type): void
public "drawLine"(p0: $PointF$Type, p1: $PointF$Type, thickness: float, paint: $Paint$Type): void
public "drawLine"(x0: float, y0: float, x1: float, y1: float, paint: $Paint$Type): void
public "drawLine"(p0: $PointF$Type, p1: $PointF$Type, paint: $Paint$Type): void
public "drawRoundRect"(left: float, top: float, right: float, bottom: float, radius: float, paint: $Paint$Type): void
public "drawRoundRect"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: integer, arg6: $Paint$Type): void
public "drawRoundRect"(rect: $RectF$Type, radius: float, paint: $Paint$Type): void
public "drawRoundRect"(rect: $RectF$Type, radius: float, sides: integer, paint: $Paint$Type): void
public "drawArc"(center: $PointF$Type, radius: float, startAngle: float, sweepAngle: float, paint: $Paint$Type): void
public "drawArc"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: $Paint$Type): void
public "clipRect"(arg0: float, arg1: float, arg2: float, arg3: float): boolean
public "clipRect"(rect: $RectF$Type): boolean
public "clipRect"(rect: $Rect$Type): boolean
public "quickReject"(arg0: float, arg1: float, arg2: float, arg3: float): boolean
public "quickReject"(rect: $RectF$Type): boolean
public "saveLayer"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: integer): integer
public "saveLayer"(bounds: $RectF$Type, alpha: integer): integer
/**
 * 
 * @deprecated
 */
public "getMatrix"(): $Matrix4
public "restoreToCount"(arg0: integer): void
public "drawPaint"(paint: $Paint$Type): void
public "drawPoint"(x: float, y: float, paint: $Paint$Type): void
public "drawPoint"(p: $PointF$Type, paint: $Paint$Type): void
public "drawPoints"(pts: (float)[], offset: integer, count: integer, paint: $Paint$Type): void
public "drawPoints"(pts: (float)[], paint: $Paint$Type): void
public "getSaveCount"(): integer
public "drawColor"(color: integer): void
public "drawColor"(color: integer, mode: $BlendMode$Type): void
public "drawGlyphs"(arg0: (integer)[], arg1: integer, arg2: (float)[], arg3: integer, arg4: integer, arg5: $Font$Type, arg6: float, arg7: float, arg8: $Paint$Type): void
/**
 * 
 * @deprecated
 */
public "drawRoundLines"(pts: (float)[], offset: integer, count: integer, strip: boolean, paint: $Paint$Type): void
public "drawRoundImage"(arg0: $Image$Type, arg1: float, arg2: float, arg3: float, arg4: $Paint$Type): void
public "drawShapedText"(text: $ShapedText$Type, glyphStart: integer, glyphCount: integer, x: float, y: float, paint: $Paint$Type): void
public "drawShapedText"(text: $ShapedText$Type, x: float, y: float, paint: $Paint$Type): void
public "drawPie"(center: $PointF$Type, radius: float, startAngle: float, sweepAngle: float, paint: $Paint$Type): void
public "drawPie"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: $Paint$Type): void
public "drawCircle"(arg0: float, arg1: float, arg2: float, arg3: $Paint$Type): void
public "drawCircle"(center: $PointF$Type, radius: float, paint: $Paint$Type): void
public "drawSimpleText"(text: (character)[], font: $Font$Type, x: float, y: float, paint: $Paint$Type): void
public "drawSimpleText"(text: string, font: $Font$Type, x: float, y: float, paint: $Paint$Type): void
public "drawBezier"(p0: $PointF$Type, p1: $PointF$Type, p2: $PointF$Type, paint: $Paint$Type): void
public "drawBezier"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: $Paint$Type): void
public "drawArcPath"(cx: float, cy: float, radius: float, startAngle: float, sweepAngle: float, paint: $Paint$Type): void
public "drawRectGradient"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: $Paint$Type): void
public "drawLinePath"(x0: float, y0: float, x1: float, y1: float, paint: $Paint$Type): void
public "drawLineListMesh"(pos: $FloatBuffer$Type, color: $IntBuffer$Type, paint: $Paint$Type): void
public "drawPointListMesh"(pos: $FloatBuffer$Type, color: $IntBuffer$Type, paint: $Paint$Type): void
public "drawCustomDrawable"(drawable: $CustomDrawable$Type): void
public "drawCustomDrawable"(drawable: $CustomDrawable$Type, matrix: $Matrix4$Type): void
public "isClipRect"(): boolean
public "isClipEmpty"(): boolean
public "skew"(sx: float, sy: float): void
public "skew"(sx: float, sy: float, px: float, py: float): void
public "shear"(sx: float, sy: float): void
public "shear"(sx: float, sy: float, px: float, py: float): void
public "drawRoundRectGradient"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: float, arg9: $Paint$Type): void
public "drawTriangleListMesh"(pos: $FloatBuffer$Type, color: $IntBuffer$Type, paint: $Paint$Type): void
get "matrix"(): $Matrix4
get "saveCount"(): integer
get "clipEmpty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Canvas$Type = ($Canvas);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Canvas_ = $Canvas$Type;
}}
declare module "packages/icyllis/modernui/mc/$MuiPlatform" {
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"

export class $MuiPlatform {

constructor()

public static "get"(): $MuiPlatform
public "isClient"(): boolean
public "getBootstrapPath"(): $Path
get "client"(): boolean
get "bootstrapPath"(): $Path
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiPlatform$Type = ($MuiPlatform);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiPlatform_ = $MuiPlatform$Type;
}}
declare module "packages/icyllis/modernui/view/$TooltipPopup" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export class $TooltipPopup {

constructor(context: $Context$Type)

public "hide"(): void
public "getContentView"(): $View
public "isShowing"(): boolean
public "show"(anchorView: $View$Type, anchorX: integer, anchorY: integer, fromTouch: boolean, tooltipText: charseq): void
get "contentView"(): $View
get "showing"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipPopup$Type = ($TooltipPopup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipPopup_ = $TooltipPopup$Type;
}}
declare module "packages/icyllis/modernui/text/method/$TextKeyListener" {
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$Editable, $Editable$Type} from "packages/icyllis/modernui/text/$Editable"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"

export class $TextKeyListener {


public "forwardDelete"(view: $TextView$Type, content: $Editable$Type, event: $KeyEvent$Type): boolean
public static "getInstance"(): $TextKeyListener
public static "isMetaTracker"(what: any): boolean
public static "resetMetaState"(text: $Spannable$Type): void
public "onKeyDown"(view: $TextView$Type, content: $Editable$Type, keyCode: integer, event: $KeyEvent$Type): boolean
public "onKeyUp"(view: $TextView$Type, content: $Editable$Type, keyCode: integer, event: $KeyEvent$Type): boolean
public "backspace"(view: $TextView$Type, content: $Editable$Type, event: $KeyEvent$Type): boolean
public static "getMetaState"(text: charseq, meta: integer): integer
get "instance"(): $TextKeyListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextKeyListener$Type = ($TextKeyListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextKeyListener_ = $TextKeyListener$Type;
}}
declare module "packages/icyllis/modernui/resources/$ResourceParser" {
import {$XMLStreamReader, $XMLStreamReader$Type} from "packages/javax/xml/stream/$XMLStreamReader"
import {$ResourceParser$ParsedResource, $ResourceParser$ParsedResource$Type} from "packages/icyllis/modernui/resources/$ResourceParser$ParsedResource"

export class $ResourceParser {

constructor()

public "Attr"(reader: $XMLStreamReader$Type, out: $ResourceParser$ParsedResource$Type): boolean
public "Attr0"(reader: $XMLStreamReader$Type, out_resource: $ResourceParser$ParsedResource$Type, weak: boolean): boolean
public "ParseResources"(reader: $XMLStreamReader$Type): boolean
public static "FormatAttribute"(s: string): integer
public "DeclareStyleable"(reader: $XMLStreamReader$Type, out_resource: $ResourceParser$ParsedResource$Type): boolean
public static "main"(args: (string)[]): void
public "Parse"(reader: $XMLStreamReader$Type): boolean
public static "FormatType"(s: string): integer
public static "FormatTypeNoEnumOrFlags"(s: string): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceParser$Type = ($ResourceParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceParser_ = $ResourceParser$Type;
}}
declare module "packages/icyllis/modernui/util/$TailPadding" {
import {$L1Padding, $L1Padding$Type} from "packages/icyllis/modernui/util/$L1Padding"

export class $TailPadding<E> extends $L1Padding<(E)> {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TailPadding$Type<E> = ($TailPadding<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TailPadding_<E> = $TailPadding$Type<(E)>;
}}
declare module "packages/icyllis/modernui/widget/$BaseAdapter" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ListAdapter, $ListAdapter$Type} from "packages/icyllis/modernui/widget/$ListAdapter"
import {$SpinnerAdapter, $SpinnerAdapter$Type} from "packages/icyllis/modernui/widget/$SpinnerAdapter"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $BaseAdapter implements $ListAdapter, $SpinnerAdapter {

constructor()

public "isEmpty"(): boolean
public "isEnabled"(position: integer): boolean
public "getDropDownView"(position: integer, convertView: $View$Type, parent: $ViewGroup$Type): $View
public "registerDataSetObserver"(observer: $DataSetObserver$Type): void
public "unregisterDataSetObserver"(observer: $DataSetObserver$Type): void
public "notifyDataSetInvalidated"(): void
public "notifyDataSetChanged"(): void
public "hasStableIds"(): boolean
public "getItemViewType"(position: integer): integer
public "getViewTypeCount"(): integer
public "areAllItemsEnabled"(): boolean
public "getCount"(): integer
public "getItem"(arg0: integer): any
public "getItemId"(arg0: integer): long
public "getView"(arg0: integer, arg1: $View$Type, arg2: $ViewGroup$Type): $View
get "empty"(): boolean
get "viewTypeCount"(): integer
get "count"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseAdapter$Type = ($BaseAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseAdapter_ = $BaseAdapter$Type;
}}
declare module "packages/icyllis/modernui/text/method/$WordIterator" {
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $WordIterator {
static readonly "GC_P_MASK": integer

constructor()
constructor(locale: $Locale$Type)

public static "isMidWordPunctuation"(locale: $Locale$Type, codePoint: integer): boolean
public "getPunctuationBeginning"(offset: integer): integer
public "nextBoundary"(offset: integer): integer
public "isBoundary"(offset: integer): boolean
public "prevBoundary"(offset: integer): integer
public "preceding"(offset: integer): integer
public "following"(offset: integer): integer
public "setCharSequence"(charSequence: charseq, start: integer, end: integer): void
public static "isPunctuation"(cp: integer): boolean
public "isOnPunctuation"(offset: integer): boolean
public "getPunctuationEnd"(offset: integer): integer
public "isAfterPunctuation"(offset: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WordIterator$Type = ($WordIterator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WordIterator_ = $WordIterator$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/$ShaderShard$Type" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ShaderShard$Type extends $Enum<($ShaderShard$Type)> {
static readonly "VERTEX": $ShaderShard$Type
static readonly "FRAGMENT": $ShaderShard$Type
static readonly "GEOMETRY": $ShaderShard$Type
static readonly "TESS_CONTROL": $ShaderShard$Type
static readonly "TESS_EVALUATION": $ShaderShard$Type
static readonly "COMPUTE": $ShaderShard$Type


public static "values"(): ($ShaderShard$Type)[]
public static "valueOf"(name: string): $ShaderShard$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShaderShard$Type$Type = (("compute") | ("fragment") | ("tess_control") | ("vertex") | ("geometry") | ("tess_evaluation")) | ($ShaderShard$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShaderShard$Type_ = $ShaderShard$Type$Type;
}}
declare module "packages/icyllis/modernui/markdown/$TextSetter" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$TextView$BufferType, $TextView$BufferType$Type} from "packages/icyllis/modernui/widget/$TextView$BufferType"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export interface $TextSetter {

 "setText"(arg0: $TextView$Type, arg1: $Spanned$Type, arg2: $TextView$BufferType$Type, arg3: $Runnable$Type): void

(arg0: $TextView$Type, arg1: $Spanned$Type, arg2: $TextView$BufferType$Type, arg3: $Runnable$Type): void
}

export namespace $TextSetter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextSetter$Type = ($TextSetter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextSetter_ = $TextSetter$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Config" {
import {$Config$Text, $Config$Text$Type} from "packages/icyllis/modernui/mc/forge/$Config$Text"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$Config$Client, $Config$Client$Type} from "packages/icyllis/modernui/mc/forge/$Config$Client"
import {$ModConfig, $ModConfig$Type} from "packages/net/minecraftforge/fml/config/$ModConfig"
import {$Config$Common, $Config$Common$Type} from "packages/icyllis/modernui/mc/forge/$Config$Common"

export class $Config {
static "CLIENT": $Config$Client
static "COMMON": $Config$Common
static "TEXT": $Config$Text
static "TEXT_SPEC": $ForgeConfigSpec

constructor()

public static "initCommonConfig"(registerConfig: $Consumer$Type<($ForgeConfigSpec$Type)>): void
public static "reloadCommon"(config: $ModConfig$Type): void
public static "initTextConfig"(registerConfig: $Consumer$Type<($ForgeConfigSpec$Type)>): void
public static "reloadAnyClient"(config: $ModConfig$Type): void
public static "initClientConfig"(registerConfig: $Consumer$Type<($ForgeConfigSpec$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Type = ($Config);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config_ = $Config$Type;
}}
declare module "packages/icyllis/modernui/view/$MenuItem$OnActionExpandListener" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"

export interface $MenuItem$OnActionExpandListener {

 "onMenuItemActionExpand"(arg0: $MenuItem$Type): boolean
 "onMenuItemActionCollapse"(arg0: $MenuItem$Type): boolean
}

export namespace $MenuItem$OnActionExpandListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuItem$OnActionExpandListener$Type = ($MenuItem$OnActionExpandListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuItem$OnActionExpandListener_ = $MenuItem$OnActionExpandListener$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentResultOwner" {
import {$FragmentResultListener, $FragmentResultListener$Type} from "packages/icyllis/modernui/fragment/$FragmentResultListener"
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export interface $FragmentResultOwner {

 "clearFragmentResult"(arg0: string): void
 "clearFragmentResultListener"(arg0: string): void
 "setFragmentResultListener"(arg0: string, arg1: $LifecycleOwner$Type, arg2: $FragmentResultListener$Type): void
 "setFragmentResult"(arg0: string, arg1: $DataSet$Type): void
}

export namespace $FragmentResultOwner {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentResultOwner$Type = ($FragmentResultOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentResultOwner_ = $FragmentResultOwner$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$GLVertexAttrib" {
import {$GLVertexAttrib$CpuType, $GLVertexAttrib$CpuType$Type} from "packages/icyllis/modernui/mc/testforge/trash/$GLVertexAttrib$CpuType"
import {$GLVertexAttrib$GpuType, $GLVertexAttrib$GpuType$Type} from "packages/icyllis/modernui/mc/testforge/trash/$GLVertexAttrib$GpuType"

export class $GLVertexAttrib {

constructor(binding: integer, cpuType: $GLVertexAttrib$CpuType$Type, gpuType: $GLVertexAttrib$GpuType$Type, normalized: boolean)

public "equals"(o: any): boolean
public "hashCode"(): integer
public "setFormat"(array: integer, location: integer, offset: integer): integer
public "getTotalSize"(): integer
public "getLocationSize"(): integer
public "getStep"(): integer
public "getBinding"(): integer
get "totalSize"(): integer
get "locationSize"(): integer
get "step"(): integer
get "binding"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLVertexAttrib$Type = ($GLVertexAttrib);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLVertexAttrib_ = $GLVertexAttrib$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$EmojiFont" {
import {$FontPaint, $FontPaint$Type} from "packages/icyllis/modernui/graphics/text/$FontPaint"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IntSet, $IntSet$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntSet"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$IntArrayList, $IntArrayList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntArrayList"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"
import {$Object2IntMap, $Object2IntMap$Type} from "packages/it/unimi/dsi/fastutil/objects/$Object2IntMap"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"
import {$FloatArrayList, $FloatArrayList$Type} from "packages/it/unimi/dsi/fastutil/floats/$FloatArrayList"
import {$Strike, $Strike$Type} from "packages/icyllis/arc3d/core/$Strike"

export class $EmojiFont implements $Font {

constructor(name: string, coverage: $IntSet$Type, size: integer, ascent: integer, spacing: integer, base: integer, map: $Object2IntMap$Type<(charseq)>, files: $List$Type<(string)>)

public "getFileName"(glyphId: integer): string
public "getFullName"(locale: $Locale$Type): string
public "getStyle"(): integer
public "getFamilyName"(locale: $Locale$Type): string
public "getMetrics"(paint: $FontPaint$Type, fm: $FontMetricsInt$Type): integer
public "hasGlyph"(ch: integer, vs: integer): boolean
public "doSimpleLayout"(buf: (character)[], start: integer, limit: integer, paint: $FontPaint$Type, glyphs: $IntArrayList$Type, positions: $FloatArrayList$Type, x: float, y: float): float
public "calcGlyphScore"(buf: (character)[], start: integer, limit: integer): integer
public "findOrCreateStrike"(paint: $FontPaint$Type): $Strike
public "doComplexLayout"(buf: (character)[], contextStart: integer, contextLimit: integer, layoutStart: integer, layoutLimit: integer, isRtl: boolean, paint: $FontPaint$Type, glyphs: $IntArrayList$Type, positions: $FloatArrayList$Type, advances: (float)[], advanceOffset: integer, bounds: $Rect$Type, x: float, y: float): float
public "getFullName"(): string
public "getFamilyName"(): string
get "style"(): integer
get "fullName"(): string
get "familyName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmojiFont$Type = ($EmojiFont);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmojiFont_ = $EmojiFont$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/uniform/$UniformVec4" {
import {$Vector4f, $Vector4f$Type} from "packages/org/joml/$Vector4f"
import {$ShaderUniform, $ShaderUniform$Type} from "packages/icyllis/modernui/mc/testforge/shader/$ShaderUniform"

/**
 * 
 * @deprecated
 */
export class $UniformVec4 extends $ShaderUniform<($Vector4f)> {

constructor(location: integer)

public "load"(data: $Vector4f$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UniformVec4$Type = ($UniformVec4);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UniformVec4_ = $UniformVec4$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$ViewTreeViewModelStoreOwner" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewModelStoreOwner, $ViewModelStoreOwner$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelStoreOwner"

export class $ViewTreeViewModelStoreOwner {


public static "get"(view: $View$Type): $ViewModelStoreOwner
public static "set"(view: $View$Type, viewModelStoreOwner: $ViewModelStoreOwner$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewTreeViewModelStoreOwner$Type = ($ViewTreeViewModelStoreOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewTreeViewModelStoreOwner_ = $ViewTreeViewModelStoreOwner$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$CircleProgram$Fill" {
import {$CircleProgram, $CircleProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$CircleProgram"

export class $CircleProgram$Fill extends $CircleProgram {


public "setRadius"(radius: float, feather: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CircleProgram$Fill$Type = ($CircleProgram$Fill);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CircleProgram$Fill_ = $CircleProgram$Fill$Type;
}}
declare module "packages/icyllis/modernui/text/method/$ScrollingMovementMethod" {
import {$MovementMethod, $MovementMethod$Type} from "packages/icyllis/modernui/text/method/$MovementMethod"
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$BaseMovementMethod, $BaseMovementMethod$Type} from "packages/icyllis/modernui/text/method/$BaseMovementMethod"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export class $ScrollingMovementMethod extends $BaseMovementMethod {

constructor()

public static "getInstance"(): $MovementMethod
public "onTakeFocus"(widget: $TextView$Type, text: $Spannable$Type, dir: integer): void
public "onTouchEvent"(widget: $TextView$Type, buffer: $Spannable$Type, event: $MotionEvent$Type): boolean
get "instance"(): $MovementMethod
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollingMovementMethod$Type = ($ScrollingMovementMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollingMovementMethod_ = $ScrollingMovementMethod$Type;
}}
declare module "packages/icyllis/modernui/markdown/$MarkdownConfig$Builder" {
import {$MarkdownTheme, $MarkdownTheme$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$SpanFactory, $SpanFactory$Type} from "packages/icyllis/modernui/markdown/$SpanFactory"
import {$Node, $Node$Type} from "packages/com/vladsch/flexmark/util/ast/$Node"
import {$BlockHandler, $BlockHandler$Type} from "packages/icyllis/modernui/markdown/$BlockHandler"
import {$NodeVisitor, $NodeVisitor$Type} from "packages/icyllis/modernui/markdown/$NodeVisitor"
import {$MarkdownConfig, $MarkdownConfig$Type} from "packages/icyllis/modernui/markdown/$MarkdownConfig"

export class $MarkdownConfig$Builder {


public "build"(theme: $MarkdownTheme$Type): $MarkdownConfig
public "appendSpanFactory"<N extends $Node>(clazz: $Class$Type<(any)>, factory: $SpanFactory$Type<(any)>): $MarkdownConfig$Builder
public "addVisitor"<N extends $Node>(clazz: $Class$Type<(any)>, visitor: $NodeVisitor$Type<(any)>): $MarkdownConfig$Builder
public "getSpanFactory"<N extends $Node>(node: $Class$Type<(N)>): $SpanFactory<(N)>
public "setSpanFactory"<N extends $Node>(clazz: $Class$Type<(any)>, factory: $SpanFactory$Type<(any)>): $MarkdownConfig$Builder
public "prependSpanFactory"<N extends $Node>(clazz: $Class$Type<(any)>, factory: $SpanFactory$Type<(any)>): $MarkdownConfig$Builder
public "setBlockHandler"(blockHandler: $BlockHandler$Type): $MarkdownConfig$Builder
set "blockHandler"(value: $BlockHandler$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownConfig$Builder$Type = ($MarkdownConfig$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownConfig$Builder_ = $MarkdownConfig$Builder$Type;
}}
declare module "packages/icyllis/modernui/mc/ui/$FourColorPicker" {
import {$RelativeLayout, $RelativeLayout$Type} from "packages/icyllis/modernui/widget/$RelativeLayout"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $FourColorPicker extends $RelativeLayout {
static readonly "TRUE": integer
static readonly "LEFT_OF": integer
static readonly "RIGHT_OF": integer
static readonly "ABOVE": integer
static readonly "BELOW": integer
static readonly "ALIGN_BASELINE": integer
static readonly "ALIGN_LEFT": integer
static readonly "ALIGN_TOP": integer
static readonly "ALIGN_RIGHT": integer
static readonly "ALIGN_BOTTOM": integer
static readonly "ALIGN_PARENT_LEFT": integer
static readonly "ALIGN_PARENT_TOP": integer
static readonly "ALIGN_PARENT_RIGHT": integer
static readonly "ALIGN_PARENT_BOTTOM": integer
static readonly "CENTER_IN_PARENT": integer
static readonly "CENTER_HORIZONTAL": integer
static readonly "CENTER_VERTICAL": integer
static readonly "START_OF": integer
static readonly "END_OF": integer
static readonly "ALIGN_START": integer
static readonly "ALIGN_END": integer
static readonly "ALIGN_PARENT_START": integer
static readonly "ALIGN_PARENT_END": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type, getter: $Supplier$Type<($List$Type<(any)>)>, setter: $Consumer$Type<($List$Type<(any)>)>, saveFn: $Runnable$Type)

public "setThicknessFactor"(thicknessFactor: float): void
public "setColors"(colors: (string)[]): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "thicknessFactor"(value: float)
set "colors"(value: (string)[])
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FourColorPicker$Type = ($FourColorPicker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FourColorPicker_ = $FourColorPicker$Type;
}}
declare module "packages/icyllis/modernui/text/style/$ForegroundColorSpan" {
import {$CharacterStyle, $CharacterStyle$Type} from "packages/icyllis/modernui/text/style/$CharacterStyle"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$UpdateAppearance, $UpdateAppearance$Type} from "packages/icyllis/modernui/text/style/$UpdateAppearance"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $ForegroundColorSpan extends $CharacterStyle implements $UpdateAppearance, $ParcelableSpan {

constructor(color: integer)
constructor(src: $Parcel$Type)

public "getForegroundColor"(): integer
public "updateDrawState"(paint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
get "foregroundColor"(): integer
get "spanTypeId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForegroundColorSpan$Type = ($ForegroundColorSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForegroundColorSpan_ = $ForegroundColorSpan$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$SubMenuBuilder" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"
import {$SubMenu, $SubMenu$Type} from "packages/icyllis/modernui/view/$SubMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$MenuBuilder$Callback, $MenuBuilder$Callback$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder$Callback"
import {$MenuItemImpl, $MenuItemImpl$Type} from "packages/icyllis/modernui/view/menu/$MenuItemImpl"
import {$Menu, $Menu$Type} from "packages/icyllis/modernui/view/$Menu"

export class $SubMenuBuilder extends $MenuBuilder implements $SubMenu {

constructor(context: $Context$Type, parentMenu: $MenuBuilder$Type, item: $MenuItemImpl$Type)

public "getItem"(): $MenuItem
public "setQwertyMode"(isQwerty: boolean): void
public "isShortcutsVisible"(): boolean
public "isQwertyMode"(): boolean
public "getRootMenu"(): $MenuBuilder
public "setHeaderView"(view: $View$Type): $SubMenu
public "setHeaderIcon"(icon: $Drawable$Type): $SubMenu
public "setHeaderTitle"(title: charseq): $SubMenu
public "setIcon"(icon: $Drawable$Type): $SubMenu
public "setCallback"(callback: $MenuBuilder$Callback$Type): void
public "getParentMenu"(): $Menu
public "expandItemActionView"(item: $MenuItemImpl$Type): boolean
public "collapseItemActionView"(item: $MenuItemImpl$Type): boolean
public "setShortcutsVisible"(shortcutsVisible: boolean): void
public "setGroupDividerEnabled"(groupDividerEnabled: boolean): void
public "isGroupDividerEnabled"(): boolean
public "clearHeader"(): void
get "item"(): $MenuItem
set "qwertyMode"(value: boolean)
get "shortcutsVisible"(): boolean
get "qwertyMode"(): boolean
get "rootMenu"(): $MenuBuilder
set "headerView"(value: $View$Type)
set "headerIcon"(value: $Drawable$Type)
set "headerTitle"(value: charseq)
set "icon"(value: $Drawable$Type)
set "callback"(value: $MenuBuilder$Callback$Type)
get "parentMenu"(): $Menu
set "shortcutsVisible"(value: boolean)
set "groupDividerEnabled"(value: boolean)
get "groupDividerEnabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SubMenuBuilder$Type = ($SubMenuBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SubMenuBuilder_ = $SubMenuBuilder$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$GLVertexFormat" {
import {$GLVertexAttrib, $GLVertexAttrib$Type} from "packages/icyllis/modernui/mc/testforge/trash/$GLVertexAttrib"

export class $GLVertexFormat {

constructor(...attribs: ($GLVertexAttrib$Type)[])

public "getMaxBinding"(): integer
public "setBindingDivisor"(binding: integer, divisor: integer): void
public "getBindingSize"(binding: integer): integer
public "equals"(o: any): boolean
public "hashCode"(): integer
public "setFormat"(array: integer): void
public "getVertexArray"(): integer
public "setVertexBuffer"(binding: integer, buffer: integer, offset: integer): void
public "setIndexBuffer"(buffer: integer): void
get "maxBinding"(): integer
set "format"(value: integer)
get "vertexArray"(): integer
set "indexBuffer"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLVertexFormat$Type = ($GLVertexFormat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLVertexFormat_ = $GLVertexFormat$Type;
}}
declare module "packages/icyllis/modernui/core/$Clipboard" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Clipboard {

constructor()

public static "getText"(): string
public static "setText"(text: charseq): void
get "text"(): string
set "text"(value: charseq)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Clipboard$Type = ($Clipboard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Clipboard_ = $Clipboard$Type;
}}
declare module "packages/icyllis/modernui/text/style/$ImageSpan" {
import {$DynamicDrawableSpan, $DynamicDrawableSpan$Type} from "packages/icyllis/modernui/text/style/$DynamicDrawableSpan"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Image, $Image$Type} from "packages/icyllis/modernui/graphics/$Image"

export class $ImageSpan extends $DynamicDrawableSpan {
static readonly "ALIGN_BOTTOM": integer
static readonly "ALIGN_BASELINE": integer
static readonly "ALIGN_CENTER": integer

constructor(image: $Image$Type)
constructor(drawable: $Drawable$Type, verticalAlignment: integer)
constructor(drawable: $Drawable$Type)
constructor(image: $Image$Type, verticalAlignment: integer)

public "getDrawable"(): $Drawable
get "drawable"(): $Drawable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageSpan$Type = ($ImageSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageSpan_ = $ImageSpan$Type;
}}
declare module "packages/icyllis/modernui/material/$MaterialDrawable" {
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"

export class $MaterialDrawable extends $Drawable {
static readonly "MAX_LEVEL": integer

constructor()

public "hasFocusStateSpecified"(): boolean
public "isStateful"(): boolean
public "setTintList"(tint: $ColorStateList$Type): void
public "getAlpha"(): integer
public "setAlpha"(alpha: integer): void
get "stateful"(): boolean
set "tintList"(value: $ColorStateList$Type)
get "alpha"(): integer
set "alpha"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MaterialDrawable$Type = ($MaterialDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MaterialDrawable_ = $MaterialDrawable$Type;
}}
declare module "packages/icyllis/modernui/text/style/$TabStopSpan" {
import {$ParagraphStyle, $ParagraphStyle$Type} from "packages/icyllis/modernui/text/style/$ParagraphStyle"

export interface $TabStopSpan extends $ParagraphStyle {

 "getTabStop"(): integer

(): integer
}

export namespace $TabStopSpan {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TabStopSpan$Type = ($TabStopSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TabStopSpan_ = $TabStopSpan$Type;
}}
declare module "packages/icyllis/modernui/mc/$BinaryDataUtils" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ClassLoader, $ClassLoader$Type} from "packages/java/lang/$ClassLoader"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $BinaryDataUtils {


public static "readDataSet"(buf: $FriendlyByteBuf$Type, loader: $ClassLoader$Type): $DataSet
public static "writeDataSet"(buf: $FriendlyByteBuf$Type, source: $DataSet$Type): $FriendlyByteBuf
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BinaryDataUtils$Type = ($BinaryDataUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BinaryDataUtils_ = $BinaryDataUtils$Type;
}}
declare module "packages/icyllis/modernui/text/style/$BackgroundColorSpan" {
import {$CharacterStyle, $CharacterStyle$Type} from "packages/icyllis/modernui/text/style/$CharacterStyle"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$UpdateAppearance, $UpdateAppearance$Type} from "packages/icyllis/modernui/text/style/$UpdateAppearance"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $BackgroundColorSpan extends $CharacterStyle implements $UpdateAppearance, $ParcelableSpan {

constructor(color: integer)
constructor(src: $Parcel$Type)

public "getBackgroundColor"(): integer
public "updateDrawState"(paint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
get "backgroundColor"(): integer
get "spanTypeId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackgroundColorSpan$Type = ($BackgroundColorSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackgroundColorSpan_ = $BackgroundColorSpan$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$ReorderTextHandler$IConsumer" {
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"

export interface $ReorderTextHandler$IConsumer {

 "handle"(arg0: charseq, arg1: $Style$Type): boolean

(arg0: charseq, arg1: $Style$Type): boolean
}

export namespace $ReorderTextHandler$IConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReorderTextHandler$IConsumer$Type = ($ReorderTextHandler$IConsumer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReorderTextHandler$IConsumer_ = $ReorderTextHandler$IConsumer$Type;
}}
declare module "packages/icyllis/modernui/widget/$ImageButton" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ImageView, $ImageView$Type} from "packages/icyllis/modernui/widget/$ImageView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$PointerIcon, $PointerIcon$Type} from "packages/icyllis/modernui/view/$PointerIcon"

export class $ImageButton extends $ImageView {
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "onResolvePointerIcon"(event: $MotionEvent$Type): $PointerIcon
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageButton$Type = ($ImageButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageButton_ = $ImageButton$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$ModernUIForge" {
import {$ModernUIMod, $ModernUIMod$Type} from "packages/icyllis/modernui/mc/$ModernUIMod"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$IModBusEvent, $IModBusEvent$Type} from "packages/net/minecraftforge/fml/event/$IModBusEvent"

export class $ModernUIForge extends $ModernUIMod {
static readonly "BOOTSTRAP_DISABLE_TEXT_ENGINE": string
static readonly "BOOTSTRAP_DISABLE_SMOOTH_SCROLLING": string
static readonly "BOOTSTRAP_DISABLE_ENHANCED_TEXT_FIELD": string
static "sDevelopment": boolean
static "sDeveloperMode": boolean

constructor()

public static "post"<E extends ($Event) & ($IModBusEvent)>(ns: string, e: E): boolean
public static "warnSetup"(key: string, ...args: (any)[]): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModernUIForge$Type = ($ModernUIForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModernUIForge_ = $ModernUIForge$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$PreferencesFragment" {
import {$ForgeConfigSpec$EnumValue, $ForgeConfigSpec$EnumValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$EnumValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LinearLayout, $LinearLayout$Type} from "packages/icyllis/modernui/widget/$LinearLayout"

export class $PreferencesFragment extends $Fragment {

constructor()

public static "createBooleanOption"(context: $Context$Type, name: string, config: $ForgeConfigSpec$BooleanValue$Type, saveFn: $Runnable$Type): $LinearLayout
public static "createCategoryList"(context: $Context$Type, name: string): $LinearLayout
public static "createInputBox"(context: $Context$Type, name: string): $LinearLayout
public static "createSwitchLayout"(context: $Context$Type, name: string): $LinearLayout
public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
public "createFirstPage"(context: $Context$Type): $LinearLayout
public static "createFloatOption"(context: $Context$Type, name: string, minValue: float, maxValue: float, maxLength: integer, getter: $Supplier$Type<(double)>, setter: $Consumer$Type<(double)>, denominator: float, saveFn: $Runnable$Type): $LinearLayout
public static "createFloatOption"(context: $Context$Type, name: string, minValue: float, maxValue: float, maxLength: integer, config: $ForgeConfigSpec$DoubleValue$Type, denominator: float, saveFn: $Runnable$Type): $LinearLayout
public static "createSecondPage"(context: $Context$Type): $LinearLayout
public static "createTextLayoutCategory"(context: $Context$Type): $LinearLayout
public static "createColorOpacityOption"(context: $Context$Type, name: string, config: $ForgeConfigSpec$ConfigValue$Type<($List$Type<(any)>)>, saveFn: $Runnable$Type): $LinearLayout
public static "createTextRenderingCategory"(context: $Context$Type): $LinearLayout
public static "createStringListOption"(context: $Context$Type, name: string, config: $ForgeConfigSpec$ConfigValue$Type<($List$Type<(any)>)>, saveFn: $Runnable$Type): $LinearLayout
public static "createSpinnerOption"<E extends $Enum<(E)>>(context: $Context$Type, name: string, values: (E)[], config: $ForgeConfigSpec$EnumValue$Type<(E)>, saveFn: $Runnable$Type): $LinearLayout
public static "createIntegerOption"(context: $Context$Type, name: string, minValue: integer, maxValue: integer, maxLength: integer, stepSize: integer, getter: $Supplier$Type<(integer)>, setter: $Consumer$Type<(integer)>, saveFn: $Runnable$Type): $LinearLayout
public static "createIntegerOption"(context: $Context$Type, name: string, minValue: integer, maxValue: integer, maxLength: integer, stepSize: integer, config: $ForgeConfigSpec$IntValue$Type, saveFn: $Runnable$Type): $LinearLayout
public static "createTooltipCategory"(context: $Context$Type): $LinearLayout
public static "createInputBoxWithSlider"(context: $Context$Type, name: string): $LinearLayout
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PreferencesFragment$Type = ($PreferencesFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PreferencesFragment_ = $PreferencesFragment$Type;
}}
declare module "packages/icyllis/modernui/text/style/$UpdateAppearance" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $UpdateAppearance {

}

export namespace $UpdateAppearance {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdateAppearance$Type = ($UpdateAppearance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdateAppearance_ = $UpdateAppearance$Type;
}}
declare module "packages/icyllis/modernui/widget/$WrapperListAdapter" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$ListAdapter, $ListAdapter$Type} from "packages/icyllis/modernui/widget/$ListAdapter"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export interface $WrapperListAdapter extends $ListAdapter {

 "getWrappedAdapter"(): $ListAdapter
 "isEnabled"(arg0: integer): boolean
 "areAllItemsEnabled"(): boolean
 "isEmpty"(): boolean
 "getCount"(): integer
 "getItem"(arg0: integer): any
 "getItemId"(arg0: integer): long
 "getView"(arg0: integer, arg1: $View$Type, arg2: $ViewGroup$Type): $View
 "registerDataSetObserver"(arg0: $DataSetObserver$Type): void
 "unregisterDataSetObserver"(arg0: $DataSetObserver$Type): void
 "hasStableIds"(): boolean
 "getItemViewType"(arg0: integer): integer
 "getViewTypeCount"(): integer
}

export namespace $WrapperListAdapter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrapperListAdapter$Type = ($WrapperListAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrapperListAdapter_ = $WrapperListAdapter$Type;
}}
declare module "packages/icyllis/modernui/text/method/$MovementMethod" {
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export interface $MovementMethod {

 "initialize"(arg0: $TextView$Type, arg1: $Spannable$Type): void
 "onGenericMotionEvent"(arg0: $TextView$Type, arg1: $Spannable$Type, arg2: $MotionEvent$Type): boolean
 "onTakeFocus"(arg0: $TextView$Type, arg1: $Spannable$Type, arg2: integer): void
 "onTouchEvent"(arg0: $TextView$Type, arg1: $Spannable$Type, arg2: $MotionEvent$Type): boolean
 "onKeyDown"(arg0: $TextView$Type, arg1: $Spannable$Type, arg2: integer, arg3: $KeyEvent$Type): boolean
 "onKeyUp"(arg0: $TextView$Type, arg1: $Spannable$Type, arg2: integer, arg3: $KeyEvent$Type): boolean
 "canSelectArbitrarily"(): boolean
}

export namespace $MovementMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MovementMethod$Type = ($MovementMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MovementMethod_ = $MovementMethod$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnContextClickListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $View$OnContextClickListener {

 "onContextClick"(arg0: $View$Type): boolean

(arg0: $View$Type): boolean
}

export namespace $View$OnContextClickListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnContextClickListener$Type = ($View$OnContextClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnContextClickListener_ = $View$OnContextClickListener$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/$GLShaderManager" {
import {$GLProgram, $GLProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/$GLProgram"
import {$GLShaderManager$Listener, $GLShaderManager$Listener$Type} from "packages/icyllis/modernui/mc/testforge/shader/$GLShaderManager$Listener"

/**
 * 
 * @deprecated
 */
export class $GLShaderManager {


public static "getInstance"(): $GLShaderManager
public "create"(t: $GLProgram$Type, ...stages: (integer)[]): boolean
public "reload"(): void
public "removeListener"(listener: $GLShaderManager$Listener$Type): void
public "addListener"(listener: $GLShaderManager$Listener$Type): void
public "getStage"(namespace: string, entry: string): integer
public "getStage"(namespace: string, path: string, type: integer): integer
get "instance"(): $GLShaderManager
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLShaderManager$Type = ($GLShaderManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLShaderManager_ = $GLShaderManager$Type;
}}
declare module "packages/icyllis/modernui/graphics/$CustomDrawable$DrawHandler" {
import {$DirectContext, $DirectContext$Type} from "packages/icyllis/arc3d/engine/$DirectContext"
import {$DrawableInfo, $DrawableInfo$Type} from "packages/icyllis/arc3d/engine/$DrawableInfo"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"

export interface $CustomDrawable$DrawHandler extends $AutoCloseable {

 "close"(): void
 "draw"(arg0: $DirectContext$Type, arg1: $DrawableInfo$Type): void

(): void
}

export namespace $CustomDrawable$DrawHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomDrawable$DrawHandler$Type = ($CustomDrawable$DrawHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomDrawable$DrawHandler_ = $CustomDrawable$DrawHandler$Type;
}}
declare module "packages/icyllis/modernui/animation/$Keyframes$FloatKeyframes" {
import {$Keyframes, $Keyframes$Type} from "packages/icyllis/modernui/animation/$Keyframes"
import {$TypeEvaluator, $TypeEvaluator$Type} from "packages/icyllis/modernui/animation/$TypeEvaluator"
import {$Keyframe, $Keyframe$Type} from "packages/icyllis/modernui/animation/$Keyframe"

export interface $Keyframes$FloatKeyframes extends $Keyframes {

 "getFloatValue"(arg0: float): float
 "getValue"(arg0: float): any
 "copy"(): $Keyframes
 "setEvaluator"(arg0: $TypeEvaluator$Type<(any)>): void
 "getKeyframes"(): ($Keyframe)[]
}

export namespace $Keyframes$FloatKeyframes {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Keyframes$FloatKeyframes$Type = ($Keyframes$FloatKeyframes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Keyframes$FloatKeyframes_ = $Keyframes$FloatKeyframes$Type;
}}
declare module "packages/icyllis/modernui/text/style/$UnderlineSpan" {
import {$CharacterStyle, $CharacterStyle$Type} from "packages/icyllis/modernui/text/style/$CharacterStyle"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$UpdateAppearance, $UpdateAppearance$Type} from "packages/icyllis/modernui/text/style/$UpdateAppearance"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $UnderlineSpan extends $CharacterStyle implements $UpdateAppearance, $ParcelableSpan {

constructor()
constructor(src: $Parcel$Type)

public "updateDrawState"(paint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
get "spanTypeId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UnderlineSpan$Type = ($UnderlineSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UnderlineSpan_ = $UnderlineSpan$Type;
}}
declare module "packages/icyllis/modernui/graphics/$SceneRenderer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $SceneRenderer {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SceneRenderer$Type = ($SceneRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SceneRenderer_ = $SceneRenderer$Type;
}}
declare module "packages/icyllis/modernui/widget/$SeekBar$OnSeekBarChangeListener" {
import {$SeekBar, $SeekBar$Type} from "packages/icyllis/modernui/widget/$SeekBar"

export interface $SeekBar$OnSeekBarChangeListener {

 "onStartTrackingTouch"(seekBar: $SeekBar$Type): void
 "onStopTrackingTouch"(seekBar: $SeekBar$Type): void
 "onProgressChanged"(seekBar: $SeekBar$Type, progress: integer, fromUser: boolean): void
}

export namespace $SeekBar$OnSeekBarChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SeekBar$OnSeekBarChangeListener$Type = ($SeekBar$OnSeekBarChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SeekBar$OnSeekBarChangeListener_ = $SeekBar$OnSeekBarChangeListener$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentHostCallback" {
import {$FragmentContainer, $FragmentContainer$Type} from "packages/icyllis/modernui/fragment/$FragmentContainer"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$FileDescriptor, $FileDescriptor$Type} from "packages/java/io/$FileDescriptor"
import {$Handler, $Handler$Type} from "packages/icyllis/modernui/core/$Handler"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"

export class $FragmentHostCallback<E> implements $FragmentContainer {

constructor(context: $Context$Type, handler: $Handler$Type)

public "onDump"(prefix: string, fd: $FileDescriptor$Type, writer: $PrintWriter$Type, ...args: (string)[]): void
public "onGetHost"(): E
public "onFindViewById"(id: integer): $View
public "onHasView"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentHostCallback$Type<E> = ($FragmentHostCallback<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentHostCallback_<E> = $FragmentHostCallback$Type<(E)>;
}}
declare module "packages/icyllis/modernui/core/$UndoOwner" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $UndoOwner {


public "toString"(): string
public "getTag"(): string
public "getData"(): any
get "tag"(): string
get "data"(): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UndoOwner$Type = ($UndoOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UndoOwner_ = $UndoOwner$Type;
}}
declare module "packages/icyllis/modernui/graphics/$BlendMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$BlendMode as $BlendMode$0, $BlendMode$Type as $BlendMode$0$Type} from "packages/icyllis/arc3d/core/$BlendMode"

export class $BlendMode extends $Enum<($BlendMode)> {
static readonly "CLEAR": $BlendMode
static readonly "SRC": $BlendMode
static readonly "DST": $BlendMode
static readonly "SRC_OVER": $BlendMode
static readonly "DST_OVER": $BlendMode
static readonly "SRC_IN": $BlendMode
static readonly "DST_IN": $BlendMode
static readonly "SRC_OUT": $BlendMode
static readonly "DST_OUT": $BlendMode
static readonly "SRC_ATOP": $BlendMode
static readonly "DST_ATOP": $BlendMode
static readonly "XOR": $BlendMode
static readonly "PLUS": $BlendMode
static readonly "PLUS_CLAMPED": $BlendMode
static readonly "MINUS": $BlendMode
static readonly "MINUS_CLAMPED": $BlendMode
static readonly "MODULATE": $BlendMode
static readonly "MULTIPLY": $BlendMode
static readonly "SCREEN": $BlendMode
static readonly "OVERLAY": $BlendMode
static readonly "DARKEN": $BlendMode
static readonly "LIGHTEN": $BlendMode
static readonly "COLOR_DODGE": $BlendMode
static readonly "COLOR_BURN": $BlendMode
static readonly "HARD_LIGHT": $BlendMode
static readonly "SOFT_LIGHT": $BlendMode
static readonly "DIFFERENCE": $BlendMode
static readonly "EXCLUSION": $BlendMode
static readonly "SUBTRACT": $BlendMode
static readonly "DIVIDE": $BlendMode
static readonly "LINEAR_DODGE": $BlendMode
static readonly "LINEAR_BURN": $BlendMode
static readonly "VIVID_LIGHT": $BlendMode
static readonly "LINEAR_LIGHT": $BlendMode
static readonly "PIN_LIGHT": $BlendMode
static readonly "HARD_MIX": $BlendMode
static readonly "DARKER_COLOR": $BlendMode
static readonly "LIGHTER_COLOR": $BlendMode
static readonly "HUE": $BlendMode
static readonly "SATURATION": $BlendMode
static readonly "COLOR": $BlendMode
static readonly "LUMINOSITY": $BlendMode
static readonly "ADD": $BlendMode


public static "values"(): ($BlendMode)[]
public static "valueOf"(name: string): $BlendMode
public "nativeBlendMode"(): $BlendMode$0
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlendMode$Type = (("minus") | ("src_over") | ("dst") | ("color") | ("plus_clamped") | ("lighter_color") | ("screen") | ("exclusion") | ("src_atop") | ("linear_dodge") | ("vivid_light") | ("dst_over") | ("saturation") | ("src_in") | ("lighten") | ("pin_light") | ("color_dodge") | ("linear_light") | ("luminosity") | ("xor") | ("divide") | ("multiply") | ("modulate") | ("minus_clamped") | ("overlay") | ("src") | ("hard_mix") | ("src_out") | ("subtract") | ("clear") | ("plus") | ("linear_burn") | ("dst_out") | ("darken") | ("dst_in") | ("dst_atop") | ("soft_light") | ("difference") | ("hue") | ("hard_light") | ("color_burn") | ("darker_color")) | ($BlendMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlendMode_ = $BlendMode$Type;
}}
declare module "packages/icyllis/modernui/widget/$PopupMenu$OnDismissListener" {
import {$PopupMenu, $PopupMenu$Type} from "packages/icyllis/modernui/widget/$PopupMenu"

export interface $PopupMenu$OnDismissListener {

 "onDismiss"(arg0: $PopupMenu$Type): void

(arg0: $PopupMenu$Type): void
}

export namespace $PopupMenu$OnDismissListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PopupMenu$OnDismissListener$Type = ($PopupMenu$OnDismissListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PopupMenu$OnDismissListener_ = $PopupMenu$OnDismissListener$Type;
}}
declare module "packages/icyllis/modernui/view/$FocusFinder" {
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $FocusFinder {


public static "getInstance"(): $FocusFinder
public static "sort"(views: ($View$Type)[], start: integer, end: integer, root: $ViewGroup$Type, isRtl: boolean): void
public "findNextKeyboardNavigationCluster"(root: $View$Type, currentCluster: $View$Type, direction: integer): $View
public "findNextFocus"(root: $ViewGroup$Type, focused: $View$Type, direction: integer): $View
public "findNextFocusFromRect"(root: $ViewGroup$Type, focusedRect: $Rect$Type, direction: integer): $View
public "findNearestTouchable"(root: $ViewGroup$Type, x: integer, y: integer, direction: integer, deltas: (integer)[]): $View
get "instance"(): $FocusFinder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FocusFinder$Type = ($FocusFinder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FocusFinder_ = $FocusFinder$Type;
}}
declare module "packages/icyllis/modernui/text/$PrecomputedText$Params" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$LineBreakConfig, $LineBreakConfig$Type} from "packages/icyllis/modernui/graphics/text/$LineBreakConfig"

export class $PrecomputedText$Params {
static readonly "UNUSABLE": integer
static readonly "NEED_RECOMPUTE": integer
static readonly "USABLE": integer

constructor(paint: $TextPaint$Type, lineBreakConfig: $LineBreakConfig$Type, textDir: $TextDirectionHeuristic$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getTextDirection"(): $TextDirectionHeuristic
public "checkResultUsable"(paint: $TextPaint$Type, textDir: $TextDirectionHeuristic$Type, lbConfig: $LineBreakConfig$Type): integer
public "getTextPaint"(): $TextPaint
public "getLineBreakConfig"(): $LineBreakConfig
get "textDirection"(): $TextDirectionHeuristic
get "textPaint"(): $TextPaint
get "lineBreakConfig"(): $LineBreakConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PrecomputedText$Params$Type = ($PrecomputedText$Params);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PrecomputedText$Params_ = $PrecomputedText$Params$Type;
}}
declare module "packages/icyllis/modernui/widget/$TextView$BufferType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $TextView$BufferType extends $Enum<($TextView$BufferType)> {
static readonly "NORMAL": $TextView$BufferType
static readonly "SPANNABLE": $TextView$BufferType
static readonly "EDITABLE": $TextView$BufferType


public static "values"(): ($TextView$BufferType)[]
public static "valueOf"(name: string): $TextView$BufferType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextView$BufferType$Type = (("spannable") | ("normal") | ("editable")) | ($TextView$BufferType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextView$BufferType_ = $TextView$BufferType$Type;
}}
declare module "packages/icyllis/modernui/graphics/font/$GLFontAtlas" {
import {$GLTexture, $GLTexture$Type} from "packages/icyllis/arc3d/opengl/$GLTexture"
import {$BakedGlyph, $BakedGlyph$Type} from "packages/icyllis/modernui/graphics/font/$BakedGlyph"
import {$Bitmap$Format, $Bitmap$Format$Type} from "packages/icyllis/modernui/graphics/$Bitmap$Format"
import {$DirectContext, $DirectContext$Type} from "packages/icyllis/arc3d/engine/$DirectContext"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$GLCaps, $GLCaps$Type} from "packages/icyllis/arc3d/opengl/$GLCaps"

export class $GLFontAtlas implements $AutoCloseable {
static readonly "CHUNK_SIZE": integer
static "sLinearSampling": boolean

constructor(context: $DirectContext$Type, maskFormat: integer, borderWidth: integer)

public "debug"(path: string): void
public "close"(): void
public "compact"(): boolean
public static "dumpAtlas"(caps: $GLCaps$Type, texture: $GLTexture$Type, format: $Bitmap$Format$Type, path: string): void
public "stitch"(glyph: $BakedGlyph$Type, pixels: long): boolean
public "getTexture"(): $GLTexture
public "getWidth"(): integer
public "getHeight"(): integer
public "getMemorySize"(): long
public "setNoPixels"(key: long): void
public "getCoverage"(): double
public "getGlyphCount"(): integer
public "getGlyph"(key: long): $BakedGlyph
get "texture"(): $GLTexture
get "width"(): integer
get "height"(): integer
get "memorySize"(): long
set "noPixels"(value: long)
get "coverage"(): double
get "glyphCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLFontAtlas$Type = ($GLFontAtlas);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLFontAtlas_ = $GLFontAtlas$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/$GLProgram" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
/**
 * 
 * @deprecated
 */
export class $GLProgram {

constructor()

public "get"(): integer
public "use"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLProgram$Type = ($GLProgram);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLProgram_ = $GLProgram$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$DrawableWrapper" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Drawable$ConstantState, $Drawable$ConstantState$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$ConstantState"
import {$Drawable$Callback, $Drawable$Callback$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$Callback"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $DrawableWrapper extends $Drawable implements $Drawable$Callback {
static readonly "MAX_LEVEL": integer

constructor(dr: $Drawable$Type)

public "getDrawable"(): $Drawable
public "hasFocusStateSpecified"(): boolean
public "onLayoutDirectionChanged"(layoutDirection: integer): boolean
public "setVisible"(visible: boolean, restart: boolean): boolean
public "draw"(canvas: $Canvas$Type): void
public "setHotspot"(x: float, y: float): void
public "getPadding"(padding: $Rect$Type): boolean
public "jumpToCurrentState"(): void
public "isStateful"(): boolean
public "setTintList"(tint: $ColorStateList$Type): void
public "setTintBlendMode"(blendMode: $BlendMode$Type): void
public "setHotspotBounds"(left: integer, top: integer, right: integer, bottom: integer): void
public "getHotspotBounds"(outRect: $Rect$Type): void
public "getConstantState"(): $Drawable$ConstantState
public "clearMutated"(): void
public "setDrawable"(dr: $Drawable$Type): void
public "getAlpha"(): integer
public "getIntrinsicHeight"(): integer
public "getIntrinsicWidth"(): integer
public "setAlpha"(alpha: integer): void
public "mutate"(): $Drawable
public "unscheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type): void
public "invalidateDrawable"(who: $Drawable$Type): void
public "scheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type, when: long): void
get "drawable"(): $Drawable
get "stateful"(): boolean
set "tintList"(value: $ColorStateList$Type)
set "tintBlendMode"(value: $BlendMode$Type)
get "constantState"(): $Drawable$ConstantState
set "drawable"(value: $Drawable$Type)
get "alpha"(): integer
get "intrinsicHeight"(): integer
get "intrinsicWidth"(): integer
set "alpha"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawableWrapper$Type = ($DrawableWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawableWrapper_ = $DrawableWrapper$Type;
}}
declare module "packages/icyllis/modernui/annotation/$CallSuper" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $CallSuper extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $CallSuper {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CallSuper$Type = ($CallSuper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CallSuper_ = $CallSuper$Type;
}}
declare module "packages/icyllis/modernui/text/style/$QuoteSpan" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$LeadingMarginSpan, $LeadingMarginSpan$Type} from "packages/icyllis/modernui/text/style/$LeadingMarginSpan"

export class $QuoteSpan implements $LeadingMarginSpan {

constructor(blockMargin: integer, stripeWidth: integer, color: integer)

public "getLeadingMargin"(first: boolean): integer
public "drawLeadingMargin"(c: $Canvas$Type, p: $TextPaint$Type, x: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
public "drawMargin"(c: $Canvas$Type, p: $TextPaint$Type, left: integer, right: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuoteSpan$Type = ($QuoteSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuoteSpan_ = $QuoteSpan$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$AnimatedImageDrawable" {
import {$Animatable2$AnimationCallback, $Animatable2$AnimationCallback$Type} from "packages/icyllis/modernui/graphics/drawable/$Animatable2$AnimationCallback"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$Animatable2, $Animatable2$Type} from "packages/icyllis/modernui/graphics/drawable/$Animatable2"

export class $AnimatedImageDrawable extends $Drawable implements $Animatable2 {
static readonly "MAX_LEVEL": integer

constructor()

public static "getAnimatedImageExecutor"(): $Executor
public "unregisterAnimationCallback"(callback: $Animatable2$AnimationCallback$Type): boolean
public "registerAnimationCallback"(callback: $Animatable2$AnimationCallback$Type): void
public "clearAnimationCallbacks"(): void
public "start"(): void
public "stop"(): void
public "draw"(canvas: $Canvas$Type): void
public "isRunning"(): boolean
get "animatedImageExecutor"(): $Executor
get "running"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimatedImageDrawable$Type = ($AnimatedImageDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimatedImageDrawable_ = $AnimatedImageDrawable$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$ProjectBuilderRenderer" {
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

export class $ProjectBuilderRenderer extends $BlockEntityWithoutLevelRenderer {


public "onResourceManagerReload"(resourceManager: $ResourceManager$Type): void
public "renderByItem"(stack: $ItemStack$Type, transformType: $ItemDisplayContext$Type, ps: $PoseStack$Type, source: $MultiBufferSource$Type, combinedLight: integer, combinedOverlay: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProjectBuilderRenderer$Type = ($ProjectBuilderRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProjectBuilderRenderer_ = $ProjectBuilderRenderer$Type;
}}
declare module "packages/icyllis/modernui/mc/$IModernEditBox" {
import {$UndoManager, $UndoManager$Type} from "packages/icyllis/modernui/core/$UndoManager"

export interface $IModernEditBox {

 "modernUI_MC$getUndoManager"(): $UndoManager

(): $UndoManager
}

export namespace $IModernEditBox {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IModernEditBox$Type = ($IModernEditBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IModernEditBox_ = $IModernEditBox$Type;
}}
declare module "packages/icyllis/modernui/mc/$ContainerMenuView" {
import {$Matrix4, $Matrix4$Type} from "packages/icyllis/arc3d/core/$Matrix4"
import {$CustomDrawable, $CustomDrawable$Type} from "packages/icyllis/modernui/graphics/$CustomDrawable"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$RectF, $RectF$Type} from "packages/icyllis/modernui/graphics/$RectF"
import {$Rect2i, $Rect2i$Type} from "packages/icyllis/arc3d/core/$Rect2i"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$CustomDrawable$DrawHandler, $CustomDrawable$DrawHandler$Type} from "packages/icyllis/modernui/graphics/$CustomDrawable$DrawHandler"
import {$ImageInfo, $ImageInfo$Type} from "packages/icyllis/arc3d/core/$ImageInfo"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $ContainerMenuView extends $View implements $CustomDrawable {
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "getBounds"(): $RectF
public "snapDrawHandler"(backendApi: integer, viewMatrix: $Matrix4$Type, clipBounds: $Rect2i$Type, targetInfo: $ImageInfo$Type): $CustomDrawable$DrawHandler
public "setContainerMenu"(containerMenu: $AbstractContainerMenu$Type): void
get "bounds"(): $RectF
set "containerMenu"(value: $AbstractContainerMenu$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContainerMenuView$Type = ($ContainerMenuView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContainerMenuView_ = $ContainerMenuView$Type;
}}
declare module "packages/icyllis/modernui/annotation/$UiThread" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $UiThread extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $UiThread {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UiThread$Type = ($UiThread);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UiThread_ = $UiThread$Type;
}}
declare module "packages/icyllis/modernui/text/$TextUtils" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$TextUtils$TruncateAt, $TextUtils$TruncateAt$Type} from "packages/icyllis/modernui/text/$TextUtils$TruncateAt"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$TextUtils$EllipsizeCallback, $TextUtils$EllipsizeCallback$Type} from "packages/icyllis/modernui/text/$TextUtils$EllipsizeCallback"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $TextUtils {
static readonly "FIRST_SPAN": integer
static readonly "ALIGNMENT_SPAN": integer
static readonly "FOREGROUND_COLOR_SPAN": integer
static readonly "RELATIVE_SIZE_SPAN": integer
static readonly "SCALE_X_SPAN": integer
static readonly "STRIKETHROUGH_SPAN": integer
static readonly "UNDERLINE_SPAN": integer
static readonly "STYLE_SPAN": integer
static readonly "BULLET_SPAN": integer
static readonly "QUOTE_SPAN": integer
static readonly "LEADING_MARGIN_SPAN": integer
static readonly "URL_SPAN": integer
static readonly "BACKGROUND_COLOR_SPAN": integer
static readonly "TYPEFACE_SPAN": integer
static readonly "SUPERSCRIPT_SPAN": integer
static readonly "SUBSCRIPT_SPAN": integer
static readonly "ABSOLUTE_SIZE_SPAN": integer
static readonly "TEXT_APPEARANCE_SPAN": integer
static readonly "ANNOTATION": integer
static readonly "SUGGESTION_SPAN": integer
static readonly "SPELL_CHECK_SPAN": integer
static readonly "SUGGESTION_RANGE_SPAN": integer
static readonly "EASY_EDIT_SPAN": integer
static readonly "LOCALE_SPAN": integer
static readonly "TTS_SPAN": integer
static readonly "ACCESSIBILITY_CLICKABLE_SPAN": integer
static readonly "ACCESSIBILITY_URL_SPAN": integer
static readonly "LINE_BACKGROUND_SPAN": integer
static readonly "LINE_HEIGHT_SPAN": integer
static readonly "ACCESSIBILITY_REPLACEMENT_SPAN": integer
static readonly "TRAILING_MARGIN_SPAN": integer
static readonly "LAST_SPAN": integer


public static "getChars"(s: charseq, srcBegin: integer, srcEnd: integer, dst: (character)[], dstBegin: integer): void
public static "indexOf"(s: charseq, ch: character): integer
public static "indexOf"(s: charseq, ch: character, start: integer, end: integer): integer
public static "indexOf"(s: charseq, ch: character, start: integer): integer
public static "contentEquals"(a: charseq, b: charseq): boolean
public static "lastIndexOf"(s: charseq, ch: character, last: integer): integer
public static "lastIndexOf"(s: charseq, ch: character, start: integer, last: integer): integer
public static "lastIndexOf"(s: charseq, ch: character): integer
public static "substring"(source: charseq, start: integer, end: integer): string
public static "isEmpty"(csq: charseq): boolean
public static "join"(delimiter: charseq, elements: $Iterable$Type<(any)>): charseq
public static "join"(delimiter: charseq, ...elements: (charseq)[]): charseq
public static "concat"(...elements: (charseq)[]): charseq
public static "concat"(elements: $Iterable$Type<(any)>): charseq
public static "distance"(a: charseq, b: charseq): integer
public static "getLayoutDirectionFromLocale"(locale: $Locale$Type): integer
public static "binaryCompact"(a: $Appendable$Type, num: long): void
public static "binaryCompact"(num: long): string
public static "obtain"(len: integer): (character)[]
public static "recycle"(temp: (character)[]): void
public static "removeEmptySpans"<T>(spans: $List$Type<(T)>, spanned: $Spanned$Type): $List<(T)>
public static "getEllipsisChars"(method: $TextUtils$TruncateAt$Type): (character)[]
public static "copySpansFrom"(source: $Spanned$Type, start: integer, end: integer, type: $Class$Type<(any)>, dest: $Spannable$Type, destoff: integer): void
public static "createFromParcel"(p: $Parcel$Type): charseq
public static "writeToParcel"(cs: charseq, dest: $Parcel$Type, flags: integer): void
public static "validateSurrogatePairs"(text: string): string
public static "stringOrSpannedString"(source: charseq): charseq
public static "drawTextRun"(canvas: $Canvas$Type, text: (character)[], start: integer, end: integer, contextStart: integer, contextEnd: integer, x: float, y: float, isRtl: boolean, paint: $TextPaint$Type): void
public static "drawTextRun"(canvas: $Canvas$Type, text: charseq, start: integer, end: integer, contextStart: integer, contextEnd: integer, x: float, y: float, isRtl: boolean, paint: $TextPaint$Type): void
public static "getEllipsisString"(method: $TextUtils$TruncateAt$Type): string
public static "ellipsize"(text: charseq, paint: $TextPaint$Type, avail: float, where: $TextUtils$TruncateAt$Type, preserveLength: boolean, callback: $TextUtils$EllipsizeCallback$Type): charseq
public static "ellipsize"(text: charseq, p: $TextPaint$Type, avail: float, where: $TextUtils$TruncateAt$Type): charseq
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextUtils$Type = ($TextUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextUtils_ = $TextUtils$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentFactory" {
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ClassLoader, $ClassLoader$Type} from "packages/java/lang/$ClassLoader"

export class $FragmentFactory {

constructor()

public "instantiate"(clazz: $Class$Type<(any)>): $Fragment
public "instantiate"(classLoader: $ClassLoader$Type, className: string): $Fragment
public static "loadFragmentClass"(classLoader: $ClassLoader$Type, className: string): $Class<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentFactory$Type = ($FragmentFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentFactory_ = $FragmentFactory$Type;
}}
declare module "packages/icyllis/modernui/view/$ScrollBar" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Drawable$Callback, $Drawable$Callback$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$Callback"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $ScrollBar extends $Drawable implements $Drawable$Callback {
static readonly "MAX_LEVEL": integer


public "getSize"(vertical: boolean): integer
public "setParameters"(range: integer, offset: integer, extent: integer, vertical: boolean): void
public "setVerticalTrackDrawable"(track: $Drawable$Type): void
public "setHorizontalThumbDrawable"(thumb: $Drawable$Type): void
public "setHorizontalTrackDrawable"(track: $Drawable$Type): void
public "setVerticalThumbDrawable"(thumb: $Drawable$Type): void
public "getVerticalTrackDrawable"(): $Drawable
public "getHorizontalThumbDrawable"(): $Drawable
public "getVerticalThumbDrawable"(): $Drawable
public "getHorizontalTrackDrawable"(): $Drawable
public "draw"(canvas: $Canvas$Type): void
public "setAlwaysDrawHorizontalTrack"(alwaysDrawTrack: boolean): void
public "getAlwaysDrawHorizontalTrack"(): boolean
public "getAlwaysDrawVerticalTrack"(): boolean
public "setAlwaysDrawVerticalTrack"(alwaysDrawTrack: boolean): void
public "getAlpha"(): integer
public "setAlpha"(alpha: integer): void
public "unscheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type): void
public "invalidateDrawable"(drawable: $Drawable$Type): void
public "scheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type, when: long): void
set "verticalTrackDrawable"(value: $Drawable$Type)
set "horizontalThumbDrawable"(value: $Drawable$Type)
set "horizontalTrackDrawable"(value: $Drawable$Type)
set "verticalThumbDrawable"(value: $Drawable$Type)
get "verticalTrackDrawable"(): $Drawable
get "horizontalThumbDrawable"(): $Drawable
get "verticalThumbDrawable"(): $Drawable
get "horizontalTrackDrawable"(): $Drawable
set "alwaysDrawHorizontalTrack"(value: boolean)
get "alwaysDrawHorizontalTrack"(): boolean
get "alwaysDrawVerticalTrack"(): boolean
set "alwaysDrawVerticalTrack"(value: boolean)
get "alpha"(): integer
set "alpha"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollBar$Type = ($ScrollBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollBar_ = $ScrollBar$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/$TestRelativeLayout" {
import {$RelativeLayout, $RelativeLayout$Type} from "packages/icyllis/modernui/widget/$RelativeLayout"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $TestRelativeLayout extends $RelativeLayout {
static readonly "TRUE": integer
static readonly "LEFT_OF": integer
static readonly "RIGHT_OF": integer
static readonly "ABOVE": integer
static readonly "BELOW": integer
static readonly "ALIGN_BASELINE": integer
static readonly "ALIGN_LEFT": integer
static readonly "ALIGN_TOP": integer
static readonly "ALIGN_RIGHT": integer
static readonly "ALIGN_BOTTOM": integer
static readonly "ALIGN_PARENT_LEFT": integer
static readonly "ALIGN_PARENT_TOP": integer
static readonly "ALIGN_PARENT_RIGHT": integer
static readonly "ALIGN_PARENT_BOTTOM": integer
static readonly "CENTER_IN_PARENT": integer
static readonly "CENTER_HORIZONTAL": integer
static readonly "CENTER_VERTICAL": integer
static readonly "START_OF": integer
static readonly "END_OF": integer
static readonly "ALIGN_START": integer
static readonly "ALIGN_END": integer
static readonly "ALIGN_PARENT_START": integer
static readonly "ALIGN_PARENT_END": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TestRelativeLayout$Type = ($TestRelativeLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TestRelativeLayout_ = $TestRelativeLayout$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$ColorStateListDrawable" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Drawable$ConstantState, $Drawable$ConstantState$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$ConstantState"
import {$Drawable$Callback, $Drawable$Callback$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$Callback"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $ColorStateListDrawable extends $Drawable implements $Drawable$Callback {
static readonly "MAX_LEVEL": integer

constructor(colorStateList: $ColorStateList$Type)
constructor()

public "hasFocusStateSpecified"(): boolean
public "draw"(canvas: $Canvas$Type): void
public "isStateful"(): boolean
public "setTintList"(tint: $ColorStateList$Type): void
public "setTintBlendMode"(blendMode: $BlendMode$Type): void
public "getConstantState"(): $Drawable$ConstantState
public "clearMutated"(): void
public "getCurrent"(): $Drawable
public "getAlpha"(): integer
public "setAlpha"(alpha: integer): void
public "mutate"(): $Drawable
public "unscheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type): void
public "invalidateDrawable"(who: $Drawable$Type): void
public "scheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type, when: long): void
public "setColorStateList"(colorStateList: $ColorStateList$Type): void
public "getColorStateList"(): $ColorStateList
public "clearAlpha"(): void
get "stateful"(): boolean
set "tintList"(value: $ColorStateList$Type)
set "tintBlendMode"(value: $BlendMode$Type)
get "constantState"(): $Drawable$ConstantState
get "current"(): $Drawable
get "alpha"(): integer
set "alpha"(value: integer)
set "colorStateList"(value: $ColorStateList$Type)
get "colorStateList"(): $ColorStateList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorStateListDrawable$Type = ($ColorStateListDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorStateListDrawable_ = $ColorStateListDrawable$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$GlyphRender" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"

/**
 * 
 * @deprecated
 */
export class $GlyphRender {
static readonly "USE_INPUT_COLOR": integer
static readonly "COLOR_NO_CHANGE": integer
 "mStringIndex": integer
 "mOffsetX": float
 "mFlags": integer

constructor(stripIndex: integer, offsetX: float, advance: float, decoration: integer)

public "toString"(): string
public "drawEffect"(builder: $VertexConsumer$Type, x: float, y: float, r: integer, g: integer, b: integer, a: integer): void
public "drawEffect"(matrix: $Matrix4f$Type, builder: $VertexConsumer$Type, x: float, y: float, r: integer, g: integer, b: integer, a: integer, light: integer): void
public "getAdvance"(): float
get "advance"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlyphRender$Type = ($GlyphRender);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlyphRender_ = $GlyphRender$Type;
}}
declare module "packages/icyllis/modernui/widget/$ViewPager$PageTransformer" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $ViewPager$PageTransformer {

 "transformPage"(arg0: $View$Type, arg1: float): void

(arg0: $View$Type, arg1: float): void
}

export namespace $ViewPager$PageTransformer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewPager$PageTransformer$Type = ($ViewPager$PageTransformer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewPager$PageTransformer_ = $ViewPager$PageTransformer$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$TextRenderEffect" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"

export class $TextRenderEffect {
static readonly "EFFECT_DEPTH": float


public static "drawStrikethrough"(builder: $VertexConsumer$Type, start: float, end: float, baseline: float, r: integer, g: integer, b: integer, a: integer): void
public static "drawStrikethrough"(matrix: $Matrix4f$Type, builder: $VertexConsumer$Type, start: float, end: float, baseline: float, r: integer, g: integer, b: integer, a: integer, light: integer): void
public static "drawUnderline"(builder: $VertexConsumer$Type, start: float, end: float, baseline: float, r: integer, g: integer, b: integer, a: integer): void
public static "drawUnderline"(matrix: $Matrix4f$Type, builder: $VertexConsumer$Type, start: float, end: float, baseline: float, r: integer, g: integer, b: integer, a: integer, light: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextRenderEffect$Type = ($TextRenderEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextRenderEffect_ = $TextRenderEffect$Type;
}}
declare module "packages/icyllis/modernui/$ModernUI" {
import {$Lifecycle, $Lifecycle$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle"
import {$Resources, $Resources$Type} from "packages/icyllis/modernui/resources/$Resources"
import {$Activity, $Activity$Type} from "packages/icyllis/modernui/app/$Activity"
import {$WindowManager, $WindowManager$Type} from "packages/icyllis/modernui/view/$WindowManager"
import {$Properties, $Properties$Type} from "packages/java/util/$Properties"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"
import {$Typeface, $Typeface$Type} from "packages/icyllis/modernui/text/$Typeface"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$ReadableByteChannel, $ReadableByteChannel$Type} from "packages/java/nio/channels/$ReadableByteChannel"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"

export class $ModernUI extends $Activity implements $AutoCloseable, $LifecycleOwner {
static readonly "ID": string
static readonly "NAME_CPT": string
static readonly "LOGGER": $Logger
static readonly "MARKER": $Marker
static readonly "props": $Properties

constructor()

public "run"(fragment: $Fragment$Type): void
public static "getInstance"(): $ModernUI
public "getResources"(): $Resources
public "close"(): void
public "getResourceStream"(namespace: string, path: string): $InputStream
public static "getSelectedTypeface"(): $Typeface
public "getWindowManager"(): $WindowManager
public "getResourceChannel"(namespace: string, path: string): $ReadableByteChannel
public "getLifecycle"(): $Lifecycle
public static "getSelectedLocale"(): $Locale
public "hasRtlSupport"(): boolean
get "instance"(): $ModernUI
get "resources"(): $Resources
get "selectedTypeface"(): $Typeface
get "windowManager"(): $WindowManager
get "lifecycle"(): $Lifecycle
get "selectedLocale"(): $Locale
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModernUI$Type = ($ModernUI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModernUI_ = $ModernUI$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Config$Text$LineBreakStyle" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Config$Text$LineBreakStyle extends $Enum<($Config$Text$LineBreakStyle)> {
static readonly "AUTO": $Config$Text$LineBreakStyle
static readonly "LOOSE": $Config$Text$LineBreakStyle
static readonly "NORMAL": $Config$Text$LineBreakStyle
static readonly "STRICT": $Config$Text$LineBreakStyle


public "toString"(): string
public static "values"(): ($Config$Text$LineBreakStyle)[]
public static "valueOf"(name: string): $Config$Text$LineBreakStyle
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Text$LineBreakStyle$Type = (("normal") | ("auto") | ("loose") | ("strict")) | ($Config$Text$LineBreakStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config$Text$LineBreakStyle_ = $Config$Text$LineBreakStyle$Type;
}}
declare module "packages/icyllis/modernui/resources/$StringBlock" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $StringBlock {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringBlock$Type = ($StringBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringBlock_ = $StringBlock$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$Animatable" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $Animatable {

 "start"(): void
 "stop"(): void
 "isRunning"(): boolean
}

export namespace $Animatable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Animatable$Type = ($Animatable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Animatable_ = $Animatable$Type;
}}
declare module "packages/icyllis/modernui/animation/$AnticipateOvershootInterpolator" {
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"

export class $AnticipateOvershootInterpolator implements $TimeInterpolator {

constructor(tension: float, extraTension: float)
constructor(tension: float)
constructor()

public "getInterpolation"(t: float): float
public static "cycle"(cycle: float): $TimeInterpolator
public static "overshoot"(): $TimeInterpolator
public static "overshoot"(tension: float): $TimeInterpolator
public static "bounce"(): $TimeInterpolator
public static "accelerate"(factor: float): $TimeInterpolator
public static "accelerate"(): $TimeInterpolator
public static "anticipate"(tension: float): $TimeInterpolator
public static "anticipate"(): $TimeInterpolator
public static "decelerate"(factor: float): $TimeInterpolator
public static "decelerate"(): $TimeInterpolator
public static "linear"(): $TimeInterpolator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnticipateOvershootInterpolator$Type = ($AnticipateOvershootInterpolator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnticipateOvershootInterpolator_ = $AnticipateOvershootInterpolator$Type;
}}
declare module "packages/icyllis/modernui/text/method/$ReplacementTransformationMethod" {
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$TransformationMethod, $TransformationMethod$Type} from "packages/icyllis/modernui/text/method/$TransformationMethod"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export class $ReplacementTransformationMethod implements $TransformationMethod {


public "onFocusChanged"(view: $View$Type, sourceText: charseq, focused: boolean, direction: integer, previouslyFocusedRect: $Rect$Type): void
public "getTransformation"(source: charseq, v: $View$Type): charseq
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReplacementTransformationMethod$Type = ($ReplacementTransformationMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReplacementTransformationMethod_ = $ReplacementTransformationMethod$Type;
}}
declare module "packages/icyllis/modernui/text/$TextLine" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Directions, $Directions$Type} from "packages/icyllis/modernui/text/$Directions"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$TabStops, $TabStops$Type} from "packages/icyllis/modernui/text/$TabStops"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"

export class $TextLine {


public "set"(paint: $TextPaint$Type, text: charseq, start: integer, limit: integer, dir: integer, directions: $Directions$Type, hasTabs: boolean, tabStops: $TabStops$Type, ellipsisStart: integer, ellipsisEnd: integer): void
public "nextTab"(h: float): float
public "metrics"(fmi: $FontMetricsInt$Type): float
public "draw"(canvas: $Canvas$Type, x: float, top: integer, y: integer, bottom: integer): void
public static "obtain"(): $TextLine
public "recycle"(): void
public "measure"(offset: integer, trailing: boolean, fmi: $FontMetricsInt$Type): float
public "measureAllOffsets"(trailing: (boolean)[], fmi: $FontMetricsInt$Type): (float)[]
public "getOffsetToLeftRightOf"(cursor: integer, toLeft: boolean): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextLine$Type = ($TextLine);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextLine_ = $TextLine$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnGenericMotionListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export interface $View$OnGenericMotionListener {

 "onGenericMotion"(arg0: $View$Type, arg1: $MotionEvent$Type): boolean

(arg0: $View$Type, arg1: $MotionEvent$Type): boolean
}

export namespace $View$OnGenericMotionListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnGenericMotionListener$Type = ($View$OnGenericMotionListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnGenericMotionListener_ = $View$OnGenericMotionListener$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$FontMetricsInt" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FontMetricsInt {
 "ascent": integer
 "descent": integer
 "leading": integer

constructor()

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "reset"(): void
public "extendBy"(ascent: integer, descent: integer, leading: integer): void
public "extendBy"(ascent: integer, descent: integer): void
public "extendBy"(fm: $FontMetricsInt$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FontMetricsInt$Type = ($FontMetricsInt);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FontMetricsInt_ = $FontMetricsInt$Type;
}}
declare module "packages/icyllis/modernui/animation/$TypeConverter" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $TypeConverter<T, V> {

 "convert"(arg0: T): V

(arg0: T): V
}

export namespace $TypeConverter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TypeConverter$Type<T, V> = ($TypeConverter<(T), (V)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TypeConverter_<T, V> = $TypeConverter$Type<(T), (V)>;
}}
declare module "packages/icyllis/modernui/mc/forge/$AdvancedOptionsFragment" {
import {$Button, $Button$Type} from "packages/icyllis/modernui/widget/$Button"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $AdvancedOptionsFragment extends $Fragment {

constructor()

public static "createDebugButton"(context: $Context$Type, text: string): $Button
public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancedOptionsFragment$Type = ($AdvancedOptionsFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancedOptionsFragment_ = $AdvancedOptionsFragment$Type;
}}
declare module "packages/icyllis/modernui/util/$DisplayMetrics" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $DisplayMetrics {
static readonly "DENSITY_LOW": integer
static readonly "DENSITY_84": integer
static readonly "DENSITY_MEDIUM": integer
static readonly "DENSITY_108": integer
static readonly "DENSITY_120": integer
static readonly "DENSITY_132": integer
static readonly "DENSITY_HIGH": integer
static readonly "DENSITY_156": integer
static readonly "DENSITY_168": integer
static readonly "DENSITY_180": integer
static readonly "DENSITY_XHIGH": integer
static readonly "DENSITY_204": integer
static readonly "DENSITY_216": integer
static readonly "DENSITY_228": integer
static readonly "DENSITY_240": integer
static readonly "DENSITY_252": integer
static readonly "DENSITY_264": integer
static readonly "DENSITY_276": integer
static readonly "DENSITY_XXHIGH": integer
static readonly "DENSITY_DEFAULT": integer
static readonly "DENSITY_DEFAULT_SCALE": float
 "widthPixels": integer
 "heightPixels": integer
 "density": float
 "densityDpi": integer
 "scaledDensity": float
 "xdpi": float
 "ydpi": float

constructor()

public "equals"(other: $DisplayMetrics$Type): boolean
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "setToDefaults"(): void
public "equalsPhysical"(other: $DisplayMetrics$Type): boolean
public "setTo"(o: $DisplayMetrics$Type): void
set "to"(value: $DisplayMetrics$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplayMetrics$Type = ($DisplayMetrics);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplayMetrics_ = $DisplayMetrics$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$StandardMenuPopup" {
import {$AdapterView$OnItemClickListener, $AdapterView$OnItemClickListener$Type} from "packages/icyllis/modernui/widget/$AdapterView$OnItemClickListener"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"
import {$AdapterView, $AdapterView$Type} from "packages/icyllis/modernui/widget/$AdapterView"
import {$MenuView, $MenuView$Type} from "packages/icyllis/modernui/view/menu/$MenuView"
import {$MenuItemImpl, $MenuItemImpl$Type} from "packages/icyllis/modernui/view/menu/$MenuItemImpl"
import {$MenuPresenter, $MenuPresenter$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$MenuPresenter$Callback, $MenuPresenter$Callback$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter$Callback"
import {$ListView, $ListView$Type} from "packages/icyllis/modernui/widget/$ListView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$SubMenuBuilder, $SubMenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$SubMenuBuilder"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$PopupWindow$OnDismissListener, $PopupWindow$OnDismissListener$Type} from "packages/icyllis/modernui/widget/$PopupWindow$OnDismissListener"
import {$View$OnKeyListener, $View$OnKeyListener$Type} from "packages/icyllis/modernui/view/$View$OnKeyListener"
import {$MenuPopup, $MenuPopup$Type} from "packages/icyllis/modernui/view/menu/$MenuPopup"

export class $StandardMenuPopup extends $MenuPopup implements $PopupWindow$OnDismissListener, $AdapterView$OnItemClickListener, $MenuPresenter, $View$OnKeyListener {

constructor(context: $Context$Type, menu: $MenuBuilder$Type, anchorView: $View$Type, overflowOnly: boolean)

public "getListView"(): $ListView
public "onDismiss"(): void
public "onKey"(v: $View$Type, keyCode: integer, event: $KeyEvent$Type): boolean
public "dismiss"(): void
public "setGravity"(gravity: integer): void
public "onSubMenuSelected"(subMenu: $SubMenuBuilder$Type): boolean
public "updateMenuView"(cleared: boolean): void
public "onCloseMenu"(menu: $MenuBuilder$Type, allMenusAreClosing: boolean): void
public "flagActionItems"(): boolean
public "isShowing"(): boolean
public "show"(): void
public "setCallback"(cb: $MenuPresenter$Callback$Type): void
public "addMenu"(menu: $MenuBuilder$Type): void
public "setForceShowIcon"(forceShow: boolean): void
public "setShowTitle"(showTitle: boolean): void
public "setHorizontalOffset"(x: integer): void
public "setAnchorView"(anchor: $View$Type): void
public "setVerticalOffset"(y: integer): void
public "setOnDismissListener"(listener: $PopupWindow$OnDismissListener$Type): void
public "onItemClick"(arg0: $AdapterView$Type<(any)>, arg1: $View$Type, arg2: integer, arg3: long): void
public "getId"(): integer
public "initForMenu"(arg0: $Context$Type, arg1: $MenuBuilder$Type): void
public "getMenuView"(arg0: $ViewGroup$Type): $MenuView
public "expandItemActionView"(arg0: $MenuBuilder$Type, arg1: $MenuItemImpl$Type): boolean
public "collapseItemActionView"(arg0: $MenuBuilder$Type, arg1: $MenuItemImpl$Type): boolean
get "listView"(): $ListView
set "gravity"(value: integer)
get "showing"(): boolean
set "callback"(value: $MenuPresenter$Callback$Type)
set "forceShowIcon"(value: boolean)
set "showTitle"(value: boolean)
set "horizontalOffset"(value: integer)
set "anchorView"(value: $View$Type)
set "verticalOffset"(value: integer)
set "onDismissListener"(value: $PopupWindow$OnDismissListener$Type)
get "id"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StandardMenuPopup$Type = ($StandardMenuPopup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StandardMenuPopup_ = $StandardMenuPopup$Type;
}}
declare module "packages/icyllis/modernui/text/style/$MetricAffectingSpan" {
import {$CharacterStyle, $CharacterStyle$Type} from "packages/icyllis/modernui/text/style/$CharacterStyle"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$UpdateLayout, $UpdateLayout$Type} from "packages/icyllis/modernui/text/style/$UpdateLayout"

export class $MetricAffectingSpan extends $CharacterStyle implements $UpdateLayout {

constructor()

public "updateMeasureState"(arg0: $TextPaint$Type): void
public "updateDrawState"(paint: $TextPaint$Type): void
public "getUnderlying"(): $MetricAffectingSpan
get "underlying"(): $MetricAffectingSpan
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetricAffectingSpan$Type = ($MetricAffectingSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetricAffectingSpan_ = $MetricAffectingSpan$Type;
}}
declare module "packages/icyllis/modernui/util/$LongSparseArray" {
import {$Cloneable, $Cloneable$Type} from "packages/java/lang/$Cloneable"

export class $LongSparseArray<E> implements $Cloneable {

constructor()
constructor(initialCapacity: integer)

public "remove"(key: long, value: any): boolean
public "remove"(key: long): E
public "get"(key: long): E
public "get"(key: long, valueIfKeyNotFound: E): E
public "put"(key: long, value: E): E
public "equals"(o: any): boolean
public "toString"(): string
public "append"(key: long, value: E): void
public "hashCode"(): integer
public "clear"(): void
public "isEmpty"(): boolean
public "replace"(key: long, value: E): E
public "replace"(key: long, oldValue: E, newValue: E): boolean
public "size"(): integer
public "putAll"(other: $LongSparseArray$Type<(any)>): void
public "putIfAbsent"(key: long, value: E): E
public "delete"(key: long): void
public "containsKey"(key: long): boolean
public "containsValue"(value: E): boolean
public "removeAt"(index: integer): E
public "removeAtRange"(index: integer, size: integer): void
public "deleteAt"(index: integer): void
public "indexOfValueByValue"(value: E): integer
public "indexOfKey"(key: long): integer
public "keyAt"(index: integer): long
public "valueAt"(index: integer): E
public "setValueAt"(index: integer, value: E): void
public "indexOfValue"(value: E): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongSparseArray$Type<E> = ($LongSparseArray<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongSparseArray_<E> = $LongSparseArray$Type<(E)>;
}}
declare module "packages/icyllis/modernui/markdown/$BlockHandler" {
import {$Node, $Node$Type} from "packages/com/vladsch/flexmark/util/ast/$Node"
import {$MarkdownVisitor, $MarkdownVisitor$Type} from "packages/icyllis/modernui/markdown/$MarkdownVisitor"

export interface $BlockHandler {

 "blockEnd"(arg0: $MarkdownVisitor$Type, arg1: $Node$Type): void
 "blockStart"(arg0: $MarkdownVisitor$Type, arg1: $Node$Type): void
}

export namespace $BlockHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockHandler$Type = ($BlockHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockHandler_ = $BlockHandler$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Config$Client" {
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$ForgeConfigSpec$EnumValue, $ForgeConfigSpec$EnumValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$EnumValue"
import {$Config$Client$WindowMode, $Config$Client$WindowMode$Type} from "packages/icyllis/modernui/mc/forge/$Config$Client$WindowMode"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"

export class $Config$Client {
static readonly "ANIM_DURATION_MIN": integer
static readonly "ANIM_DURATION_MAX": integer
static readonly "BLUR_RADIUS_MIN": integer
static readonly "BLUR_RADIUS_MAX": integer
static readonly "FONT_SCALE_MIN": float
static readonly "FONT_SCALE_MAX": float
static readonly "TOOLTIP_BORDER_COLOR_ANIM_MIN": integer
static readonly "TOOLTIP_BORDER_COLOR_ANIM_MAX": integer
static readonly "TOOLTIP_BORDER_WIDTH_MIN": float
static readonly "TOOLTIP_BORDER_WIDTH_MAX": float
static readonly "TOOLTIP_CORNER_RADIUS_MIN": float
static readonly "TOOLTIP_CORNER_RADIUS_MAX": float
static readonly "TOOLTIP_SHADOW_RADIUS_MIN": float
static readonly "TOOLTIP_SHADOW_RADIUS_MAX": float
readonly "mBlurEffect": $ForgeConfigSpec$BooleanValue
readonly "mBlurWithBackground": $ForgeConfigSpec$BooleanValue
readonly "mBackgroundDuration": $ForgeConfigSpec$IntValue
readonly "mBlurRadius": $ForgeConfigSpec$IntValue
readonly "mBackgroundColor": $ForgeConfigSpec$ConfigValue<($List<(any)>)>
readonly "mInventoryPause": $ForgeConfigSpec$BooleanValue
readonly "mTooltip": $ForgeConfigSpec$BooleanValue
readonly "mRoundedTooltip": $ForgeConfigSpec$BooleanValue
readonly "mCenterTooltipTitle": $ForgeConfigSpec$BooleanValue
readonly "mTooltipTitleBreak": $ForgeConfigSpec$BooleanValue
readonly "mExactTooltipPositioning": $ForgeConfigSpec$BooleanValue
readonly "mTooltipFill": $ForgeConfigSpec$ConfigValue<($List<(any)>)>
readonly "mTooltipStroke": $ForgeConfigSpec$ConfigValue<($List<(any)>)>
readonly "mTooltipCycle": $ForgeConfigSpec$IntValue
readonly "mTooltipWidth": $ForgeConfigSpec$DoubleValue
readonly "mTooltipRadius": $ForgeConfigSpec$DoubleValue
readonly "mTooltipShadowRadius": $ForgeConfigSpec$DoubleValue
readonly "mTooltipShadowAlpha": $ForgeConfigSpec$DoubleValue
readonly "mAdaptiveTooltipColors": $ForgeConfigSpec$BooleanValue
readonly "mDing": $ForgeConfigSpec$BooleanValue
readonly "mZoom": $ForgeConfigSpec$BooleanValue
readonly "mForceRtl": $ForgeConfigSpec$BooleanValue
readonly "mFontScale": $ForgeConfigSpec$DoubleValue
readonly "mWindowMode": $ForgeConfigSpec$EnumValue<($Config$Client$WindowMode)>
readonly "mUseNewGuiScale": $ForgeConfigSpec$BooleanValue
readonly "mRemoveTelemetry": $ForgeConfigSpec$BooleanValue
readonly "mFramerateInactive": $ForgeConfigSpec$IntValue
readonly "mFramerateMinimized": $ForgeConfigSpec$IntValue
readonly "mMasterVolumeInactive": $ForgeConfigSpec$DoubleValue
readonly "mMasterVolumeMinimized": $ForgeConfigSpec$DoubleValue
readonly "mScrollbarSize": $ForgeConfigSpec$IntValue
readonly "mTouchSlop": $ForgeConfigSpec$IntValue
readonly "mMinScrollbarTouchTarget": $ForgeConfigSpec$IntValue
readonly "mMinimumFlingVelocity": $ForgeConfigSpec$IntValue
readonly "mMaximumFlingVelocity": $ForgeConfigSpec$IntValue
readonly "mOverscrollDistance": $ForgeConfigSpec$IntValue
readonly "mOverflingDistance": $ForgeConfigSpec$IntValue
readonly "mVerticalScrollFactor": $ForgeConfigSpec$DoubleValue
readonly "mHorizontalScrollFactor": $ForgeConfigSpec$DoubleValue
readonly "mAntiAliasing": $ForgeConfigSpec$BooleanValue
readonly "mAutoHinting": $ForgeConfigSpec$BooleanValue
readonly "mFirstFontFamily": $ForgeConfigSpec$ConfigValue<(string)>
readonly "mFallbackFontFamilyList": $ForgeConfigSpec$ConfigValue<($List<(any)>)>
readonly "mFontRegistrationList": $ForgeConfigSpec$ConfigValue<($List<(any)>)>
readonly "mUseColorEmoji": $ForgeConfigSpec$BooleanValue
readonly "mEmojiShortcodes": $ForgeConfigSpec$BooleanValue
 "mLastWindowMode": $Config$Client$WindowMode


public "saveAndReloadAsync"(): void
public "saveAsync"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Client$Type = ($Config$Client);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config$Client_ = $Config$Client$Type;
}}
declare module "packages/icyllis/modernui/text/$PackedIntVector" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PackedIntVector {

constructor(columns: integer)

public "getValue"(row: integer, column: integer): integer
public "size"(): integer
public "setValue"(row: integer, column: integer, value: integer): void
public "insertAt"(row: integer, values: (integer)[]): void
public "width"(): integer
public "deleteAt"(row: integer, count: integer): void
public "adjustValuesBelow"(startRow: integer, column: integer, delta: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PackedIntVector$Type = ($PackedIntVector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PackedIntVector_ = $PackedIntVector$Type;
}}
declare module "packages/icyllis/modernui/text/$BoringLayout$Metrics" {
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"

export class $BoringLayout$Metrics extends $FontMetricsInt {
 "width": integer
 "ascent": integer
 "descent": integer
 "leading": integer

constructor()

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "reset"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BoringLayout$Metrics$Type = ($BoringLayout$Metrics);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BoringLayout$Metrics_ = $BoringLayout$Metrics$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$LifecycleObserver" {
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$Lifecycle$Event, $Lifecycle$Event$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle$Event"

export interface $LifecycleObserver {

 "onStart"(owner: $LifecycleOwner$Type): void
 "onPause"(owner: $LifecycleOwner$Type): void
 "onStop"(owner: $LifecycleOwner$Type): void
 "onDestroy"(owner: $LifecycleOwner$Type): void
 "onResume"(owner: $LifecycleOwner$Type): void
 "onCreate"(owner: $LifecycleOwner$Type): void
 "onStateChanged"(source: $LifecycleOwner$Type, event: $Lifecycle$Event$Type): void
}

export namespace $LifecycleObserver {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LifecycleObserver$Type = ($LifecycleObserver);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LifecycleObserver_ = $LifecycleObserver$Type;
}}
declare module "packages/icyllis/modernui/widget/$ForwardingListener" {
import {$ShowableListMenu, $ShowableListMenu$Type} from "packages/icyllis/modernui/view/menu/$ShowableListMenu"
import {$View$OnAttachStateChangeListener, $View$OnAttachStateChangeListener$Type} from "packages/icyllis/modernui/view/$View$OnAttachStateChangeListener"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$View$OnTouchListener, $View$OnTouchListener$Type} from "packages/icyllis/modernui/view/$View$OnTouchListener"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export class $ForwardingListener implements $View$OnTouchListener, $View$OnAttachStateChangeListener {

constructor(view: $View$Type)

public "onViewDetachedFromWindow"(v: $View$Type): void
public "onViewAttachedToWindow"(v: $View$Type): void
public "onTouch"(v: $View$Type, event: $MotionEvent$Type): boolean
public "getPopup"(): $ShowableListMenu
get "popup"(): $ShowableListMenu
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForwardingListener$Type = ($ForwardingListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForwardingListener_ = $ForwardingListener$Type;
}}
declare module "packages/icyllis/modernui/mc/$MuiScreen" {
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$ScreenCallback, $ScreenCallback$Type} from "packages/icyllis/modernui/mc/$ScreenCallback"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export interface $MuiScreen {

 "getFragment"(): $Fragment
 "self"(): $Screen
 "getPreviousScreen"(): $Screen
 "isMenuScreen"(): boolean
 "onBackPressed"(): void
 "getCallback"(): $ScreenCallback
}

export namespace $MuiScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiScreen$Type = ($MuiScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiScreen_ = $MuiScreen$Type;
}}
declare module "packages/icyllis/modernui/view/$MenuItem" {
import {$ActionProvider, $ActionProvider$Type} from "packages/icyllis/modernui/view/$ActionProvider"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$SubMenu, $SubMenu$Type} from "packages/icyllis/modernui/view/$SubMenu"
import {$MenuItem$OnActionExpandListener, $MenuItem$OnActionExpandListener$Type} from "packages/icyllis/modernui/view/$MenuItem$OnActionExpandListener"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$MenuItem$OnMenuItemClickListener, $MenuItem$OnMenuItemClickListener$Type} from "packages/icyllis/modernui/view/$MenuItem$OnMenuItemClickListener"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ContextMenu$ContextMenuInfo, $ContextMenu$ContextMenuInfo$Type} from "packages/icyllis/modernui/view/$ContextMenu$ContextMenuInfo"

export interface $MenuItem {

 "setChecked"(arg0: boolean): $MenuItem
 "isEnabled"(): boolean
 "getItemId"(): integer
 "setEnabled"(arg0: boolean): $MenuItem
 "setVisible"(arg0: boolean): $MenuItem
 "isVisible"(): boolean
 "setTooltipText"(tooltipText: charseq): $MenuItem
 "getTooltipText"(): charseq
 "setTitle"(arg0: charseq): $MenuItem
 "getOrder"(): integer
 "getIcon"(): $Drawable
 "isChecked"(): boolean
 "getTitle"(): charseq
 "setOnMenuItemClickListener"(arg0: $MenuItem$OnMenuItemClickListener$Type): $MenuItem
 "setAlphabeticShortcut"(arg0: character): $MenuItem
 "setAlphabeticShortcut"(alphaChar: character, alphaModifiers: integer): $MenuItem
 "setIcon"(arg0: $Drawable$Type): $MenuItem
 "setShortcut"(arg0: character, arg1: character): $MenuItem
 "setShortcut"(numericChar: character, alphaChar: character, numericModifiers: integer, alphaModifiers: integer): $MenuItem
 "getGroupId"(): integer
 "isActionViewExpanded"(): boolean
 "setShowAsActionFlags"(arg0: integer): $MenuItem
 "setContentDescription"(contentDescription: charseq): $MenuItem
 "getContentDescription"(): charseq
 "requiresActionButton"(): boolean
 "getAlphabeticShortcut"(): character
 "setOnActionExpandListener"(arg0: $MenuItem$OnActionExpandListener$Type): $MenuItem
 "getNumericModifiers"(): integer
 "getAlphabeticModifiers"(): integer
 "setShowAsAction"(arg0: integer): void
 "isCheckable"(): boolean
 "hasSubMenu"(): boolean
 "setActionView"(arg0: $View$Type): $MenuItem
 "getNumericShortcut"(): character
 "setIconTintList"(tint: $ColorStateList$Type): $MenuItem
 "getSubMenu"(): $SubMenu
 "getMenuInfo"(): $ContextMenu$ContextMenuInfo
 "getActionView"(): $View
 "setActionProvider"(arg0: $ActionProvider$Type): $MenuItem
 "setTitleCondensed"(arg0: charseq): $MenuItem
 "getTitleCondensed"(): charseq
 "setNumericShortcut"(arg0: character): $MenuItem
 "setNumericShortcut"(numericChar: character, numericModifiers: integer): $MenuItem
 "getIconTintList"(): $ColorStateList
 "setCheckable"(arg0: boolean): $MenuItem
 "expandActionView"(): boolean
 "requiresOverflow"(): boolean
 "collapseActionView"(): boolean
 "getActionProvider"(): $ActionProvider
}

export namespace $MenuItem {
const SHOW_AS_ACTION_NEVER: integer
const SHOW_AS_ACTION_IF_ROOM: integer
const SHOW_AS_ACTION_ALWAYS: integer
const SHOW_AS_ACTION_WITH_TEXT: integer
const SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuItem$Type = ($MenuItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuItem_ = $MenuItem$Type;
}}
declare module "packages/icyllis/modernui/text/style/$AbsoluteSizeSpan" {
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $AbsoluteSizeSpan extends $MetricAffectingSpan implements $ParcelableSpan {

constructor(src: $Parcel$Type)
constructor(size: integer, scaled: boolean)
constructor(size: integer)

public "getSize"(): integer
public "updateMeasureState"(paint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
public "isScaled"(): boolean
get "size"(): integer
get "spanTypeId"(): integer
get "scaled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsoluteSizeSpan$Type = ($AbsoluteSizeSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsoluteSizeSpan_ = $AbsoluteSizeSpan$Type;
}}
declare module "packages/icyllis/modernui/text/style/$LeadingMarginSpan" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ParagraphStyle, $ParagraphStyle$Type} from "packages/icyllis/modernui/text/style/$ParagraphStyle"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"

export interface $LeadingMarginSpan extends $ParagraphStyle {

 "drawMargin"(c: $Canvas$Type, p: $TextPaint$Type, left: integer, right: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
 "getLeadingMargin"(arg0: boolean): integer
 "drawLeadingMargin"(arg0: $Canvas$Type, arg1: $TextPaint$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: charseq, arg8: integer, arg9: integer, arg10: boolean, arg11: $Layout$Type): void
}

export namespace $LeadingMarginSpan {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LeadingMarginSpan$Type = ($LeadingMarginSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LeadingMarginSpan_ = $LeadingMarginSpan$Type;
}}
declare module "packages/icyllis/modernui/widget/$ArrayAdapter" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Filter, $Filter$Type} from "packages/icyllis/modernui/widget/$Filter"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$BaseAdapter, $BaseAdapter$Type} from "packages/icyllis/modernui/widget/$BaseAdapter"
import {$List, $List$Type} from "packages/java/util/$List"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$Filterable, $Filterable$Type} from "packages/icyllis/modernui/widget/$Filterable"

export class $ArrayAdapter<T> extends $BaseAdapter implements $Filterable {

constructor(context: $Context$Type, objects: (T)[])
constructor(context: $Context$Type, objects: $List$Type<(T)>)

public "add"(object: T): void
public "remove"(object: T): void
public "insert"(object: T, index: integer): void
public "clear"(): void
public "addAll"(items: (T)[]): void
public "addAll"(collection: $Collection$Type<(any)>): void
public "sort"(comparator: $Comparator$Type<(any)>): void
public "getFilter"(): $Filter
public "getCount"(): integer
public "getItem"(position: integer): T
public "getPosition"(item: T): integer
public "getItemId"(position: integer): long
public "getDropDownView"(position: integer, convertView: $View$Type, parent: $ViewGroup$Type): $View
public "getView"(position: integer, convertView: $View$Type, parent: $ViewGroup$Type): $View
public "notifyDataSetChanged"(): void
public "setNotifyOnChange"(notifyOnChange: boolean): void
get "filter"(): $Filter
get "count"(): integer
set "notifyOnChange"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrayAdapter$Type<T> = ($ArrayAdapter<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrayAdapter_<T> = $ArrayAdapter$Type<(T)>;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuBuilder$Callback" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"

export interface $MenuBuilder$Callback {

 "onMenuItemSelected"(arg0: $MenuBuilder$Type, arg1: $MenuItem$Type): boolean
 "onMenuModeChange"(arg0: $MenuBuilder$Type): void
}

export namespace $MenuBuilder$Callback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBuilder$Callback$Type = ($MenuBuilder$Callback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBuilder$Callback_ = $MenuBuilder$Callback$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/$GLShaderManager$Listener" {
import {$GLShaderManager, $GLShaderManager$Type} from "packages/icyllis/modernui/mc/testforge/shader/$GLShaderManager"

export interface $GLShaderManager$Listener {

 "onReload"(arg0: $GLShaderManager$Type): void

(arg0: $GLShaderManager$Type): void
}

export namespace $GLShaderManager$Listener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLShaderManager$Listener$Type = ($GLShaderManager$Listener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLShaderManager$Listener_ = $GLShaderManager$Listener$Type;
}}
declare module "packages/icyllis/modernui/widget/$CheckBox" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$CompoundButton, $CompoundButton$Type} from "packages/icyllis/modernui/widget/$CompoundButton"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $CheckBox extends $CompoundButton {
static readonly "CHECKED_STATE_SET": (integer)[]
static readonly "UNKNOWN_BORING": $BoringLayout$Metrics
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CheckBox$Type = ($CheckBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CheckBox_ = $CheckBox$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$Observer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $Observer<T> {

 "onChanged"(arg0: T): void

(arg0: T): void
}

export namespace $Observer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Observer$Type<T> = ($Observer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Observer_<T> = $Observer$Type<(T)>;
}}
declare module "packages/icyllis/modernui/audio/$SoundStream" {
import {$FloatBuffer, $FloatBuffer$Type} from "packages/java/nio/$FloatBuffer"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"

export class $SoundStream implements $AutoCloseable {

constructor()

public "close"(): void
public "decodeFrame"(arg0: $FloatBuffer$Type): $FloatBuffer
public "getSampleRate"(): integer
public "getChannels"(): integer
public "getSampleOffset"(): integer
public static "f_to_s16"(s: float): short
public static "s16_to_f"(s: short): float
get "sampleRate"(): integer
get "channels"(): integer
get "sampleOffset"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoundStream$Type = ($SoundStream);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoundStream_ = $SoundStream$Type;
}}
declare module "packages/icyllis/modernui/core/$Choreographer" {
import {$Choreographer$FrameCallback, $Choreographer$FrameCallback$Type} from "packages/icyllis/modernui/core/$Choreographer$FrameCallback"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $Choreographer {
static readonly "CALLBACK_INPUT": integer
static readonly "CALLBACK_ANIMATION": integer
static readonly "CALLBACK_TRAVERSAL": integer
static readonly "CALLBACK_COMMIT": integer


public static "getInstance"(): $Choreographer
public "postCallbackDelayed"(callbackType: integer, action: $Runnable$Type, token: any, delayMillis: long): void
public "getFrameTime"(): long
public "getFrameTimeNanos"(): long
public "postCallback"(callbackType: integer, action: $Runnable$Type, token: any): void
public "removeCallbacks"(callbackType: integer, action: $Runnable$Type, token: any): void
public "postFrameCallback"(callback: $Choreographer$FrameCallback$Type): void
public static "subtractFrameDelay"(delayMillis: long): long
public static "getFrameDelay"(): long
public static "setFrameDelay"(frameDelay: long): void
public "removeFrameCallback"(callback: $Choreographer$FrameCallback$Type): void
public "getLastFrameTimeNanos"(): long
public "postFrameCallbackDelayed"(callback: $Choreographer$FrameCallback$Type, delayMillis: long): void
get "instance"(): $Choreographer
get "frameTime"(): long
get "frameTimeNanos"(): long
get "frameDelay"(): long
set "frameDelay"(value: long)
get "lastFrameTimeNanos"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Choreographer$Type = ($Choreographer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Choreographer_ = $Choreographer$Type;
}}
declare module "packages/icyllis/modernui/text/$Layout" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Directions, $Directions$Type} from "packages/icyllis/modernui/text/$Directions"
import {$Layout$Alignment, $Layout$Alignment$Type} from "packages/icyllis/modernui/text/$Layout$Alignment"
import {$FloatArrayList, $FloatArrayList$Type} from "packages/it/unimi/dsi/fastutil/floats/$FloatArrayList"

export class $Layout {
static readonly "DIR_LEFT_TO_RIGHT": integer
static readonly "DIR_RIGHT_TO_LEFT": integer
static readonly "TAB_INCREMENT": float


public "getText"(): charseq
public "primaryIsTrailingPreviousAllLineOffsets"(line: integer): (boolean)[]
public "draw"(canvas: $Canvas$Type): void
public "getAlignment"(): $Layout$Alignment
public "drawText"(canvas: $Canvas$Type, firstLine: integer, lastLine: integer): void
public "getPaint"(): $TextPaint
public "getWidth"(): integer
public "getHeight"(cap: boolean): integer
public "getHeight"(): integer
public "getLineWidth"(line: integer): float
public "drawBackground"(canvas: $Canvas$Type, firstLine: integer, lastLine: integer): void
public "getLineDescent"(arg0: integer): integer
public "getLineTop"(arg0: integer): integer
public "getLineStart"(arg0: integer): integer
public "getLineVisibleEnd"(line: integer): integer
public "getLineCount"(): integer
public "getLineForOffset"(offset: integer): integer
public "getLineDirections"(arg0: integer): $Directions
public "getEllipsisCount"(arg0: integer): integer
public "getIndentAdjust"(line: integer, alignment: $Layout$Alignment$Type): integer
public "getLineContainsTab"(arg0: integer): boolean
public "getEllipsisStart"(arg0: integer): integer
public "getLineMax"(line: integer): float
public "getLineBottom"(line: integer): integer
public "getLineEnd"(line: integer): integer
public "getLineForVertical"(vertical: integer): integer
public "getParagraphLeft"(line: integer): integer
public "getEllipsizedWidth"(): integer
public "getLineAscent"(line: integer): integer
public "getLineBaseline"(line: integer): integer
public "getLineBounds"(line: integer, bounds: $Rect$Type): integer
public "increaseWidthTo"(wid: integer): void
public "getTopPadding"(): integer
public "getBottomPadding"(): integer
public "getParagraphRight"(line: integer): integer
public "getOffsetToLeftOf"(offset: integer): integer
public "getOffsetToRightOf"(offset: integer): integer
public "isRtlCharAt"(offset: integer): boolean
public "isLevelBoundary"(offset: integer): boolean
public static "getDesiredWidth"(source: charseq, start: integer, end: integer, paint: $TextPaint$Type): float
public static "getDesiredWidth"(source: charseq, start: integer, end: integer, paint: $TextPaint$Type, textDir: $TextDirectionHeuristic$Type): float
public static "getDesiredWidth"(source: charseq, paint: $TextPaint$Type): float
public "getLineLeft"(line: integer): float
public "getLineRight"(line: integer): float
public "getSelectionPath"(start: integer, end: integer, dest: $FloatArrayList$Type): void
public "getCursorPath"(point: integer, dest: $FloatArrayList$Type, buffer: charseq): void
public "getTextDirectionHeuristic"(): $TextDirectionHeuristic
public "getOffsetForHorizontal"(line: integer, horiz: float): integer
public "getOffsetForHorizontal"(line: integer, horiz: float, primary: boolean): integer
public static "getDesiredWidthWithLimit"(source: charseq, start: integer, end: integer, paint: $TextPaint$Type, textDir: $TextDirectionHeuristic$Type, upperLimit: float): float
public "getPrimaryHorizontal"(offset: integer): float
public "getPrimaryHorizontal"(offset: integer, clamped: boolean): float
public "getParagraphDirection"(arg0: integer): integer
public "getLineRangeForDraw"(canvas: $Canvas$Type): long
public "primaryIsTrailingPrevious"(offset: integer): boolean
public "getParagraphAlignment"(line: integer): $Layout$Alignment
public "getSecondaryHorizontal"(offset: integer): float
public "getSecondaryHorizontal"(offset: integer, clamped: boolean): float
get "text"(): charseq
get "alignment"(): $Layout$Alignment
get "paint"(): $TextPaint
get "width"(): integer
get "height"(): integer
get "lineCount"(): integer
get "ellipsizedWidth"(): integer
get "topPadding"(): integer
get "bottomPadding"(): integer
get "textDirectionHeuristic"(): $TextDirectionHeuristic
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Layout$Type = ($Layout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Layout_ = $Layout$Type;
}}
declare module "packages/icyllis/modernui/widget/$RelativeRadioGroup$OnCheckedChangeListener" {
import {$RelativeRadioGroup, $RelativeRadioGroup$Type} from "packages/icyllis/modernui/widget/$RelativeRadioGroup"

export interface $RelativeRadioGroup$OnCheckedChangeListener {

 "onCheckedChanged"(arg0: $RelativeRadioGroup$Type, arg1: integer): void

(arg0: $RelativeRadioGroup$Type, arg1: integer): void
}

export namespace $RelativeRadioGroup$OnCheckedChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RelativeRadioGroup$OnCheckedChangeListener$Type = ($RelativeRadioGroup$OnCheckedChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RelativeRadioGroup$OnCheckedChangeListener_ = $RelativeRadioGroup$OnCheckedChangeListener$Type;
}}
declare module "packages/icyllis/modernui/widget/$PagerAdapter" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ClassLoader, $ClassLoader$Type} from "packages/java/lang/$ClassLoader"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$Parcelable, $Parcelable$Type} from "packages/icyllis/modernui/util/$Parcelable"

export class $PagerAdapter {
static readonly "POSITION_UNCHANGED": integer
static readonly "POSITION_NONE": integer

constructor()

public "getPageTitle"(position: integer): charseq
public "startUpdate"(container: $ViewGroup$Type): void
public "destroyItem"(arg0: $ViewGroup$Type, arg1: integer, arg2: any): void
public "finishUpdate"(container: $ViewGroup$Type): void
public "getPageWidth"(position: integer): float
public "instantiateItem"(arg0: $ViewGroup$Type, arg1: integer): any
public "getItemPosition"(object: any): integer
public "setPrimaryItem"(container: $ViewGroup$Type, position: integer, object: any): void
public "isViewFromObject"(arg0: $View$Type, arg1: any): boolean
public "getCount"(): integer
public "registerDataSetObserver"(observer: $DataSetObserver$Type): void
public "unregisterDataSetObserver"(observer: $DataSetObserver$Type): void
public "notifyDataSetChanged"(): void
public "saveState"(): $Parcelable
public "restoreState"(state: $Parcelable$Type, loader: $ClassLoader$Type): void
get "count"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PagerAdapter$Type = ($PagerAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PagerAdapter_ = $PagerAdapter$Type;
}}
declare module "packages/icyllis/modernui/text/$PrecomputedText" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$LineBreakConfig, $LineBreakConfig$Type} from "packages/icyllis/modernui/graphics/text/$LineBreakConfig"
import {$IntStream, $IntStream$Type} from "packages/java/util/stream/$IntStream"
import {$PrecomputedText$Params, $PrecomputedText$Params$Type} from "packages/icyllis/modernui/text/$PrecomputedText$Params"
import {$PrecomputedText$ParagraphInfo, $PrecomputedText$ParagraphInfo$Type} from "packages/icyllis/modernui/text/$PrecomputedText$ParagraphInfo"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$MeasuredParagraph, $MeasuredParagraph$Type} from "packages/icyllis/modernui/text/$MeasuredParagraph"

export class $PrecomputedText implements $Spannable {


public "length"(): integer
public "toString"(): string
public "charAt"(index: integer): character
public "subSequence"(start: integer, end: integer): charseq
public static "create"(text: charseq, params: $PrecomputedText$Params$Type): $PrecomputedText
public "getText"(): charseq
public "getParams"(): $PrecomputedText$Params
public "getParagraphStart"(paraIndex: integer): integer
public "getParagraphCount"(): integer
public "setSpan"(what: any, start: integer, end: integer, flags: integer): void
public "getWidth"(start: integer, end: integer): float
public "getEnd"(): integer
public "checkResultUsable"(start: integer, end: integer, textDir: $TextDirectionHeuristic$Type, paint: $TextPaint$Type, lbConfig: $LineBreakConfig$Type): integer
public "findParaIndex"(pos: integer): integer
public "getParagraphInfo"(): ($PrecomputedText$ParagraphInfo)[]
public "getParagraphEnd"(paraIndex: integer): integer
public "getFontMetricsInt"(start: integer, end: integer, outMetrics: $FontMetricsInt$Type): void
public "getMemoryUsage"(): integer
public static "createMeasuredParagraphs"(text: charseq, params: $PrecomputedText$Params$Type, start: integer, end: integer, computeLayout: boolean): ($PrecomputedText$ParagraphInfo)[]
public "getMeasuredParagraph"(paraIndex: integer): $MeasuredParagraph
public "getStart"(): integer
public "removeSpan"(what: any): void
public "nextSpanTransition"(start: integer, limit: integer, type: $Class$Type<(any)>): integer
public "getSpanStart"(tag: any): integer
public "getSpanFlags"(tag: any): integer
public "getSpans"<T>(start: integer, end: integer, type: $Class$Type<(any)>, dest: $List$Type<(T)>): $List<(T)>
public "getSpanEnd"(tag: any): integer
public "removeSpan"(span: any, flags: integer): void
public "getSpans"<T>(start: integer, end: integer, type: $Class$Type<(any)>): $List<(T)>
public static "compare"(arg0: charseq, arg1: charseq): integer
public "isEmpty"(): boolean
public "codePoints"(): $IntStream
public "chars"(): $IntStream
get "text"(): charseq
get "params"(): $PrecomputedText$Params
get "paragraphCount"(): integer
get "end"(): integer
get "paragraphInfo"(): ($PrecomputedText$ParagraphInfo)[]
get "memoryUsage"(): integer
get "start"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PrecomputedText$Type = ($PrecomputedText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PrecomputedText_ = $PrecomputedText$Type;
}}
declare module "packages/icyllis/modernui/mc/$DashboardFragment" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $DashboardFragment extends $Fragment {
static readonly "CREDIT_TEXT": string

constructor()

public "onAttach"(context: $Context$Type): void
public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
public "onDetach"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DashboardFragment$Type = ($DashboardFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DashboardFragment_ = $DashboardFragment$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$ScaleDrawable" {
import {$DrawableWrapper, $DrawableWrapper$Type} from "packages/icyllis/modernui/graphics/drawable/$DrawableWrapper"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"

export class $ScaleDrawable extends $DrawableWrapper {
static readonly "MAX_LEVEL": integer

constructor(drawable: $Drawable$Type, gravity: integer, scaleWidth: float, scaleHeight: float)

public "draw"(canvas: $Canvas$Type): void
public "setGravity"(gravity: integer): void
public "setScaleWidth"(scaleWidth: float): void
public "setScaleHeight"(scaleHeight: float): void
set "gravity"(value: integer)
set "scaleWidth"(value: float)
set "scaleHeight"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScaleDrawable$Type = ($ScaleDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScaleDrawable_ = $ScaleDrawable$Type;
}}
declare module "packages/icyllis/modernui/resources/$Theme" {
import {$Resources, $Resources$Type} from "packages/icyllis/modernui/resources/$Resources"

export class $Theme {

constructor(resources: $Resources$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Theme$Type = ($Theme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Theme_ = $Theme$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$GlyphManagerForge$VanillaGlyph" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

/**
 * 
 * @deprecated
 */
export class $GlyphManagerForge$VanillaGlyph {

constructor(advance: float, baselineX: float, baselineY: float, width: float, height: float, u1: float, v1: float, u2: float, v2: float)

public "getAdvance"(): float
public "drawGlyph"(builder: $VertexConsumer$Type, x: float, y: float, r: integer, g: integer, b: integer, a: integer): void
public "drawGlyph"(matrix: $Matrix4f$Type, buffer: $MultiBufferSource$Type, x: float, y: float, r: integer, g: integer, b: integer, a: integer, seeThrough: boolean, packedLight: integer): void
get "advance"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlyphManagerForge$VanillaGlyph$Type = ($GlyphManagerForge$VanillaGlyph);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlyphManagerForge$VanillaGlyph_ = $GlyphManagerForge$VanillaGlyph$Type;
}}
declare module "packages/icyllis/modernui/core/$ActivityWindow" {
import {$ViewRoot, $ViewRoot$Type} from "packages/icyllis/modernui/view/$ViewRoot"
import {$Window, $Window$Type} from "packages/icyllis/modernui/core/$Window"
import {$Monitor, $Monitor$Type} from "packages/icyllis/modernui/core/$Monitor"

export class $ActivityWindow extends $Window {
static readonly "LAST_SYSTEM_WINDOW": integer


public "install"(root: $ViewRoot$Type): void
public "center"(monitor: $Monitor$Type): void
public "getScreenY"(): integer
public "getScreenX"(): integer
public "getScreenWidth"(): integer
public "getScreenHeight"(): integer
public "getWidth"(): integer
public "getHeight"(): integer
public static "createMainWindow"(title: string, width: integer, height: integer, monitor: $Monitor$Type): $ActivityWindow
public static "createMainWindow"(title: string, width: integer, height: integer): $ActivityWindow
get "screenY"(): integer
get "screenX"(): integer
get "screenWidth"(): integer
get "screenHeight"(): integer
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActivityWindow$Type = ($ActivityWindow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActivityWindow_ = $ActivityWindow$Type;
}}
declare module "packages/icyllis/modernui/mc/$MarkdownFragment" {
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $MarkdownFragment extends $Fragment {

constructor()

public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
public "onCreate"(savedInstanceState: $DataSet$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownFragment$Type = ($MarkdownFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownFragment_ = $MarkdownFragment$Type;
}}
declare module "packages/icyllis/modernui/core/$CancellationSignal$OnCancelListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $CancellationSignal$OnCancelListener {

 "onCancel"(): void

(): void
}

export namespace $CancellationSignal$OnCancelListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CancellationSignal$OnCancelListener$Type = ($CancellationSignal$OnCancelListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CancellationSignal$OnCancelListener_ = $CancellationSignal$OnCancelListener$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$ArcProgram" {
import {$GLProgram, $GLProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/$GLProgram"
import {$ArcProgram$Stroke, $ArcProgram$Stroke$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$ArcProgram$Stroke"
import {$ArcProgram$Fill, $ArcProgram$Fill$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$ArcProgram$Fill"

/**
 * 
 * @deprecated
 */
export class $ArcProgram extends $GLProgram {


public static "fill"(): $ArcProgram$Fill
public static "stroke"(): $ArcProgram$Stroke
public static "createPrograms"(): void
public "setCenter"(x: float, y: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcProgram$Type = ($ArcProgram);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcProgram_ = $ArcProgram$Type;
}}
declare module "packages/icyllis/modernui/view/$SubMenu" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$Menu, $Menu$Type} from "packages/icyllis/modernui/view/$Menu"

export interface $SubMenu extends $Menu {

 "getItem"(): $MenuItem
 "clearHeader"(): void
 "setHeaderView"(arg0: $View$Type): $SubMenu
 "setHeaderIcon"(arg0: $Drawable$Type): $SubMenu
 "setHeaderTitle"(arg0: charseq): $SubMenu
 "setIcon"(arg0: $Drawable$Type): $SubMenu
 "add"(arg0: charseq): $MenuItem
 "add"(arg0: integer, arg1: integer, arg2: integer, arg3: charseq): $MenuItem
 "clear"(): void
 "size"(): integer
 "close"(): void
 "getItem"(arg0: integer): $MenuItem
 "setQwertyMode"(arg0: boolean): void
 "removeItem"(arg0: integer): void
 "addSubMenu"(arg0: integer, arg1: integer, arg2: integer, arg3: charseq): $SubMenu
 "addSubMenu"(arg0: charseq): $SubMenu
 "setGroupCheckable"(arg0: integer, arg1: boolean, arg2: boolean): void
 "setGroupEnabled"(arg0: integer, arg1: boolean): void
 "hasVisibleItems"(): boolean
 "findItem"(arg0: integer): $MenuItem
 "isShortcutKey"(arg0: integer, arg1: $KeyEvent$Type): boolean
 "setGroupVisible"(arg0: integer, arg1: boolean): void
 "performShortcut"(arg0: integer, arg1: $KeyEvent$Type, arg2: integer): boolean
 "removeGroup"(arg0: integer): void
 "setGroupDividerEnabled"(arg0: boolean): void
 "performIdentifierAction"(arg0: integer, arg1: integer): boolean
}

export namespace $SubMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SubMenu$Type = ($SubMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SubMenu_ = $SubMenu$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$LifecycleOwner" {
import {$Lifecycle, $Lifecycle$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle"

export interface $LifecycleOwner {

 "getLifecycle"(): $Lifecycle

(): $Lifecycle
}

export namespace $LifecycleOwner {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LifecycleOwner$Type = ($LifecycleOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LifecycleOwner_ = $LifecycleOwner$Type;
}}
declare module "packages/icyllis/modernui/util/$Log" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"

export class $Log {
static readonly "LOGGER": $Logger
static readonly "TRACE": integer
static readonly "DEBUG": integer
static readonly "INFO": integer
static readonly "WARN": integer
static readonly "ERROR": integer
static readonly "FATAL": integer


public static "info"(tag: string, msg: string): void
public static "info"(tag: string, msg: string, throwable: $Throwable$Type): void
public static "info"(tag: string, msg: string, ...params: (any)[]): void
public static "printf"(level: integer, tag: string, format: string, ...params: (any)[]): void
public static "trace"(tag: string, msg: string): void
public static "trace"(tag: string, msg: string, ...params: (any)[]): void
public static "trace"(tag: string, msg: string, throwable: $Throwable$Type): void
public static "debug"(tag: string, msg: string, throwable: $Throwable$Type): void
public static "debug"(tag: string, msg: string): void
public static "debug"(tag: string, msg: string, ...params: (any)[]): void
public static "error"(tag: string, msg: string, ...params: (any)[]): void
public static "error"(tag: string, msg: string, throwable: $Throwable$Type): void
public static "error"(tag: string, msg: string): void
public static "warn"(tag: string, msg: string): void
public static "warn"(tag: string, msg: string, throwable: $Throwable$Type): void
public static "warn"(tag: string, msg: string, ...params: (any)[]): void
public static "setLevel"(level: integer): void
public static "throwing"<T extends $Throwable>(throwable: T): T
public static "fatal"(tag: string, msg: string, ...params: (any)[]): void
public static "fatal"(tag: string, msg: string): void
public static "fatal"(tag: string, msg: string, throwable: $Throwable$Type): void
public static "catching"(throwable: $Throwable$Type): void
set "level"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Log$Type = ($Log);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Log_ = $Log$Type;
}}
declare module "packages/icyllis/modernui/animation/$ColorEvaluator" {
import {$TypeEvaluator, $TypeEvaluator$Type} from "packages/icyllis/modernui/animation/$TypeEvaluator"

export class $ColorEvaluator implements $TypeEvaluator<(integer)> {


public static "getInstance"(): $ColorEvaluator
public "evaluate"(fraction: float, startValue: integer, endValue: integer): integer
public static "evaluate"(fraction: float, startValue: integer, endValue: integer): integer
get "instance"(): $ColorEvaluator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorEvaluator$Type = ($ColorEvaluator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorEvaluator_ = $ColorEvaluator$Type;
}}
declare module "packages/icyllis/modernui/text/$DynamicLayout$Builder" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$TextUtils$TruncateAt, $TextUtils$TruncateAt$Type} from "packages/icyllis/modernui/text/$TextUtils$TruncateAt"
import {$Layout$Alignment, $Layout$Alignment$Type} from "packages/icyllis/modernui/text/$Layout$Alignment"
import {$DynamicLayout, $DynamicLayout$Type} from "packages/icyllis/modernui/text/$DynamicLayout"

export class $DynamicLayout$Builder {


public "build"(): $DynamicLayout
public "setAlignment"(alignment: $Layout$Alignment$Type): $DynamicLayout$Builder
public "setIncludePad"(includePad: boolean): $DynamicLayout$Builder
public "setDisplayText"(display: charseq): $DynamicLayout$Builder
public "setEllipsizedWidth"(ellipsizedWidth: integer): $DynamicLayout$Builder
public "setEllipsize"(ellipsize: $TextUtils$TruncateAt$Type): $DynamicLayout$Builder
public "setTextDirection"(textDir: $TextDirectionHeuristic$Type): $DynamicLayout$Builder
public "setFallbackLineSpacing"(fallbackLineSpacing: boolean): $DynamicLayout$Builder
set "alignment"(value: $Layout$Alignment$Type)
set "includePad"(value: boolean)
set "displayText"(value: charseq)
set "ellipsizedWidth"(value: integer)
set "ellipsize"(value: $TextUtils$TruncateAt$Type)
set "textDirection"(value: $TextDirectionHeuristic$Type)
set "fallbackLineSpacing"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicLayout$Builder$Type = ($DynamicLayout$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicLayout$Builder_ = $DynamicLayout$Builder$Type;
}}
declare module "packages/icyllis/modernui/widget/$ExpandableListConnector" {
import {$Filter, $Filter$Type} from "packages/icyllis/modernui/widget/$Filter"
import {$BaseAdapter, $BaseAdapter$Type} from "packages/icyllis/modernui/widget/$BaseAdapter"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$Filterable, $Filterable$Type} from "packages/icyllis/modernui/widget/$Filterable"
import {$ExpandableListAdapter, $ExpandableListAdapter$Type} from "packages/icyllis/modernui/widget/$ExpandableListAdapter"

export class $ExpandableListConnector extends $BaseAdapter implements $Filterable {

constructor(expandableListAdapter: $ExpandableListAdapter$Type)

public "isEmpty"(): boolean
public "getFilter"(): $Filter
public "getCount"(): integer
public "isEnabled"(flatListPos: integer): boolean
public "getItem"(flatListPos: integer): any
public "getItemId"(flatListPos: integer): long
public "getView"(flatListPos: integer, convertView: $View$Type, parent: $ViewGroup$Type): $View
public "hasStableIds"(): boolean
public "isGroupExpanded"(groupPosition: integer): boolean
public "setMaxExpGroupCount"(maxExpGroupCount: integer): void
public "setExpandableListAdapter"(expandableListAdapter: $ExpandableListAdapter$Type): void
public "getItemViewType"(flatListPos: integer): integer
public "getViewTypeCount"(): integer
public "areAllItemsEnabled"(): boolean
get "empty"(): boolean
get "filter"(): $Filter
get "count"(): integer
set "maxExpGroupCount"(value: integer)
set "expandableListAdapter"(value: $ExpandableListAdapter$Type)
get "viewTypeCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandableListConnector$Type = ($ExpandableListConnector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandableListConnector_ = $ExpandableListConnector$Type;
}}
declare module "packages/icyllis/modernui/mc/$UIManager" {
import {$Lifecycle, $Lifecycle$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle"
import {$FragmentController, $FragmentController$Type} from "packages/icyllis/modernui/fragment/$FragmentController"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"
import {$ClientTooltipPositioner, $ClientTooltipPositioner$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipPositioner"
import {$MuiScreen, $MuiScreen$Type} from "packages/icyllis/modernui/mc/$MuiScreen"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$OnBackPressedDispatcher, $OnBackPressedDispatcher$Type} from "packages/icyllis/modernui/fragment/$OnBackPressedDispatcher"
import {$WindowGroup, $WindowGroup$Type} from "packages/icyllis/modernui/view/$WindowGroup"
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"

export class $UIManager implements $LifecycleOwner {
static "sDingEnabled": boolean
static "sZoomEnabled": boolean


public static "getInstance"(): $UIManager
public static "destroy"(): void
public "removed"(): void
public "isShowingLayoutBounds"(): boolean
public "getOnBackPressedDispatcher"(): $OnBackPressedDispatcher
public "setShowingLayoutBounds"(debugLayout: boolean): void
public "onHoverMove"(natural: boolean): void
public "onCharTyped"(ch: character): boolean
public "initScreen"(screen: $MuiScreen$Type): void
public "getFragmentController"(): $FragmentController
public "render"(): void
public static "initializeRenderer"(): void
public "getLifecycle"(): $Lifecycle
public "getDecorView"(): $WindowGroup
public "dump"(): void
public "dump"(pw: $PrintWriter$Type, fragments: boolean): void
public "updateLayoutDir"(forceRTL: boolean): void
public "onPostMouseInput"(button: integer, action: integer, mods: integer): void
public "onPostKeyInput"(key: integer, scanCode: integer, action: integer, mods: integer): void
public "takeScreenshot"(): void
public "drawExtTooltip"(itemStack: $ItemStack$Type, graphics: $GuiGraphics$Type, components: $List$Type<($ClientTooltipComponent$Type)>, x: integer, y: integer, font: $Font$Type, screenWidth: integer, screenHeight: integer, positioner: $ClientTooltipPositioner$Type): void
get "instance"(): $UIManager
get "showingLayoutBounds"(): boolean
get "onBackPressedDispatcher"(): $OnBackPressedDispatcher
set "showingLayoutBounds"(value: boolean)
get "fragmentController"(): $FragmentController
get "lifecycle"(): $Lifecycle
get "decorView"(): $WindowGroup
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UIManager$Type = ($UIManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UIManager_ = $UIManager$Type;
}}
declare module "packages/icyllis/modernui/widget/$ToastManager" {
import {$Toast, $Toast$Type} from "packages/icyllis/modernui/widget/$Toast"
import {$Activity, $Activity$Type} from "packages/icyllis/modernui/app/$Activity"

export class $ToastManager {

constructor(activity: $Activity$Type)

public "cancelToast"(token: $Toast$Type): void
public "enqueueToast"(token: $Toast$Type, text: charseq, duration: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToastManager$Type = ($ToastManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToastManager_ = $ToastManager$Type;
}}
declare module "packages/icyllis/modernui/view/$WindowManager" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$ViewManager, $ViewManager$Type} from "packages/icyllis/modernui/view/$ViewManager"

export interface $WindowManager extends $ViewManager {

 "updateViewLayout"(arg0: $View$Type, arg1: $ViewGroup$LayoutParams$Type): void
 "removeView"(arg0: $View$Type): void
 "addView"(arg0: $View$Type, arg1: $ViewGroup$LayoutParams$Type): void
}

export namespace $WindowManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WindowManager$Type = ($WindowManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WindowManager_ = $WindowManager$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$MuiPlatformForge" {
import {$MuiPlatform, $MuiPlatform$Type} from "packages/icyllis/modernui/mc/$MuiPlatform"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"

export class $MuiPlatformForge extends $MuiPlatform {
static readonly "BOOTSTRAP_PATH": $Path

constructor()

public "isClient"(): boolean
public "getBootstrapPath"(): $Path
get "client"(): boolean
get "bootstrapPath"(): $Path
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiPlatformForge$Type = ($MuiPlatformForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiPlatformForge_ = $MuiPlatformForge$Type;
}}
declare module "packages/icyllis/modernui/core/$Choreographer$FrameCallback" {
import {$Choreographer, $Choreographer$Type} from "packages/icyllis/modernui/core/$Choreographer"

export interface $Choreographer$FrameCallback {

 "doFrame"(arg0: $Choreographer$Type, arg1: long): void

(arg0: $Choreographer$Type, arg1: long): void
}

export namespace $Choreographer$FrameCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Choreographer$FrameCallback$Type = ($Choreographer$FrameCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Choreographer$FrameCallback_ = $Choreographer$FrameCallback$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuBuilder" {
import {$MenuItemImpl, $MenuItemImpl$Type} from "packages/icyllis/modernui/view/menu/$MenuItemImpl"
import {$MenuPresenter, $MenuPresenter$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter"
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$SubMenu, $SubMenu$Type} from "packages/icyllis/modernui/view/$SubMenu"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ContextMenu$ContextMenuInfo, $ContextMenu$ContextMenuInfo$Type} from "packages/icyllis/modernui/view/$ContextMenu$ContextMenuInfo"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$MenuBuilder$Callback, $MenuBuilder$Callback$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder$Callback"
import {$Menu, $Menu$Type} from "packages/icyllis/modernui/view/$Menu"

export class $MenuBuilder implements $Menu {

constructor(context: $Context$Type)

public "add"(title: charseq): $MenuItem
public "add"(group: integer, id: integer, categoryOrder: integer, title: charseq): $MenuItem
public "clear"(): void
public "size"(): integer
public "getContext"(): $Context
public "close"(): void
public "close"(closeAllMenus: boolean): void
public "getItem"(index: integer): $MenuItem
public "setQwertyMode"(isQwerty: boolean): void
public "removeItem"(id: integer): void
public "setCurrentMenuInfo"(menuInfo: $ContextMenu$ContextMenuInfo$Type): void
public "addMenuPresenter"(presenter: $MenuPresenter$Type): void
public "addMenuPresenter"(presenter: $MenuPresenter$Type, menuContext: $Context$Type): void
public "findGroupIndex"(group: integer, start: integer): integer
public "findGroupIndex"(group: integer): integer
public "onItemsChanged"(structureChanged: boolean): void
public "addSubMenu"(group: integer, id: integer, categoryOrder: integer, title: charseq): $SubMenu
public "addSubMenu"(title: charseq): $SubMenu
public "removeItemAt"(index: integer): void
public "findItemIndex"(id: integer): integer
public "setGroupCheckable"(group: integer, checkable: boolean, exclusive: boolean): void
public "clearHeader"(): void
public "setGroupEnabled"(group: integer, enabled: boolean): void
public "hasVisibleItems"(): boolean
public "isShortcutsVisible"(): boolean
public "findItem"(id: integer): $MenuItem
public "changeMenuMode"(): void
public "isShortcutKey"(keyCode: integer, event: $KeyEvent$Type): boolean
public "setGroupVisible"(group: integer, visible: boolean): void
public "performShortcut"(keyCode: integer, event: $KeyEvent$Type, flags: integer): boolean
public "performItemAction"(item: $MenuItem$Type, preferredPresenter: $MenuPresenter$Type, flags: integer): boolean
public "performItemAction"(item: $MenuItem$Type, flags: integer): boolean
public "getNonActionItems"(): $ArrayList<($MenuItemImpl)>
public "getHeaderIcon"(): $Drawable
public "getActionItems"(): $ArrayList<($MenuItemImpl)>
public "getRootMenu"(): $MenuBuilder
public "flagActionItems"(): void
public "getHeaderTitle"(): charseq
public "getExpandedItem"(): $MenuItemImpl
public "getHeaderView"(): $View
public "removeGroup"(group: integer): void
public "setCallback"(cb: $MenuBuilder$Callback$Type): void
public "clearAll"(): void
public "getVisibleItems"(): $ArrayList<($MenuItemImpl)>
public "startDispatchingItemsChanged"(): void
public "setDefaultShowAsAction"(defaultShowAsAction: integer): $MenuBuilder
public "setOptionalIconsVisible"(visible: boolean): void
public "expandItemActionView"(item: $MenuItemImpl$Type): boolean
public "removeMenuPresenter"(presenter: $MenuPresenter$Type): void
public "collapseItemActionView"(item: $MenuItemImpl$Type): boolean
public "setShortcutsVisible"(shortcutsVisible: boolean): void
public "stopDispatchingItemsChanged"(): void
public "setGroupDividerEnabled"(groupDividerEnabled: boolean): void
public "performIdentifierAction"(id: integer, flags: integer): boolean
public "isGroupDividerEnabled"(): boolean
get "context"(): $Context
set "qwertyMode"(value: boolean)
set "currentMenuInfo"(value: $ContextMenu$ContextMenuInfo$Type)
get "shortcutsVisible"(): boolean
get "nonActionItems"(): $ArrayList<($MenuItemImpl)>
get "headerIcon"(): $Drawable
get "actionItems"(): $ArrayList<($MenuItemImpl)>
get "rootMenu"(): $MenuBuilder
get "headerTitle"(): charseq
get "expandedItem"(): $MenuItemImpl
get "headerView"(): $View
set "callback"(value: $MenuBuilder$Callback$Type)
get "visibleItems"(): $ArrayList<($MenuItemImpl)>
set "defaultShowAsAction"(value: integer)
set "optionalIconsVisible"(value: boolean)
set "shortcutsVisible"(value: boolean)
set "groupDividerEnabled"(value: boolean)
get "groupDividerEnabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuBuilder$Type = ($MenuBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuBuilder_ = $MenuBuilder$Type;
}}
declare module "packages/icyllis/modernui/widget/$HeterogeneousExpandableList" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $HeterogeneousExpandableList {

 "getGroupTypeCount"(): integer
 "getGroupType"(arg0: integer): integer
 "getChildTypeCount"(): integer
 "getChildType"(arg0: integer, arg1: integer): integer
}

export namespace $HeterogeneousExpandableList {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeterogeneousExpandableList$Type = ($HeterogeneousExpandableList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeterogeneousExpandableList_ = $HeterogeneousExpandableList$Type;
}}
declare module "packages/icyllis/modernui/view/$HandlerActionQueue" {
import {$Handler, $Handler$Type} from "packages/icyllis/modernui/core/$Handler"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $HandlerActionQueue {

constructor()

public "size"(): integer
public "post"(action: $Runnable$Type): void
public "executeActions"(handler: $Handler$Type): void
public "getDelay"(index: integer): long
public "removeCallbacks"(action: $Runnable$Type): void
public "postDelayed"(action: $Runnable$Type, delayMillis: long): void
public "getRunnable"(index: integer): $Runnable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HandlerActionQueue$Type = ($HandlerActionQueue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HandlerActionQueue_ = $HandlerActionQueue$Type;
}}
declare module "packages/icyllis/modernui/mc/$FontResourceManager" {
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PreparableReloadListener$PreparationBarrier, $PreparableReloadListener$PreparationBarrier$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener$PreparationBarrier"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$EmojiFont, $EmojiFont$Type} from "packages/icyllis/modernui/graphics/text/$EmojiFont"
import {$FontFamily, $FontFamily$Type} from "packages/icyllis/modernui/graphics/text/$FontFamily"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$ProfilerFiller, $ProfilerFiller$Type} from "packages/net/minecraft/util/profiling/$ProfilerFiller"

export class $FontResourceManager implements $PreparableReloadListener {
static readonly "BITMAP_SCALE": integer


public static "getInstance"(): $FontResourceManager
public "close"(): void
public "lookupEmojiShortcode"(shortcode: string): string
public "onFontRegistered"(f: $FontFamily$Type): void
public "getEmojiFont"(): $EmojiFont
public "reloadAll"(): void
public "reload"(preparationBarrier: $PreparableReloadListener$PreparationBarrier$Type, resourceManager: $ResourceManager$Type, preparationProfiler: $ProfilerFiller$Type, reloadProfiler: $ProfilerFiller$Type, preparationExecutor: $Executor$Type, reloadExecutor: $Executor$Type): $CompletableFuture<(void)>
public "getName"(): string
get "instance"(): $FontResourceManager
get "emojiFont"(): $EmojiFont
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FontResourceManager$Type = ($FontResourceManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FontResourceManager_ = $FontResourceManager$Type;
}}
declare module "packages/icyllis/modernui/annotation/$Nullable" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $Nullable extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $Nullable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Nullable$Type = ($Nullable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Nullable_ = $Nullable$Type;
}}
declare module "packages/icyllis/modernui/animation/$AnimationUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $AnimationUtils {


public static "currentAnimationTimeMillis"(): long
public static "lockAnimationClock"(vsyncMillis: long): void
public static "unlockAnimationClock"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationUtils$Type = ($AnimationUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationUtils_ = $AnimationUtils$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/uniform/$UniformFloat" {
import {$ShaderUniform, $ShaderUniform$Type} from "packages/icyllis/modernui/mc/testforge/shader/$ShaderUniform"

/**
 * 
 * @deprecated
 */
export class $UniformFloat extends $ShaderUniform<(float)> {

constructor(location: integer)

public "load"(data: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UniformFloat$Type = ($UniformFloat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UniformFloat_ = $UniformFloat$Type;
}}
declare module "packages/icyllis/modernui/mc/$ScrollController" {
import {$ScrollController$IListener, $ScrollController$IListener$Type} from "packages/icyllis/modernui/mc/$ScrollController$IListener"

export class $ScrollController {

constructor(listener: $ScrollController$IListener$Type)

public "update"(time: long): void
public "getDuration"(): integer
public "abortAnimation"(): void
public "setStartValue"(start: float): void
public "getCurrValue"(): float
public "setMaxScroll"(max: float): void
public "isScrolling"(): boolean
public "scrollTo"(target: float): boolean
public "scrollTo"(target: float, duration: integer): void
public "scrollBy"(delta: float, duration: integer): void
public "scrollBy"(delta: float): boolean
get "duration"(): integer
set "startValue"(value: float)
get "currValue"(): float
set "maxScroll"(value: float)
get "scrolling"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollController$Type = ($ScrollController);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollController_ = $ScrollController$Type;
}}
declare module "packages/icyllis/modernui/text/$PackedObjectVector" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PackedObjectVector<E> {

constructor(columns: integer)

public "getValue"(row: integer, column: integer): E
public "size"(): integer
public "setValue"(row: integer, column: integer, value: E): void
public "insertAt"(row: integer, values: (E)[]): void
public "width"(): integer
public "deleteAt"(row: integer, count: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PackedObjectVector$Type<E> = ($PackedObjectVector<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PackedObjectVector_<E> = $PackedObjectVector$Type<(E)>;
}}
declare module "packages/icyllis/modernui/widget/$ScrollView" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FrameLayout, $FrameLayout$Type} from "packages/icyllis/modernui/widget/$FrameLayout"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $ScrollView extends $FrameLayout {
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "requestChildRectangleOnScreen"(child: $View$Type, rectangle: $Rect$Type, immediate: boolean): boolean
public "onStartNestedScroll"(child: $View$Type, target: $View$Type, axes: integer, type: integer): boolean
public "onNestedScrollAccepted"(child: $View$Type, target: $View$Type, axes: integer, type: integer): void
public "onGenericMotionEvent"(event: $MotionEvent$Type): boolean
public "shouldDelayChildPressedState"(): boolean
public "onInterceptTouchEvent"(ev: $MotionEvent$Type): boolean
public "requestDisallowInterceptTouchEvent"(disallowIntercept: boolean): void
public "setEdgeEffectColor"(color: integer): void
public "setFillViewport"(fillViewport: boolean): void
public "arrowScroll"(direction: integer): boolean
public "isFillViewport"(): boolean
public "executeKeyEvent"(event: $KeyEvent$Type): boolean
public "fullScroll"(direction: integer): boolean
public "pageScroll"(direction: integer): boolean
public "smoothScrollBy"(delta: integer): boolean
public "smoothScrollTo"(y: integer): void
public "scrollToDescendant"(child: $View$Type): void
public "fling"(velocityY: integer): void
public "onNestedScroll"(target: $View$Type, dxConsumed: integer, dyConsumed: integer, dxUnconsumed: integer, dyUnconsumed: integer, type: integer, consumed: (integer)[]): void
public "onNestedFling"(target: $View$Type, velocityX: float, velocityY: float, consumed: boolean): boolean
public "onTouchEvent"(ev: $MotionEvent$Type): boolean
public "dispatchKeyEvent"(event: $KeyEvent$Type): boolean
public "setSmoothScrollingEnabled"(smoothScrollingEnabled: boolean): void
public "setTopEdgeEffectColor"(color: integer): void
public "getTopEdgeEffectColor"(): integer
public "setBottomEdgeEffectColor"(color: integer): void
public "isSmoothScrollingEnabled"(): boolean
public "getBottomEdgeEffectColor"(): integer
public "addView"(child: $View$Type, index: integer, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type): void
public "addView"(child: $View$Type, index: integer): void
public "computeScroll"(): void
public "onDrawForeground"(canvas: $Canvas$Type): void
public "requestLayout"(): void
public "requestChildFocus"(child: $View$Type, focused: $View$Type): void
public "scrollTo"(x: integer, y: integer): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "edgeEffectColor"(value: integer)
set "fillViewport"(value: boolean)
get "fillViewport"(): boolean
set "smoothScrollingEnabled"(value: boolean)
set "topEdgeEffectColor"(value: integer)
get "topEdgeEffectColor"(): integer
set "bottomEdgeEffectColor"(value: integer)
get "smoothScrollingEnabled"(): boolean
get "bottomEdgeEffectColor"(): integer
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollView$Type = ($ScrollView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollView_ = $ScrollView$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/uniform/$UniformMatrix4f" {
import {$Matrix4, $Matrix4$Type} from "packages/icyllis/arc3d/core/$Matrix4"
import {$ShaderUniform, $ShaderUniform$Type} from "packages/icyllis/modernui/mc/testforge/shader/$ShaderUniform"

/**
 * 
 * @deprecated
 */
export class $UniformMatrix4f extends $ShaderUniform<($Matrix4)> {

constructor(location: integer)

public "load"(data: $Matrix4$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UniformMatrix4f$Type = ($UniformMatrix4f);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UniformMatrix4f_ = $UniformMatrix4f$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuPresenter" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"
import {$MenuPresenter$Callback, $MenuPresenter$Callback$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter$Callback"
import {$SubMenuBuilder, $SubMenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$SubMenuBuilder"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$MenuView, $MenuView$Type} from "packages/icyllis/modernui/view/menu/$MenuView"
import {$MenuItemImpl, $MenuItemImpl$Type} from "packages/icyllis/modernui/view/menu/$MenuItemImpl"

export interface $MenuPresenter {

 "getId"(): integer
 "initForMenu"(arg0: $Context$Type, arg1: $MenuBuilder$Type): void
 "onSubMenuSelected"(arg0: $SubMenuBuilder$Type): boolean
 "updateMenuView"(arg0: boolean): void
 "onCloseMenu"(arg0: $MenuBuilder$Type, arg1: boolean): void
 "flagActionItems"(): boolean
 "setCallback"(arg0: $MenuPresenter$Callback$Type): void
 "getMenuView"(arg0: $ViewGroup$Type): $MenuView
 "expandItemActionView"(arg0: $MenuBuilder$Type, arg1: $MenuItemImpl$Type): boolean
 "collapseItemActionView"(arg0: $MenuBuilder$Type, arg1: $MenuItemImpl$Type): boolean
}

export namespace $MenuPresenter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuPresenter$Type = ($MenuPresenter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuPresenter_ = $MenuPresenter$Type;
}}
declare module "packages/icyllis/modernui/graphics/$RectF" {
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Matrix, $Matrix$Type} from "packages/icyllis/modernui/graphics/$Matrix"

export class $RectF {
 "left": float
 "top": float
 "right": float
 "bottom": float

constructor(r: $Rect$Type)
constructor(r: $RectF$Type)
constructor(left: float, top: float, right: float, bottom: float)
constructor()

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "isEmpty"(): boolean
public "offset"(dx: float, dy: float): void
public "contains"(r: $RectF$Type): boolean
public "contains"(x: float, y: float): boolean
public "contains"(left: float, top: float, right: float, bottom: float): boolean
public "transform"(m: $Matrix$Type): void
public "set"(src: $Rect$Type): void
public "set"(src: $RectF$Type): void
public "set"(left: float, top: float, right: float, bottom: float): void
public "copy"(): $RectF
public static "copy"(r: $RectF$Type): $RectF
public "sort"(): void
public "isFinite"(): boolean
public "round"(dst: $Rect$Type): void
public "width"(): float
public "union"(left: float, top: float, right: float, bottom: float): void
public "union"(r: $RectF$Type): void
public "union"(x: float, y: float): void
public static "intersects"(a: $RectF$Type, b: $RectF$Type): boolean
public "intersects"(left: float, top: float, right: float, bottom: float): boolean
public "height"(): float
public "isSorted"(): boolean
public "inset"(dx: float, dy: float): void
public "intersect"(left: float, top: float, right: float, bottom: float): boolean
public "intersect"(r: $RectF$Type): boolean
public "offsetTo"(newLeft: float, newTop: float): void
public "setIntersect"(a: $RectF$Type, b: $RectF$Type): boolean
public "setEmpty"(): void
public "roundOut"(dst: $Rect$Type): void
public "centerX"(): float
public "centerY"(): float
get "empty"(): boolean
get "finite"(): boolean
get "sorted"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RectF$Type = ($RectF);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RectF_ = $RectF$Type;
}}
declare module "packages/icyllis/modernui/transition/$Scene" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $Scene {

constructor(sceneRoot: $ViewGroup$Type, layout: $View$Type)
constructor(sceneRoot: $ViewGroup$Type)

public "getSceneRoot"(): $ViewGroup
public static "getCurrentScene"(sceneRoot: $ViewGroup$Type): $Scene
public "setEnterAction"(action: $Runnable$Type): void
public "setExitAction"(action: $Runnable$Type): void
public "exit"(): void
public "enter"(): void
get "sceneRoot"(): $ViewGroup
set "enterAction"(value: $Runnable$Type)
set "exitAction"(value: $Runnable$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Scene$Type = ($Scene);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Scene_ = $Scene$Type;
}}
declare module "packages/icyllis/modernui/view/$ScrollCache" {
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $ScrollCache implements $Runnable {
static readonly "OFF": integer
static readonly "ON": integer
static readonly "FADING": integer
 "fadingEdgeLength": integer


public "run"(): void
public static "getThumbLength"(size: integer, thickness: integer, extent: integer, range: integer): integer
public static "getThumbOffset"(size: integer, thumbLength: integer, extent: integer, range: integer, offset: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollCache$Type = ($ScrollCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollCache_ = $ScrollCache$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$OutlineFont" {
import {$FontPaint, $FontPaint$Type} from "packages/icyllis/modernui/graphics/text/$FontPaint"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Font, $Font$Type} from "packages/java/awt/$Font"
import {$FontRenderContext, $FontRenderContext$Type} from "packages/java/awt/font/$FontRenderContext"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$IntArrayList, $IntArrayList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntArrayList"
import {$Font as $Font$0, $Font$Type as $Font$0$Type} from "packages/icyllis/modernui/graphics/text/$Font"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"
import {$FloatArrayList, $FloatArrayList$Type} from "packages/it/unimi/dsi/fastutil/floats/$FloatArrayList"
import {$Strike, $Strike$Type} from "packages/icyllis/arc3d/core/$Strike"

export class $OutlineFont implements $Font$0 {

constructor(font: $Font$Type)

public "getFullName"(locale: $Locale$Type): string
public "chooseFont"(size: integer): $Font
public static "getFontRenderContext"(renderFlags: integer): $FontRenderContext
public "getStyle"(): integer
public "getFamilyName"(locale: $Locale$Type): string
public "getMetrics"(paint: $FontPaint$Type, fm: $FontMetricsInt$Type): integer
public "hasGlyph"(ch: integer, vs: integer): boolean
public "doSimpleLayout"(buf: (character)[], start: integer, limit: integer, paint: $FontPaint$Type, glyphs: $IntArrayList$Type, positions: $FloatArrayList$Type, x: float, y: float): float
public "calcGlyphScore"(buf: (character)[], start: integer, limit: integer): integer
public "findOrCreateStrike"(paint: $FontPaint$Type): $Strike
public "doComplexLayout"(buf: (character)[], contextStart: integer, contextLimit: integer, layoutStart: integer, layoutLimit: integer, isRtl: boolean, paint: $FontPaint$Type, glyphs: $IntArrayList$Type, positions: $FloatArrayList$Type, advances: (float)[], advanceOffset: integer, bounds: $Rect$Type, x: float, y: float): float
public "getFullName"(): string
public "getFamilyName"(): string
get "style"(): integer
get "fullName"(): string
get "familyName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OutlineFont$Type = ($OutlineFont);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OutlineFont_ = $OutlineFont$Type;
}}
declare module "packages/icyllis/modernui/transition/$Transition$EpicenterCallback" {
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"

export interface $Transition$EpicenterCallback {

 "onGetEpicenter"(arg0: $Transition$Type): $Rect

(arg0: $Transition$Type): $Rect
}

export namespace $Transition$EpicenterCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Transition$EpicenterCallback$Type = ($Transition$EpicenterCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Transition$EpicenterCallback_ = $Transition$EpicenterCallback$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$SafeLinkedList" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Iterator, $Iterator$Type} from "packages/java/util/$Iterator"
import {$Spliterator, $Spliterator$Type} from "packages/java/util/$Spliterator"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"

export class $SafeLinkedList<T, E extends $Supplier<(T)>> implements $Iterable<(E)> {

constructor()

public "remove"(key: T): E
public "equals"(obj: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "size"(): integer
public "iterator"(): $Iterator<(E)>
public "putIfAbsent"(e: E): E
public "tail"(): E
public "head"(): E
public "descendingIterator"(): $Iterator<(E)>
public "iteratorWithAdditions"(): $Iterator<(E)>
public "spliterator"(): $Spliterator<(E)>
public "forEach"(arg0: $Consumer$Type<(any)>): void
[Symbol.iterator](): IterableIterator<E>;
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SafeLinkedList$Type<T, E> = ($SafeLinkedList<(T), (E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SafeLinkedList_<T, E> = $SafeLinkedList$Type<(T), (E)>;
}}
declare module "packages/icyllis/modernui/util/$PmxModel$Vertex" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PmxModel$Vertex {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PmxModel$Vertex$Type = ($PmxModel$Vertex);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PmxModel$Vertex_ = $PmxModel$Vertex$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$ProjectBuilderModel" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BakedModelWrapper, $BakedModelWrapper$Type} from "packages/net/minecraftforge/client/model/$BakedModelWrapper"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"

export class $ProjectBuilderModel extends $BakedModelWrapper<($BakedModel)> {
readonly "main": $BakedModel
readonly "cube": $BakedModel


public "isCustomRenderer"(): boolean
public "applyTransform"(transformType: $ItemDisplayContext$Type, poseStack: $PoseStack$Type, applyLeftHandTransform: boolean): $BakedModel
get "customRenderer"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProjectBuilderModel$Type = ($ProjectBuilderModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProjectBuilderModel_ = $ProjectBuilderModel$Type;
}}
declare module "packages/icyllis/modernui/util/$IOStreamParcel" {
import {$OutputStream, $OutputStream$Type} from "packages/java/io/$OutputStream"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"

export class $IOStreamParcel extends $Parcel implements $AutoCloseable {

constructor(arg0: $InputStream$Type, out: $OutputStream$Type)

public "position"(newPosition: integer): void
public "limit"(newLimit: integer): void
public "close"(): void
public "writeInt"(v: integer): void
public "readInt"(): integer
public "readBytes"(dst: (byte)[], off: integer, len: integer): void
public "writeBytes"(src: (byte)[], off: integer, len: integer): void
public "readByte"(): byte
public "readShort"(): short
public "readLong"(): long
public "writeByte"(v: integer): void
public "writeShort"(v: integer): void
public "writeLong"(v: long): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IOStreamParcel$Type = ($IOStreamParcel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IOStreamParcel_ = $IOStreamParcel$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentStateManager" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FragmentStateManager {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentStateManager$Type = ($FragmentStateManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentStateManager_ = $FragmentStateManager$Type;
}}
declare module "packages/icyllis/modernui/mc/text/mixin/$AccessRenderBuffers" {
import {$BufferBuilder, $BufferBuilder$Type} from "packages/com/mojang/blaze3d/vertex/$BufferBuilder"
import {$SortedMap, $SortedMap$Type} from "packages/java/util/$SortedMap"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export interface $AccessRenderBuffers {

 "getFixedBuffers"(): $SortedMap<($RenderType), ($BufferBuilder)>

(): $SortedMap<($RenderType), ($BufferBuilder)>
}

export namespace $AccessRenderBuffers {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessRenderBuffers$Type = ($AccessRenderBuffers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessRenderBuffers_ = $AccessRenderBuffers$Type;
}}
declare module "packages/icyllis/modernui/widget/$AdapterView$OnItemLongClickListener" {
import {$AdapterView, $AdapterView$Type} from "packages/icyllis/modernui/widget/$AdapterView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $AdapterView$OnItemLongClickListener {

 "onItemLongClick"(arg0: $AdapterView$Type<(any)>, arg1: $View$Type, arg2: integer, arg3: long): boolean

(arg0: $AdapterView$Type<(any)>, arg1: $View$Type, arg2: integer, arg3: long): boolean
}

export namespace $AdapterView$OnItemLongClickListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdapterView$OnItemLongClickListener$Type = ($AdapterView$OnItemLongClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdapterView$OnItemLongClickListener_ = $AdapterView$OnItemLongClickListener$Type;
}}
declare module "packages/icyllis/modernui/audio/$FFT" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FFT {
static readonly "NONE": integer
static readonly "BARTLETT": integer
static readonly "HAMMING": integer
static readonly "HANN": integer
static readonly "BLACKMAN": integer


public "setWindowFunc"(func: integer): void
public "setNoAverages"(): void
public "setBand"(band: integer, amplitude: float): void
public "scaleBand"(band: integer, scale: float): void
public "indexToFreq"(i: integer): float
public "setLogAverages"(minBandwidth: integer, bandsPerOctave: integer): void
public "getBandSize"(): integer
public "getBandWidth"(): float
public "freqToIndex"(freq: float): integer
public "getBand"(i: integer): float
public "getTimeSize"(): integer
public "setLinearAverages"(num: integer): void
public "getAverageSize"(): integer
public "scaleFrequency"(freq: float, scale: float): void
public static "create"(timeSize: integer, sampleRate: integer): $FFT
public "getAverage"(i: integer): float
public "getAverage"(lowFreq: float, hiFreq: float): float
public "getSampleRate"(): integer
public "getFrequency"(freq: float): float
public "setFrequency"(freq: float, amplitude: float): void
public "forward"(samples: (float)[], offset: integer): void
public "forward"(real: (float)[], imag: (float)[], offset: integer): void
public "getAverageCenterFrequency"(i: integer): float
set "windowFunc"(value: integer)
get "bandSize"(): integer
get "bandWidth"(): float
get "timeSize"(): integer
set "linearAverages"(value: integer)
get "averageSize"(): integer
get "sampleRate"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FFT$Type = ($FFT);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FFT_ = $FFT$Type;
}}
declare module "packages/icyllis/modernui/text/$StaticLayout$Builder" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$LineBreakConfig, $LineBreakConfig$Type} from "packages/icyllis/modernui/graphics/text/$LineBreakConfig"
import {$TextUtils$TruncateAt, $TextUtils$TruncateAt$Type} from "packages/icyllis/modernui/text/$TextUtils$TruncateAt"
import {$StaticLayout, $StaticLayout$Type} from "packages/icyllis/modernui/text/$StaticLayout"
import {$Layout$Alignment, $Layout$Alignment$Type} from "packages/icyllis/modernui/text/$Layout$Alignment"

export class $StaticLayout$Builder {


public "build"(): $StaticLayout
public "setMaxLines"(maxLines: integer): $StaticLayout$Builder
public "setAlignment"(alignment: $Layout$Alignment$Type): $StaticLayout$Builder
public "setIncludePad"(includePad: boolean): $StaticLayout$Builder
public "setEllipsizedWidth"(ellipsizedWidth: integer): $StaticLayout$Builder
public "setEllipsize"(ellipsize: $TextUtils$TruncateAt$Type): $StaticLayout$Builder
public "setTextDirection"(textDir: $TextDirectionHeuristic$Type): $StaticLayout$Builder
public "setLineBreakConfig"(lineBreakConfig: $LineBreakConfig$Type): $StaticLayout$Builder
public "setFallbackLineSpacing"(fallbackLineSpacing: boolean): $StaticLayout$Builder
public "setIndents"(leftIndents: (integer)[], rightIndents: (integer)[]): $StaticLayout$Builder
set "maxLines"(value: integer)
set "alignment"(value: $Layout$Alignment$Type)
set "includePad"(value: boolean)
set "ellipsizedWidth"(value: integer)
set "ellipsize"(value: $TextUtils$TruncateAt$Type)
set "textDirection"(value: $TextDirectionHeuristic$Type)
set "lineBreakConfig"(value: $LineBreakConfig$Type)
set "fallbackLineSpacing"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StaticLayout$Builder$Type = ($StaticLayout$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StaticLayout$Builder_ = $StaticLayout$Builder$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewParent" {
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ActionMode$Callback, $ActionMode$Callback$Type} from "packages/icyllis/modernui/view/$ActionMode$Callback"
import {$ActionMode, $ActionMode$Type} from "packages/icyllis/modernui/view/$ActionMode"
import {$Point, $Point$Type} from "packages/icyllis/modernui/graphics/$Point"

export interface $ViewParent {

 "getParent"(): $ViewParent
 "focusableViewAvailable"(arg0: $View$Type): void
 "requestChildRectangleOnScreen"(arg0: $View$Type, arg1: $Rect$Type, arg2: boolean): boolean
 "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
 "onStartNestedScroll"(arg0: $View$Type, arg1: $View$Type, arg2: integer, arg3: integer): boolean
 "childHasTransientStateChanged"(arg0: $View$Type, arg1: boolean): void
 "onNestedScrollAccepted"(arg0: $View$Type, arg1: $View$Type, arg2: integer, arg3: integer): void
 "canResolveTextDirection"(): boolean
 "childDrawableStateChanged"(arg0: $View$Type): void
 "isTextDirectionResolved"(): boolean
 "isLayoutDirectionResolved"(): boolean
 "canResolveLayoutDirection"(): boolean
 "canResolveTextAlignment"(): boolean
 "isTextAlignmentResolved"(): boolean
 "startActionModeForChild"(arg0: $View$Type, arg1: $ActionMode$Callback$Type, arg2: integer): $ActionMode
 "getChildVisibleRect"(arg0: $View$Type, arg1: $Rect$Type, arg2: $Point$Type): boolean
 "showContextMenuForChild"(arg0: $View$Type, arg1: float, arg2: float): boolean
 "requestDisallowInterceptTouchEvent"(arg0: boolean): void
 "getNestedScrollAxes"(): integer
 "onNestedPreFling"(arg0: $View$Type, arg1: float, arg2: float): boolean
 "onStopNestedScroll"(arg0: $View$Type, arg1: integer): void
 "onNestedPreScroll"(arg0: $View$Type, arg1: integer, arg2: integer, arg3: (integer)[], arg4: integer): void
 "onNestedScroll"(arg0: $View$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: (integer)[]): void
 "onNestedFling"(arg0: $View$Type, arg1: float, arg2: float, arg3: boolean): boolean
 "isLayoutRequested"(): boolean
 "getTextDirection"(): integer
 "getTextAlignment"(): integer
 "createContextMenu"(arg0: $ContextMenu$Type): void
 "bringChildToFront"(arg0: $View$Type): void
 "getLayoutDirection"(): integer
 "requestLayout"(): void
 "requestChildFocus"(arg0: $View$Type, arg1: $View$Type): void
 "clearChildFocus"(arg0: $View$Type): void
 "focusSearch"(arg0: $View$Type, arg1: integer): $View
}

export namespace $ViewParent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewParent$Type = ($ViewParent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewParent_ = $ViewParent$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$LocalStorage" {
import {$Pair, $Pair$Type} from "packages/org/apache/commons/lang3/tuple/$Pair"
import {$List, $List$Type} from "packages/java/util/$List"

export class $LocalStorage {

constructor()

public static "checkOneTimeEvent"(mask: integer): boolean
public static "getEmojiHistory"(): $List<($Pair<(string), (integer)>)>
public static "addToEmojiHistory"(emoji: $Pair$Type<(string), (integer)>): void
public static "findEmoji"(keyword: string): $List<($Pair<(string), (integer)>)>
get "emojiHistory"(): $List<($Pair<(string), (integer)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocalStorage$Type = ($LocalStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocalStorage_ = $LocalStorage$Type;
}}
declare module "packages/icyllis/modernui/markdown/core/style/$CodeBlockSpan" {
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$MarkdownTheme, $MarkdownTheme$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme"
import {$TrailingMarginSpan, $TrailingMarginSpan$Type} from "packages/icyllis/modernui/text/style/$TrailingMarginSpan"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$LeadingMarginSpan, $LeadingMarginSpan$Type} from "packages/icyllis/modernui/text/style/$LeadingMarginSpan"

export class $CodeBlockSpan extends $MetricAffectingSpan implements $LeadingMarginSpan, $TrailingMarginSpan {

constructor(theme: $MarkdownTheme$Type)

public "updateMeasureState"(paint: $TextPaint$Type): void
public "updateDrawState"(paint: $TextPaint$Type): void
public "drawMargin"(c: $Canvas$Type, p: $TextPaint$Type, left: integer, right: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
public "getLeadingMargin"(first: boolean): integer
public "getTrailingMargin"(): integer
public "drawLeadingMargin"(c: $Canvas$Type, p: $TextPaint$Type, x: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
get "trailingMargin"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CodeBlockSpan$Type = ($CodeBlockSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CodeBlockSpan_ = $CodeBlockSpan$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$CenterFragment2" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $CenterFragment2 extends $Fragment {

constructor()

public "onAttach"(context: $Context$Type): void
public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
public "onCreate"(savedInstanceState: $DataSet$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CenterFragment2$Type = ($CenterFragment2);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CenterFragment2_ = $CenterFragment2$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$Color3i" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
/**
 * 
 * @deprecated
 */
export class $Color3i {
static readonly "BLACK": $Color3i
static readonly "DARK_BLUE": $Color3i
static readonly "DARK_GREEN": $Color3i
static readonly "DARK_AQUA": $Color3i
static readonly "DARK_RED": $Color3i
static readonly "DARK_PURPLE": $Color3i
static readonly "GOLD": $Color3i
static readonly "GRAY": $Color3i
static readonly "DARK_GRAY": $Color3i
static readonly "BLUE": $Color3i
static readonly "GREEN": $Color3i
static readonly "AQUA": $Color3i
static readonly "RED": $Color3i
static readonly "LIGHT_PURPLE": $Color3i
static readonly "YELLOW": $Color3i
static readonly "WHITE": $Color3i
static readonly "BLUE_C": $Color3i
static readonly "GRAY_224": $Color3i
static readonly "FORMATTING_COLORS": ($Color3i)[]


public static "getGreenFrom"(color: integer): float
public static "getRedFrom"(color: integer): float
public static "getBlueFrom"(color: integer): float
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "fromFormattingCode"(code: integer): $Color3i
public "getRed"(): integer
public "getGreen"(): integer
public "getBlue"(): integer
public "getColor"(): integer
get "red"(): integer
get "green"(): integer
get "blue"(): integer
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Color3i$Type = ($Color3i);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Color3i_ = $Color3i$Type;
}}
declare module "packages/icyllis/modernui/widget/$CompoundButton" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Button, $Button$Type} from "packages/icyllis/modernui/widget/$Button"
import {$Checkable, $Checkable$Type} from "packages/icyllis/modernui/widget/$Checkable"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$Checkable$OnCheckedChangeListener, $Checkable$OnCheckedChangeListener$Type} from "packages/icyllis/modernui/widget/$Checkable$OnCheckedChangeListener"

export class $CompoundButton extends $Button implements $Checkable {
static readonly "CHECKED_STATE_SET": (integer)[]
static readonly "UNKNOWN_BORING": $BoringLayout$Metrics
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setChecked"(checked: boolean): void
public "drawableHotspotChanged"(x: float, y: float): void
public "jumpDrawablesToCurrentState"(): void
public "getButtonDrawable"(): $Drawable
public "getButtonTintList"(): $ColorStateList
public "setButtonTintList"(tint: $ColorStateList$Type): void
public "onResolveDrawables"(layoutDirection: integer): void
public "performClick"(): boolean
public "setButtonDrawable"(drawable: $Drawable$Type): void
public "isChecked"(): boolean
public "getCompoundPaddingLeft"(): integer
public "getHorizontalOffsetForDrawables"(): integer
public "getCompoundPaddingRight"(): integer
public "toggle"(): void
public "setOnCheckedChangeListener"(listener: $Checkable$OnCheckedChangeListener$Type): void
set "checked"(value: boolean)
get "buttonDrawable"(): $Drawable
get "buttonTintList"(): $ColorStateList
set "buttonTintList"(value: $ColorStateList$Type)
set "buttonDrawable"(value: $Drawable$Type)
get "checked"(): boolean
get "compoundPaddingLeft"(): integer
get "horizontalOffsetForDrawables"(): integer
get "compoundPaddingRight"(): integer
set "onCheckedChangeListener"(value: $Checkable$OnCheckedChangeListener$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompoundButton$Type = ($CompoundButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompoundButton_ = $CompoundButton$Type;
}}
declare module "packages/icyllis/modernui/markdown/$MarkdownConfig" {
import {$MarkdownTheme, $MarkdownTheme$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme"
import {$MarkdownConfig$Builder, $MarkdownConfig$Builder$Type} from "packages/icyllis/modernui/markdown/$MarkdownConfig$Builder"

export class $MarkdownConfig {


public static "builder"(): $MarkdownConfig$Builder
public "theme"(): $MarkdownTheme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownConfig$Type = ($MarkdownConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownConfig_ = $MarkdownConfig$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$GlyphManagerForge" {
import {$GlyphVector, $GlyphVector$Type} from "packages/java/awt/font/$GlyphVector"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$GlyphManagerForge$VanillaGlyph, $GlyphManagerForge$VanillaGlyph$Type} from "packages/icyllis/modernui/mc/text/$GlyphManagerForge$VanillaGlyph"
import {$Font, $Font$Type} from "packages/java/awt/$Font"

/**
 * 
 * @deprecated
 */
export class $GlyphManagerForge {
static readonly "MARKER": $Marker
static "sPreferredFont": string
static "sAntiAliasing": boolean
static "sHighPrecision": boolean
static "sEnableMipmap": boolean
static "sMipmapLevel": integer
static "sResolutionLevel": integer
static readonly "GLYPH_OFFSET": float
static readonly "TEXTURE_SIZE": integer


/**
 * 
 * @deprecated
 */
public static "getInstance"(): $GlyphManagerForge
public "reload"(): void
public "layoutGlyphVector"(font: $Font$Type, text: (character)[], start: integer, limit: integer, flags: integer): $GlyphVector
public "lookupGlyph"(font: $Font$Type, glyphCode: integer): $GlyphManagerForge$VanillaGlyph
public "deriveFont"(family: $Font$Type, style: integer, size: integer): $Font
public "lookupFont"(codePoint: integer): $Font
public "lookupDigits"(font: $Font$Type): ($GlyphManagerForge$VanillaGlyph)[]
public "getResolutionFactor"(): float
get "instance"(): $GlyphManagerForge
get "resolutionFactor"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlyphManagerForge$Type = ($GlyphManagerForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlyphManagerForge_ = $GlyphManagerForge$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$ViewModelProvider$Factory" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ViewModel, $ViewModel$Type} from "packages/icyllis/modernui/lifecycle/$ViewModel"

export interface $ViewModelProvider$Factory {

 "create"<T extends $ViewModel>(arg0: $Class$Type<(T)>): T

(arg0: $Class$Type<(T)>): T
}

export namespace $ViewModelProvider$Factory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewModelProvider$Factory$Type = ($ViewModelProvider$Factory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewModelProvider$Factory_ = $ViewModelProvider$Factory$Type;
}}
declare module "packages/icyllis/modernui/mc/$EmojiDataGen" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $EmojiDataGen {

constructor()

public static "main"(args: (string)[]): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmojiDataGen$Type = ($EmojiDataGen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmojiDataGen_ = $EmojiDataGen$Type;
}}
declare module "packages/icyllis/modernui/mc/mixin/$AccessNativeImage" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $AccessNativeImage {

 "getPixels"(): long

(): long
}

export namespace $AccessNativeImage {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessNativeImage$Type = ($AccessNativeImage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessNativeImage_ = $AccessNativeImage$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnLayoutChangeListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $View$OnLayoutChangeListener {

 "onLayoutChange"(arg0: $View$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: integer): void

(arg0: $View$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: integer): void
}

export namespace $View$OnLayoutChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnLayoutChangeListener$Type = ($View$OnLayoutChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnLayoutChangeListener_ = $View$OnLayoutChangeListener$Type;
}}
declare module "packages/icyllis/modernui/mc/$IrisApiIntegration" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $IrisApiIntegration {


public static "isShaderPackInUse"(): boolean
get "shaderPackInUse"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IrisApiIntegration$Type = ($IrisApiIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IrisApiIntegration_ = $IrisApiIntegration$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$ViewModel" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ViewModel {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewModel$Type = ($ViewModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewModel_ = $ViewModel$Type;
}}
declare module "packages/icyllis/modernui/widget/$DropDownListView" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$ListView, $ListView$Type} from "packages/icyllis/modernui/widget/$ListView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $DropDownListView extends $ListView {
static readonly "TRANSCRIPT_MODE_DISABLED": integer
static readonly "TRANSCRIPT_MODE_NORMAL": integer
static readonly "TRANSCRIPT_MODE_ALWAYS_SCROLL": integer
static readonly "CHOICE_MODE_NONE": integer
static readonly "CHOICE_MODE_SINGLE": integer
static readonly "CHOICE_MODE_MULTIPLE": integer
static readonly "CHOICE_MODE_MULTIPLE_MODAL": integer
static readonly "ITEM_VIEW_TYPE_IGNORE": integer
static readonly "ITEM_VIEW_TYPE_HEADER_OR_FOOTER": integer
static readonly "INVALID_POSITION": integer
static readonly "INVALID_ROW_ID": long
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type, hijackFocus: boolean)

public "onForwardedEvent"(event: $MotionEvent$Type): boolean
public "hasWindowFocus"(): boolean
public "onHoverEvent"(ev: $MotionEvent$Type): boolean
public "onTouchEvent"(ev: $MotionEvent$Type): boolean
public "setListSelectionHidden"(hideListSelection: boolean): void
public "isFocused"(): boolean
public "hasFocus"(): boolean
public "isInTouchMode"(): boolean
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "listSelectionHidden"(value: boolean)
get "focused"(): boolean
get "inTouchMode"(): boolean
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DropDownListView$Type = ($DropDownListView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DropDownListView_ = $DropDownListView$Type;
}}
declare module "packages/icyllis/modernui/widget/$ListView$FixedViewInfo" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export class $ListView$FixedViewInfo {
 "view": $View
 "data": any
 "isSelectable": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListView$FixedViewInfo$Type = ($ListView$FixedViewInfo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListView$FixedViewInfo_ = $ListView$FixedViewInfo$Type;
}}
declare module "packages/icyllis/modernui/graphics/$MathUtil" {
import {$MathUtil as $MathUtil$0, $MathUtil$Type as $MathUtil$0$Type} from "packages/icyllis/arc3d/core/$MathUtil"

export class $MathUtil extends $MathUtil$0 {
static readonly "PI": float
static readonly "PI2": float
static readonly "PI3": float
static readonly "PI4": float
static readonly "PI_O_2": float
static readonly "PI_O_3": float
static readonly "PI_O_4": float
static readonly "PI_O_6": float
static readonly "EPS": float
static readonly "INV_EPS": float
static readonly "DEG_TO_RAD": float
static readonly "RAD_TO_DEG": float
static readonly "SQRT2": float
static readonly "INV_SQRT2": float


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathUtil$Type = ($MathUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathUtil_ = $MathUtil$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuView$ItemView" {
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$MenuItemImpl, $MenuItemImpl$Type} from "packages/icyllis/modernui/view/menu/$MenuItemImpl"

export interface $MenuView$ItemView {

 "setChecked"(arg0: boolean): void
 "initialize"(arg0: $MenuItemImpl$Type, arg1: integer): void
 "setEnabled"(arg0: boolean): void
 "setTitle"(arg0: charseq): void
 "getItemData"(): $MenuItemImpl
 "showsIcon"(): boolean
 "setIcon"(arg0: $Drawable$Type): void
 "setShortcut"(arg0: boolean, arg1: character): void
 "prefersCondensedTitle"(): boolean
 "setCheckable"(arg0: boolean): void
}

export namespace $MenuView$ItemView {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuView$ItemView$Type = ($MenuView$ItemView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuView$ItemView_ = $MenuView$ItemView$Type;
}}
declare module "packages/icyllis/modernui/graphics/$PointF" {
import {$Point, $Point$Type} from "packages/icyllis/modernui/graphics/$Point"

export class $PointF {
 "x": float
 "y": float

constructor(p: $PointF$Type)
constructor(p: $Point$Type)
constructor(x: float, y: float)
constructor()

public "equals"(o: any): boolean
public "length"(): float
public "toString"(): string
public "hashCode"(): integer
public "offset"(dx: float, dy: float): void
public "set"(x: float, y: float): void
public "set"(p: $Point$Type): void
public "set"(p: $PointF$Type): void
public "copy"(): $PointF
public static "copy"(p: $PointF$Type): $PointF
public "normalize"(): boolean
public "round"(dst: $Point$Type): void
public "negate"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PointF$Type = ($PointF);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PointF_ = $PointF$Type;
}}
declare module "packages/icyllis/modernui/text/method/$NumberInputFilter" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$InputFilter, $InputFilter$Type} from "packages/icyllis/modernui/text/$InputFilter"

export class $NumberInputFilter implements $InputFilter {

constructor()

public "filter"(source: charseq, start: integer, end: integer, dest: $Spanned$Type, dstart: integer, dend: integer): charseq
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NumberInputFilter$Type = ($NumberInputFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NumberInputFilter_ = $NumberInputFilter$Type;
}}
declare module "packages/icyllis/modernui/animation/$BidirectionalTypeConverter" {
import {$TypeConverter, $TypeConverter$Type} from "packages/icyllis/modernui/animation/$TypeConverter"

export class $BidirectionalTypeConverter<T, V> implements $TypeConverter<(T), (V)> {

constructor()

public "invert"(): $BidirectionalTypeConverter<(V), (T)>
public "convertBack"(arg0: V): T
public "convert"(arg0: T): V
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BidirectionalTypeConverter$Type<T, V> = ($BidirectionalTypeConverter<(T), (V)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BidirectionalTypeConverter_<T, V> = $BidirectionalTypeConverter$Type<(T), (V)>;
}}
declare module "packages/icyllis/modernui/animation/$TypeEvaluator" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $TypeEvaluator<T> {

 "evaluate"(arg0: float, arg1: T, arg2: T): T

(arg0: float, arg1: T, arg2: T): T
}

export namespace $TypeEvaluator {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TypeEvaluator$Type<T> = ($TypeEvaluator<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TypeEvaluator_<T> = $TypeEvaluator$Type<(T)>;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$Drawable$Callback" {
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export interface $Drawable$Callback {

 "unscheduleDrawable"(arg0: $Drawable$Type, arg1: $Runnable$Type): void
 "invalidateDrawable"(arg0: $Drawable$Type): void
 "scheduleDrawable"(arg0: $Drawable$Type, arg1: $Runnable$Type, arg2: long): void
}

export namespace $Drawable$Callback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Drawable$Callback$Type = ($Drawable$Callback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Drawable$Callback_ = $Drawable$Callback$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$ShapeDrawable" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Drawable$ConstantState, $Drawable$ConstantState$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$ConstantState"

export class $ShapeDrawable extends $Drawable {
static readonly "RECTANGLE": integer
static readonly "CIRCLE": integer
static readonly "RING": integer
static readonly "HLINE": integer
static readonly "VLINE": integer
static readonly "MAX_LEVEL": integer

constructor()

public "setColor"(color: integer): void
public "setColor"(colorStateList: $ColorStateList$Type): void
public "setSize"(width: integer, height: integer): void
public "getShape"(): integer
public "hasFocusStateSpecified"(): boolean
public "setCornerRadius"(radius: float): void
public static "modulateAlpha"(srcAlpha: integer, dstAlpha: integer): integer
public "getCornerRadius"(): float
public "getThickness"(): integer
public "setInnerRadius"(innerRadius: integer): void
public "setThicknessRatio"(thicknessRatio: float): void
public "setThickness"(thickness: integer): void
public "getInnerRadius"(): integer
public "getThicknessRatio"(): float
public "draw"(canvas: $Canvas$Type): void
public "setPadding"(left: integer, top: integer, right: integer, bottom: integer): void
public "getPadding"(padding: $Rect$Type): boolean
public "isStateful"(): boolean
public "setTintList"(tint: $ColorStateList$Type): void
public "setTintBlendMode"(blendMode: $BlendMode$Type): void
public "getConstantState"(): $Drawable$ConstantState
public "clearMutated"(): void
public "getUseLevelForShape"(): boolean
public "setInnerRadiusRatio"(innerRadiusRatio: float): void
public "getInnerRadiusRatio"(): float
public "setUseLevelForShape"(useLevelForShape: boolean): void
public "getAlpha"(): integer
public "getColor"(): $ColorStateList
public "getIntrinsicHeight"(): integer
public "getIntrinsicWidth"(): integer
public "setAlpha"(alpha: integer): void
public "mutate"(): $Drawable
public "setShape"(shape: integer): void
public "setStroke"(width: integer, color: integer): void
public "setStroke"(width: integer, colorStateList: $ColorStateList$Type): void
set "color"(value: integer)
set "color"(value: $ColorStateList$Type)
get "shape"(): integer
set "cornerRadius"(value: float)
get "cornerRadius"(): float
get "thickness"(): integer
set "innerRadius"(value: integer)
set "thicknessRatio"(value: float)
set "thickness"(value: integer)
get "innerRadius"(): integer
get "thicknessRatio"(): float
get "stateful"(): boolean
set "tintList"(value: $ColorStateList$Type)
set "tintBlendMode"(value: $BlendMode$Type)
get "constantState"(): $Drawable$ConstantState
get "useLevelForShape"(): boolean
set "innerRadiusRatio"(value: float)
get "innerRadiusRatio"(): float
set "useLevelForShape"(value: boolean)
get "alpha"(): integer
get "color"(): $ColorStateList
get "intrinsicHeight"(): integer
get "intrinsicWidth"(): integer
set "alpha"(value: integer)
set "shape"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapeDrawable$Type = ($ShapeDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapeDrawable_ = $ShapeDrawable$Type;
}}
declare module "packages/icyllis/modernui/widget/$AbsListView$MultiChoiceModeListener" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ActionMode$Callback, $ActionMode$Callback$Type} from "packages/icyllis/modernui/view/$ActionMode$Callback"
import {$Menu, $Menu$Type} from "packages/icyllis/modernui/view/$Menu"
import {$ActionMode, $ActionMode$Type} from "packages/icyllis/modernui/view/$ActionMode"

export interface $AbsListView$MultiChoiceModeListener extends $ActionMode$Callback {

 "onItemCheckedStateChanged"(arg0: $ActionMode$Type, arg1: integer, arg2: long, arg3: boolean): void
 "onGetContentRect"(mode: $ActionMode$Type, view: $View$Type, outRect: $Rect$Type): void
 "onCreateActionMode"(arg0: $ActionMode$Type, arg1: $Menu$Type): boolean
 "onPrepareActionMode"(arg0: $ActionMode$Type, arg1: $Menu$Type): boolean
 "onDestroyActionMode"(arg0: $ActionMode$Type): void
 "onActionItemClicked"(arg0: $ActionMode$Type, arg1: $MenuItem$Type): boolean
}

export namespace $AbsListView$MultiChoiceModeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsListView$MultiChoiceModeListener$Type = ($AbsListView$MultiChoiceModeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsListView$MultiChoiceModeListener_ = $AbsListView$MultiChoiceModeListener$Type;
}}
declare module "packages/icyllis/modernui/text/$TextShaper" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$TextShaper$GlyphsConsumer, $TextShaper$GlyphsConsumer$Type} from "packages/icyllis/modernui/text/$TextShaper$GlyphsConsumer"
import {$ShapedText, $ShapedText$Type} from "packages/icyllis/modernui/graphics/text/$ShapedText"

export class $TextShaper {


public static "shapeText"(text: charseq, start: integer, count: integer, dir: $TextDirectionHeuristic$Type, paint: $TextPaint$Type): $ShapedText
public static "shapeText"(text: (character)[], start: integer, count: integer, dir: $TextDirectionHeuristic$Type, paint: $TextPaint$Type): $ShapedText
public static "shapeText"(text: charseq, start: integer, count: integer, dir: $TextDirectionHeuristic$Type, paint: $TextPaint$Type, consumer: $TextShaper$GlyphsConsumer$Type): void
public static "shapeTextRun"(text: charseq, start: integer, count: integer, contextStart: integer, contextCount: integer, isRtl: boolean, paint: $TextPaint$Type): $ShapedText
public static "shapeTextRun"(text: (character)[], start: integer, count: integer, contextStart: integer, contextCount: integer, isRtl: boolean, paint: $TextPaint$Type): $ShapedText
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextShaper$Type = ($TextShaper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextShaper_ = $TextShaper$Type;
}}
declare module "packages/icyllis/modernui/widget/$PopupWindow" {
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$View$OnTouchListener, $View$OnTouchListener$Type} from "packages/icyllis/modernui/view/$View$OnTouchListener"
import {$PopupWindow$OnDismissListener, $PopupWindow$OnDismissListener$Type} from "packages/icyllis/modernui/widget/$PopupWindow$OnDismissListener"

export class $PopupWindow {

constructor()
constructor(contentView: $View$Type)
constructor(contentView: $View$Type, width: integer, height: integer, focusable: boolean)
constructor(contentView: $View$Type, width: integer, height: integer)
constructor(width: integer, height: integer)

public "setOverlapAnchor"(overlapAnchor: boolean): void
public "getOverlapAnchor"(): boolean
public "showAtLocation"(parent: $View$Type, gravity: integer, x: integer, y: integer): void
public "setTouchable"(touchable: boolean): void
public "isOutsideTouchable"(): boolean
public "isTouchModal"(): boolean
public "setContentView"(contentView: $View$Type): void
public "setTouchModal"(touchModal: boolean): void
public "getEpicenterBounds"(): $Rect
public "isClippingEnabled"(): boolean
public "setClippingEnabled"(enabled: boolean): void
public "isClippedToScreen"(): boolean
public "isTouchable"(): boolean
public "setEpicenterBounds"(bounds: $Rect$Type): void
public "showAsDropDown"(anchor: $View$Type, xOff: integer, yOff: integer): void
public "showAsDropDown"(anchor: $View$Type, xOff: integer, yOff: integer, gravity: integer): void
public "showAsDropDown"(anchor: $View$Type): void
public "isAboveAnchor"(): boolean
public "update"(anchor: $View$Type, width: integer, height: integer): void
public "update"(): void
public "update"(width: integer, height: integer): void
public "update"(x: integer, y: integer, width: integer, height: integer): void
public "update"(x: integer, y: integer, width: integer, height: integer, force: boolean): void
public "update"(anchor: $View$Type, xoff: integer, yoff: integer, width: integer, height: integer): void
public "setWidth"(width: integer): void
public "setExitTransition"(exitTransition: $Transition$Type): void
public "getExitTransition"(): $Transition
public "setEnterTransition"(enterTransition: $Transition$Type): void
public "getEnterTransition"(): $Transition
public "setElevation"(elevation: float): void
public "getElevation"(): float
public "getContentView"(): $View
public "dismiss"(): void
public "getWidth"(): integer
public "getHeight"(): integer
public "isShowing"(): boolean
public "getBackground"(): $Drawable
public "isFocusable"(): boolean
public "setFocusable"(focusable: boolean): void
public "setHeight"(height: integer): void
public "setBackgroundDrawable"(background: $Drawable$Type): void
public "getWindowLayoutType"(): integer
public "getMaxAvailableHeight"(anchor: $View$Type): integer
public "getMaxAvailableHeight"(anchor: $View$Type, yOffset: integer): integer
public "setWindowLayoutType"(layoutType: integer): void
public "setTouchInterceptor"(l: $View$OnTouchListener$Type): void
public "setOutsideTouchable"(touchable: boolean): void
public "setOnDismissListener"(onDismissListener: $PopupWindow$OnDismissListener$Type): void
public "setIsClippedToScreen"(enabled: boolean): void
set "overlapAnchor"(value: boolean)
get "overlapAnchor"(): boolean
set "touchable"(value: boolean)
get "outsideTouchable"(): boolean
get "touchModal"(): boolean
set "contentView"(value: $View$Type)
set "touchModal"(value: boolean)
get "epicenterBounds"(): $Rect
get "clippingEnabled"(): boolean
set "clippingEnabled"(value: boolean)
get "clippedToScreen"(): boolean
get "touchable"(): boolean
set "epicenterBounds"(value: $Rect$Type)
get "aboveAnchor"(): boolean
set "width"(value: integer)
set "exitTransition"(value: $Transition$Type)
get "exitTransition"(): $Transition
set "enterTransition"(value: $Transition$Type)
get "enterTransition"(): $Transition
set "elevation"(value: float)
get "elevation"(): float
get "contentView"(): $View
get "width"(): integer
get "height"(): integer
get "showing"(): boolean
get "background"(): $Drawable
get "focusable"(): boolean
set "focusable"(value: boolean)
set "height"(value: integer)
set "backgroundDrawable"(value: $Drawable$Type)
get "windowLayoutType"(): integer
set "windowLayoutType"(value: integer)
set "touchInterceptor"(value: $View$OnTouchListener$Type)
set "outsideTouchable"(value: boolean)
set "onDismissListener"(value: $PopupWindow$OnDismissListener$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PopupWindow$Type = ($PopupWindow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PopupWindow_ = $PopupWindow$Type;
}}
declare module "packages/icyllis/modernui/text/$Spanned" {
import {$IntStream, $IntStream$Type} from "packages/java/util/stream/$IntStream"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $Spanned extends charseq {

 "nextSpanTransition"(arg0: integer, arg1: integer, arg2: $Class$Type<(any)>): integer
 "getSpanStart"(arg0: any): integer
 "getSpanFlags"(arg0: any): integer
 "getSpans"<T>(arg0: integer, arg1: integer, arg2: $Class$Type<(any)>, arg3: $List$Type<(T)>): $List<(T)>
 "getSpans"<T>(start: integer, end: integer, type: $Class$Type<(any)>): $List<(T)>
 "getSpanEnd"(arg0: any): integer
 "length"(): integer
 "toString"(): string
 "charAt"(arg0: integer): character
 "isEmpty"(): boolean
 "codePoints"(): $IntStream
 "subSequence"(arg0: integer, arg1: integer): charseq
 "chars"(): $IntStream
}

export namespace $Spanned {
const SPAN_POINT_MARK_MASK: integer
const SPAN_MARK_MARK: integer
const SPAN_MARK_POINT: integer
const SPAN_POINT_MARK: integer
const SPAN_POINT_POINT: integer
const SPAN_PARAGRAPH: integer
const SPAN_INCLUSIVE_EXCLUSIVE: integer
const SPAN_INCLUSIVE_INCLUSIVE: integer
const SPAN_EXCLUSIVE_EXCLUSIVE: integer
const SPAN_EXCLUSIVE_INCLUSIVE: integer
const SPAN_COMPOSING: integer
const SPAN_INTERMEDIATE: integer
const SPAN_USER_SHIFT: integer
const SPAN_USER: integer
const SPAN_PRIORITY_SHIFT: integer
const SPAN_PRIORITY: integer
function compare(arg0: charseq, arg1: charseq): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Spanned$Type = ($Spanned);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Spanned_ = $Spanned$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$SpaceFont" {
import {$FontPaint, $FontPaint$Type} from "packages/icyllis/modernui/graphics/text/$FontPaint"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$SpaceProvider$Definition, $SpaceProvider$Definition$Type} from "packages/com/mojang/blaze3d/font/$SpaceProvider$Definition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$IntArrayList, $IntArrayList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntArrayList"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"
import {$FloatArrayList, $FloatArrayList$Type} from "packages/it/unimi/dsi/fastutil/floats/$FloatArrayList"
import {$Strike, $Strike$Type} from "packages/icyllis/arc3d/core/$Strike"

export class $SpaceFont implements $Font {


public static "create"(fontName: $ResourceLocation$Type, definition: $SpaceProvider$Definition$Type): $SpaceFont
public "getFullName"(locale: $Locale$Type): string
public "getStyle"(): integer
public "getFamilyName"(locale: $Locale$Type): string
public "getMetrics"(paint: $FontPaint$Type, fm: $FontMetricsInt$Type): integer
public "getAdvance"(ch: integer): float
public "hasGlyph"(ch: integer, vs: integer): boolean
public "doSimpleLayout"(buf: (character)[], start: integer, limit: integer, paint: $FontPaint$Type, glyphs: $IntArrayList$Type, positions: $FloatArrayList$Type, x: float, y: float): float
public "findOrCreateStrike"(paint: $FontPaint$Type): $Strike
public "doComplexLayout"(buf: (character)[], contextStart: integer, contextLimit: integer, layoutStart: integer, layoutLimit: integer, isRtl: boolean, paint: $FontPaint$Type, glyphs: $IntArrayList$Type, positions: $FloatArrayList$Type, advances: (float)[], advanceOffset: integer, bounds: $Rect$Type, x: float, y: float): float
public "getFullName"(): string
public "getFamilyName"(): string
public "calcGlyphScore"(buf: (character)[], start: integer, limit: integer): integer
get "style"(): integer
get "fullName"(): string
get "familyName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpaceFont$Type = ($SpaceFont);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpaceFont_ = $SpaceFont$Type;
}}
declare module "packages/icyllis/modernui/widget/$RadioGroup" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$RadioGroup$OnCheckedChangeListener, $RadioGroup$OnCheckedChangeListener$Type} from "packages/icyllis/modernui/widget/$RadioGroup$OnCheckedChangeListener"
import {$LinearLayout, $LinearLayout$Type} from "packages/icyllis/modernui/widget/$LinearLayout"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $RadioGroup extends $LinearLayout {
static readonly "HORIZONTAL": integer
static readonly "VERTICAL": integer
static readonly "SHOW_DIVIDER_NONE": integer
static readonly "SHOW_DIVIDER_BEGINNING": integer
static readonly "SHOW_DIVIDER_MIDDLE": integer
static readonly "SHOW_DIVIDER_END": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "check"(id: integer): void
public "getCheckedId"(): integer
public "clearCheck"(): void
public "setOnCheckedChangeListener"(listener: $RadioGroup$OnCheckedChangeListener$Type): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
get "checkedId"(): integer
set "onCheckedChangeListener"(value: $RadioGroup$OnCheckedChangeListener$Type)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RadioGroup$Type = ($RadioGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RadioGroup_ = $RadioGroup$Type;
}}
declare module "packages/icyllis/modernui/core/$Handler$Callback" {
import {$Message, $Message$Type} from "packages/icyllis/modernui/core/$Message"

export interface $Handler$Callback {

 "handleMessage"(arg0: $Message$Type): boolean

(arg0: $Message$Type): boolean
}

export namespace $Handler$Callback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Handler$Callback$Type = ($Handler$Callback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Handler$Callback_ = $Handler$Callback$Type;
}}
declare module "packages/icyllis/modernui/widget/$SwitchButton" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$CompoundButton, $CompoundButton$Type} from "packages/icyllis/modernui/widget/$CompoundButton"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $SwitchButton extends $CompoundButton {
static readonly "CHECKED_STATE_SET": (integer)[]
static readonly "UNKNOWN_BORING": $BoringLayout$Metrics
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setChecked"(checked: boolean): void
public "setBorderWidth"(borderWidth: integer): void
public "setCheckedColor"(checkedColor: integer): void
public "setUncheckedColor"(uncheckedColor: integer): void
set "checked"(value: boolean)
set "borderWidth"(value: integer)
set "checkedColor"(value: integer)
set "uncheckedColor"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SwitchButton$Type = ($SwitchButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SwitchButton_ = $SwitchButton$Type;
}}
declare module "packages/icyllis/modernui/text/style/$ReplacementSpan" {
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"

export class $ReplacementSpan extends $MetricAffectingSpan {

constructor()

public "getSize"(arg0: $TextPaint$Type, arg1: charseq, arg2: integer, arg3: integer, arg4: $FontMetricsInt$Type): integer
public "draw"(arg0: $Canvas$Type, arg1: charseq, arg2: integer, arg3: integer, arg4: float, arg5: integer, arg6: integer, arg7: integer, arg8: $TextPaint$Type): void
public "updateMeasureState"(paint: $TextPaint$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReplacementSpan$Type = ($ReplacementSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReplacementSpan_ = $ReplacementSpan$Type;
}}
declare module "packages/icyllis/modernui/core/$Core" {
import {$Cleaner$Cleanable, $Cleaner$Cleanable$Type} from "packages/java/lang/ref/$Cleaner$Cleanable"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$ByteBuffer, $ByteBuffer$Type} from "packages/java/nio/$ByteBuffer"
import {$Handler, $Handler$Type} from "packages/icyllis/modernui/core/$Handler"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RecordingContext, $RecordingContext$Type} from "packages/icyllis/arc3d/engine/$RecordingContext"
import {$Looper, $Looper$Type} from "packages/icyllis/modernui/core/$Looper"
import {$ReadableByteChannel, $ReadableByteChannel$Type} from "packages/java/nio/channels/$ReadableByteChannel"
import {$DirectContext, $DirectContext$Type} from "packages/icyllis/arc3d/engine/$DirectContext"
import {$Thread, $Thread$Type} from "packages/java/lang/$Thread"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ContextOptions, $ContextOptions$Type} from "packages/icyllis/arc3d/engine/$ContextOptions"
import {$URI, $URI$Type} from "packages/java/net/$URI"
import {$URL, $URL$Type} from "packages/java/net/$URL"

export class $Core {


public static "initialize"(): void
public static "registerCleanup"(target: any, action: $Runnable$Type): $Cleaner$Cleanable
public static "readIntoNativeBuffer"(stream: $InputStream$Type): $ByteBuffer
public static "readIntoNativeBuffer"(channel: $ReadableByteChannel$Type): $ByteBuffer
public static "getMainThreadExecutor"(): $Executor
public static "getUiThreadExecutor"(): $Executor
public static "requireUiRecordingContext"(): $RecordingContext
public static "requireDirectContext"(): $DirectContext
public static "glShowCapsErrorDialog"(): void
public static "glSetupDebugCallback"(): void
public static "executeOnMainThread"(r: $Runnable$Type): void
public static "isOnRenderThread"(): boolean
public static "getUiHandlerAsync"(): $Handler
public static "terminate"(): void
public static "timeNanos"(): long
public static "checkUiThread"(): void
public static "isOnUiThread"(): boolean
public static "checkMainThread"(): void
public static "postOnMainThread"(r: $Runnable$Type): void
public static "timeMillis"(): long
public static "initUiThread"(): $Looper
public static "initOpenGL"(): boolean
public static "initOpenGL"(options: $ContextOptions$Type): boolean
public static "peekUiRecordingContext"(): $RecordingContext
public static "getRenderThreadExecutor"(): $Executor
public static "executeOnRenderThread"(r: $Runnable$Type): void
public static "getMainHandlerAsync"(): $Handler
public static "getMainThread"(): $Thread
public static "isOnMainThread"(): boolean
public static "checkRenderThread"(): void
public static "initVulkan"(): boolean
public static "initVulkan"(options: $ContextOptions$Type): boolean
public static "getRenderThread"(): $Thread
public static "peekDirectContext"(): $DirectContext
public static "glDebugMessage"(source: integer, type: integer, id: integer, severity: integer, length: integer, message: long, userParam: long): void
public static "getUiThread"(): $Thread
public static "flushRenderCalls"(): void
public static "postOnUiThread"(r: $Runnable$Type): void
public static "executeOnUiThread"(r: $Runnable$Type): void
public static "openURI"(uri: string): boolean
public static "openURI"(uri: $URI$Type): boolean
public static "getUiHandler"(): $Handler
public static "flushMainCalls"(): void
public static "postOnRenderThread"(r: $Runnable$Type): void
public static "openURL"(url: $URL$Type): boolean
get "mainThreadExecutor"(): $Executor
get "uiThreadExecutor"(): $Executor
get "onRenderThread"(): boolean
get "uiHandlerAsync"(): $Handler
get "onUiThread"(): boolean
get "renderThreadExecutor"(): $Executor
get "mainHandlerAsync"(): $Handler
get "mainThread"(): $Thread
get "onMainThread"(): boolean
get "renderThread"(): $Thread
get "uiThread"(): $Thread
get "uiHandler"(): $Handler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Core$Type = ($Core);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Core_ = $Core$Type;
}}
declare module "packages/icyllis/modernui/transition/$Slide" {
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$Visibility, $Visibility$Type} from "packages/icyllis/modernui/transition/$Visibility"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $Slide extends $Visibility {
static readonly "MODE_IN": integer
static readonly "MODE_OUT": integer
static readonly "MATCH_INSTANCE": integer
static readonly "MATCH_NAME": integer
static readonly "MATCH_ID": integer
static readonly "MATCH_ITEM_ID": integer

constructor()
constructor(slideEdge: integer)

public "onAppear"(sceneRoot: $ViewGroup$Type, view: $View$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "onDisappear"(sceneRoot: $ViewGroup$Type, view: $View$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "getSlideEdge"(): integer
public "setSlideEdge"(slideEdge: integer): void
public "captureEndValues"(transitionValues: $TransitionValues$Type): void
public "captureStartValues"(transitionValues: $TransitionValues$Type): void
get "slideEdge"(): integer
set "slideEdge"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Slide$Type = ($Slide);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Slide_ = $Slide$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Config$Text$TextDirection" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Config$Text$TextDirection extends $Enum<($Config$Text$TextDirection)> {
static readonly "FIRST_STRONG": $Config$Text$TextDirection
static readonly "ANY_RTL": $Config$Text$TextDirection
static readonly "LTR": $Config$Text$TextDirection
static readonly "RTL": $Config$Text$TextDirection
static readonly "LOCALE": $Config$Text$TextDirection
static readonly "FIRST_STRONG_LTR": $Config$Text$TextDirection
static readonly "FIRST_STRONG_RTL": $Config$Text$TextDirection


public "toString"(): string
public static "values"(): ($Config$Text$TextDirection)[]
public static "valueOf"(name: string): $Config$Text$TextDirection
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Text$TextDirection$Type = (("any_rtl") | ("first_strong_ltr") | ("first_strong_rtl") | ("first_strong") | ("ltr") | ("rtl") | ("locale")) | ($Config$Text$TextDirection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config$Text$TextDirection_ = $Config$Text$TextDirection$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuPresenter$Callback" {
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"

export interface $MenuPresenter$Callback {

 "onCloseMenu"(arg0: $MenuBuilder$Type, arg1: boolean): void
 "onOpenSubMenu"(arg0: $MenuBuilder$Type): boolean
}

export namespace $MenuPresenter$Callback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuPresenter$Callback$Type = ($MenuPresenter$Callback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuPresenter$Callback_ = $MenuPresenter$Callback$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentManager$BackStackEntry" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $FragmentManager$BackStackEntry {

 "getName"(): string
 "getId"(): integer
}

export namespace $FragmentManager$BackStackEntry {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentManager$BackStackEntry$Type = ($FragmentManager$BackStackEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentManager$BackStackEntry_ = $FragmentManager$BackStackEntry$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$TextLayoutEngine" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$MuiModApi$OnDebugDumpListener, $MuiModApi$OnDebugDumpListener$Type} from "packages/icyllis/modernui/mc/$MuiModApi$OnDebugDumpListener"
import {$ReorderTextHandler$IConsumer, $ReorderTextHandler$IConsumer$Type} from "packages/icyllis/modernui/mc/text/$ReorderTextHandler$IConsumer"
import {$ModernTextRenderer, $ModernTextRenderer$Type} from "packages/icyllis/modernui/mc/text/$ModernTextRenderer"
import {$FontResourceManager, $FontResourceManager$Type} from "packages/icyllis/modernui/mc/$FontResourceManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FontCollection, $FontCollection$Type} from "packages/icyllis/modernui/graphics/text/$FontCollection"
import {$ProfilerFiller, $ProfilerFiller$Type} from "packages/net/minecraft/util/profiling/$ProfilerFiller"
import {$FormattedText, $FormattedText$Type} from "packages/net/minecraft/network/chat/$FormattedText"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$TextLayoutEngine$FastCharSet, $TextLayoutEngine$FastCharSet$Type} from "packages/icyllis/modernui/mc/text/$TextLayoutEngine$FastCharSet"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$BakedGlyph, $BakedGlyph$Type} from "packages/icyllis/modernui/graphics/font/$BakedGlyph"
import {$TextLayout, $TextLayout$Type} from "packages/icyllis/modernui/mc/text/$TextLayout"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$FontManager, $FontManager$Type} from "packages/net/minecraft/client/gui/font/$FontManager"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$ModernStringSplitter, $ModernStringSplitter$Type} from "packages/icyllis/modernui/mc/text/$ModernStringSplitter"
import {$PreparableReloadListener$PreparationBarrier, $PreparableReloadListener$PreparationBarrier$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener$PreparationBarrier"
import {$MuiModApi$OnWindowResizeListener, $MuiModApi$OnWindowResizeListener$Type} from "packages/icyllis/modernui/mc/$MuiModApi$OnWindowResizeListener"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"
import {$GlyphManager, $GlyphManager$Type} from "packages/icyllis/modernui/graphics/font/$GlyphManager"
import {$FontFamily, $FontFamily$Type} from "packages/icyllis/modernui/graphics/text/$FontFamily"

export class $TextLayoutEngine extends $FontResourceManager implements $MuiModApi$OnWindowResizeListener, $MuiModApi$OnDebugDumpListener {
static readonly "MARKER": $Marker
static "sFixedResolution": boolean
static "sTextDirection": integer
static "sCacheLifespan": integer
static "sCurrentInWorldRendering": boolean
static "sUseTextShadersInWorld": boolean
static "sRawUseTextShadersInWorld": boolean
static readonly "SANS_SERIF": $ResourceLocation
static readonly "SERIF": $ResourceLocation
static readonly "MONOSPACED": $ResourceLocation
static readonly "COMPUTE_ADVANCES": integer
static readonly "COMPUTE_LINE_BOUNDARIES": integer
static readonly "DEFAULT_FONT_BEHAVIOR_IGNORE_ALL": integer
static readonly "DEFAULT_FONT_BEHAVIOR_KEEP_ASCII": integer
static readonly "DEFAULT_FONT_BEHAVIOR_KEEP_OTHER": integer
static readonly "DEFAULT_FONT_BEHAVIOR_KEEP_ALL": integer
static readonly "DEFAULT_FONT_BEHAVIOR_ONLY_INCLUDE": integer
static readonly "DEFAULT_FONT_BEHAVIOR_ONLY_EXCLUDE": integer
static "sDefaultFontBehavior": integer
static "sDefaultFontRuleSet": $List<(any)>
static "sUseComponentCache": boolean
static "sAllowAsyncLayout": boolean
static readonly "MIN_PIXEL_DENSITY_FOR_SDF": integer
static readonly "BITMAP_SCALE": integer

constructor()

public "clear"(): void
public static "getInstance"(): $TextLayoutEngine
public "close"(): void
public "reload"(): void
public "onDebugDump"(pw: $PrintWriter$Type): void
public "onWindowResize"(width: integer, height: integer, newScale: integer, oldScale: integer): void
public "getGlyphManager"(): $GlyphManager
public "getCacheMemorySize"(): integer
public "injectFontManager"(manager: $FontManager$Type): $TextLayoutEngine
public "getCacheCount"(): integer
public "getResLevel"(): integer
public "lookupFastChars"(font: $Font$Type, resLevel: integer): $TextLayoutEngine$FastCharSet
public "getStandardTexture"(): integer
public "dumpBitmapFonts"(): void
public "getFontCollection"(fontName: $ResourceLocation$Type): $FontCollection
/**
 * 
 * @deprecated
 */
public "handleSequence"(sequence: $FormattedCharSequence$Type, consumer: $ReorderTextHandler$IConsumer$Type): boolean
public "lookupGlyph"(font: $Font$Type, devSize: integer, glyphId: integer): $BakedGlyph
public "getEmojiTexture"(): integer
public "getStringSplitter"(): $ModernStringSplitter
public "getTextRenderer"(): $ModernTextRenderer
public "onFontRegistered"(f: $FontFamily$Type): void
public "reloadAll"(): void
public "reload"(preparationBarrier: $PreparableReloadListener$PreparationBarrier$Type, resourceManager: $ResourceManager$Type, preparationProfiler: $ProfilerFiller$Type, reloadProfiler: $ProfilerFiller$Type, preparationExecutor: $Executor$Type, reloadExecutor: $Executor$Type): $CompletableFuture<(void)>
public "lookupVanillaLayout"(text: string, style: $Style$Type): $TextLayout
public "lookupVanillaLayout"(text: string, style: $Style$Type, computeFlags: integer): $TextLayout
public "lookupVanillaLayout"(text: string): $TextLayout
public "getTextDirectionHeuristic"(): $TextDirectionHeuristic
public "getRawDefaultFontCollection"(): $FontCollection
public static "adjustPixelDensityForSDF"(resLevel: integer): integer
public "lookupFormattedLayout"(sequence: $FormattedCharSequence$Type, computeFlags: integer): $TextLayout
public "lookupFormattedLayout"(text: $FormattedText$Type, style: $Style$Type, computeFlags: integer): $TextLayout
public "lookupFormattedLayout"(text: $FormattedText$Type): $TextLayout
public "lookupFormattedLayout"(text: $FormattedText$Type, style: $Style$Type): $TextLayout
public "lookupFormattedLayout"(sequence: $FormattedCharSequence$Type): $TextLayout
public "onEndClientTick"(): void
get "instance"(): $TextLayoutEngine
get "glyphManager"(): $GlyphManager
get "cacheMemorySize"(): integer
get "cacheCount"(): integer
get "resLevel"(): integer
get "standardTexture"(): integer
get "emojiTexture"(): integer
get "stringSplitter"(): $ModernStringSplitter
get "textRenderer"(): $ModernTextRenderer
get "textDirectionHeuristic"(): $TextDirectionHeuristic
get "rawDefaultFontCollection"(): $FontCollection
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextLayoutEngine$Type = ($TextLayoutEngine);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextLayoutEngine_ = $TextLayoutEngine$Type;
}}
declare module "packages/icyllis/modernui/widget/$GridLayout$Alignment" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GridLayout$Alignment {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GridLayout$Alignment$Type = ($GridLayout$Alignment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GridLayout$Alignment_ = $GridLayout$Alignment$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$ViewModelProvider" {
import {$ViewModelStore, $ViewModelStore$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelStore"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ViewModelProvider$Factory, $ViewModelProvider$Factory$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelProvider$Factory"
import {$ViewModel, $ViewModel$Type} from "packages/icyllis/modernui/lifecycle/$ViewModel"
import {$ViewModelStoreOwner, $ViewModelStoreOwner$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelStoreOwner"

export class $ViewModelProvider {

constructor(store: $ViewModelStore$Type, factory: $ViewModelProvider$Factory$Type)
constructor(owner: $ViewModelStoreOwner$Type, factory: $ViewModelProvider$Factory$Type)
constructor(owner: $ViewModelStoreOwner$Type)

public "get"<T extends $ViewModel>(modelClass: $Class$Type<(T)>): T
public "get"<T extends $ViewModel>(key: string, modelClass: $Class$Type<(T)>): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewModelProvider$Type = ($ViewModelProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewModelProvider_ = $ViewModelProvider$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$Drawable" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Theme, $Theme$Type} from "packages/icyllis/modernui/resources/$Theme"
import {$Resources, $Resources$Type} from "packages/icyllis/modernui/resources/$Resources"
import {$Drawable$ConstantState, $Drawable$ConstantState$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$ConstantState"
import {$Drawable$Callback, $Drawable$Callback$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$Callback"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $Drawable {
static readonly "MAX_LEVEL": integer

constructor()

public "getBounds"(): $Rect
public "getState"(): (integer)[]
public "setState"(stateSet: (integer)[]): boolean
public "getLevel"(): integer
public "setLevel"(level: integer): boolean
public "setChangingConfigurations"(configs: integer): void
public "hasFocusStateSpecified"(): boolean
public "getChangingConfigurations"(): integer
public "setVisible"(visible: boolean, restart: boolean): boolean
public "draw"(arg0: $Canvas$Type): void
public "setHotspot"(x: float, y: float): void
public "getPadding"(padding: $Rect$Type): boolean
public "jumpToCurrentState"(): void
public "isStateful"(): boolean
public "isVisible"(): boolean
public "copyBounds"(): $Rect
public "copyBounds"(bounds: $Rect$Type): void
public "unscheduleSelf"(what: $Runnable$Type): void
public "invalidateSelf"(): void
public "setTintList"(tint: $ColorStateList$Type): void
public "scheduleSelf"(what: $Runnable$Type, when: long): void
public "setTintBlendMode"(blendMode: $BlendMode$Type): void
public "setHotspotBounds"(left: integer, top: integer, right: integer, bottom: integer): void
public "getHotspotBounds"(outRect: $Rect$Type): void
public "getConstantState"(): $Drawable$ConstantState
public "clearMutated"(): void
public "canApplyTheme"(): boolean
public "setAutoMirrored"(mirrored: boolean): void
public "applyTheme"(t: $Theme$Type): void
public "getCurrent"(): $Drawable
public "isAutoMirrored"(): boolean
public static "scaleFromDensity"(pixels: integer, sourceDensity: integer, targetDensity: integer, isSize: boolean): integer
public static "scaleFromDensity"(pixels: float, sourceDensity: integer, targetDensity: integer): float
public static "resolveDensity"(r: $Resources$Type, parentDensity: integer): integer
public "getCallback"(): $Drawable$Callback
public "getAlpha"(): integer
public "setLayoutDirection"(layoutDirection: integer): boolean
public "setTint"(tintColor: integer): void
public "getLayoutDirection"(): integer
public "getIntrinsicHeight"(): integer
public "setBounds"(bounds: $Rect$Type): void
public "setBounds"(left: integer, top: integer, right: integer, bottom: integer): void
public "getIntrinsicWidth"(): integer
public "setAlpha"(alpha: integer): void
public "mutate"(): $Drawable
public "getMinimumHeight"(): integer
public "getMinimumWidth"(): integer
public "setCallback"(cb: $Drawable$Callback$Type): void
get "bounds"(): $Rect
get "state"(): (integer)[]
set "state"(value: (integer)[])
get "level"(): integer
set "level"(value: integer)
set "changingConfigurations"(value: integer)
get "changingConfigurations"(): integer
get "stateful"(): boolean
get "visible"(): boolean
set "tintList"(value: $ColorStateList$Type)
set "tintBlendMode"(value: $BlendMode$Type)
get "constantState"(): $Drawable$ConstantState
set "autoMirrored"(value: boolean)
get "current"(): $Drawable
get "autoMirrored"(): boolean
get "callback"(): $Drawable$Callback
get "alpha"(): integer
set "layoutDirection"(value: integer)
set "tint"(value: integer)
get "layoutDirection"(): integer
get "intrinsicHeight"(): integer
set "bounds"(value: $Rect$Type)
get "intrinsicWidth"(): integer
set "alpha"(value: integer)
get "minimumHeight"(): integer
get "minimumWidth"(): integer
set "callback"(value: $Drawable$Callback$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Drawable$Type = ($Drawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Drawable_ = $Drawable$Type;
}}
declare module "packages/icyllis/modernui/text/method/$TransformationMethod" {
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $TransformationMethod {

 "onFocusChanged"(arg0: $View$Type, arg1: charseq, arg2: boolean, arg3: integer, arg4: $Rect$Type): void
 "getTransformation"(arg0: charseq, arg1: $View$Type): charseq
}

export namespace $TransformationMethod {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TransformationMethod$Type = ($TransformationMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TransformationMethod_ = $TransformationMethod$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnKeyListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"

export interface $View$OnKeyListener {

 "onKey"(arg0: $View$Type, arg1: integer, arg2: $KeyEvent$Type): boolean

(arg0: $View$Type, arg1: integer, arg2: $KeyEvent$Type): boolean
}

export namespace $View$OnKeyListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnKeyListener$Type = ($View$OnKeyListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnKeyListener_ = $View$OnKeyListener$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$MeasuredText$Run" {
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $MeasuredText$Run {
readonly "mStart": integer
readonly "mEnd": integer


public "getLocale"(): $Locale
public "getExtent"(arg0: (character)[], arg1: integer, arg2: integer, arg3: $FontMetricsInt$Type): void
public "getLineBreakStyle"(): integer
public "isRtl"(): boolean
public "getMemoryUsage"(): integer
public "measure"(arg0: (character)[], arg1: boolean): void
public "getLineBreakWordStyle"(): integer
public "getAdvance"(arg0: (character)[], arg1: integer, arg2: integer): float
public "getAdvance"(arg0: (character)[], arg1: integer): float
public "canBreak"(): boolean
get "locale"(): $Locale
get "lineBreakStyle"(): integer
get "rtl"(): boolean
get "memoryUsage"(): integer
get "lineBreakWordStyle"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MeasuredText$Run$Type = ($MeasuredText$Run);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MeasuredText$Run_ = $MeasuredText$Run$Type;
}}
declare module "packages/icyllis/modernui/view/$OneShotPreDrawListener" {
import {$View$OnAttachStateChangeListener, $View$OnAttachStateChangeListener$Type} from "packages/icyllis/modernui/view/$View$OnAttachStateChangeListener"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$ViewTreeObserver$OnPreDrawListener, $ViewTreeObserver$OnPreDrawListener$Type} from "packages/icyllis/modernui/view/$ViewTreeObserver$OnPreDrawListener"

export class $OneShotPreDrawListener implements $ViewTreeObserver$OnPreDrawListener, $View$OnAttachStateChangeListener {


public static "add"(view: $View$Type, runnable: $Runnable$Type): $OneShotPreDrawListener
public "onViewDetachedFromWindow"(v: $View$Type): void
public "onViewAttachedToWindow"(v: $View$Type): void
public "removeListener"(): void
public "onPreDraw"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OneShotPreDrawListener$Type = ($OneShotPreDrawListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OneShotPreDrawListener_ = $OneShotPreDrawListener$Type;
}}
declare module "packages/icyllis/modernui/widget/$Checkable" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $Checkable {

 "setChecked"(arg0: boolean): void
 "isChecked"(): boolean
 "toggle"(): void
}

export namespace $Checkable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Checkable$Type = ($Checkable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Checkable_ = $Checkable$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$TextRenderType" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderType$CompositeRenderType, $RenderType$CompositeRenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType$CompositeRenderType"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$DrawBuffer, $DrawBuffer$Type} from "packages/com/jozufozu/flywheel/backend/instancing/$DrawBuffer"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$Font$DisplayMode, $Font$DisplayMode$Type} from "packages/net/minecraft/client/gui/$Font$DisplayMode"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"

export class $TextRenderType extends $RenderType {
static readonly "MODE_NORMAL": integer
static readonly "MODE_SDF_FILL": integer
static readonly "MODE_SDF_STROKE": integer
static readonly "MODE_SEE_THROUGH": integer
static readonly "MODE_UNIFORM_SCALE": integer
static readonly "BIG_BUFFER_SIZE": integer
static readonly "MEDIUM_BUFFER_SIZE": integer
static readonly "SMALL_BUFFER_SIZE": integer
static readonly "TRANSIENT_BUFFER_SIZE": integer
static readonly "LINES": $RenderType$CompositeRenderType
static readonly "LINE_STRIP": $RenderType$CompositeRenderType
 "sortOnUpload": boolean
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard


public static "clear"(cleanup: boolean): void
public static "getOrCreate"(texture: integer, mode: $Font$DisplayMode$Type): $TextRenderType
public static "getOrCreate"(texture: integer, mode: integer): $TextRenderType
public static "toggleSDFShaders"(smart: boolean): void
public static "getShaderSDFFill"(): $ShaderInstance
public static "getShaderNormal"(): $ShaderInstance
public static "getShaderSDFStroke"(): $ShaderInstance
public static "preloadShaders"(): void
public static "getFirstSDFFillType"(): $TextRenderType
public static "getFirstSDFStrokeType"(): $TextRenderType
public static "getDrawBuffer"(arg0: $RenderType$Type): $DrawBuffer
get "shaderSDFFill"(): $ShaderInstance
get "shaderNormal"(): $ShaderInstance
get "shaderSDFStroke"(): $ShaderInstance
get "firstSDFFillType"(): $TextRenderType
get "firstSDFStrokeType"(): $TextRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextRenderType$Type = ($TextRenderType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextRenderType_ = $TextRenderType$Type;
}}
declare module "packages/icyllis/modernui/text/$Spannable" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$IntStream, $IntStream$Type} from "packages/java/util/stream/$IntStream"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Spannable$Factory, $Spannable$Factory$Type} from "packages/icyllis/modernui/text/$Spannable$Factory"

export interface $Spannable extends $Spanned {

 "setSpan"(arg0: any, arg1: integer, arg2: integer, arg3: integer): void
 "removeSpan"(arg0: any): void
 "removeSpan"(span: any, flags: integer): void
 "nextSpanTransition"(arg0: integer, arg1: integer, arg2: $Class$Type<(any)>): integer
 "getSpanStart"(arg0: any): integer
 "getSpanFlags"(arg0: any): integer
 "getSpans"<T>(arg0: integer, arg1: integer, arg2: $Class$Type<(any)>, arg3: $List$Type<(T)>): $List<(T)>
 "getSpans"<T>(start: integer, end: integer, type: $Class$Type<(any)>): $List<(T)>
 "getSpanEnd"(arg0: any): integer
 "length"(): integer
 "toString"(): string
 "charAt"(arg0: integer): character
 "isEmpty"(): boolean
 "codePoints"(): $IntStream
 "subSequence"(arg0: integer, arg1: integer): charseq
 "chars"(): $IntStream
}

export namespace $Spannable {
const DEFAULT_FACTORY: $Spannable$Factory
function compare(arg0: charseq, arg1: charseq): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Spannable$Type = ($Spannable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Spannable_ = $Spannable$Type;
}}
declare module "packages/icyllis/modernui/util/$AttributeSet" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $AttributeSet {

}

export namespace $AttributeSet {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeSet$Type = ($AttributeSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeSet_ = $AttributeSet$Type;
}}
declare module "packages/icyllis/modernui/util/$IntProperty" {
import {$Property, $Property$Type} from "packages/icyllis/modernui/util/$Property"

export class $IntProperty<T> extends $Property<(T), (integer)> {

constructor(name: string)

/**
 * 
 * @deprecated
 */
public "set"(object: T, value: integer): void
public "setValue"(arg0: T, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntProperty$Type<T> = ($IntProperty<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntProperty_<T> = $IntProperty$Type<(T)>;
}}
declare module "packages/icyllis/modernui/transition/$TransitionPropagation" {
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $TransitionPropagation {

constructor()

public "getPropagationProperties"(): (string)[]
public "getStartDelay"(arg0: $ViewGroup$Type, arg1: $Transition$Type, arg2: $TransitionValues$Type, arg3: $TransitionValues$Type): long
public "captureValues"(arg0: $TransitionValues$Type): void
get "propagationProperties"(): (string)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TransitionPropagation$Type = ($TransitionPropagation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TransitionPropagation_ = $TransitionPropagation$Type;
}}
declare module "packages/icyllis/modernui/util/$DataSetObservable" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$Observable, $Observable$Type} from "packages/icyllis/modernui/util/$Observable"

export class $DataSetObservable extends $Observable<($DataSetObserver)> {

constructor()

public "notifyChanged"(): void
public "notifyInvalidated"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataSetObservable$Type = ($DataSetObservable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataSetObservable_ = $DataSetObservable$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$Icon" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

/**
 * 
 * @deprecated
 */
export class $Icon {

constructor(location: $ResourceLocation$Type, u1: float, v1: float, u2: float, v2: float, aa: boolean)

public "getRight"(): float
public "getLeft"(): float
public "getTop"(): float
public "getBottom"(): float
public "bindTexture"(): void
get "right"(): float
get "left"(): float
get "top"(): float
get "bottom"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Icon$Type = ($Icon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Icon_ = $Icon$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$LineBreaker" {
import {$LineBreaker$LineWidth, $LineBreaker$LineWidth$Type} from "packages/icyllis/modernui/graphics/text/$LineBreaker$LineWidth"
import {$LineBreaker$ParagraphConstraints, $LineBreaker$ParagraphConstraints$Type} from "packages/icyllis/modernui/graphics/text/$LineBreaker$ParagraphConstraints"
import {$TabStops, $TabStops$Type} from "packages/icyllis/modernui/text/$TabStops"
import {$LineBreaker$Result, $LineBreaker$Result$Type} from "packages/icyllis/modernui/graphics/text/$LineBreaker$Result"
import {$MeasuredText, $MeasuredText$Type} from "packages/icyllis/modernui/graphics/text/$MeasuredText"
import {$ULocale, $ULocale$Type} from "packages/com/ibm/icu/util/$ULocale"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $LineBreaker {

constructor(textBuf: (character)[], measuredText: $MeasuredText$Type, lineWidthLimits: $LineBreaker$LineWidth$Type, tabStops: $TabStops$Type)

public static "computeLineBreaks"(measuredText: $MeasuredText$Type, constraints: $LineBreaker$ParagraphConstraints$Type, indents: (integer)[], lineNumber: integer): $LineBreaker$Result
public static "isLineEndSpace"(c: character): boolean
public static "getLocaleWithLineBreakOption"(locale: $Locale$Type, lbStyle: integer, lbWordStyle: integer): $ULocale
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LineBreaker$Type = ($LineBreaker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LineBreaker_ = $LineBreaker$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Bitmap$Format" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Bitmap$Format extends $Enum<($Bitmap$Format)> {
static readonly "GRAY_8": $Bitmap$Format
static readonly "GRAY_ALPHA_88": $Bitmap$Format
static readonly "RGB_888": $Bitmap$Format
static readonly "RGBA_8888": $Bitmap$Format
static readonly "GRAY_16": $Bitmap$Format
static readonly "GRAY_ALPHA_1616": $Bitmap$Format
static readonly "RGB_161616": $Bitmap$Format
static readonly "RGBA_16161616": $Bitmap$Format
static readonly "GRAY_F32": $Bitmap$Format
static readonly "GRAY_ALPHA_F32": $Bitmap$Format
static readonly "RGB_F32": $Bitmap$Format
static readonly "RGBA_F32": $Bitmap$Format


public "isChannelU16"(): boolean
public "isChannelU8"(): boolean
public static "get"(chs: integer, u16: boolean, hdr: boolean): $Bitmap$Format
public static "values"(): ($Bitmap$Format)[]
public static "valueOf"(name: string): $Bitmap$Format
public "hasAlpha"(): boolean
public "getColorType"(): integer
public "getChannels"(): integer
public "getBytesPerPixel"(): integer
public "isChannelHDR"(): boolean
get "channelU16"(): boolean
get "channelU8"(): boolean
get "colorType"(): integer
get "channels"(): integer
get "bytesPerPixel"(): integer
get "channelHDR"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Bitmap$Format$Type = (("rgba_16161616") | ("gray_alpha_88") | ("gray_f32") | ("gray_16") | ("gray_alpha_f32") | ("rgb_f32") | ("gray_8") | ("rgba_8888") | ("gray_alpha_1616") | ("rgb_888") | ("rgb_161616") | ("rgba_f32")) | ($Bitmap$Format);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Bitmap$Format_ = $Bitmap$Format$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$DrawableContainer" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Drawable$ConstantState, $Drawable$ConstantState$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$ConstantState"
import {$Drawable$Callback, $Drawable$Callback$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$Callback"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $DrawableContainer extends $Drawable implements $Drawable$Callback {
static readonly "MAX_LEVEL": integer

constructor()

public "getCurrentIndex"(): integer
public "selectDrawable"(index: integer): boolean
public "hasFocusStateSpecified"(): boolean
public "setVisible"(visible: boolean, restart: boolean): boolean
public "draw"(canvas: $Canvas$Type): void
public "setHotspot"(x: float, y: float): void
public "getPadding"(padding: $Rect$Type): boolean
public "jumpToCurrentState"(): void
public "isStateful"(): boolean
public "setTintList"(tint: $ColorStateList$Type): void
public "setTintBlendMode"(blendMode: $BlendMode$Type): void
public "setHotspotBounds"(left: integer, top: integer, right: integer, bottom: integer): void
public "getHotspotBounds"(outRect: $Rect$Type): void
public "getConstantState"(): $Drawable$ConstantState
public "clearMutated"(): void
public "setAutoMirrored"(mirrored: boolean): void
public "getCurrent"(): $Drawable
public "isAutoMirrored"(): boolean
public "getAlpha"(): integer
public "getIntrinsicHeight"(): integer
public "getIntrinsicWidth"(): integer
public "setAlpha"(alpha: integer): void
public "mutate"(): $Drawable
public "getMinimumHeight"(): integer
public "getMinimumWidth"(): integer
public "unscheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type): void
public "invalidateDrawable"(who: $Drawable$Type): void
public "scheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type, when: long): void
public "setExitFadeDuration"(ms: integer): void
public "setEnterFadeDuration"(ms: integer): void
get "currentIndex"(): integer
get "stateful"(): boolean
set "tintList"(value: $ColorStateList$Type)
set "tintBlendMode"(value: $BlendMode$Type)
get "constantState"(): $Drawable$ConstantState
set "autoMirrored"(value: boolean)
get "current"(): $Drawable
get "autoMirrored"(): boolean
get "alpha"(): integer
get "intrinsicHeight"(): integer
get "intrinsicWidth"(): integer
set "alpha"(value: integer)
get "minimumHeight"(): integer
get "minimumWidth"(): integer
set "exitFadeDuration"(value: integer)
set "enterFadeDuration"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawableContainer$Type = ($DrawableContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawableContainer_ = $DrawableContainer$Type;
}}
declare module "packages/icyllis/modernui/core/$UndoOperation" {
import {$UndoOwner, $UndoOwner$Type} from "packages/icyllis/modernui/core/$UndoOwner"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$Parcelable, $Parcelable$Type} from "packages/icyllis/modernui/util/$Parcelable"

export class $UndoOperation<DATA> implements $Parcelable {

constructor(owner: $UndoOwner$Type)

public "getOwner"(): $UndoOwner
public "commit"(): void
public "allowMerge"(): boolean
public "getOwnerData"(): DATA
public "matchOwner"(owner: $UndoOwner$Type): boolean
public "redo"(): void
public "undo"(): void
public "hasData"(): boolean
public "writeToParcel"(arg0: $Parcel$Type, arg1: integer): void
get "owner"(): $UndoOwner
get "ownerData"(): DATA
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UndoOperation$Type<DATA> = ($UndoOperation<(DATA)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UndoOperation_<DATA> = $UndoOperation$Type<(DATA)>;
}}
declare module "packages/icyllis/modernui/view/menu/$ShowableListMenu" {
import {$ListView, $ListView$Type} from "packages/icyllis/modernui/widget/$ListView"

export interface $ShowableListMenu {

 "getListView"(): $ListView
 "dismiss"(): void
 "isShowing"(): boolean
 "show"(): void
}

export namespace $ShowableListMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShowableListMenu$Type = ($ShowableListMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShowableListMenu_ = $ShowableListMenu$Type;
}}
declare module "packages/icyllis/modernui/widget/$MenuItemHoverListener" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"

export interface $MenuItemHoverListener {

 "onItemHoverEnter"(arg0: $MenuBuilder$Type, arg1: $MenuItem$Type): void
 "onItemHoverExit"(arg0: $MenuBuilder$Type, arg1: $MenuItem$Type): void
}

export namespace $MenuItemHoverListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuItemHoverListener$Type = ($MenuItemHoverListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuItemHoverListener_ = $MenuItemHoverListener$Type;
}}
declare module "packages/icyllis/modernui/text/style/$ParagraphStyle" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ParagraphStyle {

}

export namespace $ParagraphStyle {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParagraphStyle$Type = ($ParagraphStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParagraphStyle_ = $ParagraphStyle$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$MenuScreenFactory" {
import {$MenuScreens$ScreenConstructor, $MenuScreens$ScreenConstructor$Type} from "packages/net/minecraft/client/gui/screens/$MenuScreens$ScreenConstructor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$ScreenCallback, $ScreenCallback$Type} from "packages/icyllis/modernui/mc/$ScreenCallback"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export interface $MenuScreenFactory<T extends $AbstractContainerMenu> extends $MenuScreens$ScreenConstructor<(T), ($AbstractContainerScreen<(T)>)> {

 "create"(menu: T, inventory: $Inventory$Type, title: $Component$Type): $AbstractContainerScreen<(T)>
 "createCallback"(menu: T): $ScreenCallback
 "createFragment"(arg0: T): $Fragment
 "fromPacket"(arg0: $Component$Type, arg1: $MenuType$Type<(T)>, arg2: $Minecraft$Type, arg3: integer): void

(factory: $MenuScreenFactory$Type<(T)>): $MenuScreenFactory<(T)>
}

export namespace $MenuScreenFactory {
function create<T>(factory: $MenuScreenFactory$Type<(T)>): $MenuScreenFactory<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuScreenFactory$Type<T> = ($MenuScreenFactory<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuScreenFactory_<T> = $MenuScreenFactory$Type<(T)>;
}}
declare module "packages/icyllis/modernui/text/$TextUtils$EllipsizeCallback" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $TextUtils$EllipsizeCallback {

 "ellipsized"(arg0: integer, arg1: integer): void

(arg0: integer, arg1: integer): void
}

export namespace $TextUtils$EllipsizeCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextUtils$EllipsizeCallback$Type = ($TextUtils$EllipsizeCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextUtils$EllipsizeCallback_ = $TextUtils$EllipsizeCallback$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$ViewModelStoreOwner" {
import {$ViewModelStore, $ViewModelStore$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelStore"
import {$ViewModelProvider$Factory, $ViewModelProvider$Factory$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelProvider$Factory"

export interface $ViewModelStoreOwner {

 "getDefaultViewModelProviderFactory"(): $ViewModelProvider$Factory
 "getViewModelStore"(): $ViewModelStore

(): $ViewModelProvider$Factory
}

export namespace $ViewModelStoreOwner {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewModelStoreOwner$Type = ($ViewModelStoreOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewModelStoreOwner_ = $ViewModelStoreOwner$Type;
}}
declare module "packages/icyllis/modernui/audio/$VorbisPullDecoder" {
import {$ShortBuffer, $ShortBuffer$Type} from "packages/java/nio/$ShortBuffer"
import {$ByteBuffer, $ByteBuffer$Type} from "packages/java/nio/$ByteBuffer"
import {$SoundSample, $SoundSample$Type} from "packages/icyllis/modernui/audio/$SoundSample"

export class $VorbisPullDecoder extends $SoundSample {

constructor(nativeEncodedAudioBuffer: $ByteBuffer$Type)

public "close"(): void
public "seek"(sampleOffset: integer): boolean
public "getSamplesShortInterleaved"(pcmBuffer: $ShortBuffer$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VorbisPullDecoder$Type = ($VorbisPullDecoder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VorbisPullDecoder_ = $VorbisPullDecoder$Type;
}}
declare module "packages/icyllis/modernui/resources/$XMLResourceReader" {
import {$QName, $QName$Type} from "packages/javax/xml/namespace/$QName"
import {$NamespaceContext, $NamespaceContext$Type} from "packages/javax/xml/namespace/$NamespaceContext"
import {$Location, $Location$Type} from "packages/javax/xml/stream/$Location"
import {$XMLStreamReader, $XMLStreamReader$Type} from "packages/javax/xml/stream/$XMLStreamReader"
import {$AttributeSet, $AttributeSet$Type} from "packages/icyllis/modernui/util/$AttributeSet"

export interface $XMLResourceReader extends $XMLStreamReader, $AttributeSet {

 "getName"(): $QName
 "getProperty"(arg0: string): any
 "hasNext"(): boolean
 "next"(): integer
 "getLocation"(): $Location
 "close"(): void
 "getEncoding"(): string
 "nextTag"(): integer
 "getText"(): string
 "isStandalone"(): boolean
 "getVersion"(): string
 "getTextLength"(): integer
 "getAttributeCount"(): integer
 "getAttributeValue"(arg0: string, arg1: string): string
 "getAttributeValue"(arg0: integer): string
 "isCharacters"(): boolean
 "getTextCharacters"(arg0: integer, arg1: (character)[], arg2: integer, arg3: integer): integer
 "getTextCharacters"(): (character)[]
 "getTextStart"(): integer
 "isWhiteSpace"(): boolean
 "hasName"(): boolean
 "isEndElement"(): boolean
 "isStartElement"(): boolean
 "getAttributeNamespace"(arg0: integer): string
 "getAttributePrefix"(arg0: integer): string
 "getElementText"(): string
 "getNamespacePrefix"(arg0: integer): string
 "hasText"(): boolean
 "isAttributeSpecified"(arg0: integer): boolean
 "getPrefix"(): string
 "getAttributeLocalName"(arg0: integer): string
 "getCharacterEncodingScheme"(): string
 "getNamespaceContext"(): $NamespaceContext
 "getPITarget"(): string
 "getPIData"(): string
 "standaloneSet"(): boolean
 "getLocalName"(): string
 "getNamespaceURI"(arg0: integer): string
 "getNamespaceURI"(arg0: string): string
 "getNamespaceURI"(): string
 "getAttributeName"(arg0: integer): $QName
 "getAttributeType"(arg0: integer): string
 "getEventType"(): integer
 "getNamespaceCount"(): integer
 "require"(arg0: integer, arg1: string, arg2: string): void
}

export namespace $XMLResourceReader {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XMLResourceReader$Type = ($XMLResourceReader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XMLResourceReader_ = $XMLResourceReader$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$LayoutUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LayoutUtils {

constructor()

public static "isStretchableSpace"(c: character): boolean
public static "isWordBreakBefore"(c: character): boolean
public static "isWordBreakAfter"(c: character): boolean
public static "getNextWordBreakForCache"(buf: (character)[], start: integer, end: integer, offset: integer): integer
public static "getPrevWordBreakForCache"(buf: (character)[], start: integer, end: integer, offset: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutUtils$Type = ($LayoutUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutUtils_ = $LayoutUtils$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$MediatorLiveData" {
import {$LiveData, $LiveData$Type} from "packages/icyllis/modernui/lifecycle/$LiveData"
import {$MutableLiveData, $MutableLiveData$Type} from "packages/icyllis/modernui/lifecycle/$MutableLiveData"
import {$Observer, $Observer$Type} from "packages/icyllis/modernui/lifecycle/$Observer"

export class $MediatorLiveData<T> extends $MutableLiveData<(T)> {

constructor()

public "addSource"<S>(source: $LiveData$Type<(S)>, onChanged: $Observer$Type<(any)>): void
public "removeSource"<S>(toRemote: $LiveData$Type<(S)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MediatorLiveData$Type<T> = ($MediatorLiveData<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MediatorLiveData_<T> = $MediatorLiveData$Type<(T)>;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentManager$OpGenerator" {
import {$BackStackRecord, $BackStackRecord$Type} from "packages/icyllis/modernui/fragment/$BackStackRecord"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$BooleanArrayList, $BooleanArrayList$Type} from "packages/it/unimi/dsi/fastutil/booleans/$BooleanArrayList"

export interface $FragmentManager$OpGenerator {

 "generateOps"(arg0: $ArrayList$Type<($BackStackRecord$Type)>, arg1: $BooleanArrayList$Type): boolean

(arg0: $ArrayList$Type<($BackStackRecord$Type)>, arg1: $BooleanArrayList$Type): boolean
}

export namespace $FragmentManager$OpGenerator {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentManager$OpGenerator$Type = ($FragmentManager$OpGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentManager$OpGenerator_ = $FragmentManager$OpGenerator$Type;
}}
declare module "packages/icyllis/modernui/mc/$ScreenCallback" {
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"

export interface $ScreenCallback {

 "isPauseScreen"(): boolean
 "shouldClose"(): boolean
 "isBackKey"(keyCode: integer, event: $KeyEvent$Type): boolean
 "hasDefaultBackground"(): boolean
 "shouldBlurBackground"(): boolean
}

export namespace $ScreenCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCallback$Type = ($ScreenCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCallback_ = $ScreenCallback$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuItemImpl" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$ActionProvider, $ActionProvider$Type} from "packages/icyllis/modernui/view/$ActionProvider"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$SubMenu, $SubMenu$Type} from "packages/icyllis/modernui/view/$SubMenu"
import {$MenuItem$OnActionExpandListener, $MenuItem$OnActionExpandListener$Type} from "packages/icyllis/modernui/view/$MenuItem$OnActionExpandListener"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$MenuItem$OnMenuItemClickListener, $MenuItem$OnMenuItemClickListener$Type} from "packages/icyllis/modernui/view/$MenuItem$OnMenuItemClickListener"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ContextMenu$ContextMenuInfo, $ContextMenu$ContextMenuInfo$Type} from "packages/icyllis/modernui/view/$ContextMenu$ContextMenuInfo"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $MenuItemImpl implements $MenuItem {


public "setChecked"(checked: boolean): $MenuItem
public "setIsActionButton"(isActionButton: boolean): void
public "showsTextAsAction"(): boolean
public "invoke"(): boolean
public "toString"(): string
public "isEnabled"(): boolean
public "getItemId"(): integer
public "shouldShowIcon"(): boolean
public "setEnabled"(enabled: boolean): $MenuItem
public "setVisible"(shown: boolean): $MenuItem
public "isVisible"(): boolean
public "setTooltipText"(tooltipText: charseq): $MenuItem
public "getTooltipText"(): charseq
public "setTitle"(title: charseq): $MenuItem
public "getOrder"(): integer
public "isActionButton"(): boolean
public "getIcon"(): $Drawable
public "isChecked"(): boolean
public "getTitle"(): charseq
public "getOrdering"(): integer
public "setOnMenuItemClickListener"(clickListener: $MenuItem$OnMenuItemClickListener$Type): $MenuItem
public "setAlphabeticShortcut"(alphaChar: character, alphaModifiers: integer): $MenuItem
public "setAlphabeticShortcut"(alphaChar: character): $MenuItem
public "setIcon"(icon: $Drawable$Type): $MenuItem
public "setCallback"(callback: $Runnable$Type): $MenuItem
public "setShortcut"(numericChar: character, alphaChar: character, numericModifiers: integer, alphaModifiers: integer): $MenuItem
public "setShortcut"(numericChar: character, alphaChar: character): $MenuItem
public "getGroupId"(): integer
public "actionFormatChanged"(): void
public "setActionViewExpanded"(isExpanded: boolean): void
public "requestsActionButton"(): boolean
public "setExclusiveCheckable"(exclusive: boolean): void
public "isExclusiveCheckable"(): boolean
public "hasCollapsibleActionView"(): boolean
public "isActionViewExpanded"(): boolean
public "setShowAsActionFlags"(actionEnum: integer): $MenuItem
public "setContentDescription"(contentDescription: charseq): $MenuItem
public "getContentDescription"(): charseq
public "requiresActionButton"(): boolean
public "getAlphabeticShortcut"(): character
public "setOnActionExpandListener"(listener: $MenuItem$OnActionExpandListener$Type): $MenuItem
public "getNumericModifiers"(): integer
public "getAlphabeticModifiers"(): integer
public "setShowAsAction"(actionEnum: integer): void
public "isCheckable"(): boolean
public "hasSubMenu"(): boolean
public "setActionView"(view: $View$Type): $MenuItem
public "getNumericShortcut"(): character
public "setIconTintList"(iconTintList: $ColorStateList$Type): $MenuItem
public "getSubMenu"(): $SubMenu
public "getMenuInfo"(): $ContextMenu$ContextMenuInfo
public "getActionView"(): $View
public "setActionProvider"(actionProvider: $ActionProvider$Type): $MenuItem
public "setTitleCondensed"(title: charseq): $MenuItem
public "getTitleCondensed"(): charseq
public "setNumericShortcut"(numericChar: character): $MenuItem
public "setNumericShortcut"(numericChar: character, numericModifiers: integer): $MenuItem
public "getIconTintList"(): $ColorStateList
public "setCheckable"(checkable: boolean): $MenuItem
public "expandActionView"(): boolean
public "requiresOverflow"(): boolean
public "collapseActionView"(): boolean
public "getActionProvider"(): $ActionProvider
set "checked"(value: boolean)
get "enabled"(): boolean
get "itemId"(): integer
set "enabled"(value: boolean)
set "visible"(value: boolean)
get "visible"(): boolean
set "tooltipText"(value: charseq)
get "tooltipText"(): charseq
set "title"(value: charseq)
get "order"(): integer
get "actionButton"(): boolean
get "icon"(): $Drawable
get "checked"(): boolean
get "title"(): charseq
get "ordering"(): integer
set "onMenuItemClickListener"(value: $MenuItem$OnMenuItemClickListener$Type)
set "alphabeticShortcut"(value: character)
set "icon"(value: $Drawable$Type)
set "callback"(value: $Runnable$Type)
get "groupId"(): integer
set "actionViewExpanded"(value: boolean)
set "exclusiveCheckable"(value: boolean)
get "exclusiveCheckable"(): boolean
get "actionViewExpanded"(): boolean
set "showAsActionFlags"(value: integer)
set "contentDescription"(value: charseq)
get "contentDescription"(): charseq
get "alphabeticShortcut"(): character
set "onActionExpandListener"(value: $MenuItem$OnActionExpandListener$Type)
get "numericModifiers"(): integer
get "alphabeticModifiers"(): integer
set "showAsAction"(value: integer)
get "checkable"(): boolean
set "actionView"(value: $View$Type)
get "numericShortcut"(): character
set "iconTintList"(value: $ColorStateList$Type)
get "subMenu"(): $SubMenu
get "menuInfo"(): $ContextMenu$ContextMenuInfo
get "actionView"(): $View
set "actionProvider"(value: $ActionProvider$Type)
set "titleCondensed"(value: charseq)
get "titleCondensed"(): charseq
set "numericShortcut"(value: character)
get "iconTintList"(): $ColorStateList
set "checkable"(value: boolean)
get "actionProvider"(): $ActionProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuItemImpl$Type = ($MenuItemImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuItemImpl_ = $MenuItemImpl$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Canvas$VertexMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Canvas$VertexMode extends $Enum<($Canvas$VertexMode)> {
static readonly "POINTS": $Canvas$VertexMode
static readonly "LINES": $Canvas$VertexMode
static readonly "LINE_STRIP": $Canvas$VertexMode
static readonly "TRIANGLES": $Canvas$VertexMode
static readonly "TRIANGLE_STRIP": $Canvas$VertexMode


public static "values"(): ($Canvas$VertexMode)[]
public static "valueOf"(name: string): $Canvas$VertexMode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Canvas$VertexMode$Type = (("triangles") | ("line_strip") | ("lines") | ("triangle_strip") | ("points")) | ($Canvas$VertexMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Canvas$VertexMode_ = $Canvas$VertexMode$Type;
}}
declare module "packages/icyllis/modernui/markdown/$NodeVisitor" {
import {$Node, $Node$Type} from "packages/com/vladsch/flexmark/util/ast/$Node"
import {$MarkdownVisitor, $MarkdownVisitor$Type} from "packages/icyllis/modernui/markdown/$MarkdownVisitor"

export interface $NodeVisitor<N extends $Node> {

 "visit"(arg0: $MarkdownVisitor$Type, arg1: N): void

(arg0: $MarkdownVisitor$Type, arg1: N): void
}

export namespace $NodeVisitor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NodeVisitor$Type<N> = ($NodeVisitor<(N)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NodeVisitor_<N> = $NodeVisitor$Type<(N)>;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$CircleProgram$Stroke" {
import {$CircleProgram, $CircleProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$CircleProgram"

export class $CircleProgram$Stroke extends $CircleProgram {


public "setRadius"(inner: float, radius: float, feather: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CircleProgram$Stroke$Type = ($CircleProgram$Stroke);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CircleProgram$Stroke_ = $CircleProgram$Stroke$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnCreateContextMenuListener" {
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ContextMenu$ContextMenuInfo, $ContextMenu$ContextMenuInfo$Type} from "packages/icyllis/modernui/view/$ContextMenu$ContextMenuInfo"

export interface $View$OnCreateContextMenuListener {

 "onCreateContextMenu"(arg0: $ContextMenu$Type, arg1: $View$Type, arg2: $ContextMenu$ContextMenuInfo$Type): void

(arg0: $ContextMenu$Type, arg1: $View$Type, arg2: $ContextMenu$ContextMenuInfo$Type): void
}

export namespace $View$OnCreateContextMenuListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnCreateContextMenuListener$Type = ($View$OnCreateContextMenuListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnCreateContextMenuListener_ = $View$OnCreateContextMenuListener$Type;
}}
declare module "packages/icyllis/modernui/fragment/$OnBackPressedDispatcherOwner" {
import {$Lifecycle, $Lifecycle$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle"
import {$OnBackPressedDispatcher, $OnBackPressedDispatcher$Type} from "packages/icyllis/modernui/fragment/$OnBackPressedDispatcher"
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"

export interface $OnBackPressedDispatcherOwner extends $LifecycleOwner {

 "getOnBackPressedDispatcher"(): $OnBackPressedDispatcher
 "getLifecycle"(): $Lifecycle
}

export namespace $OnBackPressedDispatcherOwner {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OnBackPressedDispatcherOwner$Type = ($OnBackPressedDispatcherOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OnBackPressedDispatcherOwner_ = $OnBackPressedDispatcherOwner$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewManager" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"

export interface $ViewManager {

 "updateViewLayout"(arg0: $View$Type, arg1: $ViewGroup$LayoutParams$Type): void
 "removeView"(arg0: $View$Type): void
 "addView"(arg0: $View$Type, arg1: $ViewGroup$LayoutParams$Type): void
}

export namespace $ViewManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewManager$Type = ($ViewManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewManager_ = $ViewManager$Type;
}}
declare module "packages/icyllis/modernui/widget/$AdapterView$OnItemSelectedListener" {
import {$AdapterView, $AdapterView$Type} from "packages/icyllis/modernui/widget/$AdapterView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $AdapterView$OnItemSelectedListener {

 "onNothingSelected"(arg0: $AdapterView$Type<(any)>): void
 "onItemSelected"(arg0: $AdapterView$Type<(any)>, arg1: $View$Type, arg2: integer, arg3: long): void
}

export namespace $AdapterView$OnItemSelectedListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdapterView$OnItemSelectedListener$Type = ($AdapterView$OnItemSelectedListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdapterView$OnItemSelectedListener_ = $AdapterView$OnItemSelectedListener$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$Animatable2" {
import {$Animatable2$AnimationCallback, $Animatable2$AnimationCallback$Type} from "packages/icyllis/modernui/graphics/drawable/$Animatable2$AnimationCallback"
import {$Animatable, $Animatable$Type} from "packages/icyllis/modernui/graphics/drawable/$Animatable"

export interface $Animatable2 extends $Animatable {

 "unregisterAnimationCallback"(arg0: $Animatable2$AnimationCallback$Type): boolean
 "registerAnimationCallback"(arg0: $Animatable2$AnimationCallback$Type): void
 "clearAnimationCallbacks"(): void
 "start"(): void
 "stop"(): void
 "isRunning"(): boolean
}

export namespace $Animatable2 {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Animatable2$Type = ($Animatable2);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Animatable2_ = $Animatable2$Type;
}}
declare module "packages/icyllis/modernui/widget/$AbsListView$RecyclerListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $AbsListView$RecyclerListener {

 "onMovedToScrapHeap"(arg0: $View$Type): void

(arg0: $View$Type): void
}

export namespace $AbsListView$RecyclerListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsListView$RecyclerListener$Type = ($AbsListView$RecyclerListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsListView$RecyclerListener_ = $AbsListView$RecyclerListener$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$SubMenuArrowDrawable" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$MaterialDrawable, $MaterialDrawable$Type} from "packages/icyllis/modernui/material/$MaterialDrawable"

export class $SubMenuArrowDrawable extends $MaterialDrawable {
static readonly "MAX_LEVEL": integer

constructor(context: $Context$Type)

public "draw"(canvas: $Canvas$Type): void
public "isAutoMirrored"(): boolean
public "getIntrinsicHeight"(): integer
public "getIntrinsicWidth"(): integer
get "autoMirrored"(): boolean
get "intrinsicHeight"(): integer
get "intrinsicWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SubMenuArrowDrawable$Type = ($SubMenuArrowDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SubMenuArrowDrawable_ = $SubMenuArrowDrawable$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$MuiRegistries" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TestContainerMenu, $TestContainerMenu$Type} from "packages/icyllis/modernui/mc/testforge/$TestContainerMenu"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $MuiRegistries {
static readonly "BUTTON_CLICK_1": $SoundEvent
static readonly "BUTTON_CLICK_2": $SoundEvent
static readonly "TEST_MENU_KEY": $ResourceLocation
static readonly "TEST_MENU": $RegistryObject<($MenuType<($TestContainerMenu)>)>
static readonly "PROJECT_BUILDER_ITEM_KEY": $ResourceLocation
static readonly "PROJECT_BUILDER_ITEM": $RegistryObject<($Item)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiRegistries$Type = ($MuiRegistries);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiRegistries_ = $MuiRegistries$Type;
}}
declare module "packages/icyllis/modernui/core/$OperationCanceledException" {
import {$RuntimeException, $RuntimeException$Type} from "packages/java/lang/$RuntimeException"

export class $OperationCanceledException extends $RuntimeException {

constructor()
constructor(message: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OperationCanceledException$Type = ($OperationCanceledException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OperationCanceledException_ = $OperationCanceledException$Type;
}}
declare module "packages/icyllis/modernui/text/$TabStops" {
import {$List, $List$Type} from "packages/java/util/$List"

export class $TabStops {

constructor(stops: (float)[], tabWidth: float)
constructor(tabWidth: float, spans: $List$Type<(any)>)

public "reset"(tabWidth: float, spans: $List$Type<(any)>): void
public "nextTab"(width: float): float
public static "nextDefaultStop"(width: float, tabWidth: float): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TabStops$Type = ($TabStops);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TabStops_ = $TabStops$Type;
}}
declare module "packages/icyllis/modernui/text/style/$TypefaceSpan" {
import {$Typeface, $Typeface$Type} from "packages/icyllis/modernui/text/$Typeface"
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $TypefaceSpan extends $MetricAffectingSpan implements $ParcelableSpan {

constructor(src: $Parcel$Type)
constructor(typeface: $Typeface$Type)
constructor(family: string)

public "getFamily"(): string
public "updateMeasureState"(paint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
public "getTypeface"(): $Typeface
get "family"(): string
get "spanTypeId"(): integer
get "typeface"(): $Typeface
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TypefaceSpan$Type = ($TypefaceSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TypefaceSpan_ = $TypefaceSpan$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewTreeObserver" {
import {$ViewTreeObserver$OnScrollChangedListener, $ViewTreeObserver$OnScrollChangedListener$Type} from "packages/icyllis/modernui/view/$ViewTreeObserver$OnScrollChangedListener"
import {$ViewTreeObserver$OnGlobalLayoutListener, $ViewTreeObserver$OnGlobalLayoutListener$Type} from "packages/icyllis/modernui/view/$ViewTreeObserver$OnGlobalLayoutListener"
import {$ViewTreeObserver$OnPreDrawListener, $ViewTreeObserver$OnPreDrawListener$Type} from "packages/icyllis/modernui/view/$ViewTreeObserver$OnPreDrawListener"
import {$ViewTreeObserver$OnGlobalFocusChangeListener, $ViewTreeObserver$OnGlobalFocusChangeListener$Type} from "packages/icyllis/modernui/view/$ViewTreeObserver$OnGlobalFocusChangeListener"

export class $ViewTreeObserver {


public "isAlive"(): boolean
public "dispatchOnGlobalLayout"(): void
public "dispatchOnScrollChanged"(): void
public "addOnScrollChangedListener"(listener: $ViewTreeObserver$OnScrollChangedListener$Type): void
public "dispatchOnPreDraw"(): boolean
public "addOnPreDrawListener"(listener: $ViewTreeObserver$OnPreDrawListener$Type): void
public "addOnGlobalLayoutListener"(listener: $ViewTreeObserver$OnGlobalLayoutListener$Type): void
public "removeOnScrollChangedListener"(victim: $ViewTreeObserver$OnScrollChangedListener$Type): void
public "removeOnGlobalLayoutListener"(victim: $ViewTreeObserver$OnGlobalLayoutListener$Type): void
public "removeOnGlobalFocusChangeListener"(victim: $ViewTreeObserver$OnGlobalFocusChangeListener$Type): void
public "addOnGlobalFocusChangeListener"(listener: $ViewTreeObserver$OnGlobalFocusChangeListener$Type): void
public "removeOnPreDrawListener"(victim: $ViewTreeObserver$OnPreDrawListener$Type): void
get "alive"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewTreeObserver$Type = ($ViewTreeObserver);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewTreeObserver_ = $ViewTreeObserver$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Config$Common" {
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"

export class $Config$Common {
readonly "developerMode": $ForgeConfigSpec$BooleanValue
readonly "oneTimeEvents": $ForgeConfigSpec$IntValue
readonly "autoShutdown": $ForgeConfigSpec$BooleanValue
readonly "shutdownTimes": $ForgeConfigSpec$ConfigValue<($List<(any)>)>


public "saveAndReloadAsync"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Common$Type = ($Config$Common);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config$Common_ = $Config$Common$Type;
}}
declare module "packages/icyllis/modernui/text/method/$Touch" {
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export class $Touch {


public static "onTouchEvent"(widget: $TextView$Type, buffer: $Spannable$Type, event: $MotionEvent$Type): boolean
public static "scrollTo"(widget: $TextView$Type, layout: $Layout$Type, x: integer, y: integer): void
public static "getInitialScrollY"(buffer: $Spannable$Type): integer
public static "getInitialScrollX"(buffer: $Spannable$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Touch$Type = ($Touch);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Touch_ = $Touch$Type;
}}
declare module "packages/icyllis/modernui/material/$MaterialCheckBox" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$CheckBox, $CheckBox$Type} from "packages/icyllis/modernui/widget/$CheckBox"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $MaterialCheckBox extends $CheckBox {
static readonly "CHECKED_STATE_SET": (integer)[]
static readonly "UNKNOWN_BORING": $BoringLayout$Metrics
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MaterialCheckBox$Type = ($MaterialCheckBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MaterialCheckBox_ = $MaterialCheckBox$Type;
}}
declare module "packages/icyllis/modernui/annotation/$MainThread" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $MainThread extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $MainThread {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MainThread$Type = ($MainThread);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MainThread_ = $MainThread$Type;
}}
declare module "packages/icyllis/modernui/widget/$AdapterView" {
import {$AdapterView$OnItemClickListener, $AdapterView$OnItemClickListener$Type} from "packages/icyllis/modernui/widget/$AdapterView$OnItemClickListener"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$Adapter, $Adapter$Type} from "packages/icyllis/modernui/widget/$Adapter"
import {$AdapterView$OnItemLongClickListener, $AdapterView$OnItemLongClickListener$Type} from "packages/icyllis/modernui/widget/$AdapterView$OnItemLongClickListener"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$View$OnClickListener, $View$OnClickListener$Type} from "packages/icyllis/modernui/view/$View$OnClickListener"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$AdapterView$OnItemSelectedListener, $AdapterView$OnItemSelectedListener$Type} from "packages/icyllis/modernui/widget/$AdapterView$OnItemSelectedListener"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $AdapterView<T extends $Adapter> extends $ViewGroup {
static readonly "ITEM_VIEW_TYPE_IGNORE": integer
static readonly "ITEM_VIEW_TYPE_HEADER_OR_FOOTER": integer
static readonly "INVALID_POSITION": integer
static readonly "INVALID_ROW_ID": long
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setEmptyView"(emptyView: $View$Type): void
public "getSelectedItemId"(): long
public "performItemClick"(view: $View$Type, position: integer, id: long): boolean
public "setAdapter"(arg0: T): void
public "getEmptyView"(): $View
public "getSelectedItem"(): any
public "getSelectedView"(): $View
public "getCount"(): integer
public "getAdapter"(): T
public "setFocusableInTouchMode"(focusable: boolean): void
public "setOnClickListener"(l: $View$OnClickListener$Type): void
public "removeView"(child: $View$Type): void
public "removeViewAt"(index: integer): void
public "removeAllViews"(): void
public "setSelection"(arg0: integer): void
public "getItemIdAtPosition"(position: integer): long
public "addView"(child: $View$Type, index: integer): void
public "addView"(child: $View$Type): void
public "addView"(child: $View$Type, index: integer, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type, params: $ViewGroup$LayoutParams$Type): void
public "setFocusable"(focusable: integer): void
public "getItemAtPosition"(position: integer): any
public "getPositionForView"(view: $View$Type): integer
public "setOnItemSelectedListener"(listener: $AdapterView$OnItemSelectedListener$Type): void
public "getFirstVisiblePosition"(): integer
public "getOnItemLongClickListener"(): $AdapterView$OnItemLongClickListener
public "getSelectedItemPosition"(): integer
public "getLastVisiblePosition"(): integer
public "setOnItemClickListener"(listener: $AdapterView$OnItemClickListener$Type): void
public "setOnItemLongClickListener"(listener: $AdapterView$OnItemLongClickListener$Type): void
public "getOnItemClickListener"(): $AdapterView$OnItemClickListener
public "getOnItemSelectedListener"(): $AdapterView$OnItemSelectedListener
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
set "emptyView"(value: $View$Type)
get "selectedItemId"(): long
set "adapter"(value: T)
get "emptyView"(): $View
get "selectedItem"(): any
get "selectedView"(): $View
get "count"(): integer
get "adapter"(): T
set "focusableInTouchMode"(value: boolean)
set "onClickListener"(value: $View$OnClickListener$Type)
set "selection"(value: integer)
set "focusable"(value: integer)
set "onItemSelectedListener"(value: $AdapterView$OnItemSelectedListener$Type)
get "firstVisiblePosition"(): integer
get "onItemLongClickListener"(): $AdapterView$OnItemLongClickListener
get "selectedItemPosition"(): integer
get "lastVisiblePosition"(): integer
set "onItemClickListener"(value: $AdapterView$OnItemClickListener$Type)
set "onItemLongClickListener"(value: $AdapterView$OnItemLongClickListener$Type)
get "onItemClickListener"(): $AdapterView$OnItemClickListener
get "onItemSelectedListener"(): $AdapterView$OnItemSelectedListener
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdapterView$Type<T> = ($AdapterView<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdapterView_<T> = $AdapterView$Type<(T)>;
}}
declare module "packages/icyllis/modernui/resources/$Resources" {
import {$DisplayMetrics, $DisplayMetrics$Type} from "packages/icyllis/modernui/util/$DisplayMetrics"

export class $Resources {

constructor()

public "updateMetrics"(metrics: $DisplayMetrics$Type): void
public "getDisplayMetrics"(): $DisplayMetrics
get "displayMetrics"(): $DisplayMetrics
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Resources$Type = ($Resources);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Resources_ = $Resources$Type;
}}
declare module "packages/icyllis/modernui/view/$MenuItem$OnMenuItemClickListener" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"

export interface $MenuItem$OnMenuItemClickListener {

 "onMenuItemClick"(arg0: $MenuItem$Type): boolean

(arg0: $MenuItem$Type): boolean
}

export namespace $MenuItem$OnMenuItemClickListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuItem$OnMenuItemClickListener$Type = ($MenuItem$OnMenuItemClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuItem$OnMenuItemClickListener_ = $MenuItem$OnMenuItemClickListener$Type;
}}
declare module "packages/icyllis/modernui/resources/$Resource$ResourceName" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Resource$ResourceName {
 "namespace": string
 "typename": string
 "type": integer
 "entry": string

constructor()
constructor(namespace: string, type: integer, entry: string)

public "toString"(): string
public "setType"(type: integer): void
set "type"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Resource$ResourceName$Type = ($Resource$ResourceName);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Resource$ResourceName_ = $Resource$ResourceName$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram" {
import {$RoundRectProgram$Stroke, $RoundRectProgram$Stroke$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram$Stroke"
import {$RoundRectProgram$Fill, $RoundRectProgram$Fill$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram$Fill"
import {$GLProgram, $GLProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/$GLProgram"
import {$RoundRectProgram$FillTex, $RoundRectProgram$FillTex$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram$FillTex"

/**
 * 
 * @deprecated
 */
export class $RoundRectProgram extends $GLProgram {


public static "fill"(): $RoundRectProgram$Fill
public static "stroke"(): $RoundRectProgram$Stroke
public static "fillTex"(): $RoundRectProgram$FillTex
public static "createPrograms"(): void
public "setInnerRect"(left: float, top: float, right: float, bottom: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RoundRectProgram$Type = ($RoundRectProgram);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RoundRectProgram_ = $RoundRectProgram$Type;
}}
declare module "packages/icyllis/modernui/resources/$SystemTheme" {
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"

export class $SystemTheme {
static readonly "COLOR_FOREGROUND": integer
static readonly "COLOR_FOREGROUND_NORMAL": integer
static readonly "COLOR_FOREGROUND_DISABLED": integer
static readonly "DISABLED_ALPHA": float
static readonly "PRIMARY_CONTENT_ALPHA": float
static readonly "SECONDARY_CONTENT_ALPHA": float
static readonly "COLOR_CONTROL_ACTIVATED": integer
static readonly "TEXT_COLOR_SECONDARY": $ColorStateList
static readonly "COLOR_CONTROL_NORMAL": $ColorStateList

constructor()

public static "modulateColor"(baseColor: integer, alphaMod: float): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SystemTheme$Type = ($SystemTheme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SystemTheme_ = $SystemTheme$Type;
}}
declare module "packages/icyllis/modernui/mc/$OptiFineIntegration" {
import {$OptionInstance, $OptionInstance$Type} from "packages/net/minecraft/client/$OptionInstance"

export class $OptiFineIntegration {


public static "isShaderPackLoaded"(): boolean
public static "setGuiScale"(option: $OptionInstance$Type<(integer)>): void
public static "setFastRender"(fastRender: boolean): void
public static "openShadersGui"(): void
get "shaderPackLoaded"(): boolean
set "guiScale"(value: $OptionInstance$Type<(integer)>)
set "fastRender"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptiFineIntegration$Type = ($OptiFineIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptiFineIntegration_ = $OptiFineIntegration$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Image" {
import {$Bitmap, $Bitmap$Type} from "packages/icyllis/modernui/graphics/$Bitmap"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$ImageInfo, $ImageInfo$Type} from "packages/icyllis/arc3d/core/$ImageInfo"
import {$RecordingContext, $RecordingContext$Type} from "packages/icyllis/arc3d/engine/$RecordingContext"
import {$SurfaceView, $SurfaceView$Type} from "packages/icyllis/arc3d/engine/$SurfaceView"

export class $Image implements $AutoCloseable {


public "close"(): void
public static "create"(namespace: string, entry: string): $Image
public "getInfo"(): $ImageInfo
public static "createTextureFromBitmap"(bitmap: $Bitmap$Type): $Image
public static "createTextureFromBitmap"(rContext: $RecordingContext$Type, bitmap: $Bitmap$Type): $Image
public "isClosed"(): boolean
public "getWidth"(): integer
public "getHeight"(): integer
public "asTextureView"(): $SurfaceView
get "info"(): $ImageInfo
get "closed"(): boolean
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Image$Type = ($Image);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Image_ = $Image$Type;
}}
declare module "packages/icyllis/modernui/animation/$LayoutTransition$TransitionListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutTransition, $LayoutTransition$Type} from "packages/icyllis/modernui/animation/$LayoutTransition"

export interface $LayoutTransition$TransitionListener {

 "startTransition"(arg0: $LayoutTransition$Type, arg1: $ViewGroup$Type, arg2: $View$Type, arg3: integer): void
 "endTransition"(arg0: $LayoutTransition$Type, arg1: $ViewGroup$Type, arg2: $View$Type, arg3: integer): void
}

export namespace $LayoutTransition$TransitionListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutTransition$TransitionListener$Type = ($LayoutTransition$TransitionListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutTransition$TransitionListener_ = $LayoutTransition$TransitionListener$Type;
}}
declare module "packages/icyllis/modernui/text/$DynamicLayout" {
import {$DynamicLayout$Builder, $DynamicLayout$Builder$Type} from "packages/icyllis/modernui/text/$DynamicLayout$Builder"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Directions, $Directions$Type} from "packages/icyllis/modernui/text/$Directions"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$IntArrayList, $IntArrayList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntArrayList"

export class $DynamicLayout extends $Layout {
static readonly "INVALID_BLOCK_INDEX": integer
static readonly "DIR_LEFT_TO_RIGHT": integer
static readonly "DIR_RIGHT_TO_LEFT": integer
static readonly "TAB_INCREMENT": float


public static "builder"(base: charseq, paint: $TextPaint$Type, width: integer): $DynamicLayout$Builder
public "updateBlocks"(startLine: integer, endLine: integer, newLineCount: integer): void
public "reflow"(s: charseq, where: integer, before: integer, after: integer): void
public "getBlockIndices"(): (integer)[]
public "setBlockIndex"(index: integer, blockIndex: integer): void
public "getNumberOfBlocks"(): integer
public "getBlockEndLines"(): (integer)[]
public "getBlockIndex"(index: integer): integer
public "getLineDescent"(line: integer): integer
public "getLineTop"(line: integer): integer
public "getLineStart"(line: integer): integer
public "getLineCount"(): integer
public "getLineDirections"(line: integer): $Directions
public "getEllipsisCount"(line: integer): integer
public "getLineContainsTab"(line: integer): boolean
public "getEllipsisStart"(line: integer): integer
public "getEllipsizedWidth"(): integer
public "getTopPadding"(): integer
public "getBottomPadding"(): integer
public "setBlocksDataForTest"(blockEndLines: (integer)[], blockIndices: (integer)[], numberOfBlocks: integer, totalLines: integer): void
public "setIndexFirstChangedBlock"(i: integer): void
public "getBlocksAlwaysNeedToBeRedrawn"(): $IntArrayList
public "getIndexFirstChangedBlock"(): integer
public "getParagraphDirection"(line: integer): integer
get "blockIndices"(): (integer)[]
get "numberOfBlocks"(): integer
get "blockEndLines"(): (integer)[]
get "lineCount"(): integer
get "ellipsizedWidth"(): integer
get "topPadding"(): integer
get "bottomPadding"(): integer
set "indexFirstChangedBlock"(value: integer)
get "blocksAlwaysNeedToBeRedrawn"(): $IntArrayList
get "indexFirstChangedBlock"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicLayout$Type = ($DynamicLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicLayout_ = $DynamicLayout$Type;
}}
declare module "packages/icyllis/modernui/util/$L1Padding" {
import {$HeadPadding, $HeadPadding$Type} from "packages/icyllis/modernui/util/$HeadPadding"

export class $L1Padding<E> extends $HeadPadding<(E)> {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L1Padding$Type<E> = ($L1Padding<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L1Padding_<E> = $L1Padding$Type<(E)>;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$LanguageData" {
import {$Map, $Map$Type} from "packages/java/util/$Map"

/**
 * 
 * @deprecated
 */
export class $LanguageData {

constructor()
constructor(data: $Map$Type<(string), (string)>, defaultRTL: boolean)

public "get"(key: string): string
public static "getInstance"(): $LanguageData
public "getOrDefault"(key: string): string
public "isDefaultRTL"(): boolean
public static "setInstance"(instance: $LanguageData$Type): void
get "instance"(): $LanguageData
get "defaultRTL"(): boolean
set "instance"(value: $LanguageData$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LanguageData$Type = ($LanguageData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LanguageData_ = $LanguageData$Type;
}}
declare module "packages/icyllis/modernui/annotation/$Px" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $Px extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $Px {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Px$Type = ($Px);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Px_ = $Px$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentTransition" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FragmentTransition {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentTransition$Type = ($FragmentTransition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentTransition_ = $FragmentTransition$Type;
}}
declare module "packages/icyllis/modernui/widget/$NestedScrollView$OnScrollChangeListener" {
import {$NestedScrollView, $NestedScrollView$Type} from "packages/icyllis/modernui/widget/$NestedScrollView"

export interface $NestedScrollView$OnScrollChangeListener {

 "onScrollChange"(arg0: $NestedScrollView$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void

(arg0: $NestedScrollView$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
}

export namespace $NestedScrollView$OnScrollChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NestedScrollView$OnScrollChangeListener$Type = ($NestedScrollView$OnScrollChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NestedScrollView$OnScrollChangeListener_ = $NestedScrollView$OnScrollChangeListener$Type;
}}
declare module "packages/icyllis/modernui/widget/$Checkable$OnCheckedChangeListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $Checkable$OnCheckedChangeListener {

 "onCheckedChanged"(arg0: $View$Type, arg1: boolean): void

(arg0: $View$Type, arg1: boolean): void
}

export namespace $Checkable$OnCheckedChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Checkable$OnCheckedChangeListener$Type = ($Checkable$OnCheckedChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Checkable$OnCheckedChangeListener_ = $Checkable$OnCheckedChangeListener$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram$FillTex" {
import {$RoundRectProgram$Fill, $RoundRectProgram$Fill$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram$Fill"

export class $RoundRectProgram$FillTex extends $RoundRectProgram$Fill {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RoundRectProgram$FillTex$Type = ($RoundRectProgram$FillTex);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RoundRectProgram$FillTex_ = $RoundRectProgram$FillTex$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnLongClickListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $View$OnLongClickListener {

 "onLongClick"(arg0: $View$Type): boolean

(arg0: $View$Type): boolean
}

export namespace $View$OnLongClickListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnLongClickListener$Type = ($View$OnLongClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnLongClickListener_ = $View$OnLongClickListener$Type;
}}
declare module "packages/icyllis/modernui/widget/$SpinnerAdapter" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$Adapter, $Adapter$Type} from "packages/icyllis/modernui/widget/$Adapter"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export interface $SpinnerAdapter extends $Adapter {

 "getDropDownView"(arg0: integer, arg1: $View$Type, arg2: $ViewGroup$Type): $View
 "isEmpty"(): boolean
 "getCount"(): integer
 "getItem"(arg0: integer): any
 "getItemId"(arg0: integer): long
 "getView"(arg0: integer, arg1: $View$Type, arg2: $ViewGroup$Type): $View
 "registerDataSetObserver"(arg0: $DataSetObserver$Type): void
 "unregisterDataSetObserver"(arg0: $DataSetObserver$Type): void
 "hasStableIds"(): boolean
 "getItemViewType"(arg0: integer): integer
 "getViewTypeCount"(): integer
}

export namespace $SpinnerAdapter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpinnerAdapter$Type = ($SpinnerAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpinnerAdapter_ = $SpinnerAdapter$Type;
}}
declare module "packages/icyllis/modernui/widget/$ExpandableListView" {
import {$ExpandableListView$OnGroupCollapseListener, $ExpandableListView$OnGroupCollapseListener$Type} from "packages/icyllis/modernui/widget/$ExpandableListView$OnGroupCollapseListener"
import {$AdapterView$OnItemClickListener, $AdapterView$OnItemClickListener$Type} from "packages/icyllis/modernui/widget/$AdapterView$OnItemClickListener"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$ListAdapter, $ListAdapter$Type} from "packages/icyllis/modernui/widget/$ListAdapter"
import {$ExpandableListView$OnGroupExpandListener, $ExpandableListView$OnGroupExpandListener$Type} from "packages/icyllis/modernui/widget/$ExpandableListView$OnGroupExpandListener"
import {$ExpandableListView$OnChildClickListener, $ExpandableListView$OnChildClickListener$Type} from "packages/icyllis/modernui/widget/$ExpandableListView$OnChildClickListener"
import {$ExpandableListAdapter, $ExpandableListAdapter$Type} from "packages/icyllis/modernui/widget/$ExpandableListAdapter"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ListView, $ListView$Type} from "packages/icyllis/modernui/widget/$ListView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$ExpandableListView$OnGroupClickListener, $ExpandableListView$OnGroupClickListener$Type} from "packages/icyllis/modernui/widget/$ExpandableListView$OnGroupClickListener"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $ExpandableListView extends $ListView {
static readonly "PACKED_POSITION_TYPE_GROUP": integer
static readonly "PACKED_POSITION_TYPE_CHILD": integer
static readonly "PACKED_POSITION_TYPE_NULL": integer
static readonly "PACKED_POSITION_VALUE_NULL": long
static readonly "CHILD_INDICATOR_INHERIT": integer
static readonly "TRANSCRIPT_MODE_DISABLED": integer
static readonly "TRANSCRIPT_MODE_NORMAL": integer
static readonly "TRANSCRIPT_MODE_ALWAYS_SCROLL": integer
static readonly "CHOICE_MODE_NONE": integer
static readonly "CHOICE_MODE_SINGLE": integer
static readonly "CHOICE_MODE_MULTIPLE": integer
static readonly "CHOICE_MODE_MULTIPLE_MODAL": integer
static readonly "ITEM_VIEW_TYPE_IGNORE": integer
static readonly "ITEM_VIEW_TYPE_HEADER_OR_FOOTER": integer
static readonly "INVALID_POSITION": integer
static readonly "INVALID_ROW_ID": long
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "performItemClick"(v: $View$Type, position: integer, id: long): boolean
public "setAdapter"(adapter: $ExpandableListAdapter$Type): void
public "setAdapter"(adapter: $ListAdapter$Type): void
public "getAdapter"(): $ListAdapter
public "onRtlPropertiesChanged"(layoutDirection: integer): void
public "getSelectedPosition"(): long
public "setOnGroupExpandListener"(onGroupExpandListener: $ExpandableListView$OnGroupExpandListener$Type): void
public "setChildIndicatorBounds"(left: integer, right: integer): void
public "setIndicatorBoundsRelative"(start: integer, end: integer): void
public "getExpandableListAdapter"(): $ExpandableListAdapter
public static "getPackedPositionType"(packedPosition: long): integer
public "getFlatListPosition"(packedPosition: long): integer
public "setChildIndicatorBoundsRelative"(start: integer, end: integer): void
public static "getPackedPositionForGroup"(groupPosition: integer): long
public "setOnGroupClickListener"(onGroupClickListener: $ExpandableListView$OnGroupClickListener$Type): void
public "setOnChildClickListener"(onChildClickListener: $ExpandableListView$OnChildClickListener$Type): void
public "getExpandableListPosition"(flatListPosition: integer): long
public static "getPackedPositionChild"(packedPosition: long): integer
public static "getPackedPositionGroup"(packedPosition: long): integer
public "setOnGroupCollapseListener"(onGroupCollapseListener: $ExpandableListView$OnGroupCollapseListener$Type): void
public static "getPackedPositionForChild"(groupPosition: integer, childPosition: integer): long
public "collapseGroup"(groupPos: integer): boolean
public "expandGroup"(groupPos: integer, animate: boolean): boolean
public "expandGroup"(groupPos: integer): boolean
public "isGroupExpanded"(groupPosition: integer): boolean
public "setChildDivider"(childDivider: $Drawable$Type): void
public "setGroupIndicator"(groupIndicator: $Drawable$Type): void
public "getSelectedId"(): long
public "setIndicatorBounds"(left: integer, right: integer): void
public "setSelectedGroup"(groupPosition: integer): void
public "setSelectedChild"(groupPosition: integer, childPosition: integer, shouldExpandGroup: boolean): boolean
public "setChildIndicator"(childIndicator: $Drawable$Type): void
public "setOnItemClickListener"(l: $AdapterView$OnItemClickListener$Type): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "adapter"(value: $ExpandableListAdapter$Type)
set "adapter"(value: $ListAdapter$Type)
get "adapter"(): $ListAdapter
get "selectedPosition"(): long
set "onGroupExpandListener"(value: $ExpandableListView$OnGroupExpandListener$Type)
get "expandableListAdapter"(): $ExpandableListAdapter
set "onGroupClickListener"(value: $ExpandableListView$OnGroupClickListener$Type)
set "onChildClickListener"(value: $ExpandableListView$OnChildClickListener$Type)
set "onGroupCollapseListener"(value: $ExpandableListView$OnGroupCollapseListener$Type)
set "childDivider"(value: $Drawable$Type)
set "groupIndicator"(value: $Drawable$Type)
get "selectedId"(): long
set "selectedGroup"(value: integer)
set "childIndicator"(value: $Drawable$Type)
set "onItemClickListener"(value: $AdapterView$OnItemClickListener$Type)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandableListView$Type = ($ExpandableListView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandableListView_ = $ExpandableListView$Type;
}}
declare module "packages/icyllis/modernui/text/style/$SubscriptSpan" {
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $SubscriptSpan extends $MetricAffectingSpan implements $ParcelableSpan {

constructor()
constructor(src: $Parcel$Type)

public "toString"(): string
public "updateMeasureState"(textPaint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
get "spanTypeId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SubscriptSpan$Type = ($SubscriptSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SubscriptSpan_ = $SubscriptSpan$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentStore" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FragmentStore {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentStore$Type = ($FragmentStore);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentStore_ = $FragmentStore$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewTreeObserver$OnScrollChangedListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ViewTreeObserver$OnScrollChangedListener {

 "onScrollChanged"(): void

(): void
}

export namespace $ViewTreeObserver$OnScrollChangedListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewTreeObserver$OnScrollChangedListener$Type = ($ViewTreeObserver$OnScrollChangedListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewTreeObserver$OnScrollChangedListener_ = $ViewTreeObserver$OnScrollChangedListener$Type;
}}
declare module "packages/icyllis/modernui/graphics/$RenderProperties" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Paint, $Paint$Type} from "packages/icyllis/modernui/graphics/$Paint"
import {$Matrix, $Matrix$Type} from "packages/icyllis/modernui/graphics/$Matrix"

export class $RenderProperties {

constructor()

public "isPivotExplicitlySet"(): boolean
public "getHasOverlappingRendering"(): boolean
public "getY"(): float
public "getClipToBounds"(): boolean
public "getLayerBlendMode"(): $BlendMode
public "setClipToBounds"(clipToBounds: boolean): boolean
public "setCameraDistance"(distance: float): boolean
public "setClipBounds"(clipBounds: $Rect$Type): boolean
public "getCameraDistance"(): float
public "getLayerAlpha"(): integer
public "getRight"(): integer
public "getLeft"(): integer
public "getTop"(): integer
public "setBottom"(bottom: integer): boolean
public "setTop"(top: integer): boolean
public "getBottom"(): integer
public "setLeft"(left: integer): boolean
public "setRight"(right: integer): boolean
public "setX"(x: float): boolean
public "getZ"(): float
public "setTranslationZ"(translationZ: float): boolean
public "getRotationZ"(): float
public "setElevation"(lift: float): boolean
public "getRotationX"(): float
public "setY"(y: float): boolean
public "setZ"(z: float): boolean
public "setRotationX"(rotationX: float): boolean
public "setTranslationX"(translationX: float): boolean
public "getTranslationZ"(): float
public "getTranslationX"(): float
public "getTranslationY"(): float
public "getElevation"(): float
public "getX"(): float
public "getInverseMatrix"(): $Matrix
public "getRotationY"(): float
public "setRotationY"(rotationY: float): boolean
public "setRotationZ"(rotationZ: float): boolean
public "setTranslationY"(translationY: float): boolean
public "getPivotX"(): float
public "getPivotY"(): float
public "setPivotY"(pivotY: float): boolean
public "setScaleX"(scaleX: float): boolean
public "setAnimationMatrix"(matrix: $Matrix$Type): boolean
public "getScaleX"(): float
public "setScaleY"(scaleY: float): boolean
public "setPivotX"(pivotX: float): boolean
public "getScaleY"(): float
public "resetPivot"(): boolean
public "offsetTopAndBottom"(offset: integer): boolean
public "offsetLeftAndRight"(offset: integer): boolean
public "getWidth"(): integer
public "getHeight"(): integer
public "resetCameraDistance"(): boolean
public "setUseCompositingLayer"(forceToLayer: boolean, paint: $Paint$Type): boolean
public "isCameraDistanceExplicitlySet"(): boolean
public "setHasOverlappingRendering"(hasOverlappingRendering: boolean): boolean
public "getUseTransientLayer"(): boolean
public "getUseCompositingLayer"(): boolean
public "getAlpha"(): float
public "getAnimationMatrix"(): $Matrix
public "getMatrix"(): $Matrix
public "setAlpha"(alpha: float): boolean
public "setPosition"(position: $Rect$Type): boolean
public "setPosition"(left: integer, top: integer, right: integer, bottom: integer): boolean
get "pivotExplicitlySet"(): boolean
get "hasOverlappingRendering"(): boolean
get "y"(): float
get "clipToBounds"(): boolean
get "layerBlendMode"(): $BlendMode
set "clipToBounds"(value: boolean)
set "cameraDistance"(value: float)
set "clipBounds"(value: $Rect$Type)
get "cameraDistance"(): float
get "layerAlpha"(): integer
get "right"(): integer
get "left"(): integer
get "top"(): integer
set "bottom"(value: integer)
set "top"(value: integer)
get "bottom"(): integer
set "left"(value: integer)
set "right"(value: integer)
set "x"(value: float)
get "z"(): float
set "translationZ"(value: float)
get "rotationZ"(): float
set "elevation"(value: float)
get "rotationX"(): float
set "y"(value: float)
set "z"(value: float)
set "rotationX"(value: float)
set "translationX"(value: float)
get "translationZ"(): float
get "translationX"(): float
get "translationY"(): float
get "elevation"(): float
get "x"(): float
get "inverseMatrix"(): $Matrix
get "rotationY"(): float
set "rotationY"(value: float)
set "rotationZ"(value: float)
set "translationY"(value: float)
get "pivotX"(): float
get "pivotY"(): float
set "pivotY"(value: float)
set "scaleX"(value: float)
set "animationMatrix"(value: $Matrix$Type)
get "scaleX"(): float
set "scaleY"(value: float)
set "pivotX"(value: float)
get "scaleY"(): float
get "width"(): integer
get "height"(): integer
get "cameraDistanceExplicitlySet"(): boolean
set "hasOverlappingRendering"(value: boolean)
get "useTransientLayer"(): boolean
get "useCompositingLayer"(): boolean
get "alpha"(): float
get "animationMatrix"(): $Matrix
get "matrix"(): $Matrix
set "alpha"(value: float)
set "position"(value: $Rect$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderProperties$Type = ($RenderProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderProperties_ = $RenderProperties$Type;
}}
declare module "packages/icyllis/modernui/widget/$ViewDragHelper" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ViewDragHelper {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewDragHelper$Type = ($ViewDragHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewDragHelper_ = $ViewDragHelper$Type;
}}
declare module "packages/icyllis/modernui/util/$AlgorithmUtils" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"

export class $AlgorithmUtils {


public static "floor"<T>(a: (T)[], first: integer, last: integer, value: T, c: $Comparator$Type<(any)>): integer
public static "floor"<T>(a: (T)[], value: T, c: $Comparator$Type<(any)>): integer
public static "floor"(a: (integer)[], first: integer, last: integer, value: integer): integer
public static "floor"(a: (long)[], first: integer, last: integer, value: long): integer
public static "floor"(a: (long)[], value: long): integer
public static "floor"(a: (integer)[], value: integer): integer
public static "ceil"(a: (integer)[], value: integer): integer
public static "ceil"<T>(a: (T)[], first: integer, last: integer, value: T, c: $Comparator$Type<(any)>): integer
public static "ceil"<T>(a: (T)[], value: T, c: $Comparator$Type<(any)>): integer
public static "ceil"(a: (long)[], first: integer, last: integer, value: long): integer
public static "ceil"(a: (long)[], value: long): integer
public static "ceil"(a: (integer)[], first: integer, last: integer, value: integer): integer
public static "lower"(a: (integer)[], value: integer): integer
public static "lower"(a: (integer)[], first: integer, last: integer, value: integer): integer
public static "lower"(a: (long)[], value: long): integer
public static "lower"<T>(a: (T)[], first: integer, last: integer, value: T, c: $Comparator$Type<(any)>): integer
public static "lower"<T>(a: (T)[], value: T, c: $Comparator$Type<(any)>): integer
public static "lower"(a: (long)[], first: integer, last: integer, value: long): integer
public static "gcd"(a: long, b: long): long
public static "gcd"(a: integer, b: integer): integer
public static "higher"(a: (integer)[], first: integer, last: integer, value: integer): integer
public static "higher"(a: (long)[], first: integer, last: integer, value: long): integer
public static "higher"<T>(a: (T)[], value: T, c: $Comparator$Type<(any)>): integer
public static "higher"<T>(a: (T)[], first: integer, last: integer, value: T, c: $Comparator$Type<(any)>): integer
public static "higher"(a: (long)[], value: long): integer
public static "higher"(a: (integer)[], value: integer): integer
public static "quickModPow"(a: integer, b: integer, m: integer): integer
public static "quickModPow"(a: long, b: long, m: integer): long
public static "averageStable"(a: (double)[], start: integer, limit: integer): double
public static "averageStable"(a: (double)[]): double
public static "quickPow"(a: integer, b: integer): integer
public static "quickPow"(a: long, b: long): long
public static "lengthOfLIS"(a: (integer)[], n: integer): integer
public static "lengthOfLIS"(a: (long)[], n: integer): integer
public static "lengthOfLIS"(a: (integer)[], n: integer, strict: boolean): integer
public static "lengthOfLIS"(a: (long)[], n: integer, strict: boolean): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlgorithmUtils$Type = ($AlgorithmUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlgorithmUtils_ = $AlgorithmUtils$Type;
}}
declare module "packages/icyllis/modernui/animation/$ValueAnimator$AnimatorUpdateListener" {
import {$ValueAnimator, $ValueAnimator$Type} from "packages/icyllis/modernui/animation/$ValueAnimator"

export interface $ValueAnimator$AnimatorUpdateListener {

 "onAnimationUpdate"(arg0: $ValueAnimator$Type): void

(arg0: $ValueAnimator$Type): void
}

export namespace $ValueAnimator$AnimatorUpdateListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueAnimator$AnimatorUpdateListener$Type = ($ValueAnimator$AnimatorUpdateListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueAnimator$AnimatorUpdateListener_ = $ValueAnimator$AnimatorUpdateListener$Type;
}}
declare module "packages/icyllis/modernui/widget/$Filter$Delayer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $Filter$Delayer {

 "getPostingDelay"(arg0: charseq): long

(arg0: charseq): long
}

export namespace $Filter$Delayer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Filter$Delayer$Type = ($Filter$Delayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Filter$Delayer_ = $Filter$Delayer$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$FormattedLayoutKey" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FormattedLayoutKey {


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getMemorySize"(): integer
get "memorySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FormattedLayoutKey$Type = ($FormattedLayoutKey);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FormattedLayoutKey_ = $FormattedLayoutKey$Type;
}}
declare module "packages/icyllis/modernui/audio/$WaveDecoder" {
import {$FileChannel, $FileChannel$Type} from "packages/java/nio/channels/$FileChannel"

export class $WaveDecoder {
 "mSampleRate": integer
 "mSamples": (float)[]
 "mData": (short)[]

constructor(channel: $FileChannel$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaveDecoder$Type = ($WaveDecoder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaveDecoder_ = $WaveDecoder$Type;
}}
declare module "packages/icyllis/modernui/core/$MessageQueue$IdleHandler" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $MessageQueue$IdleHandler {

 "queueIdle"(): boolean

(): boolean
}

export namespace $MessageQueue$IdleHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MessageQueue$IdleHandler$Type = ($MessageQueue$IdleHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MessageQueue$IdleHandler_ = $MessageQueue$IdleHandler$Type;
}}
declare module "packages/icyllis/modernui/fragment/$Fragment" {
import {$Lifecycle, $Lifecycle$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle"
import {$SharedElementCallback, $SharedElementCallback$Type} from "packages/icyllis/modernui/fragment/$SharedElementCallback"
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$LiveData, $LiveData$Type} from "packages/icyllis/modernui/lifecycle/$LiveData"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$ViewModelStore, $ViewModelStore$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelStore"
import {$ViewModelProvider$Factory, $ViewModelProvider$Factory$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelProvider$Factory"
import {$TimeUnit, $TimeUnit$Type} from "packages/java/util/concurrent/$TimeUnit"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$ViewModelStoreOwner, $ViewModelStoreOwner$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelStoreOwner"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$FileDescriptor, $FileDescriptor$Type} from "packages/java/io/$FileDescriptor"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$ContextMenu$ContextMenuInfo, $ContextMenu$ContextMenuInfo$Type} from "packages/icyllis/modernui/view/$ContextMenu$ContextMenuInfo"
import {$FragmentManager, $FragmentManager$Type} from "packages/icyllis/modernui/fragment/$FragmentManager"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"
import {$View$OnCreateContextMenuListener, $View$OnCreateContextMenuListener$Type} from "packages/icyllis/modernui/view/$View$OnCreateContextMenuListener"

export class $Fragment implements $LifecycleOwner, $ViewModelStoreOwner, $View$OnCreateContextMenuListener {

constructor()

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "isHidden"(): boolean
public "getContext"(): $Context
public "getId"(): integer
public "getHost"(): any
public "onStart"(): void
public "getTag"(): string
public "onCreateContextMenu"(menu: $ContextMenu$Type, v: $View$Type, menuInfo: $ContextMenu$ContextMenuInfo$Type): void
public "getDefaultViewModelProviderFactory"(): $ViewModelProvider$Factory
public "getArguments"(): $DataSet
public "requireArguments"(): $DataSet
public "isStateSaved"(): boolean
public "isDetached"(): boolean
public "setMenuVisibility"(menuVisible: boolean): void
public "setHasOptionsMenu"(hasMenu: boolean): void
public "onCreateAnimator"(transit: integer, enter: boolean, nextAnim: integer): $Animator
public "onHiddenChanged"(hidden: boolean): void
public "requireHost"(): any
public "isResumed"(): boolean
public "onAttach"(context: $Context$Type): void
public "requireContext"(): $Context
public "getParentFragment"(): $Fragment
public "isRemoving"(): boolean
public "isAdded"(): boolean
public "onViewCreated"(view: $View$Type, savedInstanceState: $DataSet$Type): void
public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
public "onDestroyView"(): void
public "onDetach"(): void
public "requireView"(): $View
public "onPause"(): void
public "onStop"(): void
public "onDestroy"(): void
public "setExitTransition"(transition: $Transition$Type): void
public "getExitTransition"(): $Transition
public "onResume"(): void
public "setEnterTransition"(transition: $Transition$Type): void
public "getEnterTransition"(): $Transition
public "isVisible"(): boolean
public "getView"(): $View
public "getViewModelStore"(): $ViewModelStore
public "getLifecycle"(): $Lifecycle
public "isInLayout"(): boolean
public "dump"(prefix: string, fd: $FileDescriptor$Type, writer: $PrintWriter$Type, ...args: (string)[]): void
public "setArguments"(args: $DataSet$Type): void
public "registerForContextMenu"(view: $View$Type): void
public "unregisterForContextMenu"(view: $View$Type): void
public "onSaveInstanceState"(outState: $DataSet$Type): void
public "onViewStateRestored"(savedInstanceState: $DataSet$Type): void
public "setEnterSharedElementCallback"(callback: $SharedElementCallback$Type): void
public "setExitSharedElementCallback"(callback: $SharedElementCallback$Type): void
public "onPrimaryNavigationFragmentChanged"(isPrimaryNavigationFragment: boolean): void
public "setAllowReturnTransitionOverlap"(allow: boolean): void
public "setAllowEnterTransitionOverlap"(allow: boolean): void
public "getAllowEnterTransitionOverlap"(): boolean
public "getAllowReturnTransitionOverlap"(): boolean
public "postponeEnterTransition"(): void
public "postponeEnterTransition"(duration: long, timeUnit: $TimeUnit$Type): void
public "getParentFragmentManager"(): $FragmentManager
public "startPostponedEnterTransition"(): void
public "getViewLifecycleOwner"(): $LifecycleOwner
public "getChildFragmentManager"(): $FragmentManager
public "requireParentFragment"(): $Fragment
public "setInitialSavedState"(state: $DataSet$Type): void
public "getViewLifecycleOwnerLiveData"(): $LiveData<($LifecycleOwner)>
public "onCreate"(savedInstanceState: $DataSet$Type): void
public "getReenterTransition"(): $Transition
public "setSharedElementReturnTransition"(transition: $Transition$Type): void
public "getSharedElementReturnTransition"(): $Transition
public "getSharedElementEnterTransition"(): $Transition
public "getReturnTransition"(): $Transition
public "setReturnTransition"(transition: $Transition$Type): void
public "setReenterTransition"(transition: $Transition$Type): void
public "setSharedElementEnterTransition"(transition: $Transition$Type): void
get "hidden"(): boolean
get "context"(): $Context
get "id"(): integer
get "host"(): any
get "tag"(): string
get "defaultViewModelProviderFactory"(): $ViewModelProvider$Factory
get "arguments"(): $DataSet
get "stateSaved"(): boolean
get "detached"(): boolean
set "menuVisibility"(value: boolean)
set "hasOptionsMenu"(value: boolean)
get "resumed"(): boolean
get "parentFragment"(): $Fragment
get "removing"(): boolean
get "added"(): boolean
set "exitTransition"(value: $Transition$Type)
get "exitTransition"(): $Transition
set "enterTransition"(value: $Transition$Type)
get "enterTransition"(): $Transition
get "visible"(): boolean
get "view"(): $View
get "viewModelStore"(): $ViewModelStore
get "lifecycle"(): $Lifecycle
get "inLayout"(): boolean
set "arguments"(value: $DataSet$Type)
set "enterSharedElementCallback"(value: $SharedElementCallback$Type)
set "exitSharedElementCallback"(value: $SharedElementCallback$Type)
set "allowReturnTransitionOverlap"(value: boolean)
set "allowEnterTransitionOverlap"(value: boolean)
get "allowEnterTransitionOverlap"(): boolean
get "allowReturnTransitionOverlap"(): boolean
get "parentFragmentManager"(): $FragmentManager
get "viewLifecycleOwner"(): $LifecycleOwner
get "childFragmentManager"(): $FragmentManager
set "initialSavedState"(value: $DataSet$Type)
get "viewLifecycleOwnerLiveData"(): $LiveData<($LifecycleOwner)>
get "reenterTransition"(): $Transition
set "sharedElementReturnTransition"(value: $Transition$Type)
get "sharedElementReturnTransition"(): $Transition
get "sharedElementEnterTransition"(): $Transition
get "returnTransition"(): $Transition
set "returnTransition"(value: $Transition$Type)
set "reenterTransition"(value: $Transition$Type)
set "sharedElementEnterTransition"(value: $Transition$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Fragment$Type = ($Fragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Fragment_ = $Fragment$Type;
}}
declare module "packages/icyllis/modernui/core/$HandlerThread" {
import {$Thread, $Thread$Type} from "packages/java/lang/$Thread"
import {$Handler, $Handler$Type} from "packages/icyllis/modernui/core/$Handler"
import {$Looper, $Looper$Type} from "packages/icyllis/modernui/core/$Looper"

export class $HandlerThread extends $Thread {
static readonly "MIN_PRIORITY": integer
static readonly "NORM_PRIORITY": integer
static readonly "MAX_PRIORITY": integer

constructor(name: string)

public "run"(): void
public "quit"(): boolean
public "getLooper"(): $Looper
public "quitSafely"(): boolean
public "getThreadHandler"(): $Handler
get "looper"(): $Looper
get "threadHandler"(): $Handler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HandlerThread$Type = ($HandlerThread);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HandlerThread_ = $HandlerThread$Type;
}}
declare module "packages/icyllis/modernui/text/$Layout$Alignment" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Layout$Alignment extends $Enum<($Layout$Alignment)> {
static readonly "ALIGN_NORMAL": $Layout$Alignment
static readonly "ALIGN_OPPOSITE": $Layout$Alignment
static readonly "ALIGN_CENTER": $Layout$Alignment
static readonly "ALIGN_LEFT": $Layout$Alignment
static readonly "ALIGN_RIGHT": $Layout$Alignment


public static "values"(): ($Layout$Alignment)[]
public static "valueOf"(name: string): $Layout$Alignment
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Layout$Alignment$Type = (("align_opposite") | ("align_left") | ("align_center") | ("align_normal") | ("align_right")) | ($Layout$Alignment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Layout$Alignment_ = $Layout$Alignment$Type;
}}
declare module "packages/icyllis/modernui/view/$ActionProvider$SubUiVisibilityListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ActionProvider$SubUiVisibilityListener {

 "onSubUiVisibilityChanged"(arg0: boolean): void

(arg0: boolean): void
}

export namespace $ActionProvider$SubUiVisibilityListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActionProvider$SubUiVisibilityListener$Type = ($ActionProvider$SubUiVisibilityListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActionProvider$SubUiVisibilityListener_ = $ActionProvider$SubUiVisibilityListener$Type;
}}
declare module "packages/icyllis/modernui/text/$Spannable$Factory" {
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"

export interface $Spannable$Factory {

 "newSpannable"(arg0: charseq): $Spannable

(arg0: charseq): $Spannable
}

export namespace $Spannable$Factory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Spannable$Factory$Type = ($Spannable$Factory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Spannable$Factory_ = $Spannable$Factory$Type;
}}
declare module "packages/icyllis/modernui/core/$Window" {
import {$Bitmap, $Bitmap$Type} from "packages/icyllis/modernui/graphics/$Bitmap"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"

export class $Window implements $AutoCloseable {
static readonly "LAST_SYSTEM_WINDOW": integer

constructor(handle: long)

public static "get"(handle: long): $Window
public "close"(): void
public "getHandle"(): long
public "maximize"(): void
public "hide"(): void
public "swapBuffers"(): void
public "getScreenY"(): integer
public "minimize"(): void
public "getScreenX"(): integer
public "getScreenWidth"(): integer
public "setTitle"(title: string): void
public "restore"(): void
public "getScreenHeight"(): integer
public "shouldClose"(): boolean
public "getWidth"(): integer
public "getHeight"(): integer
public "makeCurrent"(): void
public "swapInterval"(interval: integer): void
public "show"(): void
public "setShouldClose"(value: boolean): void
public "setIcon"(...icons: ($Bitmap$Type)[]): void
get "handle"(): long
get "screenY"(): integer
get "screenX"(): integer
get "screenWidth"(): integer
set "title"(value: string)
get "screenHeight"(): integer
get "width"(): integer
get "height"(): integer
set "icon"(value: ($Bitmap$Type)[])
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Window$Type = ($Window);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Window_ = $Window$Type;
}}
declare module "packages/icyllis/modernui/animation/$ViscousFluidInterpolator" {
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"

export class $ViscousFluidInterpolator implements $TimeInterpolator {


public "getInterpolation"(progress: float): float
public static "cycle"(cycle: float): $TimeInterpolator
public static "overshoot"(): $TimeInterpolator
public static "overshoot"(tension: float): $TimeInterpolator
public static "bounce"(): $TimeInterpolator
public static "accelerate"(factor: float): $TimeInterpolator
public static "accelerate"(): $TimeInterpolator
public static "anticipate"(tension: float): $TimeInterpolator
public static "anticipate"(): $TimeInterpolator
public static "decelerate"(factor: float): $TimeInterpolator
public static "decelerate"(): $TimeInterpolator
public static "linear"(): $TimeInterpolator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViscousFluidInterpolator$Type = ($ViscousFluidInterpolator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViscousFluidInterpolator_ = $ViscousFluidInterpolator$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentManager" {
import {$FragmentFactory, $FragmentFactory$Type} from "packages/icyllis/modernui/fragment/$FragmentFactory"
import {$FragmentResultListener, $FragmentResultListener$Type} from "packages/icyllis/modernui/fragment/$FragmentResultListener"
import {$FragmentResultOwner, $FragmentResultOwner$Type} from "packages/icyllis/modernui/fragment/$FragmentResultOwner"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"
import {$FragmentManager$OnBackStackChangedListener, $FragmentManager$OnBackStackChangedListener$Type} from "packages/icyllis/modernui/fragment/$FragmentManager$OnBackStackChangedListener"
import {$FragmentOnAttachListener, $FragmentOnAttachListener$Type} from "packages/icyllis/modernui/fragment/$FragmentOnAttachListener"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$FragmentLifecycleCallbacks, $FragmentLifecycleCallbacks$Type} from "packages/icyllis/modernui/fragment/$FragmentLifecycleCallbacks"
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$FragmentManager$BackStackEntry, $FragmentManager$BackStackEntry$Type} from "packages/icyllis/modernui/fragment/$FragmentManager$BackStackEntry"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FragmentTransaction, $FragmentTransaction$Type} from "packages/icyllis/modernui/fragment/$FragmentTransaction"
import {$FileDescriptor, $FileDescriptor$Type} from "packages/java/io/$FileDescriptor"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"

export class $FragmentManager implements $FragmentResultOwner {
static readonly "POP_BACK_STACK_INCLUSIVE": integer


public "toString"(): string
public "isDestroyed"(): boolean
public "getFragment"(bundle: $DataSet$Type, key: string): $Fragment
public "isStateSaved"(): boolean
public "unregisterFragmentLifecycleCallbacks"(cb: $FragmentLifecycleCallbacks$Type): void
public "clearFragmentResult"(requestKey: string): void
public "popBackStackImmediate"(): boolean
public "popBackStackImmediate"(name: string, flags: integer): boolean
public "popBackStackImmediate"(id: integer, flags: integer): boolean
public "getBackStackEntryAt"(index: integer): $FragmentManager$BackStackEntry
public "getPrimaryNavigationFragment"(): $Fragment
public "addOnBackStackChangedListener"(listener: $FragmentManager$OnBackStackChangedListener$Type): void
public "clearFragmentResultListener"(requestKey: string): void
public "setFragmentResultListener"(requestKey: string, lifecycleOwner: $LifecycleOwner$Type, listener: $FragmentResultListener$Type): void
public "executePendingTransactions"(): boolean
public "getBackStackEntryCount"(): integer
public "removeOnBackStackChangedListener"(listener: $FragmentManager$OnBackStackChangedListener$Type): void
public "addFragmentOnAttachListener"(listener: $FragmentOnAttachListener$Type): void
public "registerFragmentLifecycleCallbacks"(cb: $FragmentLifecycleCallbacks$Type, recursive: boolean): void
public "removeFragmentOnAttachListener"(listener: $FragmentOnAttachListener$Type): void
public "beginTransaction"(): $FragmentTransaction
public "dump"(prefix: string, fd: $FileDescriptor$Type, writer: $PrintWriter$Type, ...args: (string)[]): void
public "popBackStack"(): void
public "popBackStack"(name: string, flags: integer): void
public "popBackStack"(id: integer, flags: integer): void
public "setFragmentResult"(requestKey: string, result: $DataSet$Type): void
public static "findFragment"<F extends $Fragment>(view: $View$Type): F
public "getFragments"(): $List<($Fragment)>
public "putFragment"(bundle: $DataSet$Type, key: string, fragment: $Fragment$Type): void
public "findFragmentById"(id: integer): $Fragment
public "findFragmentByTag"(tag: string): $Fragment
public "getFragmentFactory"(): $FragmentFactory
public "setFragmentFactory"(fragmentFactory: $FragmentFactory$Type): void
get "destroyed"(): boolean
get "stateSaved"(): boolean
get "primaryNavigationFragment"(): $Fragment
get "backStackEntryCount"(): integer
get "fragments"(): $List<($Fragment)>
get "fragmentFactory"(): $FragmentFactory
set "fragmentFactory"(value: $FragmentFactory$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentManager$Type = ($FragmentManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentManager_ = $FragmentManager$Type;
}}
declare module "packages/icyllis/modernui/view/$KeyEvent$DispatcherState" {
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"

export class $KeyEvent$DispatcherState {

constructor()

public "reset"(target: any): void
public "reset"(): void
public "startTracking"(event: $KeyEvent$Type, target: any): void
public "isTracking"(event: $KeyEvent$Type): boolean
public "performedLongPress"(event: $KeyEvent$Type): void
public "handleUpEvent"(event: $KeyEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyEvent$DispatcherState$Type = ($KeyEvent$DispatcherState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyEvent$DispatcherState_ = $KeyEvent$DispatcherState$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$ColorDrawable" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Drawable$ConstantState, $Drawable$ConstantState$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$ConstantState"

export class $ColorDrawable extends $Drawable {
static readonly "MAX_LEVEL": integer

constructor(color: integer)
constructor()

public "setColor"(color: integer): void
public "hasFocusStateSpecified"(): boolean
public "draw"(canvas: $Canvas$Type): void
public "isStateful"(): boolean
public "setTintList"(tint: $ColorStateList$Type): void
public "setTintBlendMode"(blendMode: $BlendMode$Type): void
public "getConstantState"(): $Drawable$ConstantState
public "clearMutated"(): void
public "getAlpha"(): integer
public "getColor"(): integer
public "setAlpha"(alpha: integer): void
public "mutate"(): $Drawable
set "color"(value: integer)
get "stateful"(): boolean
set "tintList"(value: $ColorStateList$Type)
set "tintBlendMode"(value: $BlendMode$Type)
get "constantState"(): $Drawable$ConstantState
get "alpha"(): integer
get "color"(): integer
set "alpha"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorDrawable$Type = ($ColorDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorDrawable_ = $ColorDrawable$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$LineBreaker$Result" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LineBreaker$Result {


public "getLineWidth"(lineIndex: integer): float
public "hasLineTab"(lineIndex: integer): boolean
public "getLineBreakOffset"(lineIndex: integer): integer
public "getLineDescent"(lineIndex: integer): float
public "getLineCount"(): integer
public "getLineAscent"(lineIndex: integer): float
get "lineCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LineBreaker$Result$Type = ($LineBreaker$Result);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LineBreaker$Result_ = $LineBreaker$Result$Type;
}}
declare module "packages/icyllis/modernui/widget/$RadioGroup$OnCheckedChangeListener" {
import {$RadioGroup, $RadioGroup$Type} from "packages/icyllis/modernui/widget/$RadioGroup"

export interface $RadioGroup$OnCheckedChangeListener {

 "onCheckedChanged"(arg0: $RadioGroup$Type, arg1: integer): void

(arg0: $RadioGroup$Type, arg1: integer): void
}

export namespace $RadioGroup$OnCheckedChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RadioGroup$OnCheckedChangeListener$Type = ($RadioGroup$OnCheckedChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RadioGroup$OnCheckedChangeListener_ = $RadioGroup$OnCheckedChangeListener$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewGroup" {
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ActionMode$Callback, $ActionMode$Callback$Type} from "packages/icyllis/modernui/view/$ActionMode$Callback"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$ActionMode, $ActionMode$Type} from "packages/icyllis/modernui/view/$ActionMode"
import {$Point, $Point$Type} from "packages/icyllis/modernui/graphics/$Point"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$ViewManager, $ViewManager$Type} from "packages/icyllis/modernui/view/$ViewManager"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$LayoutTransition, $LayoutTransition$Type} from "packages/icyllis/modernui/animation/$LayoutTransition"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$PointerIcon, $PointerIcon$Type} from "packages/icyllis/modernui/view/$PointerIcon"

export class $ViewGroup extends $View implements $ViewParent, $ViewManager {
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "getChildCount"(): integer
public "resolveLayoutDirection"(): boolean
public "resolveRtlPropertiesIfNeeded"(): boolean
public "resolveLayoutParams"(): void
public "getDescendantFocusability"(): integer
public "dispatchSetSelected"(selected: boolean): void
public "dispatchSetActivated"(activated: boolean): void
public "addKeyboardNavigationClusters"(views: $Collection$Type<($View$Type)>, direction: integer): void
public "focusableViewAvailable"(v: $View$Type): void
public "restoreDefaultFocus"(): boolean
public "requestChildRectangleOnScreen"(child: $View$Type, rectangle: $Rect$Type, immediate: boolean): boolean
public "onStartNestedScroll"(child: $View$Type, target: $View$Type, axes: integer, type: integer): boolean
public "jumpDrawablesToCurrentState"(): void
public "childHasTransientStateChanged"(child: $View$Type, childHasTransientState: boolean): void
public "onNestedScrollAccepted"(child: $View$Type, target: $View$Type, axes: integer, type: integer): void
public "childDrawableStateChanged"(child: $View$Type): void
public "resolveTextAlignment"(): boolean
public "dispatchDrawableHotspotChanged"(x: float, y: float): void
public "resolveTextDirection"(): boolean
public "shouldDelayChildPressedState"(): boolean
public "dispatchStartTemporaryDetach"(): void
public "dispatchFinishTemporaryDetach"(): void
public "startActionModeForChild"(originalView: $View$Type, callback: $ActionMode$Callback$Type, type: integer): $ActionMode
public "dispatchKeyShortcutEvent"(event: $KeyEvent$Type): boolean
public "getChildVisibleRect"(child: $View$Type, r: $Rect$Type, offset: $Point$Type): boolean
public "getChildVisibleRect"(child: $View$Type, r: $Rect$Type, offset: $Point$Type, forceParentCheck: boolean): boolean
public "dispatchWindowVisibilityChanged"(visibility: integer): void
public "dispatchWindowFocusChanged"(hasFocus: boolean): void
public "onResolvePointerIcon"(event: $MotionEvent$Type): $PointerIcon
public "showContextMenuForChild"(originalView: $View$Type, x: float, y: float): boolean
public "onInterceptHoverEvent"(event: $MotionEvent$Type): boolean
public "getTouchscreenBlocksFocus"(): boolean
public "onInterceptTouchEvent"(ev: $MotionEvent$Type): boolean
public "setDescendantFocusability"(focusability: integer): void
public "getChildDrawingOrder"(drawingPosition: integer): integer
public "requestDisallowInterceptTouchEvent"(disallowIntercept: boolean): void
public "clearDisappearingChildren"(): void
public "setLayoutTransition"(transition: $LayoutTransition$Type): void
public "setAddStatesFromChildren"(addsStates: boolean): void
public "getTransientViewIndex"(position: integer): integer
public "getTransientViewCount"(): integer
public "addStatesFromChildren"(): boolean
public "removeViewsInLayout"(start: integer, count: integer): void
public static "getChildMeasureSpec"(spec: integer, padding: integer, childDimension: integer): integer
public "removeTransientView"(view: $View$Type): void
public "offsetRectIntoDescendantCoords"(descendant: $View$Type, rect: $Rect$Type): void
public "removeAllViewsInLayout"(): void
public "offsetChildrenTopAndBottom"(offset: integer): void
public "requestTransitionStart"(transition: $LayoutTransition$Type): void
public "getNestedScrollAxes"(): integer
public "setTouchscreenBlocksFocus"(touchscreenBlocksFocus: boolean): void
public "getLayoutTransition"(): $LayoutTransition
public "offsetDescendantRectToMyCoords"(descendant: $View$Type, rect: $Rect$Type): void
public "startViewTransition"(view: $View$Type): void
public "onNestedPreFling"(target: $View$Type, velocityX: float, velocityY: float): boolean
public "onStopNestedScroll"(target: $View$Type, type: integer): void
public "onNestedPreScroll"(target: $View$Type, dx: integer, dy: integer, consumed: (integer)[], type: integer): void
public "onNestedScroll"(target: $View$Type, dxConsumed: integer, dyConsumed: integer, dxUnconsumed: integer, dyUnconsumed: integer, type: integer, consumed: (integer)[]): void
public "onNestedFling"(target: $View$Type, velocityX: float, velocityY: float, consumed: boolean): boolean
public "isLayoutSuppressed"(): boolean
public "hasTransientState"(): boolean
public "dispatchTouchEvent"(ev: $MotionEvent$Type): boolean
public "dispatchKeyEvent"(event: $KeyEvent$Type): boolean
public "isTransitionGroup"(): boolean
public "setTransitionGroup"(isTransitionGroup: boolean): void
public "getTransientView"(position: integer): $View
public "addTransientView"(view: $View$Type, index: integer): void
public "updateViewLayout"(view: $View$Type, params: $ViewGroup$LayoutParams$Type): void
public "removeView"(view: $View$Type): void
public "indexOfChild"(child: $View$Type): integer
public "removeViews"(start: integer, count: integer): void
public "removeViewAt"(index: integer): void
public "removeViewInLayout"(view: $View$Type): void
public "removeAllViews"(): void
public "getChildAt"(index: integer): $View
public "getFocusedChild"(): $View
public "setClipToPadding"(clipToPadding: boolean): void
public "bringChildToFront"(child: $View$Type): void
public "getClipChildren"(): boolean
public "setClipChildren"(clipChildren: boolean): void
public "getClipToPadding"(): boolean
public "suppressLayout"(suppress: boolean): void
public "endViewTransition"(view: $View$Type): void
public "addView"(child: $View$Type, index: integer): void
public "addView"(child: $View$Type, index: integer, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type): void
public "addView"(child: $View$Type, width: integer, height: integer): void
public "findFocus"(): $View
public "hasFocus"(): boolean
public "clearFocus"(): void
public "requestChildFocus"(child: $View$Type, focused: $View$Type): void
public "addFocusables"(views: $ArrayList$Type<($View$Type)>, direction: integer, focusableMode: integer): void
public "requestFocus"(direction: integer, previouslyFocusedRect: $Rect$Type): boolean
public "addTouchables"(views: $ArrayList$Type<($View$Type)>): void
public "clearChildFocus"(child: $View$Type): void
public "focusSearch"(focused: $View$Type, direction: integer): $View
public "resolvePadding"(): void
public "layout"(l: integer, t: integer, r: integer, b: integer): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
get "childCount"(): integer
get "descendantFocusability"(): integer
get "touchscreenBlocksFocus"(): boolean
set "descendantFocusability"(value: integer)
set "layoutTransition"(value: $LayoutTransition$Type)
get "transientViewCount"(): integer
get "nestedScrollAxes"(): integer
set "touchscreenBlocksFocus"(value: boolean)
get "layoutTransition"(): $LayoutTransition
get "layoutSuppressed"(): boolean
get "transitionGroup"(): boolean
set "transitionGroup"(value: boolean)
get "focusedChild"(): $View
set "clipToPadding"(value: boolean)
get "clipChildren"(): boolean
set "clipChildren"(value: boolean)
get "clipToPadding"(): boolean
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewGroup$Type = ($ViewGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewGroup_ = $ViewGroup$Type;
}}
declare module "packages/icyllis/modernui/core/$MessageQueue" {
import {$MessageQueue$IdleHandler, $MessageQueue$IdleHandler$Type} from "packages/icyllis/modernui/core/$MessageQueue$IdleHandler"

export class $MessageQueue {


public "postSyncBarrier"(): integer
public "removeSyncBarrier"(token: integer): void
public "isIdle"(): boolean
public "addIdleHandler"(handler: $MessageQueue$IdleHandler$Type): void
public "removeIdleHandler"(handler: $MessageQueue$IdleHandler$Type): void
public "isPolling"(): boolean
get "idle"(): boolean
get "polling"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MessageQueue$Type = ($MessageQueue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MessageQueue_ = $MessageQueue$Type;
}}
declare module "packages/icyllis/modernui/graphics/font/$GlyphManager" {
import {$GlyphVector, $GlyphVector$Type} from "packages/java/awt/font/$GlyphVector"
import {$BakedGlyph, $BakedGlyph$Type} from "packages/icyllis/modernui/graphics/font/$BakedGlyph"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$GlyphManager$AtlasInvalidationInfo, $GlyphManager$AtlasInvalidationInfo$Type} from "packages/icyllis/modernui/graphics/font/$GlyphManager$AtlasInvalidationInfo"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"
import {$Font, $Font$Type} from "packages/java/awt/$Font"
import {$Font as $Font$0, $Font$Type as $Font$0$Type} from "packages/icyllis/modernui/graphics/text/$Font"

export class $GlyphManager {
static readonly "MARKER": $Marker
static readonly "GLYPH_BORDER": integer
static "sAntiAliasing": boolean
static "sFractionalMetrics": boolean
static readonly "EMOJI_SIZE": integer
static readonly "EMOJI_ASCENT": integer
static readonly "EMOJI_SPACING": integer
static readonly "EMOJI_BASE": integer


public static "getInstance"(): $GlyphManager
public "debug"(): void
public "compact"(): void
public "reload"(): void
public "createGlyphVector"(awtFont: $Font$Type, text: (character)[]): $GlyphVector
public "layoutGlyphVector"(awtFont: $Font$Type, text: (character)[], start: integer, limit: integer, isRtl: boolean): $GlyphVector
public "lookupGlyph"(font: $Font$0$Type, fontSize: integer, glyphId: integer): $BakedGlyph
public "getCurrentTexture"(font: $Font$0$Type): integer
public "getCurrentTexture"(maskFormat: integer): integer
public "dumpInfo"(pw: $PrintWriter$Type): void
public "removeAtlasInvalidationCallback"(callback: $Consumer$Type<($GlyphManager$AtlasInvalidationInfo$Type)>): void
public "addAtlasInvalidationCallback"(callback: $Consumer$Type<($GlyphManager$AtlasInvalidationInfo$Type)>): void
get "instance"(): $GlyphManager
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlyphManager$Type = ($GlyphManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlyphManager_ = $GlyphManager$Type;
}}
declare module "packages/icyllis/modernui/util/$Parcel" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Instant, $Instant$Type} from "packages/java/time/$Instant"
import {$ClassLoader, $ClassLoader$Type} from "packages/java/lang/$ClassLoader"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Parcelable$Creator, $Parcelable$Creator$Type} from "packages/icyllis/modernui/util/$Parcelable$Creator"
import {$Parcelable, $Parcelable$Type} from "packages/icyllis/modernui/util/$Parcelable"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $Parcel {

constructor()

public "readDataSet"(loader: $ClassLoader$Type): $DataSet
public "writeFloatArray"(value: (float)[]): void
public "writeByteArray"(b: (byte)[], off: integer, len: integer): void
public "writeByteArray"(b: (byte)[]): void
public "writeUUID"(value: $UUID$Type): void
public "writeParcelable"(p: $Parcelable$Type, parcelableFlags: integer): void
public "writeDataSet"(source: $DataSet$Type): void
public "writeLongArray"(value: (long)[]): void
public "writeInstant"(value: $Instant$Type): void
public "writeShortArray"(value: (short)[]): void
public "writeIntArray"(value: (integer)[]): void
public "writeCharArray"(value: (character)[]): void
public "readInstant"(): $Instant
public "readShortArray"(): (short)[]
public "readCharArray"(): (character)[]
public "readFloatArray"(): (float)[]
public "writeString16"(s: string): void
public "readString8"(): string
public "writeBooleanArray"(value: (boolean)[]): void
public "readDoubleArray"(): (double)[]
public "readUUID"(): $UUID
public "writeDoubleArray"(value: (double)[]): void
public "readLongArray"(): (long)[]
public "readParcelable0"<T>(loader: $ClassLoader$Type, clazz: $Class$Type<(T)>): T
public "readBooleanArray"(): (boolean)[]
public "readString16"(): string
public "freeData"(): void
public "position"(): integer
public "position"(newPosition: integer): void
public "limit"(newLimit: integer): void
public "limit"(): integer
public "writeInt"(v: integer): void
public "readInt"(): integer
public "capacity"(): integer
public "readBytes"(dst: (byte)[]): void
public "readBytes"(dst: (byte)[], off: integer, len: integer): void
public "writeBytes"(src: (byte)[], off: integer, len: integer): void
public "writeBytes"(src: (byte)[]): void
public "writeChar"(v: integer): void
public "readChar"(): character
public "writeFloat"(v: float): void
public "readFloat"(): float
public "readBoolean"(): boolean
public "readByte"(): byte
public "readShort"(): short
public "readLong"(): long
public "readDouble"(): double
public "writeBoolean"(b: boolean): void
public "writeByte"(v: integer): void
public "writeShort"(v: integer): void
public "writeLong"(v: long): void
public "writeDouble"(v: double): void
public "readString"(): string
public "writeString"(s: string): void
public "readValue"<T>(loader: $ClassLoader$Type, clazz: $Class$Type<(T)>, elemType: $Class$Type<(any)>): T
public "readIntArray"(): (integer)[]
public "readByteArray"(): (byte)[]
public "writeArray"(a: (any)[]): void
public "writeList"(list: $List$Type<(any)>): void
public "writeString8"(s: string): void
public "writeValue"(v: any): void
public "readParcelable"<T>(loader: $ClassLoader$Type, clazz: $Class$Type<(T)>): T
public "readArray"<T>(loader: $ClassLoader$Type, clazz: $Class$Type<(T)>): (T)[]
public "readCharSequence"(): charseq
public "writeCharSequence"(cs: charseq): void
public "writeParcelableCreator"(p: $Parcelable$Type): void
public "readParcelableCreator"<T>(loader: $ClassLoader$Type, clazz: $Class$Type<(T)>): $Parcelable$Creator<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Parcel$Type = ($Parcel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Parcel_ = $Parcel$Type;
}}
declare module "packages/icyllis/modernui/text/$SpanSet" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"

export class $SpanSet<E> extends $ArrayList<(E)> {
 "mSpanStarts": (integer)[]
 "mSpanEnds": (integer)[]
 "mSpanFlags": (integer)[]

constructor(type: $Class$Type<(any)>)
constructor(type: $Class$Type<(any)>, ignoreEmptySpans: boolean)

public "init"(spanned: $Spanned$Type, start: integer, limit: integer): boolean
public "getNextTransition"(start: integer, limit: integer): integer
public "recycle"(): void
public "hasSpansIntersecting"(start: integer, end: integer): boolean
public static "copyOf"<E>(arg0: $Collection$Type<(any)>): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E): $List<(E)>
public static "of"<E>(arg0: E): $List<(E)>
public static "of"<E>(): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E): $List<(E)>
public static "of"<E>(...arg0: (E)[]): $List<(E)>
public "containsAll"(arg0: $Collection$Type<(any)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpanSet$Type<E> = ($SpanSet<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpanSet_<E> = $SpanSet$Type<(E)>;
}}
declare module "packages/icyllis/modernui/annotation/$Size" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $Size extends $Annotation {

 "value"(): long
 "min"(): long
 "max"(): long
 "multiple"(): long
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $Size {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Size$Type = ($Size);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Size_ = $Size$Type;
}}
declare module "packages/icyllis/modernui/util/$HeadPadding" {
import {$L0Padding, $L0Padding$Type} from "packages/icyllis/modernui/util/$L0Padding"

export class $HeadPadding<E> extends $L0Padding<(E)> {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeadPadding$Type<E> = ($HeadPadding<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeadPadding_<E> = $HeadPadding$Type<(E)>;
}}
declare module "packages/icyllis/modernui/text/style/$BulletSpan" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$LeadingMarginSpan, $LeadingMarginSpan$Type} from "packages/icyllis/modernui/text/style/$LeadingMarginSpan"

export class $BulletSpan implements $LeadingMarginSpan {
static readonly "STYLE_DISC": integer
static readonly "STYLE_CIRCLE": integer
static readonly "STYLE_SQUARE": integer

constructor(blockMargin: integer, bulletWidth: integer, color: integer, style: integer)

public "getLeadingMargin"(first: boolean): integer
public "drawLeadingMargin"(c: $Canvas$Type, p: $TextPaint$Type, x: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
public "drawMargin"(c: $Canvas$Type, p: $TextPaint$Type, left: integer, right: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BulletSpan$Type = ($BulletSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BulletSpan_ = $BulletSpan$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$ScreenCallback" {
import {$ScreenCallback as $ScreenCallback$0, $ScreenCallback$Type as $ScreenCallback$0$Type} from "packages/icyllis/modernui/mc/$ScreenCallback"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"

/**
 * 
 * @deprecated
 */
export interface $ScreenCallback extends $ScreenCallback$0 {

 "isPauseScreen"(): boolean
 "shouldClose"(): boolean
 "isBackKey"(keyCode: integer, event: $KeyEvent$Type): boolean
 "hasDefaultBackground"(): boolean
 "shouldBlurBackground"(): boolean
}

export namespace $ScreenCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCallback$Type = ($ScreenCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCallback_ = $ScreenCallback$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$MutableLiveData" {
import {$LiveData, $LiveData$Type} from "packages/icyllis/modernui/lifecycle/$LiveData"

export class $MutableLiveData<T> extends $LiveData<(T)> {

constructor(value: T)
constructor()

public "setValue"(value: T): void
public "postValue"(value: T): void
set "value"(value: T)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MutableLiveData$Type<T> = ($MutableLiveData<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MutableLiveData_<T> = $MutableLiveData$Type<(T)>;
}}
declare module "packages/icyllis/modernui/resources/$Resource" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Resource {
static readonly "TYPE_ANIM": integer
static readonly "TYPE_ANIMATOR": integer
static readonly "TYPE_ARRAY": integer
static readonly "TYPE_ATTR": integer
static readonly "TYPE_ATTR_PRIVATE": integer
static readonly "TYPE_BOOL": integer
static readonly "TYPE_COLOR": integer
static readonly "TYPE_CONFIG_VARYING": integer
static readonly "TYPE_DIMEN": integer
static readonly "TYPE_DRAWABLE": integer
static readonly "TYPE_FONT": integer
static readonly "TYPE_FRACTION": integer
static readonly "TYPE_ID": integer
static readonly "TYPE_INTEGER": integer
static readonly "TYPE_INTERPOLATOR": integer
static readonly "TYPE_LAYOUT": integer
static readonly "TYPE_MACRO": integer
static readonly "TYPE_MENU": integer
static readonly "TYPE_MIPMAP": integer
static readonly "TYPE_NAVIGATION": integer
static readonly "TYPE_PLURALS": integer
static readonly "TYPE_RAW": integer
static readonly "TYPE_STRING": integer
static readonly "TYPE_STYLE": integer
static readonly "TYPE_STYLEABLE": integer
static readonly "TYPE_TRANSITION": integer
static readonly "TYPE_XML": integer

constructor()

public static "getTypeName"(type: integer): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Resource$Type = ($Resource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Resource_ = $Resource$Type;
}}
declare module "packages/icyllis/modernui/text/style/$WrapTogetherSpan" {
import {$ParagraphStyle, $ParagraphStyle$Type} from "packages/icyllis/modernui/text/style/$ParagraphStyle"

export interface $WrapTogetherSpan extends $ParagraphStyle {

}

export namespace $WrapTogetherSpan {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrapTogetherSpan$Type = ($WrapTogetherSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrapTogetherSpan_ = $WrapTogetherSpan$Type;
}}
declare module "packages/icyllis/modernui/resources/$XMLBlock" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $XMLBlock {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XMLBlock$Type = ($XMLBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XMLBlock_ = $XMLBlock$Type;
}}
declare module "packages/icyllis/modernui/mc/$MusicPlayer" {
import {$Track, $Track$Type} from "packages/icyllis/modernui/audio/$Track"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$FFT, $FFT$Type} from "packages/icyllis/modernui/audio/$FFT"

export class $MusicPlayer {


public static "getInstance"(): $MusicPlayer
public "seek"(fraction: float): boolean
public "play"(): void
public "isPlaying"(): boolean
public "pause"(): void
public "setGain"(gain: float): void
public "getGain"(): float
public static "openDialogGet"(): string
public "getTrackTime"(): float
public "replaceTrack"(path: $Path$Type): void
public "hasTrack"(): boolean
public "getTrackLength"(): float
public "clearTrack"(): void
public "getTrackName"(): string
public "setOnTrackLoadCallback"(onTrackLoadCallback: $Consumer$Type<($Track$Type)>): void
public "setAnalyzerCallback"(setup: $Consumer$Type<($FFT$Type)>, callback: $Consumer$Type<($FFT$Type)>): void
get "instance"(): $MusicPlayer
get "playing"(): boolean
set "gain"(value: float)
get "gain"(): float
get "trackTime"(): float
get "trackLength"(): float
get "trackName"(): string
set "onTrackLoadCallback"(value: $Consumer$Type<($Track$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MusicPlayer$Type = ($MusicPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MusicPlayer_ = $MusicPlayer$Type;
}}
declare module "packages/icyllis/modernui/view/$ActionProvider$VisibilityListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ActionProvider$VisibilityListener {

 "onActionProviderVisibilityChanged"(arg0: boolean): void

(arg0: boolean): void
}

export namespace $ActionProvider$VisibilityListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActionProvider$VisibilityListener$Type = ($ActionProvider$VisibilityListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActionProvider$VisibilityListener_ = $ActionProvider$VisibilityListener$Type;
}}
declare module "packages/icyllis/modernui/util/$Parcelable$ClassLoaderCreator" {
import {$ClassLoader, $ClassLoader$Type} from "packages/java/lang/$ClassLoader"
import {$Parcelable$Creator, $Parcelable$Creator$Type} from "packages/icyllis/modernui/util/$Parcelable$Creator"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"

export interface $Parcelable$ClassLoaderCreator<T> extends $Parcelable$Creator<(T)> {

 "createFromParcel"(source: $Parcel$Type): T
 "createFromParcel"(arg0: $Parcel$Type, arg1: $ClassLoader$Type): T

(source: $Parcel$Type): T
}

export namespace $Parcelable$ClassLoaderCreator {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Parcelable$ClassLoaderCreator$Type<T> = ($Parcelable$ClassLoaderCreator<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Parcelable$ClassLoaderCreator_<T> = $Parcelable$ClassLoaderCreator$Type<(T)>;
}}
declare module "packages/icyllis/modernui/mc/text/$CharacterStyle" {
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"

export class $CharacterStyle {
static readonly "NORMAL": integer
static readonly "BOLD_MASK": integer
static readonly "ITALIC_MASK": integer
static readonly "FONT_STYLE_MASK": integer
static readonly "UNDERLINE_MASK": integer
static readonly "STRIKETHROUGH_MASK": integer
static readonly "EFFECT_MASK": integer
static readonly "OBFUSCATED_MASK": integer
static readonly "LAYOUT_MASK": integer
static readonly "COLOR_EMOJI_REPLACEMENT": integer
static readonly "BITMAP_REPLACEMENT": integer
static readonly "ANY_BITMAP_REPLACEMENT": integer
static readonly "COLOR_MASK": integer
static readonly "IMPLICIT_COLOR_MASK": integer
static readonly "FULL_COLOR_MASK": integer
readonly "mStringIndex": integer
readonly "mStripIndex": integer

/**
 * 
 * @deprecated
 */
constructor(stringIndex: integer, stripIndex: integer, style: $Style$Type)

public "toString"(): string
public static "flatten"(style: $Style$Type): integer
public "isObfuscated"(): boolean
public "getFontStyle"(): integer
public "isMetricAffecting"(s: $CharacterStyle$Type): boolean
public "isFormattingCode"(): boolean
public "isUnderlined"(): boolean
public "getFullColor"(): integer
public "isLayoutAffecting"(s: $CharacterStyle$Type): boolean
public "isStrikethrough"(): boolean
public "getEffect"(): integer
public "isBold"(): boolean
public "isItalic"(): boolean
public static "equalsForTextLayout"(a: $Style$Type, b: $Style$Type): boolean
get "obfuscated"(): boolean
get "fontStyle"(): integer
get "formattingCode"(): boolean
get "underlined"(): boolean
get "fullColor"(): integer
get "strikethrough"(): boolean
get "effect"(): integer
get "bold"(): boolean
get "italic"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CharacterStyle$Type = ($CharacterStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CharacterStyle_ = $CharacterStyle$Type;
}}
declare module "packages/icyllis/modernui/transition/$Fade" {
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$Visibility, $Visibility$Type} from "packages/icyllis/modernui/transition/$Visibility"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $Fade extends $Visibility {
static readonly "IN": integer
static readonly "OUT": integer
static readonly "MODE_IN": integer
static readonly "MODE_OUT": integer
static readonly "MATCH_INSTANCE": integer
static readonly "MATCH_NAME": integer
static readonly "MATCH_ID": integer
static readonly "MATCH_ITEM_ID": integer

constructor()
constructor(fadingMode: integer)

public "onAppear"(sceneRoot: $ViewGroup$Type, view: $View$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "onDisappear"(sceneRoot: $ViewGroup$Type, view: $View$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "captureStartValues"(transitionValues: $TransitionValues$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Fade$Type = ($Fade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Fade_ = $Fade$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$TextLayoutEngine$FastCharSet" {
import {$BakedGlyph, $BakedGlyph$Type} from "packages/icyllis/modernui/graphics/font/$BakedGlyph"

export class $TextLayoutEngine$FastCharSet extends $BakedGlyph {
readonly "glyphs": ($BakedGlyph)[]
readonly "offsets": (float)[]
 "x": short
 "y": short
 "width": short
 "height": short
 "u1": float
 "v1": float
 "u2": float
 "v2": float

constructor(glyphs: ($BakedGlyph$Type)[], offsets: (float)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextLayoutEngine$FastCharSet$Type = ($TextLayoutEngine$FastCharSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextLayoutEngine$FastCharSet_ = $TextLayoutEngine$FastCharSet$Type;
}}
declare module "packages/icyllis/modernui/core/$Handler" {
import {$Handler$Callback, $Handler$Callback$Type} from "packages/icyllis/modernui/core/$Handler$Callback"
import {$Message, $Message$Type} from "packages/icyllis/modernui/core/$Message"
import {$Looper, $Looper$Type} from "packages/icyllis/modernui/core/$Looper"
import {$MessageQueue, $MessageQueue$Type} from "packages/icyllis/modernui/core/$MessageQueue"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $Handler {

constructor(looper: $Looper$Type, callback: $Handler$Callback$Type)
constructor(looper: $Looper$Type)

public "toString"(): string
public "getQueue"(): $MessageQueue
public "post"(r: $Runnable$Type): boolean
public "sendEmptyMessageDelayed"(what: integer, delayMillis: long): boolean
public "isCurrentThread"(): boolean
public "postAtFrontOfQueue"(r: $Runnable$Type): boolean
public "hasCallbacks"(r: $Runnable$Type): boolean
public "obtainMessage"(): $Message
public "obtainMessage"(what: integer): $Message
public "obtainMessage"(what: integer, arg1: integer, arg2: integer, obj: any): $Message
public "obtainMessage"(what: integer, obj: any): $Message
public "obtainMessage"(what: integer, arg1: integer, arg2: integer): $Message
public "sendMessage"(msg: $Message$Type): boolean
public "handleMessage"(msg: $Message$Type): void
public "sendMessageDelayed"(msg: $Message$Type, delayMillis: long): boolean
public "hasMessages"(): boolean
public "hasMessages"(what: integer): boolean
public "hasMessages"(what: integer, object: any): boolean
public "removeMessages"(what: integer): void
public "removeMessages"(what: integer, object: any): void
public "removeCallbacks"(r: $Runnable$Type, token: any): void
public "removeCallbacks"(r: $Runnable$Type): void
public "postDelayed"(r: $Runnable$Type, delayMillis: long): boolean
public "postDelayed"(r: $Runnable$Type, token: any, delayMillis: long): boolean
public "postAtTime"(r: $Runnable$Type, timeMillis: long): boolean
public "postAtTime"(r: $Runnable$Type, token: any, timeMillis: long): boolean
public "dispatchMessage"(msg: $Message$Type): void
public "getMessageName"(message: $Message$Type): string
public "sendMessageAtTime"(msg: $Message$Type, timeMillis: long): boolean
public "sendEmptyMessage"(what: integer): boolean
public static "createAsync"(looper: $Looper$Type, callback: $Handler$Callback$Type): $Handler
public static "createAsync"(looper: $Looper$Type): $Handler
public "sendEmptyMessageAtTime"(what: integer, timeMillis: long): boolean
public "sendMessageAtFrontOfQueue"(msg: $Message$Type): boolean
public "removeCallbacksAndMessages"(token: any): void
get "queue"(): $MessageQueue
get "currentThread"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Handler$Type = ($Handler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Handler_ = $Handler$Type;
}}
declare module "packages/icyllis/modernui/widget/$ViewPager$OnAdapterChangeListener" {
import {$ViewPager, $ViewPager$Type} from "packages/icyllis/modernui/widget/$ViewPager"
import {$PagerAdapter, $PagerAdapter$Type} from "packages/icyllis/modernui/widget/$PagerAdapter"

export interface $ViewPager$OnAdapterChangeListener {

 "onAdapterChanged"(arg0: $ViewPager$Type, arg1: $PagerAdapter$Type, arg2: $PagerAdapter$Type): void

(arg0: $ViewPager$Type, arg1: $PagerAdapter$Type, arg2: $PagerAdapter$Type): void
}

export namespace $ViewPager$OnAdapterChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewPager$OnAdapterChangeListener$Type = ($ViewPager$OnAdapterChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewPager$OnAdapterChangeListener_ = $ViewPager$OnAdapterChangeListener$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$VanillaTextWrapper" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Int2IntFunction, $Int2IntFunction$Type} from "packages/it/unimi/dsi/fastutil/ints/$Int2IntFunction"
import {$FormattedCharSink, $FormattedCharSink$Type} from "packages/net/minecraft/util/$FormattedCharSink"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"

export class $VanillaTextWrapper implements $FormattedCharSequence {
readonly "mText": string

constructor(text: string)

public "accept"(sink: $FormattedCharSink$Type): boolean
public static "decorateOutput"(arg0: $FormattedCharSink$Type, arg1: $Int2IntFunction$Type): $FormattedCharSink
public static "codepoint"(arg0: integer, arg1: $Style$Type): $FormattedCharSequence
public static "backward"(arg0: string, arg1: $Style$Type): $FormattedCharSequence
public static "forward"(arg0: string, arg1: $Style$Type): $FormattedCharSequence
public static "forward"(arg0: string, arg1: $Style$Type, arg2: $Int2IntFunction$Type): $FormattedCharSequence
public static "backward"(arg0: string, arg1: $Style$Type, arg2: $Int2IntFunction$Type): $FormattedCharSequence
public static "composite"(): $FormattedCharSequence
public static "fromList"(arg0: $List$Type<($FormattedCharSequence$Type)>): $FormattedCharSequence
public static "composite"(arg0: $List$Type<($FormattedCharSequence$Type)>): $FormattedCharSequence
public static "composite"(...arg0: ($FormattedCharSequence$Type)[]): $FormattedCharSequence
public static "composite"(arg0: $FormattedCharSequence$Type): $FormattedCharSequence
public static "fromPair"(arg0: $FormattedCharSequence$Type, arg1: $FormattedCharSequence$Type): $FormattedCharSequence
public static "composite"(arg0: $FormattedCharSequence$Type, arg1: $FormattedCharSequence$Type): $FormattedCharSequence
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaTextWrapper$Type = ($VanillaTextWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaTextWrapper_ = $VanillaTextWrapper$Type;
}}
declare module "packages/icyllis/modernui/core/$VulkanManager" {
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"

export class $VulkanManager implements $AutoCloseable {


public "close"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VulkanManager$Type = ($VulkanManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VulkanManager_ = $VulkanManager$Type;
}}
declare module "packages/icyllis/modernui/animation/$ValueAnimator" {
import {$ValueAnimator$AnimatorUpdateListener, $ValueAnimator$AnimatorUpdateListener$Type} from "packages/icyllis/modernui/animation/$ValueAnimator$AnimatorUpdateListener"
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$PropertyValuesHolder, $PropertyValuesHolder$Type} from "packages/icyllis/modernui/animation/$PropertyValuesHolder"
import {$TypeEvaluator, $TypeEvaluator$Type} from "packages/icyllis/modernui/animation/$TypeEvaluator"
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"
import {$AnimationHandler$FrameCallback, $AnimationHandler$FrameCallback$Type} from "packages/icyllis/modernui/animation/$AnimationHandler$FrameCallback"

export class $ValueAnimator extends $Animator implements $AnimationHandler$FrameCallback {
static "sDurationScale": float
static readonly "RESTART": integer
static readonly "REVERSE": integer
static readonly "INFINITE": integer
static readonly "MARKER": $Marker
static readonly "DURATION_INFINITE": long

constructor()

public "start"(): void
public "end"(): void
public "resume"(): void
public "reverse"(): void
public "getDuration"(): long
public "cancel"(): void
public "setStartDelay"(startDelay: long): void
public "setInterpolator"(value: $TimeInterpolator$Type): void
public "getRepeatCount"(): integer
public "pause"(): void
public static "ofInt"(...values: (integer)[]): $ValueAnimator
public "isRunning"(): boolean
public "setValues"(...values: ($PropertyValuesHolder$Type)[]): void
public "removeUpdateListener"(listener: $ValueAnimator$AnimatorUpdateListener$Type): void
public "commitAnimationFrame"(frameTime: long): void
public "removeAllUpdateListeners"(): void
public "getAnimatedFraction"(): float
public "isStarted"(): boolean
public "setDuration"(duration: long): $ValueAnimator
public static "ofFloat"(...values: (float)[]): $ValueAnimator
public "getInterpolator"(): $TimeInterpolator
public "setCurrentPlayTime"(playTime: long): void
public "getStartDelay"(): long
public "getTotalDuration"(): long
public "canReverse"(): boolean
public static "ofArgb"(...values: (integer)[]): $ValueAnimator
public "setEvaluator"(value: $TypeEvaluator$Type<(any)>): void
public static "ofObject"<V>(evaluator: $TypeEvaluator$Type<(V)>, ...values: (V)[]): $ValueAnimator
public "setCurrentFraction"(fraction: float): void
public "getCurrentPlayTime"(): long
public "setRepeatCount"(value: integer): void
public "getAnimatedValue"(): any
public "getRepeatMode"(): integer
public "addUpdateListener"(listener: $ValueAnimator$AnimatorUpdateListener$Type): void
public "setRepeatMode"(value: integer): void
public "doAnimationFrame"(frameTime: long): boolean
public "getValues"(): ($PropertyValuesHolder)[]
get "duration"(): long
set "startDelay"(value: long)
set "interpolator"(value: $TimeInterpolator$Type)
get "repeatCount"(): integer
get "running"(): boolean
set "values"(value: ($PropertyValuesHolder$Type)[])
get "animatedFraction"(): float
get "started"(): boolean
set "duration"(value: long)
get "interpolator"(): $TimeInterpolator
set "currentPlayTime"(value: long)
get "startDelay"(): long
get "totalDuration"(): long
set "evaluator"(value: $TypeEvaluator$Type<(any)>)
set "currentFraction"(value: float)
get "currentPlayTime"(): long
set "repeatCount"(value: integer)
get "animatedValue"(): any
get "repeatMode"(): integer
set "repeatMode"(value: integer)
get "values"(): ($PropertyValuesHolder)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueAnimator$Type = ($ValueAnimator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueAnimator_ = $ValueAnimator$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$MuiTextCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $MuiTextCommand {
static readonly "JB_MONO": $ResourceLocation

constructor()

public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiTextCommand$Type = ($MuiTextCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiTextCommand_ = $MuiTextCommand$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/$GLVertexAttrib" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GLVertexAttrib {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLVertexAttrib$Type = ($GLVertexAttrib);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLVertexAttrib_ = $GLVertexAttrib$Type;
}}
declare module "packages/icyllis/modernui/text/$TextDirectionHeuristic" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $TextDirectionHeuristic {

 "isRtl"(arg0: (character)[], arg1: integer, arg2: integer): boolean
 "isRtl"(arg0: charseq, arg1: integer, arg2: integer): boolean
}

export namespace $TextDirectionHeuristic {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextDirectionHeuristic$Type = ($TextDirectionHeuristic);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextDirectionHeuristic_ = $TextDirectionHeuristic$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$MeasuredText" {
import {$MeasuredText$Run, $MeasuredText$Run$Type} from "packages/icyllis/modernui/graphics/text/$MeasuredText$Run"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"

export class $MeasuredText {


public "toString"(): string
public "getExtent"(start: integer, end: integer, extent: $FontMetricsInt$Type): void
public "getRuns"(): ($MeasuredText$Run)[]
public "searchRun"(pos: integer): $MeasuredText$Run
public "getTextBuf"(): (character)[]
public "getMemoryUsage"(): integer
public "getAdvance"(pos: integer): float
public "getAdvance"(start: integer, end: integer): float
get "runs"(): ($MeasuredText$Run)[]
get "textBuf"(): (character)[]
get "memoryUsage"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MeasuredText$Type = ($MeasuredText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MeasuredText_ = $MeasuredText$Type;
}}
declare module "packages/icyllis/modernui/text/$NoCopySpan" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $NoCopySpan {

}

export namespace $NoCopySpan {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoCopySpan$Type = ($NoCopySpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoCopySpan_ = $NoCopySpan$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$BitmapFont" {
import {$FontPaint, $FontPaint$Type} from "packages/icyllis/modernui/graphics/text/$FontPaint"
import {$BitmapProvider$Definition, $BitmapProvider$Definition$Type} from "packages/net/minecraft/client/gui/font/providers/$BitmapProvider$Definition"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"
import {$FloatArrayList, $FloatArrayList$Type} from "packages/it/unimi/dsi/fastutil/floats/$FloatArrayList"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$BitmapFont$Glyph, $BitmapFont$Glyph$Type} from "packages/icyllis/modernui/mc/text/$BitmapFont$Glyph"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$IntArrayList, $IntArrayList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntArrayList"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"
import {$Strike, $Strike$Type} from "packages/icyllis/arc3d/core/$Strike"

export class $BitmapFont implements $Font, $AutoCloseable {


public "getSpriteWidth"(): integer
public "getGlyphInfo"(ch: integer): $BitmapFont$Glyph
public "getSpriteHeight"(): integer
public "equals"(o: any): boolean
public "hashCode"(): integer
public "close"(): void
public static "create"(definition: $BitmapProvider$Definition$Type, manager: $ResourceManager$Type): $BitmapFont
public "getFullName"(locale: $Locale$Type): string
public "dumpAtlas"(path: string): void
public "getCurrentTexture"(): integer
public "getStyle"(): integer
public "getFamilyName"(locale: $Locale$Type): string
public "getMetrics"(paint: $FontPaint$Type, fm: $FontMetricsInt$Type): integer
public "getAscent"(): integer
public "getDescent"(): integer
public "getGlyph"(ch: integer): $BitmapFont$Glyph
public "hasGlyph"(ch: integer, vs: integer): boolean
public "doSimpleLayout"(buf: (character)[], start: integer, limit: integer, paint: $FontPaint$Type, glyphs: $IntArrayList$Type, positions: $FloatArrayList$Type, x: float, y: float): float
public "findOrCreateStrike"(paint: $FontPaint$Type): $Strike
public "doComplexLayout"(buf: (character)[], contextStart: integer, contextLimit: integer, layoutStart: integer, layoutLimit: integer, isRtl: boolean, paint: $FontPaint$Type, glyphs: $IntArrayList$Type, positions: $FloatArrayList$Type, advances: (float)[], advanceOffset: integer, bounds: $Rect$Type, x: float, y: float): float
public "getScaleFactor"(): float
public "getFullName"(): string
public "getFamilyName"(): string
public "calcGlyphScore"(buf: (character)[], start: integer, limit: integer): integer
get "spriteWidth"(): integer
get "spriteHeight"(): integer
get "currentTexture"(): integer
get "style"(): integer
get "ascent"(): integer
get "descent"(): integer
get "scaleFactor"(): float
get "fullName"(): string
get "familyName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BitmapFont$Type = ($BitmapFont);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BitmapFont_ = $BitmapFont$Type;
}}
declare module "packages/icyllis/modernui/view/$Gravity" {
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"

export class $Gravity {
static readonly "NO_GRAVITY": integer
static readonly "AXIS_SPECIFIED": integer
static readonly "AXIS_PULL_BEFORE": integer
static readonly "AXIS_PULL_AFTER": integer
static readonly "AXIS_CLIP": integer
static readonly "AXIS_X_SHIFT": integer
static readonly "AXIS_Y_SHIFT": integer
static readonly "TOP": integer
static readonly "BOTTOM": integer
static readonly "LEFT": integer
static readonly "RIGHT": integer
static readonly "CENTER_VERTICAL": integer
static readonly "FILL_VERTICAL": integer
static readonly "CENTER_HORIZONTAL": integer
static readonly "FILL_HORIZONTAL": integer
static readonly "CENTER": integer
static readonly "FILL": integer
static readonly "CLIP_VERTICAL": integer
static readonly "CLIP_HORIZONTAL": integer
static readonly "RELATIVE_LAYOUT_DIRECTION": integer
static readonly "HORIZONTAL_GRAVITY_MASK": integer
static readonly "VERTICAL_GRAVITY_MASK": integer
static readonly "DISPLAY_CLIP_VERTICAL": integer
static readonly "DISPLAY_CLIP_HORIZONTAL": integer
static readonly "START": integer
static readonly "END": integer
static readonly "RELATIVE_HORIZONTAL_GRAVITY_MASK": integer

constructor()

public static "toString"(gravity: integer): string
public static "apply"(gravity: integer, w: integer, h: integer, container: $Rect$Type, outRect: $Rect$Type): void
public static "apply"(gravity: integer, w: integer, h: integer, container: $Rect$Type, xAdj: integer, yAdj: integer, outRect: $Rect$Type, layoutDirection: integer): void
public static "apply"(gravity: integer, w: integer, h: integer, container: $Rect$Type, xAdj: integer, yAdj: integer, outRect: $Rect$Type): void
public static "apply"(gravity: integer, w: integer, h: integer, container: $Rect$Type, outRect: $Rect$Type, layoutDirection: integer): void
public static "getAbsoluteGravity"(gravity: integer, layoutDirection: integer): integer
public static "applyDisplay"(gravity: integer, display: $Rect$Type, inoutObj: $Rect$Type): void
public static "applyDisplay"(gravity: integer, display: $Rect$Type, inoutObj: $Rect$Type, layoutDirection: integer): void
public static "isHorizontal"(gravity: integer): boolean
public static "isVertical"(gravity: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Gravity$Type = ($Gravity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Gravity_ = $Gravity$Type;
}}
declare module "packages/icyllis/modernui/animation/$AnimatorSet" {
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$AnimatorSet$Builder, $AnimatorSet$Builder$Type} from "packages/icyllis/modernui/animation/$AnimatorSet$Builder"
import {$AnimationHandler$FrameCallback, $AnimationHandler$FrameCallback$Type} from "packages/icyllis/modernui/animation/$AnimationHandler$FrameCallback"

export class $AnimatorSet extends $Animator implements $AnimationHandler$FrameCallback {
static readonly "MARKER": $Marker
static readonly "DURATION_INFINITE": long

constructor()

public "toString"(): string
public "start"(): void
public "end"(): void
public "resume"(): void
public "setTarget"(target: any): void
public "reverse"(): void
public "getDuration"(): long
public "cancel"(): void
public "setStartDelay"(startDelay: long): void
public "setInterpolator"(interpolator: $TimeInterpolator$Type): void
public "play"(anim: $Animator$Type): $AnimatorSet$Builder
public "pause"(): void
public "playSequentially"(items: $List$Type<($Animator$Type)>): void
public "playSequentially"(...items: ($Animator$Type)[]): void
public "playTogether"(items: $Collection$Type<($Animator$Type)>): void
public "playTogether"(...items: ($Animator$Type)[]): void
public "getChildAnimations"(): $ArrayList<($Animator)>
public "shouldPlayTogether"(): boolean
public "isRunning"(): boolean
public "commitAnimationFrame"(frameTime: long): void
public "isStarted"(): boolean
public "getInterpolator"(): $TimeInterpolator
public "setupStartValues"(): void
public "setCurrentPlayTime"(playTime: long): void
public "getStartDelay"(): long
public "getTotalDuration"(): long
public "setupEndValues"(): void
public "canReverse"(): boolean
public "getCurrentPlayTime"(): long
public "doAnimationFrame"(frameTime: long): boolean
set "target"(value: any)
get "duration"(): long
set "startDelay"(value: long)
set "interpolator"(value: $TimeInterpolator$Type)
get "childAnimations"(): $ArrayList<($Animator)>
get "running"(): boolean
get "started"(): boolean
get "interpolator"(): $TimeInterpolator
set "currentPlayTime"(value: long)
get "startDelay"(): long
get "totalDuration"(): long
get "currentPlayTime"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimatorSet$Type = ($AnimatorSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimatorSet_ = $AnimatorSet$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$NetworkMessages" {
import {$NetworkHandler, $NetworkHandler$Type} from "packages/icyllis/modernui/mc/forge/$NetworkHandler"

export class $NetworkMessages extends $NetworkHandler {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkMessages$Type = ($NetworkMessages);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkMessages_ = $NetworkMessages$Type;
}}
declare module "packages/icyllis/modernui/widget/$RadioButton" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$CompoundButton, $CompoundButton$Type} from "packages/icyllis/modernui/widget/$CompoundButton"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $RadioButton extends $CompoundButton {
static readonly "CHECKED_STATE_SET": (integer)[]
static readonly "UNKNOWN_BORING": $BoringLayout$Metrics
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "toggle"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RadioButton$Type = ($RadioButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RadioButton_ = $RadioButton$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewTreeObserver$OnGlobalLayoutListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ViewTreeObserver$OnGlobalLayoutListener {

 "onGlobalLayout"(): void

(): void
}

export namespace $ViewTreeObserver$OnGlobalLayoutListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewTreeObserver$OnGlobalLayoutListener$Type = ($ViewTreeObserver$OnGlobalLayoutListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewTreeObserver$OnGlobalLayoutListener_ = $ViewTreeObserver$OnGlobalLayoutListener$Type;
}}
declare module "packages/icyllis/modernui/material/$MaterialDesign" {
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"

export class $MaterialDesign {
static readonly "disabled_alpha_material_dark": float
static readonly "bright_foreground_dark": integer
static readonly "bright_foreground_light": integer
static readonly "dim_foreground_light": integer
static readonly "dim_foreground_light_disabled": integer
static readonly "secondary_text_light": $ColorStateList

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MaterialDesign$Type = ($MaterialDesign);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MaterialDesign_ = $MaterialDesign$Type;
}}
declare module "packages/icyllis/modernui/widget/$ListView" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ListAdapter, $ListAdapter$Type} from "packages/icyllis/modernui/widget/$ListAdapter"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$AbsListView, $AbsListView$Type} from "packages/icyllis/modernui/widget/$AbsListView"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $ListView extends $AbsListView {
static readonly "TRANSCRIPT_MODE_DISABLED": integer
static readonly "TRANSCRIPT_MODE_NORMAL": integer
static readonly "TRANSCRIPT_MODE_ALWAYS_SCROLL": integer
static readonly "CHOICE_MODE_NONE": integer
static readonly "CHOICE_MODE_SINGLE": integer
static readonly "CHOICE_MODE_MULTIPLE": integer
static readonly "CHOICE_MODE_MULTIPLE_MODAL": integer
static readonly "ITEM_VIEW_TYPE_IGNORE": integer
static readonly "ITEM_VIEW_TYPE_HEADER_OR_FOOTER": integer
static readonly "INVALID_POSITION": integer
static readonly "INVALID_ROW_ID": long
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setAdapter"(adapter: $ListAdapter$Type): void
public "getAdapter"(): $ListAdapter
public "requestChildRectangleOnScreen"(child: $View$Type, rect: $Rect$Type, immediate: boolean): boolean
public "getDivider"(): $Drawable
public "dispatchKeyEvent"(event: $KeyEvent$Type): boolean
public "onKeyDown"(keyCode: integer, event: $KeyEvent$Type): boolean
public "onKeyUp"(keyCode: integer, event: $KeyEvent$Type): boolean
public "setSelection"(position: integer): void
public "getFooterViewsCount"(): integer
public "smoothScrollByOffset"(offset: integer): void
public "smoothScrollToPosition"(position: integer): void
public "getHeaderViewsCount"(): integer
public "setOverscrollHeader"(header: $Drawable$Type): void
public "setHeaderDividersEnabled"(headerDividersEnabled: boolean): void
public "setFooterDividersEnabled"(footerDividersEnabled: boolean): void
public "areHeaderDividersEnabled"(): boolean
public "setSelectionAfterHeaderView"(): void
public "getOverscrollHeader"(): $Drawable
public "areFooterDividersEnabled"(): boolean
public "setOverscrollFooter"(footer: $Drawable$Type): void
public "getOverscrollFooter"(): $Drawable
public "getMaxScrollAmount"(): integer
public "addHeaderView"(v: $View$Type): void
public "addHeaderView"(v: $View$Type, data: any, isSelectable: boolean): void
public "removeHeaderView"(v: $View$Type): boolean
public "removeFooterView"(v: $View$Type): boolean
public "addFooterView"(v: $View$Type): void
public "addFooterView"(v: $View$Type, data: any, isSelectable: boolean): void
public "setItemsCanFocus"(itemsCanFocus: boolean): void
public "getItemsCanFocus"(): boolean
public "getDividerHeight"(): integer
public "setDivider"(divider: $Drawable$Type): void
public "setDividerHeight"(height: integer): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "adapter"(value: $ListAdapter$Type)
get "adapter"(): $ListAdapter
get "divider"(): $Drawable
set "selection"(value: integer)
get "footerViewsCount"(): integer
get "headerViewsCount"(): integer
set "overscrollHeader"(value: $Drawable$Type)
set "headerDividersEnabled"(value: boolean)
set "footerDividersEnabled"(value: boolean)
get "overscrollHeader"(): $Drawable
set "overscrollFooter"(value: $Drawable$Type)
get "overscrollFooter"(): $Drawable
get "maxScrollAmount"(): integer
set "itemsCanFocus"(value: boolean)
get "itemsCanFocus"(): boolean
get "dividerHeight"(): integer
set "divider"(value: $Drawable$Type)
set "dividerHeight"(value: integer)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListView$Type = ($ListView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListView_ = $ListView$Type;
}}
declare module "packages/icyllis/modernui/view/$AttachInfo$Callbacks" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $AttachInfo$Callbacks {

 "performHapticFeedback"(arg0: integer, arg1: boolean): boolean
 "playSoundEffect"(arg0: integer): void
}

export namespace $AttachInfo$Callbacks {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttachInfo$Callbacks$Type = ($AttachInfo$Callbacks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttachInfo$Callbacks_ = $AttachInfo$Callbacks$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$ShapedText" {
import {$ShapedText$RunConsumer, $ShapedText$RunConsumer$Type} from "packages/icyllis/modernui/graphics/text/$ShapedText$RunConsumer"
import {$ByteArrayList, $ByteArrayList$Type} from "packages/it/unimi/dsi/fastutil/bytes/$ByteArrayList"
import {$FontPaint, $FontPaint$Type} from "packages/icyllis/modernui/graphics/text/$FontPaint"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$IntArrayList, $IntArrayList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntArrayList"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"
import {$FloatArrayList, $FloatArrayList$Type} from "packages/it/unimi/dsi/fastutil/floats/$FloatArrayList"

export class $ShapedText {
static readonly "BIDI_LTR": integer
static readonly "BIDI_RTL": integer
static readonly "BIDI_DEFAULT_LTR": integer
static readonly "BIDI_DEFAULT_RTL": integer
static readonly "BIDI_OVERRIDE_LTR": integer
static readonly "BIDI_OVERRIDE_RTL": integer

constructor(text: (character)[], contextStart: integer, contextLimit: integer, start: integer, limit: integer, bidiFlags: integer, paint: $FontPaint$Type)

public "toString"(): string
public "getY"(i: integer): float
public "getX"(i: integer): float
public static "doLayoutRun"(text: (character)[], contextStart: integer, contextLimit: integer, start: integer, limit: integer, isRtl: boolean, paint: $FontPaint$Type, extent: $FontMetricsInt$Type, consumer: $ShapedText$RunConsumer$Type): float
public static "doLayoutRun"(text: (character)[], contextStart: integer, contextLimit: integer, start: integer, limit: integer, isRtl: boolean, paint: $FontPaint$Type, layoutStart: integer, advances: (float)[], curAdvance: float, glyphs: $IntArrayList$Type, positions: $FloatArrayList$Type, fontIndices: $ByteArrayList$Type, idGet: $Function$Type<($Font$Type), (byte)>, extent: $FontMetricsInt$Type, consumer: $ShapedText$RunConsumer$Type): float
public "getAdvances"(): (float)[]
public "getPositions"(): (float)[]
public "getGlyphCount"(): integer
public "getCharCount"(): integer
public "getMemoryUsage"(): integer
public "getFont"(i: integer): $Font
public "getGlyphs"(): (integer)[]
public "getAscent"(): integer
public "getAdvance"(i: integer): float
public "getAdvance"(): float
public "getDescent"(): integer
public "getGlyph"(i: integer): integer
get "advances"(): (float)[]
get "positions"(): (float)[]
get "glyphCount"(): integer
get "charCount"(): integer
get "memoryUsage"(): integer
get "glyphs"(): (integer)[]
get "ascent"(): integer
get "advance"(): float
get "descent"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapedText$Type = ($ShapedText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapedText_ = $ShapedText$Type;
}}
declare module "packages/icyllis/modernui/util/$FP16" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FP16 {
static readonly "SIZE": integer
static readonly "BYTES": integer
static readonly "EPSILON": short
static readonly "MAX_EXPONENT": integer
static readonly "MIN_EXPONENT": integer
static readonly "LOWEST_VALUE": short
static readonly "MAX_VALUE": short
static readonly "MIN_NORMAL": short
static readonly "MIN_VALUE": short
static readonly "NaN": short
static readonly "NEGATIVE_INFINITY": short
static readonly "NEGATIVE_ZERO": short
static readonly "POSITIVE_INFINITY": short
static readonly "POSITIVE_ZERO": short
static readonly "SIGN_SHIFT": integer
static readonly "EXPONENT_SHIFT": integer
static readonly "SIGN_MASK": integer
static readonly "SHIFTED_EXPONENT_MASK": integer
static readonly "SIGNIFICAND_MASK": integer
static readonly "EXPONENT_SIGNIFICAND_MASK": integer
static readonly "EXPONENT_BIAS": integer


public static "equals"(x: short, y: short): boolean
public static "min"(x: short, y: short): short
public static "max"(x: short, y: short): short
public static "floor"(h: short): short
public static "ceil"(h: short): short
public static "rint"(h: short): short
public static "compare"(x: short, y: short): integer
public static "toHexString"(h: short): string
public static "isNaN"(h: short): boolean
public static "isInfinite"(h: short): boolean
public static "isNormalized"(h: short): boolean
public static "toFloat"(h: short): float
public static "greater"(x: short, y: short): boolean
public static "trunc"(h: short): short
public static "less"(x: short, y: short): boolean
public static "greaterEquals"(x: short, y: short): boolean
public static "toHalf"(f: float): short
public static "lessEquals"(x: short, y: short): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FP16$Type = ($FP16);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FP16_ = $FP16$Type;
}}
declare module "packages/icyllis/modernui/util/$SparseArray" {
import {$Cloneable, $Cloneable$Type} from "packages/java/lang/$Cloneable"

export class $SparseArray<E> implements $Cloneable {

constructor()
constructor(initialCapacity: integer)

public "remove"(key: integer, value: any): boolean
public "remove"(key: integer): E
public "get"(key: integer): E
public "get"(key: integer, defaultValue: E): E
public "put"(key: integer, value: E): E
public "equals"(o: any): boolean
public "toString"(): string
public "append"(key: integer, value: E): void
public "hashCode"(): integer
public "clear"(): void
public "isEmpty"(): boolean
public "replace"(key: integer, value: E): E
public "replace"(key: integer, oldValue: E, newValue: E): boolean
public "size"(): integer
public "putAll"(other: $SparseArray$Type<(any)>): void
public "putIfAbsent"(key: integer, value: E): E
public "delete"(key: integer): void
public "containsKey"(key: integer): boolean
public "containsValue"(value: E): boolean
public "removeAt"(index: integer): E
public "removeAtRange"(index: integer, size: integer): void
public "deleteAt"(index: integer): void
public "indexOfValueByValue"(value: E): integer
public "indexOfKey"(key: integer): integer
public "keyAt"(index: integer): integer
public "valueAt"(index: integer): E
public "setValueAt"(index: integer, value: E): void
public "indexOfValue"(value: E): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SparseArray$Type<E> = ($SparseArray<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SparseArray_<E> = $SparseArray$Type<(E)>;
}}
declare module "packages/icyllis/modernui/text/$SpannableStringInternal" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$IntStream, $IntStream$Type} from "packages/java/util/stream/$IntStream"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GetChars, $GetChars$Type} from "packages/icyllis/modernui/text/$GetChars"

export class $SpannableStringInternal implements $Spanned, $GetChars {


public "equals"(o: any): boolean
public "length"(): integer
public "toString"(): string
public "hashCode"(): integer
public "getChars"(srcBegin: integer, srcEnd: integer, dst: (character)[], dstBegin: integer): void
public "charAt"(index: integer): character
public "isEmpty"(): boolean
public "codePoints"(): $IntStream
public "chars"(): $IntStream
public "setSpan"(span: any, start: integer, end: integer, flags: integer): void
public "removeSpan"(span: any, flags: integer): void
public "removeSpan"(span: any): void
public "nextSpanTransition"(start: integer, limit: integer, type: $Class$Type<(any)>): integer
public "getSpanStart"(span: any): integer
public "getSpanFlags"(span: any): integer
public "getSpans"<T>(start: integer, end: integer, type: $Class$Type<(any)>, dest: $List$Type<(T)>): $List<(T)>
public "getSpanEnd"(span: any): integer
public "getSpans"<T>(start: integer, end: integer, type: $Class$Type<(any)>): $List<(T)>
public static "compare"(arg0: charseq, arg1: charseq): integer
public "subSequence"(arg0: integer, arg1: integer): charseq
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpannableStringInternal$Type = ($SpannableStringInternal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpannableStringInternal_ = $SpannableStringInternal$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$MixinConfigPlugin" {
import {$IMixinInfo, $IMixinInfo$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinInfo"
import {$ClassNode, $ClassNode$Type} from "packages/org/objectweb/asm/tree/$ClassNode"
import {$IMixinConfigPlugin, $IMixinConfigPlugin$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinConfigPlugin"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"

export class $MixinConfigPlugin implements $IMixinConfigPlugin {

constructor()

public "onLoad"(mixinPackage: string): void
public "postApply"(targetClassName: string, targetClass: $ClassNode$Type, mixinClassName: string, mixinInfo: $IMixinInfo$Type): void
public "getMixins"(): $List<(string)>
public "getRefMapperConfig"(): string
public "shouldApplyMixin"(targetClassName: string, mixinClassName: string): boolean
public "preApply"(targetClassName: string, targetClass: $ClassNode$Type, mixinClassName: string, mixinInfo: $IMixinInfo$Type): void
public "acceptTargets"(myTargets: $Set$Type<(string)>, otherTargets: $Set$Type<(string)>): void
get "mixins"(): $List<(string)>
get "refMapperConfig"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MixinConfigPlugin$Type = ($MixinConfigPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MixinConfigPlugin_ = $MixinConfigPlugin$Type;
}}
declare module "packages/icyllis/modernui/widget/$GridLayout$Spec" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GridLayout$Spec {


public "equals"(that: any): boolean
public "hashCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GridLayout$Spec$Type = ($GridLayout$Spec);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GridLayout$Spec_ = $GridLayout$Spec$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$ListMenuItemView" {
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$MenuItemImpl, $MenuItemImpl$Type} from "packages/icyllis/modernui/view/menu/$MenuItemImpl"
import {$MenuView$ItemView, $MenuView$ItemView$Type} from "packages/icyllis/modernui/view/menu/$MenuView$ItemView"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$AbsListView$SelectionBoundsAdjuster, $AbsListView$SelectionBoundsAdjuster$Type} from "packages/icyllis/modernui/widget/$AbsListView$SelectionBoundsAdjuster"
import {$LinearLayout, $LinearLayout$Type} from "packages/icyllis/modernui/widget/$LinearLayout"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $ListMenuItemView extends $LinearLayout implements $MenuView$ItemView, $AbsListView$SelectionBoundsAdjuster {
static readonly "HORIZONTAL": integer
static readonly "VERTICAL": integer
static readonly "SHOW_DIVIDER_NONE": integer
static readonly "SHOW_DIVIDER_BEGINNING": integer
static readonly "SHOW_DIVIDER_MIDDLE": integer
static readonly "SHOW_DIVIDER_END": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setChecked"(checked: boolean): void
public "initialize"(itemData: $MenuItemImpl$Type, menuType: integer): void
public "setTitle"(title: charseq): void
public "adjustListItemSelectionBounds"(rect: $Rect$Type): void
public "getItemData"(): $MenuItemImpl
public "showsIcon"(): boolean
public "setIcon"(icon: $Drawable$Type): void
public "setShortcut"(showShortcut: boolean, shortcutKey: character): void
public "setForceShowIcon"(forceShow: boolean): void
public "prefersCondensedTitle"(): boolean
public "setGroupDividerEnabled"(groupDividerEnabled: boolean): void
public "setCheckable"(checkable: boolean): void
public "setEnabled"(arg0: boolean): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
set "checked"(value: boolean)
set "title"(value: charseq)
get "itemData"(): $MenuItemImpl
set "icon"(value: $Drawable$Type)
set "forceShowIcon"(value: boolean)
set "groupDividerEnabled"(value: boolean)
set "checkable"(value: boolean)
set "enabled"(value: boolean)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListMenuItemView$Type = ($ListMenuItemView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListMenuItemView_ = $ListMenuItemView$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram$Stroke" {
import {$RoundRectProgram, $RoundRectProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram"

export class $RoundRectProgram$Stroke extends $RoundRectProgram {


public "setRadius"(radius: float, feather: float, thickness: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RoundRectProgram$Stroke$Type = ($RoundRectProgram$Stroke);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RoundRectProgram$Stroke_ = $RoundRectProgram$Stroke$Type;
}}
declare module "packages/icyllis/modernui/core/$Looper" {
import {$Looper$Observer, $Looper$Observer$Type} from "packages/icyllis/modernui/core/$Looper$Observer"
import {$Thread, $Thread$Type} from "packages/java/lang/$Thread"
import {$MessageQueue, $MessageQueue$Type} from "packages/icyllis/modernui/core/$MessageQueue"

export class $Looper {


public "toString"(): string
public "getQueue"(): $MessageQueue
public static "prepare"(): $Looper
public static "loop"(): void
public "quit"(): void
public "isCurrentThread"(): boolean
public static "myLooper"(): $Looper
public static "prepareMainLooper"(): void
public static "getMainLooper"(): $Looper
public "quitSafely"(): void
public "getThread"(): $Thread
public static "setObserver"(observer: $Looper$Observer$Type): void
public static "myQueue"(): $MessageQueue
public "setSlowLogThresholdMs"(slowDispatchThresholdMs: long, slowDeliveryThresholdMs: long): void
get "queue"(): $MessageQueue
get "currentThread"(): boolean
get "mainLooper"(): $Looper
get "thread"(): $Thread
set "observer"(value: $Looper$Observer$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Looper$Type = ($Looper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Looper_ = $Looper$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentManager$OnBackStackChangedListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $FragmentManager$OnBackStackChangedListener {

 "onBackStackChanged"(): void

(): void
}

export namespace $FragmentManager$OnBackStackChangedListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentManager$OnBackStackChangedListener$Type = ($FragmentManager$OnBackStackChangedListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentManager$OnBackStackChangedListener_ = $FragmentManager$OnBackStackChangedListener$Type;
}}
declare module "packages/icyllis/modernui/view/$AttachInfo" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $AttachInfo {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttachInfo$Type = ($AttachInfo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttachInfo_ = $AttachInfo$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewTreeObserver$OnPreDrawListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ViewTreeObserver$OnPreDrawListener {

 "onPreDraw"(): boolean

(): boolean
}

export namespace $ViewTreeObserver$OnPreDrawListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewTreeObserver$OnPreDrawListener$Type = ($ViewTreeObserver$OnPreDrawListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewTreeObserver$OnPreDrawListener_ = $ViewTreeObserver$OnPreDrawListener$Type;
}}
declare module "packages/icyllis/modernui/mc/$MusicFragment" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $MusicFragment extends $Fragment {

constructor()

public "onAttach"(context: $Context$Type): void
public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
public "onDetach"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MusicFragment$Type = ($MusicFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MusicFragment_ = $MusicFragment$Type;
}}
declare module "packages/icyllis/modernui/app/$Activity" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ToastManager, $ToastManager$Type} from "packages/icyllis/modernui/widget/$ToastManager"
import {$WindowManager, $WindowManager$Type} from "packages/icyllis/modernui/view/$WindowManager"

export class $Activity extends $Context {

constructor()

public "getWindowManager"(): $WindowManager
public "getToastManager"(): $ToastManager
get "windowManager"(): $WindowManager
get "toastManager"(): $ToastManager
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Activity$Type = ($Activity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Activity_ = $Activity$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$UIManagerForge" {
import {$TickEvent$RenderTickEvent, $TickEvent$RenderTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$RenderTickEvent"
import {$Lifecycle, $Lifecycle$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle"
import {$UIManager, $UIManager$Type} from "packages/icyllis/modernui/mc/$UIManager"
import {$InputEvent$Key, $InputEvent$Key$Type} from "packages/net/minecraftforge/client/event/$InputEvent$Key"
import {$RenderGuiOverlayEvent$Pre, $RenderGuiOverlayEvent$Pre$Type} from "packages/net/minecraftforge/client/event/$RenderGuiOverlayEvent$Pre"
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"
import {$RenderTooltipEvent$Pre, $RenderTooltipEvent$Pre$Type} from "packages/net/minecraftforge/client/event/$RenderTooltipEvent$Pre"
import {$InputEvent$MouseButton$Post, $InputEvent$MouseButton$Post$Type} from "packages/net/minecraftforge/client/event/$InputEvent$MouseButton$Post"
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"
import {$ScreenEvent$Opening, $ScreenEvent$Opening$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Opening"
import {$ViewportEvent$ComputeFov, $ViewportEvent$ComputeFov$Type} from "packages/net/minecraftforge/client/event/$ViewportEvent$ComputeFov"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"

export class $UIManagerForge extends $UIManager implements $LifecycleOwner {
static readonly "OPEN_CENTER_KEY": $KeyMapping
static readonly "ZOOM_KEY": $KeyMapping
static readonly "BY_PATH": $Field
static readonly "TEXTURES_BY_NAME": $Field
static readonly "TEXTURE_ID": $Field
static "sDingEnabled": boolean
static "sZoomEnabled": boolean


public "onRenderGameOverlayLayer"(event: $RenderGuiOverlayEvent$Pre$Type): void
public "onScreenOpen"(event: $ScreenEvent$Opening$Type): void
public "onRenderTick"(event: $TickEvent$RenderTickEvent$Type): void
public "dump"(pw: $PrintWriter$Type, fragments: boolean): void
public "onClientTick"(event: $TickEvent$ClientTickEvent$Type): void
public "onPostMouseInput"(event: $InputEvent$MouseButton$Post$Type): void
public "onPostKeyInput"(event: $InputEvent$Key$Type): void
public "onRenderTooltipL"(event: $RenderTooltipEvent$Pre$Type): void
public "onChangeFov"(event: $ViewportEvent$ComputeFov$Type): void
public "onRenderTooltipH"(event: $RenderTooltipEvent$Pre$Type): void
public "getLifecycle"(): $Lifecycle
get "lifecycle"(): $Lifecycle
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UIManagerForge$Type = ($UIManagerForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UIManagerForge_ = $UIManagerForge$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnAttachStateChangeListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $View$OnAttachStateChangeListener {

 "onViewDetachedFromWindow"(arg0: $View$Type): void
 "onViewAttachedToWindow"(arg0: $View$Type): void
}

export namespace $View$OnAttachStateChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnAttachStateChangeListener$Type = ($View$OnAttachStateChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnAttachStateChangeListener_ = $View$OnAttachStateChangeListener$Type;
}}
declare module "packages/icyllis/modernui/annotation/$RenderThread" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $RenderThread extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $RenderThread {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderThread$Type = ($RenderThread);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderThread_ = $RenderThread$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$Lifecycle" {
import {$LifecycleObserver, $LifecycleObserver$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleObserver"
import {$Lifecycle$State, $Lifecycle$State$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle$State"

export class $Lifecycle {

constructor()

public "removeObserver"(arg0: $LifecycleObserver$Type): void
public "addObserver"(arg0: $LifecycleObserver$Type): void
public "getCurrentState"(): $Lifecycle$State
get "currentState"(): $Lifecycle$State
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Lifecycle$Type = ($Lifecycle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Lifecycle_ = $Lifecycle$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$EventHandler" {
import {$PlayerInteractEvent$RightClickItem, $PlayerInteractEvent$RightClickItem$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickItem"

export class $EventHandler {


public static "onRightClickItem"(event: $PlayerInteractEvent$RightClickItem$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventHandler$Type = ($EventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventHandler_ = $EventHandler$Type;
}}
declare module "packages/icyllis/modernui/transition/$TransitionListener" {
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"

export interface $TransitionListener {

 "onTransitionPause"(transition: $Transition$Type): void
 "onTransitionResume"(transition: $Transition$Type): void
 "onTransitionStart"(transition: $Transition$Type): void
 "onTransitionEnd"(transition: $Transition$Type): void
 "onTransitionCancel"(transition: $Transition$Type): void
}

export namespace $TransitionListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TransitionListener$Type = ($TransitionListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TransitionListener_ = $TransitionListener$Type;
}}
declare module "packages/icyllis/modernui/mc/$BlurHandler" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $BlurHandler extends $Enum<($BlurHandler)> {
static readonly "INSTANCE": $BlurHandler
static "sBlurEffect": boolean
static "sBlurWithBackground": boolean
static "sBlurRadius": integer
static "sBackgroundDuration": integer
static "sBackgroundColor": (integer)[]
static "sFramerateInactive": integer
static "sFramerateMinimized": integer
static "sMasterVolumeInactive": float
static "sMasterVolumeMinimized": float


public static "values"(): ($BlurHandler)[]
public static "valueOf"(name: string): $BlurHandler
public "forceBlur"(): void
public "onRenderTick"(elapsedTimeMillis: long): void
public "blur"(nextScreen: $Screen$Type): void
public "drawScreenBackground"(gr: $GuiGraphics$Type, x1: integer, y1: integer, x2: integer, y2: integer): void
public "onClientTick"(): void
public "loadBlacklist"(names: $List$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlurHandler$Type = (("instance")) | ($BlurHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlurHandler_ = $BlurHandler$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$TextLayoutProcessor" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$FormattedText, $FormattedText$Type} from "packages/net/minecraft/network/chat/$FormattedText"
import {$TextLayout, $TextLayout$Type} from "packages/icyllis/modernui/mc/text/$TextLayout"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$TextLayoutEngine, $TextLayoutEngine$Type} from "packages/icyllis/modernui/mc/text/$TextLayoutEngine"

export class $TextLayoutProcessor {
static readonly "DEBUG": boolean
static readonly "DEFAULT_BASE_FONT_SIZE": integer
static "sBaseFontSize": float
static "sLbStyle": integer
static "sLbWordStyle": integer

constructor(engine: $TextLayoutEngine$Type)

public "createTextLayout"(text: $FormattedText$Type, style: $Style$Type, resLevel: integer, computeFlags: integer): $TextLayout
public static "computeFontSize"(resLevel: float): integer
public "createSequenceLayout"(sequence: $FormattedCharSequence$Type, resLevel: integer, computeFlags: integer): $TextLayout
public "createVanillaLayout"(text: string, style: $Style$Type, resLevel: integer, computeFlags: integer): $TextLayout
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextLayoutProcessor$Type = ($TextLayoutProcessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextLayoutProcessor_ = $TextLayoutProcessor$Type;
}}
declare module "packages/icyllis/modernui/fragment/$SpecialEffectsControllerFactory" {
import {$SpecialEffectsController, $SpecialEffectsController$Type} from "packages/icyllis/modernui/fragment/$SpecialEffectsController"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export interface $SpecialEffectsControllerFactory {

 "createController"(arg0: $ViewGroup$Type): $SpecialEffectsController

(arg0: $ViewGroup$Type): $SpecialEffectsController
}

export namespace $SpecialEffectsControllerFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialEffectsControllerFactory$Type = ($SpecialEffectsControllerFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialEffectsControllerFactory_ = $SpecialEffectsControllerFactory$Type;
}}
declare module "packages/icyllis/modernui/markdown/$MarkdownPlugin" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$MarkdownTheme$Builder, $MarkdownTheme$Builder$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme$Builder"
import {$MarkdownPlugin$Registry, $MarkdownPlugin$Registry$Type} from "packages/icyllis/modernui/markdown/$MarkdownPlugin$Registry"
import {$MarkdownConfig$Builder, $MarkdownConfig$Builder$Type} from "packages/icyllis/modernui/markdown/$MarkdownConfig$Builder"
import {$Node, $Node$Type} from "packages/com/vladsch/flexmark/util/ast/$Node"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$Parser$Builder, $Parser$Builder$Type} from "packages/com/vladsch/flexmark/parser/$Parser$Builder"
import {$MarkdownVisitor, $MarkdownVisitor$Type} from "packages/icyllis/modernui/markdown/$MarkdownVisitor"

export interface $MarkdownPlugin {

 "afterSetText"(textView: $TextView$Type): void
 "configureConfig"(builder: $MarkdownConfig$Builder$Type): void
 "processMarkdown"(markdown: string): string
 "configureParser"(builder: $Parser$Builder$Type): void
 "beforeSetText"(textView: $TextView$Type, markdown: $Spanned$Type): void
 "configureTheme"(builder: $MarkdownTheme$Builder$Type): void
 "configure"(registry: $MarkdownPlugin$Registry$Type): void
 "beforeRender"(document: $Node$Type): void
 "afterRender"(document: $Node$Type, visitor: $MarkdownVisitor$Type): void
}

export namespace $MarkdownPlugin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownPlugin$Type = ($MarkdownPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownPlugin_ = $MarkdownPlugin$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$ArcProgram$Fill" {
import {$ArcProgram, $ArcProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$ArcProgram"

export class $ArcProgram$Fill extends $ArcProgram {


public "setRadius"(radius: float, feather: float): void
public "setAngle"(middle: float, flare: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcProgram$Fill$Type = ($ArcProgram$Fill);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcProgram$Fill_ = $ArcProgram$Fill$Type;
}}
declare module "packages/icyllis/modernui/text/$TextShaper$GlyphsConsumer" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$ShapedText, $ShapedText$Type} from "packages/icyllis/modernui/graphics/text/$ShapedText"

export interface $TextShaper$GlyphsConsumer {

 "accept"(arg0: integer, arg1: integer, arg2: $ShapedText$Type, arg3: $TextPaint$Type, arg4: float, arg5: float): void

(arg0: integer, arg1: integer, arg2: $ShapedText$Type, arg3: $TextPaint$Type, arg4: float, arg5: float): void
}

export namespace $TextShaper$GlyphsConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextShaper$GlyphsConsumer$Type = ($TextShaper$GlyphsConsumer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextShaper$GlyphsConsumer_ = $TextShaper$GlyphsConsumer$Type;
}}
declare module "packages/icyllis/modernui/widget/$LinearPagerIndicator" {
import {$ViewPager, $ViewPager$Type} from "packages/icyllis/modernui/widget/$ViewPager"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $LinearPagerIndicator extends $View {
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setLineWidth"(lineWidth: float): void
public "setPager"(pager: $ViewPager$Type): void
public "setLineColor"(lineColor: integer): void
public "getLineColor"(): integer
public "getLineWidth"(): float
set "lineWidth"(value: float)
set "pager"(value: $ViewPager$Type)
set "lineColor"(value: integer)
get "lineColor"(): integer
get "lineWidth"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LinearPagerIndicator$Type = ($LinearPagerIndicator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LinearPagerIndicator_ = $LinearPagerIndicator$Type;
}}
declare module "packages/icyllis/modernui/widget/$ViewPager$OnPageChangeListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ViewPager$OnPageChangeListener {

 "onPageScrolled"(position: integer, positionOffset: float, positionOffsetPixels: integer): void
 "onPageSelected"(position: integer): void
 "onPageScrollStateChanged"(state: integer): void
}

export namespace $ViewPager$OnPageChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewPager$OnPageChangeListener$Type = ($ViewPager$OnPageChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewPager$OnPageChangeListener_ = $ViewPager$OnPageChangeListener$Type;
}}
declare module "packages/icyllis/modernui/transition/$TransitionValues" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TransitionValues {
readonly "view": $View
readonly "values": $Map<(string), (any)>

constructor(view: $View$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TransitionValues$Type = ($TransitionValues);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TransitionValues_ = $TransitionValues$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Bitmap" {
import {$ColorSpace, $ColorSpace$Type} from "packages/icyllis/arc3d/core/$ColorSpace"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Bitmap$Format, $Bitmap$Format$Type} from "packages/icyllis/modernui/graphics/$Bitmap$Format"
import {$OutputStream, $OutputStream$Type} from "packages/java/io/$OutputStream"
import {$Bitmap$SaveFormat, $Bitmap$SaveFormat$Type} from "packages/icyllis/modernui/graphics/$Bitmap$SaveFormat"
import {$PixelRef, $PixelRef$Type} from "packages/icyllis/arc3d/core/$PixelRef"
import {$DateFormat, $DateFormat$Type} from "packages/com/ibm/icu/text/$DateFormat"
import {$PixelMap, $PixelMap$Type} from "packages/icyllis/arc3d/core/$PixelMap"
import {$WritableByteChannel, $WritableByteChannel$Type} from "packages/java/nio/channels/$WritableByteChannel"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$File, $File$Type} from "packages/java/io/$File"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$ImageInfo, $ImageInfo$Type} from "packages/icyllis/arc3d/core/$ImageInfo"

export class $Bitmap implements $AutoCloseable {
static readonly "MARKER": $Marker
static readonly "DATE_FORMAT": $DateFormat


public "toString"(): string
public "close"(): void
public "getSize"(): long
public "getAddress"(): long
public "getFormat"(): $Bitmap$Format
public "getInfo"(): $ImageInfo
public "isClosed"(): boolean
public static "saveDialogGet"(format: $Bitmap$SaveFormat$Type, title: charseq, name: string): string
public "isImmutable"(): boolean
public "recycle"(): void
public "getWidth"(): integer
public "getHeight"(): integer
public "hasAlpha"(): boolean
public "getColorType"(): integer
public "getColorSpace"(): $ColorSpace
public "setImmutable"(): void
public "getChannels"(): integer
public static "createBitmap"(width: integer, height: integer, format: $Bitmap$Format$Type): $Bitmap
public "getRowStride"(): integer
public static "flipVertically"(bitmap: $Bitmap$Type): void
public "saveDialog"(format: $Bitmap$SaveFormat$Type, quality: integer, name: string): boolean
public static "openDialogGets"(format: $Bitmap$SaveFormat$Type, title: charseq, defaultPathAndFile: charseq): (string)[]
public static "openDialogGet"(format: $Bitmap$SaveFormat$Type, title: charseq, defaultPathAndFile: charseq): string
public "getAlphaType"(): integer
public "setColorInfo"(newColorType: integer, newAlphaType: integer): void
public "getPixelMap"(): $PixelMap
public "saveToPath"(format: $Bitmap$SaveFormat$Type, quality: integer, path: $Path$Type): void
public "saveToFile"(format: $Bitmap$SaveFormat$Type, quality: integer, file: $File$Type): void
public "getPixelRef"(): $PixelRef
public "saveToChannel"(format: $Bitmap$SaveFormat$Type, quality: integer, channel: $WritableByteChannel$Type): void
public "setColorSpace"(newColorSpace: $ColorSpace$Type): void
public "isPremultiplied"(): boolean
public "getPixelARGB"(x: integer, y: integer): integer
public "isRecycled"(): boolean
public "saveToStream"(format: $Bitmap$SaveFormat$Type, quality: integer, stream: $OutputStream$Type): void
get "size"(): long
get "address"(): long
get "format"(): $Bitmap$Format
get "info"(): $ImageInfo
get "closed"(): boolean
get "immutable"(): boolean
get "width"(): integer
get "height"(): integer
get "colorType"(): integer
get "colorSpace"(): $ColorSpace
get "channels"(): integer
get "rowStride"(): integer
get "alphaType"(): integer
get "pixelMap"(): $PixelMap
get "pixelRef"(): $PixelRef
set "colorSpace"(value: $ColorSpace$Type)
get "premultiplied"(): boolean
get "recycled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Bitmap$Type = ($Bitmap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Bitmap_ = $Bitmap$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$ProjectBuilderItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ProjectBuilderItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any


public "initializeClient"(consumer: $Consumer$Type<($IClientItemExtensions$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProjectBuilderItem$Type = ($ProjectBuilderItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProjectBuilderItem_ = $ProjectBuilderItem$Type;
}}
declare module "packages/icyllis/modernui/markdown/$Markdown$Builder" {
import {$Markdown, $Markdown$Type} from "packages/icyllis/modernui/markdown/$Markdown"
import {$MarkdownPlugin, $MarkdownPlugin$Type} from "packages/icyllis/modernui/markdown/$MarkdownPlugin"
import {$TextView$BufferType, $TextView$BufferType$Type} from "packages/icyllis/modernui/widget/$TextView$BufferType"
import {$TextSetter, $TextSetter$Type} from "packages/icyllis/modernui/markdown/$TextSetter"

export class $Markdown$Builder {


public "usePlugin"(plugin: $MarkdownPlugin$Type): $Markdown$Builder
public "setBufferType"(bufferType: $TextView$BufferType$Type): $Markdown$Builder
public "build"(): $Markdown
public "setTextSetter"(textSetter: $TextSetter$Type): $Markdown$Builder
set "bufferType"(value: $TextView$BufferType$Type)
set "textSetter"(value: $TextSetter$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Markdown$Builder$Type = ($Markdown$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Markdown$Builder_ = $Markdown$Builder$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$ImageDrawable" {
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Paint, $Paint$Type} from "packages/icyllis/modernui/graphics/$Paint"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Image, $Image$Type} from "packages/icyllis/modernui/graphics/$Image"
import {$Drawable$ConstantState, $Drawable$ConstantState$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$ConstantState"

export class $ImageDrawable extends $Drawable {
static readonly "MAX_LEVEL": integer

constructor(stream: $InputStream$Type)
constructor(namespace: string, path: string)
constructor(image: $Image$Type)

public "hasFocusStateSpecified"(): boolean
public "draw"(canvas: $Canvas$Type): void
public "isStateful"(): boolean
public "setTintList"(tint: $ColorStateList$Type): void
public "getConstantState"(): $Drawable$ConstantState
public "clearMutated"(): void
public "setAutoMirrored"(mirrored: boolean): void
public "isAutoMirrored"(): boolean
public "setGravity"(gravity: integer): void
public "setImage"(image: $Image$Type): void
public "setSrcRect"(left: integer, top: integer, right: integer, bottom: integer): void
public "setSrcRect"(srcRect: $Rect$Type): void
public "setMipmap"(mipmap: boolean): void
public "getGravity"(): integer
public "hasMipmap"(): boolean
public "getPaint"(): $Paint
public "getAlpha"(): integer
public "getImage"(): $Image
public "getIntrinsicHeight"(): integer
public "getIntrinsicWidth"(): integer
public "setAlpha"(alpha: integer): void
public "mutate"(): $Drawable
get "stateful"(): boolean
set "tintList"(value: $ColorStateList$Type)
get "constantState"(): $Drawable$ConstantState
set "autoMirrored"(value: boolean)
get "autoMirrored"(): boolean
set "gravity"(value: integer)
set "image"(value: $Image$Type)
set "srcRect"(value: $Rect$Type)
set "mipmap"(value: boolean)
get "gravity"(): integer
get "paint"(): $Paint
get "alpha"(): integer
get "image"(): $Image
get "intrinsicHeight"(): integer
get "intrinsicWidth"(): integer
set "alpha"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageDrawable$Type = ($ImageDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageDrawable_ = $ImageDrawable$Type;
}}
declare module "packages/icyllis/modernui/animation/$AnimationHandler$FrameCallback" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $AnimationHandler$FrameCallback {

 "doAnimationFrame"(arg0: long): boolean

(arg0: long): boolean
}

export namespace $AnimationHandler$FrameCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimationHandler$FrameCallback$Type = ($AnimationHandler$FrameCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimationHandler$FrameCallback_ = $AnimationHandler$FrameCallback$Type;
}}
declare module "packages/icyllis/modernui/fragment/$OnBackPressedDispatcher" {
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$OnBackPressedCallback, $OnBackPressedCallback$Type} from "packages/icyllis/modernui/fragment/$OnBackPressedCallback"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $OnBackPressedDispatcher {

constructor()
constructor(fallbackOnBackPressed: $Runnable$Type)

public "hasEnabledCallbacks"(): boolean
public "onBackPressed"(): void
public "addCallback"(onBackPressedCallback: $OnBackPressedCallback$Type): void
public "addCallback"(owner: $LifecycleOwner$Type, callback: $OnBackPressedCallback$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OnBackPressedDispatcher$Type = ($OnBackPressedDispatcher);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OnBackPressedDispatcher_ = $OnBackPressedDispatcher$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$EffectRenderType" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderType$CompositeRenderType, $RenderType$CompositeRenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType$CompositeRenderType"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$DrawBuffer, $DrawBuffer$Type} from "packages/com/jozufozu/flywheel/backend/instancing/$DrawBuffer"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$Font$DisplayMode, $Font$DisplayMode$Type} from "packages/net/minecraft/client/gui/$Font$DisplayMode"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"

export class $EffectRenderType extends $RenderType {
static readonly "BIG_BUFFER_SIZE": integer
static readonly "MEDIUM_BUFFER_SIZE": integer
static readonly "SMALL_BUFFER_SIZE": integer
static readonly "TRANSIENT_BUFFER_SIZE": integer
static readonly "LINES": $RenderType$CompositeRenderType
static readonly "LINE_STRIP": $RenderType$CompositeRenderType
 "sortOnUpload": boolean
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard


public static "getRenderType"(mode: $Font$DisplayMode$Type): $EffectRenderType
public static "getRenderType"(seeThrough: boolean): $EffectRenderType
public static "getDrawBuffer"(arg0: $RenderType$Type): $DrawBuffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EffectRenderType$Type = ($EffectRenderType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EffectRenderType_ = $EffectRenderType$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$MixinConnector" {
import {$IMixinConnector, $IMixinConnector$Type} from "packages/org/spongepowered/asm/mixin/connect/$IMixinConnector"

/**
 * 
 * @deprecated
 */
export class $MixinConnector implements $IMixinConnector {

constructor()

public "connect"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MixinConnector$Type = ($MixinConnector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MixinConnector_ = $MixinConnector$Type;
}}
declare module "packages/icyllis/modernui/transition/$AutoTransition" {
import {$TransitionSet, $TransitionSet$Type} from "packages/icyllis/modernui/transition/$TransitionSet"

export class $AutoTransition extends $TransitionSet {
static readonly "ORDERING_TOGETHER": integer
static readonly "ORDERING_SEQUENTIAL": integer
static readonly "MATCH_INSTANCE": integer
static readonly "MATCH_NAME": integer
static readonly "MATCH_ID": integer
static readonly "MATCH_ITEM_ID": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AutoTransition$Type = ($AutoTransition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AutoTransition_ = $AutoTransition$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$RectProgram" {
import {$RectProgram$Feathered, $RectProgram$Feathered$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$RectProgram$Feathered"
import {$GLProgram, $GLProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/$GLProgram"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

/**
 * 
 * @deprecated
 */
export class $RectProgram extends $GLProgram {
static readonly "VERT": $ResourceLocation
static readonly "VERT_TEX": $ResourceLocation


public static "fill"(): $RectProgram
public static "fillTex"(): $RectProgram
public static "feathered"(): $RectProgram$Feathered
public static "createPrograms"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RectProgram$Type = ($RectProgram);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RectProgram_ = $RectProgram$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$Animatable2$AnimationCallback" {
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"

export interface $Animatable2$AnimationCallback {

 "onAnimationEnd"(drawable: $Drawable$Type): void
 "onAnimationStart"(drawable: $Drawable$Type): void
}

export namespace $Animatable2$AnimationCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Animatable2$AnimationCallback$Type = ($Animatable2$AnimationCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Animatable2$AnimationCallback_ = $Animatable2$AnimationCallback$Type;
}}
declare module "packages/icyllis/modernui/widget/$ImageView$ScaleType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ImageView$ScaleType extends $Enum<($ImageView$ScaleType)> {
static readonly "MATRIX": $ImageView$ScaleType
static readonly "FIT_XY": $ImageView$ScaleType
static readonly "FIT_START": $ImageView$ScaleType
static readonly "FIT_CENTER": $ImageView$ScaleType
static readonly "FIT_END": $ImageView$ScaleType
static readonly "CENTER": $ImageView$ScaleType
static readonly "CENTER_CROP": $ImageView$ScaleType
static readonly "CENTER_INSIDE": $ImageView$ScaleType


public static "values"(): ($ImageView$ScaleType)[]
public static "valueOf"(name: string): $ImageView$ScaleType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageView$ScaleType$Type = (("center_inside") | ("fit_xy") | ("center") | ("center_crop") | ("fit_end") | ("matrix") | ("fit_center") | ("fit_start")) | ($ImageView$ScaleType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageView$ScaleType_ = $ImageView$ScaleType$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Config$Text$LineBreakWordStyle" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Config$Text$LineBreakWordStyle extends $Enum<($Config$Text$LineBreakWordStyle)> {
static readonly "AUTO": $Config$Text$LineBreakWordStyle
static readonly "PHRASE": $Config$Text$LineBreakWordStyle


public "toString"(): string
public static "values"(): ($Config$Text$LineBreakWordStyle)[]
public static "valueOf"(name: string): $Config$Text$LineBreakWordStyle
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Text$LineBreakWordStyle$Type = (("auto") | ("phrase")) | ($Config$Text$LineBreakWordStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config$Text$LineBreakWordStyle_ = $Config$Text$LineBreakWordStyle$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$ModernTextRenderer" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$FormattedText, $FormattedText$Type} from "packages/net/minecraft/network/chat/$FormattedText"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Font$DisplayMode, $Font$DisplayMode$Type} from "packages/net/minecraft/client/gui/$Font$DisplayMode"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$TextLayoutEngine, $TextLayoutEngine$Type} from "packages/icyllis/modernui/mc/text/$TextLayoutEngine"

export class $ModernTextRenderer {
static readonly "SHADOW_OFFSET": $Vector3f
static readonly "OUTLINE_OFFSET": $Vector3f
static "sAllowShadow": boolean
static "sShadowOffset": float
static "sOutlineOffset": float
static "sComputeDeviceFontSize": boolean
static "sAllowSDFTextIn2D": boolean

constructor(engine: $TextLayoutEngine$Type)

public "drawText"(text: $FormattedCharSequence$Type, x: float, y: float, color: integer, dropShadow: boolean, matrix: $Matrix4f$Type, source: $MultiBufferSource$Type, displayMode: $Font$DisplayMode$Type, colorBackground: integer, packedLight: integer): float
public "drawText"(text: string, x: float, y: float, color: integer, dropShadow: boolean, matrix: $Matrix4f$Type, source: $MultiBufferSource$Type, displayMode: $Font$DisplayMode$Type, colorBackground: integer, packedLight: integer): float
public "drawText"(text: $FormattedText$Type, x: float, y: float, color: integer, dropShadow: boolean, matrix: $Matrix4f$Type, source: $MultiBufferSource$Type, displayMode: $Font$DisplayMode$Type, colorBackground: integer, packedLight: integer): float
public "drawText8xOutline"(text: $FormattedCharSequence$Type, x: float, y: float, color: integer, outlineColor: integer, matrix: $Matrix4f$Type, source: $MultiBufferSource$Type, packedLight: integer): void
public "chooseMode"(ctm: $Matrix4f$Type, displayMode: $Font$DisplayMode$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModernTextRenderer$Type = ($ModernTextRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModernTextRenderer_ = $ModernTextRenderer$Type;
}}
declare module "packages/icyllis/modernui/view/$LayoutInflater" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LayoutInflater {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutInflater$Type = ($LayoutInflater);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutInflater_ = $LayoutInflater$Type;
}}
declare module "packages/icyllis/modernui/widget/$HeaderViewListAdapter" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$Filter, $Filter$Type} from "packages/icyllis/modernui/widget/$Filter"
import {$WrapperListAdapter, $WrapperListAdapter$Type} from "packages/icyllis/modernui/widget/$WrapperListAdapter"
import {$ListAdapter, $ListAdapter$Type} from "packages/icyllis/modernui/widget/$ListAdapter"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ListView$FixedViewInfo, $ListView$FixedViewInfo$Type} from "packages/icyllis/modernui/widget/$ListView$FixedViewInfo"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$Filterable, $Filterable$Type} from "packages/icyllis/modernui/widget/$Filterable"

export class $HeaderViewListAdapter implements $WrapperListAdapter, $Filterable {

constructor(headerViewInfos: $ArrayList$Type<($ListView$FixedViewInfo$Type)>, footerViewInfos: $ArrayList$Type<($ListView$FixedViewInfo$Type)>, adapter: $ListAdapter$Type)

public "isEmpty"(): boolean
public "getFilter"(): $Filter
public "getCount"(): integer
public "isEnabled"(position: integer): boolean
public "getItem"(position: integer): any
public "getItemId"(position: integer): long
public "getView"(position: integer, convertView: $View$Type, parent: $ViewGroup$Type): $View
public "registerDataSetObserver"(observer: $DataSetObserver$Type): void
public "unregisterDataSetObserver"(observer: $DataSetObserver$Type): void
public "getFootersCount"(): integer
public "getHeadersCount"(): integer
public "getWrappedAdapter"(): $ListAdapter
public "removeHeader"(v: $View$Type): boolean
public "hasStableIds"(): boolean
public "getItemViewType"(position: integer): integer
public "getViewTypeCount"(): integer
public "removeFooter"(v: $View$Type): boolean
public "areAllItemsEnabled"(): boolean
get "empty"(): boolean
get "filter"(): $Filter
get "count"(): integer
get "footersCount"(): integer
get "headersCount"(): integer
get "wrappedAdapter"(): $ListAdapter
get "viewTypeCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeaderViewListAdapter$Type = ($HeaderViewListAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeaderViewListAdapter_ = $HeaderViewListAdapter$Type;
}}
declare module "packages/icyllis/modernui/util/$MpmcArrayQueue" {
import {$Pools$Pool, $Pools$Pool$Type} from "packages/icyllis/modernui/util/$Pools$Pool"
import {$L2Padding, $L2Padding$Type} from "packages/icyllis/modernui/util/$L2Padding"

export class $MpmcArrayQueue<E> extends $L2Padding<(E)> implements $Pools$Pool<(E)> {

constructor(capacity: integer)

public "isEmpty"(): boolean
public "size"(): integer
public "release"(instance: E): boolean
public "acquire"(): E
public "isFull"(): boolean
get "empty"(): boolean
get "full"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MpmcArrayQueue$Type<E> = ($MpmcArrayQueue<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MpmcArrayQueue_<E> = $MpmcArrayQueue$Type<(E)>;
}}
declare module "packages/icyllis/modernui/graphics/$GLSurface" {
import {$GLTexture, $GLTexture$Type} from "packages/icyllis/arc3d/opengl/$GLTexture"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"

export class $GLSurface implements $AutoCloseable {
static readonly "NUM_RENDER_TARGETS": integer

constructor()

public "get"(): integer
public "close"(): void
public "bind"(): void
public "setReadBuffer"(buffer: integer): void
public "bindRead"(): void
public "getBackingWidth"(): integer
public "getAttachedTexture"(attachment: integer): $GLTexture
public "makeBuffers"(width: integer, height: integer, exact: boolean): void
public "clearStencilBuffer"(): void
public "setDrawBuffer"(buffer: integer): void
public "clearColorBuffer"(): void
public "bindDraw"(): void
public "getBackingHeight"(): integer
set "readBuffer"(value: integer)
get "backingWidth"(): integer
set "drawBuffer"(value: integer)
get "backingHeight"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLSurface$Type = ($GLSurface);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLSurface_ = $GLSurface$Type;
}}
declare module "packages/icyllis/modernui/widget/$FrameLayout" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $FrameLayout extends $ViewGroup {
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setForegroundGravity"(foregroundGravity: integer): void
public "setMeasureAllChildren"(measureAll: boolean): void
public "getMeasureAllChildren"(): boolean
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
set "foregroundGravity"(value: integer)
set "measureAllChildren"(value: boolean)
get "measureAllChildren"(): boolean
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrameLayout$Type = ($FrameLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrameLayout_ = $FrameLayout$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$StateListDrawable" {
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$DrawableContainer, $DrawableContainer$Type} from "packages/icyllis/modernui/graphics/drawable/$DrawableContainer"

export class $StateListDrawable extends $DrawableContainer {
static readonly "MAX_LEVEL": integer

constructor()

public "getStateCount"(): integer
public "getStateDrawable"(index: integer): $Drawable
public "hasFocusStateSpecified"(): boolean
public "isStateful"(): boolean
public "clearMutated"(): void
public "addState"(stateSet: (integer)[], drawable: $Drawable$Type): void
public "mutate"(): $Drawable
public "getStateSet"(index: integer): (integer)[]
public "findStateDrawableIndex"(stateSet: (integer)[]): integer
get "stateCount"(): integer
get "stateful"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StateListDrawable$Type = ($StateListDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StateListDrawable_ = $StateListDrawable$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Bitmap$SaveFormat" {
import {$STBIWriteCallbackI, $STBIWriteCallbackI$Type} from "packages/org/lwjgl/stb/$STBIWriteCallbackI"
import {$Bitmap$Format, $Bitmap$Format$Type} from "packages/icyllis/modernui/graphics/$Bitmap$Format"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MemoryStack, $MemoryStack$Type} from "packages/org/lwjgl/system/$MemoryStack"
import {$PointerBuffer, $PointerBuffer$Type} from "packages/org/lwjgl/$PointerBuffer"

export class $Bitmap$SaveFormat extends $Enum<($Bitmap$SaveFormat)> {
static readonly "PNG": $Bitmap$SaveFormat
static readonly "TGA": $Bitmap$SaveFormat
static readonly "BMP": $Bitmap$SaveFormat
static readonly "JPEG": $Bitmap$SaveFormat
static readonly "HDR": $Bitmap$SaveFormat
static readonly "RAW": $Bitmap$SaveFormat


public static "values"(): ($Bitmap$SaveFormat)[]
public static "valueOf"(name: string): $Bitmap$SaveFormat
public "write"(arg0: $STBIWriteCallbackI$Type, arg1: integer, arg2: integer, arg3: $Bitmap$Format$Type, arg4: long, arg5: integer): boolean
public static "getFileName"(format: $Bitmap$SaveFormat$Type, name: string): string
public "getDescription"(): string
public "getFilters"(stack: $MemoryStack$Type): $PointerBuffer
public static "getAllFilters"(stack: $MemoryStack$Type): $PointerBuffer
public static "getAllDescription"(): string
public static "getAllDescription"(header: string): string
get "description"(): string
get "allDescription"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Bitmap$SaveFormat$Type = (("bmp") | ("hdr") | ("png") | ("jpeg") | ("raw") | ("tga")) | ($Bitmap$SaveFormat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Bitmap$SaveFormat_ = $Bitmap$SaveFormat$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$LineBreakConfig" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LineBreakConfig {
static readonly "LINE_BREAK_STYLE_NONE": integer
static readonly "LINE_BREAK_STYLE_LOOSE": integer
static readonly "LINE_BREAK_STYLE_NORMAL": integer
static readonly "LINE_BREAK_STYLE_STRICT": integer
static readonly "LINE_BREAK_WORD_STYLE_NONE": integer
static readonly "LINE_BREAK_WORD_STYLE_PHRASE": integer
static readonly "LINE_BREAK_WORD_STYLE_NORMAL": integer
static readonly "LINE_BREAK_WORD_STYLE_BREAK_ALL": integer
static readonly "LINE_BREAK_WORD_STYLE_KEEP_ALL": integer
static readonly "NONE": $LineBreakConfig


public "equals"(o: any): boolean
public "hashCode"(): integer
public "getLineBreakStyle"(): integer
public static "getLineBreakConfig"(lineBreakStyle: integer, lineBreakWordStyle: integer): $LineBreakConfig
public "getLineBreakWordStyle"(): integer
get "lineBreakStyle"(): integer
get "lineBreakWordStyle"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LineBreakConfig$Type = ($LineBreakConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LineBreakConfig_ = $LineBreakConfig$Type;
}}
declare module "packages/icyllis/modernui/core/$VideoMode" {
import {$GLFWVidMode, $GLFWVidMode$Type} from "packages/org/lwjgl/glfw/$GLFWVidMode"
import {$GLFWVidMode$Buffer, $GLFWVidMode$Buffer$Type} from "packages/org/lwjgl/glfw/$GLFWVidMode$Buffer"

export class $VideoMode {

constructor(gLFWVidMode: $GLFWVidMode$Type)
constructor(buffer: $GLFWVidMode$Buffer$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getWidth"(): integer
public "getHeight"(): integer
public "getBlueBits"(): integer
public "getRefreshRate"(): integer
public "getGreenBits"(): integer
public "getRedBits"(): integer
get "width"(): integer
get "height"(): integer
get "blueBits"(): integer
get "refreshRate"(): integer
get "greenBits"(): integer
get "redBits"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VideoMode$Type = ($VideoMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VideoMode_ = $VideoMode$Type;
}}
declare module "packages/icyllis/modernui/text/$StaticLayout" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$Directions, $Directions$Type} from "packages/icyllis/modernui/text/$Directions"
import {$StaticLayout$Builder, $StaticLayout$Builder$Type} from "packages/icyllis/modernui/text/$StaticLayout$Builder"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$Layout$Alignment, $Layout$Alignment$Type} from "packages/icyllis/modernui/text/$Layout$Alignment"

export class $StaticLayout extends $Layout {
static readonly "MARKER": $Marker
static readonly "DIR_LEFT_TO_RIGHT": integer
static readonly "DIR_RIGHT_TO_LEFT": integer
static readonly "TAB_INCREMENT": float


public static "builder"(source: charseq, start: integer, end: integer, paint: $TextPaint$Type, width: integer): $StaticLayout$Builder
public "getHeight"(cap: boolean): integer
public "getLineDescent"(line: integer): integer
public "getLineTop"(line: integer): integer
public "getLineStart"(line: integer): integer
public "getLineCount"(): integer
public "getLineDirections"(line: integer): $Directions
public "getEllipsisCount"(line: integer): integer
public "getIndentAdjust"(line: integer, align: $Layout$Alignment$Type): integer
public "getLineContainsTab"(line: integer): boolean
public "getEllipsisStart"(line: integer): integer
public "getLineForVertical"(vertical: integer): integer
public "getEllipsizedWidth"(): integer
public "getTopPadding"(): integer
public "getBottomPadding"(): integer
public "getParagraphDirection"(line: integer): integer
get "lineCount"(): integer
get "ellipsizedWidth"(): integer
get "topPadding"(): integer
get "bottomPadding"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StaticLayout$Type = ($StaticLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StaticLayout_ = $StaticLayout$Type;
}}
declare module "packages/icyllis/modernui/view/$WindowGroup" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$WindowManager, $WindowManager$Type} from "packages/icyllis/modernui/view/$WindowManager"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$PointerIcon, $PointerIcon$Type} from "packages/icyllis/modernui/view/$PointerIcon"

export class $WindowGroup extends $ViewGroup implements $WindowManager {
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "onResolvePointerIcon"(event: $MotionEvent$Type): $PointerIcon
public "dispatchTouchEvent"(ev: $MotionEvent$Type): boolean
public "addView"(child: $View$Type, index: integer, params: $ViewGroup$LayoutParams$Type): void
public "clearFocus"(): void
public "requestChildFocus"(child: $View$Type, focused: $View$Type): void
public "clearChildFocus"(child: $View$Type): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WindowGroup$Type = ($WindowGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WindowGroup_ = $WindowGroup$Type;
}}
declare module "packages/icyllis/modernui/widget/$PopupWindow$OnDismissListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $PopupWindow$OnDismissListener {

 "onDismiss"(): void

(): void
}

export namespace $PopupWindow$OnDismissListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PopupWindow$OnDismissListener$Type = ($PopupWindow$OnDismissListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PopupWindow$OnDismissListener_ = $PopupWindow$OnDismissListener$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewTreeObserver$OnGlobalFocusChangeListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $ViewTreeObserver$OnGlobalFocusChangeListener {

 "onGlobalFocusChanged"(arg0: $View$Type, arg1: $View$Type): void

(arg0: $View$Type, arg1: $View$Type): void
}

export namespace $ViewTreeObserver$OnGlobalFocusChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewTreeObserver$OnGlobalFocusChangeListener$Type = ($ViewTreeObserver$OnGlobalFocusChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewTreeObserver$OnGlobalFocusChangeListener_ = $ViewTreeObserver$OnGlobalFocusChangeListener$Type;
}}
declare module "packages/icyllis/modernui/resources/$ResourceValues$Reference" {
import {$ResourceValues$Value, $ResourceValues$Value$Type} from "packages/icyllis/modernui/resources/$ResourceValues$Value"
import {$Resource$ResourceName, $Resource$ResourceName$Type} from "packages/icyllis/modernui/resources/$Resource$ResourceName"

export class $ResourceValues$Reference extends $ResourceValues$Value {
static readonly "RESOURCE": byte
static readonly "ATTRIBUTE": byte
 "name": $Resource$ResourceName
 "has_id": boolean
 "id": integer
 "has_type_flags": boolean
 "type_flags": integer
 "reference_type": byte
 "private_reference": boolean
 "is_dynamic": boolean
 "allow_raw": boolean

constructor()

public "toString"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceValues$Reference$Type = ($ResourceValues$Reference);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceValues$Reference_ = $ResourceValues$Reference$Type;
}}
declare module "packages/icyllis/modernui/animation/$ObjectAnimator" {
import {$Property, $Property$Type} from "packages/icyllis/modernui/util/$Property"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$PropertyValuesHolder, $PropertyValuesHolder$Type} from "packages/icyllis/modernui/animation/$PropertyValuesHolder"
import {$TypeEvaluator, $TypeEvaluator$Type} from "packages/icyllis/modernui/animation/$TypeEvaluator"
import {$TypeConverter, $TypeConverter$Type} from "packages/icyllis/modernui/animation/$TypeConverter"
import {$ValueAnimator, $ValueAnimator$Type} from "packages/icyllis/modernui/animation/$ValueAnimator"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"

export class $ObjectAnimator extends $ValueAnimator {
static "sDurationScale": float
static readonly "RESTART": integer
static readonly "REVERSE": integer
static readonly "INFINITE": integer
static readonly "MARKER": $Marker
static readonly "DURATION_INFINITE": long

constructor()

public "clone"(): $ObjectAnimator
public "start"(): void
public "getTarget"(): any
public "setTarget"(target: any): void
public static "ofInt"<T>(target: T, property: $IntProperty$Type<(T)>, ...values: (integer)[]): $ObjectAnimator
public static "ofPropertyValuesHolder"(target: any, ...values: ($PropertyValuesHolder$Type)[]): $ObjectAnimator
public "setDuration"(duration: long): $ObjectAnimator
public static "ofFloat"<T>(target: T, property: $FloatProperty$Type<(T)>, ...values: (float)[]): $ObjectAnimator
public "setupStartValues"(): void
public "setupEndValues"(): void
public static "ofArgb"<T>(target: T, property: $IntProperty$Type<(T)>, ...values: (integer)[]): $ObjectAnimator
public static "ofObject"<T, V, P>(target: T, property: $Property$Type<(T), (P)>, converter: $TypeConverter$Type<(V), (P)>, evaluator: $TypeEvaluator$Type<(V)>, ...values: (V)[]): $ObjectAnimator
public static "ofObject"<T, V>(target: T, property: $Property$Type<(T), (V)>, evaluator: $TypeEvaluator$Type<(V)>, ...values: (V)[]): $ObjectAnimator
public "setAutoCancel"(cancel: boolean): void
get "target"(): any
set "target"(value: any)
set "duration"(value: long)
set "autoCancel"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectAnimator$Type = ($ObjectAnimator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectAnimator_ = $ObjectAnimator$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$ReorderTextHandler" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$ReorderTextHandler$IConsumer, $ReorderTextHandler$IConsumer$Type} from "packages/icyllis/modernui/mc/text/$ReorderTextHandler$IConsumer"

/**
 * 
 * @deprecated
 */
export class $ReorderTextHandler {


public "handle"(sequence: $FormattedCharSequence$Type, consumer: $ReorderTextHandler$IConsumer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReorderTextHandler$Type = ($ReorderTextHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReorderTextHandler_ = $ReorderTextHandler$Type;
}}
declare module "packages/icyllis/modernui/animation/$Keyframe" {
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"

export class $Keyframe {

constructor()

public "getValue"(): any
public "setValue"(arg0: any): void
public "copy"(): $Keyframe
public "hasValue"(): boolean
public "setInterpolator"(interpolator: $TimeInterpolator$Type): void
public static "ofInt"(fraction: float): $Keyframe
public static "ofInt"(fraction: float, value: integer): $Keyframe
public static "ofFloat"(fraction: float): $Keyframe
public static "ofFloat"(fraction: float, value: float): $Keyframe
public "getInterpolator"(): $TimeInterpolator
public static "ofObject"(fraction: float, value: any): $Keyframe
public static "ofObject"(fraction: float): $Keyframe
public "getFraction"(): float
public "setFraction"(fraction: float): void
get "value"(): any
set "value"(value: any)
set "interpolator"(value: $TimeInterpolator$Type)
get "interpolator"(): $TimeInterpolator
get "fraction"(): float
set "fraction"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Keyframe$Type = ($Keyframe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Keyframe_ = $Keyframe$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentResultListener" {
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export interface $FragmentResultListener {

 "onFragmentResult"(arg0: string, arg1: $DataSet$Type): void

(arg0: string, arg1: $DataSet$Type): void
}

export namespace $FragmentResultListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentResultListener$Type = ($FragmentResultListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentResultListener_ = $FragmentResultListener$Type;
}}
declare module "packages/icyllis/modernui/resources/$ResourceUtils" {
import {$ResourceValues$Reference, $ResourceValues$Reference$Type} from "packages/icyllis/modernui/resources/$ResourceValues$Reference"
import {$XMLStreamReader, $XMLStreamReader$Type} from "packages/javax/xml/stream/$XMLStreamReader"

export class $ResourceUtils {

constructor()

public static "findAttribute"(reader: $XMLStreamReader$Type, name: string): string
public static "findNonEmptyAttribute"(reader: $XMLStreamReader$Type, name: string): string
public static "parseXmlAttributeName"(s: string): $ResourceValues$Reference
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceUtils$Type = ($ResourceUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceUtils_ = $ResourceUtils$Type;
}}
declare module "packages/icyllis/modernui/material/$MaterialRadioButton" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$RadioButton, $RadioButton$Type} from "packages/icyllis/modernui/widget/$RadioButton"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $MaterialRadioButton extends $RadioButton {
static readonly "CHECKED_STATE_SET": (integer)[]
static readonly "UNKNOWN_BORING": $BoringLayout$Metrics
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MaterialRadioButton$Type = ($MaterialRadioButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MaterialRadioButton_ = $MaterialRadioButton$Type;
}}
declare module "packages/icyllis/modernui/widget/$Adapter" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export interface $Adapter {

 "isEmpty"(): boolean
 "getCount"(): integer
 "getItem"(arg0: integer): any
 "getItemId"(arg0: integer): long
 "getView"(arg0: integer, arg1: $View$Type, arg2: $ViewGroup$Type): $View
 "registerDataSetObserver"(arg0: $DataSetObserver$Type): void
 "unregisterDataSetObserver"(arg0: $DataSetObserver$Type): void
 "hasStableIds"(): boolean
 "getItemViewType"(arg0: integer): integer
 "getViewTypeCount"(): integer
}

export namespace $Adapter {
const IGNORE_ITEM_VIEW_TYPE: integer
const NO_SELECTION: integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Adapter$Type = ($Adapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Adapter_ = $Adapter$Type;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$LayerDrawable" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Drawable$ConstantState, $Drawable$ConstantState$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$ConstantState"
import {$Drawable$Callback, $Drawable$Callback$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$Callback"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $LayerDrawable extends $Drawable implements $Drawable$Callback {
static readonly "MARKER": $Marker
static readonly "PADDING_MODE_NEST": integer
static readonly "PADDING_MODE_STACK": integer
static readonly "INSET_UNDEFINED": integer
static readonly "MAX_LEVEL": integer

constructor(...layers: ($Drawable$Type)[])

public "getDrawable"(index: integer): $Drawable
public "getId"(index: integer): integer
public "hasFocusStateSpecified"(): boolean
public "onLayoutDirectionChanged"(layoutDirection: integer): boolean
public "getChangingConfigurations"(): integer
public "addLayer"(dr: $Drawable$Type): integer
public "setVisible"(visible: boolean, restart: boolean): boolean
public "draw"(canvas: $Canvas$Type): void
public "setPaddingRelative"(start: integer, top: integer, end: integer, bottom: integer): void
public "setPadding"(left: integer, top: integer, right: integer, bottom: integer): void
public "setHotspot"(x: float, y: float): void
public "getPadding"(padding: $Rect$Type): boolean
public "jumpToCurrentState"(): void
public "isStateful"(): boolean
public "setTintList"(tint: $ColorStateList$Type): void
public "setTintBlendMode"(blendMode: $BlendMode$Type): void
public "setHotspotBounds"(left: integer, top: integer, right: integer, bottom: integer): void
public "getHotspotBounds"(outRect: $Rect$Type): void
public "getConstantState"(): $Drawable$ConstantState
public "clearMutated"(): void
public "canApplyTheme"(): boolean
public "setAutoMirrored"(mirrored: boolean): void
public "isAutoMirrored"(): boolean
public "setLayerWidth"(index: integer, w: integer): void
public "setLayerGravity"(index: integer, gravity: integer): void
public "setLayerHeight"(index: integer, h: integer): void
public "getLayerGravity"(index: integer): integer
public "setLayerSize"(index: integer, w: integer, h: integer): void
public "getNumberOfLayers"(): integer
public "findIndexByLayerId"(id: integer): integer
public "setDrawable"(index: integer, drawable: $Drawable$Type): void
public "getLayerWidth"(index: integer): integer
public "getLayerHeight"(index: integer): integer
public "setLayerInsetTop"(index: integer, t: integer): void
public "setLayerInsetStart"(index: integer, s: integer): void
public "getLayerInsetLeft"(index: integer): integer
public "setLayerInsetEnd"(index: integer, e: integer): void
public "setLayerInsetRight"(index: integer, r: integer): void
public "getPaddingMode"(): integer
public "getLayerInsetEnd"(index: integer): integer
public "setPaddingMode"(mode: integer): void
public "setLayerInset"(index: integer, l: integer, t: integer, r: integer, b: integer): void
public "getLeftPadding"(): integer
public "getLayerInsetTop"(index: integer): integer
public "getRightPadding"(): integer
public "getStartPadding"(): integer
public "setLayerInsetLeft"(index: integer, l: integer): void
public "getLayerInsetStart"(index: integer): integer
public "getLayerInsetRight"(index: integer): integer
public "getEndPadding"(): integer
public "getAlpha"(): integer
public "getIntrinsicHeight"(): integer
public "getIntrinsicWidth"(): integer
public "setAlpha"(alpha: integer): void
public "mutate"(): $Drawable
public "unscheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type): void
public "invalidateDrawable"(who: $Drawable$Type): void
public "scheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type, when: long): void
public "setId"(index: integer, id: integer): void
public "getTopPadding"(): integer
public "getBottomPadding"(): integer
public "setDrawableByLayerId"(id: integer, drawable: $Drawable$Type): boolean
public "setLayerInsetRelative"(index: integer, s: integer, t: integer, e: integer, b: integer): void
public "setLayerInsetBottom"(index: integer, b: integer): void
public "getLayerInsetBottom"(index: integer): integer
public "findDrawableByLayerId"(id: integer): $Drawable
get "changingConfigurations"(): integer
get "stateful"(): boolean
set "tintList"(value: $ColorStateList$Type)
set "tintBlendMode"(value: $BlendMode$Type)
get "constantState"(): $Drawable$ConstantState
set "autoMirrored"(value: boolean)
get "autoMirrored"(): boolean
get "numberOfLayers"(): integer
get "paddingMode"(): integer
set "paddingMode"(value: integer)
get "leftPadding"(): integer
get "rightPadding"(): integer
get "startPadding"(): integer
get "endPadding"(): integer
get "alpha"(): integer
get "intrinsicHeight"(): integer
get "intrinsicWidth"(): integer
set "alpha"(value: integer)
get "topPadding"(): integer
get "bottomPadding"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayerDrawable$Type = ($LayerDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayerDrawable_ = $LayerDrawable$Type;
}}
declare module "packages/icyllis/modernui/text/$BoringLayout" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Directions, $Directions$Type} from "packages/icyllis/modernui/text/$Directions"
import {$TextUtils$TruncateAt, $TextUtils$TruncateAt$Type} from "packages/icyllis/modernui/text/$TextUtils$TruncateAt"
import {$TextUtils$EllipsizeCallback, $TextUtils$EllipsizeCallback$Type} from "packages/icyllis/modernui/text/$TextUtils$EllipsizeCallback"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$Layout$Alignment, $Layout$Alignment$Type} from "packages/icyllis/modernui/text/$Layout$Alignment"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"

export class $BoringLayout extends $Layout implements $TextUtils$EllipsizeCallback {
static readonly "DIR_LEFT_TO_RIGHT": integer
static readonly "DIR_RIGHT_TO_LEFT": integer
static readonly "TAB_INCREMENT": float

constructor(source: charseq, paint: $TextPaint$Type, outerWidth: integer, align: $Layout$Alignment$Type, metrics: $BoringLayout$Metrics$Type, includePad: boolean)
constructor(source: charseq, paint: $TextPaint$Type, outerWidth: integer, align: $Layout$Alignment$Type, metrics: $BoringLayout$Metrics$Type, includePad: boolean, ellipsize: $TextUtils$TruncateAt$Type, ellipsizedWidth: integer)

public static "make"(source: charseq, paint: $TextPaint$Type, outerWidth: integer, align: $Layout$Alignment$Type, metrics: $BoringLayout$Metrics$Type, includePad: boolean): $BoringLayout
public static "make"(source: charseq, paint: $TextPaint$Type, outerWidth: integer, align: $Layout$Alignment$Type, metrics: $BoringLayout$Metrics$Type, includePad: boolean, ellipsize: $TextUtils$TruncateAt$Type, ellipsizedWidth: integer): $BoringLayout
public "drawText"(canvas: $Canvas$Type, firstLine: integer, lastLine: integer): void
public "getHeight"(): integer
public "getLineWidth"(line: integer): float
public "getLineDescent"(line: integer): integer
public "getLineTop"(line: integer): integer
public "getLineStart"(line: integer): integer
public "getLineCount"(): integer
public "getLineDirections"(line: integer): $Directions
public "getEllipsisCount"(line: integer): integer
public "getLineContainsTab"(line: integer): boolean
public "getEllipsisStart"(line: integer): integer
public "getLineMax"(line: integer): float
public "getEllipsizedWidth"(): integer
public "getTopPadding"(): integer
public "getBottomPadding"(): integer
public static "isBoring"(text: charseq, paint: $TextPaint$Type, textDir: $TextDirectionHeuristic$Type, metrics: $BoringLayout$Metrics$Type): $BoringLayout$Metrics
public static "isBoring"(text: charseq, paint: $TextPaint$Type): $BoringLayout$Metrics
public static "isBoring"(text: charseq, paint: $TextPaint$Type, metrics: $BoringLayout$Metrics$Type): $BoringLayout$Metrics
public "replaceOrMake"(source: charseq, paint: $TextPaint$Type, outerWidth: integer, align: $Layout$Alignment$Type, metrics: $BoringLayout$Metrics$Type, includePad: boolean, ellipsize: $TextUtils$TruncateAt$Type, ellipsizedWidth: integer): $BoringLayout
public "replaceOrMake"(source: charseq, paint: $TextPaint$Type, outerWidth: integer, align: $Layout$Alignment$Type, metrics: $BoringLayout$Metrics$Type, includePad: boolean): $BoringLayout
public "ellipsized"(start: integer, end: integer): void
public "getParagraphDirection"(line: integer): integer
get "height"(): integer
get "lineCount"(): integer
get "ellipsizedWidth"(): integer
get "topPadding"(): integer
get "bottomPadding"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BoringLayout$Type = ($BoringLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BoringLayout_ = $BoringLayout$Type;
}}
declare module "packages/icyllis/modernui/mc/$EditBoxEditAction" {
import {$UndoOwner, $UndoOwner$Type} from "packages/icyllis/modernui/core/$UndoOwner"
import {$UndoOperation, $UndoOperation$Type} from "packages/icyllis/modernui/core/$UndoOperation"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$EditBox, $EditBox$Type} from "packages/net/minecraft/client/gui/components/$EditBox"

export class $EditBoxEditAction extends $UndoOperation<($EditBox)> {

constructor(owner: $UndoOwner$Type, cursor: integer, oldText: string, start: integer, newText: string)

public "toString"(): string
public "commit"(): void
public "redo"(): void
public "undo"(): void
public "mergeInsertWith"(edit: $EditBoxEditAction$Type): boolean
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditBoxEditAction$Type = ($EditBoxEditAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditBoxEditAction_ = $EditBoxEditAction$Type;
}}
declare module "packages/icyllis/modernui/widget/$Filterable" {
import {$Filter, $Filter$Type} from "packages/icyllis/modernui/widget/$Filter"

export interface $Filterable {

 "getFilter"(): $Filter

(): $Filter
}

export namespace $Filterable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Filterable$Type = ($Filterable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Filterable_ = $Filterable$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Config$Client$WindowMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Config$Client$WindowMode extends $Enum<($Config$Client$WindowMode)> {
static readonly "NORMAL": $Config$Client$WindowMode
static readonly "FULLSCREEN": $Config$Client$WindowMode
static readonly "FULLSCREEN_BORDERLESS": $Config$Client$WindowMode
static readonly "MAXIMIZED": $Config$Client$WindowMode
static readonly "MAXIMIZED_BORDERLESS": $Config$Client$WindowMode
static readonly "WINDOWED": $Config$Client$WindowMode
static readonly "WINDOWED_BORDERLESS": $Config$Client$WindowMode


public "toString"(): string
public static "values"(): ($Config$Client$WindowMode)[]
public static "valueOf"(name: string): $Config$Client$WindowMode
public "apply"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Client$WindowMode$Type = (("normal") | ("fullscreen_borderless") | ("fullscreen") | ("maximized") | ("windowed_borderless") | ("maximized_borderless") | ("windowed")) | ($Config$Client$WindowMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config$Client$WindowMode_ = $Config$Client$WindowMode$Type;
}}
declare module "packages/icyllis/modernui/mc/$MuiModApi$OnScrollListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $MuiModApi$OnScrollListener {

 "onScroll"(arg0: double, arg1: double): void

(arg0: double, arg1: double): void
}

export namespace $MuiModApi$OnScrollListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiModApi$OnScrollListener$Type = ($MuiModApi$OnScrollListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiModApi$OnScrollListener_ = $MuiModApi$OnScrollListener$Type;
}}
declare module "packages/icyllis/modernui/text/$CharSequenceIterator" {
import {$CharacterIterator, $CharacterIterator$Type} from "packages/java/text/$CharacterIterator"

export class $CharSequenceIterator implements $CharacterIterator {

constructor(text: charseq, start: integer, end: integer)

public "clone"(): any
public "next"(): character
public "last"(): character
public "first"(): character
public "current"(): character
public "previous"(): character
public "getIndex"(): integer
public "getBeginIndex"(): integer
public "getEndIndex"(): integer
public "setIndex"(position: integer): character
get "index"(): integer
get "beginIndex"(): integer
get "endIndex"(): integer
set "index"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CharSequenceIterator$Type = ($CharSequenceIterator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CharSequenceIterator_ = $CharSequenceIterator$Type;
}}
declare module "packages/icyllis/modernui/mc/ui/$ThemeControl" {
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export class $ThemeControl {
static readonly "BACKGROUND_COLOR": integer
static readonly "THEME_COLOR": integer
static readonly "THEME_COLOR_2": integer

constructor()

public static "makeDivider"(view: $View$Type): $Drawable
public static "addBackground"(view: $View$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThemeControl$Type = ($ThemeControl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThemeControl_ = $ThemeControl$Type;
}}
declare module "packages/icyllis/modernui/transition/$Visibility" {
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $Visibility extends $Transition {
static readonly "MODE_IN": integer
static readonly "MODE_OUT": integer
static readonly "MATCH_INSTANCE": integer
static readonly "MATCH_NAME": integer
static readonly "MATCH_ID": integer
static readonly "MATCH_ITEM_ID": integer

constructor()

public "onAppear"(sceneRoot: $ViewGroup$Type, startValues: $TransitionValues$Type, startVisibility: integer, endValues: $TransitionValues$Type, endVisibility: integer): $Animator
public "onAppear"(sceneRoot: $ViewGroup$Type, view: $View$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "onDisappear"(sceneRoot: $ViewGroup$Type, view: $View$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "onDisappear"(sceneRoot: $ViewGroup$Type, startValues: $TransitionValues$Type, startVisibility: integer, endValues: $TransitionValues$Type, endVisibility: integer): $Animator
public "isVisible"(values: $TransitionValues$Type): boolean
public "setMode"(mode: integer): void
public "getMode"(): integer
public "getTransitionProperties"(): (string)[]
public "isTransitionRequired"(startValues: $TransitionValues$Type, newValues: $TransitionValues$Type): boolean
public "createAnimator"(sceneRoot: $ViewGroup$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "captureEndValues"(transitionValues: $TransitionValues$Type): void
public "captureStartValues"(transitionValues: $TransitionValues$Type): void
set "mode"(value: integer)
get "mode"(): integer
get "transitionProperties"(): (string)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Visibility$Type = ($Visibility);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Visibility_ = $Visibility$Type;
}}
declare module "packages/icyllis/modernui/mc/$StillAlive" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $StillAlive {


public "start"(): void
public static "getInstance"(): $StillAlive
public "stop"(): void
public static "tick"(): void
get "instance"(): $StillAlive
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StillAlive$Type = ($StillAlive);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StillAlive_ = $StillAlive$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$CascadingMenuPopup" {
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"
import {$MenuView, $MenuView$Type} from "packages/icyllis/modernui/view/menu/$MenuView"
import {$MenuItemImpl, $MenuItemImpl$Type} from "packages/icyllis/modernui/view/menu/$MenuItemImpl"
import {$MenuPresenter, $MenuPresenter$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$MenuPresenter$Callback, $MenuPresenter$Callback$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter$Callback"
import {$ListView, $ListView$Type} from "packages/icyllis/modernui/widget/$ListView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$SubMenuBuilder, $SubMenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$SubMenuBuilder"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$PopupWindow$OnDismissListener, $PopupWindow$OnDismissListener$Type} from "packages/icyllis/modernui/widget/$PopupWindow$OnDismissListener"
import {$View$OnKeyListener, $View$OnKeyListener$Type} from "packages/icyllis/modernui/view/$View$OnKeyListener"
import {$MenuPopup, $MenuPopup$Type} from "packages/icyllis/modernui/view/menu/$MenuPopup"

export class $CascadingMenuPopup extends $MenuPopup implements $MenuPresenter, $View$OnKeyListener, $PopupWindow$OnDismissListener {

constructor(context: $Context$Type, anchorView: $View$Type, overflowOnly: boolean)

public "getListView"(): $ListView
public "onDismiss"(): void
public "onKey"(v: $View$Type, keyCode: integer, event: $KeyEvent$Type): boolean
public "dismiss"(): void
public "setGravity"(dropDownGravity: integer): void
public "onSubMenuSelected"(subMenu: $SubMenuBuilder$Type): boolean
public "updateMenuView"(cleared: boolean): void
public "onCloseMenu"(menu: $MenuBuilder$Type, allMenusAreClosing: boolean): void
public "flagActionItems"(): boolean
public "isShowing"(): boolean
public "show"(): void
public "setCallback"(cb: $MenuPresenter$Callback$Type): void
public "addMenu"(menu: $MenuBuilder$Type): void
public "setForceShowIcon"(forceShow: boolean): void
public "setShowTitle"(showTitle: boolean): void
public "setHorizontalOffset"(x: integer): void
public "setAnchorView"(anchor: $View$Type): void
public "setVerticalOffset"(y: integer): void
public "setOnDismissListener"(listener: $PopupWindow$OnDismissListener$Type): void
public "getId"(): integer
public "initForMenu"(arg0: $Context$Type, arg1: $MenuBuilder$Type): void
public "getMenuView"(arg0: $ViewGroup$Type): $MenuView
public "expandItemActionView"(arg0: $MenuBuilder$Type, arg1: $MenuItemImpl$Type): boolean
public "collapseItemActionView"(arg0: $MenuBuilder$Type, arg1: $MenuItemImpl$Type): boolean
get "listView"(): $ListView
set "gravity"(value: integer)
get "showing"(): boolean
set "callback"(value: $MenuPresenter$Callback$Type)
set "forceShowIcon"(value: boolean)
set "showTitle"(value: boolean)
set "horizontalOffset"(value: integer)
set "anchorView"(value: $View$Type)
set "verticalOffset"(value: integer)
set "onDismissListener"(value: $PopupWindow$OnDismissListener$Type)
get "id"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CascadingMenuPopup$Type = ($CascadingMenuPopup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CascadingMenuPopup_ = $CascadingMenuPopup$Type;
}}
declare module "packages/icyllis/modernui/mc/$MuiModApi$OnScreenChangeListener" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export interface $MuiModApi$OnScreenChangeListener {

 "onScreenChange"(arg0: $Screen$Type, arg1: $Screen$Type): void

(arg0: $Screen$Type, arg1: $Screen$Type): void
}

export namespace $MuiModApi$OnScreenChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiModApi$OnScreenChangeListener$Type = ($MuiModApi$OnScreenChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiModApi$OnScreenChangeListener_ = $MuiModApi$OnScreenChangeListener$Type;
}}
declare module "packages/icyllis/modernui/text/style/$StyleSpan" {
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $StyleSpan extends $MetricAffectingSpan implements $ParcelableSpan {

constructor(style: integer)
constructor(src: $Parcel$Type)

public "updateMeasureState"(paint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
public "getStyle"(): integer
get "spanTypeId"(): integer
get "style"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StyleSpan$Type = ($StyleSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StyleSpan_ = $StyleSpan$Type;
}}
declare module "packages/icyllis/modernui/text/method/$DigitsInputFilter" {
import {$NumberInputFilter, $NumberInputFilter$Type} from "packages/icyllis/modernui/text/method/$NumberInputFilter"
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $DigitsInputFilter extends $NumberInputFilter {


public "filter"(source: charseq, start: integer, end: integer, dest: $Spanned$Type, dstart: integer, dend: integer): charseq
public static "getInstance"(locale: $Locale$Type): $DigitsInputFilter
public static "getInstance"(locale: $Locale$Type, sign: boolean, decimal: boolean): $DigitsInputFilter
public static "getInstance"(accepted: string): $DigitsInputFilter
public static "getInstance"(locale: $Locale$Type, listener: $DigitsInputFilter$Type): $DigitsInputFilter
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DigitsInputFilter$Type = ($DigitsInputFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DigitsInputFilter_ = $DigitsInputFilter$Type;
}}
declare module "packages/icyllis/modernui/text/$TextDirectionHeuristics" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"

export class $TextDirectionHeuristics {
static readonly "LTR": $TextDirectionHeuristic
static readonly "RTL": $TextDirectionHeuristic
static readonly "FIRSTSTRONG_LTR": $TextDirectionHeuristic
static readonly "FIRSTSTRONG_RTL": $TextDirectionHeuristic
static readonly "ANYRTL_LTR": $TextDirectionHeuristic
static readonly "LOCALE": $TextDirectionHeuristic


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextDirectionHeuristics$Type = ($TextDirectionHeuristics);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextDirectionHeuristics_ = $TextDirectionHeuristics$Type;
}}
declare module "packages/icyllis/modernui/widget/$BaseExpandableListAdapter" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$HeterogeneousExpandableList, $HeterogeneousExpandableList$Type} from "packages/icyllis/modernui/widget/$HeterogeneousExpandableList"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$ExpandableListAdapter, $ExpandableListAdapter$Type} from "packages/icyllis/modernui/widget/$ExpandableListAdapter"

export class $BaseExpandableListAdapter implements $ExpandableListAdapter, $HeterogeneousExpandableList {

constructor()

public "isEmpty"(): boolean
public "registerDataSetObserver"(observer: $DataSetObserver$Type): void
public "unregisterDataSetObserver"(observer: $DataSetObserver$Type): void
public "notifyDataSetInvalidated"(): void
public "notifyDataSetChanged"(): void
public "getCombinedGroupId"(groupId: long): long
public "getCombinedChildId"(groupId: long, childId: long): long
public "getGroupTypeCount"(): integer
public "getGroupType"(groupPosition: integer): integer
public "getChildTypeCount"(): integer
public "onGroupCollapsed"(groupPosition: integer): void
public "getChildType"(groupPosition: integer, childPosition: integer): integer
public "onGroupExpanded"(groupPosition: integer): void
public "areAllItemsEnabled"(): boolean
public "getChild"(arg0: integer, arg1: integer): any
public "getChildId"(arg0: integer, arg1: integer): long
public "getGroup"(arg0: integer): any
public "getGroupId"(arg0: integer): long
public "hasStableIds"(): boolean
public "getGroupCount"(): integer
public "isChildSelectable"(arg0: integer, arg1: integer): boolean
public "getChildView"(arg0: integer, arg1: integer, arg2: boolean, arg3: $View$Type, arg4: $ViewGroup$Type): $View
public "getGroupView"(arg0: integer, arg1: boolean, arg2: $View$Type, arg3: $ViewGroup$Type): $View
public "getChildrenCount"(arg0: integer): integer
get "empty"(): boolean
get "groupTypeCount"(): integer
get "childTypeCount"(): integer
get "groupCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseExpandableListAdapter$Type = ($BaseExpandableListAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseExpandableListAdapter_ = $BaseExpandableListAdapter$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$Lifecycle$State" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Lifecycle$State extends $Enum<($Lifecycle$State)> {
static readonly "DESTROYED": $Lifecycle$State
static readonly "INITIALIZED": $Lifecycle$State
static readonly "CREATED": $Lifecycle$State
static readonly "STARTED": $Lifecycle$State
static readonly "RESUMED": $Lifecycle$State


public static "values"(): ($Lifecycle$State)[]
public static "valueOf"(name: string): $Lifecycle$State
public "isAtLeast"(state: $Lifecycle$State$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Lifecycle$State$Type = (("destroyed") | ("created") | ("initialized") | ("started") | ("resumed")) | ($Lifecycle$State);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Lifecycle$State_ = $Lifecycle$State$Type;
}}
declare module "packages/icyllis/modernui/widget/$EditText" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$TextUtils$TruncateAt, $TextUtils$TruncateAt$Type} from "packages/icyllis/modernui/text/$TextUtils$TruncateAt"
import {$TextView$BufferType, $TextView$BufferType$Type} from "packages/icyllis/modernui/widget/$TextView$BufferType"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $EditText extends $TextView {
static readonly "UNKNOWN_BORING": $BoringLayout$Metrics
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setText"(text: charseq, type: $TextView$BufferType$Type): void
public "setEllipsize"(ellipsis: $TextUtils$TruncateAt$Type): void
public "setSelection"(index: integer): void
public "setSelection"(start: integer, stop: integer): void
public "selectAll"(): void
public "extendSelection"(index: integer): void
set "ellipsize"(value: $TextUtils$TruncateAt$Type)
set "selection"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditText$Type = ($EditText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditText_ = $EditText$Type;
}}
declare module "packages/icyllis/modernui/widget/$ListAdapter" {
import {$DataSetObserver, $DataSetObserver$Type} from "packages/icyllis/modernui/util/$DataSetObserver"
import {$Adapter, $Adapter$Type} from "packages/icyllis/modernui/widget/$Adapter"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export interface $ListAdapter extends $Adapter {

 "isEnabled"(arg0: integer): boolean
 "areAllItemsEnabled"(): boolean
 "isEmpty"(): boolean
 "getCount"(): integer
 "getItem"(arg0: integer): any
 "getItemId"(arg0: integer): long
 "getView"(arg0: integer, arg1: $View$Type, arg2: $ViewGroup$Type): $View
 "registerDataSetObserver"(arg0: $DataSetObserver$Type): void
 "unregisterDataSetObserver"(arg0: $DataSetObserver$Type): void
 "hasStableIds"(): boolean
 "getItemViewType"(arg0: integer): integer
 "getViewTypeCount"(): integer
}

export namespace $ListAdapter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListAdapter$Type = ($ListAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListAdapter_ = $ListAdapter$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$Emoji" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Emoji {
static readonly "ZERO_WIDTH_JOINER": integer
static readonly "COMBINING_ENCLOSING_KEYCAP": integer
static readonly "VARIATION_SELECTOR_15": integer
static readonly "VARIATION_SELECTOR_16": integer
static readonly "CANCEL_TAG": integer

constructor()

public static "isRegionalIndicatorSymbol"(codePoint: integer): boolean
public static "isEmojiModifierBase"(codePoint: integer): boolean
public static "isEmojiPresentation"(codePoint: integer): boolean
public static "isEmoji"(codePoint: integer): boolean
public static "isKeycapBase"(codePoint: integer): boolean
public static "isEmojiModifier"(codePoint: integer): boolean
public static "isTagSpecChar"(codePoint: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Emoji$Type = ($Emoji);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Emoji_ = $Emoji$Type;
}}
declare module "packages/icyllis/modernui/animation/$Keyframes" {
import {$TypeEvaluator, $TypeEvaluator$Type} from "packages/icyllis/modernui/animation/$TypeEvaluator"
import {$Keyframe, $Keyframe$Type} from "packages/icyllis/modernui/animation/$Keyframe"

export interface $Keyframes {

 "getValue"(arg0: float): any
 "copy"(): $Keyframes
 "setEvaluator"(arg0: $TypeEvaluator$Type<(any)>): void
 "getKeyframes"(): ($Keyframe)[]
}

export namespace $Keyframes {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Keyframes$Type = ($Keyframes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Keyframes_ = $Keyframes$Type;
}}
declare module "packages/icyllis/modernui/widget/$ExpandableListView$OnGroupExpandListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ExpandableListView$OnGroupExpandListener {

 "onGroupExpand"(arg0: integer): void

(arg0: integer): void
}

export namespace $ExpandableListView$OnGroupExpandListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandableListView$OnGroupExpandListener$Type = ($ExpandableListView$OnGroupExpandListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandableListView$OnGroupExpandListener_ = $ExpandableListView$OnGroupExpandListener$Type;
}}
declare module "packages/icyllis/modernui/markdown/core/style/$HeadingSpan" {
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$MarkdownTheme, $MarkdownTheme$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme"
import {$LineHeightSpan, $LineHeightSpan$Type} from "packages/icyllis/modernui/text/style/$LineHeightSpan"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$LeadingMarginSpan, $LeadingMarginSpan$Type} from "packages/icyllis/modernui/text/style/$LeadingMarginSpan"

export class $HeadingSpan extends $MetricAffectingSpan implements $LeadingMarginSpan, $LineHeightSpan {

constructor(theme: $MarkdownTheme$Type, level: integer)

public "updateMeasureState"(paint: $TextPaint$Type): void
public "chooseHeight"(text: charseq, start: integer, end: integer, spanstartv: integer, lineHeight: integer, fm: $FontMetricsInt$Type, paint: $TextPaint$Type): void
public "drawMargin"(c: $Canvas$Type, p: $TextPaint$Type, left: integer, right: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
public "getLeadingMargin"(first: boolean): integer
public "drawLeadingMargin"(c: $Canvas$Type, p: $TextPaint$Type, x: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeadingSpan$Type = ($HeadingSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeadingSpan_ = $HeadingSpan$Type;
}}
declare module "packages/icyllis/modernui/fragment/$SpecialEffectsController" {
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $SpecialEffectsController {


public "getContainer"(): $ViewGroup
get "container"(): $ViewGroup
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialEffectsController$Type = ($SpecialEffectsController);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialEffectsController_ = $SpecialEffectsController$Type;
}}
declare module "packages/icyllis/modernui/animation/$PropertyValuesHolder" {
import {$Property, $Property$Type} from "packages/icyllis/modernui/util/$Property"
import {$TypeEvaluator, $TypeEvaluator$Type} from "packages/icyllis/modernui/animation/$TypeEvaluator"
import {$Cloneable, $Cloneable$Type} from "packages/java/lang/$Cloneable"
import {$TypeConverter, $TypeConverter$Type} from "packages/icyllis/modernui/animation/$TypeConverter"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$Keyframe, $Keyframe$Type} from "packages/icyllis/modernui/animation/$Keyframe"

export class $PropertyValuesHolder implements $Cloneable {


public "setProperty"(property: $Property$Type<(any), (any)>): void
public "invert"(): void
public static "ofInt"(property: $IntProperty$Type<(any)>, ...values: (integer)[]): $PropertyValuesHolder
public static "ofInt"(...values: (integer)[]): $PropertyValuesHolder
public static "ofFloat"(...values: (float)[]): $PropertyValuesHolder
public static "ofFloat"(property: $FloatProperty$Type<(any)>, ...values: (float)[]): $PropertyValuesHolder
public "setEvaluator"(evaluator: $TypeEvaluator$Type<(any)>): void
public static "ofObject"<V, P>(property: $Property$Type<(any), (P)>, converter: $TypeConverter$Type<(V), (P)>, evaluator: $TypeEvaluator$Type<(V)>, ...values: (V)[]): $PropertyValuesHolder
public static "ofObject"<V>(evaluator: $TypeEvaluator$Type<(V)>, ...values: (V)[]): $PropertyValuesHolder
public static "ofObject"<V>(property: $Property$Type<(any), (V)>, evaluator: $TypeEvaluator$Type<(V)>, ...values: (V)[]): $PropertyValuesHolder
public "setKeyframes"(...values: ($Keyframe$Type)[]): void
public "setConverter"(converter: $TypeConverter$Type<(any), (any)>): void
public "setObjectValues"(...values: (any)[]): void
public "setIntValues"(...values: (integer)[]): void
public static "ofKeyframe"(property: $Property$Type<(any), (any)>, ...values: ($Keyframe$Type)[]): $PropertyValuesHolder
public static "ofKeyframe"(...values: ($Keyframe$Type)[]): $PropertyValuesHolder
public static "ofKeyframe"(property: $FloatProperty$Type<(any)>, ...values: ($Keyframe$Type)[]): $PropertyValuesHolder
public static "ofKeyframe"<P>(property: $Property$Type<(any), (P)>, converter: $TypeConverter$Type<(any), (P)>, ...values: ($Keyframe$Type)[]): $PropertyValuesHolder
public static "ofKeyframe"(property: $IntProperty$Type<(any)>, ...values: ($Keyframe$Type)[]): $PropertyValuesHolder
public "setFloatValues"(...values: (float)[]): void
set "property"(value: $Property$Type<(any), (any)>)
set "evaluator"(value: $TypeEvaluator$Type<(any)>)
set "keyframes"(value: ($Keyframe$Type)[])
set "converter"(value: $TypeConverter$Type<(any), (any)>)
set "objectValues"(value: (any)[])
set "intValues"(value: (integer)[])
set "floatValues"(value: (float)[])
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PropertyValuesHolder$Type = ($PropertyValuesHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PropertyValuesHolder_ = $PropertyValuesHolder$Type;
}}
declare module "packages/icyllis/modernui/widget/$AbsSeekBar" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$ProgressBar, $ProgressBar$Type} from "packages/icyllis/modernui/widget/$ProgressBar"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $AbsSeekBar extends $ProgressBar {
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "drawableHotspotChanged"(x: float, y: float): void
public "jumpDrawablesToCurrentState"(): void
public "onRtlPropertiesChanged"(layoutDirection: integer): void
public "onTouchEvent"(event: $MotionEvent$Type): boolean
public "onKeyDown"(keyCode: integer, event: $KeyEvent$Type): boolean
public "getThumbOffset"(): integer
public "setThumbTintBlendMode"(blendMode: $BlendMode$Type): void
public "setKeyProgressIncrement"(increment: integer): void
public "setTickMarkTintList"(tint: $ColorStateList$Type): void
public "getTickMarkTintList"(): $ColorStateList
public "setTickMarkTintBlendMode"(blendMode: $BlendMode$Type): void
public "getTickMarkTintBlendMode"(): $BlendMode
public "getKeyProgressIncrement"(): integer
public "getThumbTintBlendMode"(): $BlendMode
public "getThumb"(): $Drawable
public "getSplitTrack"(): boolean
public "setThumbOffset"(thumbOffset: integer): void
public "setSplitTrack"(splitTrack: boolean): void
public "setThumb"(thumb: $Drawable$Type): void
public "setTickMark"(tickMark: $Drawable$Type): void
public "getThumbTintList"(): $ColorStateList
public "setThumbTintList"(tint: $ColorStateList$Type): void
public "getTickMark"(): $Drawable
get "thumbOffset"(): integer
set "thumbTintBlendMode"(value: $BlendMode$Type)
set "keyProgressIncrement"(value: integer)
set "tickMarkTintList"(value: $ColorStateList$Type)
get "tickMarkTintList"(): $ColorStateList
set "tickMarkTintBlendMode"(value: $BlendMode$Type)
get "tickMarkTintBlendMode"(): $BlendMode
get "keyProgressIncrement"(): integer
get "thumbTintBlendMode"(): $BlendMode
get "thumb"(): $Drawable
get "splitTrack"(): boolean
set "thumbOffset"(value: integer)
set "splitTrack"(value: boolean)
set "thumb"(value: $Drawable$Type)
set "tickMark"(value: $Drawable$Type)
get "thumbTintList"(): $ColorStateList
set "thumbTintList"(value: $ColorStateList$Type)
get "tickMark"(): $Drawable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsSeekBar$Type = ($AbsSeekBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsSeekBar_ = $AbsSeekBar$Type;
}}
declare module "packages/icyllis/modernui/widget/$GridLayout" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$GridLayout$Alignment, $GridLayout$Alignment$Type} from "packages/icyllis/modernui/widget/$GridLayout$Alignment"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$GridLayout$Spec, $GridLayout$Spec$Type} from "packages/icyllis/modernui/widget/$GridLayout$Spec"

export class $GridLayout extends $ViewGroup {
static readonly "HORIZONTAL": integer
static readonly "VERTICAL": integer
static readonly "UNDEFINED": integer
static readonly "ALIGN_BOUNDS": integer
static readonly "ALIGN_MARGINS": integer
static readonly "TOP": $GridLayout$Alignment
static readonly "BOTTOM": $GridLayout$Alignment
static readonly "START": $GridLayout$Alignment
static readonly "END": $GridLayout$Alignment
static readonly "LEFT": $GridLayout$Alignment
static readonly "RIGHT": $GridLayout$Alignment
static readonly "CENTER": $GridLayout$Alignment
static readonly "BASELINE": $GridLayout$Alignment
static readonly "FILL": $GridLayout$Alignment
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public static "spec"(start: integer, weight: float): $GridLayout$Spec
public static "spec"(start: integer, size: integer, alignment: $GridLayout$Alignment$Type): $GridLayout$Spec
public static "spec"(start: integer, alignment: $GridLayout$Alignment$Type): $GridLayout$Spec
public static "spec"(start: integer, size: integer, weight: float): $GridLayout$Spec
public static "spec"(start: integer, alignment: $GridLayout$Alignment$Type, weight: float): $GridLayout$Spec
public static "spec"(start: integer, size: integer, alignment: $GridLayout$Alignment$Type, weight: float): $GridLayout$Spec
public static "spec"(start: integer, size: integer): $GridLayout$Spec
public static "spec"(start: integer): $GridLayout$Spec
public "setColumnCount"(columnCount: integer): void
public "setOrientation"(orientation: integer): void
public "onViewAdded"(child: $View$Type): void
public "onViewRemoved"(child: $View$Type): void
public "requestLayout"(): void
public "getRowCount"(): integer
public "getOrientation"(): integer
public "isRowOrderPreserved"(): boolean
public "setRowOrderPreserved"(rowOrderPreserved: boolean): void
public "setUseDefaultMargins"(useDefaultMargins: boolean): void
public "getUseDefaultMargins"(): boolean
public "isColumnOrderPreserved"(): boolean
public "setColumnOrderPreserved"(columnOrderPreserved: boolean): void
public "getColumnCount"(): integer
public "setAlignmentMode"(alignmentMode: integer): void
public "getAlignmentMode"(): integer
public "setRowCount"(rowCount: integer): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "columnCount"(value: integer)
set "orientation"(value: integer)
get "rowCount"(): integer
get "orientation"(): integer
get "rowOrderPreserved"(): boolean
set "rowOrderPreserved"(value: boolean)
set "useDefaultMargins"(value: boolean)
get "useDefaultMargins"(): boolean
get "columnOrderPreserved"(): boolean
set "columnOrderPreserved"(value: boolean)
get "columnCount"(): integer
set "alignmentMode"(value: integer)
get "alignmentMode"(): integer
set "rowCount"(value: integer)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GridLayout$Type = ($GridLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GridLayout_ = $GridLayout$Type;
}}
declare module "packages/icyllis/modernui/text/style/$SuperscriptSpan" {
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $SuperscriptSpan extends $MetricAffectingSpan implements $ParcelableSpan {

constructor()
constructor(src: $Parcel$Type)

public "toString"(): string
public "updateMeasureState"(textPaint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
get "spanTypeId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuperscriptSpan$Type = ($SuperscriptSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuperscriptSpan_ = $SuperscriptSpan$Type;
}}
declare module "packages/icyllis/modernui/widget/$Button" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$PointerIcon, $PointerIcon$Type} from "packages/icyllis/modernui/view/$PointerIcon"

export class $Button extends $TextView {
static readonly "UNKNOWN_BORING": $BoringLayout$Metrics
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "onResolvePointerIcon"(event: $MotionEvent$Type): $PointerIcon
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Button$Type = ($Button);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Button_ = $Button$Type;
}}
declare module "packages/icyllis/modernui/widget/$ExpandableListView$OnGroupClickListener" {
import {$ExpandableListView, $ExpandableListView$Type} from "packages/icyllis/modernui/widget/$ExpandableListView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $ExpandableListView$OnGroupClickListener {

 "onGroupClick"(arg0: $ExpandableListView$Type, arg1: $View$Type, arg2: integer, arg3: long): boolean

(arg0: $ExpandableListView$Type, arg1: $View$Type, arg2: integer, arg3: long): boolean
}

export namespace $ExpandableListView$OnGroupClickListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandableListView$OnGroupClickListener$Type = ($ExpandableListView$OnGroupClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandableListView$OnGroupClickListener_ = $ExpandableListView$OnGroupClickListener$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$PacketBuffer" {
import {$LevelChunk, $LevelChunk$Type} from "packages/net/minecraft/world/level/chunk/$LevelChunk"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PacketBuffer extends $FriendlyByteBuf {
static readonly "DEFAULT_NBT_QUOTA": integer
static readonly "MAX_STRING_LENGTH": short
static readonly "MAX_COMPONENT_STRING_LENGTH": integer


public "sendToTrackingEntity"(entity: $Entity$Type): void
public "sendToTrackingChunk"(chunk: $LevelChunk$Type): void
public "sendToTrackingChunk"(level: $Level$Type, pos: $BlockPos$Type): void
public "sendToTrackingAndSelf"(entity: $Entity$Type): void
public "sendToPlayer"(player: $ServerPlayer$Type): void
public "sendToPlayer"(player: $Player$Type): void
public "sendToDimension"(dimension: $ResourceKey$Type<($Level$Type)>): void
public "sendToAll"(): void
public "sendToNear"(excluded: $Player$Type, x: double, y: double, z: double, radius: double, dimension: $ResourceKey$Type<($Level$Type)>): void
public "sendToPlayers"(players: $Iterable$Type<(any)>): void
public "sendToServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PacketBuffer$Type = ($PacketBuffer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PacketBuffer_ = $PacketBuffer$Type;
}}
declare module "packages/icyllis/modernui/text/method/$ArrowKeyMovementMethod" {
import {$MovementMethod, $MovementMethod$Type} from "packages/icyllis/modernui/text/method/$MovementMethod"
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$BaseMovementMethod, $BaseMovementMethod$Type} from "packages/icyllis/modernui/text/method/$BaseMovementMethod"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export class $ArrowKeyMovementMethod extends $BaseMovementMethod {

constructor()

public static "getInstance"(): $MovementMethod
public "initialize"(widget: $TextView$Type, text: $Spannable$Type): void
public "onTakeFocus"(view: $TextView$Type, text: $Spannable$Type, dir: integer): void
public "onTouchEvent"(widget: $TextView$Type, buffer: $Spannable$Type, event: $MotionEvent$Type): boolean
public "canSelectArbitrarily"(): boolean
get "instance"(): $MovementMethod
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrowKeyMovementMethod$Type = ($ArrowKeyMovementMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrowKeyMovementMethod_ = $ArrowKeyMovementMethod$Type;
}}
declare module "packages/icyllis/modernui/view/$VelocityTracker" {
import {$VelocityTracker$Estimator, $VelocityTracker$Estimator$Type} from "packages/icyllis/modernui/view/$VelocityTracker$Estimator"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export class $VelocityTracker {
static readonly "VELOCITY_TRACKER_STRATEGY_DEFAULT": integer
static readonly "VELOCITY_TRACKER_STRATEGY_IMPULSE": integer
static readonly "VELOCITY_TRACKER_STRATEGY_LSQ1": integer
static readonly "VELOCITY_TRACKER_STRATEGY_LSQ2": integer
static readonly "VELOCITY_TRACKER_STRATEGY_LSQ3": integer
static readonly "VELOCITY_TRACKER_STRATEGY_WLSQ2_DELTA": integer
static readonly "VELOCITY_TRACKER_STRATEGY_WLSQ2_CENTRAL": integer
static readonly "VELOCITY_TRACKER_STRATEGY_WLSQ2_RECENT": integer


public "clear"(): void
public "addMovement"(event: $MotionEvent$Type): void
public static "obtain"(strategy: integer): $VelocityTracker
public static "obtain"(): $VelocityTracker
public "recycle"(): void
public "computeCurrentVelocity"(units: integer, maxVelocity: float): boolean
public "computeCurrentVelocity"(units: integer): boolean
public "getXVelocity"(): float
public "getYVelocity"(): float
public "getEstimator"(outEstimator: $VelocityTracker$Estimator$Type): boolean
public "getStrategyId"(): integer
get "xVelocity"(): float
get "yVelocity"(): float
get "strategyId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VelocityTracker$Type = ($VelocityTracker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VelocityTracker_ = $VelocityTracker$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$Plugin" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
/**
 * 
 * @deprecated
 */
export class $Plugin {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Plugin$Type = ($Plugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Plugin_ = $Plugin$Type;
}}
declare module "packages/icyllis/modernui/view/$ActionMode" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Menu, $Menu$Type} from "packages/icyllis/modernui/view/$Menu"

export class $ActionMode {
static readonly "TYPE_PRIMARY": integer
static readonly "TYPE_FLOATING": integer
static readonly "DEFAULT_HIDE_DURATION": integer

constructor()

public "getType"(): integer
public "finish"(): void
public "getTag"(): any
public "setType"(type: integer): void
public "invalidate"(): void
public "onWindowFocusChanged"(hasWindowFocus: boolean): void
public "hide"(duration: long): void
public "setTitle"(arg0: charseq): void
public "getTitle"(): charseq
public "getMenu"(): $Menu
public "getSubtitle"(): charseq
public "setTag"(tag: any): void
public "setTitleOptionalHint"(titleOptional: boolean): void
public "getTitleOptionalHint"(): boolean
public "invalidateContentRect"(): void
public "setCustomView"(arg0: $View$Type): void
public "isTitleOptional"(): boolean
public "setSubtitle"(arg0: charseq): void
public "getCustomView"(): $View
public "isUiFocusable"(): boolean
get "type"(): integer
get "tag"(): any
set "type"(value: integer)
set "title"(value: charseq)
get "title"(): charseq
get "menu"(): $Menu
get "subtitle"(): charseq
set "tag"(value: any)
set "titleOptionalHint"(value: boolean)
get "titleOptionalHint"(): boolean
set "customView"(value: $View$Type)
get "titleOptional"(): boolean
set "subtitle"(value: charseq)
get "customView"(): $View
get "uiFocusable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActionMode$Type = ($ActionMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActionMode_ = $ActionMode$Type;
}}
declare module "packages/icyllis/modernui/graphics/$BitmapFactory$Options" {
import {$ColorSpace, $ColorSpace$Type} from "packages/icyllis/arc3d/core/$ColorSpace"
import {$Bitmap$Format, $Bitmap$Format$Type} from "packages/icyllis/modernui/graphics/$Bitmap$Format"

export class $BitmapFactory$Options {
 "inDecodeMimeType": boolean
 "inPreferredFormat": $Bitmap$Format
 "inPreferredColorSpace": $ColorSpace
 "outWidth": integer
 "outHeight": integer
 "outMimeType": string
 "outFormat": $Bitmap$Format
 "outColorSpace": $ColorSpace

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BitmapFactory$Options$Type = ($BitmapFactory$Options);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BitmapFactory$Options_ = $BitmapFactory$Options$Type;
}}
declare module "packages/icyllis/modernui/widget/$AbsListView" {
import {$Filter$FilterListener, $Filter$FilterListener$Type} from "packages/icyllis/modernui/widget/$Filter$FilterListener"
import {$AbsListView$MultiChoiceModeListener, $AbsListView$MultiChoiceModeListener$Type} from "packages/icyllis/modernui/widget/$AbsListView$MultiChoiceModeListener"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$AdapterView, $AdapterView$Type} from "packages/icyllis/modernui/widget/$AdapterView"
import {$ListAdapter, $ListAdapter$Type} from "packages/icyllis/modernui/widget/$ListAdapter"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$AbsListView$RecyclerListener, $AbsListView$RecyclerListener$Type} from "packages/icyllis/modernui/widget/$AbsListView$RecyclerListener"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$SparseBooleanArray, $SparseBooleanArray$Type} from "packages/icyllis/modernui/util/$SparseBooleanArray"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$AbsListView$OnScrollListener, $AbsListView$OnScrollListener$Type} from "packages/icyllis/modernui/widget/$AbsListView$OnScrollListener"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $AbsListView extends $AdapterView<($ListAdapter)> implements $Filter$FilterListener {
static readonly "TRANSCRIPT_MODE_DISABLED": integer
static readonly "TRANSCRIPT_MODE_NORMAL": integer
static readonly "TRANSCRIPT_MODE_ALWAYS_SCROLL": integer
static readonly "CHOICE_MODE_NONE": integer
static readonly "CHOICE_MODE_SINGLE": integer
static readonly "CHOICE_MODE_MULTIPLE": integer
static readonly "CHOICE_MODE_MULTIPLE_MODAL": integer
static readonly "ITEM_VIEW_TYPE_IGNORE": integer
static readonly "ITEM_VIEW_TYPE_HEADER_OR_FOOTER": integer
static readonly "INVALID_POSITION": integer
static readonly "INVALID_ROW_ID": long
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "performItemClick"(view: $View$Type, position: integer, id: long): boolean
public "setAdapter"(adapter: $ListAdapter$Type): void
public "getSelectedView"(): $View
public "onStartNestedScroll"(child: $View$Type, target: $View$Type, axes: integer, type: integer): boolean
public "setScrollIndicators"(up: $View$Type, down: $View$Type): void
public "onCancelPendingInputEvents"(): void
public "onNestedScrollAccepted"(child: $View$Type, target: $View$Type, axes: integer, type: integer): void
public "dispatchDrawableHotspotChanged"(x: float, y: float): void
public "onGenericMotionEvent"(event: $MotionEvent$Type): boolean
public "onWindowFocusChanged"(hasWindowFocus: boolean): void
public "showContextMenuForChild"(originalView: $View$Type, x: float, y: float): boolean
public "onInterceptTouchEvent"(ev: $MotionEvent$Type): boolean
public "requestDisallowInterceptTouchEvent"(disallowIntercept: boolean): void
public "onFilterComplete"(count: integer): void
public "setEdgeEffectColor"(color: integer): void
public "smoothScrollBy"(distance: integer, duration: integer): void
public "fling"(velocityY: integer): void
public "onNestedScroll"(target: $View$Type, dxConsumed: integer, dyConsumed: integer, dxUnconsumed: integer, dyUnconsumed: integer, type: integer, consumed: (integer)[]): void
public "onNestedFling"(target: $View$Type, velocityX: float, velocityY: float, consumed: boolean): boolean
public "onTouchEvent"(ev: $MotionEvent$Type): boolean
public "showContextMenu"(x: float, y: float): boolean
public "getFocusedRect"(r: $Rect$Type): void
public "onKeyDown"(keyCode: integer, event: $KeyEvent$Type): boolean
public "onKeyUp"(keyCode: integer, event: $KeyEvent$Type): boolean
public "getCheckedItemCount"(): integer
public "setSmoothScrollbarEnabled"(enabled: boolean): void
public "setOnScrollListener"(l: $AbsListView$OnScrollListener$Type): void
public "isSmoothScrollbarEnabled"(): boolean
public "getCheckedItemPosition"(): integer
public "getListPaddingBottom"(): integer
public "getListPaddingRight"(): integer
public "getCheckedItemPositions"(): $SparseBooleanArray
public "setMultiChoiceModeListener"(listener: $AbsListView$MultiChoiceModeListener$Type): void
public "smoothScrollToPositionFromTop"(position: integer, offset: integer, duration: integer): void
public "smoothScrollToPositionFromTop"(position: integer, offset: integer): void
public "isDrawSelectorOnTop"(): boolean
public "setRecyclerListener"(listener: $AbsListView$RecyclerListener$Type): void
public "setSelectionFromTop"(position: integer, y: integer): void
public "setDrawSelectorOnTop"(onTop: boolean): void
public "smoothScrollToPosition"(position: integer): void
public "smoothScrollToPosition"(position: integer, boundPosition: integer): void
public "setTopEdgeEffectColor"(color: integer): void
public "getTopEdgeEffectColor"(): integer
public "setBottomEdgeEffectColor"(color: integer): void
public "getBottomEdgeEffectColor"(): integer
public "onDrawForeground"(canvas: $Canvas$Type): void
public "requestLayout"(): void
public "verifyDrawable"(dr: $Drawable$Type): boolean
public "addTouchables"(views: $ArrayList$Type<($View$Type)>): void
public "getSelector"(): $Drawable
public "setSelector"(sel: $Drawable$Type): void
public "getChoiceMode"(): integer
public "setItemChecked"(position: integer, value: boolean): void
public "clearChoices"(): void
public "isItemChecked"(position: integer): boolean
public "getCheckedItemIds"(): (long)[]
public "setChoiceMode"(choiceMode: integer): void
public "setStackFromBottom"(stackFromBottom: boolean): void
public "isStackFromBottom"(): boolean
public "getListPaddingTop"(): integer
public "getListPaddingLeft"(): integer
public "shouldDrawSelector"(): boolean
public "onTouchModeChanged"(isInTouchMode: boolean): void
public "pointToRowId"(x: integer, y: integer): long
public "pointToPosition"(x: integer, y: integer): integer
public "canScrollList"(direction: integer): boolean
public "setFriction"(friction: float): void
public "setVelocityScale"(scale: float): void
public "invalidateViews"(): void
public "setTranscriptMode"(mode: integer): void
public "getTranscriptMode"(): integer
public "reclaimViews"(views: $List$Type<($View$Type)>): void
public "scrollListBy"(y: integer): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "adapter"(value: $ListAdapter$Type)
get "selectedView"(): $View
set "edgeEffectColor"(value: integer)
get "checkedItemCount"(): integer
set "smoothScrollbarEnabled"(value: boolean)
set "onScrollListener"(value: $AbsListView$OnScrollListener$Type)
get "smoothScrollbarEnabled"(): boolean
get "checkedItemPosition"(): integer
get "listPaddingBottom"(): integer
get "listPaddingRight"(): integer
get "checkedItemPositions"(): $SparseBooleanArray
set "multiChoiceModeListener"(value: $AbsListView$MultiChoiceModeListener$Type)
get "drawSelectorOnTop"(): boolean
set "recyclerListener"(value: $AbsListView$RecyclerListener$Type)
set "drawSelectorOnTop"(value: boolean)
set "topEdgeEffectColor"(value: integer)
get "topEdgeEffectColor"(): integer
set "bottomEdgeEffectColor"(value: integer)
get "bottomEdgeEffectColor"(): integer
get "selector"(): $Drawable
set "selector"(value: $Drawable$Type)
get "choiceMode"(): integer
get "checkedItemIds"(): (long)[]
set "choiceMode"(value: integer)
set "stackFromBottom"(value: boolean)
get "stackFromBottom"(): boolean
get "listPaddingTop"(): integer
get "listPaddingLeft"(): integer
set "friction"(value: float)
set "velocityScale"(value: float)
set "transcriptMode"(value: integer)
get "transcriptMode"(): integer
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsListView$Type = ($AbsListView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsListView_ = $AbsListView$Type;
}}
declare module "packages/icyllis/modernui/text/style/$LocaleSpan" {
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $LocaleSpan extends $MetricAffectingSpan implements $ParcelableSpan {

constructor(locale: $Locale$Type)
constructor(source: $Parcel$Type)

public "getLocale"(): $Locale
public "updateMeasureState"(paint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
get "locale"(): $Locale
get "spanTypeId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocaleSpan$Type = ($LocaleSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocaleSpan_ = $LocaleSpan$Type;
}}
declare module "packages/icyllis/modernui/text/style/$URLSpan" {
import {$ClickableSpan, $ClickableSpan$Type} from "packages/icyllis/modernui/text/style/$ClickableSpan"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $URLSpan extends $ClickableSpan implements $ParcelableSpan {

constructor(url: string)
constructor(src: $Parcel$Type)

public "getURL"(): string
public "onClick"(widget: $View$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
get "uRL"(): string
get "spanTypeId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $URLSpan$Type = ($URLSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $URLSpan_ = $URLSpan$Type;
}}
declare module "packages/icyllis/modernui/transition/$CircularPropagation" {
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$VisibilityPropagation, $VisibilityPropagation$Type} from "packages/icyllis/modernui/transition/$VisibilityPropagation"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $CircularPropagation extends $VisibilityPropagation {

constructor()

public "getStartDelay"(sceneRoot: $ViewGroup$Type, transition: $Transition$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): long
public "setPropagationSpeed"(propagationSpeed: float): void
set "propagationSpeed"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CircularPropagation$Type = ($CircularPropagation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CircularPropagation_ = $CircularPropagation$Type;
}}
declare module "packages/icyllis/modernui/widget/$CoordinatorLayout" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $CoordinatorLayout extends $ViewGroup {
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "requestChildRectangleOnScreen"(child: $View$Type, rectangle: $Rect$Type, immediate: boolean): boolean
public "onDetachedFromWindow"(): void
public "onStartNestedScroll"(child: $View$Type, target: $View$Type, axes: integer, type: integer): boolean
public "onNestedScrollAccepted"(child: $View$Type, target: $View$Type, axes: integer, type: integer): void
public "onInterceptTouchEvent"(ev: $MotionEvent$Type): boolean
public "requestDisallowInterceptTouchEvent"(disallowIntercept: boolean): void
public "onNestedPreFling"(target: $View$Type, velocityX: float, velocityY: float): boolean
public "onStopNestedScroll"(target: $View$Type, type: integer): void
public "onNestedPreScroll"(target: $View$Type, dx: integer, dy: integer, consumed: (integer)[], type: integer): void
public "onNestedScroll"(target: $View$Type, dxConsumed: integer, dyConsumed: integer, dxUnconsumed: integer, dyUnconsumed: integer, type: integer, consumed: (integer)[]): void
public "onNestedFling"(target: $View$Type, velocityX: float, velocityY: float, consumed: boolean): boolean
public "onAttachedToWindow"(): void
public "onTouchEvent"(ev: $MotionEvent$Type): boolean
public "getDependencies"(child: $View$Type): $List<($View)>
public "onLayoutChild"(child: $View$Type, layoutDirection: integer): void
public "onMeasureChild"(child: $View$Type, parentWidthMeasureSpec: integer, widthUsed: integer, parentHeightMeasureSpec: integer, heightUsed: integer): void
public "doViewsOverlap"(first: $View$Type, second: $View$Type): boolean
public "getDependents"(child: $View$Type): $List<($View)>
public "getDependencySortedChildren"(): $List<($View)>
public "dispatchDependentViewsChanged"(view: $View$Type): void
public "isPointInChildBounds"(child: $View$Type, x: integer, y: integer): boolean
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
get "dependencySortedChildren"(): $List<($View)>
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoordinatorLayout$Type = ($CoordinatorLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoordinatorLayout_ = $CoordinatorLayout$Type;
}}
declare module "packages/icyllis/modernui/markdown/core/style/$ThematicBreakSpan" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$MarkdownTheme, $MarkdownTheme$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$LeadingMarginSpan, $LeadingMarginSpan$Type} from "packages/icyllis/modernui/text/style/$LeadingMarginSpan"

export class $ThematicBreakSpan implements $LeadingMarginSpan {

constructor(theme: $MarkdownTheme$Type)

public "drawMargin"(c: $Canvas$Type, p: $TextPaint$Type, left: integer, right: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
public "getLeadingMargin"(first: boolean): integer
public "drawLeadingMargin"(c: $Canvas$Type, p: $TextPaint$Type, x: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThematicBreakSpan$Type = ($ThematicBreakSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThematicBreakSpan_ = $ThematicBreakSpan$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$SimpleScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ScreenCallback, $ScreenCallback$Type} from "packages/icyllis/modernui/mc/$ScreenCallback"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MuiScreen, $MuiScreen$Type} from "packages/icyllis/modernui/mc/$MuiScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$List, $List$Type} from "packages/java/util/$List"

export class $SimpleScreen extends $Screen implements $MuiScreen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "getFragment"(): $Fragment
public "self"(): $Screen
public "getPreviousScreen"(): $Screen
public "isMenuScreen"(): boolean
public "keyPressed"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "onBackPressed"(): void
public "removed"(): void
public "getCallback"(): $ScreenCallback
public "render"(gr: $GuiGraphics$Type, mouseX: integer, mouseY: integer, deltaTick: float): void
public "isPauseScreen"(): boolean
public "resize"(minecraft: $Minecraft$Type, width: integer, height: integer): void
public "mouseReleased"(mouseX: double, mouseY: double, mouseButton: integer): boolean
public "mouseClicked"(mouseX: double, mouseY: double, mouseButton: integer): boolean
public "charTyped"(ch: character, modifiers: integer): boolean
public "mouseScrolled"(mouseX: double, mouseY: double, delta: double): boolean
public "mouseDragged"(mouseX: double, mouseY: double, mouseButton: integer, deltaX: double, deltaY: double): boolean
public "keyReleased"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "mouseMoved"(mouseX: double, mouseY: double): void
get "fragment"(): $Fragment
get "previousScreen"(): $Screen
get "menuScreen"(): boolean
get "callback"(): $ScreenCallback
get "pauseScreen"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleScreen$Type = ($SimpleScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleScreen_ = $SimpleScreen$Type;
}}
declare module "packages/icyllis/modernui/animation/$StateListAnimator" {
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Cloneable, $Cloneable$Type} from "packages/java/lang/$Cloneable"

export class $StateListAnimator implements $Cloneable {

constructor()

public "clone"(): $StateListAnimator
public "setTarget"(view: $View$Type): void
public "setState"(state: (integer)[]): void
public "jumpToCurrentState"(): void
public "addState"(spec: (integer)[], animator: $Animator$Type): void
set "target"(value: $View$Type)
set "state"(value: (integer)[])
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StateListAnimator$Type = ($StateListAnimator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StateListAnimator_ = $StateListAnimator$Type;
}}
declare module "packages/icyllis/modernui/widget/$RelativeRadioGroup" {
import {$RelativeLayout, $RelativeLayout$Type} from "packages/icyllis/modernui/widget/$RelativeLayout"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$RelativeRadioGroup$OnCheckedChangeListener, $RelativeRadioGroup$OnCheckedChangeListener$Type} from "packages/icyllis/modernui/widget/$RelativeRadioGroup$OnCheckedChangeListener"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $RelativeRadioGroup extends $RelativeLayout {
static readonly "TRUE": integer
static readonly "LEFT_OF": integer
static readonly "RIGHT_OF": integer
static readonly "ABOVE": integer
static readonly "BELOW": integer
static readonly "ALIGN_BASELINE": integer
static readonly "ALIGN_LEFT": integer
static readonly "ALIGN_TOP": integer
static readonly "ALIGN_RIGHT": integer
static readonly "ALIGN_BOTTOM": integer
static readonly "ALIGN_PARENT_LEFT": integer
static readonly "ALIGN_PARENT_TOP": integer
static readonly "ALIGN_PARENT_RIGHT": integer
static readonly "ALIGN_PARENT_BOTTOM": integer
static readonly "CENTER_IN_PARENT": integer
static readonly "CENTER_HORIZONTAL": integer
static readonly "CENTER_VERTICAL": integer
static readonly "START_OF": integer
static readonly "END_OF": integer
static readonly "ALIGN_START": integer
static readonly "ALIGN_END": integer
static readonly "ALIGN_PARENT_START": integer
static readonly "ALIGN_PARENT_END": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "check"(id: integer): void
public "getCheckedId"(): integer
public "clearCheck"(): void
public "setOnCheckedChangeListener"(listener: $RelativeRadioGroup$OnCheckedChangeListener$Type): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
get "checkedId"(): integer
set "onCheckedChangeListener"(value: $RelativeRadioGroup$OnCheckedChangeListener$Type)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RelativeRadioGroup$Type = ($RelativeRadioGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RelativeRadioGroup_ = $RelativeRadioGroup$Type;
}}
declare module "packages/icyllis/modernui/widget/$ImageView" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$Image, $Image$Type} from "packages/icyllis/modernui/graphics/$Image"
import {$ImageView$ScaleType, $ImageView$ScaleType$Type} from "packages/icyllis/modernui/widget/$ImageView$ScaleType"
import {$Matrix, $Matrix$Type} from "packages/icyllis/modernui/graphics/$Matrix"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $ImageView extends $View {
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "getDrawable"(): $Drawable
public "drawableHotspotChanged"(x: float, y: float): void
public "onVisibilityAggregated"(isVisible: boolean): void
public "jumpDrawablesToCurrentState"(): void
public "hasOverlappingRendering"(): boolean
public "onCreateDrawableState"(extraSpace: integer): (integer)[]
public "onRtlPropertiesChanged"(layoutDirection: integer): void
public "getMaxHeight"(): integer
public "setMaxHeight"(maxHeight: integer): void
public "setMaxWidth"(maxWidth: integer): void
public "getBaseline"(): integer
public "setImage"(image: $Image$Type): void
public "getMaxWidth"(): integer
public "setImageDrawable"(drawable: $Drawable$Type): void
public "setScaleType"(scaleType: $ImageView$ScaleType$Type): void
public "setSelected"(selected: boolean): void
public "invalidateDrawable"(dr: $Drawable$Type): void
public "getAdjustViewBounds"(): boolean
public "getBaselineAlignBottom"(): boolean
public "setBaselineAlignBottom"(aligned: boolean): void
public "setAdjustViewBounds"(adjustViewBounds: boolean): void
public "setImageMatrix"(matrix: $Matrix$Type): void
public "setCropToPadding"(cropToPadding: boolean): void
public "setImageState"(state: (integer)[], merge: boolean): void
public "setImageLevel"(level: integer): void
public "getScaleType"(): $ImageView$ScaleType
public "setImageTintList"(tint: $ColorStateList$Type): void
public "getImageTintList"(): $ColorStateList
public "getCropToPadding"(): boolean
public "setImageAlpha"(alpha: integer): void
public "animateTransform"(matrix: $Matrix$Type): void
public "setBaseline"(baseline: integer): void
public "getImageAlpha"(): integer
get "drawable"(): $Drawable
get "maxHeight"(): integer
set "maxHeight"(value: integer)
set "maxWidth"(value: integer)
get "baseline"(): integer
set "image"(value: $Image$Type)
get "maxWidth"(): integer
set "imageDrawable"(value: $Drawable$Type)
set "scaleType"(value: $ImageView$ScaleType$Type)
set "selected"(value: boolean)
get "adjustViewBounds"(): boolean
get "baselineAlignBottom"(): boolean
set "baselineAlignBottom"(value: boolean)
set "adjustViewBounds"(value: boolean)
set "imageMatrix"(value: $Matrix$Type)
set "cropToPadding"(value: boolean)
set "imageLevel"(value: integer)
get "scaleType"(): $ImageView$ScaleType
set "imageTintList"(value: $ColorStateList$Type)
get "imageTintList"(): $ColorStateList
get "cropToPadding"(): boolean
set "imageAlpha"(value: integer)
set "baseline"(value: integer)
get "imageAlpha"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageView$Type = ($ImageView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageView_ = $ImageView$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$TextAlign" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

/**
 * 
 * @deprecated
 */
export class $TextAlign extends $Enum<($TextAlign)> {
static readonly "LEFT": $TextAlign
static readonly "CENTER": $TextAlign
static readonly "RIGHT": $TextAlign
readonly "offsetFactor": float


public static "values"(): ($TextAlign)[]
public static "valueOf"(name: string): $TextAlign
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextAlign$Type = (("left") | ("center") | ("right")) | ($TextAlign);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextAlign_ = $TextAlign$Type;
}}
declare module "packages/icyllis/modernui/text/$SpanWatcher" {
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$NoCopySpan, $NoCopySpan$Type} from "packages/icyllis/modernui/text/$NoCopySpan"

export interface $SpanWatcher extends $NoCopySpan {

 "onSpanAdded"(arg0: $Spannable$Type, arg1: any, arg2: integer, arg3: integer): void
 "onSpanChanged"(arg0: $Spannable$Type, arg1: any, arg2: integer, arg3: integer, arg4: integer, arg5: integer): void
 "onSpanRemoved"(arg0: $Spannable$Type, arg1: any, arg2: integer, arg3: integer): void
}

export namespace $SpanWatcher {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpanWatcher$Type = ($SpanWatcher);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpanWatcher_ = $SpanWatcher$Type;
}}
declare module "packages/icyllis/modernui/view/$KeyEvent" {
import {$InputEvent, $InputEvent$Type} from "packages/icyllis/modernui/view/$InputEvent"

export class $KeyEvent extends $InputEvent {
static readonly "KEY_UNKNOWN": integer
static readonly "KEY_SPACE": integer
static readonly "KEY_APOSTROPHE": integer
static readonly "KEY_COMMA": integer
static readonly "KEY_MINUS": integer
static readonly "KEY_PERIOD": integer
static readonly "KEY_SLASH": integer
static readonly "KEY_0": integer
static readonly "KEY_1": integer
static readonly "KEY_2": integer
static readonly "KEY_3": integer
static readonly "KEY_4": integer
static readonly "KEY_5": integer
static readonly "KEY_6": integer
static readonly "KEY_7": integer
static readonly "KEY_8": integer
static readonly "KEY_9": integer
static readonly "KEY_SEMICOLON": integer
static readonly "KEY_EQUAL": integer
static readonly "KEY_A": integer
static readonly "KEY_B": integer
static readonly "KEY_C": integer
static readonly "KEY_D": integer
static readonly "KEY_E": integer
static readonly "KEY_F": integer
static readonly "KEY_G": integer
static readonly "KEY_H": integer
static readonly "KEY_I": integer
static readonly "KEY_J": integer
static readonly "KEY_K": integer
static readonly "KEY_L": integer
static readonly "KEY_M": integer
static readonly "KEY_N": integer
static readonly "KEY_O": integer
static readonly "KEY_P": integer
static readonly "KEY_Q": integer
static readonly "KEY_R": integer
static readonly "KEY_S": integer
static readonly "KEY_T": integer
static readonly "KEY_U": integer
static readonly "KEY_V": integer
static readonly "KEY_W": integer
static readonly "KEY_X": integer
static readonly "KEY_Y": integer
static readonly "KEY_Z": integer
static readonly "KEY_LEFT_BRACKET": integer
static readonly "KEY_BACKSLASH": integer
static readonly "KEY_RIGHT_BRACKET": integer
static readonly "KEY_GRAVE_ACCENT": integer
static readonly "KEY_WORLD_1": integer
static readonly "KEY_WORLD_2": integer
static readonly "KEY_ESCAPE": integer
static readonly "KEY_ENTER": integer
static readonly "KEY_TAB": integer
static readonly "KEY_BACKSPACE": integer
static readonly "KEY_INSERT": integer
static readonly "KEY_DELETE": integer
static readonly "KEY_RIGHT": integer
static readonly "KEY_LEFT": integer
static readonly "KEY_DOWN": integer
static readonly "KEY_UP": integer
static readonly "KEY_PAGE_UP": integer
static readonly "KEY_PAGE_DOWN": integer
static readonly "KEY_HOME": integer
static readonly "KEY_END": integer
static readonly "KEY_CAPS_LOCK": integer
static readonly "KEY_SCROLL_LOCK": integer
static readonly "KEY_NUM_LOCK": integer
static readonly "KEY_PRINT_SCREEN": integer
static readonly "KEY_PAUSE": integer
static readonly "KEY_F1": integer
static readonly "KEY_F2": integer
static readonly "KEY_F3": integer
static readonly "KEY_F4": integer
static readonly "KEY_F5": integer
static readonly "KEY_F6": integer
static readonly "KEY_F7": integer
static readonly "KEY_F8": integer
static readonly "KEY_F9": integer
static readonly "KEY_F10": integer
static readonly "KEY_F11": integer
static readonly "KEY_F12": integer
static readonly "KEY_F13": integer
static readonly "KEY_F14": integer
static readonly "KEY_F15": integer
static readonly "KEY_F16": integer
static readonly "KEY_F17": integer
static readonly "KEY_F18": integer
static readonly "KEY_F19": integer
static readonly "KEY_F20": integer
static readonly "KEY_F21": integer
static readonly "KEY_F22": integer
static readonly "KEY_F23": integer
static readonly "KEY_F24": integer
static readonly "KEY_F25": integer
static readonly "KEY_KP_0": integer
static readonly "KEY_KP_1": integer
static readonly "KEY_KP_2": integer
static readonly "KEY_KP_3": integer
static readonly "KEY_KP_4": integer
static readonly "KEY_KP_5": integer
static readonly "KEY_KP_6": integer
static readonly "KEY_KP_7": integer
static readonly "KEY_KP_8": integer
static readonly "KEY_KP_9": integer
static readonly "KEY_KP_DECIMAL": integer
static readonly "KEY_KP_DIVIDE": integer
static readonly "KEY_KP_MULTIPLY": integer
static readonly "KEY_KP_SUBTRACT": integer
static readonly "KEY_KP_ADD": integer
static readonly "KEY_KP_ENTER": integer
static readonly "KEY_KP_EQUAL": integer
static readonly "KEY_LEFT_SHIFT": integer
static readonly "KEY_LEFT_CONTROL": integer
static readonly "KEY_LEFT_ALT": integer
static readonly "KEY_LEFT_SUPER": integer
static readonly "KEY_RIGHT_SHIFT": integer
static readonly "KEY_RIGHT_CONTROL": integer
static readonly "KEY_RIGHT_ALT": integer
static readonly "KEY_RIGHT_SUPER": integer
static readonly "KEY_MENU": integer
static readonly "META_SHIFT_ON": integer
static readonly "META_CTRL_ON": integer
static readonly "META_ALT_ON": integer
static readonly "META_SUPER_ON": integer
static readonly "FLAG_SOFT_KEYBOARD": integer
static readonly "FLAG_KEEP_TOUCH_MODE": integer
static readonly "FLAG_FROM_SYSTEM": integer
static readonly "FLAG_EDITOR_ACTION": integer
static readonly "FLAG_CANCELED": integer
static readonly "FLAG_VIRTUAL_HARD_KEY": integer
static readonly "FLAG_LONG_PRESS": integer
static readonly "FLAG_CANCELED_LONG_PRESS": integer
static readonly "FLAG_TRACKING": integer
static readonly "FLAG_FALLBACK": integer
static readonly "FLAG_PREDISPATCH": integer
static readonly "FLAG_START_TRACKING": integer
static readonly "ACTION_DOWN": integer
static readonly "ACTION_UP": integer


public "getModifiers"(): integer
public "copy"(): $InputEvent
public "cancel"(): void
public "isCtrlPressed"(): boolean
public "isAltPressed"(): boolean
public "isCanceled"(): boolean
public "startTracking"(): void
public "isTracking"(): boolean
public "getKeyCode"(): integer
public "getRepeatCount"(): integer
public static "obtain"(eventTime: long, action: integer, code: integer, repeat: integer, modifiers: integer, scancode: integer, flags: integer): $KeyEvent
public "recycle"(): void
public "hasModifiers"(modifiers: integer): boolean
public static "isModifierKey"(keyCode: integer): boolean
public "hasNoModifiers"(): boolean
public "getAction"(): integer
public "getScanCode"(): integer
public "getEventTime"(): long
public "getEventTimeNano"(): long
public "isNumLockOn"(): boolean
public "isSuperPressed"(): boolean
public "isCapsLockOn"(): boolean
public "isShiftPressed"(): boolean
public "isLongPress"(): boolean
public "getMappedChar"(): character
get "modifiers"(): integer
get "ctrlPressed"(): boolean
get "altPressed"(): boolean
get "canceled"(): boolean
get "tracking"(): boolean
get "keyCode"(): integer
get "repeatCount"(): integer
get "action"(): integer
get "scanCode"(): integer
get "eventTime"(): long
get "eventTimeNano"(): long
get "numLockOn"(): boolean
get "superPressed"(): boolean
get "capsLockOn"(): boolean
get "shiftPressed"(): boolean
get "longPress"(): boolean
get "mappedChar"(): character
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyEvent$Type = ($KeyEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyEvent_ = $KeyEvent$Type;
}}
declare module "packages/icyllis/modernui/widget/$NestedScrollView" {
import {$NestedScrollView$OnScrollChangeListener, $NestedScrollView$OnScrollChangeListener$Type} from "packages/icyllis/modernui/widget/$NestedScrollView$OnScrollChangeListener"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FrameLayout, $FrameLayout$Type} from "packages/icyllis/modernui/widget/$FrameLayout"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $NestedScrollView extends $FrameLayout {
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "computeHorizontalScrollRange"(): integer
public "computeHorizontalScrollOffset"(): integer
public "computeHorizontalScrollExtent"(): integer
public "computeVerticalScrollRange"(): integer
public "computeVerticalScrollExtent"(): integer
public "computeVerticalScrollOffset"(): integer
public "requestChildRectangleOnScreen"(child: $View$Type, rectangle: $Rect$Type, immediate: boolean): boolean
public "onStartNestedScroll"(child: $View$Type, target: $View$Type, axes: integer, type: integer): boolean
public "onNestedScrollAccepted"(child: $View$Type, target: $View$Type, axes: integer, type: integer): void
public "onGenericMotionEvent"(event: $MotionEvent$Type): boolean
public "shouldDelayChildPressedState"(): boolean
public "setOnScrollChangeListener"(l: $NestedScrollView$OnScrollChangeListener$Type): void
public "onInterceptTouchEvent"(ev: $MotionEvent$Type): boolean
public "requestDisallowInterceptTouchEvent"(disallowIntercept: boolean): void
public "setFillViewport"(fillViewport: boolean): void
public "arrowScroll"(direction: integer): boolean
public "isFillViewport"(): boolean
public "executeKeyEvent"(event: $KeyEvent$Type): boolean
public "fullScroll"(direction: integer): boolean
public "pageScroll"(direction: integer): boolean
public "smoothScrollBy"(dx: integer, dy: integer, scrollDurationMs: integer): void
public "smoothScrollBy"(dx: integer, dy: integer): void
public "smoothScrollTo"(x: integer, y: integer): void
public "smoothScrollTo"(x: integer, y: integer, scrollDurationMs: integer): void
public "fling"(velocityY: integer): void
public "onNestedPreFling"(target: $View$Type, velocityX: float, velocityY: float): boolean
public "onStopNestedScroll"(target: $View$Type, type: integer): void
public "onNestedPreScroll"(target: $View$Type, dx: integer, dy: integer, consumed: (integer)[], type: integer): void
public "onNestedScroll"(target: $View$Type, dxConsumed: integer, dyConsumed: integer, dxUnconsumed: integer, dyUnconsumed: integer, type: integer, consumed: (integer)[]): void
public "onNestedFling"(target: $View$Type, velocityX: float, velocityY: float, consumed: boolean): boolean
public "onAttachedToWindow"(): void
public "onTouchEvent"(ev: $MotionEvent$Type): boolean
public "dispatchKeyEvent"(event: $KeyEvent$Type): boolean
public "setSmoothScrollingEnabled"(smoothScrollingEnabled: boolean): void
public "isSmoothScrollingEnabled"(): boolean
public "addView"(child: $View$Type, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type, index: integer, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type): void
public "addView"(child: $View$Type, index: integer): void
public "computeScroll"(): void
public "onDrawForeground"(canvas: $Canvas$Type): void
public "requestLayout"(): void
public "requestChildFocus"(child: $View$Type, focused: $View$Type): void
public "scrollTo"(x: integer, y: integer): void
public "getMaxScrollAmount"(): integer
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "onScrollChangeListener"(value: $NestedScrollView$OnScrollChangeListener$Type)
set "fillViewport"(value: boolean)
get "fillViewport"(): boolean
set "smoothScrollingEnabled"(value: boolean)
get "smoothScrollingEnabled"(): boolean
get "maxScrollAmount"(): integer
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NestedScrollView$Type = ($NestedScrollView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NestedScrollView_ = $NestedScrollView$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnScrollChangeListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $View$OnScrollChangeListener {

 "onScrollChange"(arg0: $View$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void

(arg0: $View$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
}

export namespace $View$OnScrollChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnScrollChangeListener$Type = ($View$OnScrollChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnScrollChangeListener_ = $View$OnScrollChangeListener$Type;
}}
declare module "packages/icyllis/modernui/widget/$Toast" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"

export class $Toast {
static readonly "LENGTH_SHORT": integer
static readonly "LENGTH_LONG": integer


public "getDuration"(): integer
public "cancel"(): void
public "setText"(s: charseq): void
public static "makeText"(context: $Context$Type, text: charseq, duration: integer): $Toast
/**
 * 
 * @deprecated
 */
public static "makeText"(text: charseq, duration: integer): $Toast
public "show"(): void
public "setDuration"(duration: integer): void
get "duration"(): integer
set "text"(value: charseq)
set "duration"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Toast$Type = ($Toast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Toast_ = $Toast$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$MenuScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ScreenCallback, $ScreenCallback$Type} from "packages/icyllis/modernui/mc/$ScreenCallback"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MuiScreen, $MuiScreen$Type} from "packages/icyllis/modernui/mc/$MuiScreen"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"

export class $MenuScreen<T extends $AbstractContainerMenu> extends $AbstractContainerScreen<(T)> implements $MuiScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "getFragment"(): $Fragment
public "self"(): $Screen
public "getPreviousScreen"(): $Screen
public "isMenuScreen"(): boolean
public "keyPressed"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "onBackPressed"(): void
public "removed"(): void
public "getCallback"(): $ScreenCallback
public "render"(gr: $GuiGraphics$Type, mouseX: integer, mouseY: integer, deltaTick: float): void
public "resize"(minecraft: $Minecraft$Type, width: integer, height: integer): void
public "mouseReleased"(mouseX: double, mouseY: double, mouseButton: integer): boolean
public "mouseClicked"(mouseX: double, mouseY: double, mouseButton: integer): boolean
public "charTyped"(ch: character, modifiers: integer): boolean
public "mouseScrolled"(mouseX: double, mouseY: double, delta: double): boolean
public "mouseDragged"(mouseX: double, mouseY: double, mouseButton: integer, deltaX: double, deltaY: double): boolean
public "keyReleased"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "mouseMoved"(mouseX: double, mouseY: double): void
get "fragment"(): $Fragment
get "previousScreen"(): $Screen
get "menuScreen"(): boolean
get "callback"(): $ScreenCallback
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuScreen$Type<T> = ($MenuScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuScreen_<T> = $MenuScreen$Type<(T)>;
}}
declare module "packages/icyllis/modernui/graphics/text/$GraphemeBreak$ClusterConsumer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $GraphemeBreak$ClusterConsumer {

 "accept"(arg0: integer, arg1: integer): void

(arg0: integer, arg1: integer): void
}

export namespace $GraphemeBreak$ClusterConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GraphemeBreak$ClusterConsumer$Type = ($GraphemeBreak$ClusterConsumer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GraphemeBreak$ClusterConsumer_ = $GraphemeBreak$ClusterConsumer$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewConfiguration" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"

export class $ViewConfiguration {
static readonly "SCROLL_BAR_SIZE": integer
static readonly "TOUCH_SLOP": integer
static readonly "MIN_SCROLLBAR_TOUCH_TARGET": integer
static readonly "MINIMUM_FLING_VELOCITY": integer
static readonly "MAXIMUM_FLING_VELOCITY": integer
static readonly "OVERSCROLL_DISTANCE": integer
static readonly "OVERFLING_DISTANCE": integer
static readonly "HORIZONTAL_SCROLL_FACTOR": float
static readonly "VERTICAL_SCROLL_FACTOR": float


public "getScaledMinScrollbarTouchTarget"(): integer
public static "get"(context: $Context$Type): $ViewConfiguration
public static "getScrollDefaultDelay"(): integer
public "getScaledScrollbarSize"(): integer
public static "getScrollBarFadeDuration"(): integer
public static "getPressedStateDuration"(): integer
public static "getHoverTooltipShowTimeout"(): integer
public static "getLongPressTimeout"(): integer
public static "getLongPressTooltipHideTimeout"(): integer
public static "getHoverTooltipHideTimeout"(): integer
public "getScaledFadingEdgeLength"(): integer
public "getScaledEdgeSlop"(): integer
public static "getTapTimeout"(): integer
public "getScaledTouchSlop"(): integer
public "getScaledHoverSlop"(): integer
public "getScaledMaximumFlingVelocity"(): integer
public "getScaledMinimumFlingVelocity"(): integer
public "getScaledOverscrollDistance"(): integer
public "getScaledVerticalScrollFactor"(): float
public "getScaledOverflingDistance"(): integer
public "getScaledHorizontalScrollFactor"(): float
get "scaledMinScrollbarTouchTarget"(): integer
get "scrollDefaultDelay"(): integer
get "scaledScrollbarSize"(): integer
get "scrollBarFadeDuration"(): integer
get "pressedStateDuration"(): integer
get "hoverTooltipShowTimeout"(): integer
get "longPressTimeout"(): integer
get "longPressTooltipHideTimeout"(): integer
get "hoverTooltipHideTimeout"(): integer
get "scaledFadingEdgeLength"(): integer
get "scaledEdgeSlop"(): integer
get "tapTimeout"(): integer
get "scaledTouchSlop"(): integer
get "scaledHoverSlop"(): integer
get "scaledMaximumFlingVelocity"(): integer
get "scaledMinimumFlingVelocity"(): integer
get "scaledOverscrollDistance"(): integer
get "scaledVerticalScrollFactor"(): float
get "scaledOverflingDistance"(): integer
get "scaledHorizontalScrollFactor"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewConfiguration$Type = ($ViewConfiguration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewConfiguration_ = $ViewConfiguration$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Paint" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Paint as $Paint$0, $Paint$Type as $Paint$0$Type} from "packages/icyllis/arc3d/core/$Paint"
import {$MaskFilter, $MaskFilter$Type} from "packages/icyllis/arc3d/core/$MaskFilter"
import {$ColorFilter, $ColorFilter$Type} from "packages/icyllis/arc3d/core/$ColorFilter"
import {$Shader, $Shader$Type} from "packages/icyllis/arc3d/core/$Shader"
import {$ImageFilter, $ImageFilter$Type} from "packages/icyllis/arc3d/core/$ImageFilter"

export class $Paint extends $Paint$0 {
static readonly "FILL": integer
static readonly "STROKE": integer
static readonly "FILL_AND_STROKE": integer
static readonly "CAP_BUTT": integer
static readonly "CAP_ROUND": integer
static readonly "CAP_SQUARE": integer
static readonly "JOIN_MITER": integer
static readonly "JOIN_ROUND": integer
static readonly "JOIN_BEVEL": integer
static readonly "NORMAL": integer
static readonly "BOLD": integer
static readonly "ITALIC": integer
static readonly "BOLD_ITALIC": integer
static readonly "FONT_STYLE_MASK": integer
static readonly "LINEAR_TEXT_FLAG": integer
static readonly "STROKE_AND_FILL": integer
static readonly "ALIGN_CENTER": integer
static readonly "ALIGN_INSIDE": integer
static readonly "ALIGN_OUTSIDE": integer
static readonly "FILTER_MODE_NEAREST": integer
static readonly "FILTER_MODE_LINEAR": integer
static readonly "MIPMAP_MODE_NONE": integer
static readonly "MIPMAP_MODE_NEAREST": integer
static readonly "MIPMAP_MODE_LINEAR": integer

constructor()
constructor(paint: $Paint$Type)

public "equals"(o: any): boolean
public "hashCode"(): integer
public "set"(paint: $Paint$Type): void
public "reset"(): void
public "setColor"(color: integer): void
public "setShader"(shader: $Shader$Type): void
public "getShader"(): $Shader
public "setTextStyle"(textStyle: integer): void
public "setTextSize"(textSize: float): void
public static "obtain"(): $Paint
public "recycle"(): void
public "setFontStyle"(fontStyle: integer): void
public "getFontSize"(): integer
public "getFontStyle"(): integer
public "isLinearText"(): boolean
public "isTextAntiAlias"(): boolean
public "getAlpha"(): integer
public "getColor"(): integer
public "setFontSize"(fontSize: integer): void
public "setAlpha"(a: integer): void
public "setStrokeWidth"(width: float): void
public "getStrokeWidth"(): float
public "setStyle"(style: integer): void
public "getColorFilter"(): $ColorFilter
public "getStrokeCap"(): integer
public "setStrokeMiter"(miter: float): void
public "setStrokeCap"(cap: integer): void
public "setStrokeJoin"(join: integer): void
public "getStrokeMiter"(): float
public "getStrokeJoin"(): integer
public "getAlphaF"(): float
public "setAlphaF"(a: float): void
public "setARGB"(a: float, r: float, g: float, b: float): void
public "setARGB"(a: integer, r: integer, g: integer, b: integer): void
public "setImageFilter"(imageFilter: $ImageFilter$Type): void
public "getImageFilter"(): $ImageFilter
public "getMaskFilter"(): $MaskFilter
public "setColorFilter"(colorFilter: $ColorFilter$Type): void
public "setMaskFilter"(maskFilter: $MaskFilter$Type): void
public "getBlendMode"(): $BlendMode
public "getTextSize"(): float
public "setTextAntiAlias"(textAntiAlias: boolean): void
public "setLinearText"(linearText: boolean): void
public "getTextStyle"(): integer
public "setBlendMode"(mode: $BlendMode$Type): void
public "getStyle"(): integer
set "color"(value: integer)
set "shader"(value: $Shader$Type)
get "shader"(): $Shader
set "textStyle"(value: integer)
set "textSize"(value: float)
set "fontStyle"(value: integer)
get "fontSize"(): integer
get "fontStyle"(): integer
get "linearText"(): boolean
get "textAntiAlias"(): boolean
get "alpha"(): integer
get "color"(): integer
set "fontSize"(value: integer)
set "alpha"(value: integer)
set "strokeWidth"(value: float)
get "strokeWidth"(): float
set "style"(value: integer)
get "colorFilter"(): $ColorFilter
get "strokeCap"(): integer
set "strokeMiter"(value: float)
set "strokeCap"(value: integer)
set "strokeJoin"(value: integer)
get "strokeMiter"(): float
get "strokeJoin"(): integer
get "alphaF"(): float
set "alphaF"(value: float)
set "imageFilter"(value: $ImageFilter$Type)
get "imageFilter"(): $ImageFilter
get "maskFilter"(): $MaskFilter
set "colorFilter"(value: $ColorFilter$Type)
set "maskFilter"(value: $MaskFilter$Type)
get "blendMode"(): $BlendMode
get "textSize"(): float
set "textAntiAlias"(value: boolean)
set "linearText"(value: boolean)
get "textStyle"(): integer
set "blendMode"(value: $BlendMode$Type)
get "style"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Paint$Type = ($Paint);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Paint_ = $Paint$Type;
}}
declare module "packages/icyllis/modernui/util/$ArrayMap" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$AbstractMap, $AbstractMap$Type} from "packages/java/util/$AbstractMap"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Map$Entry, $Map$Entry$Type} from "packages/java/util/$Map$Entry"

export class $ArrayMap<K, V> extends $AbstractMap<(K), (V)> implements $Map<(K), (V)> {

constructor(map: $Map$Type<(K), (V)>)
constructor(initialCapacity: integer, identityHashCode: boolean)
constructor(initialCapacity: integer)
constructor()

public "remove"(key: any): V
public "get"(key: any): V
public "put"(key: K, value: V): V
public "equals"(o: any): boolean
public "toString"(): string
public "values"(): $Collection<(V)>
public "append"(key: K, value: V): void
public "hashCode"(): integer
public "clear"(): void
public "isEmpty"(): boolean
public "size"(): integer
public "validate"(): void
public "entrySet"(): $Set<($Map$Entry<(K), (V)>)>
public "putAll"(map: $Map$Type<(any), (any)>): void
public "forEach"(action: $BiConsumer$Type<(any), (any)>): void
public "containsKey"(key: any): boolean
public "keySet"(): $Set<(K)>
public "containsValue"(value: any): boolean
public "erase"(): void
public "ensureCapacity"(minimumCapacity: integer): void
public "removeAll"(collection: $Collection$Type<(any)>): boolean
public "retainAll"(collection: $Collection$Type<(any)>): boolean
public "containsAll"(collection: $Collection$Type<(any)>): boolean
public "removeAt"(index: integer): V
public "indexOfKey"(key: any): integer
public "keyAt"(index: integer): K
public "valueAt"(index: integer): V
public "setValueAt"(index: integer, value: V): V
public "indexOfValue"(value: any): integer
public static "copyOf"<K, V>(arg0: $Map$Type<(any), (any)>): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V): $Map<(K), (V)>
public static "of"<K, V>(): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V, arg18: K, arg19: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V): $Map<(K), (V)>
public static "of"<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V): $Map<(K), (V)>
public static "entry"<K, V>(arg0: K, arg1: V): $Map$Entry<(K), (V)>
public static "ofEntries"<K, V>(...arg0: ($Map$Entry$Type<(any), (any)>)[]): $Map<(K), (V)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArrayMap$Type<K, V> = ($ArrayMap<(K), (V)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArrayMap_<K, V> = $ArrayMap$Type<(K), (V)>;
}}
declare module "packages/icyllis/modernui/util/$Property" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $Property<T, V> {

constructor(type: $Class$Type<(V)>, name: string)

public "getName"(): string
public "get"(arg0: T): V
public "set"(arg0: T, arg1: V): void
public "getType"(): $Class<(V)>
get "name"(): string
get "type"(): $Class<(V)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Property$Type<T, V> = ($Property<(T), (V)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Property_<T, V> = $Property$Type<(T), (V)>;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentOnAttachListener" {
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$FragmentManager, $FragmentManager$Type} from "packages/icyllis/modernui/fragment/$FragmentManager"

export interface $FragmentOnAttachListener {

 "onAttachFragment"(arg0: $FragmentManager$Type, arg1: $Fragment$Type): void

(arg0: $FragmentManager$Type, arg1: $Fragment$Type): void
}

export namespace $FragmentOnAttachListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentOnAttachListener$Type = ($FragmentOnAttachListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentOnAttachListener_ = $FragmentOnAttachListener$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewGroup$LayoutParams" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Paint, $Paint$Type} from "packages/icyllis/modernui/graphics/$Paint"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export class $ViewGroup$LayoutParams {
static readonly "MATCH_PARENT": integer
static readonly "WRAP_CONTENT": integer
 "width": integer
 "height": integer

constructor(source: $ViewGroup$LayoutParams$Type)
constructor(width: integer, height: integer)

public "resolveLayoutDirection"(layoutDirection: integer): void
public "onDebugDraw"(view: $View$Type, canvas: $Canvas$Type, paint: $Paint$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewGroup$LayoutParams$Type = ($ViewGroup$LayoutParams);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewGroup$LayoutParams_ = $ViewGroup$LayoutParams$Type;
}}
declare module "packages/icyllis/modernui/graphics/font/$BakedGlyph" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $BakedGlyph {
 "x": short
 "y": short
 "width": short
 "height": short
 "u1": float
 "v1": float
 "u2": float
 "v2": float

constructor()

public "toString"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BakedGlyph$Type = ($BakedGlyph);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BakedGlyph_ = $BakedGlyph$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuPopupHelper" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"
import {$MenuPresenter$Callback, $MenuPresenter$Callback$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter$Callback"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$MenuHelper, $MenuHelper$Type} from "packages/icyllis/modernui/view/menu/$MenuHelper"
import {$PopupWindow$OnDismissListener, $PopupWindow$OnDismissListener$Type} from "packages/icyllis/modernui/widget/$PopupWindow$OnDismissListener"
import {$MenuPopup, $MenuPopup$Type} from "packages/icyllis/modernui/view/menu/$MenuPopup"

export class $MenuPopupHelper implements $MenuHelper {

constructor(context: $Context$Type, menu: $MenuBuilder$Type)
constructor(context: $Context$Type, menu: $MenuBuilder$Type, anchorView: $View$Type, overflowOnly: boolean)
constructor(context: $Context$Type, menu: $MenuBuilder$Type, anchorView: $View$Type)

public "dismiss"(): void
public "setGravity"(gravity: integer): void
public "getGravity"(): integer
public "isShowing"(): boolean
public "getPopup"(): $MenuPopup
public "show"(): void
public "show"(x: integer, y: integer): void
public "setForceShowIcon"(forceShowIcon: boolean): void
public "tryShow"(): boolean
public "tryShow"(x: integer, y: integer): boolean
public "setPresenterCallback"(cb: $MenuPresenter$Callback$Type): void
public "setAnchorView"(anchor: $View$Type): void
public "setOnDismissListener"(listener: $PopupWindow$OnDismissListener$Type): void
set "gravity"(value: integer)
get "gravity"(): integer
get "showing"(): boolean
get "popup"(): $MenuPopup
set "forceShowIcon"(value: boolean)
set "presenterCallback"(value: $MenuPresenter$Callback$Type)
set "anchorView"(value: $View$Type)
set "onDismissListener"(value: $PopupWindow$OnDismissListener$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuPopupHelper$Type = ($MenuPopupHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuPopupHelper_ = $MenuPopupHelper$Type;
}}
declare module "packages/icyllis/modernui/core/$Context" {
import {$Resources, $Resources$Type} from "packages/icyllis/modernui/resources/$Resources"

export class $Context {

constructor()

public "getResources"(): $Resources
get "resources"(): $Resources
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Context$Type = ($Context);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Context_ = $Context$Type;
}}
declare module "packages/icyllis/modernui/widget/$SeekBar" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$AbsSeekBar, $AbsSeekBar$Type} from "packages/icyllis/modernui/widget/$AbsSeekBar"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$SeekBar$OnSeekBarChangeListener, $SeekBar$OnSeekBarChangeListener$Type} from "packages/icyllis/modernui/widget/$SeekBar$OnSeekBarChangeListener"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $SeekBar extends $AbsSeekBar {
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setOnSeekBarChangeListener"(l: $SeekBar$OnSeekBarChangeListener$Type): void
set "onSeekBarChangeListener"(value: $SeekBar$OnSeekBarChangeListener$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SeekBar$Type = ($SeekBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SeekBar_ = $SeekBar$Type;
}}
declare module "packages/icyllis/modernui/graphics/$CustomDrawable" {
import {$Matrix4, $Matrix4$Type} from "packages/icyllis/arc3d/core/$Matrix4"
import {$RectF, $RectF$Type} from "packages/icyllis/modernui/graphics/$RectF"
import {$Rect2i, $Rect2i$Type} from "packages/icyllis/arc3d/core/$Rect2i"
import {$CustomDrawable$DrawHandler, $CustomDrawable$DrawHandler$Type} from "packages/icyllis/modernui/graphics/$CustomDrawable$DrawHandler"
import {$ImageInfo, $ImageInfo$Type} from "packages/icyllis/arc3d/core/$ImageInfo"

export interface $CustomDrawable {

 "getBounds"(): $RectF
 "snapDrawHandler"(arg0: integer, arg1: $Matrix4$Type, arg2: $Rect2i$Type, arg3: $ImageInfo$Type): $CustomDrawable$DrawHandler
}

export namespace $CustomDrawable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomDrawable$Type = ($CustomDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomDrawable_ = $CustomDrawable$Type;
}}
declare module "packages/icyllis/modernui/widget/$RelativeLayout" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $RelativeLayout extends $ViewGroup {
static readonly "TRUE": integer
static readonly "LEFT_OF": integer
static readonly "RIGHT_OF": integer
static readonly "ABOVE": integer
static readonly "BELOW": integer
static readonly "ALIGN_BASELINE": integer
static readonly "ALIGN_LEFT": integer
static readonly "ALIGN_TOP": integer
static readonly "ALIGN_RIGHT": integer
static readonly "ALIGN_BOTTOM": integer
static readonly "ALIGN_PARENT_LEFT": integer
static readonly "ALIGN_PARENT_TOP": integer
static readonly "ALIGN_PARENT_RIGHT": integer
static readonly "ALIGN_PARENT_BOTTOM": integer
static readonly "CENTER_IN_PARENT": integer
static readonly "CENTER_HORIZONTAL": integer
static readonly "CENTER_VERTICAL": integer
static readonly "START_OF": integer
static readonly "END_OF": integer
static readonly "ALIGN_START": integer
static readonly "ALIGN_END": integer
static readonly "ALIGN_PARENT_START": integer
static readonly "ALIGN_PARENT_END": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setIgnoreGravity"(viewId: integer): void
public "getIgnoreGravity"(): integer
public "shouldDelayChildPressedState"(): boolean
public "setVerticalGravity"(verticalGravity: integer): void
public "getBaseline"(): integer
public "setGravity"(gravity: integer): void
public "getGravity"(): integer
public "requestLayout"(): void
public "setHorizontalGravity"(horizontalGravity: integer): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "ignoreGravity"(value: integer)
get "ignoreGravity"(): integer
set "verticalGravity"(value: integer)
get "baseline"(): integer
set "gravity"(value: integer)
get "gravity"(): integer
set "horizontalGravity"(value: integer)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RelativeLayout$Type = ($RelativeLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RelativeLayout_ = $RelativeLayout$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$FontFamily" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $FontFamily {
static readonly "SANS_SERIF": $FontFamily
static readonly "SERIF": $FontFamily
static readonly "MONOSPACED": $FontFamily

constructor(font: $Font$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "getSystemFontWithAlias"(name: string): $FontFamily
public static "getSystemFontAliases"(): $Map<(string), (string)>
public "getClosestMatch"(style: integer): $Font
public "isEastAsianFamily"(): boolean
public static "createFamily"(stream: $InputStream$Type, register: boolean): $FontFamily
public static "createFamily"(file: $File$Type, register: boolean): $FontFamily
public static "createFamilies"(file: $File$Type, register: boolean): ($FontFamily)[]
public static "createFamilies"(stream: $InputStream$Type, register: boolean): ($FontFamily)[]
public static "getSystemFontMap"(): $Map<(string), ($FontFamily)>
public "getFamilyName"(): string
public "getFamilyName"(locale: $Locale$Type): string
public "isColorEmojiFamily"(): boolean
public "hasGlyph"(ch: integer): boolean
public "hasGlyph"(ch: integer, vs: integer): boolean
get "systemFontAliases"(): $Map<(string), (string)>
get "eastAsianFamily"(): boolean
get "systemFontMap"(): $Map<(string), ($FontFamily)>
get "familyName"(): string
get "colorEmojiFamily"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FontFamily$Type = ($FontFamily);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FontFamily_ = $FontFamily$Type;
}}
declare module "packages/icyllis/modernui/view/$ViewRoot" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$ActionMode$Callback, $ActionMode$Callback$Type} from "packages/icyllis/modernui/view/$ActionMode$Callback"
import {$Handler, $Handler$Type} from "packages/icyllis/modernui/core/$Handler"
import {$ActionMode, $ActionMode$Type} from "packages/icyllis/modernui/view/$ActionMode"
import {$Point, $Point$Type} from "packages/icyllis/modernui/graphics/$Point"
import {$InputEvent, $InputEvent$Type} from "packages/icyllis/modernui/view/$InputEvent"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Choreographer, $Choreographer$Type} from "packages/icyllis/modernui/core/$Choreographer"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$AttachInfo$Callbacks, $AttachInfo$Callbacks$Type} from "packages/icyllis/modernui/view/$AttachInfo$Callbacks"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$LayoutTransition, $LayoutTransition$Type} from "packages/icyllis/modernui/animation/$LayoutTransition"

export class $ViewRoot implements $ViewParent, $AttachInfo$Callbacks {
readonly "mHandler": $Handler
readonly "mChoreographer": $Choreographer


public "getParent"(): $ViewParent
public "loadSystemProperties"(debugLayoutSupplier: $BooleanSupplier$Type): void
public "focusableViewAvailable"(v: $View$Type): void
public "requestChildRectangleOnScreen"(child: $View$Type, rectangle: $Rect$Type, immediate: boolean): boolean
public "keyboardNavigationClusterSearch"(currentCluster: $View$Type, direction: integer): $View
public "onStartNestedScroll"(child: $View$Type, target: $View$Type, axes: integer, type: integer): boolean
public "childHasTransientStateChanged"(child: $View$Type, hasTransientState: boolean): void
public "onNestedScrollAccepted"(child: $View$Type, target: $View$Type, axes: integer, type: integer): void
public "dispatchInvalidateOnAnimation"(view: $View$Type): void
public "canResolveTextDirection"(): boolean
public "childDrawableStateChanged"(child: $View$Type): void
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "dispatchInvalidateDelayed"(view: $View$Type, delayMilliseconds: long): void
public "startActionModeForChild"(originalView: $View$Type, callback: $ActionMode$Callback$Type, type: integer): $ActionMode
public "getChildVisibleRect"(child: $View$Type, r: $Rect$Type, offset: $Point$Type): boolean
public "showContextMenuForChild"(originalView: $View$Type, x: float, y: float): boolean
public "requestDisallowInterceptTouchEvent"(disallowIntercept: boolean): void
public "requestTransitionStart"(transition: $LayoutTransition$Type): void
public "getNestedScrollAxes"(): integer
public "onNestedPreFling"(target: $View$Type, velocityX: float, velocityY: float): boolean
public "onStopNestedScroll"(target: $View$Type, type: integer): void
public "onNestedPreScroll"(target: $View$Type, dx: integer, dy: integer, consumed: (integer)[], type: integer): void
public "onNestedScroll"(target: $View$Type, dxConsumed: integer, dyConsumed: integer, dxUnconsumed: integer, dyUnconsumed: integer, type: integer, consumed: (integer)[]): void
public "onNestedFling"(target: $View$Type, velocityX: float, velocityY: float, consumed: boolean): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(menu: $ContextMenu$Type): void
public "bringChildToFront"(child: $View$Type): void
public "getView"(): $View
public "enqueueInputEvent"(event: $InputEvent$Type): void
public "cancelInvalidate"(view: $View$Type): void
public "setView"(view: $View$Type): void
public "getLayoutDirection"(): integer
public "setFrame"(width: integer, height: integer): void
public "requestLayout"(): void
public "requestChildFocus"(child: $View$Type, focused: $View$Type): void
public static "isViewDescendantOf"(child: $View$Type, parent: $View$Type): boolean
public "clearChildFocus"(child: $View$Type): void
public "focusSearch"(focused: $View$Type, direction: integer): $View
public "performHapticFeedback"(arg0: integer, arg1: boolean): boolean
public "playSoundEffect"(arg0: integer): void
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "nestedScrollAxes"(): integer
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "view"(): $View
set "view"(value: $View$Type)
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewRoot$Type = ($ViewRoot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewRoot_ = $ViewRoot$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnFocusChangeListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $View$OnFocusChangeListener {

 "onFocusChange"(arg0: $View$Type, arg1: boolean): void

(arg0: $View$Type, arg1: boolean): void
}

export namespace $View$OnFocusChangeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnFocusChangeListener$Type = ($View$OnFocusChangeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnFocusChangeListener_ = $View$OnFocusChangeListener$Type;
}}
declare module "packages/icyllis/modernui/text/method/$LinkMovementMethod" {
import {$MovementMethod, $MovementMethod$Type} from "packages/icyllis/modernui/text/method/$MovementMethod"
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$ScrollingMovementMethod, $ScrollingMovementMethod$Type} from "packages/icyllis/modernui/text/method/$ScrollingMovementMethod"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export class $LinkMovementMethod extends $ScrollingMovementMethod {

constructor()

public static "getInstance"(): $MovementMethod
public "initialize"(widget: $TextView$Type, text: $Spannable$Type): void
public "onTakeFocus"(view: $TextView$Type, text: $Spannable$Type, dir: integer): void
public "onTouchEvent"(widget: $TextView$Type, buffer: $Spannable$Type, event: $MotionEvent$Type): boolean
public "canSelectArbitrarily"(): boolean
get "instance"(): $MovementMethod
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LinkMovementMethod$Type = ($LinkMovementMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LinkMovementMethod_ = $LinkMovementMethod$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/$ShaderUniform" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
/**
 * 
 * @deprecated
 */
export class $ShaderUniform<T> {

constructor(location: integer)

public "load"(arg0: T): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShaderUniform$Type<T> = ($ShaderUniform<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShaderUniform_<T> = $ShaderUniform$Type<(T)>;
}}
declare module "packages/icyllis/modernui/view/$ContextMenu$ContextMenuInfo" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ContextMenu$ContextMenuInfo {

}

export namespace $ContextMenu$ContextMenuInfo {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$ContextMenuInfo$Type = ($ContextMenu$ContextMenuInfo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu$ContextMenuInfo_ = $ContextMenu$ContextMenuInfo$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$TestCompare" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
/**
 * 
 * @deprecated
 */
export class $TestCompare {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TestCompare$Type = ($TestCompare);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TestCompare_ = $TestCompare$Type;
}}
declare module "packages/icyllis/modernui/util/$Half" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"

export class $Half extends number implements $Comparable<($Half)> {
static readonly "SIZE": integer
static readonly "BYTES": integer
static readonly "EPSILON": short
static readonly "MAX_EXPONENT": integer
static readonly "MIN_EXPONENT": integer
static readonly "LOWEST_VALUE": short
static readonly "MAX_VALUE": short
static readonly "MIN_NORMAL": short
static readonly "MIN_VALUE": short
static readonly "NaN": short
static readonly "NEGATIVE_INFINITY": short
static readonly "NEGATIVE_ZERO": short
static readonly "POSITIVE_INFINITY": short
static readonly "POSITIVE_ZERO": short

constructor(value: double)
constructor(value: short)
constructor(value: string)
constructor(value: float)

public static "equals"(x: short, y: short): boolean
public "equals"(o: any): boolean
public static "toString"(h: short): string
public "toString"(): string
public static "hashCode"(h: short): integer
public "hashCode"(): integer
public static "abs"(h: short): short
public static "min"(x: short, y: short): short
public static "max"(x: short, y: short): short
public static "floor"(h: short): short
public static "ceil"(h: short): short
public static "copySign"(magnitude: short, sign: short): short
public "compareTo"(h: $Half$Type): integer
public static "compare"(x: short, y: short): integer
public "byteValue"(): byte
public "shortValue"(): short
public "intValue"(): integer
public "longValue"(): long
public "floatValue"(): float
public "doubleValue"(): double
public static "valueOf"(s: string): $Half
public static "valueOf"(h: short): $Half
public static "valueOf"(f: float): $Half
public static "toHexString"(h: short): string
public static "isNaN"(h: short): boolean
public "isNaN"(): boolean
public static "isInfinite"(h: short): boolean
public static "getExponent"(h: short): integer
public static "round"(h: short): short
public static "isNormalized"(h: short): boolean
public static "getSign"(h: short): integer
public static "toFloat"(h: short): float
public static "greater"(x: short, y: short): boolean
public static "trunc"(h: short): short
public static "getSignificand"(h: short): integer
public static "less"(x: short, y: short): boolean
public static "greaterEquals"(x: short, y: short): boolean
public static "toHalf"(f: float): short
public static "lessEquals"(x: short, y: short): boolean
public static "halfToIntBits"(h: short): integer
public static "halfToRawIntBits"(h: short): integer
public "halfValue"(): short
public static "intBitsToHalf"(bits: integer): short
public static "halfToShortBits"(h: short): short
public static "parseHalf"(s: string): short
get "naN"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Half$Type = ($Half);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Half_ = $Half$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$TextLayout" {
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"

export class $TextLayout {
static readonly "EMPTY": $TextLayout
static readonly "STANDARD_BASELINE_OFFSET": integer
static "sBaselineOffset": float


public "toString"(): string
public "drawText"(matrix: $Matrix4f$Type, source: $MultiBufferSource$Type, x: float, top: float, r: integer, g: integer, b: integer, a: integer, isShadow: boolean, preferredMode: integer, polygonOffset: boolean, bgColor: integer, packedLight: integer): float
public static "makeEmpty"(): $TextLayout
public "getMemorySize"(): integer
public "getAdvances"(): (float)[]
public "getPositions"(): (float)[]
public "hasEffect"(): boolean
public "drawTextOutline"(matrix: $Matrix4f$Type, source: $MultiBufferSource$Type, x: float, top: float, r: integer, g: integer, b: integer, a: integer, packedLight: integer): void
public "hasColorEmoji"(): boolean
public "getCharCount"(): integer
public "getTextBuf"(): (character)[]
public "getTotalAdvance"(): float
public "getFont"(i: integer): $Font
public "getGlyphs"(): (integer)[]
public "getLineBoundaries"(): (integer)[]
public "getGlyphFlags"(): (integer)[]
public "getFontVector"(): ($Font)[]
public "getFontIndices"(): (byte)[]
get "memorySize"(): integer
get "advances"(): (float)[]
get "positions"(): (float)[]
get "charCount"(): integer
get "textBuf"(): (character)[]
get "totalAdvance"(): float
get "glyphs"(): (integer)[]
get "lineBoundaries"(): (integer)[]
get "glyphFlags"(): (integer)[]
get "fontVector"(): ($Font)[]
get "fontIndices"(): (byte)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextLayout$Type = ($TextLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextLayout_ = $TextLayout$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuPopup" {
import {$ShowableListMenu, $ShowableListMenu$Type} from "packages/icyllis/modernui/view/menu/$ShowableListMenu"
import {$AdapterView$OnItemClickListener, $AdapterView$OnItemClickListener$Type} from "packages/icyllis/modernui/widget/$AdapterView$OnItemClickListener"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"
import {$AdapterView, $AdapterView$Type} from "packages/icyllis/modernui/widget/$AdapterView"
import {$MenuView, $MenuView$Type} from "packages/icyllis/modernui/view/menu/$MenuView"
import {$MenuItemImpl, $MenuItemImpl$Type} from "packages/icyllis/modernui/view/menu/$MenuItemImpl"
import {$MenuPresenter, $MenuPresenter$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$MenuPresenter$Callback, $MenuPresenter$Callback$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter$Callback"
import {$ListView, $ListView$Type} from "packages/icyllis/modernui/widget/$ListView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$SubMenuBuilder, $SubMenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$SubMenuBuilder"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$PopupWindow$OnDismissListener, $PopupWindow$OnDismissListener$Type} from "packages/icyllis/modernui/widget/$PopupWindow$OnDismissListener"

export class $MenuPopup implements $ShowableListMenu, $MenuPresenter, $AdapterView$OnItemClickListener {

constructor()

public "onItemClick"(parent: $AdapterView$Type<(any)>, view: $View$Type, position: integer, id: long): void
public "getEpicenterBounds"(): $Rect
public "setEpicenterBounds"(bounds: $Rect$Type): void
public "getId"(): integer
public "setGravity"(arg0: integer): void
public "initForMenu"(context: $Context$Type, menu: $MenuBuilder$Type): void
public "addMenu"(arg0: $MenuBuilder$Type): void
public "setForceShowIcon"(arg0: boolean): void
public "setShowTitle"(arg0: boolean): void
public "getMenuView"(root: $ViewGroup$Type): $MenuView
public "setHorizontalOffset"(arg0: integer): void
public "setAnchorView"(arg0: $View$Type): void
public "setVerticalOffset"(arg0: integer): void
public "expandItemActionView"(menu: $MenuBuilder$Type, item: $MenuItemImpl$Type): boolean
public "collapseItemActionView"(menu: $MenuBuilder$Type, item: $MenuItemImpl$Type): boolean
public "setOnDismissListener"(arg0: $PopupWindow$OnDismissListener$Type): void
public "getListView"(): $ListView
public "dismiss"(): void
public "isShowing"(): boolean
public "show"(): void
public "onSubMenuSelected"(arg0: $SubMenuBuilder$Type): boolean
public "updateMenuView"(arg0: boolean): void
public "onCloseMenu"(arg0: $MenuBuilder$Type, arg1: boolean): void
public "flagActionItems"(): boolean
public "setCallback"(arg0: $MenuPresenter$Callback$Type): void
get "epicenterBounds"(): $Rect
set "epicenterBounds"(value: $Rect$Type)
get "id"(): integer
set "gravity"(value: integer)
set "forceShowIcon"(value: boolean)
set "showTitle"(value: boolean)
set "horizontalOffset"(value: integer)
set "anchorView"(value: $View$Type)
set "verticalOffset"(value: integer)
set "onDismissListener"(value: $PopupWindow$OnDismissListener$Type)
get "listView"(): $ListView
get "showing"(): boolean
set "callback"(value: $MenuPresenter$Callback$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuPopup$Type = ($MenuPopup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuPopup_ = $MenuPopup$Type;
}}
declare module "packages/icyllis/modernui/mc/mixin/$AccessPostChain" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$PostPass, $PostPass$Type} from "packages/net/minecraft/client/renderer/$PostPass"

export interface $AccessPostChain {

 "getPasses"(): $List<($PostPass)>

(): $List<($PostPass)>
}

export namespace $AccessPostChain {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessPostChain$Type = ($AccessPostChain);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessPostChain_ = $AccessPostChain$Type;
}}
declare module "packages/icyllis/modernui/widget/$ExpandableListView$OnGroupCollapseListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ExpandableListView$OnGroupCollapseListener {

 "onGroupCollapse"(arg0: integer): void

(arg0: integer): void
}

export namespace $ExpandableListView$OnGroupCollapseListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandableListView$OnGroupCollapseListener$Type = ($ExpandableListView$OnGroupCollapseListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandableListView$OnGroupCollapseListener_ = $ExpandableListView$OnGroupCollapseListener$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Path" {
import {$RectF, $RectF$Type} from "packages/icyllis/modernui/graphics/$RectF"
import {$Path as $Path$0, $Path$Type as $Path$0$Type} from "packages/icyllis/arc3d/core/$Path"

export class $Path extends $Path$0 {
static readonly "FILL_NON_ZERO": integer
static readonly "FILL_EVEN_ODD": integer
static readonly "VERB_MOVE": byte
static readonly "VERB_LINE": byte
static readonly "VERB_QUAD": byte
static readonly "VERB_CUBIC": byte
static readonly "VERB_CLOSE": byte
static readonly "DIRECTION_CW": integer
static readonly "DIRECTION_CCW": integer
static readonly "SEGMENT_LINE": integer
static readonly "SEGMENT_QUAD": integer
static readonly "SEGMENT_CUBIC": integer
static readonly "APPROXIMATE_ARC_WITH_CUBICS": integer
static readonly "APPROXIMATE_CONIC_WITH_QUADS": integer

constructor()
constructor(path: $Path$Type)

public "clear"(): void
public "getBounds"(out: $RectF$Type): void
public "reset"(): void
public "recycle"(): void
public "relativeCubicTo"(dx1: float, dy1: float, dx2: float, dy2: float, dx3: float, dy3: float): void
public "relativeLineTo"(dx: float, dy: float): void
public "relativeMoveTo"(dx: float, dy: float): void
public "relativeQuadTo"(dx1: float, dy1: float, dx2: float, dy2: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Path$Type = ($Path);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Path_ = $Path$Type;
}}
declare module "packages/icyllis/modernui/widget/$DirectedAcyclicGraph" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"

export class $DirectedAcyclicGraph<T> {


public "clear"(): void
public "contains"(node: T): boolean
public "addNode"(node: T): void
public "getSortedList"(): $ArrayList<(T)>
public "addEdge"(node: T, incomingEdge: T): void
public "getIncomingEdges"(node: T): $List<(T)>
public "hasOutgoingEdges"(node: T): boolean
public "getOutgoingEdges"(node: T): $List<(T)>
get "sortedList"(): $ArrayList<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DirectedAcyclicGraph$Type<T> = ($DirectedAcyclicGraph<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DirectedAcyclicGraph_<T> = $DirectedAcyclicGraph$Type<(T)>;
}}
declare module "packages/icyllis/modernui/text/$Editable$Factory" {
import {$Editable, $Editable$Type} from "packages/icyllis/modernui/text/$Editable"

export interface $Editable$Factory {

 "newEditable"(arg0: charseq): $Editable

(arg0: charseq): $Editable
}

export namespace $Editable$Factory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Editable$Factory$Type = ($Editable$Factory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Editable$Factory_ = $Editable$Factory$Type;
}}
declare module "packages/icyllis/modernui/annotation/$WorkerThread" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $WorkerThread extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $WorkerThread {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorkerThread$Type = ($WorkerThread);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorkerThread_ = $WorkerThread$Type;
}}
declare module "packages/icyllis/modernui/widget/$AdapterView$OnItemClickListener" {
import {$AdapterView, $AdapterView$Type} from "packages/icyllis/modernui/widget/$AdapterView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $AdapterView$OnItemClickListener {

 "onItemClick"(arg0: $AdapterView$Type<(any)>, arg1: $View$Type, arg2: integer, arg3: long): void

(arg0: $AdapterView$Type<(any)>, arg1: $View$Type, arg2: integer, arg3: long): void
}

export namespace $AdapterView$OnItemClickListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdapterView$OnItemClickListener$Type = ($AdapterView$OnItemClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdapterView$OnItemClickListener_ = $AdapterView$OnItemClickListener$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$VanillaLayoutKey" {
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"

export class $VanillaLayoutKey {

constructor()

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "update"(text: string, style: $Style$Type): $VanillaLayoutKey
public "copy"(): $VanillaLayoutKey
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaLayoutKey$Type = ($VanillaLayoutKey);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaLayoutKey_ = $VanillaLayoutKey$Type;
}}
declare module "packages/icyllis/modernui/text/method/$SingleLineTransformationMethod" {
import {$ReplacementTransformationMethod, $ReplacementTransformationMethod$Type} from "packages/icyllis/modernui/text/method/$ReplacementTransformationMethod"

export class $SingleLineTransformationMethod extends $ReplacementTransformationMethod {


public static "getInstance"(): $SingleLineTransformationMethod
get "instance"(): $SingleLineTransformationMethod
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SingleLineTransformationMethod$Type = ($SingleLineTransformationMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SingleLineTransformationMethod_ = $SingleLineTransformationMethod$Type;
}}
declare module "packages/icyllis/modernui/view/$View" {
import {$RectF, $RectF$Type} from "packages/icyllis/modernui/graphics/$RectF"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$ViewRoot, $ViewRoot$Type} from "packages/icyllis/modernui/view/$ViewRoot"
import {$View$OnTouchListener, $View$OnTouchListener$Type} from "packages/icyllis/modernui/view/$View$OnTouchListener"
import {$View$OnHoverListener, $View$OnHoverListener$Type} from "packages/icyllis/modernui/view/$View$OnHoverListener"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$Handler, $Handler$Type} from "packages/icyllis/modernui/core/$Handler"
import {$View$OnClickListener, $View$OnClickListener$Type} from "packages/icyllis/modernui/view/$View$OnClickListener"
import {$View$OnLayoutChangeListener, $View$OnLayoutChangeListener$Type} from "packages/icyllis/modernui/view/$View$OnLayoutChangeListener"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$Matrix, $Matrix$Type} from "packages/icyllis/modernui/graphics/$Matrix"
import {$Point, $Point$Type} from "packages/icyllis/modernui/graphics/$Point"
import {$ActionMode, $ActionMode$Type} from "packages/icyllis/modernui/view/$ActionMode"
import {$View$OnContextClickListener, $View$OnContextClickListener$Type} from "packages/icyllis/modernui/view/$View$OnContextClickListener"
import {$View$OnGenericMotionListener, $View$OnGenericMotionListener$Type} from "packages/icyllis/modernui/view/$View$OnGenericMotionListener"
import {$View$OnAttachStateChangeListener, $View$OnAttachStateChangeListener$Type} from "packages/icyllis/modernui/view/$View$OnAttachStateChangeListener"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$View$OnCreateContextMenuListener, $View$OnCreateContextMenuListener$Type} from "packages/icyllis/modernui/view/$View$OnCreateContextMenuListener"
import {$View$OnLongClickListener, $View$OnLongClickListener$Type} from "packages/icyllis/modernui/view/$View$OnLongClickListener"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$ViewTreeObserver, $ViewTreeObserver$Type} from "packages/icyllis/modernui/view/$ViewTreeObserver"
import {$KeyEvent$DispatcherState, $KeyEvent$DispatcherState$Type} from "packages/icyllis/modernui/view/$KeyEvent$DispatcherState"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$StateListAnimator, $StateListAnimator$Type} from "packages/icyllis/modernui/animation/$StateListAnimator"
import {$ActionMode$Callback, $ActionMode$Callback$Type} from "packages/icyllis/modernui/view/$ActionMode$Callback"
import {$Drawable$Callback, $Drawable$Callback$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable$Callback"
import {$View$OnFocusChangeListener, $View$OnFocusChangeListener$Type} from "packages/icyllis/modernui/view/$View$OnFocusChangeListener"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$DragEvent, $DragEvent$Type} from "packages/icyllis/modernui/view/$DragEvent"
import {$View$OnDragListener, $View$OnDragListener$Type} from "packages/icyllis/modernui/view/$View$OnDragListener"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$View$DragShadow, $View$DragShadow$Type} from "packages/icyllis/modernui/view/$View$DragShadow"
import {$View$OnScrollChangeListener, $View$OnScrollChangeListener$Type} from "packages/icyllis/modernui/view/$View$OnScrollChangeListener"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$View$OnKeyListener, $View$OnKeyListener$Type} from "packages/icyllis/modernui/view/$View$OnKeyListener"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$PointerIcon, $PointerIcon$Type} from "packages/icyllis/modernui/view/$PointerIcon"

export class $View implements $Drawable$Callback {
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "toString"(): string
public "dp"(value: float): integer
public "sp"(value: float): integer
public "getParent"(): $ViewParent
public "getContext"(): $Context
public "getId"(): integer
public "getHandler"(): $Handler
public "post"(action: $Runnable$Type): boolean
public "isEnabled"(): boolean
public "getTag"(key: integer): any
public "invalidate"(): void
public "resolveLayoutDirection"(): boolean
public "isShowingLayoutBounds"(): boolean
public "canScrollHorizontally"(direction: integer): boolean
public "canScrollVertically"(direction: integer): boolean
public "isHorizontalScrollBarEnabled"(): boolean
public "isVerticalScrollBarEnabled"(): boolean
public "resolveRtlPropertiesIfNeeded"(): boolean
public "setFocusableInTouchMode"(focusableInTouchMode: boolean): void
public "isFocusableInTouchMode"(): boolean
public "getMeasuredWidthAndState"(): integer
public "findViewByPredicateInsideOut"<T extends $View>(start: $View$Type, predicate: $Predicate$Type<($View$Type)>): T
public static "combineMeasuredStates"(curState: integer, newState: integer): integer
public "resolveLayoutParams"(): void
public "cancelPendingInputEvents"(): void
public "setContextClickable"(contextClickable: boolean): void
public "drawableHotspotChanged"(x: float, y: float): void
public "getMeasuredHeightAndState"(): integer
public static "resolveSizeAndState"(size: integer, measureSpec: integer, childMeasuredState: integer): integer
public "refreshDrawableState"(): void
public "addKeyboardNavigationClusters"(views: $Collection$Type<($View$Type)>, direction: integer): void
public "getWindowVisibility"(): integer
public "isKeyboardNavigationCluster"(): boolean
public "restoreDefaultFocus"(): boolean
public "setNextFocusRightId"(nextFocusRightId: integer): void
public "getRevealOnFocusHint"(): boolean
public "setNextClusterForwardId"(nextClusterForwardId: integer): void
public "setHorizontalScrollBarEnabled"(enabled: boolean): void
public "setRevealOnFocusHint"(revealOnFocus: boolean): void
public "setFocusedByDefault"(isFocusedByDefault: boolean): void
public "keyboardNavigationClusterSearch"(currentCluster: $View$Type, direction: integer): $View
public "setNextFocusForwardId"(nextFocusForwardId: integer): void
public "hasExplicitFocusable"(): boolean
public "getNextClusterForwardId"(): integer
public "setVerticalScrollbarTrackDrawable"(drawable: $Drawable$Type): void
public "getNextFocusRightId"(): integer
public "getScrollBarDefaultDelayBeforeFade"(): integer
public "setScrollBarFadeDuration"(scrollBarFadeDuration: integer): void
public "isScrollbarFadingEnabled"(): boolean
public "setScrollBarDefaultDelayBeforeFade"(scrollBarDefaultDelayBeforeFade: integer): void
public "setVerticalScrollBarEnabled"(enabled: boolean): void
public "getVerticalScrollbarThumbDrawable"(): $Drawable
public "setScrollbarFadingEnabled"(fadeScrollbars: boolean): void
public "getVerticalScrollbarTrackDrawable"(): $Drawable
public "requestRectangleOnScreen"(rectangle: $Rect$Type, immediate: boolean): boolean
public "requestRectangleOnScreen"(rectangle: $Rect$Type): boolean
public "postInvalidateOnAnimation"(): void
public "getVerticalScrollbarWidth"(): integer
public "setKeyboardNavigationCluster"(isCluster: boolean): void
public "setFocusedInCluster"(): void
public "getNextFocusForwardId"(): integer
public "setVerticalScrollbarThumbDrawable"(drawable: $Drawable$Type): void
public "getScrollBarFadeDuration"(): integer
public "getVerticalFadingEdgeLength"(): integer
public "setVerticalFadingEdgeEnabled"(verticalFadingEdgeEnabled: boolean): void
public "setNestedScrollingEnabled"(enabled: boolean): void
public "dispatchNestedScroll"(dxConsumed: integer, dyConsumed: integer, dxUnconsumed: integer, dyUnconsumed: integer, offsetInWindow: (integer)[], type: integer, consumed: (integer)[]): boolean
public "getLocationInWindow"(outLocation: (integer)[]): void
public "setStateListAnimator"(stateListAnimator: $StateListAnimator$Type): void
public "setScrollIndicators"(indicators: integer): void
public "setScrollIndicators"(indicators: integer, mask: integer): void
public "isNestedScrollingEnabled"(): boolean
public "hasNestedScrollingParent"(type: integer): boolean
public "dispatchNestedPreFling"(velocityX: float, velocityY: float): boolean
public "onVisibilityAggregated"(isVisible: boolean): void
public "getStateListAnimator"(): $StateListAnimator
public "jumpDrawablesToCurrentState"(): void
public "dispatchNestedFling"(velocityX: float, velocityY: float, consumed: boolean): boolean
public "dispatchNestedPreScroll"(dx: integer, dy: integer, consumed: (integer)[], offsetInWindow: (integer)[], type: integer): boolean
public "isVerticalFadingEdgeEnabled"(): boolean
public "getFadingEdgeLength"(): integer
public "hasOverlappingRendering"(): boolean
public "setHasTransientState"(hasTransientState: boolean): void
public "isHorizontalFadingEdgeEnabled"(): boolean
public "getHasOverlappingRendering"(): boolean
public "hasTranslationTransientState"(): boolean
public "onCancelPendingInputEvents"(): void
public "setDuplicateParentStateEnabled"(enabled: boolean): void
public "setHorizontalFadingEdgeEnabled"(horizontalFadingEdgeEnabled: boolean): void
public "forceHasOverlappingRendering"(hasOverlappingRendering: boolean): void
public "getScrollIndicators"(): integer
public "setHasTranslationTransientState"(hasTranslationTransientState: boolean): void
public "isDuplicateParentStateEnabled"(): boolean
public "setSoundEffectsEnabled"(soundEffectsEnabled: boolean): void
public "getRawLayoutDirection"(): integer
public "findViewByPredicate"<T extends $View>(predicate: $Predicate$Type<($View$Type)>): T
public "isTextAlignmentInherited"(): boolean
public "canResolveTextDirection"(): boolean
public "transformFromViewToWindowSpace"(inOutLocation: (integer)[]): void
public "postOnAnimationDelayed"(action: $Runnable$Type, delayMillis: long): void
public "performHapticFeedback"(feedbackConstant: integer): boolean
public "performHapticFeedback"(feedbackConstant: integer, flags: integer): boolean
public "resolveTextAlignment"(): boolean
public "getViewTreeObserver"(): $ViewTreeObserver
public "dispatchDrawableHotspotChanged"(x: float, y: float): void
public "isTextDirectionResolved"(): boolean
public "isHapticFeedbackEnabled"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "setForegroundGravity"(gravity: integer): void
public "isLayoutDirectionInherited"(): boolean
public "getRawTextDirection"(): integer
public "toGlobalMotionEvent"(ev: $MotionEvent$Type): boolean
public "isForegroundInsidePadding"(): boolean
public "resolveTextDirection"(): boolean
public "transformMatrixToLocal"(matrix: $Matrix$Type): void
public "canResolveLayoutDirection"(): boolean
public "setHapticFeedbackEnabled"(hapticFeedbackEnabled: boolean): void
public "getForegroundGravity"(): integer
public "transformMatrixToGlobal"(matrix: $Matrix$Type): void
public "getLocationOnScreen"(outLocation: (integer)[]): void
public "isTextDirectionInherited"(): boolean
public "getRawTextAlignment"(): integer
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "mapRectFromViewToScreenCoords"(rect: $RectF$Type, clipToParent: boolean): void
public "postInvalidateDelayed"(delayMilliseconds: long): void
public "isSoundEffectsEnabled"(): boolean
public "getOnLongClickListener"(): $View$OnLongClickListener
public "isInScrollingContainer"(): boolean
public "getKeyDispatcherState"(): $KeyEvent$DispatcherState
public "onGenericMotionEvent"(event: $MotionEvent$Type): boolean
public "getLocalVisibleRect"(r: $Rect$Type): boolean
public "dispatchStartTemporaryDetach"(): void
public "dispatchFinishTemporaryDetach"(): void
public "setOnFocusChangeListener"(l: $View$OnFocusChangeListener$Type): void
public "onFinishTemporaryDetach"(): void
public "dispatchKeyShortcutEvent"(event: $KeyEvent$Type): boolean
public "removeOnAttachStateChangeListener"(listener: $View$OnAttachStateChangeListener$Type): void
public "onWindowFocusChanged"(hasWindowFocus: boolean): void
public "addOnLayoutChangeListener"(listener: $View$OnLayoutChangeListener$Type): void
public "setOnGenericMotionListener"(l: $View$OnGenericMotionListener$Type): void
public "dispatchWindowVisibilityChanged"(visibility: integer): void
public "performContextClick"(): boolean
public "performContextClick"(x: float, y: float): boolean
public "dispatchPointerEvent"(event: $MotionEvent$Type): boolean
public "addOnAttachStateChangeListener"(listener: $View$OnAttachStateChangeListener$Type): void
public "setOnContextClickListener"(l: $View$OnContextClickListener$Type): void
public "dispatchWindowFocusChanged"(hasFocus: boolean): void
public "setOnCreateContextMenuListener"(l: $View$OnCreateContextMenuListener$Type): void
public "getOnFocusChangeListener"(): $View$OnFocusChangeListener
public "isTemporarilyDetached"(): boolean
public "getGlobalVisibleRect"(r: $Rect$Type): boolean
public "getGlobalVisibleRect"(r: $Rect$Type, globalOffset: $Point$Type): boolean
public "onResolvePointerIcon"(event: $MotionEvent$Type): $PointerIcon
public "hasOnLongClickListeners"(): boolean
public "removeOnLayoutChangeListener"(listener: $View$OnLayoutChangeListener$Type): void
public "setOnLongClickListener"(l: $View$OnLongClickListener$Type): void
public "dispatchGenericMotionEvent"(event: $MotionEvent$Type): boolean
public "setOnScrollChangeListener"(l: $View$OnScrollChangeListener$Type): void
public "hasOnClickListeners"(): boolean
public "onStartTemporaryDetach"(): void
public "setTransitionVisibility"(visibility: integer): void
public "getY"(): float
public "setEnabled"(enabled: boolean): void
public "setVisibility"(visibility: integer): void
public "draw"(canvas: $Canvas$Type): void
public "getRight"(): integer
public "getLeft"(): integer
public "getOverScrollMode"(): integer
public "startNestedScroll"(axes: integer, type: integer): boolean
public "stopNestedScroll"(type: integer): void
public "getTop"(): integer
public "setBottom"(bottom: integer): void
public "setTop"(top: integer): void
public "getBottom"(): integer
public "getDrawingRect"(outRect: $Rect$Type): void
public "setLeft"(left: integer): void
public "setRight"(right: integer): void
public "setX"(x: float): void
public "getZ"(): float
public "setTranslationZ"(translationZ: float): void
public "setElevation"(elevation: float): void
public "getRotationX"(): float
public "setY"(y: float): void
public "setZ"(z: float): void
public "setRotationX"(rotationX: float): void
public "setTranslationX"(translationX: float): void
public "getTranslationZ"(): float
public "getTranslationX"(): float
public "getTranslationY"(): float
public "getElevation"(): float
public "getX"(): float
public "getRotation"(): float
public "getInverseMatrix"(): $Matrix
public "setRotation"(rotation: float): void
public "getRotationY"(): float
public "setRotationY"(rotationY: float): void
public "setTranslationY"(translationY: float): void
public "getPivotX"(): float
public "getPivotY"(): float
public "getTransitionAlpha"(): float
public "isAttachedToWindow"(): boolean
public "setPivotY"(pivotY: float): void
public "isPivotSet"(): boolean
public "setScaleX"(scaleX: float): void
public "setAnimationMatrix"(matrix: $Matrix$Type): void
public "getScaleX"(): float
public "setTransitionAlpha"(alpha: float): void
public "setScaleY"(scaleY: float): void
public "setPivotX"(pivotX: float): void
public "getScaleY"(): float
public "resetPivot"(): void
public "playSoundEffect"(soundConstant: integer): void
public "willNotDraw"(): boolean
public "hasTransientState"(): boolean
public "cancelLongPress"(): void
public "isLaidOut"(): boolean
public "isLayoutRequested"(): boolean
public "setPaddingRelative"(start: integer, top: integer, end: integer, bottom: integer): void
public "getTextDirection"(): integer
public "forceLayout"(): void
public "setPadding"(left: integer, top: integer, right: integer, bottom: integer): void
public "setTextDirection"(textDirection: integer): void
public "getBaseline"(): integer
public "onResolveDrawables"(layoutDirection: integer): void
public "getTextAlignment"(): integer
public "getPaddingStart"(): integer
public "getPaddingEnd"(): integer
public "setTextAlignment"(textAlignment: integer): void
public "getBoundsOnScreen"(outRect: $Rect$Type, clipToParent: boolean): void
public "getBoundsOnScreen"(outRect: $Rect$Type): void
public "isPaddingRelative"(): boolean
public "hasWindowFocus"(): boolean
public "toLocalMotionEvent"(ev: $MotionEvent$Type): boolean
public "onDragEvent"(event: $DragEvent$Type): boolean
public "findViewById"<T extends $View>(id: integer): T
public "requireViewById"<T extends $View>(id: integer): T
public "postInvalidate"(): void
public "postOnAnimation"(action: $Runnable$Type): void
public "startDragAndDrop"(localState: any, shadow: $View$DragShadow$Type, flags: integer): boolean
public "dispatchTouchEvent"(event: $MotionEvent$Type): boolean
public "onHoverEvent"(event: $MotionEvent$Type): boolean
public "onHoverChanged"(hovered: boolean): void
public "setHovered"(hovered: boolean): void
public "isHovered"(): boolean
public "setOnTouchListener"(l: $View$OnTouchListener$Type): void
public "setOnClickListener"(l: $View$OnClickListener$Type): void
public "setOnKeyListener"(l: $View$OnKeyListener$Type): void
public "setOnHoverListener"(l: $View$OnHoverListener$Type): void
public "setOnDragListener"(l: $View$OnDragListener$Type): void
public "onTouchEvent"(event: $MotionEvent$Type): boolean
public "performClick"(): boolean
public "createContextMenu"(menu: $ContextMenu$Type): void
public "startActionMode"(callback: $ActionMode$Callback$Type): $ActionMode
public "startActionMode"(callback: $ActionMode$Callback$Type, type: integer): $ActionMode
public "showContextMenu"(x: float, y: float): boolean
public "showContextMenu"(): boolean
public "pointInView"(localX: float, localY: float, slop: float): boolean
public "performLongClick"(x: float, y: float): boolean
public "performLongClick"(): boolean
public "callOnClick"(): boolean
public "onKeyShortcut"(keyCode: integer, event: $KeyEvent$Type): boolean
public "getFocusedRect"(r: $Rect$Type): void
public "offsetTopAndBottom"(offset: integer): void
public "dispatchKeyEvent"(event: $KeyEvent$Type): boolean
public "offsetLeftAndRight"(offset: integer): void
public "onKeyDown"(keyCode: integer, event: $KeyEvent$Type): boolean
public "onKeyUp"(keyCode: integer, event: $KeyEvent$Type): boolean
public "getHitRect"(outRect: $Rect$Type): void
public "setTooltipText"(tooltipText: charseq): void
public "getTooltipView"(): $View
public "setTransitionName"(transitionName: string): void
public "getTooltipText"(): charseq
public "getTransitionName"(): string
public "getWidth"(): integer
public "getHeight"(): integer
public "isSelected"(): boolean
public "getVisibility"(): integer
public "setHorizontalScrollbarThumbDrawable"(drawable: $Drawable$Type): void
public "setHorizontalScrollbarTrackDrawable"(drawable: $Drawable$Type): void
public "getHorizontalScrollbarThumbDrawable"(): $Drawable
public "getHorizontalScrollbarTrackDrawable"(): $Drawable
public "getAlpha"(): float
public "getBackground"(): $Drawable
public "setBackground"(background: $Drawable$Type): void
public "getForeground"(): $Drawable
public "setForeground"(foreground: $Drawable$Type): void
public "setWillNotDraw"(willNotDraw: boolean): void
public "setLayoutParams"(params: $ViewGroup$LayoutParams$Type): void
public "setIsRootNamespace"(isRoot: boolean): void
public "setLayoutDirection"(layoutDirection: integer): void
public "hasIdentityMatrix"(): boolean
public "computeScroll"(): void
public "setOverScrollMode"(overScrollMode: integer): void
public "getAnimationMatrix"(): $Matrix
public "getMatrix"(): $Matrix
public "getPaddingLeft"(): integer
public "getLayoutDirection"(): integer
public "getPaddingBottom"(): integer
public "getPaddingTop"(): integer
public "getPaddingRight"(): integer
public "onDrawForeground"(canvas: $Canvas$Type): void
public "setAlpha"(alpha: float): void
public "findFocus"(): $View
public "getViewRoot"(): $ViewRoot
public "isInLayout"(): boolean
public "isFocused"(): boolean
public "measure"(widthMeasureSpec: integer, heightMeasureSpec: integer): void
public "getMinimumHeight"(): integer
public static "resolveSize"(size: integer, measureSpec: integer): integer
public "setMinimumWidth"(minWidth: integer): void
public "getMeasuredState"(): integer
public static "getDefaultSize"(size: integer, measureSpec: integer): integer
public "requestLayout"(): void
public "getMeasuredHeight"(): integer
public "getMeasuredWidth"(): integer
public "getLayoutParams"(): $ViewGroup$LayoutParams
public "getMinimumWidth"(): integer
public "setLongClickable"(longClickable: boolean): void
public "isClickable"(): boolean
public "getFocusable"(): integer
public "isFocusable"(): boolean
public "isPressed"(): boolean
public "isLongClickable"(): boolean
public static "generateViewId"(): integer
public "setPressed"(pressed: boolean): void
public "setMinimumHeight"(minHeight: integer): void
public "isRootNamespace"(): boolean
public "isContextClickable"(): boolean
public "setSelected"(selected: boolean): void
public "setFocusable"(focusable: integer): void
public "setFocusable"(focusable: boolean): void
public "setClickable"(clickable: boolean): void
public "unscheduleDrawable"(who: $Drawable$Type): void
public "unscheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type): void
public "isShown"(): boolean
public "getRootView"(): $View
public "invalidateDrawable"(drawable: $Drawable$Type): void
public "removeCallbacks"(action: $Runnable$Type): void
public "isActivated"(): boolean
public "hasFocus"(): boolean
public "scheduleDrawable"(who: $Drawable$Type, what: $Runnable$Type, when: long): void
public "clearFocus"(): void
public "setActivated"(activated: boolean): void
public "postDelayed"(action: $Runnable$Type, delayMillis: long): boolean
public "addFocusables"(views: $ArrayList$Type<($View$Type)>, direction: integer, focusableMode: integer): void
public "addFocusables"(views: $ArrayList$Type<($View$Type)>, direction: integer): void
public "requestFocus"(direction: integer): boolean
public "requestFocus"(): boolean
public "requestFocus"(direction: integer, previouslyFocusedRect: $Rect$Type): boolean
public "isInTouchMode"(): boolean
public "getFocusables"(direction: integer): $ArrayList<($View)>
public "hasFocusable"(): boolean
public "getTouchables"(): $ArrayList<($View)>
public "addTouchables"(views: $ArrayList$Type<($View$Type)>): void
public "isFocusedByDefault"(): boolean
public "getScrollX"(): integer
public "getScrollY"(): integer
public "setNextFocusLeftId"(nextFocusLeftId: integer): void
public "getNextFocusDownId"(): integer
public "setNextFocusDownId"(nextFocusDownId: integer): void
public "setNextFocusUpId"(nextFocusUpId: integer): void
public "focusSearch"(direction: integer): $View
public "resolvePadding"(): void
public "getDrawableState"(): (integer)[]
public "getNextFocusUpId"(): integer
public "getNextFocusLeftId"(): integer
public "getScrollBarSize"(): integer
public "setScrollBarSize"(scrollBarSize: integer): void
public "setScrollBarStyle"(style: integer): void
public "getScrollBarStyle"(): integer
public "scrollTo"(x: integer, y: integer): void
public "scrollBy"(x: integer, y: integer): void
public "setScrollX"(value: integer): void
public "setScrollY"(value: integer): void
public "isLayoutRtl"(): boolean
public "getFadingEdge"(): integer
public "setId"(id: integer): void
public "layout"(l: integer, t: integer, r: integer, b: integer): void
public "setTag"(key: integer, tag: any): void
get "parent"(): $ViewParent
get "context"(): $Context
get "id"(): integer
get "handler"(): $Handler
get "enabled"(): boolean
get "showingLayoutBounds"(): boolean
get "horizontalScrollBarEnabled"(): boolean
get "verticalScrollBarEnabled"(): boolean
set "focusableInTouchMode"(value: boolean)
get "focusableInTouchMode"(): boolean
get "measuredWidthAndState"(): integer
set "contextClickable"(value: boolean)
get "measuredHeightAndState"(): integer
get "windowVisibility"(): integer
get "keyboardNavigationCluster"(): boolean
set "nextFocusRightId"(value: integer)
get "revealOnFocusHint"(): boolean
set "nextClusterForwardId"(value: integer)
set "horizontalScrollBarEnabled"(value: boolean)
set "revealOnFocusHint"(value: boolean)
set "focusedByDefault"(value: boolean)
set "nextFocusForwardId"(value: integer)
get "nextClusterForwardId"(): integer
set "verticalScrollbarTrackDrawable"(value: $Drawable$Type)
get "nextFocusRightId"(): integer
get "scrollBarDefaultDelayBeforeFade"(): integer
set "scrollBarFadeDuration"(value: integer)
get "scrollbarFadingEnabled"(): boolean
set "scrollBarDefaultDelayBeforeFade"(value: integer)
set "verticalScrollBarEnabled"(value: boolean)
get "verticalScrollbarThumbDrawable"(): $Drawable
set "scrollbarFadingEnabled"(value: boolean)
get "verticalScrollbarTrackDrawable"(): $Drawable
get "verticalScrollbarWidth"(): integer
set "keyboardNavigationCluster"(value: boolean)
get "nextFocusForwardId"(): integer
set "verticalScrollbarThumbDrawable"(value: $Drawable$Type)
get "scrollBarFadeDuration"(): integer
get "verticalFadingEdgeLength"(): integer
set "verticalFadingEdgeEnabled"(value: boolean)
set "nestedScrollingEnabled"(value: boolean)
set "stateListAnimator"(value: $StateListAnimator$Type)
set "scrollIndicators"(value: integer)
get "nestedScrollingEnabled"(): boolean
get "stateListAnimator"(): $StateListAnimator
get "verticalFadingEdgeEnabled"(): boolean
get "fadingEdgeLength"(): integer
get "horizontalFadingEdgeEnabled"(): boolean
set "duplicateParentStateEnabled"(value: boolean)
set "horizontalFadingEdgeEnabled"(value: boolean)
get "scrollIndicators"(): integer
get "duplicateParentStateEnabled"(): boolean
set "soundEffectsEnabled"(value: boolean)
get "rawLayoutDirection"(): integer
get "textAlignmentInherited"(): boolean
get "viewTreeObserver"(): $ViewTreeObserver
get "textDirectionResolved"(): boolean
get "hapticFeedbackEnabled"(): boolean
get "layoutDirectionResolved"(): boolean
set "foregroundGravity"(value: integer)
get "layoutDirectionInherited"(): boolean
get "rawTextDirection"(): integer
get "foregroundInsidePadding"(): boolean
set "hapticFeedbackEnabled"(value: boolean)
get "foregroundGravity"(): integer
get "textDirectionInherited"(): boolean
get "rawTextAlignment"(): integer
get "textAlignmentResolved"(): boolean
get "soundEffectsEnabled"(): boolean
get "onLongClickListener"(): $View$OnLongClickListener
get "inScrollingContainer"(): boolean
get "keyDispatcherState"(): $KeyEvent$DispatcherState
set "onFocusChangeListener"(value: $View$OnFocusChangeListener$Type)
set "onGenericMotionListener"(value: $View$OnGenericMotionListener$Type)
set "onContextClickListener"(value: $View$OnContextClickListener$Type)
set "onCreateContextMenuListener"(value: $View$OnCreateContextMenuListener$Type)
get "onFocusChangeListener"(): $View$OnFocusChangeListener
get "temporarilyDetached"(): boolean
set "onLongClickListener"(value: $View$OnLongClickListener$Type)
set "onScrollChangeListener"(value: $View$OnScrollChangeListener$Type)
set "transitionVisibility"(value: integer)
get "y"(): float
set "enabled"(value: boolean)
set "visibility"(value: integer)
get "right"(): integer
get "left"(): integer
get "overScrollMode"(): integer
get "top"(): integer
set "bottom"(value: integer)
set "top"(value: integer)
get "bottom"(): integer
set "left"(value: integer)
set "right"(value: integer)
set "x"(value: float)
get "z"(): float
set "translationZ"(value: float)
set "elevation"(value: float)
get "rotationX"(): float
set "y"(value: float)
set "z"(value: float)
set "rotationX"(value: float)
set "translationX"(value: float)
get "translationZ"(): float
get "translationX"(): float
get "translationY"(): float
get "elevation"(): float
get "x"(): float
get "rotation"(): float
get "inverseMatrix"(): $Matrix
set "rotation"(value: float)
get "rotationY"(): float
set "rotationY"(value: float)
set "translationY"(value: float)
get "pivotX"(): float
get "pivotY"(): float
get "transitionAlpha"(): float
get "attachedToWindow"(): boolean
set "pivotY"(value: float)
get "pivotSet"(): boolean
set "scaleX"(value: float)
set "animationMatrix"(value: $Matrix$Type)
get "scaleX"(): float
set "transitionAlpha"(value: float)
set "scaleY"(value: float)
set "pivotX"(value: float)
get "scaleY"(): float
get "laidOut"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
set "textDirection"(value: integer)
get "baseline"(): integer
get "textAlignment"(): integer
get "paddingStart"(): integer
get "paddingEnd"(): integer
set "textAlignment"(value: integer)
get "paddingRelative"(): boolean
set "hovered"(value: boolean)
get "hovered"(): boolean
set "onTouchListener"(value: $View$OnTouchListener$Type)
set "onClickListener"(value: $View$OnClickListener$Type)
set "onKeyListener"(value: $View$OnKeyListener$Type)
set "onHoverListener"(value: $View$OnHoverListener$Type)
set "onDragListener"(value: $View$OnDragListener$Type)
set "tooltipText"(value: charseq)
get "tooltipView"(): $View
set "transitionName"(value: string)
get "tooltipText"(): charseq
get "transitionName"(): string
get "width"(): integer
get "height"(): integer
get "selected"(): boolean
get "visibility"(): integer
set "horizontalScrollbarThumbDrawable"(value: $Drawable$Type)
set "horizontalScrollbarTrackDrawable"(value: $Drawable$Type)
get "horizontalScrollbarThumbDrawable"(): $Drawable
get "horizontalScrollbarTrackDrawable"(): $Drawable
get "alpha"(): float
get "background"(): $Drawable
set "background"(value: $Drawable$Type)
get "foreground"(): $Drawable
set "foreground"(value: $Drawable$Type)
set "layoutParams"(value: $ViewGroup$LayoutParams$Type)
set "layoutDirection"(value: integer)
set "overScrollMode"(value: integer)
get "animationMatrix"(): $Matrix
get "matrix"(): $Matrix
get "paddingLeft"(): integer
get "layoutDirection"(): integer
get "paddingBottom"(): integer
get "paddingTop"(): integer
get "paddingRight"(): integer
set "alpha"(value: float)
get "viewRoot"(): $ViewRoot
get "inLayout"(): boolean
get "focused"(): boolean
get "minimumHeight"(): integer
set "minimumWidth"(value: integer)
get "measuredState"(): integer
get "measuredHeight"(): integer
get "measuredWidth"(): integer
get "layoutParams"(): $ViewGroup$LayoutParams
get "minimumWidth"(): integer
set "longClickable"(value: boolean)
get "clickable"(): boolean
get "focusable"(): integer
get "focusable"(): boolean
get "pressed"(): boolean
get "longClickable"(): boolean
set "pressed"(value: boolean)
set "minimumHeight"(value: integer)
get "rootNamespace"(): boolean
get "contextClickable"(): boolean
set "selected"(value: boolean)
set "focusable"(value: integer)
set "focusable"(value: boolean)
set "clickable"(value: boolean)
get "shown"(): boolean
get "rootView"(): $View
get "activated"(): boolean
set "activated"(value: boolean)
get "inTouchMode"(): boolean
get "touchables"(): $ArrayList<($View)>
get "focusedByDefault"(): boolean
get "scrollX"(): integer
get "scrollY"(): integer
set "nextFocusLeftId"(value: integer)
get "nextFocusDownId"(): integer
set "nextFocusDownId"(value: integer)
set "nextFocusUpId"(value: integer)
get "drawableState"(): (integer)[]
get "nextFocusUpId"(): integer
get "nextFocusLeftId"(): integer
get "scrollBarSize"(): integer
set "scrollBarSize"(value: integer)
set "scrollBarStyle"(value: integer)
get "scrollBarStyle"(): integer
set "scrollX"(value: integer)
set "scrollY"(value: integer)
get "layoutRtl"(): boolean
get "fadingEdge"(): integer
set "id"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$Type = ($View);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View_ = $View$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram$Fill" {
import {$RoundRectProgram, $RoundRectProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$RoundRectProgram"

export class $RoundRectProgram$Fill extends $RoundRectProgram {


public "setRadius"(radius: float, feather: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RoundRectProgram$Fill$Type = ($RoundRectProgram$Fill);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RoundRectProgram$Fill_ = $RoundRectProgram$Fill$Type;
}}
declare module "packages/icyllis/modernui/text/$Editable" {
import {$Editable$Factory, $Editable$Factory$Type} from "packages/icyllis/modernui/text/$Editable$Factory"
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$IntStream, $IntStream$Type} from "packages/java/util/stream/$IntStream"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$GetChars, $GetChars$Type} from "packages/icyllis/modernui/text/$GetChars"
import {$InputFilter, $InputFilter$Type} from "packages/icyllis/modernui/text/$InputFilter"

export interface $Editable extends $Spannable, $GetChars, $Appendable {

 "append"(arg0: charseq): $Editable
 "append"(arg0: charseq, arg1: integer, arg2: integer): $Editable
 "append"(arg0: character): $Editable
 "insert"(arg0: integer, arg1: charseq): $Editable
 "insert"(arg0: integer, arg1: charseq, arg2: integer, arg3: integer): $Editable
 "clear"(): void
 "replace"(arg0: integer, arg1: integer, arg2: charseq): $Editable
 "replace"(arg0: integer, arg1: integer, arg2: charseq, arg3: integer, arg4: integer): $Editable
 "delete"(arg0: integer, arg1: integer): $Editable
 "setFilters"(arg0: ($InputFilter$Type)[]): void
 "getFilters"(): ($InputFilter)[]
 "clearSpans"(): void
 "setSpan"(arg0: any, arg1: integer, arg2: integer, arg3: integer): void
 "removeSpan"(arg0: any): void
 "removeSpan"(span: any, flags: integer): void
 "getChars"(arg0: integer, arg1: integer, arg2: (character)[], arg3: integer): void
 "nextSpanTransition"(arg0: integer, arg1: integer, arg2: $Class$Type<(any)>): integer
 "getSpanStart"(arg0: any): integer
 "getSpanFlags"(arg0: any): integer
 "getSpans"<T>(arg0: integer, arg1: integer, arg2: $Class$Type<(any)>, arg3: $List$Type<(T)>): $List<(T)>
 "getSpans"<T>(start: integer, end: integer, type: $Class$Type<(any)>): $List<(T)>
 "getSpanEnd"(arg0: any): integer
 "length"(): integer
 "toString"(): string
 "charAt"(arg0: integer): character
 "isEmpty"(): boolean
 "codePoints"(): $IntStream
 "subSequence"(arg0: integer, arg1: integer): charseq
 "chars"(): $IntStream
}

export namespace $Editable {
const DEFAULT_FACTORY: $Editable$Factory
function compare(arg0: charseq, arg1: charseq): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Editable$Type = ($Editable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Editable_ = $Editable$Type;
}}
declare module "packages/icyllis/modernui/util/$Pools$Pool" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $Pools$Pool<T> {

 "release"(arg0: T): boolean
 "acquire"(): T
}

export namespace $Pools$Pool {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Pools$Pool$Type<T> = ($Pools$Pool<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Pools$Pool_<T> = $Pools$Pool$Type<(T)>;
}}
declare module "packages/icyllis/modernui/widget/$TextView" {
import {$TextWatcher, $TextWatcher$Type} from "packages/icyllis/modernui/text/$TextWatcher"
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$MovementMethod, $MovementMethod$Type} from "packages/icyllis/modernui/text/method/$MovementMethod"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$TransformationMethod, $TransformationMethod$Type} from "packages/icyllis/modernui/text/method/$TransformationMethod"
import {$TextUtils$TruncateAt, $TextUtils$TruncateAt$Type} from "packages/icyllis/modernui/text/$TextUtils$TruncateAt"
import {$TextView$BufferType, $TextView$BufferType$Type} from "packages/icyllis/modernui/widget/$TextView$BufferType"
import {$Editable$Factory, $Editable$Factory$Type} from "packages/icyllis/modernui/text/$Editable$Factory"
import {$Typeface, $Typeface$Type} from "packages/icyllis/modernui/text/$Typeface"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$BoringLayout$Metrics, $BoringLayout$Metrics$Type} from "packages/icyllis/modernui/text/$BoringLayout$Metrics"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$Spannable$Factory, $Spannable$Factory$Type} from "packages/icyllis/modernui/text/$Spannable$Factory"
import {$ViewTreeObserver$OnPreDrawListener, $ViewTreeObserver$OnPreDrawListener$Type} from "packages/icyllis/modernui/view/$ViewTreeObserver$OnPreDrawListener"
import {$PrecomputedText$Params, $PrecomputedText$Params$Type} from "packages/icyllis/modernui/text/$PrecomputedText$Params"
import {$InputFilter, $InputFilter$Type} from "packages/icyllis/modernui/text/$InputFilter"
import {$WordIterator, $WordIterator$Type} from "packages/icyllis/modernui/text/method/$WordIterator"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$Editable, $Editable$Type} from "packages/icyllis/modernui/text/$Editable"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$PointerIcon, $PointerIcon$Type} from "packages/icyllis/modernui/view/$PointerIcon"

export class $TextView extends $View implements $ViewTreeObserver$OnPreDrawListener {
static readonly "UNKNOWN_BORING": $BoringLayout$Metrics
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "getText"(): charseq
public "setText"(text: charseq, type: $TextView$BufferType$Type): void
public "setText"(text: charseq): void
public "setWidth"(pixels: integer): void
public "jumpDrawablesToCurrentState"(): void
public "onGenericMotionEvent"(event: $MotionEvent$Type): boolean
public "onResolvePointerIcon"(event: $MotionEvent$Type): $PointerIcon
public "getMinHeight"(): integer
public "getMaxHeight"(): integer
public "getWordIterator"(): $WordIterator
public "hasSelection"(): boolean
public "isCursorVisible"(): boolean
public "setMovementMethod"(movement: $MovementMethod$Type): void
public "getTotalPaddingTop"(): integer
public "getTotalPaddingEnd"(): integer
public "setAutoLinkMask"(mask: integer): void
public "makeNewLayout"(wantWidth: integer, hintWidth: integer, boring: $BoringLayout$Metrics$Type, hintBoring: $BoringLayout$Metrics$Type, ellipsisWidth: integer, bringIntoView: boolean): void
public "setMinLines"(minLines: integer): void
public "setLinksClickable"(whether: boolean): void
public "setHighlightColor"(color: integer): void
public "getMinLines"(): integer
public "setHintTextColor"(colors: $ColorStateList$Type): void
public "setHintTextColor"(color: integer): void
public "setMinHeight"(minPixels: integer): void
public "setLinkTextColor"(color: integer): void
public "setLinkTextColor"(colors: $ColorStateList$Type): void
public "getLinksClickable"(): boolean
public "getHintTextColors"(): $ColorStateList
public "setLineBreakStyle"(lineBreakStyle: integer): void
public "getAutoLinkMask"(): integer
public "nullLayouts"(): void
public "getHighlightColor"(): integer
public "getLinkTextColors"(): $ColorStateList
public "getTextColors"(): $ColorStateList
public "setEditableFactory"(factory: $Editable$Factory$Type): void
public "setLines"(lines: integer): void
public "bringPointIntoView"(offset: integer): boolean
public "getMaxLines"(): integer
public "setMaxHeight"(maxPixels: integer): void
public "setTextKeepState"(text: charseq, type: $TextView$BufferType$Type): void
public "setTextKeepState"(text: charseq): void
public "setMinWidth"(minPixels: integer): void
public "setMaxLines"(maxLines: integer): void
public "getHint"(): charseq
public "getEditableText"(): $Editable
public "isTextSelectable"(): boolean
public "useDynamicLayout"(): boolean
public "setCursorVisible"(visible: boolean): void
public "getEllipsize"(): $TextUtils$TruncateAt
public "setEnabled"(enabled: boolean): void
public "setMaxWidth"(maxPixels: integer): void
public "setSingleLine"(): void
public "setSingleLine"(singleLine: boolean): void
public "setEllipsize"(where: $TextUtils$TruncateAt$Type): void
public "getLineBreakStyle"(): integer
public "setFilters"(...filters: ($InputFilter$Type)[]): void
public "setTextStyle"(style: integer): void
public "setTextSize"(size: float): void
public "getLayout"(): $Layout
public "cancelLongPress"(): void
public "setPaddingRelative"(start: integer, top: integer, end: integer, bottom: integer): void
public "setPadding"(left: integer, top: integer, right: integer, bottom: integer): void
public "getBaseline"(): integer
public "onResolveDrawables"(layoutDirection: integer): void
public "onTouchEvent"(event: $MotionEvent$Type): boolean
public "showContextMenu"(x: float, y: float): boolean
public "onKeyShortcut"(keyCode: integer, event: $KeyEvent$Type): boolean
public "getFocusedRect"(r: $Rect$Type): void
public "onKeyDown"(keyCode: integer, event: $KeyEvent$Type): boolean
public "onKeyUp"(keyCode: integer, event: $KeyEvent$Type): boolean
public "getMovementMethod"(): $MovementMethod
public "setGravity"(gravity: integer): void
public "getGravity"(): integer
public "getPaint"(): $TextPaint
public "getSelectionStart"(): integer
public "getSelectionEnd"(): integer
public "getMaxWidth"(): integer
public "getFilters"(): ($InputFilter)[]
public "getMinWidth"(): integer
public "setCompoundDrawablesRelativeWithIntrinsicBounds"(start: $Drawable$Type, top: $Drawable$Type, end: $Drawable$Type, bottom: $Drawable$Type): void
public "setCompoundDrawablesWithIntrinsicBounds"(left: $Drawable$Type, top: $Drawable$Type, right: $Drawable$Type, bottom: $Drawable$Type): void
public "onTextContextMenuItem"(id: integer): boolean
public "getOffsetForPosition"(x: float, y: float): integer
public "didTouchFocusSelect"(): boolean
public "getTransformationMethod"(): $TransformationMethod
public "setTransformationMethod"(method: $TransformationMethod$Type): void
public "getCompoundPaddingTop"(): integer
public "getCompoundPaddingBottom"(): integer
public "getCompoundPaddingLeft"(): integer
public "setLastBaselineToBottomHeight"(lastBaselineToBottomHeight: integer): void
public "moveCursorToVisibleOffset"(): boolean
public "getCompoundPaddingEnd"(): integer
public "getTotalPaddingLeft"(): integer
public "getExtendedPaddingBottom"(): integer
public "setSelectAllOnFocus"(selectAllOnFocus: boolean): void
public "addTextChangedListener"(watcher: $TextWatcher$Type): void
public "removeTextChangedListener"(watcher: $TextWatcher$Type): void
public "getFirstBaselineToTopHeight"(): integer
public "getCompoundPaddingStart"(): integer
public "getCompoundDrawables"(): ($Drawable)[]
public "setCompoundDrawablePadding"(pad: integer): void
public "getLastBaselineToBottomHeight"(): integer
public "getTotalPaddingBottom"(): integer
public "isFallbackLineSpacing"(): boolean
public "getTextMetricsParams"(): $PrecomputedText$Params
public "setFirstBaselineToTopHeight"(firstBaselineToTopHeight: integer): void
public "setCompoundDrawables"(left: $Drawable$Type, top: $Drawable$Type, right: $Drawable$Type, bottom: $Drawable$Type): void
public "getTotalPaddingRight"(): integer
public "getCompoundDrawablesRelative"(): ($Drawable)[]
public "setTextMetricsParams"(params: $PrecomputedText$Params$Type): void
public "getCompoundDrawablePadding"(): integer
public "setCompoundDrawablesRelative"(start: $Drawable$Type, top: $Drawable$Type, end: $Drawable$Type, bottom: $Drawable$Type): void
public "getCurrentTextColor"(): integer
public "isHorizontallyScrollable"(): boolean
public "setSpannableFactory"(factory: $Spannable$Factory$Type): void
public "setHorizontallyScrolling"(whether: boolean): void
public "getCurrentHintTextColor"(): integer
public "getExtendedPaddingTop"(): integer
public "setTextIsSelectable"(selectable: boolean): void
public "getHorizontalOffsetForDrawables"(): integer
public "setLineBreakWordStyle"(lineBreakWordStyle: integer): void
public "getTotalPaddingStart"(): integer
public "setIncludeFontPadding"(includePad: boolean): void
public "getIncludeFontPadding"(): boolean
public "getCompoundPaddingRight"(): integer
public "setHeight"(pixels: integer): void
public "onPreDraw"(): boolean
public "getLineCount"(): integer
public "getLineBounds"(line: integer, bounds: $Rect$Type): integer
public "getTextLocale"(): $Locale
public "getTextSize"(): float
public "setTypeface"(tf: $Typeface$Type): void
public "getTypeface"(): $Typeface
public "setTextLocale"(locale: $Locale$Type): void
public "getTextStyle"(): integer
public "getLineBreakWordStyle"(): integer
public "setFallbackLineSpacing"(enabled: boolean): void
public "setHint"(hint: charseq): void
public "getTextDirectionHeuristic"(): $TextDirectionHeuristic
public "setTextColor"(color: integer): void
public "setTextColor"(colors: $ColorStateList$Type): void
public "getLineHeight"(): integer
get "text"(): charseq
set "text"(value: charseq)
set "width"(value: integer)
get "minHeight"(): integer
get "maxHeight"(): integer
get "wordIterator"(): $WordIterator
get "cursorVisible"(): boolean
set "movementMethod"(value: $MovementMethod$Type)
get "totalPaddingTop"(): integer
get "totalPaddingEnd"(): integer
set "autoLinkMask"(value: integer)
set "minLines"(value: integer)
set "linksClickable"(value: boolean)
set "highlightColor"(value: integer)
get "minLines"(): integer
set "hintTextColor"(value: $ColorStateList$Type)
set "hintTextColor"(value: integer)
set "minHeight"(value: integer)
set "linkTextColor"(value: integer)
set "linkTextColor"(value: $ColorStateList$Type)
get "linksClickable"(): boolean
get "hintTextColors"(): $ColorStateList
set "lineBreakStyle"(value: integer)
get "autoLinkMask"(): integer
get "highlightColor"(): integer
get "linkTextColors"(): $ColorStateList
get "textColors"(): $ColorStateList
set "editableFactory"(value: $Editable$Factory$Type)
set "lines"(value: integer)
get "maxLines"(): integer
set "maxHeight"(value: integer)
set "textKeepState"(value: charseq)
set "minWidth"(value: integer)
set "maxLines"(value: integer)
get "hint"(): charseq
get "editableText"(): $Editable
get "textSelectable"(): boolean
set "cursorVisible"(value: boolean)
get "ellipsize"(): $TextUtils$TruncateAt
set "enabled"(value: boolean)
set "maxWidth"(value: integer)
set "singleLine"(value: boolean)
set "ellipsize"(value: $TextUtils$TruncateAt$Type)
get "lineBreakStyle"(): integer
set "filters"(value: ($InputFilter$Type)[])
set "textStyle"(value: integer)
set "textSize"(value: float)
get "layout"(): $Layout
get "baseline"(): integer
get "movementMethod"(): $MovementMethod
set "gravity"(value: integer)
get "gravity"(): integer
get "paint"(): $TextPaint
get "selectionStart"(): integer
get "selectionEnd"(): integer
get "maxWidth"(): integer
get "filters"(): ($InputFilter)[]
get "minWidth"(): integer
get "transformationMethod"(): $TransformationMethod
set "transformationMethod"(value: $TransformationMethod$Type)
get "compoundPaddingTop"(): integer
get "compoundPaddingBottom"(): integer
get "compoundPaddingLeft"(): integer
set "lastBaselineToBottomHeight"(value: integer)
get "compoundPaddingEnd"(): integer
get "totalPaddingLeft"(): integer
get "extendedPaddingBottom"(): integer
set "selectAllOnFocus"(value: boolean)
get "firstBaselineToTopHeight"(): integer
get "compoundPaddingStart"(): integer
get "compoundDrawables"(): ($Drawable)[]
set "compoundDrawablePadding"(value: integer)
get "lastBaselineToBottomHeight"(): integer
get "totalPaddingBottom"(): integer
get "fallbackLineSpacing"(): boolean
get "textMetricsParams"(): $PrecomputedText$Params
set "firstBaselineToTopHeight"(value: integer)
get "totalPaddingRight"(): integer
get "compoundDrawablesRelative"(): ($Drawable)[]
set "textMetricsParams"(value: $PrecomputedText$Params$Type)
get "compoundDrawablePadding"(): integer
get "currentTextColor"(): integer
get "horizontallyScrollable"(): boolean
set "spannableFactory"(value: $Spannable$Factory$Type)
set "horizontallyScrolling"(value: boolean)
get "currentHintTextColor"(): integer
get "extendedPaddingTop"(): integer
set "textIsSelectable"(value: boolean)
get "horizontalOffsetForDrawables"(): integer
set "lineBreakWordStyle"(value: integer)
get "totalPaddingStart"(): integer
set "includeFontPadding"(value: boolean)
get "includeFontPadding"(): boolean
get "compoundPaddingRight"(): integer
set "height"(value: integer)
get "lineCount"(): integer
get "textLocale"(): $Locale
get "textSize"(): float
set "typeface"(value: $Typeface$Type)
get "typeface"(): $Typeface
set "textLocale"(value: $Locale$Type)
get "textStyle"(): integer
get "lineBreakWordStyle"(): integer
set "fallbackLineSpacing"(value: boolean)
set "hint"(value: charseq)
get "textDirectionHeuristic"(): $TextDirectionHeuristic
set "textColor"(value: integer)
set "textColor"(value: $ColorStateList$Type)
get "lineHeight"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextView$Type = ($TextView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextView_ = $TextView$Type;
}}
declare module "packages/icyllis/modernui/mc/$ContainerDrawHelper" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ContainerDrawHelper {


public static "drawItem"(canvas: $Canvas$Type, item: $ItemStack$Type, x: float, y: float, z: float, size: float, seed: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContainerDrawHelper$Type = ($ContainerDrawHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContainerDrawHelper_ = $ContainerDrawHelper$Type;
}}
declare module "packages/icyllis/modernui/widget/$ExpandableListPosition" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ExpandableListPosition {
static readonly "CHILD": integer
static readonly "GROUP": integer
 "groupPos": integer
 "childPos": integer
 "type": integer


public "recycle"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandableListPosition$Type = ($ExpandableListPosition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandableListPosition_ = $ExpandableListPosition$Type;
}}
declare module "packages/icyllis/modernui/mc/$MuiModApi$OnDebugDumpListener" {
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"

export interface $MuiModApi$OnDebugDumpListener {

 "onDebugDump"(arg0: $PrintWriter$Type): void

(arg0: $PrintWriter$Type): void
}

export namespace $MuiModApi$OnDebugDumpListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiModApi$OnDebugDumpListener$Type = ($MuiModApi$OnDebugDumpListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiModApi$OnDebugDumpListener_ = $MuiModApi$OnDebugDumpListener$Type;
}}
declare module "packages/icyllis/modernui/audio/$SoundSample" {
import {$ShortBuffer, $ShortBuffer$Type} from "packages/java/nio/$ShortBuffer"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"

export class $SoundSample implements $AutoCloseable {

constructor()

public "close"(): void
public "seek"(arg0: integer): boolean
public "getSampleRate"(): integer
public "getChannels"(): integer
public "getTotalLength"(): float
public "getSamplesShortInterleaved"(arg0: $ShortBuffer$Type): integer
public "getTotalSamples"(): integer
get "sampleRate"(): integer
get "channels"(): integer
get "totalLength"(): float
get "totalSamples"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoundSample$Type = ($SoundSample);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoundSample_ = $SoundSample$Type;
}}
declare module "packages/icyllis/modernui/text/$PrecomputedText$ParagraphInfo" {
import {$MeasuredParagraph, $MeasuredParagraph$Type} from "packages/icyllis/modernui/text/$MeasuredParagraph"

export class $PrecomputedText$ParagraphInfo {
readonly "paragraphEnd": integer
readonly "measured": $MeasuredParagraph

constructor(paraEnd: integer, measured: $MeasuredParagraph$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PrecomputedText$ParagraphInfo$Type = ($PrecomputedText$ParagraphInfo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PrecomputedText$ParagraphInfo_ = $PrecomputedText$ParagraphInfo$Type;
}}
declare module "packages/icyllis/modernui/util/$LayoutDirection" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LayoutDirection {
static readonly "UNDEFINED": integer
static readonly "LTR": integer
static readonly "RTL": integer
static readonly "INHERIT": integer
static readonly "LOCALE": integer


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutDirection$Type = ($LayoutDirection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutDirection_ = $LayoutDirection$Type;
}}
declare module "packages/icyllis/modernui/util/$Observable" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Observable<T> {

constructor()

public "unregisterObserver"(observer: T): void
public "registerObserver"(observer: T): void
public "unregisterAll"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Observable$Type<T> = ($Observable<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Observable_<T> = $Observable$Type<(T)>;
}}
declare module "packages/icyllis/modernui/mc/$TooltipRenderer" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"
import {$ClientTooltipPositioner, $ClientTooltipPositioner$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipPositioner"

export class $TooltipRenderer {
static "sTooltip": boolean
static readonly "sFillColor": (integer)[]
static readonly "sStrokeColor": (integer)[]
static "sBorderWidth": float
static "sCornerRadius": float
static "sShadowRadius": float
static "sShadowAlpha": float
static "sAdaptiveColors": boolean
static readonly "TOOLTIP_SPACE": integer
static readonly "H_BORDER": integer
static readonly "V_BORDER": integer
static "sBorderColorCycle": integer
static "sExactPositioning": boolean
static "sRoundedShapes": boolean
static "sCenterTitle": boolean
static "sTitleBreak": boolean
 "mLayoutRTL": boolean

constructor()

public "update"(deltaMillis: long, timeMillis: long): void
public "drawTooltip"(itemStack: $ItemStack$Type, gr: $GuiGraphics$Type, list: $List$Type<($ClientTooltipComponent$Type)>, mouseX: integer, mouseY: integer, font: $Font$Type, screenWidth: integer, screenHeight: integer, partialX: float, partialY: float, positioner: $ClientTooltipPositioner$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipRenderer$Type = ($TooltipRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipRenderer_ = $TooltipRenderer$Type;
}}
declare module "packages/icyllis/modernui/core/$Kernel32" {
import {$IntBuffer, $IntBuffer$Type} from "packages/java/nio/$IntBuffer"
import {$SharedLibrary, $SharedLibrary$Type} from "packages/org/lwjgl/system/$SharedLibrary"

export class $Kernel32 {
static readonly "HANDLE_FLAG_INHERIT": integer
static readonly "HANDLE_FLAG_PROTECT_FROM_CLOSE": integer

constructor()

public static "AddDllDirectory"(NewDirectory: string): long
public static "CloseHandle"(hObject: long): boolean
public static "getLibrary"(): $SharedLibrary
public static "GetLastError"(): integer
public static "GetHandleInformation"(hObject: long, lpdwFlags: $IntBuffer$Type): boolean
get "library"(): $SharedLibrary
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Kernel32$Type = ($Kernel32);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Kernel32_ = $Kernel32$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$FontCollection" {
import {$FontCollection$Run, $FontCollection$Run$Type} from "packages/icyllis/modernui/graphics/text/$FontCollection$Run"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BitSet, $BitSet$Type} from "packages/java/util/$BitSet"
import {$FontFamily, $FontFamily$Type} from "packages/icyllis/modernui/graphics/text/$FontFamily"

export class $FontCollection {
static readonly "GC_M_MASK": integer
static readonly "REPLACEMENT_CHARACTER": integer
static readonly "UNSUPPORTED_FONT_SCORE": integer

constructor(...families: ($FontFamily$Type)[])
constructor(families: ($FontFamily$Type)[], exclusiveEastAsianBits: $BitSet$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "isVariationSelector"(c: integer): boolean
public static "isStickyWhitelisted"(c: integer): boolean
public static "doesNotNeedFontSupport"(c: integer): boolean
public static "isCombining"(c: integer): boolean
public "itemize"(text: (character)[], offset: integer, limit: integer, runLimit: integer): $List<($FontCollection$Run)>
public "itemize"(text: (character)[], offset: integer, limit: integer): $List<($FontCollection$Run)>
public "getFamilies"(): $List<($FontFamily)>
public static "isEmojiBreak"(prevCh: integer, ch: integer): boolean
get "families"(): $List<($FontFamily)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FontCollection$Type = ($FontCollection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FontCollection_ = $FontCollection$Type;
}}
declare module "packages/icyllis/modernui/markdown/core/style/$OrderedListItemSpan" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$MarkdownTheme, $MarkdownTheme$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$LeadingMarginSpan, $LeadingMarginSpan$Type} from "packages/icyllis/modernui/text/style/$LeadingMarginSpan"

export class $OrderedListItemSpan implements $LeadingMarginSpan {

constructor(theme: $MarkdownTheme$Type, number: string)

public static "measure"(textView: $TextView$Type, markdown: $Spanned$Type): void
public "getLeadingMargin"(first: boolean): integer
public "drawLeadingMargin"(c: $Canvas$Type, p: $TextPaint$Type, x: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
public "drawMargin"(c: $Canvas$Type, p: $TextPaint$Type, left: integer, right: integer, dir: integer, top: integer, baseline: integer, bottom: integer, text: charseq, start: integer, end: integer, first: boolean, layout: $Layout$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OrderedListItemSpan$Type = ($OrderedListItemSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OrderedListItemSpan_ = $OrderedListItemSpan$Type;
}}
declare module "packages/icyllis/modernui/annotation/$Dimension" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $Dimension extends $Annotation {

 "unit"(): integer
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $Dimension {
const DP: integer
const PX: integer
const SP: integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Dimension$Type = ($Dimension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Dimension_ = $Dimension$Type;
}}
declare module "packages/icyllis/modernui/text/$InputFilter" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"

export interface $InputFilter {

 "filter"(arg0: charseq, arg1: integer, arg2: integer, arg3: $Spanned$Type, arg4: integer, arg5: integer): charseq

(arg0: charseq, arg1: integer, arg2: integer, arg3: $Spanned$Type, arg4: integer, arg5: integer): charseq
}

export namespace $InputFilter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputFilter$Type = ($InputFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputFilter_ = $InputFilter$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnDragListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$DragEvent, $DragEvent$Type} from "packages/icyllis/modernui/view/$DragEvent"

export interface $View$OnDragListener {

 "onDrag"(arg0: $View$Type, arg1: $DragEvent$Type): boolean

(arg0: $View$Type, arg1: $DragEvent$Type): boolean
}

export namespace $View$OnDragListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnDragListener$Type = ($View$OnDragListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnDragListener_ = $View$OnDragListener$Type;
}}
declare module "packages/icyllis/modernui/annotation/$IntRange" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $IntRange extends $Annotation {

 "to"(): long
 "from"(): long
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $IntRange {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntRange$Type = ($IntRange);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntRange_ = $IntRange$Type;
}}
declare module "packages/icyllis/modernui/view/$HapticFeedbackConstants" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $HapticFeedbackConstants {
static readonly "LONG_PRESS": integer
static readonly "VIRTUAL_KEY": integer
static readonly "KEYBOARD_TAP": integer
static readonly "CLOCK_TICK": integer
static readonly "CALENDAR_DATE": integer
static readonly "CONTEXT_CLICK": integer
static readonly "KEYBOARD_PRESS": integer
static readonly "KEYBOARD_RELEASE": integer
static readonly "VIRTUAL_KEY_RELEASE": integer
static readonly "TEXT_HANDLE_MOVE": integer
static readonly "ENTRY_BUMP": integer
static readonly "DRAG_CROSSING": integer
static readonly "GESTURE_START": integer
static readonly "GESTURE_END": integer
static readonly "EDGE_SQUEEZE": integer
static readonly "EDGE_RELEASE": integer
static readonly "CONFIRM": integer
static readonly "REJECT": integer
static readonly "SAFE_MODE_ENABLED": integer
static readonly "ASSISTANT_BUTTON": integer
static readonly "FLAG_IGNORE_VIEW_SETTING": integer
static readonly "FLAG_IGNORE_GLOBAL_SETTING": integer


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HapticFeedbackConstants$Type = ($HapticFeedbackConstants);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HapticFeedbackConstants_ = $HapticFeedbackConstants$Type;
}}
declare module "packages/icyllis/modernui/animation/$BounceInterpolator" {
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"

export class $BounceInterpolator implements $TimeInterpolator {


public "getInterpolation"(t: float): float
public static "cycle"(cycle: float): $TimeInterpolator
public static "overshoot"(): $TimeInterpolator
public static "overshoot"(tension: float): $TimeInterpolator
public static "bounce"(): $TimeInterpolator
public static "accelerate"(factor: float): $TimeInterpolator
public static "accelerate"(): $TimeInterpolator
public static "anticipate"(tension: float): $TimeInterpolator
public static "anticipate"(): $TimeInterpolator
public static "decelerate"(factor: float): $TimeInterpolator
public static "decelerate"(): $TimeInterpolator
public static "linear"(): $TimeInterpolator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BounceInterpolator$Type = ($BounceInterpolator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BounceInterpolator_ = $BounceInterpolator$Type;
}}
declare module "packages/icyllis/modernui/graphics/$GLSurfaceCanvas" {
import {$GLTexture, $GLTexture$Type} from "packages/icyllis/arc3d/opengl/$GLTexture"
import {$GLSampler, $GLSampler$Type} from "packages/icyllis/arc3d/opengl/$GLSampler"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ShortBuffer, $ShortBuffer$Type} from "packages/java/nio/$ShortBuffer"
import {$Paint, $Paint$Type} from "packages/icyllis/modernui/graphics/$Paint"
import {$GLSurface, $GLSurface$Type} from "packages/icyllis/modernui/graphics/$GLSurface"
import {$Image, $Image$Type} from "packages/icyllis/modernui/graphics/$Image"
import {$FloatBuffer, $FloatBuffer$Type} from "packages/java/nio/$FloatBuffer"
import {$Blender, $Blender$Type} from "packages/icyllis/arc3d/core/$Blender"
import {$Matrix4, $Matrix4$Type} from "packages/icyllis/arc3d/core/$Matrix4"
import {$CustomDrawable, $CustomDrawable$Type} from "packages/icyllis/modernui/graphics/$CustomDrawable"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$GLDevice, $GLDevice$Type} from "packages/icyllis/arc3d/opengl/$GLDevice"
import {$IntBuffer, $IntBuffer$Type} from "packages/java/nio/$IntBuffer"
import {$Canvas$VertexMode, $Canvas$VertexMode$Type} from "packages/icyllis/modernui/graphics/$Canvas$VertexMode"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"

export class $GLSurfaceCanvas extends $Canvas {
static readonly "MATRIX_BLOCK_BINDING": integer
static readonly "DRAW_PRIM": byte
static readonly "DRAW_RECT": byte
static readonly "DRAW_IMAGE": byte
static readonly "DRAW_ROUND_RECT_FILL": byte
static readonly "DRAW_ROUND_IMAGE": byte
static readonly "DRAW_ROUND_RECT_STROKE": byte
static readonly "DRAW_CIRCLE_FILL": byte
static readonly "DRAW_CIRCLE_STROKE": byte
static readonly "DRAW_ARC_FILL": byte
static readonly "DRAW_ARC_STROKE": byte
static readonly "DRAW_BEZIER": byte
static readonly "DRAW_TEXT": byte
static readonly "DRAW_IMAGE_LAYER": byte
static readonly "DRAW_CLIP_PUSH": byte
static readonly "DRAW_CLIP_POP": byte
static readonly "DRAW_MATRIX": byte
static readonly "DRAW_SMOOTH": byte
static readonly "DRAW_LAYER_PUSH": byte
static readonly "DRAW_LAYER_POP": byte
static readonly "DRAW_CUSTOM": byte
static readonly "DRAW_GLOW_WAVE": byte
static readonly "DRAW_PIE_FILL": byte
static readonly "DRAW_PIE_STROKE": byte
static readonly "DRAW_ROUND_LINE_FILL": byte
static readonly "DRAW_ROUND_LINE_STROKE": byte
static readonly "DRAW_RECT_STROKE_BEVEL": byte
static readonly "DRAW_RECT_STROKE_ROUND": byte
static readonly "MATRIX_UNIFORM_SIZE": integer
static readonly "SMOOTH_UNIFORM_SIZE": integer
static readonly "ARC_UNIFORM_SIZE": integer
static readonly "BEZIER_UNIFORM_SIZE": integer
static readonly "CIRCLE_UNIFORM_SIZE": integer
static readonly "ROUND_RECT_UNIFORM_SIZE": integer
static readonly "TEXTURE_RECT_VERTEX_SIZE": integer
static readonly "MAX_GLYPH_INDEX_COUNT": integer
static readonly "MARKER": $Marker

constructor(device: $GLDevice$Type)

public static "getInstance"(): $GLSurfaceCanvas
public static "initialize"(): $GLSurfaceCanvas
public "destroy"(): void
public "save"(): integer
public "reset"(width: integer, height: integer): void
public "drawRect"(left: float, top: float, right: float, bottom: float, paint: $Paint$Type): void
public "drawMesh"(mode: $Canvas$VertexMode$Type, pos: $FloatBuffer$Type, color: $IntBuffer$Type, tex: $FloatBuffer$Type, indices: $ShortBuffer$Type, blender: $Blender$Type, paint: $Paint$Type): void
public "setProjection"(projection: $Matrix4$Type): void
public "executeRenderPass"(framebuffer: $GLSurface$Type): boolean
public "drawImage"(image: $Image$Type, left: float, top: float, paint: $Paint$Type): void
public "drawImage"(image: $Image$Type, srcLeft: float, srcTop: float, srcRight: float, srcBottom: float, dstLeft: float, dstTop: float, dstRight: float, dstBottom: float, paint: $Paint$Type): void
public "restore"(): void
public "drawLine"(startX: float, startY: float, stopX: float, stopY: float, thickness: float, paint: $Paint$Type): void
public "drawRoundRect"(left: float, top: float, right: float, bottom: float, radius: float, sides: integer, paint: $Paint$Type): void
public "drawArc"(cx: float, cy: float, radius: float, startAngle: float, sweepAngle: float, paint: $Paint$Type): void
public "clipRect"(left: float, top: float, right: float, bottom: float): boolean
public "quickReject"(left: float, top: float, right: float, bottom: float): boolean
public "saveLayer"(left: float, top: float, right: float, bottom: float, alpha: integer): integer
public "getMatrix"(): $Matrix4
public "restoreToCount"(saveCount: integer): void
public "getSaveCount"(): integer
public "drawGlyphs"(glyphs: (integer)[], glyphOffset: integer, positions: (float)[], positionOffset: integer, glyphCount: integer, font: $Font$Type, x: float, y: float, paint: $Paint$Type): void
public "drawRoundImage"(image: $Image$Type, left: float, top: float, radius: float, paint: $Paint$Type): void
public "drawPie"(cx: float, cy: float, radius: float, startAngle: float, sweepAngle: float, paint: $Paint$Type): void
public "drawCircle"(cx: float, cy: float, radius: float, paint: $Paint$Type): void
public "drawBezier"(x0: float, y0: float, x1: float, y1: float, x2: float, y2: float, paint: $Paint$Type): void
public "drawRectGradient"(left: float, top: float, right: float, bottom: float, colorUL: integer, colorUR: integer, colorLR: integer, colorLL: integer, paint: $Paint$Type): void
public "drawCustomDrawable"(drawable: $CustomDrawable$Type, matrix: $Matrix4$Type): void
public "createProgram"(...stages: (integer)[]): integer
public "getProjection"(): $FloatBuffer
public "bindSampler"(sampler: $GLSampler$Type): void
public "drawGlowWave"(left: float, top: float, right: float, bottom: float): void
public "drawRoundLine"(startX: float, startY: float, stopX: float, stopY: float, paint: $Paint$Type): void
public "bindTexture"(texture: integer): void
public "drawLayer"(texture: $GLTexture$Type, w: float, h: float, alpha: float, flipY: boolean): void
public "drawRoundRectGradient"(left: float, top: float, right: float, bottom: float, colorUL: integer, colorUR: integer, colorLR: integer, colorLL: integer, radius: float, paint: $Paint$Type): void
public "getNativeMemoryUsage"(): integer
get "instance"(): $GLSurfaceCanvas
set "projection"(value: $Matrix4$Type)
get "matrix"(): $Matrix4
get "saveCount"(): integer
get "projection"(): $FloatBuffer
get "nativeMemoryUsage"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLSurfaceCanvas$Type = ($GLSurfaceCanvas);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLSurfaceCanvas_ = $GLSurfaceCanvas$Type;
}}
declare module "packages/icyllis/modernui/resources/$ResourceTable" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ResourceTable {

constructor()

public static "lookup"(pack: string, type: string, name: string, onlyPublic: boolean): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceTable$Type = ($ResourceTable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceTable_ = $ResourceTable$Type;
}}
declare module "packages/icyllis/modernui/fragment/$SharedElementCallback" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SharedElementCallback {

constructor()

public "onMapSharedElements"(names: $List$Type<(string)>, sharedElements: $Map$Type<(string), ($View$Type)>): void
public "onSharedElementStart"(sharedElementNames: $List$Type<(string)>, sharedElements: $List$Type<($View$Type)>, sharedElementSnapshots: $List$Type<($View$Type)>): void
public "onRejectSharedElements"(rejectedSharedElements: $List$Type<($View$Type)>): void
public "onSharedElementEnd"(sharedElementNames: $List$Type<(string)>, sharedElements: $List$Type<($View$Type)>, sharedElementSnapshots: $List$Type<($View$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SharedElementCallback$Type = ($SharedElementCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SharedElementCallback_ = $SharedElementCallback$Type;
}}
declare module "packages/icyllis/modernui/markdown/$MarkdownVisitor" {
import {$Editable, $Editable$Type} from "packages/icyllis/modernui/text/$Editable"
import {$NodeVisitHandler, $NodeVisitHandler$Type} from "packages/com/vladsch/flexmark/util/ast/$NodeVisitHandler"
import {$Node, $Node$Type} from "packages/com/vladsch/flexmark/util/ast/$Node"
import {$SpannableStringBuilder, $SpannableStringBuilder$Type} from "packages/icyllis/modernui/text/$SpannableStringBuilder"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $MarkdownVisitor implements $NodeVisitHandler {


public "length"(): integer
public "append"(c: character): $Editable
public "append"(text: charseq): $Editable
public "hasNext"(node: $Node$Type): boolean
public "builder"(): $SpannableStringBuilder
public "visit"(node: $Node$Type): void
public "blockEnd"(node: $Node$Type): void
public "blockStart"(node: $Node$Type): void
public "postSetSpans"(spans: any, offset: integer): void
public "preSetSpans"<N extends $Node>(node: N, offset: integer): any
public "getRenderArguments"(): $DataSet
public "ensureNewLine"(): void
public "visitChildren"(parent: $Node$Type): void
public "visitNodeOnly"(node: $Node$Type): void
public "forceNewLine"(): void
get "renderArguments"(): $DataSet
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownVisitor$Type = ($MarkdownVisitor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownVisitor_ = $MarkdownVisitor$Type;
}}
declare module "packages/icyllis/modernui/annotation/$ColorInt" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $ColorInt extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $ColorInt {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorInt$Type = ($ColorInt);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorInt_ = $ColorInt$Type;
}}
declare module "packages/icyllis/modernui/widget/$Editor" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Editor {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Editor$Type = ($Editor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Editor_ = $Editor$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$RectProgram$Feathered" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RectProgram, $RectProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$RectProgram"

export class $RectProgram$Feathered extends $RectProgram {
static readonly "VERT": $ResourceLocation
static readonly "VERT_TEX": $ResourceLocation


public "setThickness"(thickness: float): void
public "setInnerRect"(left: float, top: float, right: float, bottom: float): void
set "thickness"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RectProgram$Feathered$Type = ($RectProgram$Feathered);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RectProgram$Feathered_ = $RectProgram$Feathered$Type;
}}
declare module "packages/icyllis/modernui/text/$SpannedString" {
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$SpannableStringInternal, $SpannableStringInternal$Type} from "packages/icyllis/modernui/text/$SpannableStringInternal"
import {$GetChars, $GetChars$Type} from "packages/icyllis/modernui/text/$GetChars"

export class $SpannedString extends $SpannableStringInternal implements $Spanned, $GetChars {

constructor(source: charseq, start: integer, end: integer)
constructor(source: charseq)
constructor(source: charseq, start: integer, end: integer, ignoreNoCopySpan: boolean)
constructor(source: charseq, ignoreNoCopySpan: boolean)

public static "valueOf"(source: charseq): $SpannedString
public "subSequence"(start: integer, end: integer): charseq
public "getChars"(arg0: integer, arg1: integer, arg2: (character)[], arg3: integer): void
public static "compare"(arg0: charseq, arg1: charseq): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpannedString$Type = ($SpannedString);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpannedString_ = $SpannedString$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$Transformations" {
import {$LiveData, $LiveData$Type} from "packages/icyllis/modernui/lifecycle/$LiveData"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"

export class $Transformations {


public static "map"<X, Y>(source: $LiveData$Type<(X)>, mapFunction: $Function$Type<(any), (any)>): $LiveData<(Y)>
public static "switchMap"<X, Y>(source: $LiveData$Type<(X)>, switchMapFunction: $Function$Type<(any), (any)>): $LiveData<(Y)>
public static "distinctUntilChanged"<X>(source: $LiveData$Type<(X)>): $LiveData<(X)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Transformations$Type = ($Transformations);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Transformations_ = $Transformations$Type;
}}
declare module "packages/icyllis/modernui/graphics/$PathMeasure" {
import {$PointF, $PointF$Type} from "packages/icyllis/modernui/graphics/$PointF"
import {$Path, $Path$Type} from "packages/icyllis/modernui/graphics/$Path"
import {$PathMeasure as $PathMeasure$0, $PathMeasure$Type as $PathMeasure$0$Type} from "packages/icyllis/arc3d/core/$PathMeasure"
import {$Matrix, $Matrix$Type} from "packages/icyllis/modernui/graphics/$Matrix"

export class $PathMeasure extends $PathMeasure$0 {
static readonly "MATRIX_FLAG_GET_POSITION": integer
static readonly "MATRIX_FLAG_GET_TANGENT": integer
static readonly "MATRIX_FLAG_GET_POS_AND_TAN": integer

constructor(path: $Path$Type, forceClose: boolean, resScale: float)
constructor(path: $Path$Type, forceClose: boolean)
constructor()

public "getLength"(): float
public "reset"(path: $Path$Type, forceClose: boolean, resScale: float): boolean
public "reset"(): void
public "reset"(path: $Path$Type, forceClose: boolean): boolean
public "isClosed"(): boolean
public "getMatrix"(distance: float, matrix: $Matrix$Type, flags: integer): boolean
public "getSegment"(startDistance: float, endDistance: float, dst: $Path$Type, startWithMoveTo: boolean): boolean
public "nextContour"(): boolean
public "getPosTan"(distance: float, position: $PointF$Type, tangent: $PointF$Type): boolean
public "getPosTan"(distance: float, position: (float)[], tangent: (float)[]): boolean
get "length"(): float
get "closed"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathMeasure$Type = ($PathMeasure);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathMeasure_ = $PathMeasure$Type;
}}
declare module "packages/icyllis/modernui/audio/$VorbisPushDecoder" {
import {$FloatBuffer, $FloatBuffer$Type} from "packages/java/nio/$FloatBuffer"
import {$SoundStream, $SoundStream$Type} from "packages/icyllis/modernui/audio/$SoundStream"
import {$FileChannel, $FileChannel$Type} from "packages/java/nio/channels/$FileChannel"

export class $VorbisPushDecoder extends $SoundStream {

constructor(channel: $FileChannel$Type)

public "close"(): void
public "decodeFrame"(output: $FloatBuffer$Type): $FloatBuffer
public "getTotalSamples"(): integer
get "totalSamples"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VorbisPushDecoder$Type = ($VorbisPushDecoder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VorbisPushDecoder_ = $VorbisPushDecoder$Type;
}}
declare module "packages/icyllis/modernui/mc/$MixinConfigPlugin" {
import {$IMixinInfo, $IMixinInfo$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinInfo"
import {$ClassNode, $ClassNode$Type} from "packages/org/objectweb/asm/tree/$ClassNode"
import {$IMixinConfigPlugin, $IMixinConfigPlugin$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinConfigPlugin"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"

export class $MixinConfigPlugin implements $IMixinConfigPlugin {

constructor()

public "onLoad"(mixinPackage: string): void
public "postApply"(targetClassName: string, targetClass: $ClassNode$Type, mixinClassName: string, mixinInfo: $IMixinInfo$Type): void
public "getMixins"(): $List<(string)>
public "getRefMapperConfig"(): string
public "shouldApplyMixin"(targetClassName: string, mixinClassName: string): boolean
public "preApply"(targetClassName: string, targetClass: $ClassNode$Type, mixinClassName: string, mixinInfo: $IMixinInfo$Type): void
public "acceptTargets"(myTargets: $Set$Type<(string)>, otherTargets: $Set$Type<(string)>): void
get "mixins"(): $List<(string)>
get "refMapperConfig"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MixinConfigPlugin$Type = ($MixinConfigPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MixinConfigPlugin_ = $MixinConfigPlugin$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnHoverListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export interface $View$OnHoverListener {

 "onHover"(arg0: $View$Type, arg1: $MotionEvent$Type): boolean

(arg0: $View$Type, arg1: $MotionEvent$Type): boolean
}

export namespace $View$OnHoverListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnHoverListener$Type = ($View$OnHoverListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnHoverListener_ = $View$OnHoverListener$Type;
}}
declare module "packages/icyllis/modernui/view/$MeasureSpec" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $MeasureSpec {
static readonly "UNSPECIFIED": integer
static readonly "EXACTLY": integer
static readonly "AT_MOST": integer

constructor()

public static "toString"(measureSpec: integer): string
public static "getSize"(measureSpec: integer): integer
public static "makeMeasureSpec"(size: integer, mode: integer): integer
public static "getMode"(measureSpec: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MeasureSpec$Type = ($MeasureSpec);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MeasureSpec_ = $MeasureSpec$Type;
}}
declare module "packages/icyllis/modernui/util/$GrowingArrayUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GrowingArrayUtils {


public static "append"(array: (boolean)[], currentSize: integer, element: boolean): (boolean)[]
public static "append"(array: (long)[], currentSize: integer, element: long): (long)[]
public static "append"<T>(array: (T)[], currentSize: integer, element: T): (T)[]
public static "append"(array: (integer)[], currentSize: integer, element: integer): (integer)[]
public static "insert"(array: (long)[], currentSize: integer, index: integer, element: long): (long)[]
public static "insert"(array: (boolean)[], currentSize: integer, index: integer, element: boolean): (boolean)[]
public static "insert"<T>(array: (T)[], currentSize: integer, index: integer, element: T): (T)[]
public static "insert"(array: (integer)[], currentSize: integer, index: integer, element: integer): (integer)[]
public static "growSize"(currentSize: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GrowingArrayUtils$Type = ($GrowingArrayUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GrowingArrayUtils_ = $GrowingArrayUtils$Type;
}}
declare module "packages/icyllis/modernui/text/style/$StrikethroughSpan" {
import {$CharacterStyle, $CharacterStyle$Type} from "packages/icyllis/modernui/text/style/$CharacterStyle"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$UpdateAppearance, $UpdateAppearance$Type} from "packages/icyllis/modernui/text/style/$UpdateAppearance"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $StrikethroughSpan extends $CharacterStyle implements $UpdateAppearance, $ParcelableSpan {

constructor()
constructor(src: $Parcel$Type)

public "updateDrawState"(paint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
get "spanTypeId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StrikethroughSpan$Type = ($StrikethroughSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StrikethroughSpan_ = $StrikethroughSpan$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentManagerViewModel" {
import {$ViewModel, $ViewModel$Type} from "packages/icyllis/modernui/lifecycle/$ViewModel"

export class $FragmentManagerViewModel extends $ViewModel {


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentManagerViewModel$Type = ($FragmentManagerViewModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentManagerViewModel_ = $FragmentManagerViewModel$Type;
}}
declare module "packages/icyllis/modernui/mc/$ModernUIClient" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$WindowManager, $WindowManager$Type} from "packages/icyllis/modernui/view/$WindowManager"
import {$Properties, $Properties$Type} from "packages/java/util/$Properties"
import {$ModernUI, $ModernUI$Type} from "packages/icyllis/modernui/$ModernUI"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$ReadableByteChannel, $ReadableByteChannel$Type} from "packages/java/nio/channels/$ReadableByteChannel"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$DriverBugWorkarounds, $DriverBugWorkarounds$Type} from "packages/icyllis/arc3d/engine/$DriverBugWorkarounds"
import {$FontFamily, $FontFamily$Type} from "packages/icyllis/modernui/graphics/text/$FontFamily"

export class $ModernUIClient extends $ModernUI {
static "sInventoryPause": boolean
static "sRemoveTelemetrySession": boolean
static "sFontScale": float
static "sUseColorEmoji": boolean
static "sEmojiShortcodes": boolean
static "sFirstFontFamily": string
static "sFallbackFontFamilyList": $List<(any)>
static "sFontRegistrationList": $List<(any)>
static readonly "ID": string
static readonly "NAME_CPT": string
static readonly "LOGGER": $Logger
static readonly "MARKER": $Marker
static readonly "props": $Properties


public static "getInstance"(): $ModernUIClient
public "getResourceStream"(namespace: string, path: string): $InputStream
public static "getBootstrapProperty"(key: string): string
public static "getGpuDriverBugWorkarounds"(): $DriverBugWorkarounds
public static "setBootstrapProperty"(key: string, value: string): void
public "getWindowManager"(): $WindowManager
public "getResourceChannel"(namespace: string, path: string): $ReadableByteChannel
public static "loadFonts"(first: string, fallbacks: $Collection$Type<(string)>, selected: $Set$Type<($FontFamily$Type)>, firstSetter: $Consumer$Type<($FontFamily$Type)>, firstLoad: boolean): void
public static "areShadersEnabled"(): boolean
public "reloadTypeface"(): void
public "reloadFontStrike"(): void
public "getFirstFontFamily"(): $FontFamily
get "instance"(): $ModernUIClient
get "gpuDriverBugWorkarounds"(): $DriverBugWorkarounds
get "windowManager"(): $WindowManager
get "firstFontFamily"(): $FontFamily
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModernUIClient$Type = ($ModernUIClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModernUIClient_ = $ModernUIClient$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$FontCollection$Run" {
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"

export class $FontCollection$Run {


public "start"(): integer
public "limit"(): integer
public "getBestFont"(text: (character)[], style: integer): $Font
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FontCollection$Run$Type = ($FontCollection$Run);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FontCollection$Run_ = $FontCollection$Run$Type;
}}
declare module "packages/icyllis/modernui/resources/$ResourceParser$ParsedResource" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceValues$Value, $ResourceValues$Value$Type} from "packages/icyllis/modernui/resources/$ResourceValues$Value"
import {$Resource$ResourceName, $Resource$ResourceName$Type} from "packages/icyllis/modernui/resources/$Resource$ResourceName"

export class $ResourceParser$ParsedResource {
 "name": $Resource$ResourceName
 "id": integer
 "staged_api": boolean
 "allow_new": boolean
 "value": $ResourceValues$Value
 "child_resources": $List<($ResourceParser$ParsedResource)>

constructor()

public "toString"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceParser$ParsedResource$Type = ($ResourceParser$ParsedResource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceParser$ParsedResource_ = $ResourceParser$ParsedResource$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$Font" {
import {$FontPaint, $FontPaint$Type} from "packages/icyllis/modernui/graphics/text/$FontPaint"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$IntArrayList, $IntArrayList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntArrayList"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"
import {$FloatArrayList, $FloatArrayList$Type} from "packages/it/unimi/dsi/fastutil/floats/$FloatArrayList"
import {$Strike, $Strike$Type} from "packages/icyllis/arc3d/core/$Strike"

export interface $Font {

 "getFullName"(arg0: $Locale$Type): string
 "getFullName"(): string
 "getStyle"(): integer
 "getFamilyName"(arg0: $Locale$Type): string
 "getFamilyName"(): string
 "getMetrics"(arg0: $FontPaint$Type, arg1: $FontMetricsInt$Type): integer
 "hasGlyph"(arg0: integer, arg1: integer): boolean
 "doSimpleLayout"(arg0: (character)[], arg1: integer, arg2: integer, arg3: $FontPaint$Type, arg4: $IntArrayList$Type, arg5: $FloatArrayList$Type, arg6: float, arg7: float): float
 "calcGlyphScore"(buf: (character)[], start: integer, limit: integer): integer
 "findOrCreateStrike"(arg0: $FontPaint$Type): $Strike
 "doComplexLayout"(arg0: (character)[], arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: boolean, arg6: $FontPaint$Type, arg7: $IntArrayList$Type, arg8: $FloatArrayList$Type, arg9: (float)[], arg10: integer, arg11: $Rect$Type, arg12: float, arg13: float): float
}

export namespace $Font {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Font$Type = ($Font);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Font_ = $Font$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Config$Text" {
import {$ForgeConfigSpec$BooleanValue, $ForgeConfigSpec$BooleanValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$BooleanValue"
import {$ForgeConfigSpec$DoubleValue, $ForgeConfigSpec$DoubleValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$DoubleValue"
import {$Config$Text$LineBreakStyle, $Config$Text$LineBreakStyle$Type} from "packages/icyllis/modernui/mc/forge/$Config$Text$LineBreakStyle"
import {$ForgeConfigSpec$EnumValue, $ForgeConfigSpec$EnumValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$EnumValue"
import {$Config$Text$DefaultFontBehavior, $Config$Text$DefaultFontBehavior$Type} from "packages/icyllis/modernui/mc/forge/$Config$Text$DefaultFontBehavior"
import {$ForgeConfigSpec$IntValue, $ForgeConfigSpec$IntValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$IntValue"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Config$Text$TextDirection, $Config$Text$TextDirection$Type} from "packages/icyllis/modernui/mc/forge/$Config$Text$TextDirection"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$Config$Text$LineBreakWordStyle, $Config$Text$LineBreakWordStyle$Type} from "packages/icyllis/modernui/mc/forge/$Config$Text$LineBreakWordStyle"

export class $Config$Text {
static readonly "BASE_FONT_SIZE_MIN": float
static readonly "BASE_FONT_SIZE_MAX": float
static readonly "BASELINE_MIN": float
static readonly "BASELINE_MAX": float
static readonly "SHADOW_OFFSET_MIN": float
static readonly "SHADOW_OFFSET_MAX": float
static readonly "OUTLINE_OFFSET_MIN": float
static readonly "OUTLINE_OFFSET_MAX": float
static readonly "LIFESPAN_MIN": integer
static readonly "LIFESPAN_MAX": integer
readonly "mAllowShadow": $ForgeConfigSpec$BooleanValue
readonly "mFixedResolution": $ForgeConfigSpec$BooleanValue
readonly "mBaseFontSize": $ForgeConfigSpec$DoubleValue
readonly "mBaselineShift": $ForgeConfigSpec$DoubleValue
readonly "mShadowOffset": $ForgeConfigSpec$DoubleValue
readonly "mOutlineOffset": $ForgeConfigSpec$DoubleValue
readonly "mCacheLifespan": $ForgeConfigSpec$IntValue
readonly "mTextDirection": $ForgeConfigSpec$EnumValue<($Config$Text$TextDirection)>
readonly "mUseTextShadersInWorld": $ForgeConfigSpec$BooleanValue
readonly "mDefaultFontBehavior": $ForgeConfigSpec$EnumValue<($Config$Text$DefaultFontBehavior)>
readonly "mDefaultFontRuleSet": $ForgeConfigSpec$ConfigValue<($List<(any)>)>
readonly "mUseComponentCache": $ForgeConfigSpec$BooleanValue
readonly "mAllowAsyncLayout": $ForgeConfigSpec$BooleanValue
readonly "mLineBreakStyle": $ForgeConfigSpec$EnumValue<($Config$Text$LineBreakStyle)>
readonly "mLineBreakWordStyle": $ForgeConfigSpec$EnumValue<($Config$Text$LineBreakWordStyle)>
readonly "mSmartSDFShaders": $ForgeConfigSpec$BooleanValue
readonly "mComputeDeviceFontSize": $ForgeConfigSpec$BooleanValue
readonly "mAllowSDFTextIn2D": $ForgeConfigSpec$BooleanValue


public "saveAndReloadAsync"(): void
public "saveAsync"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Text$Type = ($Config$Text);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config$Text_ = $Config$Text$Type;
}}
declare module "packages/icyllis/modernui/transition/$SidePropagation" {
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$VisibilityPropagation, $VisibilityPropagation$Type} from "packages/icyllis/modernui/transition/$VisibilityPropagation"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $SidePropagation extends $VisibilityPropagation {

constructor()

public "setSide"(side: integer): void
public "getStartDelay"(sceneRoot: $ViewGroup$Type, transition: $Transition$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): long
public "setPropagationSpeed"(propagationSpeed: float): void
set "side"(value: integer)
set "propagationSpeed"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SidePropagation$Type = ($SidePropagation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SidePropagation_ = $SidePropagation$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$ShapedText$RunConsumer" {
import {$LayoutPiece, $LayoutPiece$Type} from "packages/icyllis/modernui/graphics/text/$LayoutPiece"

export interface $ShapedText$RunConsumer {

 "accept"(arg0: $LayoutPiece$Type, arg1: float): void

(arg0: $LayoutPiece$Type, arg1: float): void
}

export namespace $ShapedText$RunConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapedText$RunConsumer$Type = ($ShapedText$RunConsumer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapedText$RunConsumer_ = $ShapedText$RunConsumer$Type;
}}
declare module "packages/icyllis/modernui/text/$MeasuredParagraph" {
import {$TextDirectionHeuristic, $TextDirectionHeuristic$Type} from "packages/icyllis/modernui/text/$TextDirectionHeuristic"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Directions, $Directions$Type} from "packages/icyllis/modernui/text/$Directions"
import {$LineBreakConfig, $LineBreakConfig$Type} from "packages/icyllis/modernui/graphics/text/$LineBreakConfig"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$IntArrayList, $IntArrayList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntArrayList"
import {$MeasuredText, $MeasuredText$Type} from "packages/icyllis/modernui/graphics/text/$MeasuredText"

export class $MeasuredParagraph {


public "getChars"(): (character)[]
public "release"(): void
public "getTextLength"(): integer
public "getTextStart"(): integer
public "getExtent"(start: integer, end: integer, fmi: $FontMetricsInt$Type): void
public "recycle"(): void
public "getDirections"(start: integer, end: integer): $Directions
public "getSpanEndCache"(): $IntArrayList
public "getMeasuredText"(): $MeasuredText
public "getMemoryUsage"(): integer
public "getParagraphDir"(): integer
public static "buildForBidi"(text: charseq, start: integer, end: integer, textDir: $TextDirectionHeuristic$Type, recycle: $MeasuredParagraph$Type): $MeasuredParagraph
public static "buildForStaticLayout"(paint: $TextPaint$Type, lineBreakConfig: $LineBreakConfig$Type, text: charseq, start: integer, end: integer, textDir: $TextDirectionHeuristic$Type, fullLayout: boolean, recycle: $MeasuredParagraph$Type): $MeasuredParagraph
public "getFontMetrics"(): $IntArrayList
public "getAdvance"(start: integer, end: integer): float
public "getAdvance"(offset: integer): float
get "chars"(): (character)[]
get "textLength"(): integer
get "textStart"(): integer
get "spanEndCache"(): $IntArrayList
get "measuredText"(): $MeasuredText
get "memoryUsage"(): integer
get "paragraphDir"(): integer
get "fontMetrics"(): $IntArrayList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MeasuredParagraph$Type = ($MeasuredParagraph);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MeasuredParagraph_ = $MeasuredParagraph$Type;
}}
declare module "packages/icyllis/modernui/widget/$TableLayout" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$LinearLayout, $LinearLayout$Type} from "packages/icyllis/modernui/widget/$LinearLayout"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $TableLayout extends $LinearLayout {
static readonly "HORIZONTAL": integer
static readonly "VERTICAL": integer
static readonly "SHOW_DIVIDER_NONE": integer
static readonly "SHOW_DIVIDER_BEGINNING": integer
static readonly "SHOW_DIVIDER_MIDDLE": integer
static readonly "SHOW_DIVIDER_END": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "addView"(child: $View$Type, index: integer, params: $ViewGroup$LayoutParams$Type): void
public "addView"(child: $View$Type, index: integer): void
public "addView"(child: $View$Type): void
public "addView"(child: $View$Type, params: $ViewGroup$LayoutParams$Type): void
public "requestLayout"(): void
public "isColumnStretchable"(columnIndex: integer): boolean
public "setColumnShrinkable"(columnIndex: integer, isShrinkable: boolean): void
public "setShrinkAllColumns"(shrinkAllColumns: boolean): void
public "setStretchAllColumns"(stretchAllColumns: boolean): void
public "isStretchAllColumns"(): boolean
public "setColumnStretchable"(columnIndex: integer, isStretchable: boolean): void
public "setColumnCollapsed"(columnIndex: integer, isCollapsed: boolean): void
public "isColumnCollapsed"(columnIndex: integer): boolean
public "isColumnShrinkable"(columnIndex: integer): boolean
public "isShrinkAllColumns"(): boolean
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "shrinkAllColumns"(value: boolean)
set "stretchAllColumns"(value: boolean)
get "stretchAllColumns"(): boolean
get "shrinkAllColumns"(): boolean
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TableLayout$Type = ($TableLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TableLayout_ = $TableLayout$Type;
}}
declare module "packages/icyllis/modernui/core/$LocaleList" {
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $LocaleList {

constructor(...list: ($Locale$Type)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocaleList$Type = ($LocaleList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocaleList_ = $LocaleList$Type;
}}
declare module "packages/icyllis/modernui/text/style/$ClickableSpan" {
import {$CharacterStyle, $CharacterStyle$Type} from "packages/icyllis/modernui/text/style/$CharacterStyle"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$UpdateAppearance, $UpdateAppearance$Type} from "packages/icyllis/modernui/text/style/$UpdateAppearance"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export class $ClickableSpan extends $CharacterStyle implements $UpdateAppearance {

constructor()

public "getId"(): integer
public "onClick"(arg0: $View$Type): void
public "updateDrawState"(ds: $TextPaint$Type): void
get "id"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClickableSpan$Type = ($ClickableSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClickableSpan_ = $ClickableSpan$Type;
}}
declare module "packages/icyllis/modernui/util/$L0Padding" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $L0Padding<E> {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L0Padding$Type<E> = ($L0Padding<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L0Padding_<E> = $L0Padding$Type<(E)>;
}}
declare module "packages/icyllis/modernui/markdown/$MarkdownPlugin$Registry" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$MarkdownPlugin, $MarkdownPlugin$Type} from "packages/icyllis/modernui/markdown/$MarkdownPlugin"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $MarkdownPlugin$Registry {

 "require"<P extends $MarkdownPlugin>(arg0: $Class$Type<(P)>): P
 "require"<P extends $MarkdownPlugin>(arg0: $Class$Type<(P)>, arg1: $Consumer$Type<(any)>): void
}

export namespace $MarkdownPlugin$Registry {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownPlugin$Registry$Type = ($MarkdownPlugin$Registry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownPlugin$Registry_ = $MarkdownPlugin$Registry$Type;
}}
declare module "packages/icyllis/modernui/mc/mixin/$AccessOptions" {
import {$OptionInstance, $OptionInstance$Type} from "packages/net/minecraft/client/$OptionInstance"

export interface $AccessOptions {

 "setGuiScale"(arg0: $OptionInstance$Type<(integer)>): void

(arg0: $OptionInstance$Type<(integer)>): void
}

export namespace $AccessOptions {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessOptions$Type = ($AccessOptions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessOptions_ = $AccessOptions$Type;
}}
declare module "packages/icyllis/modernui/animation/$AnimatorListener" {
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"

export interface $AnimatorListener {

 "onAnimationResume"(animation: $Animator$Type): void
 "onAnimationPause"(animation: $Animator$Type): void
 "onAnimationEnd"(animation: $Animator$Type, isReverse: boolean): void
 "onAnimationEnd"(animation: $Animator$Type): void
 "onAnimationRepeat"(animation: $Animator$Type): void
 "onAnimationCancel"(animation: $Animator$Type): void
 "onAnimationStart"(animation: $Animator$Type): void
 "onAnimationStart"(animation: $Animator$Type, isReverse: boolean): void
}

export namespace $AnimatorListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimatorListener$Type = ($AnimatorListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimatorListener_ = $AnimatorListener$Type;
}}
declare module "packages/icyllis/modernui/util/$DataSetObserver" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $DataSetObserver {

 "onInvalidated"(): void
 "onChanged"(): void
}

export namespace $DataSetObserver {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataSetObserver$Type = ($DataSetObserver);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataSetObserver_ = $DataSetObserver$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuAdapter" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"
import {$BaseAdapter, $BaseAdapter$Type} from "packages/icyllis/modernui/widget/$BaseAdapter"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $MenuAdapter extends $BaseAdapter {

constructor(context: $Context$Type, menu: $MenuBuilder$Type, overflowOnly: boolean)

public "getCount"(): integer
public "getItemId"(position: integer): long
public "getView"(position: integer, convertView: $View$Type, parent: $ViewGroup$Type): $View
public "notifyDataSetChanged"(): void
public "getForceShowIcon"(): boolean
public "getAdapterMenu"(): $MenuBuilder
public "setForceShowIcon"(forceShow: boolean): void
get "count"(): integer
get "forceShowIcon"(): boolean
get "adapterMenu"(): $MenuBuilder
set "forceShowIcon"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuAdapter$Type = ($MenuAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuAdapter_ = $MenuAdapter$Type;
}}
declare module "packages/icyllis/modernui/renderer/$RenderThread" {
import {$Thread, $Thread$Type} from "packages/java/lang/$Thread"

export class $RenderThread extends $Thread {
static readonly "MIN_PRIORITY": integer
static readonly "NORM_PRIORITY": integer
static readonly "MAX_PRIORITY": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderThread$Type = ($RenderThread);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderThread_ = $RenderThread$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$StandardFontSet" {
import {$GlyphProvider, $GlyphProvider$Type} from "packages/com/mojang/blaze3d/font/$GlyphProvider"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FontCollection, $FontCollection$Type} from "packages/icyllis/modernui/graphics/text/$FontCollection"
import {$GlyphInfo, $GlyphInfo$Type} from "packages/com/mojang/blaze3d/font/$GlyphInfo"
import {$BakedGlyph, $BakedGlyph$Type} from "packages/net/minecraft/client/gui/font/glyphs/$BakedGlyph"
import {$FontSet, $FontSet$Type} from "packages/net/minecraft/client/gui/font/$FontSet"
import {$TextureManager, $TextureManager$Type} from "packages/net/minecraft/client/renderer/texture/$TextureManager"

export class $StandardFontSet extends $FontSet {
readonly "providers": $List<($GlyphProvider)>

constructor(texMgr: $TextureManager$Type, fontName: $ResourceLocation$Type)

public "reload"(fontCollection: $FontCollection$Type, newResLevel: integer): void
public "invalidateCache"(newResLevel: integer): void
public "getGlyphInfo"(codePoint: integer, notFishy: boolean): $GlyphInfo
public "getGlyph"(codePoint: integer): $BakedGlyph
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StandardFontSet$Type = ($StandardFontSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StandardFontSet_ = $StandardFontSet$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$FontPaint" {
import {$Paint, $Paint$Type} from "packages/icyllis/modernui/graphics/$Paint"
import {$FontCollection, $FontCollection$Type} from "packages/icyllis/modernui/graphics/text/$FontCollection"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $FontPaint {
static readonly "NORMAL": integer
static readonly "BOLD": integer
static readonly "ITALIC": integer
static readonly "BOLD_ITALIC": integer
static readonly "FONT_STYLE_MASK": integer
static readonly "RENDER_FLAG_ANTI_ALIAS": integer
static readonly "RENDER_FLAG_LINEAR_METRICS": integer
static readonly "RENDER_FLAG_MASK": integer
static readonly "RENDER_FLAG_SHIFT": integer

constructor()
constructor(paint: $FontPaint$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "set"(paint: $FontPaint$Type): void
public "getLocale"(): $Locale
public "setLocale"(locale: $Locale$Type): void
public "setFontStyle"(fontStyle: integer): void
public "getFontSize"(): integer
public "getFontStyle"(): integer
public static "computeRenderFlags"(paint: $Paint$Type): integer
public "isMetricAffecting"(paint: $FontPaint$Type): boolean
public "setRenderFlags"(flags: integer): void
public "getFontMetricsInt"(fm: $FontMetricsInt$Type): integer
public "getRenderFlags"(): integer
public "getFont"(): $FontCollection
public "setFont"(font: $FontCollection$Type): void
public "setFontSize"(fontSize: integer): void
get "locale"(): $Locale
set "locale"(value: $Locale$Type)
set "fontStyle"(value: integer)
get "fontSize"(): integer
get "fontStyle"(): integer
set "renderFlags"(value: integer)
get "renderFlags"(): integer
get "font"(): $FontCollection
set "font"(value: $FontCollection$Type)
set "fontSize"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FontPaint$Type = ($FontPaint);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FontPaint_ = $FontPaint$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Point" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Point {
 "x": integer
 "y": integer

constructor(p: $Point$Type)
constructor(x: integer, y: integer)
constructor()

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "offset"(dx: integer, dy: integer): void
public "set"(x: integer, y: integer): void
public "set"(p: $Point$Type): void
public "copy"(): $Point
public static "copy"(p: $Point$Type): $Point
public "negate"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Point$Type = ($Point);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Point_ = $Point$Type;
}}
declare module "packages/icyllis/modernui/widget/$Filter$FilterListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $Filter$FilterListener {

 "onFilterComplete"(arg0: integer): void

(arg0: integer): void
}

export namespace $Filter$FilterListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Filter$FilterListener$Type = ($Filter$FilterListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Filter$FilterListener_ = $Filter$FilterListener$Type;
}}
declare module "packages/icyllis/modernui/core/$Monitor" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$VideoMode, $VideoMode$Type} from "packages/icyllis/modernui/core/$VideoMode"
import {$Monitor$MonitorEventListener, $Monitor$MonitorEventListener$Type} from "packages/icyllis/modernui/core/$Monitor$MonitorEventListener"

export class $Monitor {


public "getName"(): string
public static "get"(handle: long): $Monitor
public "getHandle"(): long
public static "getAll"(): $Collection<($Monitor)>
public "getXPos"(): integer
public "getYPos"(): integer
public static "getPrimary"(): $Monitor
public "getCurrentMode"(): $VideoMode
public static "addMonitorEventListener"(listener: $Monitor$MonitorEventListener$Type): void
public static "removeMonitorEventListener"(listener: $Monitor$MonitorEventListener$Type): void
public "getModeAt"(index: integer): $VideoMode
public "findBestMode"(width: integer, height: integer): $VideoMode
public "getModeCount"(): integer
get "name"(): string
get "handle"(): long
get "all"(): $Collection<($Monitor)>
get "xPos"(): integer
get "yPos"(): integer
get "primary"(): $Monitor
get "currentMode"(): $VideoMode
get "modeCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Monitor$Type = ($Monitor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Monitor_ = $Monitor$Type;
}}
declare module "packages/icyllis/modernui/mc/text/$ModernStringSplitter" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$StringSplitter$LinePosConsumer, $StringSplitter$LinePosConsumer$Type} from "packages/net/minecraft/client/$StringSplitter$LinePosConsumer"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$FormattedText, $FormattedText$Type} from "packages/net/minecraft/network/chat/$FormattedText"
import {$StringSplitter, $StringSplitter$Type} from "packages/net/minecraft/client/$StringSplitter"
import {$TextLayout, $TextLayout$Type} from "packages/icyllis/modernui/mc/text/$TextLayout"
import {$StringSplitter$WidthProvider, $StringSplitter$WidthProvider$Type} from "packages/net/minecraft/client/$StringSplitter$WidthProvider"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$TextLayoutEngine, $TextLayoutEngine$Type} from "packages/icyllis/modernui/mc/text/$TextLayoutEngine"

export class $ModernStringSplitter extends $StringSplitter {

constructor(engine: $TextLayoutEngine$Type, widthProvider: $StringSplitter$WidthProvider$Type)

public "measureText"(text: string): float
public "measureText"(text: $FormattedText$Type): float
public "measureText"(text: $FormattedCharSequence$Type): float
public "headByWidth"(text: $FormattedText$Type, width: float, style: $Style$Type): $FormattedText
public "headByWidth"(text: string, width: float, style: $Style$Type): string
public "stringWidth"(text: string): float
public "stringWidth"(text: $FormattedText$Type): float
public "stringWidth"(text: $FormattedCharSequence$Type): float
public "plainHeadByWidth"(text: string, width: integer, style: $Style$Type): string
public "plainTailByWidth"(text: string, width: integer, style: $Style$Type): string
public "headByWidth"(text: $FormattedText$Type, width: integer, style: $Style$Type): $FormattedText
public "formattedIndexByWidth"(text: string, width: integer, style: $Style$Type): integer
public "plainIndexAtWidth"(text: string, width: integer, style: $Style$Type): integer
public "formattedHeadByWidth"(text: string, width: integer, style: $Style$Type): string
public "splitLines"(text: string, width: integer, style: $Style$Type, withEndSpace: boolean, linePos: $StringSplitter$LinePosConsumer$Type): void
public "splitLines"(text: $FormattedText$Type, width: integer, style: $Style$Type, consumer: $BiConsumer$Type<($FormattedText$Type), (boolean)>): void
public "indexByWidth"(text: string, width: float, style: $Style$Type): integer
public "styleAtWidth"(text: $FormattedCharSequence$Type, width: float): $Style
public "styleAtWidth"(text: $FormattedText$Type, width: float): $Style
public "breakText"(text: string, width: float, style: $Style$Type, forwards: boolean): integer
public static "breakText"(layout: $TextLayout$Type, forwards: boolean, width: float): integer
public "tailByWidth"(text: string, width: float, style: $Style$Type): string
public "computeLineBreaks"(text: $FormattedText$Type, width: float, base: $Style$Type, consumer: $BiConsumer$Type<($FormattedText$Type), (boolean)>): void
public "computeLineBreaks"(text: string, width: float, base: $Style$Type, consumer: $StringSplitter$LinePosConsumer$Type): void
public "componentStyleAtWidth"(text: $FormattedCharSequence$Type, width: integer): $Style
public "componentStyleAtWidth"(text: $FormattedText$Type, width: integer): $Style
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModernStringSplitter$Type = ($ModernStringSplitter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModernStringSplitter_ = $ModernStringSplitter$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Rect" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Rect {
 "left": integer
 "top": integer
 "right": integer
 "bottom": integer

constructor(r: $Rect$Type)
constructor(left: integer, top: integer, right: integer, bottom: integer)
constructor()

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "isEmpty"(): boolean
public "join"(left: integer, top: integer, right: integer, bottom: integer): void
public "offset"(dx: integer, dy: integer): void
public "x"(): integer
public "contains"(x: integer, y: integer): boolean
public "contains"(left: integer, top: integer, right: integer, bottom: integer): boolean
public "contains"(r: $Rect$Type): boolean
public "set"(src: $Rect$Type): void
public "set"(left: integer, top: integer, right: integer, bottom: integer): void
public "toShortString"(): string
public "copy"(): $Rect
public static "copy"(r: $Rect$Type): $Rect
public "sort"(): void
public "y"(): integer
public "width"(): integer
public "union"(x: integer, y: integer): void
public "union"(left: integer, top: integer, right: integer, bottom: integer): void
public "union"(r: $Rect$Type): void
public static "intersects"(a: $Rect$Type, b: $Rect$Type): boolean
public "intersects"(left: integer, top: integer, right: integer, bottom: integer): boolean
public "height"(): integer
public "inset"(left: integer, top: integer, right: integer, bottom: integer): void
public "inset"(insets: $Rect$Type): void
public "inset"(dx: integer, dy: integer): void
public "intersect"(left: integer, top: integer, right: integer, bottom: integer): boolean
public "intersect"(r: $Rect$Type): boolean
public "offsetTo"(newLeft: integer, newTop: integer): void
public "setIntersect"(a: $Rect$Type, b: $Rect$Type): boolean
public "exactCenterX"(): float
public "exactCenterY"(): float
public "intersectUnchecked"(other: $Rect$Type): void
public "setEmpty"(): void
public "centerX"(): integer
public "centerY"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Rect$Type = ($Rect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Rect_ = $Rect$Type;
}}
declare module "packages/icyllis/modernui/text/$GetChars" {
import {$IntStream, $IntStream$Type} from "packages/java/util/stream/$IntStream"

export interface $GetChars extends charseq {

 "getChars"(arg0: integer, arg1: integer, arg2: (character)[], arg3: integer): void
 "length"(): integer
 "toString"(): string
 "charAt"(arg0: integer): character
 "isEmpty"(): boolean
 "codePoints"(): $IntStream
 "subSequence"(arg0: integer, arg1: integer): charseq
 "chars"(): $IntStream
}

export namespace $GetChars {
function compare(arg0: charseq, arg1: charseq): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GetChars$Type = ($GetChars);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GetChars_ = $GetChars$Type;
}}
declare module "packages/icyllis/modernui/view/$View$OnTouchListener" {
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export interface $View$OnTouchListener {

 "onTouch"(arg0: $View$Type, arg1: $MotionEvent$Type): boolean

(arg0: $View$Type, arg1: $MotionEvent$Type): boolean
}

export namespace $View$OnTouchListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$OnTouchListener$Type = ($View$OnTouchListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$OnTouchListener_ = $View$OnTouchListener$Type;
}}
declare module "packages/icyllis/modernui/transition/$Transition" {
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$TransitionPropagation, $TransitionPropagation$Type} from "packages/icyllis/modernui/transition/$TransitionPropagation"
import {$Transition$EpicenterCallback, $Transition$EpicenterCallback$Type} from "packages/icyllis/modernui/transition/$Transition$EpicenterCallback"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IntList, $IntList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntList"
import {$Cloneable, $Cloneable$Type} from "packages/java/lang/$Cloneable"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$TransitionListener, $TransitionListener$Type} from "packages/icyllis/modernui/transition/$TransitionListener"

export class $Transition implements $Cloneable {
static readonly "MATCH_INSTANCE": integer
static readonly "MATCH_NAME": integer
static readonly "MATCH_ID": integer
static readonly "MATCH_ITEM_ID": integer

constructor()

public "getName"(): string
public "toString"(): string
public "getDuration"(): long
public "cancel"(): void
public "setStartDelay"(startDelay: long): $Transition
public "setInterpolator"(interpolator: $TimeInterpolator$Type): $Transition
public "removeListener"(listener: $TransitionListener$Type): $Transition
public "pause"(sceneRoot: $View$Type): void
public "getTargets"(): $List<($View)>
public "getTransitionProperties"(): (string)[]
public "isTransitionRequired"(startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): boolean
public "addListener"(listener: $TransitionListener$Type): $Transition
public "setDuration"(duration: long): $Transition
public "setEpicenterCallback"(epicenterCallback: $Transition$EpicenterCallback$Type): void
public "getEpicenterCallback"(): $Transition$EpicenterCallback
public "getTransitionValues"(view: $View$Type, start: boolean): $TransitionValues
public "addTarget"(target: $View$Type): $Transition
public "addTarget"(targetId: integer): $Transition
public "addTarget"(targetName: string): $Transition
public "addTarget"(targetType: $Class$Type<(any)>): $Transition
public "getInterpolator"(): $TimeInterpolator
public "getStartDelay"(): long
public "createAnimator"(sceneRoot: $ViewGroup$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "setMatchOrder"(...matches: (integer)[]): void
public "captureEndValues"(arg0: $TransitionValues$Type): void
public "captureStartValues"(arg0: $TransitionValues$Type): void
public "excludeTarget"(type: $Class$Type<(any)>, exclude: boolean): $Transition
public "excludeTarget"(targetId: integer, exclude: boolean): $Transition
public "excludeTarget"(target: $View$Type, exclude: boolean): $Transition
public "excludeTarget"(targetName: string, exclude: boolean): $Transition
public "excludeChildren"(type: $Class$Type<(any)>, exclude: boolean): $Transition
public "excludeChildren"(targetId: integer, exclude: boolean): $Transition
public "excludeChildren"(target: $View$Type, exclude: boolean): $Transition
public "getTargetIds"(): $IntList
public "getTargetNames"(): $List<(string)>
public "removeTarget"(target: $Class$Type<(any)>): $Transition
public "removeTarget"(target: $View$Type): $Transition
public "removeTarget"(targetId: integer): $Transition
public "removeTarget"(targetName: string): $Transition
public "getTargetTypes"(): $List<($Class<(any)>)>
public "getPropagation"(): $TransitionPropagation
public "getEpicenter"(): $Rect
public "setPropagation"(transitionPropagation: $TransitionPropagation$Type): void
get "name"(): string
get "duration"(): long
set "startDelay"(value: long)
set "interpolator"(value: $TimeInterpolator$Type)
get "targets"(): $List<($View)>
get "transitionProperties"(): (string)[]
set "duration"(value: long)
set "epicenterCallback"(value: $Transition$EpicenterCallback$Type)
get "epicenterCallback"(): $Transition$EpicenterCallback
get "interpolator"(): $TimeInterpolator
get "startDelay"(): long
set "matchOrder"(value: (integer)[])
get "targetIds"(): $IntList
get "targetNames"(): $List<(string)>
get "targetTypes"(): $List<($Class<(any)>)>
get "propagation"(): $TransitionPropagation
get "epicenter"(): $Rect
set "propagation"(value: $TransitionPropagation$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Transition$Type = ($Transition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Transition_ = $Transition$Type;
}}
declare module "packages/icyllis/modernui/util/$FloatProperty" {
import {$Property, $Property$Type} from "packages/icyllis/modernui/util/$Property"

export class $FloatProperty<T> extends $Property<(T), (float)> {

constructor(name: string)

/**
 * 
 * @deprecated
 */
public "set"(object: T, value: float): void
public "setValue"(arg0: T, arg1: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FloatProperty$Type<T> = ($FloatProperty<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FloatProperty_<T> = $FloatProperty$Type<(T)>;
}}
declare module "packages/icyllis/modernui/transition/$TransitionManager" {
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$Scene, $Scene$Type} from "packages/icyllis/modernui/transition/$Scene"

export class $TransitionManager {

constructor()

public static "endTransitions"(sceneRoot: $ViewGroup$Type): void
public "setTransition"(scene: $Scene$Type, transition: $Transition$Type): void
public "setTransition"(fromScene: $Scene$Type, toScene: $Scene$Type, transition: $Transition$Type): void
public "transitionTo"(scene: $Scene$Type): void
public static "go"(scene: $Scene$Type): void
public static "go"(scene: $Scene$Type, transition: $Transition$Type): void
public static "beginDelayedTransition"(sceneRoot: $ViewGroup$Type): void
public static "beginDelayedTransition"(sceneRoot: $ViewGroup$Type, transition: $Transition$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TransitionManager$Type = ($TransitionManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TransitionManager_ = $TransitionManager$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/$TestListFragment" {
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $TestListFragment extends $Fragment {

constructor()

public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TestListFragment$Type = ($TestListFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TestListFragment_ = $TestListFragment$Type;
}}
declare module "packages/icyllis/modernui/text/$TextUtils$TruncateAt" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $TextUtils$TruncateAt extends $Enum<($TextUtils$TruncateAt)> {
static readonly "START": $TextUtils$TruncateAt
static readonly "MIDDLE": $TextUtils$TruncateAt
static readonly "END": $TextUtils$TruncateAt
/**
 * 
 * @deprecated
 */
static readonly "MARQUEE": $TextUtils$TruncateAt


public static "values"(): ($TextUtils$TruncateAt)[]
public static "valueOf"(name: string): $TextUtils$TruncateAt
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextUtils$TruncateAt$Type = (("middle") | ("start") | ("end") | ("marquee")) | ($TextUtils$TruncateAt);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextUtils$TruncateAt_ = $TextUtils$TruncateAt$Type;
}}
declare module "packages/icyllis/modernui/text/$SpannableString" {
import {$SpannableStringInternal, $SpannableStringInternal$Type} from "packages/icyllis/modernui/text/$SpannableStringInternal"
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$GetChars, $GetChars$Type} from "packages/icyllis/modernui/text/$GetChars"

export class $SpannableString extends $SpannableStringInternal implements $Spannable, $GetChars {

constructor(source: charseq, start: integer, end: integer)
constructor(source: charseq)
constructor(source: charseq, start: integer, end: integer, ignoreNoCopySpan: boolean)
constructor(source: charseq, ignoreNoCopySpan: boolean)

public static "valueOf"(source: charseq): $SpannableString
public "subSequence"(start: integer, end: integer): charseq
public "getChars"(arg0: integer, arg1: integer, arg2: (character)[], arg3: integer): void
public static "compare"(arg0: charseq, arg1: charseq): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpannableString$Type = ($SpannableString);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpannableString_ = $SpannableString$Type;
}}
declare module "packages/icyllis/modernui/resources/$ResourceValues$Value" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ResourceValues$Value {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceValues$Value$Type = ($ResourceValues$Value);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceValues$Value_ = $ResourceValues$Value$Type;
}}
declare module "packages/icyllis/modernui/text/style/$DynamicDrawableSpan" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$ReplacementSpan, $ReplacementSpan$Type} from "packages/icyllis/modernui/text/style/$ReplacementSpan"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"

export class $DynamicDrawableSpan extends $ReplacementSpan {
static readonly "ALIGN_BOTTOM": integer
static readonly "ALIGN_BASELINE": integer
static readonly "ALIGN_CENTER": integer

constructor()

public "getDrawable"(): $Drawable
public "getSize"(paint: $TextPaint$Type, text: charseq, start: integer, end: integer, fm: $FontMetricsInt$Type): integer
public "draw"(canvas: $Canvas$Type, text: charseq, start: integer, end: integer, x: float, top: integer, y: integer, bottom: integer, paint: $TextPaint$Type): void
public "getVerticalAlignment"(): integer
get "drawable"(): $Drawable
get "verticalAlignment"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicDrawableSpan$Type = ($DynamicDrawableSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicDrawableSpan_ = $DynamicDrawableSpan$Type;
}}
declare module "packages/icyllis/modernui/widget/$Spinner" {
import {$AbsSpinner, $AbsSpinner$Type} from "packages/icyllis/modernui/widget/$AbsSpinner"
import {$AdapterView$OnItemClickListener, $AdapterView$OnItemClickListener$Type} from "packages/icyllis/modernui/widget/$AdapterView$OnItemClickListener"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$SpinnerAdapter, $SpinnerAdapter$Type} from "packages/icyllis/modernui/widget/$SpinnerAdapter"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"
import {$PointerIcon, $PointerIcon$Type} from "packages/icyllis/modernui/view/$PointerIcon"

export class $Spinner extends $AbsSpinner {
static readonly "ITEM_VIEW_TYPE_IGNORE": integer
static readonly "ITEM_VIEW_TYPE_HEADER_OR_FOOTER": integer
static readonly "INVALID_POSITION": integer
static readonly "INVALID_ROW_ID": long
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setAdapter"(adapter: $SpinnerAdapter$Type): void
public "onResolvePointerIcon"(event: $MotionEvent$Type): $PointerIcon
public "setEnabled"(enabled: boolean): void
public "getBaseline"(): integer
public "onTouchEvent"(event: $MotionEvent$Type): boolean
public "performClick"(): boolean
public "setGravity"(gravity: integer): void
public "getGravity"(): integer
public "getDropDownWidth"(): integer
public "getPopupBackground"(): $Drawable
public "setDropDownWidth"(pixels: integer): void
public "setPopupBackgroundDrawable"(background: $Drawable$Type): void
public "setDropDownHorizontalOffset"(pixels: integer): void
public "getDropDownHorizontalOffset"(): integer
public "getDropDownVerticalOffset"(): integer
public "setDropDownVerticalOffset"(pixels: integer): void
public "setOnItemClickListener"(l: $AdapterView$OnItemClickListener$Type): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "adapter"(value: $SpinnerAdapter$Type)
set "enabled"(value: boolean)
get "baseline"(): integer
set "gravity"(value: integer)
get "gravity"(): integer
get "dropDownWidth"(): integer
get "popupBackground"(): $Drawable
set "dropDownWidth"(value: integer)
set "popupBackgroundDrawable"(value: $Drawable$Type)
set "dropDownHorizontalOffset"(value: integer)
get "dropDownHorizontalOffset"(): integer
get "dropDownVerticalOffset"(): integer
set "dropDownVerticalOffset"(value: integer)
set "onItemClickListener"(value: $AdapterView$OnItemClickListener$Type)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Spinner$Type = ($Spinner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Spinner_ = $Spinner$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$CircleProgram" {
import {$CircleProgram$Fill, $CircleProgram$Fill$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$CircleProgram$Fill"
import {$CircleProgram$Stroke, $CircleProgram$Stroke$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$CircleProgram$Stroke"
import {$GLProgram, $GLProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/$GLProgram"

/**
 * 
 * @deprecated
 */
export class $CircleProgram extends $GLProgram {


public static "fill"(): $CircleProgram$Fill
public static "stroke"(): $CircleProgram$Stroke
public static "createPrograms"(): void
public "setCenter"(x: float, y: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CircleProgram$Type = ($CircleProgram);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CircleProgram_ = $CircleProgram$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/$TestPauseFragment" {
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutInflater, $LayoutInflater$Type} from "packages/icyllis/modernui/view/$LayoutInflater"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $TestPauseFragment extends $Fragment {
static readonly "NETWORK_COLOR": integer

constructor()

public "onCreateView"(inflater: $LayoutInflater$Type, container: $ViewGroup$Type, savedInstanceState: $DataSet$Type): $View
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TestPauseFragment$Type = ($TestPauseFragment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TestPauseFragment_ = $TestPauseFragment$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$Config$Text$DefaultFontBehavior" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Config$Text$DefaultFontBehavior extends $Enum<($Config$Text$DefaultFontBehavior)> {
static readonly "IGNORE_ALL": $Config$Text$DefaultFontBehavior
static readonly "KEEP_ASCII": $Config$Text$DefaultFontBehavior
static readonly "KEEP_OTHER": $Config$Text$DefaultFontBehavior
static readonly "KEEP_ALL": $Config$Text$DefaultFontBehavior
static readonly "ONLY_INCLUDE": $Config$Text$DefaultFontBehavior
static readonly "ONLY_EXCLUDE": $Config$Text$DefaultFontBehavior


public "toString"(): string
public static "values"(): ($Config$Text$DefaultFontBehavior)[]
public static "valueOf"(name: string): $Config$Text$DefaultFontBehavior
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Text$DefaultFontBehavior$Type = (("keep_all") | ("ignore_all") | ("keep_other") | ("only_exclude") | ("keep_ascii") | ("only_include")) | ($Config$Text$DefaultFontBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config$Text$DefaultFontBehavior_ = $Config$Text$DefaultFontBehavior$Type;
}}
declare module "packages/icyllis/modernui/view/$ActionProvider" {
import {$ActionProvider$SubUiVisibilityListener, $ActionProvider$SubUiVisibilityListener$Type} from "packages/icyllis/modernui/view/$ActionProvider$SubUiVisibilityListener"
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$ActionProvider$VisibilityListener, $ActionProvider$VisibilityListener$Type} from "packages/icyllis/modernui/view/$ActionProvider$VisibilityListener"
import {$SubMenu, $SubMenu$Type} from "packages/icyllis/modernui/view/$SubMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export class $ActionProvider {

constructor()

public "overridesItemVisibility"(): boolean
public "subUiVisibilityChanged"(isVisible: boolean): void
public "onPerformDefaultAction"(): boolean
public "setSubUiVisibilityListener"(listener: $ActionProvider$SubUiVisibilityListener$Type): void
public "reset"(): void
public "setVisibilityListener"(listener: $ActionProvider$VisibilityListener$Type): void
public "isVisible"(): boolean
public "onPrepareSubMenu"(subMenu: $SubMenu$Type): void
public "onCreateActionView"(arg0: $MenuItem$Type): $View
public "refreshVisibility"(): void
public "hasSubMenu"(): boolean
set "subUiVisibilityListener"(value: $ActionProvider$SubUiVisibilityListener$Type)
set "visibilityListener"(value: $ActionProvider$VisibilityListener$Type)
get "visible"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActionProvider$Type = ($ActionProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActionProvider_ = $ActionProvider$Type;
}}
declare module "packages/icyllis/modernui/animation/$Keyframes$IntKeyframes" {
import {$Keyframes, $Keyframes$Type} from "packages/icyllis/modernui/animation/$Keyframes"
import {$TypeEvaluator, $TypeEvaluator$Type} from "packages/icyllis/modernui/animation/$TypeEvaluator"
import {$Keyframe, $Keyframe$Type} from "packages/icyllis/modernui/animation/$Keyframe"

export interface $Keyframes$IntKeyframes extends $Keyframes {

 "getIntValue"(arg0: float): integer
 "getValue"(arg0: float): any
 "copy"(): $Keyframes
 "setEvaluator"(arg0: $TypeEvaluator$Type<(any)>): void
 "getKeyframes"(): ($Keyframe)[]
}

export namespace $Keyframes$IntKeyframes {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Keyframes$IntKeyframes$Type = ($Keyframes$IntKeyframes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Keyframes$IntKeyframes_ = $Keyframes$IntKeyframes$Type;
}}
declare module "packages/icyllis/modernui/core/$Message" {
import {$Handler, $Handler$Type} from "packages/icyllis/modernui/core/$Handler"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $Message {
 "what": integer
 "arg1": integer
 "arg2": integer
 "obj": any

constructor()

public "toString"(): string
public "getTarget"(): $Handler
public static "obtain"(): $Message
public static "obtain"(h: $Handler$Type, what: integer, arg1: integer, arg2: integer, obj: any): $Message
public static "obtain"(o: $Message$Type): $Message
public static "obtain"(h: $Handler$Type, what: integer): $Message
public static "obtain"(h: $Handler$Type, callback: $Runnable$Type): $Message
public static "obtain"(h: $Handler$Type): $Message
public static "obtain"(h: $Handler$Type, what: integer, arg1: integer, arg2: integer): $Message
public static "obtain"(h: $Handler$Type, what: integer, obj: any): $Message
public "recycle"(): void
public "setAsynchronous"(async: boolean): void
public "sendToTarget"(): void
public "getCallback"(): $Runnable
public "isAsynchronous"(): boolean
public "getWhen"(): long
get "target"(): $Handler
set "asynchronous"(value: boolean)
get "callback"(): $Runnable
get "asynchronous"(): boolean
get "when"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Message$Type = ($Message);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Message_ = $Message$Type;
}}
declare module "packages/icyllis/modernui/text/style/$LineHeightSpan" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$ParagraphStyle, $ParagraphStyle$Type} from "packages/icyllis/modernui/text/style/$ParagraphStyle"
import {$WrapTogetherSpan, $WrapTogetherSpan$Type} from "packages/icyllis/modernui/text/style/$WrapTogetherSpan"
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"

export interface $LineHeightSpan extends $ParagraphStyle, $WrapTogetherSpan {

 "chooseHeight"(arg0: charseq, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: $FontMetricsInt$Type, arg6: $TextPaint$Type): void

(arg0: charseq, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: $FontMetricsInt$Type, arg6: $TextPaint$Type): void
}

export namespace $LineHeightSpan {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LineHeightSpan$Type = ($LineHeightSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LineHeightSpan_ = $LineHeightSpan$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$LayoutPiece" {
import {$FontMetricsInt, $FontMetricsInt$Type} from "packages/icyllis/modernui/graphics/text/$FontMetricsInt"
import {$Font, $Font$Type} from "packages/icyllis/modernui/graphics/text/$Font"

export class $LayoutPiece {


public "toString"(): string
public "getBoundsX"(): integer
public "getBoundsY"(): integer
public "getExtent"(extent: $FontMetricsInt$Type): void
public "getBoundsWidth"(): integer
public "getBoundsHeight"(): integer
public "getComputeFlags"(): integer
public "getAdvances"(): (float)[]
public "getPositions"(): (float)[]
public "getGlyphCount"(): integer
public "getCharCount"(): integer
public "getMemoryUsage"(): integer
public "getFont"(i: integer): $Font
public "getGlyphs"(): (integer)[]
public "getAscent"(): integer
public "getAdvance"(): float
public "getDescent"(): integer
get "boundsX"(): integer
get "boundsY"(): integer
get "boundsWidth"(): integer
get "boundsHeight"(): integer
get "computeFlags"(): integer
get "advances"(): (float)[]
get "positions"(): (float)[]
get "glyphCount"(): integer
get "charCount"(): integer
get "memoryUsage"(): integer
get "glyphs"(): (integer)[]
get "ascent"(): integer
get "advance"(): float
get "descent"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutPiece$Type = ($LayoutPiece);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutPiece_ = $LayoutPiece$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$MuiForgeApi" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ScreenCallback, $ScreenCallback$Type} from "packages/icyllis/modernui/mc/$ScreenCallback"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$ResourceProvider, $ResourceProvider$Type} from "packages/net/minecraft/server/packs/resources/$ResourceProvider"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Pattern, $Pattern$Type} from "packages/java/util/regex/$Pattern"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MenuAccess, $MenuAccess$Type} from "packages/net/minecraft/client/gui/screens/inventory/$MenuAccess"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$GameRenderer, $GameRenderer$Type} from "packages/net/minecraft/client/renderer/$GameRenderer"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$Rarity, $Rarity$Type} from "packages/net/minecraft/world/item/$Rarity"
import {$VertexFormat, $VertexFormat$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat"
import {$MuiScreen, $MuiScreen$Type} from "packages/icyllis/modernui/mc/$MuiScreen"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$MuiModApi, $MuiModApi$Type} from "packages/icyllis/modernui/mc/$MuiModApi"

export class $MuiForgeApi extends $MuiModApi {
static readonly "MAX_GUI_SCALE": integer
static readonly "EMOJI_SHORTCODE_PATTERN": $Pattern

constructor()

public static "postToUiThread"(r: $Runnable$Type): void
public static "openScreen"(fragment: $Fragment$Type): void
public static "getElapsedTime"(): long
public "createScreen"<T extends ($Screen) & ($MuiScreen)>(fragment: $Fragment$Type, callback: $ScreenCallback$Type, previousScreen: $Screen$Type, title: charseq): T
public "makeShaderInstance"(resourceProvider: $ResourceProvider$Type, resourceLocation: $ResourceLocation$Type, vertexFormat: $VertexFormat$Type): $ShaderInstance
public static "getFrameTime"(): long
public static "getFrameTimeNanos"(): long
public "loadEffect"(gr: $GameRenderer$Type, effect: $ResourceLocation$Type): void
public "createMenuScreen"<T extends $AbstractContainerMenu, U extends ($Screen) & ($MenuAccess<(T)>) & ($MuiScreen)>(fragment: $Fragment$Type, callback: $ScreenCallback$Type, menu: T, inventory: $Inventory$Type, title: $Component$Type): U
public static "openMenu"(player: $Player$Type, provider: $MenuProvider$Type, pos: $BlockPos$Type): void
public static "openMenu"(player: $Player$Type, provider: $MenuProvider$Type): void
public static "openMenu"(player: $Player$Type, provider: $MenuProvider$Type, writer: $Consumer$Type<($FriendlyByteBuf$Type)>): void
public "applyRarityTo"(rarity: $Rarity$Type, baseStyle: $Style$Type): $Style
public "isKeyBindingMatches"(keyMapping: $KeyMapping$Type, key: $InputConstants$Key$Type): boolean
public "isGLVersionPromoted"(): boolean
get "elapsedTime"(): long
get "frameTime"(): long
get "frameTimeNanos"(): long
get "gLVersionPromoted"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiForgeApi$Type = ($MuiForgeApi);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiForgeApi_ = $MuiForgeApi$Type;
}}
declare module "packages/icyllis/modernui/graphics/font/$GlyphManager$AtlasInvalidationInfo" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $GlyphManager$AtlasInvalidationInfo extends $Record {

constructor(maskFormat: integer, resize: boolean)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "resize"(): boolean
public "maskFormat"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlyphManager$AtlasInvalidationInfo$Type = ($GlyphManager$AtlasInvalidationInfo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlyphManager$AtlasInvalidationInfo_ = $GlyphManager$AtlasInvalidationInfo$Type;
}}
declare module "packages/icyllis/modernui/core/$RenderPipeline" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $RenderPipeline {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderPipeline$Type = ($RenderPipeline);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderPipeline_ = $RenderPipeline$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentController" {
import {$FragmentHostCallback, $FragmentHostCallback$Type} from "packages/icyllis/modernui/fragment/$FragmentHostCallback"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FragmentManager, $FragmentManager$Type} from "packages/icyllis/modernui/fragment/$FragmentManager"

export class $FragmentController {


public "dispatchActivityCreated"(): void
public "getActiveFragmentCount"(): integer
public "noteStateNotSaved"(): void
public "findFragmentByWho"(who: string): $Fragment
public "dispatchResume"(): void
public "dispatchPause"(): void
public "dispatchStart"(): void
public static "createController"(callbacks: $FragmentHostCallback$Type<(any)>): $FragmentController
public "attachHost"(parent: $Fragment$Type): void
public "execPendingActions"(): boolean
public "dispatchCreate"(): void
public "getFragmentManager"(): $FragmentManager
public "dispatchStop"(): void
public "dispatchDestroy"(): void
public "dispatchDestroyView"(): void
public "getActiveFragments"(): $List<($Fragment)>
get "activeFragmentCount"(): integer
get "fragmentManager"(): $FragmentManager
get "activeFragments"(): $List<($Fragment)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentController$Type = ($FragmentController);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentController_ = $FragmentController$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/shader/program/$ArcProgram$Stroke" {
import {$ArcProgram, $ArcProgram$Type} from "packages/icyllis/modernui/mc/testforge/shader/program/$ArcProgram"

export class $ArcProgram$Stroke extends $ArcProgram {


public "setRadius"(radius: float, feather: float, thickness: float): void
public "setAngle"(middle: float, flare: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArcProgram$Stroke$Type = ($ArcProgram$Stroke);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArcProgram$Stroke_ = $ArcProgram$Stroke$Type;
}}
declare module "packages/icyllis/modernui/text/style/$UpdateLayout" {
import {$UpdateAppearance, $UpdateAppearance$Type} from "packages/icyllis/modernui/text/style/$UpdateAppearance"

export interface $UpdateLayout extends $UpdateAppearance {

}

export namespace $UpdateLayout {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdateLayout$Type = ($UpdateLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdateLayout_ = $UpdateLayout$Type;
}}
declare module "packages/icyllis/modernui/core/$CancellationSignal" {
import {$CancellationSignal$OnCancelListener, $CancellationSignal$OnCancelListener$Type} from "packages/icyllis/modernui/core/$CancellationSignal$OnCancelListener"

export class $CancellationSignal {

constructor()

public "throwIfCanceled"(): void
public "cancel"(): void
public "isCanceled"(): boolean
public "setOnCancelListener"(listener: $CancellationSignal$OnCancelListener$Type): void
get "canceled"(): boolean
set "onCancelListener"(value: $CancellationSignal$OnCancelListener$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CancellationSignal$Type = ($CancellationSignal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CancellationSignal_ = $CancellationSignal$Type;
}}
declare module "packages/icyllis/modernui/markdown/$Markdown" {
import {$Document, $Document$Type} from "packages/com/vladsch/flexmark/util/ast/$Document"
import {$Spanned, $Spanned$Type} from "packages/icyllis/modernui/text/$Spanned"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$MarkdownPlugin, $MarkdownPlugin$Type} from "packages/icyllis/modernui/markdown/$MarkdownPlugin"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Node, $Node$Type} from "packages/com/vladsch/flexmark/util/ast/$Node"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$Markdown$Builder, $Markdown$Builder$Type} from "packages/icyllis/modernui/markdown/$Markdown$Builder"
import {$MarkdownConfig, $MarkdownConfig$Type} from "packages/icyllis/modernui/markdown/$MarkdownConfig"

export class $Markdown {


public "setMarkdown"(textView: $TextView$Type, markdown: string): void
public "convert"(input: string): $Spanned
public static "builder"(context: $Context$Type): $Markdown$Builder
public static "create"(context: $Context$Type): $Markdown
public "parse"(input: string): $Document
public "render"(document: $Node$Type): $Spanned
public "getPlugins"(): $List<($MarkdownPlugin)>
public "getPlugin"<P extends $MarkdownPlugin>(type: $Class$Type<(P)>): P
public "getConfig"(): $MarkdownConfig
public "setParsedMarkdown"(textView: $TextView$Type, markdown: $Spanned$Type): void
public "requirePlugin"<P extends $MarkdownPlugin>(type: $Class$Type<(P)>): P
get "plugins"(): $List<($MarkdownPlugin)>
get "config"(): $MarkdownConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Markdown$Type = ($Markdown);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Markdown_ = $Markdown$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$ContextMenuBuilder" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$MenuPopupHelper, $MenuPopupHelper$Type} from "packages/icyllis/modernui/view/menu/$MenuPopupHelper"

export class $ContextMenuBuilder extends $MenuBuilder implements $ContextMenu {

constructor(context: $Context$Type)

public "showPopup"(context: $Context$Type, originalView: $View$Type, x: float, y: float): $MenuPopupHelper
public "setHeaderView"(view: $View$Type): $ContextMenu
public "setHeaderIcon"(icon: $Drawable$Type): $ContextMenu
public "setHeaderTitle"(title: charseq): $ContextMenu
public "clearHeader"(): void
set "headerView"(value: $View$Type)
set "headerIcon"(value: $Drawable$Type)
set "headerTitle"(value: charseq)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenuBuilder$Type = ($ContextMenuBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenuBuilder_ = $ContextMenuBuilder$Type;
}}
declare module "packages/icyllis/modernui/widget/$ExpandableListView$OnChildClickListener" {
import {$ExpandableListView, $ExpandableListView$Type} from "packages/icyllis/modernui/widget/$ExpandableListView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export interface $ExpandableListView$OnChildClickListener {

 "onChildClick"(arg0: $ExpandableListView$Type, arg1: $View$Type, arg2: integer, arg3: integer, arg4: long): boolean

(arg0: $ExpandableListView$Type, arg1: $View$Type, arg2: integer, arg3: integer, arg4: long): boolean
}

export namespace $ExpandableListView$OnChildClickListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandableListView$OnChildClickListener$Type = ($ExpandableListView$OnChildClickListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandableListView$OnChildClickListener_ = $ExpandableListView$OnChildClickListener$Type;
}}
declare module "packages/icyllis/modernui/mc/$ScrollController$IListener" {
import {$ScrollController, $ScrollController$Type} from "packages/icyllis/modernui/mc/$ScrollController"

export interface $ScrollController$IListener {

 "onScrollAmountUpdated"(arg0: $ScrollController$Type, arg1: float): void

(arg0: $ScrollController$Type, arg1: float): void
}

export namespace $ScrollController$IListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollController$IListener$Type = ($ScrollController$IListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollController$IListener_ = $ScrollController$IListener$Type;
}}
declare module "packages/icyllis/modernui/transition/$TranslationAnimationCreator" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $TranslationAnimationCreator {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TranslationAnimationCreator$Type = ($TranslationAnimationCreator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TranslationAnimationCreator_ = $TranslationAnimationCreator$Type;
}}
declare module "packages/icyllis/modernui/mc/$MuiModApi$OnWindowResizeListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $MuiModApi$OnWindowResizeListener {

 "onWindowResize"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): void

(arg0: integer, arg1: integer, arg2: integer, arg3: integer): void
}

export namespace $MuiModApi$OnWindowResizeListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MuiModApi$OnWindowResizeListener$Type = ($MuiModApi$OnWindowResizeListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MuiModApi$OnWindowResizeListener_ = $MuiModApi$OnWindowResizeListener$Type;
}}
declare module "packages/icyllis/modernui/text/$Selection" {
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$Layout, $Layout$Type} from "packages/icyllis/modernui/text/$Layout"
import {$WordIterator, $WordIterator$Type} from "packages/icyllis/modernui/text/method/$WordIterator"

export class $Selection {
static readonly "SELECTION_START": any
static readonly "SELECTION_END": any


public static "getSelectionStart"(text: charseq): integer
public static "setSelection"(text: $Spannable$Type, index: integer): void
public static "setSelection"(text: $Spannable$Type, start: integer, stop: integer): void
public static "getSelectionEnd"(text: charseq): integer
public static "extendToRightEdge"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "removeSelection"(text: $Spannable$Type): void
public static "extendUp"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "extendToLeftEdge"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "moveToLeftEdge"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "moveToFollowing"(text: $Spannable$Type, iter: $WordIterator$Type, extendSelection: boolean): boolean
public static "moveLeft"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "moveRight"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "extendDown"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "extendLeft"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "moveToRightEdge"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "moveToPreceding"(text: $Spannable$Type, iter: $WordIterator$Type, extendSelection: boolean): boolean
public static "selectAll"(text: $Spannable$Type): void
public static "extendSelection"(text: $Spannable$Type, index: integer): void
public static "extendRight"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "moveUp"(text: $Spannable$Type, layout: $Layout$Type): boolean
public static "moveDown"(text: $Spannable$Type, layout: $Layout$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Selection$Type = ($Selection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Selection_ = $Selection$Type;
}}
declare module "packages/icyllis/modernui/text/style/$LineBackgroundSpan" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Paint, $Paint$Type} from "packages/icyllis/modernui/graphics/$Paint"
import {$ParagraphStyle, $ParagraphStyle$Type} from "packages/icyllis/modernui/text/style/$ParagraphStyle"

export interface $LineBackgroundSpan extends $ParagraphStyle {

 "drawBackground"(arg0: $Canvas$Type, arg1: $Paint$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: charseq, arg8: integer, arg9: integer, arg10: integer): void

(arg0: $Canvas$Type, arg1: $Paint$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: charseq, arg8: integer, arg9: integer, arg10: integer): void
}

export namespace $LineBackgroundSpan {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LineBackgroundSpan$Type = ($LineBackgroundSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LineBackgroundSpan_ = $LineBackgroundSpan$Type;
}}
declare module "packages/icyllis/modernui/audio/$Track" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$SoundSample, $SoundSample$Type} from "packages/icyllis/modernui/audio/$SoundSample"
import {$FFT, $FFT$Type} from "packages/icyllis/modernui/audio/$FFT"

export class $Track implements $AutoCloseable {

constructor(sample: $SoundSample$Type)

public "getLength"(): float
public "close"(): void
public "seek"(sampleOffset: integer): boolean
public "getTime"(): float
public "tick"(): void
public "play"(): void
public "isPlaying"(): boolean
public "getSampleRate"(): integer
public "pause"(): void
public "seekToSeconds"(seconds: float): boolean
public "setGain"(gain: float): void
public "setAnalyzer"(fft: $FFT$Type, callback: $Consumer$Type<($FFT$Type)>): void
public "setPosition"(x: float, y: float, z: float): void
get "length"(): float
get "time"(): float
get "playing"(): boolean
get "sampleRate"(): integer
set "gain"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Track$Type = ($Track);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Track_ = $Track$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/drawable/$ScrollThumbDrawable" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"

/**
 * 
 * @deprecated
 */
export class $ScrollThumbDrawable extends $Drawable {
static readonly "MAX_LEVEL": integer

constructor()

public "draw"(canvas: $Canvas$Type): void
public "getIntrinsicHeight"(): integer
public "getIntrinsicWidth"(): integer
get "intrinsicHeight"(): integer
get "intrinsicWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollThumbDrawable$Type = ($ScrollThumbDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollThumbDrawable_ = $ScrollThumbDrawable$Type;
}}
declare module "packages/icyllis/modernui/text/$TextWatcher" {
import {$Editable, $Editable$Type} from "packages/icyllis/modernui/text/$Editable"
import {$NoCopySpan, $NoCopySpan$Type} from "packages/icyllis/modernui/text/$NoCopySpan"

export interface $TextWatcher extends $NoCopySpan {

 "afterTextChanged"(arg0: $Editable$Type): void
 "beforeTextChanged"(arg0: charseq, arg1: integer, arg2: integer, arg3: integer): void
 "onTextChanged"(arg0: charseq, arg1: integer, arg2: integer, arg3: integer): void
}

export namespace $TextWatcher {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextWatcher$Type = ($TextWatcher);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextWatcher_ = $TextWatcher$Type;
}}
declare module "packages/icyllis/modernui/resources/$ResourceValues" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ResourceValues {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceValues$Type = ($ResourceValues);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceValues_ = $ResourceValues$Type;
}}
declare module "packages/icyllis/modernui/view/$View$DragShadow" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Point, $Point$Type} from "packages/icyllis/modernui/graphics/$Point"

export class $View$DragShadow {

constructor(view: $View$Type)
constructor()

public "getView"(): $View
public "onDrawShadow"(canvas: $Canvas$Type): void
public "onProvideShadowCenter"(outShadowCenter: $Point$Type): void
get "view"(): $View
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $View$DragShadow$Type = ($View$DragShadow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $View$DragShadow_ = $View$DragShadow$Type;
}}
declare module "packages/icyllis/modernui/animation/$IntKeyframeSet" {
import {$Keyframes$IntKeyframes, $Keyframes$IntKeyframes$Type} from "packages/icyllis/modernui/animation/$Keyframes$IntKeyframes"
import {$KeyframeSet, $KeyframeSet$Type} from "packages/icyllis/modernui/animation/$KeyframeSet"

export class $IntKeyframeSet extends $KeyframeSet implements $Keyframes$IntKeyframes {


public "getIntValue"(fraction: float): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntKeyframeSet$Type = ($IntKeyframeSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntKeyframeSet_ = $IntKeyframeSet$Type;
}}
declare module "packages/icyllis/modernui/annotation/$HalfFloat" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $HalfFloat extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $HalfFloat {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HalfFloat$Type = ($HalfFloat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HalfFloat_ = $HalfFloat$Type;
}}
declare module "packages/icyllis/modernui/core/$LogWriter" {
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$Level, $Level$Type} from "packages/org/apache/logging/log4j/$Level"
import {$Writer, $Writer$Type} from "packages/java/io/$Writer"

export class $LogWriter extends $Writer {

constructor(logger: $Logger$Type)
constructor(logger: $Logger$Type, level: $Level$Type, marker: $Marker$Type)

public "flush"(): void
public "write"(buf: (character)[], offset: integer, count: integer): void
public "close"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LogWriter$Type = ($LogWriter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LogWriter_ = $LogWriter$Type;
}}
declare module "packages/icyllis/modernui/widget/$ListPopupWindow" {
import {$ShowableListMenu, $ShowableListMenu$Type} from "packages/icyllis/modernui/view/menu/$ShowableListMenu"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$AdapterView$OnItemClickListener, $AdapterView$OnItemClickListener$Type} from "packages/icyllis/modernui/widget/$AdapterView$OnItemClickListener"
import {$ListView, $ListView$Type} from "packages/icyllis/modernui/widget/$ListView"
import {$AdapterView$OnItemSelectedListener, $AdapterView$OnItemSelectedListener$Type} from "packages/icyllis/modernui/widget/$AdapterView$OnItemSelectedListener"
import {$ListAdapter, $ListAdapter$Type} from "packages/icyllis/modernui/widget/$ListAdapter"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$PopupWindow$OnDismissListener, $PopupWindow$OnDismissListener$Type} from "packages/icyllis/modernui/widget/$PopupWindow$OnDismissListener"

export class $ListPopupWindow implements $ShowableListMenu {
static readonly "POSITION_PROMPT_ABOVE": integer
static readonly "POSITION_PROMPT_BELOW": integer

constructor(context: $Context$Type)

public "getSelectedItemId"(): long
public "performItemClick"(position: integer): boolean
public "setAdapter"(adapter: $ListAdapter$Type): void
public "getSelectedItem"(): any
public "getSelectedView"(): $View
public "getListView"(): $ListView
public "setOverlapAnchor"(overlap: boolean): void
public "getEpicenterBounds"(): $Rect
public "setEpicenterBounds"(bounds: $Rect$Type): void
public "dismissImmediate"(): void
public "setWidth"(width: integer): void
public "getVerticalOffset"(): integer
public "dismiss"(): void
public "setSelection"(position: integer): void
public "getWidth"(): integer
public "getHeight"(): integer
public "setForceIgnoreOutsideTouch"(forceIgnoreOutsideTouch: boolean): void
public "isDropDownAlwaysVisible"(): boolean
public "setDropDownAlwaysVisible"(dropDownAlwaysVisible: boolean): void
public "isShowing"(): boolean
public "getBackground"(): $Drawable
public "show"(): void
public "isModal"(): boolean
public "setHeight"(height: integer): void
public "getHorizontalOffset"(): integer
public "setHorizontalOffset"(offset: integer): void
public "setModal"(modal: boolean): void
public "getAnchorView"(): $View
public "setPromptPosition"(position: integer): void
public "setListSelector"(selector: $Drawable$Type): void
public "setAnchorView"(anchor: $View$Type): void
public "getPromptPosition"(): integer
public "setContentWidth"(width: integer): void
public "setPromptView"(prompt: $View$Type): void
public "setDropDownGravity"(gravity: integer): void
public "postShow"(): void
public "setVerticalOffset"(offset: integer): void
public "clearListSelection"(): void
public "setOnItemSelectedListener"(selectedListener: $AdapterView$OnItemSelectedListener$Type): void
public "getSelectedItemPosition"(): integer
public "setOnItemClickListener"(clickListener: $AdapterView$OnItemClickListener$Type): void
public "setBackgroundDrawable"(d: $Drawable$Type): void
public "setOnDismissListener"(listener: $PopupWindow$OnDismissListener$Type): void
get "selectedItemId"(): long
set "adapter"(value: $ListAdapter$Type)
get "selectedItem"(): any
get "selectedView"(): $View
get "listView"(): $ListView
set "overlapAnchor"(value: boolean)
get "epicenterBounds"(): $Rect
set "epicenterBounds"(value: $Rect$Type)
set "width"(value: integer)
get "verticalOffset"(): integer
set "selection"(value: integer)
get "width"(): integer
get "height"(): integer
set "forceIgnoreOutsideTouch"(value: boolean)
get "dropDownAlwaysVisible"(): boolean
set "dropDownAlwaysVisible"(value: boolean)
get "showing"(): boolean
get "background"(): $Drawable
get "modal"(): boolean
set "height"(value: integer)
get "horizontalOffset"(): integer
set "horizontalOffset"(value: integer)
set "modal"(value: boolean)
get "anchorView"(): $View
set "promptPosition"(value: integer)
set "listSelector"(value: $Drawable$Type)
set "anchorView"(value: $View$Type)
get "promptPosition"(): integer
set "contentWidth"(value: integer)
set "promptView"(value: $View$Type)
set "dropDownGravity"(value: integer)
set "verticalOffset"(value: integer)
set "onItemSelectedListener"(value: $AdapterView$OnItemSelectedListener$Type)
get "selectedItemPosition"(): integer
set "onItemClickListener"(value: $AdapterView$OnItemClickListener$Type)
set "backgroundDrawable"(value: $Drawable$Type)
set "onDismissListener"(value: $PopupWindow$OnDismissListener$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListPopupWindow$Type = ($ListPopupWindow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListPopupWindow_ = $ListPopupWindow$Type;
}}
declare module "packages/icyllis/modernui/text/method/$BaseMovementMethod" {
import {$MovementMethod, $MovementMethod$Type} from "packages/icyllis/modernui/text/method/$MovementMethod"
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$TextView, $TextView$Type} from "packages/icyllis/modernui/widget/$TextView"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"

export class $BaseMovementMethod implements $MovementMethod {


public "initialize"(widget: $TextView$Type, text: $Spannable$Type): void
public "onGenericMotionEvent"(widget: $TextView$Type, text: $Spannable$Type, event: $MotionEvent$Type): boolean
public "onTakeFocus"(widget: $TextView$Type, text: $Spannable$Type, direction: integer): void
public "onTouchEvent"(widget: $TextView$Type, text: $Spannable$Type, event: $MotionEvent$Type): boolean
public "onKeyDown"(widget: $TextView$Type, text: $Spannable$Type, keyCode: integer, event: $KeyEvent$Type): boolean
public "onKeyUp"(widget: $TextView$Type, text: $Spannable$Type, keyCode: integer, event: $KeyEvent$Type): boolean
public "canSelectArbitrarily"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseMovementMethod$Type = ($BaseMovementMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseMovementMethod_ = $BaseMovementMethod$Type;
}}
declare module "packages/icyllis/modernui/core/$Looper$Observer" {
import {$Message, $Message$Type} from "packages/icyllis/modernui/core/$Message"
import {$Exception, $Exception$Type} from "packages/java/lang/$Exception"

export interface $Looper$Observer {

 "messageDispatched"(arg0: any, arg1: $Message$Type): void
 "dispatchingThrewException"(arg0: any, arg1: $Message$Type, arg2: $Exception$Type): void
 "messageDispatchStarting"(): any
}

export namespace $Looper$Observer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Looper$Observer$Type = ($Looper$Observer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Looper$Observer_ = $Looper$Observer$Type;
}}
declare module "packages/icyllis/modernui/mc/$TooltipRenderType" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderType$CompositeRenderType, $RenderType$CompositeRenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType$CompositeRenderType"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$DrawBuffer, $DrawBuffer$Type} from "packages/com/jozufozu/flywheel/backend/instancing/$DrawBuffer"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"

export class $TooltipRenderType extends $RenderType {
static readonly "BIG_BUFFER_SIZE": integer
static readonly "MEDIUM_BUFFER_SIZE": integer
static readonly "SMALL_BUFFER_SIZE": integer
static readonly "TRANSIENT_BUFFER_SIZE": integer
static readonly "LINES": $RenderType$CompositeRenderType
static readonly "LINE_STRIP": $RenderType$CompositeRenderType
 "sortOnUpload": boolean
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard


public static "setShaderTooltip"(shaderTooltip: $ShaderInstance$Type): void
public static "tooltip"(): $RenderType
public static "getShaderTooltip"(): $ShaderInstance
public static "getDrawBuffer"(arg0: $RenderType$Type): $DrawBuffer
set "shaderTooltip"(value: $ShaderInstance$Type)
get "shaderTooltip"(): $ShaderInstance
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipRenderType$Type = ($TooltipRenderType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipRenderType_ = $TooltipRenderType$Type;
}}
declare module "packages/icyllis/modernui/widget/$MenuPopupWindow" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$Transition, $Transition$Type} from "packages/icyllis/modernui/transition/$Transition"
import {$MenuItemHoverListener, $MenuItemHoverListener$Type} from "packages/icyllis/modernui/widget/$MenuItemHoverListener"
import {$MenuBuilder, $MenuBuilder$Type} from "packages/icyllis/modernui/view/menu/$MenuBuilder"
import {$ListPopupWindow, $ListPopupWindow$Type} from "packages/icyllis/modernui/widget/$ListPopupWindow"

export class $MenuPopupWindow extends $ListPopupWindow implements $MenuItemHoverListener {
static readonly "POSITION_PROMPT_ABOVE": integer
static readonly "POSITION_PROMPT_BELOW": integer

constructor(context: $Context$Type)

public "onItemHoverEnter"(menu: $MenuBuilder$Type, item: $MenuItem$Type): void
public "onItemHoverExit"(menu: $MenuBuilder$Type, item: $MenuItem$Type): void
public "setTouchModal"(touchModal: boolean): void
public "setExitTransition"(exitTransition: $Transition$Type): void
public "setEnterTransition"(enterTransition: $Transition$Type): void
public "setHoverListener"(hoverListener: $MenuItemHoverListener$Type): void
set "touchModal"(value: boolean)
set "exitTransition"(value: $Transition$Type)
set "enterTransition"(value: $Transition$Type)
set "hoverListener"(value: $MenuItemHoverListener$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuPopupWindow$Type = ($MenuPopupWindow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuPopupWindow_ = $MenuPopupWindow$Type;
}}
declare module "packages/icyllis/modernui/core/$Monitor$MonitorEventListener" {
import {$Monitor, $Monitor$Type} from "packages/icyllis/modernui/core/$Monitor"

export interface $Monitor$MonitorEventListener {

 "onMonitorDisconnected"(arg0: $Monitor$Type): void
 "onMonitorConnected"(arg0: $Monitor$Type): void
}

export namespace $Monitor$MonitorEventListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Monitor$MonitorEventListener$Type = ($Monitor$MonitorEventListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Monitor$MonitorEventListener_ = $Monitor$MonitorEventListener$Type;
}}
declare module "packages/icyllis/modernui/animation/$KeyframeSet" {
import {$Keyframes, $Keyframes$Type} from "packages/icyllis/modernui/animation/$Keyframes"
import {$TypeEvaluator, $TypeEvaluator$Type} from "packages/icyllis/modernui/animation/$TypeEvaluator"
import {$IntKeyframeSet, $IntKeyframeSet$Type} from "packages/icyllis/modernui/animation/$IntKeyframeSet"
import {$FloatKeyframeSet, $FloatKeyframeSet$Type} from "packages/icyllis/modernui/animation/$FloatKeyframeSet"
import {$Keyframe, $Keyframe$Type} from "packages/icyllis/modernui/animation/$Keyframe"

export class $KeyframeSet implements $Keyframes {


public "toString"(): string
public "getValue"(fraction: float): any
public "copy"(): $KeyframeSet
public static "ofInt"(...values: (integer)[]): $IntKeyframeSet
public static "ofFloat"(...values: (float)[]): $FloatKeyframeSet
public "setEvaluator"(evaluator: $TypeEvaluator$Type<(any)>): void
public static "ofObject"(...values: (any)[]): $Keyframes
public "getKeyframes"(): ($Keyframe)[]
public static "ofKeyframe"(...keyframes: ($Keyframe$Type)[]): $KeyframeSet
set "evaluator"(value: $TypeEvaluator$Type<(any)>)
get "keyframes"(): ($Keyframe)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyframeSet$Type = ($KeyframeSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyframeSet_ = $KeyframeSet$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$CharSequenceBuilder" {
import {$CharList, $CharList$Type} from "packages/it/unimi/dsi/fastutil/chars/$CharList"
import {$IntStream, $IntStream$Type} from "packages/java/util/stream/$IntStream"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GetChars, $GetChars$Type} from "packages/icyllis/modernui/text/$GetChars"
import {$CharArrayList, $CharArrayList$Type} from "packages/it/unimi/dsi/fastutil/chars/$CharArrayList"

export class $CharSequenceBuilder extends $CharArrayList implements charseq, $GetChars {
static readonly "DEFAULT_INITIAL_CAPACITY": integer

constructor()

public "equals"(o: any): boolean
public "length"(): integer
public "toString"(): string
public "hashCode"(): integer
public "getChars"(srcBegin: integer, srcEnd: integer, dst: (character)[], dstBegin: integer): void
public "charAt"(index: integer): character
public "subSequence"(start: integer, end: integer): charseq
public "addCodePoint"(codePoint: integer): integer
public "updateChars"(buf: (character)[], start: integer, end: integer): $CharSequenceBuilder
public "addString"(s: string): void
public "addChars"(buf: (character)[], start: integer, end: integer): void
public "addCharSequence"(s: charseq): void
public static "compare"(arg0: charseq, arg1: charseq): integer
public "isEmpty"(): boolean
public "codePoints"(): $IntStream
public "chars"(): $IntStream
/**
 * 
 * @deprecated
 */
public "add"(arg0: character): boolean
/**
 * 
 * @deprecated
 */
public "remove"(arg0: any): boolean
public static "of"(arg0: character): $CharList
public static "of"(arg0: character, arg1: character): $CharList
public static "of"(arg0: character, arg1: character, arg2: character): $CharList
/**
 * 
 * @deprecated
 */
public "contains"(arg0: any): boolean
public static "copyOf"<E>(arg0: $Collection$Type<(any)>): $List<(E)>
public "toArray"(): (any)[]
public "toArray"<T>(arg0: (T)[]): (T)[]
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E): $List<(E)>
public static "of"<E>(arg0: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E): $List<(E)>
public static "of"<E>(...arg0: (E)[]): $List<(E)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CharSequenceBuilder$Type = ($CharSequenceBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CharSequenceBuilder_ = $CharSequenceBuilder$Type;
}}
declare module "packages/icyllis/modernui/view/$SoundEffectConstants" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $SoundEffectConstants {
static readonly "CLICK": integer
static readonly "NAVIGATION_LEFT": integer
static readonly "NAVIGATION_UP": integer
static readonly "NAVIGATION_RIGHT": integer
static readonly "NAVIGATION_DOWN": integer
static readonly "NAVIGATION_REPEAT_LEFT": integer
static readonly "NAVIGATION_REPEAT_UP": integer
static readonly "NAVIGATION_REPEAT_RIGHT": integer
static readonly "NAVIGATION_REPEAT_DOWN": integer


public static "getContantForFocusDirection"(direction: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoundEffectConstants$Type = ($SoundEffectConstants);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoundEffectConstants_ = $SoundEffectConstants$Type;
}}
declare module "packages/icyllis/modernui/mc/$ModernUIMod" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ModernUIMod {
static readonly "BOOTSTRAP_DISABLE_TEXT_ENGINE": string
static readonly "BOOTSTRAP_DISABLE_SMOOTH_SCROLLING": string
static readonly "BOOTSTRAP_DISABLE_ENHANCED_TEXT_FIELD": string
static "sDevelopment": boolean
static "sDeveloperMode": boolean

constructor()

public static "location"(path: string): $ResourceLocation
public static "isTextEngineEnabled"(): boolean
public static "isLegendaryTooltipsLoaded"(): boolean
public static "getBootstrapProperty"(key: string): string
public static "isUntranslatedItemsLoaded"(): boolean
public static "isOptiFineLoaded"(): boolean
public static "isIrisApiLoaded"(): boolean
public static "isDeveloperMode"(): boolean
get "textEngineEnabled"(): boolean
get "legendaryTooltipsLoaded"(): boolean
get "untranslatedItemsLoaded"(): boolean
get "optiFineLoaded"(): boolean
get "irisApiLoaded"(): boolean
get "developerMode"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModernUIMod$Type = ($ModernUIMod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModernUIMod_ = $ModernUIMod$Type;
}}
declare module "packages/icyllis/modernui/mc/ui/$RectangleDrawable" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"

/**
 * 
 * @deprecated
 */
export class $RectangleDrawable extends $Drawable {
static readonly "MAX_LEVEL": integer

constructor()

public "draw"(canvas: $Canvas$Type): void
public "getAlpha"(): integer
public "setAlpha"(alpha: integer): void
get "alpha"(): integer
set "alpha"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RectangleDrawable$Type = ($RectangleDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RectangleDrawable_ = $RectangleDrawable$Type;
}}
declare module "packages/icyllis/modernui/util/$Pools" {
import {$Pools$Pool, $Pools$Pool$Type} from "packages/icyllis/modernui/util/$Pools$Pool"

export class $Pools {


public static "newSimplePool"<T>(maxPoolSize: integer): $Pools$Pool<(T)>
public static "newSynchronizedPool"<T>(maxPoolSize: integer, lock: any): $Pools$Pool<(T)>
public static "newSynchronizedPool"<T>(maxPoolSize: integer): $Pools$Pool<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Pools$Type = ($Pools);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Pools_ = $Pools$Type;
}}
declare module "packages/icyllis/modernui/resources/$ResourceTypes" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ResourceTypes {
static readonly "TYPE_ANY": integer
static readonly "TYPE_REFERENCE": integer
static readonly "TYPE_STRING": integer
static readonly "TYPE_INTEGER": integer
static readonly "TYPE_BOOLEAN": integer
static readonly "TYPE_COLOR": integer
static readonly "TYPE_FLOAT": integer
static readonly "TYPE_DIMENSION": integer
static readonly "TYPE_FRACTION": integer
static readonly "TYPE_ENUM": integer
static readonly "TYPE_FLAGS": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceTypes$Type = ($ResourceTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceTypes_ = $ResourceTypes$Type;
}}
declare module "packages/icyllis/modernui/markdown/$SpanFactory" {
import {$Node, $Node$Type} from "packages/com/vladsch/flexmark/util/ast/$Node"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"
import {$MarkdownConfig, $MarkdownConfig$Type} from "packages/icyllis/modernui/markdown/$MarkdownConfig"

export interface $SpanFactory<N extends $Node> {

 "create"(arg0: $MarkdownConfig$Type, arg1: N, arg2: $DataSet$Type): any

(arg0: $MarkdownConfig$Type, arg1: N, arg2: $DataSet$Type): any
}

export namespace $SpanFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpanFactory$Type<N> = ($SpanFactory<(N)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpanFactory_<N> = $SpanFactory$Type<(N)>;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$GLVertexAttrib$CpuType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $GLVertexAttrib$CpuType extends $Enum<($GLVertexAttrib$CpuType)> {
static readonly "FLOAT": $GLVertexAttrib$CpuType
static readonly "BYTE": $GLVertexAttrib$CpuType
static readonly "UBYTE": $GLVertexAttrib$CpuType
static readonly "SHORT": $GLVertexAttrib$CpuType
static readonly "USHORT": $GLVertexAttrib$CpuType
static readonly "INT": $GLVertexAttrib$CpuType
static readonly "UINT": $GLVertexAttrib$CpuType
static readonly "HALF": $GLVertexAttrib$CpuType


public static "values"(): ($GLVertexAttrib$CpuType)[]
public static "valueOf"(name: string): $GLVertexAttrib$CpuType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GLVertexAttrib$CpuType$Type = (("ubyte") | ("half") | ("byte") | ("short") | ("ushort") | ("float") | ("uint") | ("int")) | ($GLVertexAttrib$CpuType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GLVertexAttrib$CpuType_ = $GLVertexAttrib$CpuType$Type;
}}
declare module "packages/icyllis/modernui/view/$ActionMode$Callback" {
import {$MenuItem, $MenuItem$Type} from "packages/icyllis/modernui/view/$MenuItem"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Menu, $Menu$Type} from "packages/icyllis/modernui/view/$Menu"
import {$ActionMode, $ActionMode$Type} from "packages/icyllis/modernui/view/$ActionMode"

export interface $ActionMode$Callback {

 "onGetContentRect"(mode: $ActionMode$Type, view: $View$Type, outRect: $Rect$Type): void
 "onCreateActionMode"(arg0: $ActionMode$Type, arg1: $Menu$Type): boolean
 "onPrepareActionMode"(arg0: $ActionMode$Type, arg1: $Menu$Type): boolean
 "onDestroyActionMode"(arg0: $ActionMode$Type): void
 "onActionItemClicked"(arg0: $ActionMode$Type, arg1: $MenuItem$Type): boolean
}

export namespace $ActionMode$Callback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActionMode$Callback$Type = ($ActionMode$Callback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActionMode$Callback_ = $ActionMode$Callback$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$OpenMenuEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$IModBusEvent, $IModBusEvent$Type} from "packages/net/minecraftforge/fml/event/$IModBusEvent"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"

export class $OpenMenuEvent extends $Event implements $IModBusEvent {

constructor()

public "set"(fragment: $Fragment$Type): void
public "isCancelable"(): boolean
public "getMenu"(): $AbstractContainerMenu
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "menu"(): $AbstractContainerMenu
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenMenuEvent$Type = ($OpenMenuEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenMenuEvent_ = $OpenMenuEvent$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$LineBreaker$LineWidth" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $LineBreaker$LineWidth {

 "getMin"(): float
 "getAt"(line: integer): float
}

export namespace $LineBreaker$LineWidth {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LineBreaker$LineWidth$Type = ($LineBreaker$LineWidth);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LineBreaker$LineWidth_ = $LineBreaker$LineWidth$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentTransaction" {
import {$Fragment, $Fragment$Type} from "packages/icyllis/modernui/fragment/$Fragment"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Lifecycle$State, $Lifecycle$State$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle$State"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$DataSet, $DataSet$Type} from "packages/icyllis/modernui/util/$DataSet"

export class $FragmentTransaction {
static readonly "TRANSIT_ENTER_MASK": integer
static readonly "TRANSIT_EXIT_MASK": integer
static readonly "TRANSIT_UNSET": integer
static readonly "TRANSIT_NONE": integer
static readonly "TRANSIT_FRAGMENT_OPEN": integer
static readonly "TRANSIT_FRAGMENT_CLOSE": integer
static readonly "TRANSIT_FRAGMENT_FADE": integer
static readonly "TRANSIT_FRAGMENT_MATCH_ACTIVITY_OPEN": integer
static readonly "TRANSIT_FRAGMENT_MATCH_ACTIVITY_CLOSE": integer


public "add"(containerViewId: integer, fragmentClass: $Class$Type<(any)>, args: $DataSet$Type, tag: string): $FragmentTransaction
public "add"(containerViewId: integer, fragment: $Fragment$Type): $FragmentTransaction
public "add"(containerViewId: integer, fragmentClass: $Class$Type<(any)>, args: $DataSet$Type): $FragmentTransaction
public "add"(containerViewId: integer, fragment: $Fragment$Type, tag: string): $FragmentTransaction
public "add"(fragment: $Fragment$Type, tag: string): $FragmentTransaction
public "add"(fragmentClass: $Class$Type<(any)>, args: $DataSet$Type, tag: string): $FragmentTransaction
public "remove"(fragment: $Fragment$Type): $FragmentTransaction
public "isEmpty"(): boolean
public "replace"(containerViewId: integer, fragment: $Fragment$Type): $FragmentTransaction
public "replace"(containerViewId: integer, fragmentClass: $Class$Type<(any)>, args: $DataSet$Type, tag: string): $FragmentTransaction
public "replace"(containerViewId: integer, fragment: $Fragment$Type, tag: string): $FragmentTransaction
public "replace"(containerViewId: integer, fragmentClass: $Class$Type<(any)>, args: $DataSet$Type): $FragmentTransaction
public "attach"(fragment: $Fragment$Type): $FragmentTransaction
public "commit"(): integer
public "detach"(fragment: $Fragment$Type): $FragmentTransaction
public "hide"(fragment: $Fragment$Type): $FragmentTransaction
public "setTransition"(transition: integer): $FragmentTransaction
public "isAddToBackStackAllowed"(): boolean
public "commitAllowingStateLoss"(): integer
public "commitNowAllowingStateLoss"(): void
public "disallowAddToBackStack"(): $FragmentTransaction
public "addToBackStack"(name: string): $FragmentTransaction
public "show"(fragment: $Fragment$Type): $FragmentTransaction
public "setReorderingAllowed"(reorderingAllowed: boolean): $FragmentTransaction
public "setPrimaryNavigationFragment"(fragment: $Fragment$Type): $FragmentTransaction
public "setMaxLifecycle"(fragment: $Fragment$Type, state: $Lifecycle$State$Type): $FragmentTransaction
public "addSharedElement"(sharedElement: $View$Type, name: string): $FragmentTransaction
public "commitNow"(): void
public "setCustomAnimations"(enter: integer, exit: integer): $FragmentTransaction
public "setCustomAnimations"(enter: integer, exit: integer, popEnter: integer, popExit: integer): $FragmentTransaction
public "runOnCommit"(runnable: $Runnable$Type): $FragmentTransaction
get "empty"(): boolean
set "transition"(value: integer)
get "addToBackStackAllowed"(): boolean
set "reorderingAllowed"(value: boolean)
set "primaryNavigationFragment"(value: $Fragment$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentTransaction$Type = ($FragmentTransaction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentTransaction_ = $FragmentTransaction$Type;
}}
declare module "packages/icyllis/modernui/markdown/$MarkdownTheme$Builder" {
import {$Typeface, $Typeface$Type} from "packages/icyllis/modernui/text/$Typeface"
import {$MarkdownTheme, $MarkdownTheme$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme"

export class $MarkdownTheme$Builder {


public "build"(): $MarkdownTheme
public "setCodeBlockTextSize"(codeBlockTextSize: integer): $MarkdownTheme$Builder
public "setCodeBlockTextColor"(codeBlockTextColor: integer): $MarkdownTheme$Builder
public "setThematicBreakColor"(thematicBreakColor: integer): $MarkdownTheme$Builder
public "setHeadingBreakColor"(headingBreakColor: integer): $MarkdownTheme$Builder
public "setCodeBackgroundColor"(codeBackgroundColor: integer): $MarkdownTheme$Builder
public "setCodeBlockBackgroundColor"(codeBlockBackgroundColor: integer): $MarkdownTheme$Builder
public "setCodeBlockTypeface"(codeBlockTypeface: $Typeface$Type): $MarkdownTheme$Builder
public "setHeadingTextSizeMultipliers"(headingTextSizeMultipliers: (float)[]): $MarkdownTheme$Builder
public "setListItemMargin"(listItemMargin: integer): $MarkdownTheme$Builder
public "setCodeBlockMargin"(codeBlockMargin: integer): $MarkdownTheme$Builder
public "setBlockQuoteMargin"(blockQuoteMargin: integer): $MarkdownTheme$Builder
public "setBlockQuoteWidth"(blockQuoteWidth: integer): $MarkdownTheme$Builder
public "setBlockQuoteColor"(blockQuoteColor: integer): $MarkdownTheme$Builder
public "setListItemColor"(listItemColor: integer): $MarkdownTheme$Builder
public "setHeadingTypeface"(headingTypeface: $Typeface$Type): $MarkdownTheme$Builder
public "setCodeTextSize"(codeTextSize: integer): $MarkdownTheme$Builder
public "setCodeTextColor"(codeTextColor: integer): $MarkdownTheme$Builder
public "setCodeTypeface"(codeTypeface: $Typeface$Type): $MarkdownTheme$Builder
set "codeBlockTextSize"(value: integer)
set "codeBlockTextColor"(value: integer)
set "thematicBreakColor"(value: integer)
set "headingBreakColor"(value: integer)
set "codeBackgroundColor"(value: integer)
set "codeBlockBackgroundColor"(value: integer)
set "codeBlockTypeface"(value: $Typeface$Type)
set "headingTextSizeMultipliers"(value: (float)[])
set "listItemMargin"(value: integer)
set "codeBlockMargin"(value: integer)
set "blockQuoteMargin"(value: integer)
set "blockQuoteWidth"(value: integer)
set "blockQuoteColor"(value: integer)
set "listItemColor"(value: integer)
set "headingTypeface"(value: $Typeface$Type)
set "codeTextSize"(value: integer)
set "codeTextColor"(value: integer)
set "codeTypeface"(value: $Typeface$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTheme$Builder$Type = ($MarkdownTheme$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTheme$Builder_ = $MarkdownTheme$Builder$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/$TestContainerMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TestContainerMenu extends $AbstractContainerMenu {
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(containerId: integer, inventory: $Inventory$Type, player: $Player$Type)
constructor(containerId: integer, inventory: $Inventory$Type, data: $FriendlyByteBuf$Type)
constructor()

public "stillValid"(player: $Player$Type): boolean
public "removed"(player: $Player$Type): void
public "isDiamond"(): boolean
public "quickMoveStack"(player: $Player$Type, index: integer): $ItemStack
/**
 * 
 * @deprecated
 */
public "setData"(id: integer, data: integer): void
get "diamond"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TestContainerMenu$Type = ($TestContainerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TestContainerMenu_ = $TestContainerMenu$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$SafeLinkedHashMap" {
import {$SafeLinkedList, $SafeLinkedList$Type} from "packages/icyllis/modernui/lifecycle/$SafeLinkedList"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $SafeLinkedHashMap<T, E extends $Supplier<(T)>> extends $SafeLinkedList<(T), (E)> {

constructor()

public "remove"(token: T): E
public "ceil"(token: T): E
public "contains"(token: T): boolean
public "putIfAbsent"(e: E): E
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SafeLinkedHashMap$Type<T, E> = ($SafeLinkedHashMap<(T), (E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SafeLinkedHashMap_<T, E> = $SafeLinkedHashMap$Type<(T), (E)>;
}}
declare module "packages/icyllis/modernui/util/$L2Padding" {
import {$TailPadding, $TailPadding$Type} from "packages/icyllis/modernui/util/$TailPadding"

export class $L2Padding<E> extends $TailPadding<(E)> {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $L2Padding$Type<E> = ($L2Padding<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $L2Padding_<E> = $L2Padding$Type<(E)>;
}}
declare module "packages/icyllis/modernui/animation/$LayoutTransition" {
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$LayoutTransition$TransitionListener, $LayoutTransition$TransitionListener$Type} from "packages/icyllis/modernui/animation/$LayoutTransition$TransitionListener"

export class $LayoutTransition {
static readonly "CHANGE_APPEARING": integer
static readonly "CHANGE_DISAPPEARING": integer
static readonly "APPEARING": integer
static readonly "DISAPPEARING": integer
static readonly "CHANGING": integer

constructor()

public "getDuration"(transitionType: integer): long
public "cancel"(transitionType: integer): void
public "cancel"(): void
public "addTransitionListener"(listener: $LayoutTransition$TransitionListener$Type): void
public "removeTransitionListener"(listener: $LayoutTransition$TransitionListener$Type): void
public "startChangingAnimations"(): void
public "disableTransitionType"(transitionType: integer): void
public "enableTransitionType"(transitionType: integer): void
public "setStartDelay"(transitionType: integer, delay: long): void
public "setInterpolator"(transitionType: integer, interpolator: $TimeInterpolator$Type): void
public "isChangingLayout"(): boolean
public "layoutChange"(parent: $ViewGroup$Type): void
public "showChild"(parent: $ViewGroup$Type, child: $View$Type, oldVisibility: integer): void
public "hideChild"(parent: $ViewGroup$Type, child: $View$Type, newVisibility: integer): void
public "addChild"(parent: $ViewGroup$Type, child: $View$Type): void
public "isRunning"(): boolean
public "removeChild"(parent: $ViewGroup$Type, child: $View$Type): void
public "endChangingAnimations"(): void
public "getTransitionListeners"(): $List<($LayoutTransition$TransitionListener)>
public "setAnimateParentHierarchy"(animateParentHierarchy: boolean): void
public "isTransitionTypeEnabled"(transitionType: integer): boolean
public "setDuration"(transitionType: integer, duration: long): void
public "setDuration"(duration: long): void
public "setAnimator"(transitionType: integer, animator: $Animator$Type): void
public "getStagger"(transitionType: integer): long
public "getInterpolator"(transitionType: integer): $TimeInterpolator
public "setStagger"(transitionType: integer, duration: long): void
public "getAnimator"(transitionType: integer): $Animator
public "getStartDelay"(transitionType: integer): long
get "changingLayout"(): boolean
get "running"(): boolean
get "transitionListeners"(): $List<($LayoutTransition$TransitionListener)>
set "animateParentHierarchy"(value: boolean)
set "duration"(value: long)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutTransition$Type = ($LayoutTransition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutTransition_ = $LayoutTransition$Type;
}}
declare module "packages/icyllis/modernui/graphics/$Color" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"

export class $Color {
static readonly "TRANSPARENT": integer
static readonly "COLOR_CHANNEL_R": integer
static readonly "COLOR_CHANNEL_G": integer
static readonly "COLOR_CHANNEL_B": integer
static readonly "COLOR_CHANNEL_A": integer
static readonly "COLOR_CHANNEL_FLAG_RED": integer
static readonly "COLOR_CHANNEL_FLAG_GREEN": integer
static readonly "COLOR_CHANNEL_FLAG_BLUE": integer
static readonly "COLOR_CHANNEL_FLAG_ALPHA": integer
static readonly "COLOR_CHANNEL_FLAG_GRAY": integer
static readonly "COLOR_CHANNEL_FLAGS_RG": integer
static readonly "COLOR_CHANNEL_FLAGS_RGB": integer
static readonly "COLOR_CHANNEL_FLAGS_RGBA": integer

constructor()

public static "blend"(mode: $BlendMode$Type, src: integer, dst: integer): integer
public static "red"(color: integer): integer
public static "equals_within_tolerance"(colA: (float)[], colB: (float)[], tol: float): boolean
public static "luminance"(r: float, g: float, b: float): float
public static "luminance"(col: (float)[]): float
public static "alpha"(color: integer): integer
public static "blue"(color: integer): integer
public static "green"(color: integer): integer
public static "GammaToLinear"(col: (float)[]): void
public static "GammaToLinear"(x: float): float
public static "LinearToGamma"(x: float): float
public static "LinearToGamma"(col: (float)[]): void
public static "rgb"(red: integer, green: integer, blue: integer): integer
public static "rgb"(red: float, green: float, blue: float): integer
public static "argb"(alpha: float, red: float, green: float, blue: float): integer
public static "argb"(alpha: integer, red: integer, green: integer, blue: integer): integer
public static "lightness"(lum: float): float
public static "parseColor"(colorString: string): integer
public static "RGBToHSV"(r: integer, g: integer, b: integer, hsv: (float)[]): void
public static "RGBToHSV"(color: integer, hsv: (float)[]): void
public static "HSVToColor"(h: float, s: float, v: float): integer
public static "HSVToColor"(hsv: (float)[]): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Color$Type = ($Color);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Color_ = $Color$Type;
}}
declare module "packages/icyllis/modernui/mc/testforge/trash/$LayoutIO" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
/**
 * 
 * @deprecated
 */
export class $LayoutIO {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayoutIO$Type = ($LayoutIO);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayoutIO_ = $LayoutIO$Type;
}}
declare module "packages/icyllis/modernui/text/$Typeface" {
import {$FontCollection, $FontCollection$Type} from "packages/icyllis/modernui/graphics/text/$FontCollection"
import {$FontFamily, $FontFamily$Type} from "packages/icyllis/modernui/graphics/text/$FontFamily"

export class $Typeface extends $FontCollection {
static readonly "SANS_SERIF": $Typeface
static readonly "SERIF": $Typeface
static readonly "MONOSPACED": $Typeface
static readonly "NORMAL": integer
static readonly "BOLD": integer
static readonly "ITALIC": integer
static readonly "BOLD_ITALIC": integer
static readonly "GC_M_MASK": integer
static readonly "REPLACEMENT_CHARACTER": integer
static readonly "UNSUPPORTED_FONT_SCORE": integer


public static "createTypeface"(...families: ($FontFamily$Type)[]): $Typeface
public static "getSystemFont"(familyName: string): $Typeface
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Typeface$Type = ($Typeface);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Typeface_ = $Typeface$Type;
}}
declare module "packages/icyllis/modernui/text/method/$PasswordTransformationMethod" {
import {$TextWatcher, $TextWatcher$Type} from "packages/icyllis/modernui/text/$TextWatcher"
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"
import {$TransformationMethod, $TransformationMethod$Type} from "packages/icyllis/modernui/text/method/$TransformationMethod"
import {$Editable, $Editable$Type} from "packages/icyllis/modernui/text/$Editable"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export class $PasswordTransformationMethod implements $TransformationMethod, $TextWatcher {


public static "getInstance"(): $PasswordTransformationMethod
public "afterTextChanged"(s: $Editable$Type): void
public "beforeTextChanged"(s: charseq, start: integer, count: integer, after: integer): void
public "onFocusChanged"(view: $View$Type, sourceText: charseq, focused: boolean, direction: integer, previouslyFocusedRect: $Rect$Type): void
public "onTextChanged"(s: charseq, start: integer, before: integer, count: integer): void
public "getTransformation"(source: charseq, view: $View$Type): charseq
get "instance"(): $PasswordTransformationMethod
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PasswordTransformationMethod$Type = ($PasswordTransformationMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PasswordTransformationMethod_ = $PasswordTransformationMethod$Type;
}}
declare module "packages/icyllis/modernui/widget/$AbsoluteLayout" {
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $AbsoluteLayout extends $ViewGroup {
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsoluteLayout$Type = ($AbsoluteLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsoluteLayout_ = $AbsoluteLayout$Type;
}}
declare module "packages/icyllis/modernui/mc/forge/$ServerHandler" {
import {$ServerStartedEvent, $ServerStartedEvent$Type} from "packages/net/minecraftforge/event/server/$ServerStartedEvent"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$ServerStoppingEvent, $ServerStoppingEvent$Type} from "packages/net/minecraftforge/event/server/$ServerStoppingEvent"

export class $ServerHandler {
static readonly "INSTANCE": $ServerHandler

constructor()

public "onStart"(event: $ServerStartedEvent$Type): void
public "onStop"(event: $ServerStoppingEvent$Type): void
public "determineShutdownTime"(): void
public "onLastEndTick"(event: $TickEvent$ServerTickEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerHandler$Type = ($ServerHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerHandler_ = $ServerHandler$Type;
}}
declare module "packages/icyllis/modernui/fragment/$FragmentViewLifecycleOwner" {
import {$Lifecycle, $Lifecycle$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle"
import {$ViewModelStore, $ViewModelStore$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelStore"
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$ViewModelProvider$Factory, $ViewModelProvider$Factory$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelProvider$Factory"
import {$ViewModelStoreOwner, $ViewModelStoreOwner$Type} from "packages/icyllis/modernui/lifecycle/$ViewModelStoreOwner"

export class $FragmentViewLifecycleOwner implements $LifecycleOwner, $ViewModelStoreOwner {


public "getDefaultViewModelProviderFactory"(): $ViewModelProvider$Factory
public "getViewModelStore"(): $ViewModelStore
public "getLifecycle"(): $Lifecycle
get "defaultViewModelProviderFactory"(): $ViewModelProvider$Factory
get "viewModelStore"(): $ViewModelStore
get "lifecycle"(): $Lifecycle
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FragmentViewLifecycleOwner$Type = ($FragmentViewLifecycleOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FragmentViewLifecycleOwner_ = $FragmentViewLifecycleOwner$Type;
}}
declare module "packages/icyllis/modernui/text/style/$RelativeSizeSpan" {
import {$MetricAffectingSpan, $MetricAffectingSpan$Type} from "packages/icyllis/modernui/text/style/$MetricAffectingSpan"
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"
import {$ParcelableSpan, $ParcelableSpan$Type} from "packages/icyllis/modernui/text/$ParcelableSpan"

export class $RelativeSizeSpan extends $MetricAffectingSpan implements $ParcelableSpan {

constructor(proportion: float)
constructor(src: $Parcel$Type)

public "updateMeasureState"(paint: $TextPaint$Type): void
public "getSpanTypeId"(): integer
public "writeToParcel"(dest: $Parcel$Type, flags: integer): void
public "getSizeChange"(): float
get "spanTypeId"(): integer
get "sizeChange"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RelativeSizeSpan$Type = ($RelativeSizeSpan);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RelativeSizeSpan_ = $RelativeSizeSpan$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$LineBreaker$ParagraphConstraints" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LineBreaker$ParagraphConstraints {

constructor()

public "setWidth"(width: float): void
public "setIndent"(firstWidth: float): void
public "getWidth"(): float
public "setTabStops"(tabStops: (float)[], defaultTabStop: float): void
public "getTabStops"(): (float)[]
public "getDefaultTabStop"(): float
public "getFirstWidth"(): float
set "width"(value: float)
set "indent"(value: float)
get "width"(): float
get "tabStops"(): (float)[]
get "defaultTabStop"(): float
get "firstWidth"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LineBreaker$ParagraphConstraints$Type = ($LineBreaker$ParagraphConstraints);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LineBreaker$ParagraphConstraints_ = $LineBreaker$ParagraphConstraints$Type;
}}
declare module "packages/icyllis/modernui/markdown/$MarkdownTheme" {
import {$Typeface, $Typeface$Type} from "packages/icyllis/modernui/text/$Typeface"
import {$MarkdownTheme$Builder, $MarkdownTheme$Builder$Type} from "packages/icyllis/modernui/markdown/$MarkdownTheme$Builder"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"

export class $MarkdownTheme {


public "getCodeBackgroundColor"(): integer
public "getBlockQuoteMargin"(): integer
public static "builder"(): $MarkdownTheme$Builder
public "getCodeTextColor"(): integer
public "getCodeTypeface"(): $Typeface
public "getCodeTextSize"(): integer
public "getBlockQuoteColor"(): integer
public "getListItemColor"(): integer
public "getBlockQuoteWidth"(): integer
public "getListItemMargin"(): integer
public "getCodeBlockMargin"(): integer
public "getHeadingTextSizeMultiplier"(level: integer): float
public "getHeadingBreakColor"(): integer
public "getHeadingTypeface"(): $Typeface
public "getThematicBreakColor"(): integer
public static "builderWithDefaults"(context: $Context$Type): $MarkdownTheme$Builder
public "getCodeBlockTypeface"(): $Typeface
public "getCodeBlockTextColor"(): integer
public "getCodeBlockBackgroundColor"(): integer
public "getCodeBlockTextSize"(): integer
get "codeBackgroundColor"(): integer
get "blockQuoteMargin"(): integer
get "codeTextColor"(): integer
get "codeTypeface"(): $Typeface
get "codeTextSize"(): integer
get "blockQuoteColor"(): integer
get "listItemColor"(): integer
get "blockQuoteWidth"(): integer
get "listItemMargin"(): integer
get "codeBlockMargin"(): integer
get "headingBreakColor"(): integer
get "headingTypeface"(): $Typeface
get "thematicBreakColor"(): integer
get "codeBlockTypeface"(): $Typeface
get "codeBlockTextColor"(): integer
get "codeBlockBackgroundColor"(): integer
get "codeBlockTextSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkdownTheme$Type = ($MarkdownTheme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkdownTheme_ = $MarkdownTheme$Type;
}}
declare module "packages/icyllis/modernui/text/$SpannableStringBuilder" {
import {$Spannable, $Spannable$Type} from "packages/icyllis/modernui/text/$Spannable"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$IntStream, $IntStream$Type} from "packages/java/util/stream/$IntStream"
import {$Editable, $Editable$Type} from "packages/icyllis/modernui/text/$Editable"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Appendable, $Appendable$Type} from "packages/java/lang/$Appendable"
import {$GetChars, $GetChars$Type} from "packages/icyllis/modernui/text/$GetChars"
import {$InputFilter, $InputFilter$Type} from "packages/icyllis/modernui/text/$InputFilter"

export class $SpannableStringBuilder implements $Editable, $Spannable, $GetChars, $Appendable {
static readonly "MARKER": $Marker

constructor(text: charseq, start: integer, end: integer)
constructor(text: charseq)
constructor()

public "equals"(o: any): boolean
public "length"(): integer
public "toString"(): string
public "append"(text: charseq, start: integer, end: integer): $SpannableStringBuilder
public "append"(text: charseq, what: any, flags: integer): $SpannableStringBuilder
public "append"(text: character): $SpannableStringBuilder
public "hashCode"(): integer
public "getChars"(start: integer, end: integer, dest: (character)[], destoff: integer): void
public static "valueOf"(source: charseq): $SpannableStringBuilder
public "clear"(): void
public "charAt"(where: integer): character
public "substring"(start: integer, end: integer): string
public "replace"(start: integer, end: integer, tb: charseq): $SpannableStringBuilder
public "subSequence"(start: integer, end: integer): charseq
public "delete"(start: integer, end: integer): $SpannableStringBuilder
public "setSpan"(what: any, start: integer, end: integer, flags: integer): void
public "setFilters"(filters: ($InputFilter$Type)[]): void
public "getFilters"(): ($InputFilter)[]
public "clearSpans"(): void
public "getTextWatcherDepth"(): integer
public "removeSpan"(what: any): void
public "removeSpan"(what: any, flags: integer): void
public "nextSpanTransition"(start: integer, limit: integer, kind: $Class$Type<(any)>): integer
public "getSpanStart"(what: any): integer
public "getSpanFlags"(what: any): integer
public "getSpans"<T>(queryStart: integer, queryEnd: integer, kind: $Class$Type<(any)>, sortByInsertionOrder: boolean, dest: $List$Type<(T)>): $List<(T)>
public "getSpans"<T>(queryStart: integer, queryEnd: integer, kind: $Class$Type<(any)>, out: $List$Type<(T)>): $List<(T)>
public "getSpanEnd"(what: any): integer
public "getSpans"<T>(start: integer, end: integer, type: $Class$Type<(any)>): $List<(T)>
public static "compare"(arg0: charseq, arg1: charseq): integer
public "isEmpty"(): boolean
public "codePoints"(): $IntStream
public "chars"(): $IntStream
set "filters"(value: ($InputFilter$Type)[])
get "filters"(): ($InputFilter)[]
get "textWatcherDepth"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpannableStringBuilder$Type = ($SpannableStringBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpannableStringBuilder_ = $SpannableStringBuilder$Type;
}}
declare module "packages/icyllis/modernui/widget/$ViewPager" {
import {$Canvas, $Canvas$Type} from "packages/icyllis/modernui/graphics/$Canvas"
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$ViewPager$OnPageChangeListener, $ViewPager$OnPageChangeListener$Type} from "packages/icyllis/modernui/widget/$ViewPager$OnPageChangeListener"
import {$ViewGroup$LayoutParams, $ViewGroup$LayoutParams$Type} from "packages/icyllis/modernui/view/$ViewGroup$LayoutParams"
import {$PagerAdapter, $PagerAdapter$Type} from "packages/icyllis/modernui/widget/$PagerAdapter"
import {$ViewPager$PageTransformer, $ViewPager$PageTransformer$Type} from "packages/icyllis/modernui/widget/$ViewPager$PageTransformer"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"
import {$KeyEvent, $KeyEvent$Type} from "packages/icyllis/modernui/view/$KeyEvent"
import {$MotionEvent, $MotionEvent$Type} from "packages/icyllis/modernui/view/$MotionEvent"
import {$ViewPager$OnAdapterChangeListener, $ViewPager$OnAdapterChangeListener$Type} from "packages/icyllis/modernui/widget/$ViewPager$OnAdapterChangeListener"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $ViewPager extends $ViewGroup {
static readonly "SCROLL_STATE_IDLE": integer
static readonly "SCROLL_STATE_DRAGGING": integer
static readonly "SCROLL_STATE_SETTLING": integer
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "setAdapter"(adapter: $PagerAdapter$Type): void
public "setPageTransformer"(reverseDrawingOrder: boolean, transformer: $ViewPager$PageTransformer$Type): void
public "setPageTransformer"(reverseDrawingOrder: boolean, transformer: $ViewPager$PageTransformer$Type, pageLayerType: integer): void
public "getPageMargin"(): integer
public "setPageMargin"(marginPixels: integer): void
public "beginFakeDrag"(): boolean
public "endFakeDrag"(): void
public "isFakeDragging"(): boolean
public "fakeDragBy"(xOffset: float): void
public "getAdapter"(): $PagerAdapter
public "canScrollHorizontally"(direction: integer): boolean
public "onInterceptTouchEvent"(ev: $MotionEvent$Type): boolean
public "setEdgeEffectColor"(color: integer): void
public "arrowScroll"(direction: integer): boolean
public "executeKeyEvent"(event: $KeyEvent$Type): boolean
public "draw"(canvas: $Canvas$Type): void
public "onTouchEvent"(ev: $MotionEvent$Type): boolean
public "dispatchKeyEvent"(event: $KeyEvent$Type): boolean
public "removeView"(view: $View$Type): void
public "getCurrentItem"(): integer
public "setCurrentItem"(item: integer): void
public "setCurrentItem"(item: integer, smoothScroll: boolean): void
public "addView"(child: $View$Type, index: integer, params: $ViewGroup$LayoutParams$Type): void
public "computeScroll"(): void
public "addFocusables"(views: $ArrayList$Type<($View$Type)>, direction: integer, focusableMode: integer): void
public "addTouchables"(views: $ArrayList$Type<($View$Type)>): void
public "addOnPageChangeListener"(listener: $ViewPager$OnPageChangeListener$Type): void
public "removeOnPageChangeListener"(listener: $ViewPager$OnPageChangeListener$Type): void
public "clearOnPageChangeListeners"(): void
public "getOffscreenPageLimit"(): integer
public "setPageMarginDrawable"(d: $Drawable$Type): void
public "setOffscreenPageLimit"(limit: integer): void
public "addOnAdapterChangeListener"(listener: $ViewPager$OnAdapterChangeListener$Type): void
public "removeOnAdapterChangeListener"(listener: $ViewPager$OnAdapterChangeListener$Type): void
public "setLeftEdgeEffectColor"(color: integer): void
public "getLeftEdgeEffectColor"(): integer
public "getRightEdgeEffectColor"(): integer
public "setRightEdgeEffectColor"(color: integer): void
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
public "requestLayout"(): void
set "adapter"(value: $PagerAdapter$Type)
get "pageMargin"(): integer
set "pageMargin"(value: integer)
get "fakeDragging"(): boolean
get "adapter"(): $PagerAdapter
set "edgeEffectColor"(value: integer)
get "currentItem"(): integer
set "currentItem"(value: integer)
get "offscreenPageLimit"(): integer
set "pageMarginDrawable"(value: $Drawable$Type)
set "offscreenPageLimit"(value: integer)
set "leftEdgeEffectColor"(value: integer)
get "leftEdgeEffectColor"(): integer
get "rightEdgeEffectColor"(): integer
set "rightEdgeEffectColor"(value: integer)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewPager$Type = ($ViewPager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewPager_ = $ViewPager$Type;
}}
declare module "packages/icyllis/modernui/animation/$AnimatorSet$Builder" {
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"

export class $AnimatorSet$Builder {


public "before"(anim: $Animator$Type): $AnimatorSet$Builder
public "after"(anim: $Animator$Type): $AnimatorSet$Builder
public "after"(delay: long): $AnimatorSet$Builder
public "with"(anim: $Animator$Type): $AnimatorSet$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimatorSet$Builder$Type = ($AnimatorSet$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimatorSet$Builder_ = $AnimatorSet$Builder$Type;
}}
declare module "packages/icyllis/modernui/util/$SparseBooleanArray" {
import {$Cloneable, $Cloneable$Type} from "packages/java/lang/$Cloneable"

export class $SparseBooleanArray implements $Cloneable {

constructor()
constructor(initialCapacity: integer)

public "get"(key: integer, defaultValue: boolean): boolean
public "get"(key: integer): boolean
public "put"(key: integer, value: boolean): void
public "equals"(that: any): boolean
public "toString"(): string
public "append"(key: integer, value: boolean): void
public "hashCode"(): integer
public "clone"(): $SparseBooleanArray
public "clear"(): void
public "size"(): integer
public "delete"(key: integer): void
public "removeAt"(index: integer): void
public "indexOfKey"(key: integer): integer
public "keyAt"(index: integer): integer
public "valueAt"(index: integer): boolean
public "setKeyAt"(index: integer, key: integer): void
public "setValueAt"(index: integer, value: boolean): void
public "indexOfValue"(value: boolean): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SparseBooleanArray$Type = ($SparseBooleanArray);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SparseBooleanArray_ = $SparseBooleanArray$Type;
}}
declare module "packages/icyllis/modernui/audio/$AudioManager" {
import {$Track, $Track$Type} from "packages/icyllis/modernui/audio/$Track"
import {$Marker, $Marker$Type} from "packages/org/apache/logging/log4j/$Marker"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"

export class $AudioManager implements $AutoCloseable {
static readonly "MARKER": $Marker
static readonly "TICK_PERIOD": integer


public static "getInstance"(): $AudioManager
public "initialize"(integrated: boolean): void
public "initialize"(): void
public "destroy"(): void
public "close"(): void
public "addTrack"(track: $Track$Type): void
public "removeTrack"(track: $Track$Type): void
public "setDevice"(name: string): void
get "instance"(): $AudioManager
set "device"(value: string)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AudioManager$Type = ($AudioManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AudioManager_ = $AudioManager$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$GraphemeBreak" {
import {$CharacterIterator, $CharacterIterator$Type} from "packages/java/text/$CharacterIterator"
import {$GraphemeBreak$ClusterConsumer, $GraphemeBreak$ClusterConsumer$Type} from "packages/icyllis/modernui/graphics/text/$GraphemeBreak$ClusterConsumer"
import {$Locale, $Locale$Type} from "packages/java/util/$Locale"

export class $GraphemeBreak {
static readonly "AFTER": integer
static readonly "AT_OR_AFTER": integer
static readonly "BEFORE": integer
static readonly "AT_OR_BEFORE": integer
static readonly "AT": integer
static "sUseICU": boolean


public static "getTextRunCursor"(text: string, locale: $Locale$Type, contextStart: integer, contextEnd: integer, offset: integer, op: integer): integer
public static "forTextRun"(text: (character)[], locale: $Locale$Type, contextStart: integer, contextEnd: integer, consumer: $GraphemeBreak$ClusterConsumer$Type): void
public static "isPureKiller"(c: integer): boolean
public static "isGraphemeBreak"(advances: (float)[], buf: (character)[], start: integer, count: integer, offset: integer): boolean
public static "getTextRunCursorImpl"(advances: (float)[], buf: (character)[], start: integer, count: integer, offset: integer, op: integer): integer
public static "getTextRunCursorICU"(text: $CharacterIterator$Type, locale: $Locale$Type, offset: integer, op: integer): integer
public static "tailoredGraphemeClusterBreak"(c: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GraphemeBreak$Type = ($GraphemeBreak);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GraphemeBreak_ = $GraphemeBreak$Type;
}}
declare module "packages/icyllis/modernui/annotation/$NonNull" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $NonNull extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $NonNull {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NonNull$Type = ($NonNull);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NonNull_ = $NonNull$Type;
}}
declare module "packages/icyllis/modernui/view/$DragEvent" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $DragEvent {
static readonly "ACTION_DRAG_STARTED": integer
static readonly "ACTION_DRAG_ENTERED": integer
static readonly "ACTION_DRAG_MOVED": integer
static readonly "ACTION_DRAG_EXITED": integer
static readonly "ACTION_DROP": integer
static readonly "ACTION_DRAG_ENDED": integer


public "getLocalState"(): any
public "toString"(): string
public "getResult"(): boolean
public "getY"(): double
public "getX"(): double
public "getAction"(): integer
get "localState"(): any
get "result"(): boolean
get "y"(): double
get "x"(): double
get "action"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DragEvent$Type = ($DragEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DragEvent_ = $DragEvent$Type;
}}
declare module "packages/icyllis/modernui/util/$ColorStateList" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ColorStateList {

constructor(states: ((integer)[])[], colors: (integer)[])

public "toString"(): string
public static "valueOf"(color: integer): $ColorStateList
public "isOpaque"(): boolean
public "hasFocusStateSpecified"(): boolean
public "getDefaultColor"(): integer
public "hasState"(state: integer): boolean
public "isStateful"(): boolean
public "getColorForState"(stateSet: (integer)[], defaultColor: integer): integer
public "getStates"(): ((integer)[])[]
public "getColors"(): (integer)[]
public "withAlpha"(alpha: integer): $ColorStateList
get "opaque"(): boolean
get "defaultColor"(): integer
get "stateful"(): boolean
get "states"(): ((integer)[])[]
get "colors"(): (integer)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorStateList$Type = ($ColorStateList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorStateList_ = $ColorStateList$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$ViewTreeLifecycleOwner" {
import {$LifecycleOwner, $LifecycleOwner$Type} from "packages/icyllis/modernui/lifecycle/$LifecycleOwner"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"

export class $ViewTreeLifecycleOwner {


public static "get"(view: $View$Type): $LifecycleOwner
public static "set"(view: $View$Type, lifecycleOwner: $LifecycleOwner$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewTreeLifecycleOwner$Type = ($ViewTreeLifecycleOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewTreeLifecycleOwner_ = $ViewTreeLifecycleOwner$Type;
}}
declare module "packages/icyllis/modernui/widget/$AbsSpinner" {
import {$ContextMenu, $ContextMenu$Type} from "packages/icyllis/modernui/view/$ContextMenu"
import {$AdapterView, $AdapterView$Type} from "packages/icyllis/modernui/widget/$AdapterView"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$SpinnerAdapter, $SpinnerAdapter$Type} from "packages/icyllis/modernui/widget/$SpinnerAdapter"
import {$ViewParent, $ViewParent$Type} from "packages/icyllis/modernui/view/$ViewParent"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $AbsSpinner extends $AdapterView<($SpinnerAdapter)> {
static readonly "ITEM_VIEW_TYPE_IGNORE": integer
static readonly "ITEM_VIEW_TYPE_HEADER_OR_FOOTER": integer
static readonly "INVALID_POSITION": integer
static readonly "INVALID_ROW_ID": long
static readonly "FOCUS_BEFORE_DESCENDANTS": integer
static readonly "FOCUS_AFTER_DESCENDANTS": integer
static readonly "FOCUS_BLOCK_DESCENDANTS": integer
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>


public "setAdapter"(adapter: $SpinnerAdapter$Type): void
public "getSelectedView"(): $View
public "getCount"(): integer
public "getAdapter"(): $SpinnerAdapter
public "setSelection"(position: integer, animate: boolean): void
public "setSelection"(position: integer): void
public "requestLayout"(): void
public "pointToPosition"(x: integer, y: integer): integer
public "getParent"(): $ViewParent
public "keyboardNavigationClusterSearch"(arg0: $View$Type, arg1: integer): $View
public "canResolveTextDirection"(): boolean
public "isTextDirectionResolved"(): boolean
public "isLayoutDirectionResolved"(): boolean
public "canResolveLayoutDirection"(): boolean
public "canResolveTextAlignment"(): boolean
public "isTextAlignmentResolved"(): boolean
public "isLayoutRequested"(): boolean
public "getTextDirection"(): integer
public "getTextAlignment"(): integer
public "createContextMenu"(arg0: $ContextMenu$Type): void
public "getLayoutDirection"(): integer
set "adapter"(value: $SpinnerAdapter$Type)
get "selectedView"(): $View
get "count"(): integer
get "adapter"(): $SpinnerAdapter
set "selection"(value: integer)
get "parent"(): $ViewParent
get "textDirectionResolved"(): boolean
get "layoutDirectionResolved"(): boolean
get "textAlignmentResolved"(): boolean
get "layoutRequested"(): boolean
get "textDirection"(): integer
get "textAlignment"(): integer
get "layoutDirection"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsSpinner$Type = ($AbsSpinner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsSpinner_ = $AbsSpinner$Type;
}}
declare module "packages/icyllis/modernui/view/menu/$MenuHelper" {
import {$MenuPresenter$Callback, $MenuPresenter$Callback$Type} from "packages/icyllis/modernui/view/menu/$MenuPresenter$Callback"

export interface $MenuHelper {

 "dismiss"(): void
 "setPresenterCallback"(arg0: $MenuPresenter$Callback$Type): void
}

export namespace $MenuHelper {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuHelper$Type = ($MenuHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuHelper_ = $MenuHelper$Type;
}}
declare module "packages/icyllis/modernui/util/$Parcelable" {
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"

export interface $Parcelable {

 "writeToParcel"(arg0: $Parcel$Type, arg1: integer): void

(arg0: $Parcel$Type, arg1: integer): void
}

export namespace $Parcelable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Parcelable$Type = ($Parcelable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Parcelable_ = $Parcelable$Type;
}}
declare module "packages/icyllis/modernui/widget/$ProgressBar" {
import {$BlendMode, $BlendMode$Type} from "packages/icyllis/modernui/graphics/$BlendMode"
import {$Context, $Context$Type} from "packages/icyllis/modernui/core/$Context"
import {$ColorStateList, $ColorStateList$Type} from "packages/icyllis/modernui/util/$ColorStateList"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$FloatProperty, $FloatProperty$Type} from "packages/icyllis/modernui/util/$FloatProperty"
import {$IntProperty, $IntProperty$Type} from "packages/icyllis/modernui/util/$IntProperty"

export class $ProgressBar extends $View {
static readonly "NO_ID": integer
static readonly "NOT_FOCUSABLE": integer
static readonly "FOCUSABLE": integer
static readonly "FOCUSABLE_AUTO": integer
static readonly "VISIBLE": integer
static readonly "INVISIBLE": integer
static readonly "GONE": integer
static readonly "SCROLLBARS_INSIDE_OVERLAY": integer
static readonly "SCROLLBARS_INSIDE_INSET": integer
static readonly "SCROLLBARS_OUTSIDE_OVERLAY": integer
static readonly "SCROLLBARS_OUTSIDE_INSET": integer
static readonly "SOUND_EFFECTS_ENABLED": integer
static readonly "HAPTIC_FEEDBACK_ENABLED": integer
static readonly "FOCUSABLES_ALL": integer
static readonly "FOCUSABLES_TOUCH_MODE": integer
static readonly "FOCUS_BACKWARD": integer
static readonly "FOCUS_FORWARD": integer
static readonly "FOCUS_LEFT": integer
static readonly "FOCUS_UP": integer
static readonly "FOCUS_RIGHT": integer
static readonly "FOCUS_DOWN": integer
static readonly "MEASURED_SIZE_MASK": integer
static readonly "MEASURED_STATE_MASK": integer
static readonly "MEASURED_HEIGHT_STATE_SHIFT": integer
static readonly "MEASURED_STATE_TOO_SMALL": integer
static readonly "LAYOUT_DIRECTION_UNDEFINED": integer
static readonly "LAYOUT_DIRECTION_LTR": integer
static readonly "LAYOUT_DIRECTION_RTL": integer
static readonly "LAYOUT_DIRECTION_INHERIT": integer
static readonly "LAYOUT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_INHERIT": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG": integer
static readonly "TEXT_DIRECTION_ANY_RTL": integer
static readonly "TEXT_DIRECTION_LTR": integer
static readonly "TEXT_DIRECTION_RTL": integer
static readonly "TEXT_DIRECTION_LOCALE": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_LTR": integer
static readonly "TEXT_DIRECTION_FIRST_STRONG_RTL": integer
static readonly "TEXT_ALIGNMENT_INHERIT": integer
static readonly "TEXT_ALIGNMENT_GRAVITY": integer
static readonly "TEXT_ALIGNMENT_TEXT_START": integer
static readonly "TEXT_ALIGNMENT_TEXT_END": integer
static readonly "TEXT_ALIGNMENT_CENTER": integer
static readonly "TEXT_ALIGNMENT_VIEW_START": integer
static readonly "TEXT_ALIGNMENT_VIEW_END": integer
static readonly "SCROLL_INDICATOR_TOP": integer
static readonly "SCROLL_INDICATOR_BOTTOM": integer
static readonly "SCROLL_INDICATOR_LEFT": integer
static readonly "SCROLL_INDICATOR_RIGHT": integer
static readonly "SCROLL_INDICATOR_START": integer
static readonly "SCROLL_INDICATOR_END": integer
static readonly "OVER_SCROLL_ALWAYS": integer
static readonly "OVER_SCROLL_IF_CONTENT_SCROLLS": integer
static readonly "OVER_SCROLL_NEVER": integer
static readonly "SCROLL_AXIS_NONE": integer
static readonly "SCROLL_AXIS_HORIZONTAL": integer
static readonly "SCROLL_AXIS_VERTICAL": integer
static readonly "TYPE_TOUCH": integer
static readonly "TYPE_NON_TOUCH": integer
static readonly "ALPHA": $FloatProperty<($View)>
static readonly "TRANSLATION_X": $FloatProperty<($View)>
static readonly "TRANSLATION_Y": $FloatProperty<($View)>
static readonly "TRANSLATION_Z": $FloatProperty<($View)>
static readonly "X": $FloatProperty<($View)>
static readonly "Y": $FloatProperty<($View)>
static readonly "Z": $FloatProperty<($View)>
static readonly "ROTATION": $FloatProperty<($View)>
static readonly "ROTATION_X": $FloatProperty<($View)>
static readonly "ROTATION_Y": $FloatProperty<($View)>
static readonly "SCALE_X": $FloatProperty<($View)>
static readonly "SCALE_Y": $FloatProperty<($View)>
static readonly "LEFT": $IntProperty<($View)>
static readonly "TOP": $IntProperty<($View)>
static readonly "RIGHT": $IntProperty<($View)>
static readonly "BOTTOM": $IntProperty<($View)>
static readonly "SCROLL_X": $IntProperty<($View)>
static readonly "SCROLL_Y": $IntProperty<($View)>

constructor(context: $Context$Type)

public "getMin"(): integer
public "getMax"(): integer
public "setMin"(min: integer): void
public "drawableHotspotChanged"(x: float, y: float): void
public "jumpDrawablesToCurrentState"(): void
public "getProgress"(): integer
public "onResolveDrawables"(layoutDirection: integer): void
public "isIndeterminate"(): boolean
public "setIndeterminate"(indeterminate: boolean): void
public "getMaximumWidth"(): integer
public "getMaximumHeight"(): integer
public "setMaximumWidth"(maxWidth: integer): void
public "setMaximumHeight"(maxHeight: integer): void
public "getCurrentDrawable"(): $Drawable
public "setMax"(max: integer): void
public "getIndeterminateDrawable"(): $Drawable
public "setIndeterminateDrawable"(d: $Drawable$Type): void
public "setIndeterminateTintList"(tint: $ColorStateList$Type): void
public "getIndeterminateTintList"(): $ColorStateList
public "incrementProgressBy"(diff: integer): void
public "getSecondaryProgressTintBlendMode"(): $BlendMode
public "getIndeterminateTintBlendMode"(): $BlendMode
public "getSecondaryProgressTintList"(): $ColorStateList
public "setSecondaryProgressTintBlendMode"(blendMode: $BlendMode$Type): void
public "getProgressBackgroundTintList"(): $ColorStateList
public "getProgressDrawable"(): $Drawable
public "getProgressTintBlendMode"(): $BlendMode
public "setSecondaryProgressTintList"(tint: $ColorStateList$Type): void
public "setProgressDrawable"(d: $Drawable$Type): void
public "setProgressTintBlendMode"(blendMode: $BlendMode$Type): void
public "incrementSecondaryProgressBy"(diff: integer): void
public "setIndeterminateTintBlendMode"(blendMode: $BlendMode$Type): void
public "setProgressTintList"(tint: $ColorStateList$Type): void
public "setProgressBackgroundTintList"(tint: $ColorStateList$Type): void
public "setSecondaryProgress"(secondaryProgress: integer): void
public "getProgressBackgroundTintBlendMode"(): $BlendMode
public "setProgressBackgroundTintBlendMode"(blendMode: $BlendMode$Type): void
public "getProgressTintList"(): $ColorStateList
public "getSecondaryProgress"(): integer
public "setProgress"(progress: integer): void
public "setProgress"(progress: integer, animate: boolean): void
get "min"(): integer
get "max"(): integer
set "min"(value: integer)
get "progress"(): integer
get "indeterminate"(): boolean
set "indeterminate"(value: boolean)
get "maximumWidth"(): integer
get "maximumHeight"(): integer
set "maximumWidth"(value: integer)
set "maximumHeight"(value: integer)
get "currentDrawable"(): $Drawable
set "max"(value: integer)
get "indeterminateDrawable"(): $Drawable
set "indeterminateDrawable"(value: $Drawable$Type)
set "indeterminateTintList"(value: $ColorStateList$Type)
get "indeterminateTintList"(): $ColorStateList
get "secondaryProgressTintBlendMode"(): $BlendMode
get "indeterminateTintBlendMode"(): $BlendMode
get "secondaryProgressTintList"(): $ColorStateList
set "secondaryProgressTintBlendMode"(value: $BlendMode$Type)
get "progressBackgroundTintList"(): $ColorStateList
get "progressDrawable"(): $Drawable
get "progressTintBlendMode"(): $BlendMode
set "secondaryProgressTintList"(value: $ColorStateList$Type)
set "progressDrawable"(value: $Drawable$Type)
set "progressTintBlendMode"(value: $BlendMode$Type)
set "indeterminateTintBlendMode"(value: $BlendMode$Type)
set "progressTintList"(value: $ColorStateList$Type)
set "progressBackgroundTintList"(value: $ColorStateList$Type)
set "secondaryProgress"(value: integer)
get "progressBackgroundTintBlendMode"(): $BlendMode
set "progressBackgroundTintBlendMode"(value: $BlendMode$Type)
get "progressTintList"(): $ColorStateList
get "secondaryProgress"(): integer
set "progress"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProgressBar$Type = ($ProgressBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProgressBar_ = $ProgressBar$Type;
}}
declare module "packages/icyllis/modernui/animation/$FloatKeyframeSet" {
import {$Keyframes$FloatKeyframes, $Keyframes$FloatKeyframes$Type} from "packages/icyllis/modernui/animation/$Keyframes$FloatKeyframes"
import {$KeyframeSet, $KeyframeSet$Type} from "packages/icyllis/modernui/animation/$KeyframeSet"

export class $FloatKeyframeSet extends $KeyframeSet implements $Keyframes$FloatKeyframes {


public "getFloatValue"(fraction: float): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FloatKeyframeSet$Type = ($FloatKeyframeSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FloatKeyframeSet_ = $FloatKeyframeSet$Type;
}}
declare module "packages/icyllis/modernui/util/$Parcelable$Creator" {
import {$Parcel, $Parcel$Type} from "packages/icyllis/modernui/util/$Parcel"

export interface $Parcelable$Creator<T> {

 "createFromParcel"(arg0: $Parcel$Type): T

(arg0: $Parcel$Type): T
}

export namespace $Parcelable$Creator {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Parcelable$Creator$Type<T> = ($Parcelable$Creator<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Parcelable$Creator_<T> = $Parcelable$Creator$Type<(T)>;
}}
declare module "packages/icyllis/modernui/graphics/drawable/$LevelListDrawable" {
import {$Drawable, $Drawable$Type} from "packages/icyllis/modernui/graphics/drawable/$Drawable"
import {$DrawableContainer, $DrawableContainer$Type} from "packages/icyllis/modernui/graphics/drawable/$DrawableContainer"

export class $LevelListDrawable extends $DrawableContainer {
static readonly "MAX_LEVEL": integer

constructor()

public "clearMutated"(): void
public "addLevel"(low: integer, high: integer, drawable: $Drawable$Type): void
public "mutate"(): $Drawable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LevelListDrawable$Type = ($LevelListDrawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LevelListDrawable_ = $LevelListDrawable$Type;
}}
declare module "packages/icyllis/modernui/text/style/$CharacterStyle" {
import {$TextPaint, $TextPaint$Type} from "packages/icyllis/modernui/text/$TextPaint"

export class $CharacterStyle {

constructor()

public static "wrap"(cs: $CharacterStyle$Type): $CharacterStyle
public "updateDrawState"(arg0: $TextPaint$Type): void
public "getUnderlying"(): $CharacterStyle
get "underlying"(): $CharacterStyle
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CharacterStyle$Type = ($CharacterStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CharacterStyle_ = $CharacterStyle$Type;
}}
declare module "packages/icyllis/modernui/transition/$Explode" {
import {$TransitionValues, $TransitionValues$Type} from "packages/icyllis/modernui/transition/$TransitionValues"
import {$Animator, $Animator$Type} from "packages/icyllis/modernui/animation/$Animator"
import {$Visibility, $Visibility$Type} from "packages/icyllis/modernui/transition/$Visibility"
import {$View, $View$Type} from "packages/icyllis/modernui/view/$View"
import {$ViewGroup, $ViewGroup$Type} from "packages/icyllis/modernui/view/$ViewGroup"

export class $Explode extends $Visibility {
static readonly "MODE_IN": integer
static readonly "MODE_OUT": integer
static readonly "MATCH_INSTANCE": integer
static readonly "MATCH_NAME": integer
static readonly "MATCH_ID": integer
static readonly "MATCH_ITEM_ID": integer

constructor()

public "onAppear"(sceneRoot: $ViewGroup$Type, view: $View$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "onDisappear"(sceneRoot: $ViewGroup$Type, view: $View$Type, startValues: $TransitionValues$Type, endValues: $TransitionValues$Type): $Animator
public "captureEndValues"(transitionValues: $TransitionValues$Type): void
public "captureStartValues"(transitionValues: $TransitionValues$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Explode$Type = ($Explode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Explode_ = $Explode$Type;
}}
declare module "packages/icyllis/modernui/graphics/text/$CharArrayIterator" {
import {$CharacterIterator, $CharacterIterator$Type} from "packages/java/text/$CharacterIterator"

export class $CharArrayIterator implements $CharacterIterator {

constructor(text: (character)[], start: integer, end: integer)
constructor(text: (character)[], start: integer)
constructor(text: (character)[])

public "clone"(): any
public "next"(): character
public "last"(): character
public "first"(): character
public "current"(): character
public "previous"(): character
public "getIndex"(): integer
public "getBeginIndex"(): integer
public "getEndIndex"(): integer
public "setIndex"(position: integer): character
get "index"(): integer
get "beginIndex"(): integer
get "endIndex"(): integer
set "index"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CharArrayIterator$Type = ($CharArrayIterator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CharArrayIterator_ = $CharArrayIterator$Type;
}}
declare module "packages/icyllis/modernui/widget/$OverScroller" {
import {$TimeInterpolator, $TimeInterpolator$Type} from "packages/icyllis/modernui/animation/$TimeInterpolator"

export class $OverScroller {

constructor(interpolator: $TimeInterpolator$Type, flywheel: boolean)
constructor(interpolator: $TimeInterpolator$Type)
constructor()

public "getDuration"(): integer
public "springBack"(startX: integer, startY: integer, minX: integer, maxX: integer, minY: integer, maxY: integer): boolean
public "abortAnimation"(): void
public "getCurrVelocity"(): float
public "startScroll"(startX: integer, startY: integer, dx: integer, dy: integer, duration: integer): void
public "startScroll"(startX: integer, startY: integer, dx: integer, dy: integer): void
public "getFinalY"(): integer
public "getCurrY"(): integer
public "getCurrX"(): integer
public "fling"(startX: integer, startY: integer, velocityX: integer, velocityY: integer, minX: integer, maxX: integer, minY: integer, maxY: integer): void
public "fling"(startX: integer, startY: integer, velocityX: integer, velocityY: integer, minX: integer, maxX: integer, minY: integer, maxY: integer, overX: integer, overY: integer): void
public "computeScrollOffset"(): boolean
public "getFinalX"(): integer
public "isFinished"(): boolean
public "getStartX"(): integer
public "getStartY"(): integer
public "setFinalX"(newX: integer): void
public "forceFinished"(finished: boolean): void
public "setFinalY"(newY: integer): void
public "isOverScrolled"(): boolean
public "timePassed"(): integer
public "notifyVerticalEdgeReached"(startY: integer, finalY: integer, overY: integer): void
public "notifyHorizontalEdgeReached"(startX: integer, finalX: integer, overX: integer): void
public "isScrollingInDirection"(xvel: float, yvel: float): boolean
public "setFriction"(friction: float): void
get "duration"(): integer
get "currVelocity"(): float
get "finalY"(): integer
get "currY"(): integer
get "currX"(): integer
get "finalX"(): integer
get "finished"(): boolean
get "startX"(): integer
get "startY"(): integer
set "finalX"(value: integer)
set "finalY"(value: integer)
get "overScrolled"(): boolean
set "friction"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OverScroller$Type = ($OverScroller);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OverScroller_ = $OverScroller$Type;
}}
declare module "packages/icyllis/modernui/lifecycle/$Lifecycle$Event" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Lifecycle$State, $Lifecycle$State$Type} from "packages/icyllis/modernui/lifecycle/$Lifecycle$State"

export class $Lifecycle$Event extends $Enum<($Lifecycle$Event)> {
static readonly "ON_CREATE": $Lifecycle$Event
static readonly "ON_START": $Lifecycle$Event
static readonly "ON_RESUME": $Lifecycle$Event
static readonly "ON_PAUSE": $Lifecycle$Event
static readonly "ON_STOP": $Lifecycle$Event
static readonly "ON_DESTROY": $Lifecycle$Event


public static "values"(): ($Lifecycle$Event)[]
public static "valueOf"(name: string): $Lifecycle$Event
public static "upTo"(state: $Lifecycle$State$Type): $Lifecycle$Event
public "getTargetState"(): $Lifecycle$State
public static "downTo"(state: $Lifecycle$State$Type): $Lifecycle$Event
public static "downFrom"(state: $Lifecycle$State$Type): $Lifecycle$Event
public static "upFrom"(state: $Lifecycle$State$Type): $Lifecycle$Event
get "targetState"(): $Lifecycle$State
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Lifecycle$Event$Type = (("on_pause") | ("on_start") | ("on_resume") | ("on_destroy") | ("on_stop") | ("on_create")) | ($Lifecycle$Event);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Lifecycle$Event_ = $Lifecycle$Event$Type;
}}
declare module "packages/icyllis/modernui/view/$VelocityTracker$Estimator" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $VelocityTracker$Estimator {
 "time": long
readonly "xCoeff": (float)[]
readonly "yCoeff": (float)[]
 "degree": integer
 "confidence": float

constructor()

public "clear"(): void
public "getXCoeff"(index: integer): float
public "getYCoeff"(index: integer): float
public "estimateX"(time: float): float
public "estimateY"(time: float): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VelocityTracker$Estimator$Type = ($VelocityTracker$Estimator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VelocityTracker$Estimator_ = $VelocityTracker$Estimator$Type;
}}
declare module "packages/icyllis/modernui/widget/$AbsListView$OnScrollListener" {
import {$AbsListView, $AbsListView$Type} from "packages/icyllis/modernui/widget/$AbsListView"

export interface $AbsListView$OnScrollListener {

 "onScroll"(arg0: $AbsListView$Type, arg1: integer, arg2: integer, arg3: integer): void
 "onScrollStateChanged"(arg0: $AbsListView$Type, arg1: integer): void
}

export namespace $AbsListView$OnScrollListener {
const SCROLL_STATE_IDLE: integer
const SCROLL_STATE_TOUCH_SCROLL: integer
const SCROLL_STATE_FLING: integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsListView$OnScrollListener$Type = ($AbsListView$OnScrollListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsListView$OnScrollListener_ = $AbsListView$OnScrollListener$Type;
}}
declare module "packages/icyllis/modernui/widget/$AbsListView$SelectionBoundsAdjuster" {
import {$Rect, $Rect$Type} from "packages/icyllis/modernui/graphics/$Rect"

export interface $AbsListView$SelectionBoundsAdjuster {

 "adjustListItemSelectionBounds"(arg0: $Rect$Type): void

(arg0: $Rect$Type): void
}

export namespace $AbsListView$SelectionBoundsAdjuster {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbsListView$SelectionBoundsAdjuster$Type = ($AbsListView$SelectionBoundsAdjuster);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbsListView$SelectionBoundsAdjuster_ = $AbsListView$SelectionBoundsAdjuster$Type;
}}
