declare module "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile$LoadPhase" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ConfigFile$LoadPhase extends $Enum<($ConfigFile$LoadPhase)> {
static readonly "NULL": $ConfigFile$LoadPhase
static readonly "SETUP": $ConfigFile$LoadPhase
static readonly "GAME_START": $ConfigFile$LoadPhase


public static "values"(): ($ConfigFile$LoadPhase)[]
public static "valueOf"(arg0: string): $ConfigFile$LoadPhase
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigFile$LoadPhase$Type = (("game_start") | ("null") | ("setup")) | ($ConfigFile$LoadPhase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigFile$LoadPhase_ = $ConfigFile$LoadPhase$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseSellerNobidNotification" {
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$AuctionHouseNotification, $AuctionHouseNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseNotification"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AuctionHouseSellerNobidNotification extends $AuctionHouseNotification {
static readonly "TYPE": $NotificationType<($AuctionHouseSellerNobidNotification)>

constructor(arg0: $AuctionTradeData$Type)

public "getMessage"(): $MutableComponent
get "message"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionHouseSellerNobidNotification$Type = ($AuctionHouseSellerNobidNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionHouseSellerNobidNotification_ = $AuctionHouseSellerNobidNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IBookTraderBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ITraderBlock, $ITraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$ITraderBlock"
import {$Quaternionf, $Quaternionf$Type} from "packages/org/joml/$Quaternionf"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IBookTraderBlock extends $ITraderBlock {

 "GetBookRenderPos"(arg0: integer, arg1: $BlockState$Type): $Vector3f
 "GetBookRenderRot"(arg0: integer, arg1: $BlockState$Type): $List<($Quaternionf)>
 "maxRenderIndex"(): integer
 "GetBookRenderScale"(arg0: integer, arg1: $BlockState$Type): float
 "getBlockEntity"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
 "getCapabilityBlockEntity"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $BlockEntity
 "canBreak"(arg0: $Player$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
 "getDropBlockItem"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
}

export namespace $IBookTraderBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBookTraderBlock$Type = ($IBookTraderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBookTraderBlock_ = $IBookTraderBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$EasyBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $EasyBlockEntity extends $BlockEntity implements $IClientTracker {
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "isClient"(): boolean
public "getUpdateTag"(): $CompoundTag
public "isServer"(): boolean
get "client"(): boolean
get "updateTag"(): $CompoundTag
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyBlockEntity$Type = ($EasyBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyBlockEntity_ = $EasyBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$CardDisplayBlock" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$TraderBlockRotatable, $TraderBlockRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockRotatable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IItemTraderBlock, $IItemTraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IItemTraderBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Color, $Color$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$Color"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $CardDisplayBlock extends $TraderBlockRotatable implements $IItemTraderBlock {
static readonly "TRADECOUNT": integer
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type, arg1: string, arg2: $Color$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getDescriptionId"(): string
public "traderType"(): $BlockEntityType<(any)>
public "validTraderTypes"(): $List<($BlockEntityType<(any)>)>
public "getItemPositionData"(): $ItemPositionData
public "getBlockEntity"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "descriptionId"(): string
get "itemPositionData"(): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CardDisplayBlock$Type = ($CardDisplayBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CardDisplayBlock_ = $CardDisplayBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$AlertData, $AlertData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$AlertData"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$DisplayData, $DisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"

export class $TradeRenderManager<T extends $TradeData> {
readonly "trade": T


public "renderAdditional"(arg0: $EasyWidget$Type, arg1: $EasyGuiGraphics$Type, arg2: $TradeContext$Type): void
public "getStockTooltip"(arg0: boolean, arg1: integer): $MutableComponent
public "getOutputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "arrowPosition"(arg0: $TradeContext$Type): $LazyOptional<($ScreenPosition)>
public "alertPosition"(arg0: $TradeContext$Type): $ScreenPosition
public "inputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "outputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "getAlertData"(arg0: $TradeContext$Type): $List<($AlertData)>
public "getInputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "tradeButtonWidth"(arg0: $TradeContext$Type): integer
public "getAdditionalTooltips"(arg0: $TradeContext$Type, arg1: integer, arg2: integer): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeRenderManager$Type<T> = ($TradeRenderManager<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeRenderManager_<T> = $TradeRenderManager$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/model/$ModelWallet" {
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ModelWallet<T extends $LivingEntity> extends $HumanoidModel<(T)> {
readonly "wallet": $ModelPart
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "setupAnim"(arg0: T, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelWallet$Type<T> = ($ModelWallet<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelWallet_<T> = $ModelWallet$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModItems" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$WalletItem, $WalletItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$WalletItem"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $ModItems {
static readonly "COIN_COPPER": $RegistryObject<($Item)>
static readonly "COIN_IRON": $RegistryObject<($Item)>
static readonly "COIN_GOLD": $RegistryObject<($Item)>
static readonly "COIN_EMERALD": $RegistryObject<($Item)>
static readonly "COIN_DIAMOND": $RegistryObject<($Item)>
static readonly "COIN_NETHERITE": $RegistryObject<($Item)>
static readonly "COIN_CHOCOLATE_COPPER": $RegistryObject<($Item)>
static readonly "COIN_CHOCOLATE_IRON": $RegistryObject<($Item)>
static readonly "COIN_CHOCOLATE_GOLD": $RegistryObject<($Item)>
static readonly "COIN_CHOCOLATE_EMERALD": $RegistryObject<($Item)>
static readonly "COIN_CHOCOLATE_DIAMOND": $RegistryObject<($Item)>
static readonly "COIN_CHOCOLATE_NETHERITE": $RegistryObject<($Item)>
static readonly "TRADING_CORE": $RegistryObject<($Item)>
static readonly "TICKET": $RegistryObject<($Item)>
static readonly "TICKET_PASS": $RegistryObject<($Item)>
static readonly "TICKET_MASTER": $RegistryObject<($Item)>
static readonly "TICKET_STUB": $RegistryObject<($Item)>
static readonly "GOLDEN_TICKET": $RegistryObject<($Item)>
static readonly "GOLDEN_TICKET_PASS": $RegistryObject<($Item)>
static readonly "GOLDEN_TICKET_MASTER": $RegistryObject<($Item)>
static readonly "GOLDEN_TICKET_STUB": $RegistryObject<($Item)>
static readonly "WALLET_COPPER": $RegistryObject<($WalletItem)>
static readonly "WALLET_IRON": $RegistryObject<($WalletItem)>
static readonly "WALLET_GOLD": $RegistryObject<($WalletItem)>
static readonly "WALLET_EMERALD": $RegistryObject<($WalletItem)>
static readonly "WALLET_DIAMOND": $RegistryObject<($WalletItem)>
static readonly "WALLET_NETHERITE": $RegistryObject<($WalletItem)>
static readonly "PORTABLE_TERMINAL": $RegistryObject<($Item)>
static readonly "PORTABLE_GEM_TERMINAL": $RegistryObject<($Item)>
static readonly "PORTABLE_ATM": $RegistryObject<($Item)>
static readonly "ITEM_CAPACITY_UPGRADE_1": $RegistryObject<($Item)>
static readonly "ITEM_CAPACITY_UPGRADE_2": $RegistryObject<($Item)>
static readonly "ITEM_CAPACITY_UPGRADE_3": $RegistryObject<($Item)>
static readonly "ITEM_CAPACITY_UPGRADE_4": $RegistryObject<($Item)>
static readonly "SPEED_UPGRADE_1": $RegistryObject<($Item)>
static readonly "SPEED_UPGRADE_2": $RegistryObject<($Item)>
static readonly "SPEED_UPGRADE_3": $RegistryObject<($Item)>
static readonly "SPEED_UPGRADE_4": $RegistryObject<($Item)>
static readonly "SPEED_UPGRADE_5": $RegistryObject<($Item)>
static readonly "NETWORK_UPGRADE": $RegistryObject<($Item)>
static readonly "HOPPER_UPGRADE": $RegistryObject<($Item)>
static readonly "COIN_CHEST_EXCHANGE_UPGRADE": $RegistryObject<($Item)>
static readonly "COIN_CHEST_MAGNET_UPGRADE_1": $RegistryObject<($Item)>
static readonly "COIN_CHEST_MAGNET_UPGRADE_2": $RegistryObject<($Item)>
static readonly "COIN_CHEST_MAGNET_UPGRADE_3": $RegistryObject<($Item)>
static readonly "COIN_CHEST_MAGNET_UPGRADE_4": $RegistryObject<($Item)>
static readonly "COIN_CHEST_SECURITY_UPGRADE": $RegistryObject<($Item)>
static readonly "UPGRADE_SMITHING_TEMPLATE": $RegistryObject<($Item)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModItems$Type = ($ModItems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModItems_ = $ModItems$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$IUpgradeable" {
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem"

export interface $IUpgradeable {

 "allowUpgrade"(arg0: $UpgradeItem$Type): boolean
 "allowUpgrade"(arg0: $UpgradeType$Type): boolean

(arg0: $UpgradeItem$Type): boolean
}

export namespace $IUpgradeable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IUpgradeable$Type = ($IUpgradeable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IUpgradeable_ = $IUpgradeable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorClientTab" {
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"
import {$TaxCollectorScreen, $TaxCollectorScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TaxCollectorScreen"

export class $TaxCollectorClientTab<T extends $TaxCollectorTab> extends $EasyTab {
readonly "screen": $TaxCollectorScreen
readonly "menu": $TaxCollectorMenu
readonly "commonTab": T


public "getEntry"(): $TaxEntry
public "getColor"(): integer
get "entry"(): $TaxEntry
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxCollectorClientTab$Type<T> = ($TaxCollectorClientTab<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxCollectorClientTab_<T> = $TaxCollectorClientTab$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab" {
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $TraderStorageClientTab<T extends $TraderStorageTab> extends $EasyTab {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T


public "getColor"(): integer
public "shouldRenderInventoryText"(): boolean
public "receiveServerMessage"(arg0: $LazyPacketData$Type): void
public "getTradeRuleTradeIndex"(): integer
public "tabButtonVisible"(): boolean
public "receiveSelfMessage"(arg0: $LazyPacketData$Type): void
get "color"(): integer
get "tradeRuleTradeIndex"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderStorageClientTab$Type<T> = ($TraderStorageClientTab<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderStorageClientTab_<T> = $TraderStorageClientTab$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/$LCResourcePacks" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$AddPackFindersEvent, $AddPackFindersEvent$Type} from "packages/net/minecraftforge/event/$AddPackFindersEvent"
import {$LCResourcePacks$CustomResourcePack, $LCResourcePacks$CustomResourcePack$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/$LCResourcePacks$CustomResourcePack"
import {$RegisterClientReloadListenersEvent, $RegisterClientReloadListenersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientReloadListenersEvent"

export class $LCResourcePacks {


public static "registerPackSource"(arg0: $AddPackFindersEvent$Type): void
public static "registerResourceListeners"(arg0: $RegisterClientReloadListenersEvent$Type): void
public static "registerPack"(arg0: string, arg1: string, arg2: $Component$Type): void
public static "registerPack"(arg0: $LCResourcePacks$CustomResourcePack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCResourcePacks$Type = ($LCResourcePacks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCResourcePacks_ = $LCResourcePacks$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$NotificationTab" {
import {$ATMScreen, $ATMScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$ATMScreen"
import {$ATMTab, $ATMTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$ATMTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$MoneyValueWidget, $MoneyValueWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/input/$MoneyValueWidget"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $NotificationTab extends $ATMTab {

constructor(arg0: $ATMScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "onValueChanged"(arg0: $MoneyValue$Type): void
public "onValueTypeChanged"(arg0: $MoneyValueWidget$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationTab$Type = ($NotificationTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationTab_ = $NotificationTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/data/$ItemData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ItemData {

constructor(arg0: $ItemStack$Type)
constructor(arg0: $ItemStack$Type, arg1: $MutableComponent$Type, arg2: string)
constructor(arg0: $ItemStack$Type, arg1: string)

public "getName"(): $MutableComponent
public static "load"(arg0: $CompoundTag$Type): $ItemData
public "matches"(arg0: $ItemData$Type): boolean
public static "format"(arg0: $ItemData$Type, arg1: $ItemData$Type): $MutableComponent
public "format"(): $MutableComponent
public "save"(): $CompoundTag
public static "getItemNames"(arg0: $List$Type<($ItemData$Type)>): $Component
public "formatWith"(arg0: $MutableComponent$Type): $MutableComponent
public "formatWith"(arg0: $ItemData$Type): $MutableComponent
get "name"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemData$Type = ($ItemData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemData_ = $ItemData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/taxes/data/$TaxStats" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ITaxable, $ITaxable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxable"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"
import {$TaxableReference, $TaxableReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxableReference"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MoneyStorage, $MoneyStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage"

export class $TaxStats {

constructor(arg0: $TaxEntry$Type)

public "getUniqueTaxableCount"(): integer
public "getMostTaxed"(): $TaxableReference
public "getMostTaxedCount"(): integer
public "getTotalCollected"(): $MoneyStorage
public "removeInvalidData"(): void
public "load"(arg0: $CompoundTag$Type): void
public "clear"(): void
public "save"(): $CompoundTag
public "OnTaxesCollected"(arg0: $ITaxable$Type, arg1: $MoneyValue$Type): void
public "markDirty"(): void
get "uniqueTaxableCount"(): integer
get "mostTaxed"(): $TaxableReference
get "mostTaxedCount"(): integer
get "totalCollected"(): $MoneyStorage
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxStats$Type = ($TaxStats);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxStats_ = $TaxStats$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/$EasyText" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $EasyText {

constructor()

public static "empty"(): $MutableComponent
public static "literal"(arg0: string): $MutableComponent
public static "translatable"(arg0: string, ...arg1: (any)[]): $MutableComponent
public static "sendMessage"(arg0: $Player$Type, arg1: $Component$Type): void
public static "sendCommandSucess"(arg0: $CommandSourceStack$Type, arg1: $Component$Type, arg2: boolean): void
public static "sendCommandFail"(arg0: $CommandSourceStack$Type, arg1: $Component$Type): void
public static "makeMutable"(arg0: $Component$Type): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyText$Type = ($EasyText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyText_ = $EasyText$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/core/$AllyTab" {
import {$TraderSettingsTab, $TraderSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $AllyTab extends $SettingsSubTab {
readonly "parent": $TraderSettingsClientTab
readonly "commonTab": $TraderSettingsTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderSettingsClientTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "canOpen"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AllyTab$Type = ($AllyTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AllyTab_ = $AllyTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/tab/$ITab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export interface $ITab {

 "getIcon"(): $IconData
 "getTooltip"(): $Component
 "getColor"(): integer
}

export namespace $ITab {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITab$Type = ($ITab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITab_ = $ITab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamSelectionTab" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$TeamTab, $TeamTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamTab"
import {$TeamManagerScreen, $TeamManagerScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$TeamManagerScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TeamSelectionTab extends $TeamTab {

constructor(arg0: $TeamManagerScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $MutableComponent
public "allowViewing"(arg0: $Player$Type, arg1: $Team$Type): boolean
get "icon"(): $IconData
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamSelectionTab$Type = ($TeamSelectionTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamSelectionTab_ = $TeamSelectionTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamStatsTab" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$TeamTab, $TeamTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamTab"
import {$TeamManagerScreen, $TeamManagerScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$TeamManagerScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $TeamStatsTab extends $TeamTab implements $IScrollable {

constructor(arg0: $TeamManagerScreen$Type)

public "tick"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
public "allowViewing"(arg0: $Player$Type, arg1: $Team$Type): boolean
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "icon"(): $IconData
get "tooltip"(): $Component
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamStatsTab$Type = ($TeamStatsTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamStatsTab_ = $TeamStatsTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$OwnershipTab" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $OwnershipTab extends $TaxCollectorTab {
readonly "menu": $TaxCollectorMenu

constructor(arg0: $TaxCollectorMenu$Type)

public "canBeAccessed"(): boolean
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "SetOwner"(arg0: $Owner$Type): void
public "SetOwnerPlayer"(arg0: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnershipTab$Type = ($OwnershipTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnershipTab_ = $OwnershipTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$ChainDataReloadedEvent$Pre" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$ChainDataReloadedEvent, $ChainDataReloadedEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$ChainDataReloadedEvent"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ChainDataReloadedEvent$Pre extends $ChainDataReloadedEvent {

constructor()
constructor(arg0: $Map$Type<(string), ($ChainData$Type)>)

public "addEntry"(arg0: $ChainData$Type, arg1: boolean): void
public "addEntry"(arg0: $ChainData$Type): void
public "removeEntry"(arg0: string): void
public "getChainMap"(): $Map<(string), ($ChainData)>
public "getListenerList"(): $ListenerList
get "chainMap"(): $Map<(string), ($ChainData)>
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainDataReloadedEvent$Pre$Type = ($ChainDataReloadedEvent$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainDataReloadedEvent$Pre_ = $ChainDataReloadedEvent$Pre$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/source/builtin/$TeamBankAccountSource" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$BankAccountSource, $BankAccountSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/source/$BankAccountSource"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"

export class $TeamBankAccountSource extends $BankAccountSource {
static readonly "INSTANCE": $BankAccountSource


public "CollectAllReferences"(arg0: boolean): $List<($BankReference)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamBankAccountSource$Type = ($TeamBankAccountSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamBankAccountSource_ = $TeamBankAccountSource$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$PlayerTradeScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$PlayerTradeMenu, $PlayerTradeMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$PlayerTradeMenu"

export class $PlayerTradeScreen extends $EasyMenuScreen<($PlayerTradeMenu)> implements $IScrollable {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "GUI_CHAT_TEXTURE": $ResourceLocation
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $PlayerTradeMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerTradeScreen$Type = ($PlayerTradeScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerTradeScreen_ = $PlayerTradeScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $PotentialOwner implements $IClientTracker {


public "getName"(): $MutableComponent
public "getPriority"(): integer
public "flagAsHighPriority"(): void
public "isClient"(): boolean
public "addPriority"(arg0: integer): void
public "getIcon"(): $IconData
public "flagAsClient"(): void
public "appendTooltip"(arg0: $List$Type<($Component$Type)>): void
public "sortingPriority"(): integer
public "asOwner"(): $Owner
public "failedFilter"(arg0: string): boolean
public "setAsCurrentOwner"(arg0: boolean): void
public "isServer"(): boolean
get "name"(): $MutableComponent
get "priority"(): integer
get "client"(): boolean
get "icon"(): $IconData
set "asCurrentOwner"(value: boolean)
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotentialOwner$Type = ($PotentialOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotentialOwner_ = $PotentialOwner$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$EnumUtil" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $EnumUtil {

constructor()

public static "enumFromString"<T extends $Enum<(any)>>(arg0: string, arg1: (T)[], arg2: T): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnumUtil$Type = ($EnumUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnumUtil_ = $EnumUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PostTradeEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$TradeEvent, $TradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent"

export class $TradeEvent$PostTradeEvent extends $TradeEvent {

constructor(arg0: $TradeData$Type, arg1: $TradeContext$Type, arg2: $MoneyValue$Type, arg3: $MoneyValue$Type)
constructor()

public "clean"(): void
public "isDirty"(): boolean
public "getPricePaid"(): $MoneyValue
public "getTaxesPaid"(): $MoneyValue
public "markDirty"(): void
public "getListenerList"(): $ListenerList
get "dirty"(): boolean
get "pricePaid"(): $MoneyValue
get "taxesPaid"(): $MoneyValue
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeEvent$PostTradeEvent$Type = ($TradeEvent$PostTradeEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeEvent$PostTradeEvent_ = $TradeEvent$PostTradeEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IEasyScreen" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export interface $IEasyScreen {

 "blockInventoryClosing"(): boolean
 "getArea"(): $ScreenArea
 "getCorner"(): $ScreenPosition
 "getPlayer"(): $Player
 "addChild"<W>(arg0: W): W
 "removeChild"(arg0: any): void
 "getFont"(): $Font
 "getGuiLeft"(): integer
 "getGuiTop"(): integer
 "getXSize"(): integer
 "getYSize"(): integer
}

export namespace $IEasyScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IEasyScreen$Type = ($IEasyScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IEasyScreen_ = $IEasyScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/config/$MoneyValueConfig" {
import {$ModConfigEvent, $ModConfigEvent$Type} from "packages/net/minecraftforge/fml/event/config/$ModConfigEvent"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$ForgeConfigSpec$Builder, $ForgeConfigSpec$Builder$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$Builder"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $MoneyValueConfig implements $Supplier<($MoneyValue)> {


public "get"(): $MoneyValue
public static "define"(arg0: $ForgeConfigSpec$Builder$Type, arg1: string, arg2: string, arg3: $Supplier$Type<($MoneyValue$Type)>, arg4: $Supplier$Type<($ForgeConfigSpec$Type)>): $MoneyValueConfig
public static "define"(arg0: $ForgeConfigSpec$Builder$Type, arg1: string, arg2: string, arg3: $MoneyValue$Type, arg4: $Supplier$Type<($ForgeConfigSpec$Type)>): $MoneyValueConfig
public "onConfigReloaded"(arg0: $ModConfigEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyValueConfig$Type = ($MoneyValueConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyValueConfig_ = $MoneyValueConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/discord/data/$CurrencyBotSaveData" {
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"

export class $CurrencyBotSaveData extends $SavedData {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurrencyBotSaveData$Type = ($CurrencyBotSaveData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurrencyBotSaveData_ = $CurrencyBotSaveData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/$ModCreativeGroups" {
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BundleRequestFilter, $BundleRequestFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$BundleRequestFilter"
import {$RegistryObjectBundle, $RegistryObjectBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBundle"
import {$CreativeModeTab$Output, $CreativeModeTab$Output$Type} from "packages/net/minecraft/world/item/$CreativeModeTab$Output"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$RegistryObjectBiBundle, $RegistryObjectBiBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBiBundle"
import {$BuildCreativeModeTabContentsEvent, $BuildCreativeModeTabContentsEvent$Type} from "packages/net/minecraftforge/event/$BuildCreativeModeTabContentsEvent"

export class $ModCreativeGroups {
static readonly "COIN_GROUP_ID": $ResourceLocation
static readonly "MACHINE_GROUP_ID": $ResourceLocation
static readonly "TRADER_GROUP_ID": $ResourceLocation
static readonly "UPGRADE_GROUP_ID": $ResourceLocation
static readonly "EXTRA_GROUP_ID": $ResourceLocation
static readonly "COIN_GROUP": $RegistryObject<($CreativeModeTab)>
static readonly "MACHINE_GROUP": $RegistryObject<($CreativeModeTab)>
static readonly "TRADER_GROUP": $RegistryObject<($CreativeModeTab)>
static readonly "UPGRADE_GROUP": $RegistryObject<($CreativeModeTab)>
static "EXTRA_GROUP": $RegistryObject<($CreativeModeTab)>

constructor()

public static "init"(): void
public static "ezPop"(arg0: $CreativeModeTab$Output$Type, arg1: $RegistryObjectBiBundle$Type<(any), (any), (any)>, arg2: $BundleRequestFilter$Type): void
public static "ezPop"(arg0: $CreativeModeTab$Output$Type, arg1: $RegistryObjectBundle$Type<(any), (any)>): void
public static "ezPop"(arg0: $CreativeModeTab$Output$Type, arg1: $RegistryObject$Type<(any)>): void
public static "ezPop"(arg0: $CreativeModeTab$Output$Type, arg1: $RegistryObjectBiBundle$Type<(any), (any), (any)>): void
public static "ezPop"(arg0: $CreativeModeTab$Output$Type, arg1: $RegistryObjectBundle$Type<(any), (any)>, arg2: $BundleRequestFilter$Type): void
public static "buildVanillaTabContents"(arg0: $BuildCreativeModeTabContentsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModCreativeGroups$Type = ($ModCreativeGroups);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModCreativeGroups_ = $ModCreativeGroups$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $IDumpable {

 "getName"(): $MutableComponent
 "getOwner"(): $OwnerData
 "getContents"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: boolean): $List<($ItemStack)>
}

export namespace $IDumpable {
function preCollected(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IDumpable$Type = ($IDumpable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IDumpable_ = $IDumpable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$PriceFluctuation" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$PriceTweakingTradeRule, $PriceTweakingTradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$PriceTweakingTradeRule"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$TradeEvent$TradeCostEvent, $TradeEvent$TradeCostEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$TradeCostEvent"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"

export class $PriceFluctuation extends $PriceTweakingTradeRule {
static readonly "TYPE": $TradeRuleType<($PriceFluctuation)>
readonly "type": $TradeRuleType<(any)>

constructor()

public "getDuration"(): long
public "createTab"(arg0: $TradeRulesClientTab$Type<(any)>): $TradeRulesClientSubTab
public "getFluctuation"(): integer
public "setFluctuation"(arg0: integer): void
public "loadPersistentData"(arg0: $CompoundTag$Type): void
public "savePersistentData"(): $CompoundTag
public "saveToJson"(arg0: $JsonObject$Type): $JsonObject
public "tradeCost"(arg0: $TradeEvent$TradeCostEvent$Type): void
public "loadFromJson"(arg0: $JsonObject$Type): void
public "setDuration"(arg0: long): void
get "duration"(): long
get "fluctuation"(): integer
set "fluctuation"(value: integer)
set "duration"(value: long)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PriceFluctuation$Type = ($PriceFluctuation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PriceFluctuation_ = $PriceFluctuation$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/curios/$LCCurios" {
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $LCCurios {
static readonly "WALLET_SLOT": string

constructor()

public static "getCuriosWalletContents"(arg0: $LivingEntity$Type): $ItemStack
public static "getCuriosWalletVisibility"(arg0: $LivingEntity$Type): boolean
public static "setCuriosWalletContents"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type): void
public static "hasPortableTerminal"(arg0: $LivingEntity$Type): boolean
public static "hasPortableATM"(arg0: $LivingEntity$Type): boolean
public static "hasWalletSlot"(arg0: $LivingEntity$Type): boolean
public static "getMoneyMendingItem"(arg0: $LivingEntity$Type): $ItemStack
public static "createWalletProvider"(arg0: $ItemStack$Type): $ICapabilityProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCCurios$Type = ($LCCurios);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCCurios_ = $LCCurios$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EasyButton extends $EasyWidget {
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer


public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public static "playClick"(arg0: $SoundManager$Type): void
public "onClick"(arg0: double, arg1: double): void
public "playDownSound"(arg0: $SoundManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyButton$Type = ($EasyButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyButton_ = $EasyButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData$Builder" {
import {$CoinInputType, $CoinInputType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$CoinInputType"
import {$BuildDefaultMoneyDataEvent, $BuildDefaultMoneyDataEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$BuildDefaultMoneyDataEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$ChainData$Builder$ChainBuilder, $ChainData$Builder$ChainBuilder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData$Builder$ChainBuilder"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ValueDisplayData, $ValueDisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplayData"
import {$ATMData$Builder, $ATMData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMData$Builder"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $ChainData$Builder {
readonly "chain": string


public "apply"(arg0: $BuildDefaultMoneyDataEvent$Type): void
public "apply"(arg0: $BuildDefaultMoneyDataEvent$Type, arg1: boolean): void
public "build"(): $ChainData
public "atmBuilder"(): $ATMData$Builder
public "withSideChain"(arg0: $RegistryObject$Type<(any)>, arg1: integer, arg2: $RegistryObject$Type<(any)>): $ChainData$Builder$ChainBuilder
public "withSideChain"(arg0: $ItemLike$Type, arg1: integer, arg2: $ItemLike$Type): $ChainData$Builder$ChainBuilder
public "withCoreChain"(arg0: $ItemLike$Type): $ChainData$Builder$ChainBuilder
public "withCoreChain"(arg0: $RegistryObject$Type<(any)>): $ChainData$Builder$ChainBuilder
public "withInputType"(arg0: $CoinInputType$Type): $ChainData$Builder
public "withDisplay"(arg0: $ValueDisplayData$Type): $ChainData$Builder
public "asEvent"(): $ChainData$Builder
public "getSideChains"(): $List<($ChainData$Builder$ChainBuilder)>
public "getCoreChain"(): $ChainData$Builder$ChainBuilder
public static "getLatest"(): $ChainData$Builder
get "sideChains"(): $List<($ChainData$Builder$ChainBuilder)>
get "coreChain"(): $ChainData$Builder$ChainBuilder
get "latest"(): $ChainData$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainData$Builder$Type = ($ChainData$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainData$Builder_ = $ChainData$Builder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntryBiBundle" {
import {$TextEntry, $TextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry"
import {$TriConsumer, $TriConsumer$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TriConsumer"
import {$RegistryObjectBiBundle, $RegistryObjectBiBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBiBundle"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TextEntryBiBundle<S, T> {

constructor(arg0: $Map$Type<(S), ($Map$Type<(T), ($TextEntry$Type)>)>)

public "get"(arg0: S, arg1: T): $TextEntry
public static "of"<S, T>(arg0: $RegistryObjectBiBundle$Type<(any), (S), (T)>): $TextEntryBiBundle<(S), (T)>
public "forEach"(arg0: $TriConsumer$Type<(S), (T), ($TextEntry$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEntryBiBundle$Type<S, T> = ($TextEntryBiBundle<(S), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEntryBiBundle_<S, T> = $TextEntryBiBundle$Type<(S), (T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$CapacityUpgradeItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$CapacityUpgrade, $CapacityUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/capacity/$CapacityUpgrade"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CapacityUpgradeItem extends $UpgradeItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $CapacityUpgrade$Type, arg1: integer, arg2: $Item$Properties$Type)
constructor(arg0: $CapacityUpgrade$Type, arg1: $Supplier$Type<(integer)>, arg2: $Item$Properties$Type)

public "fillUpgradeData"(arg0: $UpgradeData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapacityUpgradeItem$Type = ($CapacityUpgradeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapacityUpgradeItem_ = $CapacityUpgradeItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/auction/$AuctionStorageTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $AuctionStorageTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "collectCoins"(): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "clickedOnSlot"(arg0: integer, arg1: boolean): void
public "quickTransfer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionStorageTab$Type = ($AuctionStorageTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionStorageTab_ = $AuctionStorageTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/$LCItemRenderer" {
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $LCItemRenderer extends $BlockEntityWithoutLevelRenderer {
static readonly "INSTANCE": $Supplier<($BlockEntityWithoutLevelRenderer)>
static readonly "USE_LC_RENDERER": $IClientItemExtensions


public static "registerBlockEntitySource"(arg0: $Function$Type<($Block$Type), ($BlockEntity$Type)>): void
public "renderByItem"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCItemRenderer$Type = ($LCItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCItemRenderer_ = $LCItemRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/claiming/bonus_data/$LCBonusClaimData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $LCBonusClaimData extends $SavedData {


public "save"(arg0: $CompoundTag$Type): $CompoundTag
public static "addBonusClaimsFor"(arg0: $Player$Type, arg1: integer): void
public static "getBonusClaimsFor"(arg0: $Player$Type): integer
public static "addBonusChunkLoadsFor"(arg0: $Player$Type, arg1: integer): void
public static "getBonusChunkLoadsFor"(arg0: $Player$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCBonusClaimData$Type = ($LCBonusClaimData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCBonusClaimData_ = $LCBonusClaimData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/providers/$WalletMenuProvider" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $WalletMenuProvider implements $MenuProvider {

constructor(arg0: integer)

public "getDisplayName"(): $Component
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletMenuProvider$Type = ($WalletMenuProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletMenuProvider_ = $WalletMenuProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/handler/$ItemInterfaceHandler" {
import {$TraderItemStorage, $TraderItemStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$ConfigurableSidedHandler, $ConfigurableSidedHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/handlers/$ConfigurableSidedHandler"
import {$ItemTraderInterfaceBlockEntity, $ItemTraderInterfaceBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$ItemTraderInterfaceBlockEntity"

export class $ItemInterfaceHandler extends $ConfigurableSidedHandler<($IItemHandler)> {
static readonly "TYPE": $ResourceLocation

constructor(arg0: $ItemTraderInterfaceBlockEntity$Type, arg1: $Supplier$Type<($TraderItemStorage$Type)>)

public "getType"(): $ResourceLocation
public "getTag"(): string
get "type"(): $ResourceLocation
get "tag"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemInterfaceHandler$Type = ($ItemInterfaceHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemInterfaceHandler_ = $ItemInterfaceHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$ColorArgument" {
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$ArgumentType, $ArgumentType$Type} from "packages/com/mojang/brigadier/arguments/$ArgumentType"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $ColorArgument implements $ArgumentType<(integer)> {


public static "argument"(): $ColorArgument
public "parse"(arg0: $StringReader$Type): integer
public "getExamples"(): $Collection<(string)>
public "listSuggestions"<S>(arg0: $CommandContext$Type<(S)>, arg1: $SuggestionsBuilder$Type): $CompletableFuture<($Suggestions)>
public static "getColor"(arg0: $CommandContext$Type<($CommandSourceStack$Type)>, arg1: string): integer
get "examples"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorArgument$Type = ($ColorArgument);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorArgument_ = $ColorArgument$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$CommandLoader" {
import {$RegisterCommandsEvent, $RegisterCommandsEvent$Type} from "packages/net/minecraftforge/event/$RegisterCommandsEvent"

export class $CommandLoader {

constructor()

public static "onCommandLoading"(arg0: $RegisterCommandsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandLoader$Type = ($CommandLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandLoader_ = $CommandLoader$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/wallet/$CPacketOpenWallet" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketOpenWallet extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketOpenWallet)>

constructor(arg0: integer)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketOpenWallet$Type = ($CPacketOpenWallet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketOpenWallet_ = $CPacketOpenWallet$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyViewer$Slave" {
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"

export class $MoneyViewer$Slave implements $IMoneyViewer {

constructor()

public "flagAsKnown"(arg0: any): void
public "forgetContext"(arg0: any): void
public "hasStoredMoneyChanged"(arg0: any): boolean
public "getStoredMoney"(): $MoneyView
get "storedMoney"(): $MoneyView
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyViewer$Slave$Type = ($MoneyViewer$Slave);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyViewer$Slave_ = $MoneyViewer$Slave$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMouseListener {

 "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
 "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean

(arg0: double, arg1: double, arg2: integer): boolean
}

export namespace $IMouseListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMouseListener$Type = ($IMouseListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMouseListener_ = $IMouseListener$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/terminal/filters/$ItemTraderSearchFilter" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$ITraderSearchFilter, $ITraderSearchFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/terminal/$ITraderSearchFilter"

export class $ItemTraderSearchFilter implements $ITraderSearchFilter {

constructor()

public "filter"(arg0: $TraderData$Type, arg1: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTraderSearchFilter$Type = ($ItemTraderSearchFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTraderSearchFilter_ = $ItemTraderSearchFilter$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/wallet/$WalletMenuBase" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$EasyMenu, $EasyMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$EasyMenu"

export class $WalletMenuBase extends $EasyMenu {
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public "getSlotCount"(): integer
public "isEquippedWallet"(): boolean
public "PickupCoins"(arg0: $ItemStack$Type): $ItemStack
public static "OnWalletUpdated"(arg0: $Entity$Type): void
public "getWallet"(): $ItemStack
public "getPlayer"(): $Player
public "canPickup"(): boolean
public "hasBankAccess"(): boolean
public "saveWalletContents"(): void
public "canExchange"(): boolean
public "ExchangeCoints"(): void
public "ToggleAutoExchange"(): void
public "getRowCount"(): integer
public static "getMaxWalletSlots"(): integer
public "hasWallet"(): boolean
public "validateHasWallet"(): boolean
public static "SafeOpenWallet"(arg0: $ServerPlayer$Type, arg1: integer, arg2: $MenuProvider$Type): void
public static "SafeOpenWallet"(arg0: $ServerPlayer$Type, arg1: integer, arg2: $MenuProvider$Type, arg3: $Consumer$Type<($FriendlyByteBuf$Type)>): void
public "getWalletStackIndex"(): integer
public "reloadWalletContents"(): void
public static "SafeOpenWalletBankMenu"(arg0: $ServerPlayer$Type, arg1: integer): void
public static "SafeOpenWalletMenu"(arg0: $ServerPlayer$Type, arg1: integer): void
public "getAutoExchange"(): boolean
public static "updateMaxWalletSlots"(arg0: integer): void
get "slotCount"(): integer
get "equippedWallet"(): boolean
get "wallet"(): $ItemStack
get "player"(): $Player
get "rowCount"(): integer
get "maxWalletSlots"(): integer
get "walletStackIndex"(): integer
get "autoExchange"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletMenuBase$Type = ($WalletMenuBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletMenuBase_ = $WalletMenuBase$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderinterface/$OwnershipClientTab" {
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$OwnershipTab, $OwnershipTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/base/$OwnershipTab"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $OwnershipClientTab extends $TraderInterfaceClientTab<($OwnershipTab)> {
readonly "commonTab": T

constructor(arg0: $TraderInterfaceScreen$Type, arg1: $OwnershipTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnershipClientTab$Type = ($OwnershipClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnershipClientTab_ = $OwnershipClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/walletslot/$SPacketSyncWallet" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncWallet extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncWallet)>

constructor(arg0: integer, arg1: $ItemStack$Type, arg2: boolean)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncWallet$Type = ($SPacketSyncWallet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncWallet_ = $SPacketSyncWallet$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/ticket/$TicketMaterialSlot" {
import {$TicketStationMenu, $TicketStationMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TicketStationMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $TicketMaterialSlot extends $Slot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $TicketStationMenu$Type, arg1: $Container$Type, arg2: integer, arg3: integer, arg4: integer)

public "mayPlace"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketMaterialSlot$Type = ($TicketMaterialSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketMaterialSlot_ = $TicketMaterialSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeSettingNotification$Simple" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$ChangeSettingNotification, $ChangeSettingNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeSettingNotification"
import {$ChangeSettingNotification$Advanced, $ChangeSettingNotification$Advanced$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeSettingNotification$Advanced"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ChangeSettingNotification$Simple extends $ChangeSettingNotification {
static readonly "ADVANCED_TYPE": $NotificationType<($ChangeSettingNotification$Advanced)>
static readonly "SIMPLE_TYPE": $NotificationType<($ChangeSettingNotification$Simple)>

constructor(arg0: $PlayerReference$Type, arg1: string, arg2: string)

public "getMessage"(): $MutableComponent
get "message"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeSettingNotification$Simple$Type = ($ChangeSettingNotification$Simple);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeSettingNotification$Simple_ = $ChangeSettingNotification$Simple$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/entries/$ConfigLoot" {
import {$LootItemFunction, $LootItemFunction$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunction"
import {$LootPoolSingletonContainer$Builder, $LootPoolSingletonContainer$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolSingletonContainer$Builder"
import {$ConfigItemTier, $ConfigItemTier$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/$ConfigItemTier"
import {$LootPoolEntryType, $LootPoolEntryType$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolEntryType"
import {$LootPoolSingletonContainer, $LootPoolSingletonContainer$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolSingletonContainer"

export class $ConfigLoot extends $LootPoolSingletonContainer {
static readonly "DEFAULT_WEIGHT": integer
static readonly "DEFAULT_QUALITY": integer
readonly "weight": integer
readonly "functions": ($LootItemFunction)[]


public "getType"(): $LootPoolEntryType
public static "lootTableTier"(arg0: $ConfigItemTier$Type): $LootPoolSingletonContainer$Builder<(any)>
get "type"(): $LootPoolEntryType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigLoot$Type = ($ConfigLoot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigLoot_ = $ConfigLoot$Type;
}}
declare module "packages/io/github/steveplays28/noisium/forge/$NoisiumForge" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $NoisiumForge {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoisiumForge$Type = ($NoisiumForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoisiumForge_ = $NoisiumForge$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/ticket/$TicketModifierSlot" {
import {$TicketStationMenu, $TicketStationMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TicketStationMenu"
import {$EasyMultiBGSlot, $EasyMultiBGSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/easy/$EasyMultiBGSlot"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Color, $Color$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$Color"

export class $TicketModifierSlot extends $EasyMultiBGSlot {
static readonly "EMPTY_DYE_SLOT": $ResourceLocation
static readonly "EMPTY_SLOT_BG": $ResourceLocation
static readonly "BACKGROUND": $Pair<($ResourceLocation), ($ResourceLocation)>
 "active": boolean
 "locked": boolean
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $TicketStationMenu$Type, arg1: $Container$Type, arg2: integer, arg3: integer, arg4: integer)

public static "getColorFromDye"(arg0: $ItemStack$Type): $Color
public "mayPlace"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketModifierSlot$Type = ($TicketModifierSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketModifierSlot_ = $TicketModifierSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$TicketStationBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$RotatableBlock, $RotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $TicketStationBlock extends $RotatableBlock implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getMenuProvider"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $MenuProvider
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketStationBlock$Type = ($TicketStationBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketStationBlock_ = $TicketStationBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$TextRenderUtil$TextFormatting$Centering" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $TextRenderUtil$TextFormatting$Centering extends $Enum<($TextRenderUtil$TextFormatting$Centering)> {
static readonly "TOP_LEFT": $TextRenderUtil$TextFormatting$Centering
static readonly "TOP_CENTER": $TextRenderUtil$TextFormatting$Centering
static readonly "TOP_RIGHT": $TextRenderUtil$TextFormatting$Centering
static readonly "MIDDLE_LEFT": $TextRenderUtil$TextFormatting$Centering
static readonly "MIDDLE_CENTER": $TextRenderUtil$TextFormatting$Centering
static readonly "MIDDLE_RIGHT": $TextRenderUtil$TextFormatting$Centering
static readonly "BOTTOM_LEFT": $TextRenderUtil$TextFormatting$Centering
static readonly "BOTTOM_CENTER": $TextRenderUtil$TextFormatting$Centering
static readonly "BOTTOM_RIGHT": $TextRenderUtil$TextFormatting$Centering


public "isMiddle"(): boolean
public static "values"(): ($TextRenderUtil$TextFormatting$Centering)[]
public static "valueOf"(arg0: string): $TextRenderUtil$TextFormatting$Centering
public "isTop"(): boolean
public "isRight"(): boolean
public "isLeft"(): boolean
public "isBottom"(): boolean
public "isCenter"(): boolean
public "makeLeft"(): $TextRenderUtil$TextFormatting$Centering
public "makeMiddle"(): $TextRenderUtil$TextFormatting$Centering
public "makeTop"(): $TextRenderUtil$TextFormatting$Centering
public "makeCenter"(): $TextRenderUtil$TextFormatting$Centering
public "makeRight"(): $TextRenderUtil$TextFormatting$Centering
public "makeBottom"(): $TextRenderUtil$TextFormatting$Centering
get "middle"(): boolean
get "top"(): boolean
get "right"(): boolean
get "left"(): boolean
get "bottom"(): boolean
get "center"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextRenderUtil$TextFormatting$Centering$Type = (("top_right") | ("top_center") | ("middle_right") | ("top_left") | ("middle_left") | ("bottom_right") | ("middle_center") | ("bottom_left") | ("bottom_center")) | ($TextRenderUtil$TextFormatting$Centering);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextRenderUtil$TextFormatting$Centering_ = $TextRenderUtil$TextFormatting$Centering$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/slot_machine/$SlotMachineStorageTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $SlotMachineStorageTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "getSlots"(): $List<(any)>
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "clickedOnSlot"(arg0: integer, arg1: boolean, arg2: boolean): void
public "quickTransfer"(arg0: integer): void
public "quickMoveStack"(arg0: $ItemStack$Type): boolean
get "slots"(): $List<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineStorageTab$Type = ($SlotMachineStorageTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineStorageTab_ = $SlotMachineStorageTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$ItemStackHelper" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ItemStackHelper {

constructor()

public static "loadAllItems"(arg0: string, arg1: $CompoundTag$Type, arg2: $NonNullList$Type<($ItemStack$Type)>): void
public static "saveAllItems"(arg0: string, arg1: $CompoundTag$Type, arg2: $NonNullList$Type<($ItemStack$Type)>): $CompoundTag
public static "TagEquals"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public static "skullForPlayer"(arg0: string): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemStackHelper$Type = ($ItemStackHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemStackHelper_ = $ItemStackHelper$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/advancements/date/$DatePredicate" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$LocalDate, $LocalDate$Type} from "packages/java/time/$LocalDate"

export class $DatePredicate {
readonly "month": integer
readonly "date": integer

constructor(arg0: integer, arg1: integer)

public "isAfter"(arg0: $LocalDate$Type): boolean
public "isBefore"(arg0: $LocalDate$Type): boolean
public static "fromJson"(arg0: $JsonElement$Type): $DatePredicate
public "toJson"(): $JsonObject
public static "isInRange"(arg0: $DatePredicate$Type, arg1: $DatePredicate$Type): boolean
public static "isInRange"(arg0: $LocalDate$Type, arg1: $DatePredicate$Type, arg2: $DatePredicate$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DatePredicate$Type = ($DatePredicate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DatePredicate_ = $DatePredicate$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$TeamManagerScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$EasyScreen, $EasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$TeamTab, $TeamTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamTab"

export class $TeamManagerScreen extends $EasyScreen {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor()

public "blockInventoryClosing"(): boolean
public "setActiveTeam"(arg0: long): void
public "getActiveTeam"(): $Team
public "currentTab"(): $TeamTab
public "changeTab"(arg0: integer): void
set "activeTeam"(value: long)
get "activeTeam"(): $Team
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamManagerScreen$Type = ($TeamManagerScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamManagerScreen_ = $TeamManagerScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab" {
import {$TraderSettingsTab, $TraderSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab"
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $SettingsSubTab extends $EasyTab {
readonly "parent": $TraderSettingsClientTab
readonly "commonTab": $TraderSettingsTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu


public "canOpen"(): boolean
public "sendMessage"(arg0: $LazyPacketData$Builder$Type): void
public "addChild"<T>(arg0: T): T
public "removeChild"(arg0: any): void
public "getColor"(): integer
public "shouldRenderInventoryText"(): boolean
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SettingsSubTab$Type = ($SettingsSubTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SettingsSubTab_ = $SettingsSubTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$WalletMoneyViewer" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MoneyViewer, $MoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyViewer"

export class $WalletMoneyViewer extends $MoneyViewer {

constructor(arg0: $ItemStack$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletMoneyViewer$Type = ($WalletMoneyViewer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletMoneyViewer_ = $WalletMoneyViewer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/claiming/bonus_data/$LCBonusClaimHandler" {
import {$IClaimPurchaseHandler, $IClaimPurchaseHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/integration/claiming/$IClaimPurchaseHandler"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export class $LCBonusClaimHandler implements $IClaimPurchaseHandler {
static readonly "INSTANCE": $IClaimPurchaseHandler


public "addBonusClaims"(arg0: $ServerPlayer$Type, arg1: integer): void
public "getCurrentBonusForceloadChunks"(arg0: $ServerPlayer$Type): integer
public "addBonusForceloadChunks"(arg0: $ServerPlayer$Type, arg1: integer): void
public "getCurrentBonusClaims"(arg0: $ServerPlayer$Type): integer
public "canBuyForceload"(arg0: $ServerPlayer$Type): boolean
public "canBuyClaims"(arg0: $ServerPlayer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCBonusClaimHandler$Type = ($LCBonusClaimHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCBonusClaimHandler_ = $LCBonusClaimHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeSettingNotification$Advanced" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$ChangeSettingNotification, $ChangeSettingNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeSettingNotification"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ChangeSettingNotification$Simple, $ChangeSettingNotification$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeSettingNotification$Simple"

export class $ChangeSettingNotification$Advanced extends $ChangeSettingNotification {
static readonly "ADVANCED_TYPE": $NotificationType<($ChangeSettingNotification$Advanced)>
static readonly "SIMPLE_TYPE": $NotificationType<($ChangeSettingNotification$Simple)>

constructor(arg0: $PlayerReference$Type, arg1: string, arg2: string, arg3: string)

public "getMessage"(): $MutableComponent
get "message"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeSettingNotification$Advanced$Type = ($ChangeSettingNotification$Advanced);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeSettingNotification$Advanced_ = $ChangeSettingNotification$Advanced$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$TradeLimit" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$TradeEvent$PostTradeEvent, $TradeEvent$PostTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PostTradeEvent"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$TradeEvent$PreTradeEvent, $TradeEvent$PreTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"

export class $TradeLimit extends $TradeRule {
static readonly "TYPE": $TradeRuleType<($TradeLimit)>
readonly "type": $TradeRuleType<(any)>


public "setLimit"(arg0: integer): void
public "getLimit"(): integer
public "createTab"(arg0: $TradeRulesClientTab$Type<(any)>): $TradeRulesClientSubTab
public "resetCount"(): void
public "handleUpdateMessage"(arg0: $LazyPacketData$Type): void
public "loadPersistentData"(arg0: $CompoundTag$Type): void
public "savePersistentData"(): $CompoundTag
public "saveToJson"(arg0: $JsonObject$Type): $JsonObject
public "beforeTrade"(arg0: $TradeEvent$PreTradeEvent$Type): void
public "afterTrade"(arg0: $TradeEvent$PostTradeEvent$Type): void
public "loadFromJson"(arg0: $JsonObject$Type): void
set "limit"(value: integer)
get "limit"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeLimit$Type = ($TradeLimit);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeLimit_ = $TradeLimit$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$ConfiguredTradeMod$ModBuilder" {
import {$ConfiguredTradeMod, $ConfiguredTradeMod$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$ConfiguredTradeMod"
import {$VillagerTradeMods$Builder, $VillagerTradeMods$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMods$Builder"
import {$VillagerType, $VillagerType$Type} from "packages/net/minecraft/world/entity/npc/$VillagerType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ConfiguredTradeModOption, $ConfiguredTradeModOption$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/configured/$ConfiguredTradeModOption"

export class $ConfiguredTradeMod$ModBuilder {


public "defaults"(arg0: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "build"(): $ConfiguredTradeMod
public "back"(): $VillagerTradeMods$Builder
public "defaultResult"(arg0: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "defaultCost"(arg0: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "costForRegion"(arg0: $ResourceLocation$Type, arg1: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "costForRegion"(arg0: string, arg1: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "costForRegion"(arg0: $VillagerType$Type, arg1: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "resultForRegion"(arg0: string, arg1: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "resultForRegion"(arg0: $ResourceLocation$Type, arg1: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "resultForRegion"(arg0: $VillagerType$Type, arg1: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "bothForRegion"(arg0: string, arg1: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "bothForRegion"(arg0: $ResourceLocation$Type, arg1: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "bothForRegion"(arg0: $VillagerType$Type, arg1: $Supplier$Type<(any)>): $ConfiguredTradeMod$ModBuilder
public "buildOption"(): $ConfiguredTradeModOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfiguredTradeMod$ModBuilder$Type = ($ConfiguredTradeMod$ModBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfiguredTradeMod$ModBuilder_ = $ConfiguredTradeMod$ModBuilder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$JsonArray, $JsonArray$Type} from "packages/com/google/gson/$JsonArray"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PlayerReference {
static readonly "NULL": $PlayerReference
readonly "id": $UUID


public "getName"(arg0: boolean): string
public "hashCode"(): integer
public static "load"(arg0: $CompoundTag$Type): $PlayerReference
public static "load"(arg0: $JsonElement$Type): $PlayerReference
public static "of"(arg0: $GameProfile$Type): $PlayerReference
public static "of"(arg0: boolean, arg1: string): $PlayerReference
public static "of"(arg0: $UUID$Type, arg1: string): $PlayerReference
public static "of"(arg0: $Entity$Type): $PlayerReference
public static "of"(arg0: $Player$Type): $PlayerReference
public "save"(): $CompoundTag
public "is"(arg0: $PlayerReference$Type): boolean
public "is"(arg0: $UUID$Type): boolean
public "is"(arg0: $Entity$Type): boolean
public "is"(arg0: $GameProfile$Type): boolean
public "isExact"(arg0: $PlayerReference$Type): boolean
public "getNameComponent"(arg0: boolean): $MutableComponent
public static "saveJsonList"(arg0: $List$Type<($PlayerReference$Type)>): $JsonArray
public static "getPlayerName"(arg0: $UUID$Type): string
public "copyWithName"(arg0: string): $PlayerReference
public "getPlayer"(): $Player
public static "isInList"(arg0: $List$Type<($PlayerReference$Type)>, arg1: $UUID$Type): boolean
public static "isInList"(arg0: $List$Type<($PlayerReference$Type)>, arg1: $PlayerReference$Type): boolean
public static "isInList"(arg0: $List$Type<($PlayerReference$Type)>, arg1: $Entity$Type): boolean
public static "saveList"(arg0: $CompoundTag$Type, arg1: $List$Type<($PlayerReference$Type)>, arg2: string): void
public static "loadList"(arg0: $CompoundTag$Type, arg1: string): $List<($PlayerReference)>
public "isOnline"(): boolean
public static "getPlayerID"(arg0: string): $UUID
public static "removeFromList"(arg0: $List$Type<($PlayerReference$Type)>, arg1: $PlayerReference$Type): boolean
public static "removeFromList"(arg0: $List$Type<($PlayerReference$Type)>, arg1: $UUID$Type): boolean
public "saveAsJson"(): $JsonObject
get "player"(): $Player
get "online"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerReference$Type = ($PlayerReference);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerReference_ = $PlayerReference$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/$TraderStatsTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $TraderStatsTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "clearStats"(): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderStatsTab$Type = ($TraderStatsTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderStatsTab_ = $TraderStatsTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/$EjectionMenuButton" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$InventoryButton, $InventoryButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/$InventoryButton"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $EjectionMenuButton extends $InventoryButton {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "SIZE": integer
static readonly "SPRITE": $Sprite
static readonly "OFFSET": $ScreenPosition
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $AbstractContainerScreen$Type<(any)>)

public static "tryRenderTooltip"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EjectionMenuButton$Type = ($EjectionMenuButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EjectionMenuButton_ = $EjectionMenuButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/rule_tabs/$PlayerTradeLimitTab" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TimeUtil$TimeData, $TimeUtil$TimeData$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeData"
import {$TradeRuleSubTab, $TradeRuleSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRuleSubTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$PlayerTradeLimit, $PlayerTradeLimit$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$PlayerTradeLimit"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $PlayerTradeLimitTab extends $TradeRuleSubTab<($PlayerTradeLimit)> {
readonly "ruleType": $TradeRuleType<(T)>
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TradeRulesClientTab$Type<(any)>)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "onTimeSet"(arg0: $TimeUtil$TimeData$Type): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerTradeLimitTab$Type = ($PlayerTradeLimitTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerTradeLimitTab_ = $PlayerTradeLimitTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$NumberUtil" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $NumberUtil {

constructor()

public static "getAsStringOfLength"(arg0: integer, arg1: integer): string
public static "IsInteger"(arg0: string): boolean
public static "GetIntegerValue"(arg0: string, arg1: integer): integer
public static "prettyInteger"(arg0: integer): string
public static "GetPrettyString"(arg0: integer): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NumberUtil$Type = ($NumberUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NumberUtil_ = $NumberUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/$ConfigItemTier" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ConfigItemTier extends $Enum<($ConfigItemTier)> {
static readonly "T1": $ConfigItemTier
static readonly "T2": $ConfigItemTier
static readonly "T3": $ConfigItemTier
static readonly "T4": $ConfigItemTier
static readonly "T5": $ConfigItemTier
static readonly "T6": $ConfigItemTier
readonly "tier": integer


public static "get"(arg0: integer): $ConfigItemTier
public static "values"(): ($ConfigItemTier)[]
public static "valueOf"(arg0: string): $ConfigItemTier
public "getItem"(): $Item
get "item"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigItemTier$Type = (("t4") | ("t5") | ("t6") | ("t1") | ("t2") | ("t3")) | ($ConfigItemTier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigItemTier_ = $ConfigItemTier$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$TicketStationBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TicketStationBlockEntity extends $BlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
public "getStorage"(): $Container
get "storage"(): $Container
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketStationBlockEntity$Type = ($TicketStationBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketStationBlockEntity_ = $TicketStationBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/teams/$ITeam" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $ITeam extends $IClientTracker {

 "getName"(): string
 "getMembers"(): $List<($PlayerReference)>
 "getOwner"(): $PlayerReference
 "getID"(): long
 "getAdmins"(): $List<($PlayerReference)>
 "getMemberCount"(): integer
 "getAllMembers"(): $List<($PlayerReference)>
 "getAdminsAndOwner"(): $List<($PlayerReference)>
 "isMember"(arg0: $UUID$Type): boolean
 "isMember"(arg0: $Player$Type): boolean
 "isMember"(arg0: $PlayerReference$Type): boolean
 "getBankAccount"(): $IBankAccount
 "hasBankAccount"(): boolean
 "getStats"(): $StatTracker
 "isOwner"(arg0: $UUID$Type): boolean
 "isOwner"(arg0: $PlayerReference$Type): boolean
 "isOwner"(arg0: $Player$Type): boolean
 "canAccessBankAccount"(arg0: $Player$Type): boolean
 "isAdmin"(arg0: $PlayerReference$Type): boolean
 "isAdmin"(arg0: $Player$Type): boolean
 "isAdmin"(arg0: $UUID$Type): boolean
 "isClient"(): boolean
 "isServer"(): boolean
}

export namespace $ITeam {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITeam$Type = ($ITeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITeam_ = $ITeam$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$PlainButton" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PlainButton extends $EasyButton {
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $NonNullSupplier$Type<($Sprite$Type)>)
constructor(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>, arg2: $NonNullSupplier$Type<($Sprite$Type)>)
constructor(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $Sprite$Type)
constructor(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>, arg2: $Sprite$Type)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "setSprite"(arg0: $NonNullSupplier$Type<($Sprite$Type)>): void
public "setSprite"(arg0: $Sprite$Type): void
set "sprite"(value: $NonNullSupplier$Type<($Sprite$Type)>)
set "sprite"(value: $Sprite$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlainButton$Type = ($PlainButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlainButton_ = $PlainButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/containers/$TicketInventory" {
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"

export class $TicketInventory extends $SimpleContainer {

constructor(arg0: integer)

public "getMaxStackSize"(): integer
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "maxStackSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketInventory$Type = ($TicketInventory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketInventory_ = $TicketInventory$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/comparison/$ProductComparisonResult" {
import {$FluidStack, $FluidStack$Type} from "packages/net/minecraftforge/fluids/$FluidStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ProductComparisonResult {


public static "CompareEnergy"(arg0: integer, arg1: integer): $ProductComparisonResult
public static "CompareItem"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): $ProductComparisonResult
public static "CompareItem"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): $ProductComparisonResult
public static "CompareFluid"(arg0: $FluidStack$Type, arg1: $FluidStack$Type): $ProductComparisonResult
public "SameProductQuantity"(): boolean
public "ProductQuantityDifference"(): integer
public "SameProductNBT"(): boolean
public "SameProductType"(): boolean
public static "CompareTwoItems"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type, arg3: $ItemStack$Type): $List<($ProductComparisonResult)>
public static "CompareTwoItems"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type, arg3: $ItemStack$Type, arg4: boolean): $List<($ProductComparisonResult)>
public static "CreateRaw"(arg0: boolean, arg1: boolean, arg2: integer): $ProductComparisonResult
public "Identical"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProductComparisonResult$Type = ($ProductComparisonResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProductComparisonResult_ = $ProductComparisonResult$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/config/$SPacketEditConfig" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketEditConfig extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketEditConfig)>

constructor(arg0: string, arg1: string, arg2: string)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketEditConfig$Type = ($SPacketEditConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketEditConfig_ = $SPacketEditConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView$Builder" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $MoneyView$Builder {


public "add"(arg0: $Collection$Type<($MoneyValue$Type)>): $MoneyView$Builder
public "add"(arg0: $MoneyValue$Type): $MoneyView$Builder
public "merge"(arg0: $IMoneyViewer$Type): $MoneyView$Builder
public "merge"(arg0: $MoneyView$Builder$Type): $MoneyView$Builder
public "merge"(arg0: $MoneyView$Type): $MoneyView$Builder
public "build"(): $MoneyView
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyView$Builder$Type = ($MoneyView$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyView$Builder_ = $MoneyView$Builder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ICanCopy, $ICanCopy$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/handler/$ICanCopy"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$TraderItemStorage$ITraderItemFilter, $TraderItemStorage$ITraderItemFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage$ITraderItemFilter"

export class $TraderItemStorage implements $IItemHandler, $ICanCopy<($TraderItemStorage)> {

constructor(arg0: $TraderItemStorage$ITraderItemFilter$Type)

public "load"(arg0: $CompoundTag$Type, arg1: string): void
public "save"(arg0: $CompoundTag$Type, arg1: string): $CompoundTag
public "copy"(): $TraderItemStorage
public "getContents"(): $List<($ItemStack)>
public "getItemCount"(arg0: $Predicate$Type<($ItemStack$Type)>): integer
public "getItemCount"(arg0: $ItemStack$Type): integer
public "removeItem"(arg0: $ItemStack$Type): $ItemStack
public "getMaxAmount"(): integer
public "allowItem"(arg0: $ItemStack$Type): boolean
public "getItemTagCount"(arg0: $TagKey$Type<($Item$Type)>, ...arg1: ($Item$Type)[]): integer
public "removeItemTagCount"(arg0: $TagKey$Type<($Item$Type)>, arg1: integer, arg2: $List$Type<($ItemStack$Type)>, ...arg3: ($Item$Type)[]): void
public "getSlotCount"(): integer
public "addItem"(arg0: $ItemStack$Type): boolean
public "hasItems"(...arg0: ($ItemStack$Type)[]): boolean
public "canFitItems"(...arg0: ($ItemStack$Type)[]): boolean
public "canFitItems"(arg0: $List$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "hasItem"(arg0: $ItemStack$Type): boolean
public "tryAddItem"(arg0: $ItemStack$Type): void
public "forceAddItem"(arg0: $ItemStack$Type): void
public "getSplitContents"(): $List<($ItemStack)>
public "getFittableAmount"(arg0: $ItemStack$Type): integer
public "canFitItem"(arg0: $ItemStack$Type): boolean
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "contents"(): $List<($ItemStack)>
get "maxAmount"(): integer
get "slotCount"(): integer
get "slots"(): integer
get "splitContents"(): $List<($ItemStack)>
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderItemStorage$Type = ($TraderItemStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderItemStorage_ = $TraderItemStorage$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/trader/$CPacketStoreCoins" {
import {$ClientToServerPacket$Simple, $ClientToServerPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $CPacketStoreCoins extends $ClientToServerPacket$Simple {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketStoreCoins)>


public static "sendToServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketStoreCoins$Type = ($CPacketStoreCoins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketStoreCoins_ = $CPacketStoreCoins$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AlertData, $AlertData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$AlertData"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$TradeEvent, $TradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent"

export class $TradeEvent$PreTradeEvent extends $TradeEvent {

constructor()
constructor(arg0: $TradeData$Type, arg1: $TradeContext$Type)

public "isCancelable"(): boolean
public "addDenial"(arg0: $MutableComponent$Type): void
public "addHelpful"(arg0: $MutableComponent$Type): void
public "addNeutral"(arg0: $MutableComponent$Type): void
public "addError"(arg0: $MutableComponent$Type): void
public "getAlertInfo"(): $List<($AlertData)>
public "addAlert"(arg0: $AlertData$Type, arg1: boolean): void
public "addWarning"(arg0: $MutableComponent$Type): void
public "getListenerList"(): $ListenerList
get "cancelable"(): boolean
get "alertInfo"(): $List<($AlertData)>
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeEvent$PreTradeEvent$Type = ($TradeEvent$PreTradeEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeEvent$PreTradeEvent_ = $TradeEvent$PreTradeEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/$ClientConfigFile" {
import {$ConfigFile$LoadPhase, $ConfigFile$LoadPhase$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile$LoadPhase"
import {$ConfigFile, $ConfigFile$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile"

export class $ClientConfigFile extends $ConfigFile {
readonly "loadPhase": $ConfigFile$LoadPhase


public "isClientOnly"(): boolean
get "clientOnly"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigFile$Type = ($ClientConfigFile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigFile_ = $ClientConfigFile$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/capability/$MixedCapabilityProvider" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $MixedCapabilityProvider implements $ICapabilityProvider {

constructor(arg0: $List$Type<($ICapabilityProvider$Type)>)

public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MixedCapabilityProvider$Type = ($MixedCapabilityProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MixedCapabilityProvider_ = $MixedCapabilityProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe$Serializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CoinMintRecipe, $CoinMintRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $CoinMintRecipe$Serializer implements $RecipeSerializer<($CoinMintRecipe)> {

constructor()

public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): $CoinMintRecipe
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): $CoinMintRecipe
public "toNetwork"(arg0: $FriendlyByteBuf$Type, arg1: $CoinMintRecipe$Type): void
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type, arg2: $ICondition$IContext$Type): $CoinMintRecipe
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinMintRecipe$Serializer$Type = ($CoinMintRecipe$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinMintRecipe$Serializer_ = $CoinMintRecipe$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/client/$CoinInputTypeHelper" {
import {$CoinInputType, $CoinInputType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$CoinInputType"
import {$MoneyInputHandler, $MoneyInputHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/input/$MoneyInputHandler"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"

export class $CoinInputTypeHelper {

constructor()

public static "getHandler"(arg0: $CoinInputType$Type, arg1: $ChainData$Type): $MoneyInputHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinInputTypeHelper$Type = ($CoinInputTypeHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinInputTypeHelper_ = $CoinInputTypeHelper$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$ItemTraderBlockEntity" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$TraderBlockEntity, $TraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blockentity/$TraderBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemTraderData, $ItemTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderData"

export class $ItemTraderBlockEntity extends $TraderBlockEntity<($ItemTraderData)> {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)
constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type, arg2: integer)
constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type, arg2: integer, arg3: boolean)

public "GetRenderData"(): $ItemPositionData
public "buildNewTrader"(): $ItemTraderData
public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTraderBlockEntity$Type = ($ItemTraderBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTraderBlockEntity_ = $ItemTraderBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/loot/packs/$BlockDropLoot" {
import {$LootTableProviderTemplate, $LootTableProviderTemplate$Type} from "packages/io/github/lightman314/lightmanscurrency/datagen/common/loot/$LootTableProviderTemplate"

export class $BlockDropLoot extends $LootTableProviderTemplate {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockDropLoot$Type = ($BlockDropLoot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockDropLoot_ = $BlockDropLoot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/$ClientModEvents" {
import {$RegisterGuiOverlaysEvent, $RegisterGuiOverlaysEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterGuiOverlaysEvent"
import {$EntityRenderersEvent$AddLayers, $EntityRenderersEvent$AddLayers$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$AddLayers"
import {$RegisterColorHandlersEvent$Item, $RegisterColorHandlersEvent$Item$Type} from "packages/net/minecraftforge/client/event/$RegisterColorHandlersEvent$Item"
import {$ModelEvent$RegisterAdditional, $ModelEvent$RegisterAdditional$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$RegisterAdditional"
import {$EntityRenderersEvent$RegisterLayerDefinitions, $EntityRenderersEvent$RegisterLayerDefinitions$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$RegisterLayerDefinitions"
import {$RegisterKeyMappingsEvent, $RegisterKeyMappingsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterKeyMappingsEvent"
import {$RegisterColorHandlersEvent$Block, $RegisterColorHandlersEvent$Block$Type} from "packages/net/minecraftforge/client/event/$RegisterColorHandlersEvent$Block"

export class $ClientModEvents {

constructor()

public static "registerKeyMappings"(arg0: $RegisterKeyMappingsEvent$Type): void
public static "registerItemColors"(arg0: $RegisterColorHandlersEvent$Item$Type): void
public static "registerLayers"(arg0: $EntityRenderersEvent$RegisterLayerDefinitions$Type): void
public static "addLayers"(arg0: $EntityRenderersEvent$AddLayers$Type): void
public static "registerWalletGuiOverlay"(arg0: $RegisterGuiOverlaysEvent$Type): void
public static "registerAdditionalModels"(arg0: $ModelEvent$RegisterAdditional$Type): void
public static "registerBlockColors"(arg0: $RegisterColorHandlersEvent$Block$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientModEvents$Type = ($ClientModEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientModEvents_ = $ClientModEvents$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyTextButton" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$WidgetAddon, $WidgetAddon$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $EasyTextButton extends $EasyButton {
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $NonNullSupplier$Type<($Component$Type)>, arg5: $Consumer$Type<($EasyButton$Type)>)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $NonNullSupplier$Type<($Component$Type)>, arg5: $Runnable$Type)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $NonNullSupplier$Type<($Component$Type)>, arg4: $Consumer$Type<($EasyButton$Type)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $NonNullSupplier$Type<($Component$Type)>, arg4: $Runnable$Type)
constructor(arg0: $ScreenArea$Type, arg1: $NonNullSupplier$Type<($Component$Type)>, arg2: $Runnable$Type)
constructor(arg0: $ScreenArea$Type, arg1: $NonNullSupplier$Type<($Component$Type)>, arg2: $Consumer$Type<($EasyButton$Type)>)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Component$Type, arg5: $Consumer$Type<($EasyButton$Type)>)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Component$Type, arg5: $Runnable$Type)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Component$Type, arg4: $Consumer$Type<($EasyButton$Type)>)
constructor(arg0: $ScreenArea$Type, arg1: $Component$Type, arg2: $Runnable$Type)
constructor(arg0: $ScreenArea$Type, arg1: $Component$Type, arg2: $Consumer$Type<($EasyButton$Type)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Component$Type, arg4: $Runnable$Type)

public "setMessage"(arg0: $NonNullSupplier$Type<($Component$Type)>): void
public "withAddons"(...arg0: ($WidgetAddon$Type)[]): $EasyTextButton
public "setMessage"(arg0: $Component$Type): void
set "message"(value: $NonNullSupplier$Type<($Component$Type)>)
set "message"(value: $Component$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyTextButton$Type = ($EasyTextButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyTextButton_ = $EasyTextButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/enchantments/$LCEnchantmentCategories" {
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $LCEnchantmentCategories {
static readonly "WALLET_CATEGORY": $EnchantmentCategory
static readonly "WALLET_PICKUP_CATEGORY": $EnchantmentCategory

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCEnchantmentCategories$Type = ($LCEnchantmentCategories);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCEnchantmentCategories_ = $LCEnchantmentCategories$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$ITradeRuleHost" {
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ITradeRuleHost {

 "getRules"(): $List<($TradeRule)>
 "isTrader"(): boolean
 "allowTradeRule"(arg0: $TradeRule$Type): boolean
 "validateRuleStates"(): void
 "HandleRuleUpdate"(arg0: $ResourceLocation$Type, arg1: $LazyPacketData$Type): void
 "getRuleOfType"(arg0: $ResourceLocation$Type): $TradeRule
 "canMoneyBeRelevant"(): boolean
 "isTrade"(): boolean
 "isMoneyRelevant"(): boolean
 "markTradeRulesDirty"(): void
}

export namespace $ITradeRuleHost {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITradeRuleHost$Type = ($ITradeRuleHost);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITradeRuleHost_ = $ITradeRuleHost$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$FreeSample" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$PriceTweakingTradeRule, $PriceTweakingTradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$PriceTweakingTradeRule"
import {$TradeEvent$PostTradeEvent, $TradeEvent$PostTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PostTradeEvent"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$TradeEvent$PreTradeEvent, $TradeEvent$PreTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$TradeEvent$TradeCostEvent, $TradeEvent$TradeCostEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$TradeCostEvent"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"

export class $FreeSample extends $PriceTweakingTradeRule {
static readonly "TYPE": $TradeRuleType<($FreeSample)>
readonly "type": $TradeRuleType<(any)>


public "createTab"(arg0: $TradeRulesClientTab$Type<(any)>): $TradeRulesClientSubTab
public "giveDiscount"(arg0: $UUID$Type): boolean
public "getSampleCount"(): integer
public "loadPersistentData"(arg0: $CompoundTag$Type): void
public "savePersistentData"(): $CompoundTag
public "saveToJson"(arg0: $JsonObject$Type): $JsonObject
public "beforeTrade"(arg0: $TradeEvent$PreTradeEvent$Type): void
public "afterTrade"(arg0: $TradeEvent$PostTradeEvent$Type): void
public "tradeCost"(arg0: $TradeEvent$TradeCostEvent$Type): void
public "loadFromJson"(arg0: $JsonObject$Type): void
get "sampleCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FreeSample$Type = ($FreeSample);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FreeSample_ = $FreeSample$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$WalletSlot" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $WalletSlot extends $Slot {
static readonly "EMPTY_WALLET_SLOT": $ResourceLocation
static readonly "BACKGROUND": $Pair<($ResourceLocation), ($ResourceLocation)>
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Player$Type, arg1: $Container$Type, arg2: integer, arg3: integer, arg4: integer)

public static "isValidWallet"(arg0: $ItemStack$Type): boolean
public "mayPlace"(arg0: $ItemStack$Type): boolean
public "getNoItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
get "noItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletSlot$Type = ($WalletSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletSlot_ = $WalletSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$CustomProfessions" {
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$VillagerProfession, $VillagerProfession$Type} from "packages/net/minecraft/world/entity/npc/$VillagerProfession"

export class $CustomProfessions {
static readonly "BANKER": $RegistryObject<($VillagerProfession)>
static readonly "CASHIER": $RegistryObject<($VillagerProfession)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomProfessions$Type = ($CustomProfessions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomProfessions_ = $CustomProfessions$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$BankAccountWidget" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$IEasyTickable, $IEasyTickable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IEasyTickable"
import {$BankAccountWidget$IBankAccountWidget, $BankAccountWidget$IBankAccountWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$BankAccountWidget$IBankAccountWidget"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$MoneyValueWidget, $MoneyValueWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/input/$MoneyValueWidget"

export class $BankAccountWidget implements $IEasyTickable {
static readonly "HEIGHT": integer
static readonly "BUTTON_WIDTH": integer
 "allowEmptyDeposits": boolean

constructor(arg0: integer, arg1: $BankAccountWidget$IBankAccountWidget$Type, arg2: integer, arg3: $Consumer$Type<(any)>)
constructor(arg0: integer, arg1: $BankAccountWidget$IBankAccountWidget$Type, arg2: $Consumer$Type<(any)>)

public "tick"(): void
public "renderInfo"(arg0: $EasyGuiGraphics$Type, arg1: integer): void
public "renderInfo"(arg0: $EasyGuiGraphics$Type): void
public "getAmountSelection"(): $MoneyValueWidget
get "amountSelection"(): $MoneyValueWidget
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankAccountWidget$Type = ($BankAccountWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankAccountWidget_ = $BankAccountWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext$Builder" {
import {$IFluidHandler, $IFluidHandler$Type} from "packages/net/minecraftforge/fluids/capability/$IFluidHandler"
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$IEnergyStorage, $IEnergyStorage$Type} from "packages/net/minecraftforge/energy/$IEnergyStorage"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$InteractionSlot, $InteractionSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$InteractionSlot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MoneyStorage, $MoneyStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage"

export class $TradeContext$Builder {


public "build"(): $TradeContext
public "withCoinSlots"(arg0: $Container$Type): $TradeContext$Builder
public "withStoredCoins"(arg0: $MoneyStorage$Type): $TradeContext$Builder
public "withInteractionSlot"(arg0: $InteractionSlot$Type): $TradeContext$Builder
public "withBankAccount"(arg0: $BankReference$Type): $TradeContext$Builder
public "withItemHandler"(arg0: $IItemHandler$Type): $TradeContext$Builder
public "withEnergyHandler"(arg0: $IEnergyStorage$Type): $TradeContext$Builder
public "withMoneyHolder"(arg0: $IMoneyHolder$Type): $TradeContext$Builder
public "withMoneyHandler"(arg0: $IMoneyHandler$Type, arg1: $Component$Type, arg2: integer): $TradeContext$Builder
public "withFluidHandler"(arg0: $IFluidHandler$Type): $TradeContext$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeContext$Builder$Type = ($TradeContext$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeContext$Builder_ = $TradeContext$Builder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/handlers/$SidedHandler" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TraderInterfaceBlockEntity, $TraderInterfaceBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity"

export class $SidedHandler<H> {

constructor()

public "load"(arg0: $CompoundTag$Type): void
public "getParent"(): $TraderInterfaceBlockEntity
public "save"(): $CompoundTag
public "getType"(): $ResourceLocation
public "setParent"(arg0: $TraderInterfaceBlockEntity$Type): void
public "getHandler"(arg0: $Direction$Type): H
public "getTag"(): string
public "sendMessage"(arg0: $CompoundTag$Type): void
public "markDirty"(): void
public "receiveMessage"(arg0: $CompoundTag$Type): void
get "parent"(): $TraderInterfaceBlockEntity
get "type"(): $ResourceLocation
set "parent"(value: $TraderInterfaceBlockEntity$Type)
get "tag"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SidedHandler$Type<H> = ($SidedHandler<(H)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SidedHandler_<H> = $SidedHandler$Type<(H)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/$TeamManagerButton" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$InventoryButton, $InventoryButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/$InventoryButton"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $TeamManagerButton extends $InventoryButton {
static readonly "SIZE": integer
static readonly "SPRITE": $Sprite
static readonly "OFFSET": $ScreenPosition
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $AbstractContainerScreen$Type<(any)>)

public static "tryRenderTooltip"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamManagerButton$Type = ($TeamManagerButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamManagerButton_ = $TeamManagerButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/$CoinChestRenderer" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $CoinChestRenderer implements $BlockEntityRenderer<($CoinChestBlockEntity)> {
static readonly "COIN_CHEST_MATERIAL": $Material

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $CoinChestBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $CoinChestBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $CoinChestBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestRenderer$Type = ($CoinChestRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestRenderer_ = $CoinChestRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/$LCDataEventListener" {
import {$GatherDataEvent, $GatherDataEvent$Type} from "packages/net/minecraftforge/data/event/$GatherDataEvent"

export class $LCDataEventListener {

constructor()

public static "onDataGen"(arg0: $GatherDataEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCDataEventListener$Type = ($LCDataEventListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCDataEventListener_ = $LCDataEventListener$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/providers/$TaxCollectorMenuProvider" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$EasyMenuProvider, $EasyMenuProvider$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/providers/$EasyMenuProvider"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TaxCollectorMenuProvider implements $EasyMenuProvider {

constructor(arg0: long, arg1: $MenuValidator$Type)

public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "getDisplayName"(): $Component
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxCollectorMenuProvider$Type = ($TaxCollectorMenuProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxCollectorMenuProvider_ = $TaxCollectorMenuProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TicketStationScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$TicketStationRecipe, $TicketStationRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketStationRecipe"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$TicketStationMenu, $TicketStationMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TicketStationMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TicketStationScreen extends $EasyMenuScreen<($TicketStationMenu)> implements $IScrollable {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "SPRITE_ARROW": $Sprite
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $TicketStationMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "getMatchingRecipes"(): $List<($TicketStationRecipe)>
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "matchingRecipes"(): $List<($TicketStationRecipe)>
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketStationScreen$Type = ($TicketStationScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketStationScreen_ = $TicketStationScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionBlockManager" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$SimpleJsonResourceReloadListener, $SimpleJsonResourceReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$SimpleJsonResourceReloadListener"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $ItemPositionBlockManager extends $SimpleJsonResourceReloadListener {
static readonly "INSTANCE": $ItemPositionBlockManager


public static "getResourceForBlock"(arg0: $Block$Type): $ResourceLocation
public static "getResourceForBlock"(arg0: $BlockState$Type): $ResourceLocation
public static "getDataForBlock"(arg0: $Block$Type): $ItemPositionData
public static "getDataForBlock"(arg0: $BlockState$Type): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemPositionBlockManager$Type = ($ItemPositionBlockManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemPositionBlockManager_ = $ItemPositionBlockManager$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/configured/$ConfiguredTradeModOption" {
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$ConfiguredTradeMod, $ConfiguredTradeMod$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$ConfiguredTradeMod"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $ConfiguredTradeModOption extends $ConfigOption<($ConfiguredTradeMod)> {
static readonly "PARSER": $ConfigParser<($ConfiguredTradeMod)>


public static "create"(arg0: $NonNullSupplier$Type<($ConfiguredTradeMod$Type)>): $ConfiguredTradeModOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfiguredTradeModOption$Type = ($ConfiguredTradeModOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfiguredTradeModOption_ = $ConfiguredTradeModOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$TickableBlockEntity" {
import {$IClientTicker, $IClientTicker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IClientTicker"
import {$EasyBlockEntity, $EasyBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$EasyBlockEntity"
import {$IEasyTickable, $IEasyTickable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IEasyTickable"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IServerTicker, $IServerTicker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IServerTicker"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TickableBlockEntity extends $EasyBlockEntity implements $IClientTicker, $IServerTicker, $IEasyTickable {
 "blockState": $BlockState


public "tick"(): void
public "clientTick"(): void
public "serverTick"(): void
public static "createTicker"<A extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(A)>): $BlockEntityTicker<(A)>
/**
 * 
 * @deprecated
 */
public static "tickHandler"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $TickableBlockEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickableBlockEntity$Type = ($TickableBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickableBlockEntity_ = $TickableBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$WidgetAddon, $WidgetAddon$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $EasyWidget extends $AbstractWidget {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer


public "setSize"(arg0: integer, arg1: integer): void
public "getPosition"(): $ScreenPosition
public "hideFromMouse"(): boolean
public "setActive"(arg0: boolean): void
public "setVisible"(arg0: boolean): void
public "isMouseOver"(arg0: double, arg1: double): boolean
public "isActive"(): boolean
public "isVisible"(): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getArea"(): $ScreenArea
public "addAddons"(arg0: $Consumer$Type<($WidgetAddon$Type)>): void
public "removeAddons"(arg0: $Consumer$Type<($WidgetAddon$Type)>): void
public "withAddons"(...arg0: ($WidgetAddon$Type)[]): any
public "setPosition"(arg0: $ScreenPosition$Type): void
public "getHeight"(): integer
public "playDownSound"(arg0: $SoundManager$Type): void
public "setHeight"(arg0: integer): void
public "setWidth"(arg0: integer): void
public "setX"(arg0: integer): void
public "setY"(arg0: integer): void
public "getWidth"(): integer
public "getX"(): integer
public "getY"(): integer
public "isMouseOver"(arg0: $ScreenPosition$Type): boolean
public "setPosition"(arg0: integer, arg1: integer): void
get "position"(): $ScreenPosition
set "active"(value: boolean)
set "visible"(value: boolean)
get "active"(): boolean
get "visible"(): boolean
get "area"(): $ScreenArea
set "position"(value: $ScreenPosition$Type)
get "height"(): integer
set "height"(value: integer)
set "width"(value: integer)
set "x"(value: integer)
set "y"(value: integer)
get "width"(): integer
get "x"(): integer
get "y"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyWidget$Type = ($EasyWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyWidget_ = $EasyWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/wallet/$CPacketWalletQuickCollect" {
import {$ClientToServerPacket$Simple, $ClientToServerPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $CPacketWalletQuickCollect extends $ClientToServerPacket$Simple {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketWalletQuickCollect)>


public static "sendToServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketWalletQuickCollect$Type = ($CPacketWalletQuickCollect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketWalletQuickCollect_ = $CPacketWalletQuickCollect$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/tax/$SPacketSyncClientTax" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncClientTax extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncClientTax)>

constructor(arg0: $CompoundTag$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncClientTax$Type = ($SPacketSyncClientTax);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncClientTax_ = $SPacketSyncClientTax$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinJarBlockEntity" {
import {$EasyBlockEntity, $EasyBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$EasyBlockEntity"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $CoinJarBlockEntity extends $EasyBlockEntity {
static readonly "COIN_LIMIT": integer
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "onLoad"(): void
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "getColor"(): integer
public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
public "getStorage"(): $List<($ItemStack)>
public "readItemTag"(arg0: $ItemStack$Type): void
public "clearStorage"(): void
public "writeItemTag"(arg0: $ItemStack$Type): void
public "addCoin"(arg0: $ItemStack$Type): boolean
public "writeSimpleItemTag"(arg0: $ItemStack$Type): void
get "color"(): integer
get "storage"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinJarBlockEntity$Type = ($CoinJarBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinJarBlockEntity_ = $CoinJarBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/bank/$CPacketBankTransferTeam" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketBankTransferTeam extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketBankTransferTeam)>

constructor(arg0: long, arg1: $MoneyValue$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketBankTransferTeam$Type = ($CPacketBankTransferTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketBankTransferTeam_ = $CPacketBankTransferTeam$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$DisplayCaseBlock" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$TraderBlockBase, $TraderBlockBase$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockBase"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IItemTraderBlock, $IItemTraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IItemTraderBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DisplayCaseBlock extends $TraderBlockBase implements $IItemTraderBlock {
static readonly "TRADECOUNT": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "traderType"(): $BlockEntityType<(any)>
public "validTraderTypes"(): $List<($BlockEntityType<(any)>)>
public "getItemPositionData"(): $ItemPositionData
get "itemPositionData"(): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplayCaseBlock$Type = ($DisplayCaseBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplayCaseBlock_ = $DisplayCaseBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingDeserializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"

export interface $ItemListingSerializer$IItemListingDeserializer {

 "deserialize"(arg0: $JsonObject$Type): $VillagerTrades$ItemListing

(arg0: $JsonObject$Type): $VillagerTrades$ItemListing
}

export namespace $ItemListingSerializer$IItemListingDeserializer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemListingSerializer$IItemListingDeserializer$Type = ($ItemListingSerializer$IItemListingDeserializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemListingSerializer$IItemListingDeserializer_ = $ItemListingSerializer$IItemListingDeserializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$EjectionRecoveryScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$EjectionRecoveryMenu, $EjectionRecoveryMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$EjectionRecoveryMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $EjectionRecoveryScreen extends $EasyMenuScreen<($EjectionRecoveryMenu)> {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $EjectionRecoveryMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EjectionRecoveryScreen$Type = ($EjectionRecoveryScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EjectionRecoveryScreen_ = $EjectionRecoveryScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/bank/$SPacketBankTransferResponse" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $SPacketBankTransferResponse extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketBankTransferResponse)>

constructor(arg0: $MutableComponent$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketBankTransferResponse$Type = ($SPacketBankTransferResponse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketBankTransferResponse_ = $SPacketBankTransferResponse$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/enchantments/$EnchantmentUtil" {
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $EnchantmentUtil {


public static "tickAllEnchantments"(arg0: $LivingEntity$Type, arg1: $IMoneyHandler$Type): void
public static "tickMoneyMending"(arg0: $LivingEntity$Type, arg1: $IMoneyHandler$Type): void
public static "tickCoinMagnet"(arg0: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentUtil$Type = ($EnchantmentUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentUtil_ = $EnchantmentUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$SlotMachineMenu$RewardCache" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SlotMachineMenu, $SlotMachineMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$SlotMachineMenu"
import {$MoneyStorage, $MoneyStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage"

export class $SlotMachineMenu$RewardCache {
readonly "itemHolder": $Container
readonly "moneyHolder": $MoneyStorage

constructor(arg0: $SlotMachineMenu$Type)
constructor(arg0: $SlotMachineMenu$Type, arg1: $Container$Type, arg2: $MoneyStorage$Type)

public "save"(): $CompoundTag
public "giveToPlayer"(): void
public "getDisplayItems"(): $List<($ItemStack)>
get "displayItems"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineMenu$RewardCache$Type = ($SlotMachineMenu$RewardCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineMenu$RewardCache_ = $SlotMachineMenu$RewardCache$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/immersiveengineering/$LCImmersive" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCImmersive {

constructor()

public static "registerRotationBlacklists"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCImmersive$Type = ($LCImmersive);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCImmersive_ = $LCImmersive$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$LCRenderTypes" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$RenderStateShard, $RenderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"

export class $LCRenderTypes extends $RenderStateShard {
static readonly "BLANK_TEXTURE": $ResourceLocation
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard


public static "getOutlineTranslucent"(): $RenderType
get "outlineTranslucent"(): $RenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCRenderTypes$Type = ($LCRenderTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCRenderTypes_ = $LCRenderTypes$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/menu/$IBankAccountMenu" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"

export interface $IBankAccountMenu extends $IClientTracker {

 "onDepositOrWithdraw"(): void
 "getBankAccountReference"(): $BankReference
 "getPlayer"(): $Player
 "getBankAccount"(): $IBankAccount
 "getCoinInput"(): $Container
 "isClient"(): boolean
 "isServer"(): boolean
}

export namespace $IBankAccountMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBankAccountMenu$Type = ($IBankAccountMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBankAccountMenu_ = $IBankAccountMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/dropdown/$DropdownWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$IMouseListener, $IMouseListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$EasyWidgetWithChildren, $EasyWidgetWithChildren$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DropdownWidget extends $EasyWidgetWithChildren implements $IMouseListener {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "HEIGHT": integer
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Consumer$Type<(integer)>, arg4: $Function$Type<(integer), (boolean)>, ...arg5: ($Component$Type)[])
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Consumer$Type<(integer)>, arg5: $Function$Type<(integer), (boolean)>, ...arg6: ($Component$Type)[])
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Consumer$Type<(integer)>, arg4: $Function$Type<(integer), (boolean)>, arg5: $List$Type<($Component$Type)>)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Consumer$Type<(integer)>, arg5: $Function$Type<(integer), (boolean)>, arg6: $List$Type<($Component$Type)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Consumer$Type<(integer)>, ...arg4: ($Component$Type)[])
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Consumer$Type<(integer)>, ...arg5: ($Component$Type)[])
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Consumer$Type<(integer)>, arg4: $List$Type<($Component$Type)>)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Consumer$Type<(integer)>, arg5: $List$Type<($Component$Type)>)

public "renderTick"(): void
public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "addChildrenBeforeThis"(): boolean
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "addChildren"(): void
public "playDownSound"(arg0: $SoundManager$Type): void
public "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DropdownWidget$Type = ($DropdownWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DropdownWidget_ = $DropdownWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplaySerializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$CoinEntry, $CoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$CoinEntry"
import {$ValueDisplayData, $ValueDisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplayData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ValueDisplaySerializer {

constructor()

public "getType"(): $ResourceLocation
public "build"(): $ValueDisplayData
public "writeAdditional"(arg0: $ValueDisplayData$Type, arg1: $JsonObject$Type): void
public "parseAdditionalFromCoin"(arg0: $CoinEntry$Type, arg1: $JsonObject$Type): void
public "resetBuilder"(): void
public "parseAdditional"(arg0: $JsonObject$Type): void
public "writeAdditionalToCoin"(arg0: $ValueDisplayData$Type, arg1: $CoinEntry$Type, arg2: $JsonObject$Type): void
get "type"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueDisplaySerializer$Type = ($ValueDisplaySerializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueDisplaySerializer_ = $ValueDisplaySerializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$StatKey, $StatKey$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatKey"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $TextEntry {

constructor(arg0: $Supplier$Type<(string)>)
constructor(arg0: string)

public "get"(...arg0: (any)[]): $MutableComponent
public "getKey"(): string
public static "message"(arg0: string, arg1: string): $TextEntry
public static "argument"(arg0: string): $TextEntry
public static "block"(arg0: $RegistryObject$Type<(any)>): $TextEntry
public static "command"(arg0: string, arg1: string): $TextEntry
public static "permission"(arg0: string): $TextEntry
public static "description"(arg0: $TextEntry$Type): $TextEntry
public static "item"(arg0: $RegistryObject$Type<(any)>): $TextEntry
public static "chain"(arg0: string): $TextEntry
public static "keyBind"(arg0: string, arg1: string): $TextEntry
public static "profession"(arg0: $RegistryObject$Type<(any)>): $TextEntry
public static "widget"(arg0: string, arg1: string): $TextEntry
public static "button"(arg0: string, arg1: string): $TextEntry
public static "creativeTab"(arg0: string, arg1: string): $TextEntry
public static "notification"(arg0: $ResourceLocation$Type): $TextEntry
public static "notification"(arg0: $NotificationType$Type<(any)>): $TextEntry
public static "notification"(arg0: $NotificationType$Type<(any)>, arg1: string): $TextEntry
public static "notification"(arg0: $ResourceLocation$Type, arg1: string): $TextEntry
public static "enchantment"(arg0: $RegistryObject$Type<(any)>): $TextEntry
public static "sound"(arg0: string, arg1: string): $TextEntry
public static "gui"(arg0: string, arg1: string): $TextEntry
public static "tooltip"(arg0: string, arg1: string): $TextEntry
public "tooltip"(arg0: $List$Type<($Component$Type)>, ...arg1: (any)[]): void
public static "gamerule"(arg0: string): $TextEntry
public static "plural"(arg0: $TextEntry$Type): $TextEntry
public static "tradeRule"(arg0: $TradeRuleType$Type<(any)>): $TextEntry
public static "tradeRuleMessage"(arg0: $TradeRuleType$Type<(any)>, arg1: string): $TextEntry
public static "blurb"(arg0: string, arg1: string): $TextEntry
public static "chainDisplayWordy"(arg0: string): $TextEntry
public static "chainDisplay"(arg0: string): $TextEntry
public static "curiosSlot"(arg0: string): $TextEntry
public static "jeiInfo"(arg0: string, arg1: string): $TextEntry
public static "lcStat"(arg0: $StatKey$Type<(any), (any)>): $TextEntry
public "icon"(...arg0: (any)[]): $IconData
public static "resourcePack"(arg0: string, arg1: string): $TextEntry
public "getAsList"(...arg0: (any)[]): $List<($Component)>
public static "extend"(arg0: $TextEntry$Type, arg1: string): $TextEntry
public static "initial"(arg0: $TextEntry$Type): $TextEntry
public "getWithStyle"(...arg0: ($ChatFormatting$Type)[]): $MutableComponent
get "key"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEntry$Type = ($TextEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEntry_ = $TextEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/reference/$AuctionStandBlock" {
import {$EasyBlock, $EasyBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/$EasyBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$IEasyEntityBlock, $IEasyEntityBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IEasyEntityBlock"

export class $AuctionStandBlock extends $EasyBlock implements $IEasyEntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "playerWillDestroy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getAllowedTypes"(): $Collection<($BlockEntityType<(any)>)>
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
get "allowedTypes"(): $Collection<($BlockEntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionStandBlock$Type = ($AuctionStandBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionStandBlock_ = $AuctionStandBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/interfacebe/$CPacketInterfaceHandlerMessage" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketInterfaceHandlerMessage extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketInterfaceHandlerMessage)>

constructor(arg0: $BlockPos$Type, arg1: $ResourceLocation$Type, arg2: $CompoundTag$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketInterfaceHandlerMessage$Type = ($CPacketInterfaceHandlerMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketInterfaceHandlerMessage_ = $CPacketInterfaceHandlerMessage$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/crafting/builders/$MasterTicketRecipeBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RecipeBuilder, $RecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$RecipeBuilder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$CriterionTriggerInstance, $CriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/$CriterionTriggerInstance"

export class $MasterTicketRecipeBuilder implements $RecipeBuilder {


public "group"(arg0: string): $MasterTicketRecipeBuilder
public static "of"(arg0: $TagKey$Type<($Item$Type)>): $MasterTicketRecipeBuilder
public static "of"(arg0: $Ingredient$Type): $MasterTicketRecipeBuilder
public static "of"(arg0: $ItemLike$Type): $MasterTicketRecipeBuilder
public "withResult"(arg0: $RegistryObject$Type<(any)>): $MasterTicketRecipeBuilder
public "withResult"(arg0: $ItemLike$Type): $MasterTicketRecipeBuilder
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public "unlockedBy"(arg0: string, arg1: $CriterionTriggerInstance$Type): $MasterTicketRecipeBuilder
public "getResult"(): $Item
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: string): void
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>): void
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
get "result"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MasterTicketRecipeBuilder$Type = ($MasterTicketRecipeBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MasterTicketRecipeBuilder_ = $MasterTicketRecipeBuilder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenCorner" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ScreenCorner extends $Enum<($ScreenCorner)> {
static readonly "TOP_LEFT": $ScreenCorner
static readonly "TOP_RIGHT": $ScreenCorner
static readonly "BOTTOM_LEFT": $ScreenCorner
static readonly "BOTTOM_RIGHT": $ScreenCorner
readonly "isRightSide": boolean
readonly "isBottomSide": boolean


public static "values"(): ($ScreenCorner)[]
public static "valueOf"(arg0: string): $ScreenCorner
public "getCorner"(arg0: integer, arg1: integer): $ScreenPosition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenCorner$Type = (("top_right") | ("top_left") | ("bottom_right") | ("bottom_left")) | ($ScreenCorner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenCorner_ = $ScreenCorner$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$NetworkTerminalScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TerminalMenu, $TerminalMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TerminalMenu"
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $NetworkTerminalScreen extends $EasyMenuScreen<($TerminalMenu)> implements $IScrollable {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $TerminalMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkTerminalScreen$Type = ($NetworkTerminalScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkTerminalScreen_ = $NetworkTerminalScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/config/$SPacketReloadConfig" {
import {$ServerToClientPacket$Simple, $ServerToClientPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketReloadConfig extends $ServerToClientPacket$Simple {
static readonly "INSTANCE": $SPacketReloadConfig
static readonly "HANDLER": $CustomPacket$Handler<($SPacketReloadConfig)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketReloadConfig$Type = ($SPacketReloadConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketReloadConfig_ = $SPacketReloadConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategoryType" {
import {$NonNullFunction, $NonNullFunction$Type} from "packages/net/minecraftforge/common/util/$NonNullFunction"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $NotificationCategoryType<T extends $NotificationCategory> {
readonly "type": $ResourceLocation

constructor(arg0: $ResourceLocation$Type, arg1: $NonNullFunction$Type<($CompoundTag$Type), (T)>)

public "toString"(): string
public "load"(arg0: $CompoundTag$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationCategoryType$Type<T> = ($NotificationCategoryType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationCategoryType_<T> = $NotificationCategoryType$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/handlers/$ConfigurableSidedHandler$DirectionalSettings" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"

export class $ConfigurableSidedHandler$DirectionalSettings {
readonly "ignoreSides": $ImmutableList<($Direction)>

constructor()
constructor(arg0: $ImmutableList$Type<($Direction$Type)>)

public "get"(arg0: $Direction$Type): boolean
public "load"(arg0: $CompoundTag$Type): void
public "set"(arg0: $Direction$Type, arg1: boolean): void
public "save"(arg0: $CompoundTag$Type): $CompoundTag
public "allows"(arg0: $Direction$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigurableSidedHandler$DirectionalSettings$Type = ($ConfigurableSidedHandler$DirectionalSettings);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigurableSidedHandler$DirectionalSettings_ = $ConfigurableSidedHandler$DirectionalSettings$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/tiers/$ChestPoolLevel" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ChestPoolLevel extends $Enum<($ChestPoolLevel)> {
static readonly "T1": $ChestPoolLevel
static readonly "T2": $ChestPoolLevel
static readonly "T3": $ChestPoolLevel
static readonly "T4": $ChestPoolLevel
static readonly "T5": $ChestPoolLevel
static readonly "T6": $ChestPoolLevel
readonly "lootTable": $ResourceLocation


public static "values"(): ($ChestPoolLevel)[]
public static "valueOf"(arg0: string): $ChestPoolLevel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChestPoolLevel$Type = (("t4") | ("t5") | ("t6") | ("t1") | ("t2") | ("t3")) | ($ChestPoolLevel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChestPoolLevel_ = $ChestPoolLevel$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/client/$AuctionTradeButtonRenderer" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$DisplayData, $DisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"

export class $AuctionTradeButtonRenderer extends $TradeRenderManager<($AuctionTradeData)> {
readonly "trade": T

constructor(arg0: $AuctionTradeData$Type)

public "renderAdditional"(arg0: $EasyWidget$Type, arg1: $EasyGuiGraphics$Type, arg2: $TradeContext$Type): void
public "getOutputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "arrowPosition"(arg0: $TradeContext$Type): $LazyOptional<($ScreenPosition)>
public "inputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "outputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "getInputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "tradeButtonWidth"(arg0: $TradeContext$Type): integer
public "getAdditionalTooltips"(arg0: $TradeContext$Type, arg1: integer, arg2: integer): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionTradeButtonRenderer$Type = ($AuctionTradeButtonRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionTradeButtonRenderer_ = $AuctionTradeButtonRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/playertrading/$CPacketPlayerTradeInteraction" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketPlayerTradeInteraction extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketPlayerTradeInteraction)>

constructor(arg0: integer, arg1: $CompoundTag$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketPlayerTradeInteraction$Type = ($CPacketPlayerTradeInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketPlayerTradeInteraction_ = $CPacketPlayerTradeInteraction$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/discord/$DiscordListenerRegistration" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $DiscordListenerRegistration {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiscordListenerRegistration$Type = ($DiscordListenerRegistration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiscordListenerRegistration_ = $DiscordListenerRegistration$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/tags/$LCBlockTagProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$BlockTagsProvider, $BlockTagsProvider$Type} from "packages/net/minecraftforge/common/data/$BlockTagsProvider"

export class $LCBlockTagProvider extends $BlockTagsProvider {

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg2: $ExistingFileHelper$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCBlockTagProvider$Type = ($LCBlockTagProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCBlockTagProvider_ = $LCBlockTagProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/notifications/$SPacketChatNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketChatNotification extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketChatNotification)>
 "notification": $Notification

constructor(arg0: $Notification$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketChatNotification$Type = ($SPacketChatNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketChatNotification_ = $SPacketChatNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ItemTradeData, $ItemTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$InputTraderData, $InputTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/$InputTraderData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$TraderItemStorage$ITraderItemFilter, $TraderItemStorage$ITraderItemFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage$ITraderItemFilter"
import {$TraderItemStorage, $TraderItemStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"

export class $ItemTraderData extends $InputTraderData implements $TraderItemStorage$ITraderItemFilter {
static readonly "ALLOWED_UPGRADES": $List<($UpgradeType)>
static readonly "DEFAULT_STACK_LIMIT": integer
static readonly "TYPE": $TraderType<($ItemTraderData)>
readonly "ignoreSides": $ImmutableList<($Direction)>
static readonly "GLOBAL_TRADE_LIMIT": integer
readonly "type": $TraderType<(any)>
readonly "statTracker": $StatTracker

constructor(arg0: integer, arg1: $Level$Type, arg2: $BlockPos$Type)

public "inputSettingsTabTooltip"(): $MutableComponent
public "validateTradeRestrictions"(): void
public "inputSettingsTabIcon"(): $IconData
public "getIcon"(): $IconData
public "getStorageStackLimit"(): integer
public "saveAdditional"(arg0: $CompoundTag$Type): void
public "loadAdditional"(arg0: $CompoundTag$Type): void
public "getTradeData"(): $List<($ItemTradeData)>
public "getTradeStock"(arg0: integer): integer
public "getTradeCount"(): integer
public "canMakePersistent"(): boolean
public "getTrade"(arg0: integer): $ItemTradeData
public "removeTrade"(arg0: $Player$Type): void
public "initStorageTabs"(arg0: $ITraderStorageMenu$Type): void
public "addTrade"(arg0: $Player$Type): void
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "markStorageDirty"(): void
public "getItemHandler"(arg0: $Direction$Type): $IItemHandler
public "getStorage"(): $TraderItemStorage
public "allowAdditionalUpgradeType"(arg0: $UpgradeType$Type): boolean
public "isItemRelevant"(arg0: $ItemStack$Type): boolean
public "overrideTradeCount"(arg0: integer): void
public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
get "icon"(): $IconData
get "storageStackLimit"(): integer
get "tradeData"(): $List<($ItemTradeData)>
get "tradeCount"(): integer
get "storage"(): $TraderItemStorage
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTraderData$Type = ($ItemTraderData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTraderData_ = $ItemTraderData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$CoinChestScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$CoinChestMenu, $CoinChestMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinChestMenu"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$CoinChestTab, $CoinChestTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$CoinChestTab"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $CoinChestScreen extends $EasyMenuScreen<($CoinChestMenu)> {
static readonly "GUI_TEXTURE": $ResourceLocation
readonly "be": $CoinChestBlockEntity
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $CoinChestMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "blockInventoryClosing"(): boolean
public "currentTab"(): $CoinChestTab
public "validateSlotVisibility"(): void
public "validateTabVisiblity"(): void
public "changeTab"(arg0: integer): void
public "getTabs"(): $List<($CoinChestTab)>
get "tabs"(): $List<($CoinChestTab)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestScreen$Type = ($CoinChestScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestScreen_ = $CoinChestScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/slot_machine/$SlotMachineEntryClientTab" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$SlotMachineEntryTab, $SlotMachineEntryTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/slot_machine/$SlotMachineEntryTab"
import {$SlotMachineEntry, $SlotMachineEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineEntry"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $SlotMachineEntryClientTab extends $TraderStorageClientTab<($SlotMachineEntryTab)> implements $IScrollable {
static readonly "ENTRY_ROWS": integer
static readonly "ENTRY_COLUMNS": integer
static readonly "ENTRIES_PER_PAGE": integer
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $SlotMachineEntryTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getEntry"(arg0: integer): $SlotMachineEntry
public "tick"(): void
public "closeAction"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $MutableComponent
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "icon"(): $IconData
get "tooltip"(): $MutableComponent
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineEntryClientTab$Type = ($SlotMachineEntryClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineEntryClientTab_ = $SlotMachineEntryClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$PortableATMItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$TooltipItem, $TooltipItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$TooltipItem"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PortableATMItem extends $TooltipItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public static "getMenuProvider"(): $MenuProvider
get "menuProvider"(): $MenuProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortableATMItem$Type = ($PortableATMItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortableATMItem_ = $PortableATMItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyHolder$Slave, $MoneyHolder$Slave$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyHolder$Slave"

export class $BankReference extends $MoneyHolder$Slave implements $IClientTracker {


public "get"(): $IBankAccount
public static "load"(arg0: $CompoundTag$Type): $BankReference
public static "decode"(arg0: $FriendlyByteBuf$Type): $BankReference
public "encode"(arg0: $FriendlyByteBuf$Type): void
public "save"(): $CompoundTag
public "isClient"(): boolean
public "canPersist"(arg0: $Player$Type): boolean
public "allowedAccess"(arg0: $Player$Type): boolean
public "flagAsClient"(): $BankReference
public "flagAsClient"(arg0: boolean): $BankReference
public "isServer"(): boolean
public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
get "client"(): boolean
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankReference$Type = ($BankReference);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankReference_ = $BankReference$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderDataBook" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"
import {$ItemTraderData, $ItemTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderData"

export class $ItemTraderDataBook extends $ItemTraderData {
static readonly "TYPE": $TraderType<($ItemTraderDataBook)>
static readonly "ALLOWED_UPGRADES": $List<($UpgradeType)>
static readonly "DEFAULT_STACK_LIMIT": integer
readonly "ignoreSides": $ImmutableList<($Direction)>
static readonly "GLOBAL_TRADE_LIMIT": integer
readonly "type": $TraderType<(any)>
readonly "statTracker": $StatTracker

constructor(arg0: integer, arg1: $Level$Type, arg2: $BlockPos$Type)

public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTraderDataBook$Type = ($ItemTraderDataBook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTraderDataBook_ = $ItemTraderDataBook$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/builtin/$FakeOwner" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$OwnerType, $OwnerType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$OwnerType"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $FakeOwner extends $Owner {
static readonly "TYPE": $OwnerType
static readonly "NULL": $Owner
static readonly "NULL_TYPE": $OwnerType


public "getName"(): $MutableComponent
public "matches"(arg0: $Owner$Type): boolean
public static "of"(arg0: string): $FakeOwner
public static "of"(arg0: $MutableComponent$Type): $FakeOwner
public "getType"(): $OwnerType
public "pushNotification"(arg0: $NonNullSupplier$Type<(any)>, arg1: integer, arg2: boolean): void
public "asPlayerReference"(): $PlayerReference
public "alwaysValid"(): boolean
public "getCommandLabel"(): $MutableComponent
public "isMember"(arg0: $PlayerReference$Type): boolean
public "asBankReference"(): $BankReference
public "isOnline"(): boolean
public "stillValid"(): boolean
public "isAdmin"(arg0: $PlayerReference$Type): boolean
get "name"(): $MutableComponent
get "type"(): $OwnerType
get "commandLabel"(): $MutableComponent
get "online"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FakeOwner$Type = ($FakeOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FakeOwner_ = $FakeOwner$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/rule_tabs/$TradeLimitTab" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TradeLimit, $TradeLimit$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$TradeLimit"
import {$TradeRuleSubTab, $TradeRuleSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRuleSubTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TradeLimitTab extends $TradeRuleSubTab<($TradeLimit)> {
readonly "ruleType": $TradeRuleType<(T)>
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TradeRulesClientTab$Type<(any)>)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeLimitTab$Type = ($TradeLimitTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeLimitTab_ = $TradeLimitTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/impl/$OwnershipAPIImpl" {
import {$IPotentialOwnerProvider, $IPotentialOwnerProvider$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$IPotentialOwnerProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PotentialOwner, $PotentialOwner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner"
import {$List, $List$Type} from "packages/java/util/$List"
import {$OwnerType, $OwnerType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$OwnerType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$OwnershipAPI, $OwnershipAPI$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$OwnershipAPI"

export class $OwnershipAPIImpl extends $OwnershipAPI {
static readonly "INSTANCE": $OwnershipAPI
static readonly "API": $OwnershipAPI


public "getPotentialOwners"(arg0: $Player$Type): $List<($PotentialOwner)>
public "getOwnerType"(arg0: $ResourceLocation$Type): $OwnerType
public "registerOwnerType"(arg0: $OwnerType$Type): void
public "registerPotentialOwnerProvider"(arg0: $IPotentialOwnerProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnershipAPIImpl$Type = ($OwnershipAPIImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnershipAPIImpl_ = $OwnershipAPIImpl$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReferenceType" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"

export class $BankReferenceType {
readonly "id": $ResourceLocation


public "load"(arg0: $CompoundTag$Type): $BankReference
public "decode"(arg0: $FriendlyByteBuf$Type): $BankReference
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankReferenceType$Type = ($BankReferenceType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankReferenceType_ = $BankReferenceType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/tax_collector/$AdminSettingsClientTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TaxCollectorScreen, $TaxCollectorScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TaxCollectorScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TaxCollectorClientTab, $TaxCollectorClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorClientTab"
import {$AdminTab, $AdminTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$AdminTab"

export class $AdminSettingsClientTab extends $TaxCollectorClientTab<($AdminTab)> {
readonly "screen": $TaxCollectorScreen
readonly "menu": $TaxCollectorMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $AdminTab$Type)

public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
get "icon"(): $IconData
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdminSettingsClientTab$Type = ($AdminSettingsClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdminSettingsClientTab_ = $AdminSettingsClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$Color" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $Color extends $Enum<($Color)> {
static readonly "WHITE": $Color
static readonly "LIGHT_GRAY": $Color
static readonly "GRAY": $Color
static readonly "BLACK": $Color
static readonly "BROWN": $Color
static readonly "RED": $Color
static readonly "ORANGE": $Color
static readonly "YELLOW": $Color
static readonly "LIME": $Color
static readonly "GREEN": $Color
static readonly "CYAN": $Color
static readonly "LIGHT_BLUE": $Color
static readonly "BLUE": $Color
static readonly "PURPLE": $Color
static readonly "MAGENTA": $Color
static readonly "PINK": $Color
readonly "sortIndex": integer
readonly "hexColor": integer
readonly "mapColor": $MapColor
readonly "dyeTag": $TagKey<($Item)>


public static "values"(): ($Color)[]
public static "valueOf"(arg0: string): $Color
public static "getFromIndex"(arg0: long): $Color
public "getComponent"(): $MutableComponent
public "getPrettyName"(): string
public static "getFromPrettyName"(arg0: string): $Color
public "getResourceSafeName"(): string
public static "sortByColor"(arg0: $Color$Type, arg1: $Color$Type): integer
get "component"(): $MutableComponent
get "prettyName"(): string
get "resourceSafeName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Color$Type = (("magenta") | ("pink") | ("green") | ("light_gray") | ("lime") | ("black") | ("yellow") | ("light_blue") | ("brown") | ("cyan") | ("red") | ("orange") | ("gray") | ("white") | ("blue") | ("purple")) | ($Color);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Color_ = $Color$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$MenuValidatorType, $MenuValidatorType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidatorType"

export class $MenuValidator {
readonly "type": $MenuValidatorType


public static "load"(arg0: $CompoundTag$Type): $MenuValidator
public static "decode"(arg0: $FriendlyByteBuf$Type): $MenuValidator
public "encode"(arg0: $FriendlyByteBuf$Type): void
public "save"(): void
public "stillValid"(arg0: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuValidator$Type = ($MenuValidator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuValidator_ = $MenuValidator$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipSource" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"

export interface $ITooltipSource {

 "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
 "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>

(arg0: $EasyGuiGraphics$Type): void
}

export namespace $ITooltipSource {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITooltipSource$Type = ($ITooltipSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITooltipSource_ = $ITooltipSource$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/base/$TradeSelectTab" {
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"

export class $TradeSelectTab extends $TraderInterfaceTab {
static readonly "TAB_INFO": integer
static readonly "TAB_STORAGE": integer
static readonly "TAB_TRADER_SELECT": integer
static readonly "TAB_TRADE_SELECT": integer
static readonly "TAB_OWNERSHIP": integer
readonly "menu": $TraderInterfaceMenu

constructor(arg0: $TraderInterfaceMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "handleMessage"(arg0: $LazyPacketData$Type): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "setTradeIndex"(arg0: integer): void
public "createClientTab"(arg0: $TraderInterfaceScreen$Type): $TraderInterfaceClientTab<(any)>
public "onTabClose"(): void
public "onTabOpen"(): void
set "tradeIndex"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeSelectTab$Type = ($TradeSelectTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeSelectTab_ = $TradeSelectTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/terminal/$TerminalSorter$SortingOptions" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $TerminalSorter$SortingOptions {


public "withUnnamedLowPriority"(arg0: boolean): $TerminalSorter$SortingOptions
public "withEmptyLowPriority"(arg0: boolean): $TerminalSorter$SortingOptions
public "withCreativePriority"(arg0: boolean): $TerminalSorter$SortingOptions
public "withUnnamedLowPriorityFromConfig"(): $TerminalSorter$SortingOptions
public "withAuctionHousePriority"(arg0: boolean): $TerminalSorter$SortingOptions
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TerminalSorter$SortingOptions$Type = ($TerminalSorter$SortingOptions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TerminalSorter$SortingOptions_ = $TerminalSorter$SortingOptions$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$VendingMachineLargeBlock" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IItemTraderBlock, $IItemTraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IItemTraderBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TraderBlockTallWideRotatable, $TraderBlockTallWideRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockTallWideRotatable"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $VendingMachineLargeBlock extends $TraderBlockTallWideRotatable implements $IItemTraderBlock {
static readonly "TRADECOUNT": integer
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "traderType"(): $BlockEntityType<(any)>
public "makeTrader"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getItemPositionData"(): $ItemPositionData
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "itemPositionData"(): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VendingMachineLargeBlock$Type = ($VendingMachineLargeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VendingMachineLargeBlock_ = $VendingMachineLargeBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$TraderArgument$Info$Template" {
import {$ArgumentTypeInfo, $ArgumentTypeInfo$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$TraderArgument, $TraderArgument$Type} from "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$TraderArgument"
import {$ArgumentTypeInfo$Template, $ArgumentTypeInfo$Template$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo$Template"

export class $TraderArgument$Info$Template implements $ArgumentTypeInfo$Template<($TraderArgument)> {


public "instantiate"(arg0: $CommandBuildContext$Type): $TraderArgument
public "type"(): $ArgumentTypeInfo<($TraderArgument), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderArgument$Info$Template$Type = ($TraderArgument$Info$Template);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderArgument$Info$Template_ = $TraderArgument$Info$Template$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/$LCLootTables" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $LCLootTables {
static readonly "ENTITY_DROPS_T1": $ResourceLocation
static readonly "ENTITY_DROPS_T2": $ResourceLocation
static readonly "ENTITY_DROPS_T3": $ResourceLocation
static readonly "ENTITY_DROPS_T4": $ResourceLocation
static readonly "ENTITY_DROPS_T5": $ResourceLocation
static readonly "ENTITY_DROPS_T6": $ResourceLocation
static readonly "BOSS_DROPS_T1": $ResourceLocation
static readonly "BOSS_DROPS_T2": $ResourceLocation
static readonly "BOSS_DROPS_T3": $ResourceLocation
static readonly "BOSS_DROPS_T4": $ResourceLocation
static readonly "BOSS_DROPS_T5": $ResourceLocation
static readonly "BOSS_DROPS_T6": $ResourceLocation
static readonly "CHEST_DROPS_T1": $ResourceLocation
static readonly "CHEST_DROPS_T2": $ResourceLocation
static readonly "CHEST_DROPS_T3": $ResourceLocation
static readonly "CHEST_DROPS_T4": $ResourceLocation
static readonly "CHEST_DROPS_T5": $ResourceLocation
static readonly "CHEST_DROPS_T6": $ResourceLocation

constructor()

public static "all"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCLootTables$Type = ($LCLootTables);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCLootTables_ = $LCLootTables$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/tabs/$SelectChainTab" {
import {$CoinManagementTab, $CoinManagementTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/tabs/$CoinManagementTab"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CoinManagementScreen, $CoinManagementScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/$CoinManagementScreen"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $SelectChainTab extends $CoinManagementTab {

constructor(arg0: $CoinManagementScreen$Type)

public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
get "icon"(): $IconData
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectChainTab$Type = ($SelectChainTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectChainTab_ = $SelectChainTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/menu/$SPacketLazyMenu" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"

export class $SPacketLazyMenu extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketLazyMenu)>

constructor(arg0: $LazyPacketData$Type)
constructor(arg0: $LazyPacketData$Builder$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketLazyMenu$Type = ($SPacketLazyMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketLazyMenu_ = $SPacketLazyMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/input/$InputTab" {
import {$TraderSettingsTab, $TraderSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $InputTab extends $SettingsSubTab {
readonly "parent": $TraderSettingsClientTab
readonly "commonTab": $TraderSettingsTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderSettingsClientTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "canOpen"(): boolean
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getAddons"(): $List<(any)>
get "icon"(): $IconData
get "addons"(): $List<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputTab$Type = ($InputTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputTab_ = $InputTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/input/$InputTabAddon" {
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $InputTabAddon {

constructor()

public "onClose"(arg0: $SettingsSubTab$Type): void
public "tick"(arg0: $SettingsSubTab$Type): void
public "renderAfterWidgets"(arg0: $SettingsSubTab$Type, arg1: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $SettingsSubTab$Type, arg1: $EasyGuiGraphics$Type): void
public "onOpen"(arg0: $SettingsSubTab$Type, arg1: $ScreenArea$Type, arg2: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputTabAddon$Type = ($InputTabAddon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputTabAddon_ = $InputTabAddon$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/$Upgrades" {
import {$CoinChestMagnetUpgrade, $CoinChestMagnetUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestMagnetUpgrade"
import {$SpeedUpgrade, $SpeedUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/$SpeedUpgrade"
import {$UpgradeType$Simple, $UpgradeType$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType$Simple"
import {$CoinChestSecurityUpgrade, $CoinChestSecurityUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestSecurityUpgrade"
import {$ItemCapacityUpgrade, $ItemCapacityUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/capacity/$ItemCapacityUpgrade"
import {$CoinChestExchangeUpgrade, $CoinChestExchangeUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestExchangeUpgrade"

export class $Upgrades {
static readonly "ITEM_CAPACITY": $ItemCapacityUpgrade
static readonly "SPEED": $SpeedUpgrade
static readonly "NETWORK": $UpgradeType$Simple
static readonly "HOPPER": $UpgradeType$Simple
static readonly "COIN_CHEST_EXCHANGE": $CoinChestExchangeUpgrade
static readonly "COIN_CHEST_MAGNET": $CoinChestMagnetUpgrade
static readonly "COIN_CHEST_SECURITY": $CoinChestSecurityUpgrade

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Upgrades$Type = ($Upgrades);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Upgrades_ = $Upgrades$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$ActiveMode" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$TraderInterfaceBlockEntity, $TraderInterfaceBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity"

export class $TraderInterfaceBlockEntity$ActiveMode extends $Enum<($TraderInterfaceBlockEntity$ActiveMode)> {
static readonly "DISABLED": $TraderInterfaceBlockEntity$ActiveMode
static readonly "REDSTONE_OFF": $TraderInterfaceBlockEntity$ActiveMode
static readonly "REDSTONE_ONLY": $TraderInterfaceBlockEntity$ActiveMode
static readonly "ALWAYS_ON": $TraderInterfaceBlockEntity$ActiveMode
readonly "index": integer


public static "values"(): ($TraderInterfaceBlockEntity$ActiveMode)[]
public static "valueOf"(arg0: string): $TraderInterfaceBlockEntity$ActiveMode
public static "fromIndex"(arg0: integer): $TraderInterfaceBlockEntity$ActiveMode
public "isActive"(arg0: $TraderInterfaceBlockEntity$Type): boolean
public "getNext"(): $TraderInterfaceBlockEntity$ActiveMode
public "getDisplayText"(): $Component
get "next"(): $TraderInterfaceBlockEntity$ActiveMode
get "displayText"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderInterfaceBlockEntity$ActiveMode$Type = (("redstone_off") | ("always_on") | ("disabled") | ("redstone_only")) | ($TraderInterfaceBlockEntity$ActiveMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderInterfaceBlockEntity$ActiveMode_ = $TraderInterfaceBlockEntity$ActiveMode$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $LazyPacketData$Builder {


public "setBoolean"(arg0: string, arg1: boolean): $LazyPacketData$Builder
public "setInt"(arg0: string, arg1: integer): $LazyPacketData$Builder
public "setLong"(arg0: string, arg1: long): $LazyPacketData$Builder
public "setFloat"(arg0: string, arg1: float): $LazyPacketData$Builder
public "setDouble"(arg0: string, arg1: double): $LazyPacketData$Builder
public "build"(): $LazyPacketData
public "setText"(arg0: string, arg1: $Component$Type): $LazyPacketData$Builder
public "setString"(arg0: string, arg1: string): $LazyPacketData$Builder
public "setResourceLocation"(arg0: string, arg1: $ResourceLocation$Type): $LazyPacketData$Builder
public "setCompound"(arg0: string, arg1: $CompoundTag$Type): $LazyPacketData$Builder
public "setMoneyValue"(arg0: string, arg1: $MoneyValue$Type): $LazyPacketData$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LazyPacketData$Builder$Type = ($LazyPacketData$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LazyPacketData$Builder_ = $LazyPacketData$Builder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$VillagerTradeManager" {
import {$VillagerTradesEvent, $VillagerTradesEvent$Type} from "packages/net/minecraftforge/event/village/$VillagerTradesEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$WandererTradesEvent, $WandererTradesEvent$Type} from "packages/net/minecraftforge/event/village/$WandererTradesEvent"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$Int2ObjectMap, $Int2ObjectMap$Type} from "packages/it/unimi/dsi/fastutil/ints/$Int2ObjectMap"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $VillagerTradeManager {
static readonly "BANKER_ID": $ResourceLocation
static readonly "CASHIER_ID": $ResourceLocation
static readonly "WANDERING_TRADER_ID": string

constructor()

public static "replaceExistingTrades"(arg0: string, arg1: $List$Type<($VillagerTrades$ItemListing$Type)>): void
public static "replaceExistingTrades"(arg0: string, arg1: $Int2ObjectMap$Type<($List$Type<($VillagerTrades$ItemListing$Type)>)>): void
public static "OnVillagerTradeSetup"(arg0: $VillagerTradesEvent$Type): void
public static "OnWandererTradeSetup"(arg0: $WandererTradesEvent$Type): void
public static "registerDefaultTrades"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerTradeManager$Type = ($VillagerTradeManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerTradeManager_ = $VillagerTradeManager$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMods$Builder" {
import {$VillagerTradeMods, $VillagerTradeMods$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMods"
import {$VillagerTradeModsOption, $VillagerTradeModsOption$Type} from "packages/io/github/lightman314/lightmanscurrency/common/config/$VillagerTradeModsOption"
import {$ConfiguredTradeMod$ModBuilder, $ConfiguredTradeMod$ModBuilder$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$ConfiguredTradeMod$ModBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$VillagerProfession, $VillagerProfession$Type} from "packages/net/minecraft/world/entity/npc/$VillagerProfession"

export class $VillagerTradeMods$Builder {


public "build"(): $VillagerTradeMods
public "forProfession"(arg0: string): $ConfiguredTradeMod$ModBuilder
public "forProfession"(arg0: $ResourceLocation$Type): $ConfiguredTradeMod$ModBuilder
public "forProfession"(arg0: $VillagerProfession$Type): $ConfiguredTradeMod$ModBuilder
public "buildOption"(): $VillagerTradeModsOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerTradeMods$Builder$Type = ($VillagerTradeMods$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerTradeMods$Builder_ = $VillagerTradeMods$Builder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/$BookTraderBlockEntityRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BookTraderBlockEntity, $BookTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$BookTraderBlockEntity"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $BookTraderBlockEntityRenderer implements $BlockEntityRenderer<($BookTraderBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $BookTraderBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $BookTraderBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $BookTraderBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookTraderBlockEntityRenderer$Type = ($BookTraderBlockEntityRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookTraderBlockEntityRenderer_ = $BookTraderBlockEntityRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamNameTab" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$TeamTab, $TeamTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamTab"
import {$TeamManagerScreen, $TeamManagerScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$TeamManagerScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TeamNameTab extends $TeamTab {

constructor(arg0: $TeamManagerScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "allowViewing"(arg0: $Player$Type, arg1: $Team$Type): boolean
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamNameTab$Type = ($TeamNameTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamNameTab_ = $TeamNameTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$CashRegisterBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$RotatableBlock, $RotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $CashRegisterBlock extends $RotatableBlock implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)
constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $VoxelShape$Type)

public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CashRegisterBlock$Type = ($CashRegisterBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CashRegisterBlock_ = $CashRegisterBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$PlayerTradeManager" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerStoppingEvent, $ServerStoppingEvent$Type} from "packages/net/minecraftforge/event/server/$ServerStoppingEvent"
import {$PlayerTrade, $PlayerTrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$PlayerTrade"

export class $PlayerTradeManager {

constructor()

public static "GetTrade"(arg0: integer): $PlayerTrade
public static "CreateNewTrade"(arg0: $ServerPlayer$Type, arg1: $ServerPlayer$Type): integer
public static "onServerClose"(arg0: $ServerStoppingEvent$Type): void
public static "GetAllTrades"(): $List<($PlayerTrade)>
public static "TradeStillValid"(arg0: integer): boolean
public static "onServerTick"(arg0: $TickEvent$ServerTickEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerTradeManager$Type = ($PlayerTradeManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerTradeManager_ = $PlayerTradeManager$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/trade_data/$SlotMachineTrade" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SlotMachineTraderData, $SlotMachineTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineTraderData"
import {$TradeDirection, $TradeDirection$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeDirection"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$TradeComparisonResult, $TradeComparisonResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/comparison/$TradeComparisonResult"
import {$BasicTradeEditTab, $BasicTradeEditTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trades_basic/$BasicTradeEditTab"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"

export class $SlotMachineTrade extends $TradeData {
readonly "trader": $SlotMachineTraderData
static readonly "DEFAULT_KEY": string

constructor(arg0: $SlotMachineTraderData$Type)

public "compare"(arg0: $TradeData$Type): $TradeComparisonResult
public "isValid"(): boolean
public "getTradeDirection"(): $TradeDirection
public "allowTradeRule"(arg0: $TradeRule$Type): boolean
public "AcceptableDifferences"(arg0: $TradeComparisonResult$Type): boolean
public "OnOutputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "GetDifferenceWarnings"(arg0: $TradeComparisonResult$Type): $List<($Component)>
public "OnInputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "getButtonRenderer"(): $TradeRenderManager<(any)>
public "getStock"(arg0: $TradeContext$Type): integer
public "OnInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: integer, arg5: $ItemStack$Type): void
public "getCost"(): $MoneyValue
get "valid"(): boolean
get "tradeDirection"(): $TradeDirection
get "buttonRenderer"(): $TradeRenderManager<(any)>
get "cost"(): $MoneyValue
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineTrade$Type = ($SlotMachineTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineTrade_ = $SlotMachineTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$SideBaseCoinEntry" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CoinEntry, $CoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$CoinEntry"
import {$MainCoinEntry, $MainCoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$MainCoinEntry"

export class $SideBaseCoinEntry extends $MainCoinEntry {
readonly "parentCoin": $CoinEntry

constructor(arg0: $Item$Type, arg1: $CoinEntry$Type, arg2: integer)

public static "parseSub"(arg0: $JsonObject$Type, arg1: $List$Type<($CoinEntry$Type)>): $CoinEntry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SideBaseCoinEntry$Type = ($SideBaseCoinEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SideBaseCoinEntry_ = $SideBaseCoinEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/types/builtin/$NullCurrencyType" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IPlayerMoneyHandler, $IPlayerMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$IPlayerMoneyHandler"
import {$CurrencyType, $CurrencyType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$CurrencyType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MoneyValueParser, $MoneyValueParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValueParser"
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $NullCurrencyType extends $CurrencyType {
static readonly "TYPE": $ResourceLocation
static readonly "INSTANCE": $NullCurrencyType


public "getInputHandlers"(arg0: $Player$Type): $List<(any)>
public "getValueParser"(): $MoneyValueParser
public "createMoneyHandlerForContainer"(arg0: $Container$Type, arg1: $Consumer$Type<($ItemStack$Type)>): $IMoneyHandler
public "createMoneyHandlerForPlayer"(arg0: $Player$Type): $IPlayerMoneyHandler
public "loadMoneyValueJson"(arg0: $JsonObject$Type): $MoneyValue
public "loadMoneyValue"(arg0: $CompoundTag$Type): $MoneyValue
get "valueParser"(): $MoneyValueParser
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NullCurrencyType$Type = ($NullCurrencyType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NullCurrencyType_ = $NullCurrencyType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/tax_collector/$InfoClientTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$InfoTab, $InfoTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$InfoTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TaxCollectorScreen, $TaxCollectorScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TaxCollectorScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TaxCollectorClientTab, $TaxCollectorClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorClientTab"

export class $InfoClientTab extends $TaxCollectorClientTab<($InfoTab)> {
readonly "screen": $TaxCollectorScreen
readonly "menu": $TaxCollectorMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $InfoTab$Type)

public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
get "icon"(): $IconData
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InfoClientTab$Type = ($InfoClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InfoClientTab_ = $InfoClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/gamerule/$ModGameRules" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$GameRules$Value, $GameRules$Value$Type} from "packages/net/minecraft/world/level/$GameRules$Value"
import {$GameRules$IntegerValue, $GameRules$IntegerValue$Type} from "packages/net/minecraft/world/level/$GameRules$IntegerValue"
import {$GameRules$Key, $GameRules$Key$Type} from "packages/net/minecraft/world/level/$GameRules$Key"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$GameRules$BooleanValue, $GameRules$BooleanValue$Type} from "packages/net/minecraft/world/level/$GameRules$BooleanValue"

export class $ModGameRules {
static readonly "KEEP_WALLET": $GameRules$Key<($GameRules$BooleanValue)>
static readonly "COIN_DROP_PERCENT": $GameRules$Key<($GameRules$IntegerValue)>

constructor()

public static "safeGetCustomInt"(arg0: $Level$Type, arg1: $GameRules$Key$Type<($GameRules$IntegerValue$Type)>, arg2: integer): integer
public static "safeGetCustomBool"(arg0: $Level$Type, arg1: $GameRules$Key$Type<($GameRules$BooleanValue$Type)>, arg2: boolean): boolean
public static "keepWithinLimits"(arg0: integer, arg1: integer): $BiConsumer<($MinecraftServer), ($GameRules$IntegerValue)>
public static "registerRules"(): void
public static "getCustomValue"<T extends $GameRules$Value<(T)>>(arg0: $Level$Type, arg1: $GameRules$Key$Type<(T)>): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModGameRules$Type = ($ModGameRules);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModGameRules_ = $ModGameRules$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IServerTicker, $IServerTicker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IServerTicker"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$TraderInterfaceBlockEntity$ActiveMode, $TraderInterfaceBlockEntity$ActiveMode$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$ActiveMode"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IUpgradeable, $IUpgradeable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$IUpgradeable"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$EasyBlockEntity, $EasyBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$EasyBlockEntity"
import {$TraderInterfaceBlockEntity$InteractionType, $TraderInterfaceBlockEntity$InteractionType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$InteractionType"
import {$TradeResult, $TradeResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeResult"
import {$SidedHandler, $SidedHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/handlers/$SidedHandler"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"

export class $TraderInterfaceBlockEntity extends $EasyBlockEntity implements $IUpgradeable, $IDumpable, $IServerTicker {
static readonly "INTERACTION_DELAY": integer
readonly "owner": $OwnerData
 "blockState": $BlockState


public "canAccess"(arg0: $Player$Type): boolean
public "isActive"(): boolean
public "getOwner"(): $OwnerData
public "getContents"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: boolean): $List<($ItemStack)>
public "initOwner"(arg0: $Entity$Type): void
public "openMenu"(arg0: $Player$Type): void
public "setMode"(arg0: $TraderInterfaceBlockEntity$ActiveMode$Type): void
public "getMode"(): $TraderInterfaceBlockEntity$ActiveMode
public "getTradeIndex"(): integer
public "getTrader"(): $TraderData
public "mostRecentTradeResult"(): $TradeResult
public "receiveHandlerMessage"(arg0: $ResourceLocation$Type, arg1: $Player$Type, arg2: $CompoundTag$Type): void
public "setInteractionDirty"(): void
public "getReferencedPlayer"(): $PlayerReference
public "getBlacklistedInteractions"(): $List<($TraderInterfaceBlockEntity$InteractionType)>
public "setUpgradeSlotsDirty"(): void
public "setTradeReferenceDirty"(): void
public "hasTraderPermissions"(arg0: $TraderData$Type): boolean
public "getAccountReference"(): $BankReference
public "getUpgradeInventory"(): $Container
public "setTrader"(arg0: long): void
public "getBankAccount"(): $IBankAccount
public "setOnlineModeDirty"(): void
public "setLastResultDirty"(): void
public "getReferencedTrade"(): $TradeData
public "getInteractionType"(): $TraderInterfaceBlockEntity$InteractionType
public "setInteractionType"(arg0: $TraderInterfaceBlockEntity$InteractionType$Type): void
public "setModeDirty"(): void
public "setTradeIndex"(arg0: integer): void
public "setOnlineMode"(arg0: boolean): void
public "acceptTradeChanges"(): void
public "getTrueTrade"(): $TradeData
public "isOnlineMode"(): boolean
public "hasTrader"(): boolean
public "setHandlerDirty"(arg0: $SidedHandler$Type<(any)>): void
public "sendHandlerMessage"(arg0: $ResourceLocation$Type, arg1: $CompoundTag$Type): void
public "validTrader"(): boolean
public "interactWithTrader"(): $TradeResult
public "validTrade"(): boolean
public "onlineCheck"(): boolean
public "getTradeContext"(): $TradeContext
public "initMenuTabs"(arg0: $TraderInterfaceMenu$Type): void
public "validTraderType"(arg0: $TraderData$Type): boolean
public "getCapability"<C>(arg0: $Capability$Type<(C)>, arg1: $Direction$Type): $LazyOptional<(C)>
public "getOwnerName"(): $MutableComponent
public "allowUpgrade"(arg0: $UpgradeType$Type): boolean
public "load"(arg0: $CompoundTag$Type): void
public "serverTick"(): void
public "isOwner"(arg0: $Player$Type): boolean
public "flagAsRemovable"(): void
public "allowRemoval"(): boolean
public "getUpdateTag"(): $CompoundTag
public "allowUpgrade"(arg0: $UpgradeItem$Type): boolean
public "getName"(): $MutableComponent
public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
get "active"(): boolean
get "owner"(): $OwnerData
set "mode"(value: $TraderInterfaceBlockEntity$ActiveMode$Type)
get "mode"(): $TraderInterfaceBlockEntity$ActiveMode
get "tradeIndex"(): integer
get "trader"(): $TraderData
get "referencedPlayer"(): $PlayerReference
get "blacklistedInteractions"(): $List<($TraderInterfaceBlockEntity$InteractionType)>
get "accountReference"(): $BankReference
get "upgradeInventory"(): $Container
set "trader"(value: long)
get "bankAccount"(): $IBankAccount
get "referencedTrade"(): $TradeData
get "interactionType"(): $TraderInterfaceBlockEntity$InteractionType
set "interactionType"(value: $TraderInterfaceBlockEntity$InteractionType$Type)
set "tradeIndex"(value: integer)
set "onlineMode"(value: boolean)
get "trueTrade"(): $TradeData
get "onlineMode"(): boolean
set "handlerDirty"(value: $SidedHandler$Type<(any)>)
get "tradeContext"(): $TradeContext
get "ownerName"(): $MutableComponent
get "updateTag"(): $CompoundTag
get "name"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderInterfaceBlockEntity$Type = ($TraderInterfaceBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderInterfaceBlockEntity_ = $TraderInterfaceBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/builtin/$TaxableTraderReference" {
import {$ITaxable, $ITaxable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxable"
import {$TaxableReference, $TaxableReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxableReference"
import {$TaxReferenceType, $TaxReferenceType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxReferenceType"

export class $TaxableTraderReference extends $TaxableReference {
static readonly "TYPE": $TaxReferenceType
readonly "type": $TaxReferenceType

constructor(arg0: long)

public "getTaxable"(arg0: boolean): $ITaxable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxableTraderReference$Type = ($TaxableTraderReference);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxableTraderReference_ = $TaxableTraderReference$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/bank/$SPacketATMPlayerAccountResponse" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $SPacketATMPlayerAccountResponse extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketATMPlayerAccountResponse)>

constructor(arg0: $MutableComponent$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketATMPlayerAccountResponse$Type = ($SPacketATMPlayerAccountResponse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketATMPlayerAccountResponse_ = $SPacketATMPlayerAccountResponse$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab" {
import {$TraderSettingsTab, $TraderSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TraderSettingsClientTab extends $TraderStorageClientTab<($TraderSettingsTab)> {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $TraderSettingsTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "closeAction"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $MutableComponent
public "refreshTabs"(): void
public "shouldRenderInventoryText"(): boolean
public "openTab"(arg0: integer): void
get "icon"(): $IconData
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderSettingsClientTab$Type = ($TraderSettingsClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderSettingsClientTab_ = $TraderSettingsClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IScrollable {

 "getMinScroll"(): integer
 "currentScroll"(): integer
 "getMaxScroll"(): integer
 "setScroll"(arg0: integer): void
 "handleScrollWheel"(arg0: double): boolean
 "validateScroll"(): void
}

export namespace $IScrollable {
function calculateMaxScroll(arg0: integer, arg1: integer): integer
function calculateMaxScroll(arg0: integer, arg1: integer, arg2: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IScrollable$Type = ($IScrollable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IScrollable_ = $IScrollable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/enchantments/$MoneyMendingEnchantment" {
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $MoneyMendingEnchantment extends $Enchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, ...arg1: ($EquipmentSlot$Type)[])

public static "getRepairCost"(arg0: $ItemStack$Type): $MoneyValue
public static "runEntityTick"(arg0: $LivingEntity$Type, arg1: $IMoneyHandler$Type): void
public "getMaxCost"(arg0: integer): integer
public "getMaxLevel"(): integer
public "getMinCost"(arg0: integer): integer
public "isTreasureOnly"(): boolean
get "maxLevel"(): integer
get "treasureOnly"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyMendingEnchantment$Type = ($MoneyMendingEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyMendingEnchantment_ = $MoneyMendingEnchantment$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/impl/$PlayerMoneyHolder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyHolder, $MoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyHolder"
import {$IPlayerMoneyHandler, $IPlayerMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$IPlayerMoneyHandler"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $PlayerMoneyHolder extends $MoneyHolder {
static readonly "EMPTY": $IMoneyHolder

constructor(arg0: $List$Type<($IPlayerMoneyHandler$Type)>)

public "updatePlayer"(arg0: $Player$Type): $PlayerMoneyHolder
public "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "getTooltipTitle"(): $Component
public "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
get "tooltipTitle"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerMoneyHolder$Type = ($PlayerMoneyHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerMoneyHolder_ = $PlayerMoneyHolder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/slot_machine/$SlotMachineRenderer" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$SlotMachineLine, $SlotMachineLine$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/slot_machine/$SlotMachineLine"
import {$IEasyTickable, $IEasyTickable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IEasyTickable"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$SlotMachineRenderBlock, $SlotMachineRenderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/slot_machine/$SlotMachineRenderBlock"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SlotMachineScreen, $SlotMachineScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$SlotMachineScreen"

export class $SlotMachineRenderer implements $IEasyTickable {
static readonly "GUI_TEXTURE": $ResourceLocation
readonly "lines": $NonNullList<($SlotMachineLine)>

constructor(arg0: $SlotMachineScreen$Type)

public "getRandomBlock"(): $SlotMachineRenderBlock
public static "GetAnimationTime"(): integer
public static "GetRestTime"(): integer
public "tick"(): void
public "render"(arg0: $EasyGuiGraphics$Type): void
public "getFont"(): $Font
get "randomBlock"(): $SlotMachineRenderBlock
get "font"(): $Font
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineRenderer$Type = ($SlotMachineRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineRenderer_ = $SlotMachineRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/input/builtin/$CoinValueInput" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$MoneyInputHandler, $MoneyInputHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/input/$MoneyInputHandler"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $CoinValueInput extends $MoneyInputHandler implements $IScrollable {
static readonly "MAX_BUTTON_COUNT": integer

constructor(arg0: $ChainData$Type)

public "DecreaseButtonHit"(arg0: $EasyButton$Type): void
public "IncreaseButtonHit"(arg0: $EasyButton$Type): void
public "initialize"(arg0: $ScreenArea$Type): void
public "inputName"(): $MutableComponent
public "renderTick"(): void
public "getUniqueName"(): string
public "onValueChanged"(arg0: $MoneyValue$Type): void
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "uniqueName"(): string
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinValueInput$Type = ($CoinValueInput);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinValueInput_ = $CoinValueInput$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$FloatOption" {
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $FloatOption extends $ConfigOption<(float)> {


public static "create"(arg0: float): $FloatOption
public static "create"(arg0: float, arg1: float): $FloatOption
public static "create"(arg0: $NonNullSupplier$Type<(float)>, arg1: float): $FloatOption
public static "create"(arg0: $NonNullSupplier$Type<(float)>): $FloatOption
public static "create"(arg0: $NonNullSupplier$Type<(float)>, arg1: float, arg2: float): $FloatOption
public static "create"(arg0: float, arg1: float, arg2: float): $FloatOption
public static "makeParser"(arg0: float, arg1: float): $ConfigParser<(float)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FloatOption$Type = ($FloatOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FloatOption_ = $FloatOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/bank/$CPacketBankTransferPlayer" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketBankTransferPlayer extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketBankTransferPlayer)>

constructor(arg0: string, arg1: $MoneyValue$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketBankTransferPlayer$Type = ($CPacketBankTransferPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketBankTransferPlayer_ = $CPacketBankTransferPlayer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipWidget" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ITooltipSource, $ITooltipSource$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipSource"

export interface $ITooltipWidget extends $ITooltipSource {

 "getTooltipText"(): $List<($Component)>
 "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
 "renderTooltip"(arg0: $EasyGuiGraphics$Type): void

(): $List<($Component)>
}

export namespace $ITooltipWidget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITooltipWidget$Type = ($ITooltipWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITooltipWidget_ = $ITooltipWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TraderType<T extends $TraderData> {
readonly "type": $ResourceLocation

constructor(arg0: $ResourceLocation$Type, arg1: $NonNullSupplier$Type<(T)>)

public "toString"(): string
public "load"(arg0: boolean, arg1: $CompoundTag$Type): T
public "create"(): T
public "loadFromJson"(arg0: $JsonObject$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderType$Type<T> = ($TraderType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderType_<T> = $TraderType$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/builtin/$SpriteIcon" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$IconType, $IconType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$IconType"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ATMExchangeButton, $ATMExchangeButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/atm/$ATMExchangeButton"
import {$ATMIconData, $ATMIconData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$ATMIconData"

export class $SpriteIcon extends $ATMIconData {
static readonly "TYPE_NAME": $ResourceLocation
static readonly "TYPE": $IconType

constructor(arg0: $JsonObject$Type)
constructor(arg0: integer, arg1: integer, arg2: $Sprite$Type)

public "render"(arg0: $ATMExchangeButton$Type, arg1: $EasyGuiGraphics$Type, arg2: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpriteIcon$Type = ($SpriteIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpriteIcon_ = $SpriteIcon$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyHolder" {
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$MoneyHandler, $MoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$MoneyHandler"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"

export class $MoneyHolder extends $MoneyHandler implements $IMoneyHolder {
static readonly "EMPTY": $IMoneyHolder

constructor()

public static "createFromHandler"(arg0: $IMoneyHandler$Type, arg1: $Component$Type, arg2: integer): $IMoneyHolder
public "priority"(): integer
public "getTooltipTitle"(): $Component
public "inversePriority"(): integer
public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public "formatTooltip"(arg0: $List$Type<($Component$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
get "tooltipTitle"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyHolder$Type = ($MoneyHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyHolder_ = $MoneyHolder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeOwnerNotification" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ChangeOwnerNotification extends $Notification {
static readonly "TYPE": $NotificationType<($ChangeOwnerNotification)>

constructor(arg0: $PlayerReference$Type, arg1: $Owner$Type, arg2: $Owner$Type)

public "getMessage"(): $MutableComponent
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeOwnerNotification$Type = ($ChangeOwnerNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeOwnerNotification_ = $ChangeOwnerNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/base/$InfoTab" {
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TraderInterfaceBlockEntity$InteractionType, $TraderInterfaceBlockEntity$InteractionType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$InteractionType"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"

export class $InfoTab extends $TraderInterfaceTab {
static readonly "TAB_INFO": integer
static readonly "TAB_STORAGE": integer
static readonly "TAB_TRADER_SELECT": integer
static readonly "TAB_TRADE_SELECT": integer
static readonly "TAB_OWNERSHIP": integer
readonly "menu": $TraderInterfaceMenu

constructor(arg0: $TraderInterfaceMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "handleMessage"(arg0: $LazyPacketData$Type): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "acceptTradeChanges"(): void
public "changeInteractionType"(arg0: $TraderInterfaceBlockEntity$InteractionType$Type): void
public "createClientTab"(arg0: $TraderInterfaceScreen$Type): $TraderInterfaceClientTab<(any)>
public "onTabClose"(): void
public "onTabOpen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InfoTab$Type = ($InfoTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InfoTab_ = $InfoTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/$IEasyTickable" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IEasyTickable {

 "tick"(): void

(): void
}

export namespace $IEasyTickable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IEasyTickable$Type = ($IEasyTickable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IEasyTickable_ = $IEasyTickable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$WalletHandler" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$MoneyHandler, $MoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$MoneyHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IWalletHandler, $IWalletHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$IWalletHandler"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $WalletHandler extends $MoneyHandler implements $IWalletHandler {

constructor(arg0: $LivingEntity$Type)

public "load"(arg0: $CompoundTag$Type): void
public "clean"(): void
public "save"(): $CompoundTag
public "visible"(): boolean
public "tick"(): void
public "isDirty"(): boolean
public "setVisible"(arg0: boolean): void
public "syncWallet"(arg0: $ItemStack$Type): void
public "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "getWallet"(): $ItemStack
public "entity"(): $LivingEntity
public "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
public "setWallet"(arg0: $ItemStack$Type): void
get "dirty"(): boolean
get "wallet"(): $ItemStack
set "wallet"(value: $ItemStack$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletHandler$Type = ($WalletHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletHandler_ = $WalletHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/util/$ScreenUtil" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$IEasyScreen, $IEasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IEasyScreen"

export class $ScreenUtil {

constructor()

public static "isMouseOver"(arg0: double, arg1: double, arg2: integer, arg3: integer, arg4: integer, arg5: integer): boolean
public static "isMouseOver"(arg0: double, arg1: double, arg2: $ScreenPosition$Type, arg3: integer, arg4: integer): boolean
public static "isMouseOver"(arg0: double, arg1: double, arg2: $IEasyScreen$Type): boolean
public static "isMouseOver"(arg0: integer, arg1: integer, arg2: $IEasyScreen$Type): boolean
public static "isMouseOver"(arg0: integer, arg1: integer, arg2: $ScreenPosition$Type, arg3: integer, arg4: integer): boolean
public static "isMouseOver"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenUtil$Type = ($ScreenUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenUtil_ = $ScreenUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$TraderItemStorage, $TraderItemStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemRequirement, $ItemRequirement$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$ItemRequirement"
import {$TradeDirection, $TradeDirection$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeDirection"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ItemTradeRestriction, $ItemTradeRestriction$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/restrictions/$ItemTradeRestriction"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$TradeComparisonResult, $TradeComparisonResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/comparison/$TradeComparisonResult"
import {$BasicTradeEditTab, $BasicTradeEditTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trades_basic/$BasicTradeEditTab"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"
import {$ItemTraderData, $ItemTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderData"

export class $ItemTradeData extends $TradeData {
static readonly "DEFAULT_KEY": string

constructor(arg0: boolean)

public "compare"(arg0: $TradeData$Type): $TradeComparisonResult
public "isValid"(): boolean
public "getItem"(arg0: integer): $ItemStack
public "loadFromNBT"(arg0: $CompoundTag$Type): void
public "getTradeDirection"(): $TradeDirection
public "getCustomName"(arg0: integer): string
public "hasStock"(arg0: $ItemTraderData$Type): boolean
public "getAsNBT"(): $CompoundTag
public "AcceptableDifferences"(arg0: $TradeComparisonResult$Type): boolean
public "shouldStorageItemBeSaved"(arg0: $ItemStack$Type): boolean
public "OnOutputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "RemoveItemsFromStorage"(arg0: $TraderItemStorage$Type, arg1: $List$Type<($ItemStack$Type)>): void
public "GetDifferenceWarnings"(arg0: $TradeComparisonResult$Type): $List<($Component)>
public "OnInputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "getBarterItem"(arg0: integer): $ItemStack
public "isPurchase"(): boolean
public "isBarter"(): boolean
public "getSellItem"(arg0: integer): $ItemStack
public "getButtonRenderer"(): $TradeRenderManager<(any)>
public "getStock"(arg0: $TradeContext$Type): integer
public "getEnforceNBT"(arg0: integer): boolean
public "getRandomSellItems"(arg0: $ItemTraderData$Type): $List<($ItemStack)>
public "alwaysEnforcesNBT"(arg0: integer): boolean
public "OnInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: integer, arg5: $ItemStack$Type): void
public "setEnforceNBT"(arg0: integer, arg1: boolean): void
public "getItemRequirement"(arg0: integer): $ItemRequirement
public "allowItemInStorage"(arg0: $ItemStack$Type): boolean
public static "getNextInCycle"(arg0: $TradeDirection$Type): $TradeDirection
public "isSale"(): boolean
public "setTradeType"(arg0: $TradeDirection$Type): void
public "canAfford"(arg0: $TradeContext$Type): boolean
public "barterItemsDefined"(): boolean
public "getRestriction"(): $ItemTradeRestriction
public static "loadAllData"(arg0: $CompoundTag$Type, arg1: boolean): $List<($ItemTradeData)>
public static "loadAllData"(arg0: string, arg1: $CompoundTag$Type, arg2: boolean): $List<($ItemTradeData)>
public "stockCount"(arg0: $ItemTraderData$Type): integer
public "sellItemsDefined"(): boolean
public static "saveAllData"(arg0: $CompoundTag$Type, arg1: $List$Type<($ItemTradeData$Type)>): void
public static "saveAllData"(arg0: $CompoundTag$Type, arg1: $List$Type<($ItemTradeData$Type)>, arg2: string): void
public "setRestriction"(arg0: $ItemTradeRestriction$Type): void
public static "listOfSize"(arg0: integer, arg1: boolean): $List<($ItemTradeData)>
public static "loadTradeType"(arg0: string): $TradeDirection
public "onSlotInteraction"(arg0: integer, arg1: $ItemStack$Type, arg2: integer): void
public static "loadData"(arg0: $CompoundTag$Type, arg1: boolean): $ItemTradeData
public "hasCustomName"(arg0: integer): boolean
public "isMoneyRelevant"(): boolean
public "hasSpace"(arg0: $ItemTraderData$Type, arg1: $List$Type<($ItemStack$Type)>): boolean
public "setCustomName"(arg0: integer, arg1: string): void
public "setItem"(arg0: $ItemStack$Type, arg1: integer): void
get "valid"(): boolean
get "tradeDirection"(): $TradeDirection
get "asNBT"(): $CompoundTag
get "purchase"(): boolean
get "barter"(): boolean
get "buttonRenderer"(): $TradeRenderManager<(any)>
get "sale"(): boolean
set "tradeType"(value: $TradeDirection$Type)
get "restriction"(): $ItemTradeRestriction
set "restriction"(value: $ItemTradeRestriction$Type)
get "moneyRelevant"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTradeData$Type = ($ItemTradeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTradeData_ = $ItemTradeData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/client/$LCItemPositionProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ItemPositionProvider, $ItemPositionProvider$Type} from "packages/io/github/lightman314/lightmanscurrency/datagen/client/generators/$ItemPositionProvider"

export class $LCItemPositionProvider extends $ItemPositionProvider {
static readonly "MO": float

constructor(arg0: $PackOutput$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCItemPositionProvider$Type = ($LCItemPositionProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCItemPositionProvider_ = $LCItemPositionProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$ATMMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IBankAccountAdvancedMenu, $IBankAccountAdvancedMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/menu/$IBankAccountAdvancedMenu"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ATMMenu extends $LazyMessageMenu implements $IBankAccountAdvancedMenu {
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $MenuValidator$Type)

public "removed"(arg0: $Player$Type): void
public "SendCoinExchangeMessage"(arg0: string): void
public "SetNotificationValueAndUpdate"(arg0: string, arg1: $MoneyValue$Type): void
public "getPlayer"(): $Player
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "setTransferMessage"(arg0: $MutableComponent$Type): void
public "hasTransferMessage"(): boolean
public "getMoneyHandler"(): $IMoneyHandler
public "clearMessage"(): void
public "SetPlayerAccount"(arg0: string): $MutableComponent
public "ExchangeCoins"(arg0: string): void
public "getTransferMessage"(): $MutableComponent
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "onDepositOrWithdraw"(): void
public "getBankAccountReference"(): $BankReference
public "getBankAccount"(): $IBankAccount
get "player"(): $Player
set "transferMessage"(value: $MutableComponent$Type)
get "moneyHandler"(): $IMoneyHandler
get "transferMessage"(): $MutableComponent
get "bankAccountReference"(): $BankReference
get "bankAccount"(): $IBankAccount
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMMenu$Type = ($ATMMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMMenu_ = $ATMMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestSecurityUpgrade" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$CoinChestUpgrade, $CoinChestUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgrade"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CoinChestMenu, $CoinChestMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinChestMenu"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CoinChestUpgradeData, $CoinChestUpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgradeData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"

export class $CoinChestSecurityUpgrade extends $CoinChestUpgrade {

constructor()

public "isMember"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type, arg2: $Player$Type): boolean
public "getTooltip"(arg0: $UpgradeData$Type): $List<($Component)>
public "BlockAccess"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type, arg2: $Player$Type): boolean
public "OnBlockRemoval"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "OnEquip"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "OnValidBlockRemoval"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "addClientTabs"(arg0: $CoinChestUpgradeData$Type, arg1: any, arg2: $Consumer$Type<(any)>): void
public "clearDataFromStack"(arg0: $CompoundTag$Type): boolean
public "HandleMenuMessage"(arg0: $CoinChestMenu$Type, arg1: $CoinChestUpgradeData$Type, arg2: $LazyPacketData$Type): void
public "saveOwnerData"(arg0: $CoinChestUpgradeData$Type, arg1: $OwnerData$Type): void
public "parseOwnerData"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): $OwnerData
public "isAdmin"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type, arg2: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestSecurityUpgrade$Type = ($CoinChestSecurityUpgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestSecurityUpgrade_ = $CoinChestSecurityUpgrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/old_compat/$OldCoinData" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"

/**
 * 
 * @deprecated
 */
export class $OldCoinData {
readonly "coinItem": $Item
readonly "chain": string
readonly "worthOtherCoin": $Item
readonly "worthOtherCoinCount": integer
readonly "initialTranslation": string
readonly "pluralTranslation": string
readonly "isHidden": boolean


public static "parse"(arg0: $JsonObject$Type): $OldCoinData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OldCoinData$Type = ($OldCoinData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OldCoinData_ = $OldCoinData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/crafting/$LCRecipeProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$RecipeProvider, $RecipeProvider$Type} from "packages/net/minecraft/data/recipes/$RecipeProvider"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"

export class $LCRecipeProvider extends $RecipeProvider {

constructor(arg0: $PackOutput$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCRecipeProvider$Type = ($LCRecipeProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCRecipeProvider_ = $LCRecipeProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler" {
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export interface $IMoneyHandler extends $IMoneyViewer {

 "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
 "flagAsKnown"(arg0: any): void
 "forgetContext"(arg0: any): void
 "hasStoredMoneyChanged"(arg0: any): boolean
 "getStoredMoney"(): $MoneyView
}

export namespace $IMoneyHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMoneyHandler$Type = ($IMoneyHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMoneyHandler_ = $IMoneyHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/handlers/$ConfigurableSidedHandler" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ConfigurableSidedHandler$DirectionalSettings, $ConfigurableSidedHandler$DirectionalSettings$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/handlers/$ConfigurableSidedHandler$DirectionalSettings"
import {$SidedHandler, $SidedHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/handlers/$SidedHandler"

export class $ConfigurableSidedHandler<H> extends $SidedHandler<(H)> {


public "load"(arg0: $CompoundTag$Type): void
public "save"(): $CompoundTag
public "receiveMessage"(arg0: $CompoundTag$Type): void
public "toggleOutputSide"(arg0: $Direction$Type): void
public static "isUpdateType"(arg0: $CompoundTag$Type, arg1: string): boolean
public "toggleInputSide"(arg0: $Direction$Type): void
public static "initUpdateInfo"(arg0: string): $CompoundTag
public "getOutputSides"(): $ConfigurableSidedHandler$DirectionalSettings
public "getInputSides"(): $ConfigurableSidedHandler$DirectionalSettings
get "outputSides"(): $ConfigurableSidedHandler$DirectionalSettings
get "inputSides"(): $ConfigurableSidedHandler$DirectionalSettings
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigurableSidedHandler$Type<H> = ($ConfigurableSidedHandler<(H)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigurableSidedHandler_<H> = $ConfigurableSidedHandler$Type<(H)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/teams/$SPacketCreateTeamResponse" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketCreateTeamResponse extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketCreateTeamResponse)>

constructor(arg0: long)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketCreateTeamResponse$Type = ($SPacketCreateTeamResponse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketCreateTeamResponse_ = $SPacketCreateTeamResponse$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/client/builders/$ItemPositionBuilder" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"

export class $ItemPositionBuilder {


public static "builder"(): $ItemPositionBuilder
public "write"(): $JsonObject
public "withEntry"(arg0: $Vector3f$Type, arg1: string): $ItemPositionBuilder
public "withEntry"(arg0: $Vector3f$Type, arg1: float): $ItemPositionBuilder
public "withEntry"(arg0: $Vector3f$Type, arg1: integer, arg2: $Vector3f$Type): $ItemPositionBuilder
public "withEntry"(arg0: $Vector3f$Type, arg1: integer, arg2: $Vector3f$Type, arg3: float): $ItemPositionBuilder
public "withEntry"(arg0: $Vector3f$Type, arg1: integer, arg2: $Vector3f$Type, arg3: string): $ItemPositionBuilder
public "withEntry"(arg0: $Vector3f$Type, arg1: integer, arg2: $Vector3f$Type, arg3: float, arg4: string): $ItemPositionBuilder
public "withEntry"(arg0: $Vector3f$Type, arg1: float, arg2: string): $ItemPositionBuilder
public "withEntry"(arg0: $Vector3f$Type): $ItemPositionBuilder
public "withGlobalScale"(arg0: float): $ItemPositionBuilder
public "withGlobalExtraCount"(arg0: integer): $ItemPositionBuilder
public "withGlobalRotationType"(arg0: string): $ItemPositionBuilder
public "withGlobalExtraOffset"(arg0: $Vector3f$Type): $ItemPositionBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemPositionBuilder$Type = ($ItemPositionBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemPositionBuilder_ = $ItemPositionBuilder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/advancements/$LCAdvancementTriggers" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCAdvancementTriggers {

constructor()

public static "setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCAdvancementTriggers$Type = ($LCAdvancementTriggers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCAdvancementTriggers_ = $LCAdvancementTriggers$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$ScrollBarWidget" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$IMouseListener, $IMouseListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener"
import {$WidgetAddon, $WidgetAddon$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon"
import {$IPreRender, $IPreRender$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IPreRender"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ScrollBarWidget extends $EasyWidget implements $IMouseListener, $IPreRender {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "WIDTH": integer
static readonly "KNOB_HEIGHT": integer
static readonly "SMALL_KNOB_HEIGHT": integer
 "smallKnob": boolean
 "isDragging": boolean
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: $IScrollable$Type)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: $IScrollable$Type)

public "visible"(): boolean
public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
/**
 * 
 * @deprecated
 */
public "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
/**
 * 
 * @deprecated
 */
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "preRender"(arg0: $EasyGuiGraphics$Type): void
public "withAddons"(...arg0: ($WidgetAddon$Type)[]): $ScrollBarWidget
public "playDownSound"(arg0: $SoundManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollBarWidget$Type = ($ScrollBarWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollBarWidget_ = $ScrollBarWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/wallet/$SPacketPlayPickupSound" {
import {$ServerToClientPacket$Simple, $ServerToClientPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketPlayPickupSound extends $ServerToClientPacket$Simple {
static readonly "INSTANCE": $SPacketPlayPickupSound
static readonly "HANDLER": $CustomPacket$Handler<($SPacketPlayPickupSound)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketPlayPickupSound$Type = ($SPacketPlayPickupSound);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketPlayPickupSound_ = $SPacketPlayPickupSound$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$ItemsForMapTrade$Serializer" {
import {$ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingSerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingSerializer"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ItemListingSerializer$IItemListingDeserializer, $ItemListingSerializer$IItemListingDeserializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingDeserializer"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ItemsForMapTrade$Serializer implements $ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingDeserializer {


public "getType"(): $ResourceLocation
public "deserialize"(arg0: $JsonObject$Type): $VillagerTrades$ItemListing
public "serializeInternal"(arg0: $JsonObject$Type, arg1: $VillagerTrades$ItemListing$Type): $JsonObject
public "serialize"(arg0: $VillagerTrades$ItemListing$Type): $JsonObject
get "type"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemsForMapTrade$Serializer$Type = ($ItemsForMapTrade$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemsForMapTrade$Serializer_ = $ItemsForMapTrade$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/rule_tabs/$TimedSaleTab" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TimeUtil$TimeData, $TimeUtil$TimeData$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeData"
import {$TradeRuleSubTab, $TradeRuleSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRuleSubTab"
import {$TimedSale, $TimedSale$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$TimedSale"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TimedSaleTab extends $TradeRuleSubTab<($TimedSale)> {
readonly "ruleType": $TradeRuleType<(T)>
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TradeRulesClientTab$Type<(any)>)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "onTimeSet"(arg0: $TimeUtil$TimeData$Type): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimedSaleTab$Type = ($TimedSaleTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimedSaleTab_ = $TimedSaleTab$Type;
}}
declare module "packages/io/github/steveplays28/noisium/util/forge/$ModUtilImpl" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ModUtilImpl {

constructor()

public static "isModPresent"(id: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModUtilImpl$Type = ($ModUtilImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModUtilImpl_ = $ModUtilImpl$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$CoinBlock" {
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$FallingBlock, $FallingBlock$Type} from "packages/net/minecraft/world/level/block/$FallingBlock"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CoinBlock extends $FallingBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $Supplier$Type<($Item$Type)>)

public "getOcclusionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): $VoxelShape
public "onLand"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $BlockState$Type, arg4: $FallingBlockEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinBlock$Type = ($CoinBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinBlock_ = $CoinBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamOwnerTab" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$TeamTab, $TeamTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamTab"
import {$TeamManagerScreen, $TeamManagerScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$TeamManagerScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TeamOwnerTab extends $TeamTab {

constructor(arg0: $TeamManagerScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "allowViewing"(arg0: $Player$Type, arg1: $Team$Type): boolean
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamOwnerTab$Type = ($TeamOwnerTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamOwnerTab_ = $TeamOwnerTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$OwnerSelectionWidget" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$PotentialOwnerList, $PotentialOwnerList$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwnerList"
import {$EasyWidgetWithChildren, $EasyWidgetWithChildren$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $OwnerSelectionWidget extends $EasyWidgetWithChildren implements $IScrollable {
static readonly "SEARCH_BOX_TEXTURE": $ResourceLocation
readonly "list": $PotentialOwnerList
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Supplier$Type<($OwnerData$Type)>, arg5: $Consumer$Type<($Owner$Type)>, arg6: $OwnerSelectionWidget$Type)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Supplier$Type<($OwnerData$Type)>, arg4: $Consumer$Type<($Owner$Type)>, arg5: $OwnerSelectionWidget$Type)

public "addChildren"(): void
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnerSelectionWidget$Type = ($OwnerSelectionWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnerSelectionWidget_ = $OwnerSelectionWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$ITallBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ITallBlock {

 "getIsBottom"(arg0: $BlockState$Type): boolean
 "isReplaceable"(arg0: $Level$Type, arg1: $BlockPos$Type): boolean
 "getIsTop"(arg0: $BlockState$Type): boolean
 "getOtherHeight"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockPos
}

export namespace $ITallBlock {
const ISBOTTOM: $BooleanProperty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITallBlock$Type = ($ITallBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITallBlock_ = $ITallBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$TradeButton" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$ITooltipSource, $ITooltipSource$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$DisplayData, $DisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TradeButtonArea$InteractionConsumer, $TradeButtonArea$InteractionConsumer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$TradeButtonArea$InteractionConsumer"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"

export class $TradeButton extends $EasyButton implements $ITooltipSource {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "ARROW_WIDTH": integer
static readonly "ARROW_HEIGHT": integer
static readonly "TEMPLATE_WIDTH": integer
static readonly "BUTTON_HEIGHT": integer
 "displayOnly": boolean
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $Supplier$Type<($TradeContext$Type)>, arg1: $Supplier$Type<($TradeData$Type)>, arg2: $Consumer$Type<($EasyButton$Type)>)

public "getContext"(): $TradeContext
/**
 * 
 * @deprecated
 */
public "move"(arg0: integer, arg1: integer): void
public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
public "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
public "getTrade"(): $TradeData
public "onInteractionClick"(arg0: integer, arg1: integer, arg2: integer, arg3: $TradeButtonArea$InteractionConsumer$Type): void
public "getTradeRenderer"(): $TradeRenderManager<(any)>
public "isMouseOverAlert"(arg0: integer, arg1: integer, arg2: $TradeRenderManager$Type<(any)>, arg3: $TradeContext$Type): boolean
public "renderDisplays"(arg0: $EasyGuiGraphics$Type, arg1: $TradeRenderManager$Type<(any)>, arg2: $TradeContext$Type): void
public static "getInputDisplayData"(arg0: $TradeRenderManager$Type<(any)>, arg1: $TradeContext$Type): $List<($Pair<($DisplayEntry), ($DisplayData)>)>
public static "getOutputDisplayData"(arg0: $TradeRenderManager$Type<(any)>, arg1: $TradeContext$Type): $List<($Pair<($DisplayEntry), ($DisplayData)>)>
get "context"(): $TradeContext
get "trade"(): $TradeData
get "tradeRenderer"(): $TradeRenderManager<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeButton$Type = ($TradeButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeButton_ = $TradeButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/auction/$AuctionStorageClientTab" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$IMouseListener, $IMouseListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$AuctionStorageTab, $AuctionStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/auction/$AuctionStorageTab"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $AuctionStorageClientTab extends $TraderStorageClientTab<($AuctionStorageTab)> implements $IScrollable, $IMouseListener {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $AuctionStorageTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
public "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
get "icon"(): $IconData
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionStorageClientTab$Type = ($AuctionStorageClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionStorageClientTab_ = $AuctionStorageClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TraderInterfaceScreen extends $EasyMenuScreen<($TraderInterfaceMenu)> {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "WIDTH": integer
static readonly "HEIGHT": integer
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $TraderInterfaceMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "initialize"(arg0: $ScreenArea$Type): void
public "blockInventoryClosing"(): boolean
public "screenTick"(): void
public "currentTab"(): $TraderInterfaceClientTab<(any)>
public "changeTab"(arg0: integer): void
public "changeTab"(arg0: integer, arg1: boolean, arg2: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderInterfaceScreen$Type = ($TraderInterfaceScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderInterfaceScreen_ = $TraderInterfaceScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$IMoneyCollectionMenu, $IMoneyCollectionMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/$IMoneyCollectionMenu"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$InteractionSlot, $InteractionSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$InteractionSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$EasyMenu, $EasyMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$EasyMenu"
import {$ITraderMenu, $ITraderMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/customer/$ITraderMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IValidatedMenu, $IValidatedMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$IValidatedMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TraderMenu extends $EasyMenu implements $IValidatedMenu, $ITraderMenu, $IMoneyCollectionMenu {
static readonly "SLOT_OFFSET": integer
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: long, arg3: $MenuValidator$Type)

public "getContext"(arg0: $TraderData$Type): $TradeContext
public "getValidator"(): $MenuValidator
public "getInteractionSlot"(): $InteractionSlot
public "getCoinSlots"(): $List<($Slot)>
public "getTraderSource"(): $ITraderSource
public "isSingleTrader"(): boolean
public "getSingleTrader"(): $TraderData
public "getSlots"(): $List<($Slot)>
public "removed"(arg0: $Player$Type): void
public "getPlayer"(): $Player
public "CollectStoredMoney"(): void
public "ExecuteTrade"(arg0: integer, arg1: integer): void
public "getHeldItem"(): $ItemStack
public "setHeldItem"(arg0: $ItemStack$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
get "validator"(): $MenuValidator
get "interactionSlot"(): $InteractionSlot
get "coinSlots"(): $List<($Slot)>
get "traderSource"(): $ITraderSource
get "singleTrader"(): boolean
get "singleTrader"(): $TraderData
get "slots"(): $List<($Slot)>
get "player"(): $Player
get "heldItem"(): $ItemStack
set "heldItem"(value: $ItemStack$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderMenu$Type = ($TraderMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderMenu_ = $TraderMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$LCUpgradeSmithingTemplateItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MultiLineTextEntry, $MultiLineTextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$MultiLineTextEntry"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LCUpgradeSmithingTemplateItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $MultiLineTextEntry$Type, arg1: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCUpgradeSmithingTemplateItem$Type = ($LCUpgradeSmithingTemplateItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCUpgradeSmithingTemplateItem_ = $LCUpgradeSmithingTemplateItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"

export class $TraderInterfaceTab {
static readonly "TAB_INFO": integer
static readonly "TAB_STORAGE": integer
static readonly "TAB_TRADER_SELECT": integer
static readonly "TAB_TRADE_SELECT": integer
static readonly "TAB_OWNERSHIP": integer
readonly "menu": $TraderInterfaceMenu


public "canOpen"(arg0: $Player$Type): boolean
public "handleMessage"(arg0: $LazyPacketData$Type): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
/**
 * 
 * @deprecated
 */
public "receiveMessage"(arg0: $CompoundTag$Type): void
public "createClientTab"(arg0: $TraderInterfaceScreen$Type): $TraderInterfaceClientTab<(any)>
public "onTabClose"(): void
public "onMenuClose"(): void
public "onTabOpen"(): void
public "quickMoveStack"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderInterfaceTab$Type = ($TraderInterfaceTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderInterfaceTab_ = $TraderInterfaceTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/builtin/$ItemIcon" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$IconType, $IconType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$IconType"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ATMExchangeButton, $ATMExchangeButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/atm/$ATMExchangeButton"
import {$ATMIconData, $ATMIconData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$ATMIconData"

export class $ItemIcon extends $ATMIconData {
static readonly "TYPE_NAME": $ResourceLocation
static readonly "TYPE": $IconType

constructor(arg0: integer, arg1: integer, arg2: $ItemStack$Type)
constructor(arg0: integer, arg1: integer, arg2: $ItemLike$Type)
constructor(arg0: $JsonObject$Type)

public "render"(arg0: $ATMExchangeButton$Type, arg1: $EasyGuiGraphics$Type, arg2: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemIcon$Type = ($ItemIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemIcon_ = $ItemIcon$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil" {
import {$TimeUtil$TimeData, $TimeUtil$TimeData$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeData"

export class $TimeUtil {
static readonly "DURATION_SECOND": long
static readonly "DURATION_MINUTE": long
static readonly "DURATION_HOUR": long
static readonly "DURATION_DAY": long

constructor()

public static "getDuration"(arg0: long, arg1: long, arg2: long, arg3: long): long
public static "compareTime"(arg0: long, arg1: long): boolean
public static "getCurrentTime"(): long
public static "formatTime"(arg0: long): string
/**
 * 
 * @deprecated
 */
public static "separateDuration"(arg0: long): $TimeUtil$TimeData
get "currentTime"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimeUtil$Type = ($TimeUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimeUtil_ = $TimeUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$NotificationEvent" {
import {$NotificationData, $NotificationData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationData"
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"

export class $NotificationEvent extends $Event {

constructor()
constructor(arg0: $UUID$Type, arg1: $NotificationData$Type, arg2: $Notification$Type)

public "getData"(): $NotificationData
public "isCancelable"(): boolean
public "getPlayerID"(): $UUID
public "getNotification"(): $Notification
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "data"(): $NotificationData
get "cancelable"(): boolean
get "playerID"(): $UUID
get "notification"(): $Notification
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationEvent$Type = ($NotificationEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationEvent_ = $NotificationEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$TeamSelectWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$WidgetAddon, $WidgetAddon$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon"
import {$TeamButton$Size, $TeamButton$Size$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$TeamButton$Size"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$EasyWidgetWithChildren, $EasyWidgetWithChildren$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"

export class $TeamSelectWidget extends $EasyWidgetWithChildren {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: $TeamButton$Size$Type, arg4: $Supplier$Type<($List$Type<($Team$Type)>)>, arg5: $Supplier$Type<($Team$Type)>, arg6: $Consumer$Type<(integer)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: $TeamButton$Size$Type, arg3: $Supplier$Type<($List$Type<($Team$Type)>)>, arg4: $Supplier$Type<($Team$Type)>, arg5: $Consumer$Type<(integer)>)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: $Supplier$Type<($List$Type<($Team$Type)>)>, arg4: $Supplier$Type<($Team$Type)>, arg5: $Consumer$Type<(integer)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: $Supplier$Type<($List$Type<($Team$Type)>)>, arg3: $Supplier$Type<($Team$Type)>, arg4: $Consumer$Type<(integer)>)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "addChildren"(): void
public "withAddons"(...arg0: ($WidgetAddon$Type)[]): $TeamSelectWidget
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "playDownSound"(arg0: $SoundManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamSelectWidget$Type = ($TeamSelectWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamSelectWidget_ = $TeamSelectWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/capacity/$CapacityUpgrade" {
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"

export class $CapacityUpgrade extends $UpgradeType {
static "CAPACITY": string

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapacityUpgrade$Type = ($CapacityUpgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapacityUpgrade_ = $CapacityUpgrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/$LightmansCurrencyPacketHandler" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PacketDistributor$PacketTarget, $PacketDistributor$PacketTarget$Type} from "packages/net/minecraftforge/network/$PacketDistributor$PacketTarget"
import {$SimpleChannel, $SimpleChannel$Type} from "packages/net/minecraftforge/network/simple/$SimpleChannel"

export class $LightmansCurrencyPacketHandler {
static readonly "PROTOCOL_VERSION": string
static "instance": $SimpleChannel

constructor()

public static "init"(): void
public static "getTarget"(arg0: $ServerPlayer$Type): $PacketDistributor$PacketTarget
public static "getTarget"(arg0: $Player$Type): $PacketDistributor$PacketTarget
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightmansCurrencyPacketHandler$Type = ($LightmansCurrencyPacketHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightmansCurrencyPacketHandler_ = $LightmansCurrencyPacketHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$TaxStats, $TaxStats$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/data/$TaxStats"
import {$ITaxable, $ITaxable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxable"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$WorldArea, $WorldArea$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/world/$WorldArea"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$TaxableReference, $TaxableReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxableReference"
import {$WorldPosition, $WorldPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/world/$WorldPosition"
import {$ITaxCollector, $ITaxCollector$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxCollector"
import {$MoneyStorage, $MoneyStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage"

export class $TaxEntry implements $ITaxCollector {
readonly "stats": $TaxStats

constructor(arg0: long, arg1: $BlockEntity$Type, arg2: $Player$Type)
constructor()

public "getName"(): $MutableComponent
public "load"(arg0: $CompoundTag$Type): void
public "setName"(arg0: string): void
public "save"(): $CompoundTag
public "canAccess"(arg0: $Player$Type): boolean
public "isActive"(): boolean
public "getOwner"(): $OwnerData
public "unlock"(): $TaxEntry
public "getID"(): long
public "getNotifications"(): $List<($Notification)>
public "getRadius"(): integer
public "getCenter"(): $WorldPosition
public "setRadius"(arg0: integer): void
public "openMenu"(arg0: $Player$Type, arg1: $MenuValidator$Type): void
public "setActive"(arg0: boolean, arg1: $Player$Type): void
public "getCustomName"(): string
public "isClient"(): boolean
public static "maxHeight"(): integer
public "getHeight"(): integer
public "shouldRender"(arg0: $Player$Type): boolean
public "PushNotification"(arg0: $NonNullSupplier$Type<($Notification$Type)>): void
public "isServerEntry"(): boolean
public "markCenterDirty"(): void
public "moveCenter"(arg0: $WorldPosition$Type): void
public static "minRadius"(): integer
public "markAreaDirty"(): void
public "setVertOffset"(arg0: integer): void
public static "minVertOffset"(): integer
public "isInfiniteRange"(): boolean
public "getVertOffset"(): integer
public "getRenderMode"(): integer
public "getAcceptedEntries"(): $List<($TaxableReference)>
public "ShouldTax"(arg0: $ITaxable$Type): boolean
public "isLinkedToBank"(): boolean
public "markNameDirty"(): void
public "setInfiniteRange"(arg0: boolean): void
public "setRenderMode"(arg0: integer): void
public "clearStoredMoney"(): void
public "setTaxRate"(arg0: integer): void
public "forcesAcceptance"(): boolean
public "setForceAcceptance"(arg0: boolean): void
public "markBankStateDirty"(): void
public "IsInArea"(arg0: $ITaxable$Type): boolean
public "AcceptTaxable"(arg0: $ITaxable$Type): void
public "markOwnerDirty"(): void
public "getArea"(): $WorldArea
public "flagAsClient"(): $TaxEntry
public "TaxableWasRemoved"(arg0: $ITaxable$Type): void
public "getBankAccount"(): $IBankAccount
public "depositMoney"(arg0: $MoneyValue$Type): void
public "hasCustomName"(): boolean
public "setLinkedToBank"(arg0: boolean): void
public "getTaxRate"(): integer
public "markStatsDirty"(): void
public static "minHeight"(): integer
public "getRenderColor"(arg0: $Player$Type): integer
public "setHeight"(arg0: integer): void
public static "maxTaxRate"(): integer
public static "maxRadius"(): integer
public static "maxVertOffset"(): integer
public "markRenderModeDirty"(): void
public "markTaxPercentageDirty"(): void
public "markNotificationsDirty"(): void
public "markAcceptedEntriesDirty"(): void
public "markActiveStateDirty"(): void
public "markAdminStateDirty"(): void
public "markStoredMoneyDirty"(): void
public "CalculateAndPayTaxes"(arg0: $ITaxable$Type, arg1: $MoneyValue$Type): $MoneyValue
public "getStoredMoney"(): $MoneyStorage
public "isServer"(): boolean
get "name"(): $MutableComponent
set "name"(value: string)
get "active"(): boolean
get "owner"(): $OwnerData
get "iD"(): long
get "notifications"(): $List<($Notification)>
get "radius"(): integer
get "center"(): $WorldPosition
set "radius"(value: integer)
get "customName"(): string
get "client"(): boolean
get "height"(): integer
get "serverEntry"(): boolean
set "vertOffset"(value: integer)
get "infiniteRange"(): boolean
get "vertOffset"(): integer
get "renderMode"(): integer
get "acceptedEntries"(): $List<($TaxableReference)>
get "linkedToBank"(): boolean
set "infiniteRange"(value: boolean)
set "renderMode"(value: integer)
set "taxRate"(value: integer)
set "forceAcceptance"(value: boolean)
get "area"(): $WorldArea
get "bankAccount"(): $IBankAccount
set "linkedToBank"(value: boolean)
get "taxRate"(): integer
set "height"(value: integer)
get "storedMoney"(): $MoneyStorage
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxEntry$Type = ($TaxEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxEntry_ = $TaxEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$BasicSettingsTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $BasicSettingsTab extends $TaxCollectorTab {
readonly "menu": $TaxCollectorMenu

constructor(arg0: $TaxCollectorMenu$Type)

public "SetActive"(arg0: boolean): void
public "addMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "SetRadius"(arg0: integer): void
public "SetVertOffset"(arg0: integer): void
public "SetRate"(arg0: integer): void
public "SetRenderMode"(arg0: integer): void
public "SetHeight"(arg0: integer): void
public "SetName"(arg0: string): void
public "SetBankAccountLink"(arg0: boolean): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasicSettingsTab$Type = ($BasicSettingsTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasicSettingsTab_ = $BasicSettingsTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeCreativeNotification" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ChangeCreativeNotification extends $Notification {
static readonly "TYPE": $NotificationType<($ChangeCreativeNotification)>

constructor(arg0: $PlayerReference$Type, arg1: boolean)

public "getMessage"(): $MutableComponent
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeCreativeNotification$Type = ($ChangeCreativeNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeCreativeNotification_ = $ChangeCreativeNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IPreRender" {
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"

export interface $IPreRender {

 "preRender"(arg0: $EasyGuiGraphics$Type): void

(arg0: $EasyGuiGraphics$Type): void
}

export namespace $IPreRender {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPreRender$Type = ($IPreRender);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPreRender_ = $IPreRender$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketStationRecipe" {
import {$InputReplacement, $InputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$InputReplacement"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$RecipeSchema, $RecipeSchema$Type} from "packages/dev/latvian/mods/kubejs/recipe/schema/$RecipeSchema"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ReplacementMatch, $ReplacementMatch$Type} from "packages/dev/latvian/mods/kubejs/recipe/$ReplacementMatch"
import {$OutputReplacement, $OutputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$OutputReplacement"

export interface $TicketStationRecipe extends $Recipe<($Container)> {

 "getIngredient"(): $Ingredient
 "validIngredient"(arg0: $ItemStack$Type): boolean
 "jeiModifierList"(): $List<($ItemStack)>
 "exampleResult"(): $ItemStack
 "consumeModifier"(): boolean
 "peekAtResult"(arg0: $Container$Type): $ItemStack
 "validModifier"(arg0: $ItemStack$Type): boolean
 "matches"(arg0: $Container$Type, arg1: $Level$Type): boolean
 "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
 "getRemainingItems"(arg0: $Container$Type): $NonNullList<($ItemStack)>
 "getIngredients"(): $NonNullList<($Ingredient)>
 "getToastSymbol"(): $ItemStack
 "isIncomplete"(): boolean
 "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
 "getSerializer"(): $RecipeSerializer<(any)>
 "showNotification"(): boolean
 "assemble"(arg0: $Container$Type, arg1: $RegistryAccess$Type): $ItemStack
 "getId"(): $ResourceLocation
 "isSpecial"(): boolean
 "getType"(): $ResourceLocation
 "replaceOutput"(match: $ReplacementMatch$Type, arg1: $OutputReplacement$Type): boolean
 "setGroup"(group: string): void
 "hasInput"(match: $ReplacementMatch$Type): boolean
 "getOrCreateId"(): $ResourceLocation
 "getSchema"(): $RecipeSchema
 "replaceInput"(match: $ReplacementMatch$Type, arg1: $InputReplacement$Type): boolean
 "hasOutput"(match: $ReplacementMatch$Type): boolean
 "getGroup"(): string
 "getMod"(): string
}

export namespace $TicketStationRecipe {
function exampleModifierList(arg0: $TagKey$Type<($Item$Type)>, ...arg1: ($Item$Type)[]): $List<($ItemStack)>
function exampleTicketList(arg0: $RegistryObject$Type<(any)>): $List<($ItemStack)>
function exampleTicketList(arg0: $Ingredient$Type): $List<($ItemStack)>
function exampleTicketList(arg0: $Item$Type): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketStationRecipe$Type = ($TicketStationRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketStationRecipe_ = $TicketStationRecipe$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/auction/$AuctionTradeCancelTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"

export class $AuctionTradeCancelTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "cancelAuction"(arg0: boolean): void
public "getTradeIndex"(): integer
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "getTrade"(): $AuctionTradeData
public "setTradeIndex"(arg0: integer): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
get "tradeIndex"(): integer
get "trade"(): $AuctionTradeData
set "tradeIndex"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionTradeCancelTab$Type = ($AuctionTradeCancelTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionTradeCancelTab_ = $AuctionTradeCancelTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/$OwnershipAPI" {
import {$IPotentialOwnerProvider, $IPotentialOwnerProvider$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$IPotentialOwnerProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PotentialOwner, $PotentialOwner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner"
import {$List, $List$Type} from "packages/java/util/$List"
import {$OwnerType, $OwnerType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$OwnerType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $OwnershipAPI {
static readonly "API": $OwnershipAPI

constructor()

public "getPotentialOwners"(arg0: $Player$Type): $List<($PotentialOwner)>
public "getOwnerType"(arg0: $ResourceLocation$Type): $OwnerType
public "registerOwnerType"(arg0: $OwnerType$Type): void
public "registerPotentialOwnerProvider"(arg0: $IPotentialOwnerProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnershipAPI$Type = ($OwnershipAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnershipAPI_ = $OwnershipAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/stats/types/$MultiMoneyStat" {
import {$StatType, $StatType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType"
import {$StatType$Instance, $StatType$Instance$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType$Instance"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $MultiMoneyStat extends $StatType<($MoneyView), ($MoneyValue)> {
static readonly "TYPE": $ResourceLocation
static readonly "INSTANCE": $StatType<($MoneyView), ($MoneyValue)>


public "create"(): $StatType$Instance<($MoneyView), ($MoneyValue)>
public "getID"(): $ResourceLocation
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiMoneyStat$Type = ($MultiMoneyStat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiMoneyStat_ = $MultiMoneyStat$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/input/$MoneyInputHandler" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$MoneyValueWidget, $MoneyValueWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/input/$MoneyValueWidget"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $MoneyInputHandler {

constructor()

public "initialize"(arg0: $ScreenArea$Type): void
public "setup"(arg0: $MoneyValueWidget$Type, arg1: $Consumer$Type<(any)>, arg2: $Consumer$Type<(any)>, arg3: $Consumer$Type<($MoneyValue$Type)>): void
public "close"(): void
public "inputName"(): $MutableComponent
public "renderTick"(): void
public "getUniqueName"(): string
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "onValueChanged"(arg0: $MoneyValue$Type): void
get "uniqueName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyInputHandler$Type = ($MoneyInputHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyInputHandler_ = $MoneyInputHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/text/$CombinedTextEntry" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $CombinedTextEntry {

constructor(arg0: $List$Type<($Supplier$Type<(string)>)>)

public "forEachKey"(arg0: $Consumer$Type<(string)>): void
public static "items"(...arg0: ($RegistryObject$Type<(any)>)[]): $CombinedTextEntry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CombinedTextEntry$Type = ($CombinedTextEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CombinedTextEntry_ = $CombinedTextEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/teams/$CPacketCreateTeam" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketCreateTeam extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketCreateTeam)>

constructor(arg0: string)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketCreateTeam$Type = ($CPacketCreateTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketCreateTeam_ = $CPacketCreateTeam$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/$TraderStatsClientTab" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$TraderStatsTab, $TraderStatsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/$TraderStatsTab"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $TraderStatsClientTab extends $TraderStorageClientTab<($TraderStatsTab)> implements $IScrollable {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $TraderStatsTab$Type)

public "tick"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "icon"(): $IconData
get "tooltip"(): $Component
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderStatsClientTab$Type = ($TraderStatsClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderStatsClientTab_ = $TraderStatsClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/tax/$SPacketRemoveTax" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketRemoveTax extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketRemoveTax)>

constructor(arg0: long)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketRemoveTax$Type = ($SPacketRemoveTax);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketRemoveTax_ = $SPacketRemoveTax$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/types/$BlockValidator" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MenuValidatorType, $MenuValidatorType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidatorType"

export class $BlockValidator extends $MenuValidator {
static readonly "TYPE": $MenuValidatorType
readonly "type": $MenuValidatorType


public static "of"(arg0: $BlockPos$Type, arg1: $Block$Type): $MenuValidator
public "stillValid"(arg0: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockValidator$Type = ($BlockValidator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockValidator_ = $BlockValidator$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$ScreenPositionOption" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $ScreenPositionOption extends $ConfigOption<($ScreenPosition)> {
static readonly "PARSER": $ConfigParser<($ScreenPosition)>
static readonly "INT_PARSER": $ConfigParser<(integer)>


public static "create"(arg0: $ScreenPosition$Type): $ScreenPositionOption
public static "create"(arg0: $NonNullSupplier$Type<($ScreenPosition$Type)>): $ScreenPositionOption
public static "create"(arg0: integer, arg1: integer): $ScreenPositionOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenPositionOption$Type = ($ScreenPositionOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenPositionOption_ = $ScreenPositionOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$LongListOption" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ListOption, $ListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ListOption"

export class $LongListOption extends $ListOption<(long)> {


public static "create"(arg0: $List$Type<(long)>, arg1: long, arg2: long): $LongListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(long)>)>): $LongListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(long)>)>, arg1: long): $LongListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(long)>)>, arg1: long, arg2: long): $LongListOption
public static "create"(arg0: $List$Type<(long)>, arg1: long): $LongListOption
public static "create"(arg0: $List$Type<(long)>): $LongListOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongListOption$Type = ($LongListOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongListOption_ = $LongListOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/mint/$MintSlot" {
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$CoinMintBlockEntity, $CoinMintBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinMintBlockEntity"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $MintSlot extends $Slot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer, arg4: $CoinMintBlockEntity$Type)

public "mayPlace"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MintSlot$Type = ($MintSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MintSlot_ = $MintSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$DepositWithdrawNotification$Server, $DepositWithdrawNotification$Server$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Server"
import {$DepositWithdrawNotification$Trader, $DepositWithdrawNotification$Trader$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Trader"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$DepositWithdrawNotification$Player, $DepositWithdrawNotification$Player$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Player"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $DepositWithdrawNotification extends $Notification {
static readonly "PLAYER_TYPE": $NotificationType<($DepositWithdrawNotification$Player)>
static readonly "TRADER_TYPE": $NotificationType<($DepositWithdrawNotification$Trader)>
static readonly "SERVER_TYPE": $NotificationType<($DepositWithdrawNotification$Server)>


public "getMessage"(): $MutableComponent
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DepositWithdrawNotification$Type = ($DepositWithdrawNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DepositWithdrawNotification_ = $DepositWithdrawNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/item/$ItemTradeEditTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemTradeData, $ItemTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TradeDirection, $TradeDirection$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeDirection"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $ItemTradeEditTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "setType"(arg0: $TradeDirection$Type): void
public "canOpen"(arg0: $Player$Type): boolean
public "defaultInteraction"(arg0: integer, arg1: $ItemStack$Type, arg2: integer): void
public "setNBTEnforced"(arg0: integer, arg1: boolean): void
public "setSelectedItem"(arg0: integer, arg1: $ItemStack$Type): void
public "getTradeIndex"(): integer
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "getTrade"(): $ItemTradeData
public "setTradeIndex"(arg0: integer): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "setCustomName"(arg0: integer, arg1: string): void
public "setPrice"(arg0: $MoneyValue$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
set "type"(value: $TradeDirection$Type)
get "tradeIndex"(): integer
get "trade"(): $ItemTradeData
set "tradeIndex"(value: integer)
set "price"(value: $MoneyValue$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTradeEditTab$Type = ($ItemTradeEditTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTradeEditTab_ = $ItemTradeEditTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/colors/$GoldenTicketColor" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"

export class $GoldenTicketColor implements $ItemColor {

constructor()

public "getColor"(arg0: $ItemStack$Type, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoldenTicketColor$Type = ($GoldenTicketColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoldenTicketColor_ = $GoldenTicketColor$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/data/$ClientNotificationData" {
import {$NotificationData, $NotificationData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationData"
import {$ClientPlayerNetworkEvent$LoggingOut, $ClientPlayerNetworkEvent$LoggingOut$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$LoggingOut"

export class $ClientNotificationData {

constructor()

public static "onClientLogout"(arg0: $ClientPlayerNetworkEvent$LoggingOut$Type): void
public static "GetNotifications"(): $NotificationData
public static "UpdateNotifications"(arg0: $NotificationData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientNotificationData$Type = ($ClientNotificationData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientNotificationData_ = $ClientNotificationData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$PaygateBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PaygateTraderData, $PaygateTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/paygate/$PaygateTraderData"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TraderBlockEntity, $TraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blockentity/$TraderBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $PaygateBlockEntity extends $TraderBlockEntity<($PaygateTraderData)> {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "isActive"(): boolean
public "activate"(arg0: integer): void
public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
public "serverTick"(): void
public "getValidTicketTrade"(arg0: $Player$Type, arg1: $ItemStack$Type): integer
public "saveTimer"(arg0: $CompoundTag$Type): $CompoundTag
public "markTimerDirty"(): void
get "active"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaygateBlockEntity$Type = ($PaygateBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaygateBlockEntity_ = $PaygateBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/advancements/$LCCurrencyAdvancements" {
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ForgeAdvancementProvider$AdvancementGenerator, $ForgeAdvancementProvider$AdvancementGenerator$Type} from "packages/net/minecraftforge/common/data/$ForgeAdvancementProvider$AdvancementGenerator"
import {$AdvancementSubProvider, $AdvancementSubProvider$Type} from "packages/net/minecraft/data/advancements/$AdvancementSubProvider"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$Advancement, $Advancement$Type} from "packages/net/minecraft/advancements/$Advancement"

export class $LCCurrencyAdvancements implements $ForgeAdvancementProvider$AdvancementGenerator {

constructor()

public "generate"(arg0: $HolderLookup$Provider$Type, arg1: $Consumer$Type<($Advancement$Type)>, arg2: $ExistingFileHelper$Type): void
public "toSubProvider"(arg0: $ExistingFileHelper$Type): $AdvancementSubProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCCurrencyAdvancements$Type = ($LCCurrencyAdvancements);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCCurrencyAdvancements_ = $LCCurrencyAdvancements$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$VendingMachineBlock" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IItemTraderBlock, $IItemTraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IItemTraderBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TraderBlockTallRotatable, $TraderBlockTallRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockTallRotatable"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $VendingMachineBlock extends $TraderBlockTallRotatable implements $IItemTraderBlock {
static readonly "TRADECOUNT": integer
static readonly "TYPE": $ResourceLocation
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "traderType"(): $BlockEntityType<(any)>
public "makeTrader"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getItemPositionData"(): $ItemPositionData
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "itemPositionData"(): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VendingMachineBlock$Type = ($VendingMachineBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VendingMachineBlock_ = $VendingMachineBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector4f, $Vector4f$Type} from "packages/org/joml/$Vector4f"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$ScreenEvent$Render, $ScreenEvent$Render$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Render"
import {$ContainerScreenEvent$Render, $ContainerScreenEvent$Render$Type} from "packages/net/minecraftforge/client/event/$ContainerScreenEvent$Render"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IEasyScreen, $IEasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IEasyScreen"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"

export class $EasyGuiGraphics {
readonly "font": $Font
readonly "mousePos": $ScreenPosition
readonly "partialTicks": float


public "renderSlotBackground"(arg0: $Pair$Type<($ResourceLocation$Type), ($ResourceLocation$Type)>, arg1: $ScreenPosition$Type): void
public "renderSlotBackground"(arg0: $Pair$Type<($ResourceLocation$Type), ($ResourceLocation$Type)>, arg1: integer, arg2: integer): void
public "fill"(arg0: $ScreenArea$Type, arg1: integer): void
public "fill"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
public "fill"(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: integer): void
public static "create"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: integer, arg3: integer, arg4: float): $EasyGuiGraphics
public static "create"(arg0: $ScreenEvent$Render$Type): $EasyGuiGraphics
public static "create"(arg0: $ContainerScreenEvent$Render$Type): $EasyGuiGraphics
public static "create"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): $EasyGuiGraphics
public "setColor"(arg0: float, arg1: float, arg2: float, arg3: float): void
public "setColor"(arg0: integer): void
public "setColor"(arg0: integer, arg1: float): void
public "setColor"(arg0: $Vector4f$Type): void
public "setColor"(arg0: float, arg1: float, arg2: float): void
public "renderItem"(arg0: $ItemStack$Type, arg1: integer, arg2: integer): void
public "renderItem"(arg0: $ItemStack$Type, arg1: $ScreenPosition$Type): void
public "renderItem"(arg0: $ItemStack$Type, arg1: $ScreenPosition$Type, arg2: string): void
public "renderItem"(arg0: $ItemStack$Type, arg1: integer, arg2: integer, arg3: string): void
public "blitSprite"(arg0: $Sprite$Type, arg1: integer, arg2: integer, arg3: boolean): void
public "blitSprite"(arg0: $Sprite$Type, arg1: $ScreenPosition$Type): void
public "blitSprite"(arg0: $Sprite$Type, arg1: $ScreenPosition$Type, arg2: boolean): void
public "blitSprite"(arg0: $Sprite$Type, arg1: integer, arg2: integer): void
public "renderButtonBG"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: float, arg5: integer): void
public "renderButtonBG"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: float, arg5: integer, arg6: integer): void
public "drawShadowed"(arg0: $Component$Type, arg1: $ScreenPosition$Type, arg2: integer): void
public "drawShadowed"(arg0: $Component$Type, arg1: integer, arg2: integer, arg3: integer): void
public "drawShadowed"(arg0: string, arg1: integer, arg2: integer, arg3: integer): void
public "drawShadowed"(arg0: string, arg1: $ScreenPosition$Type, arg2: integer): void
public "drawShadowed"(arg0: $FormattedCharSequence$Type, arg1: integer, arg2: integer, arg3: integer): void
public "drawShadowed"(arg0: $FormattedCharSequence$Type, arg1: $ScreenPosition$Type, arg2: integer): void
public "drawString"(arg0: $Component$Type, arg1: integer, arg2: integer, arg3: integer): void
public "drawString"(arg0: $FormattedCharSequence$Type, arg1: $ScreenPosition$Type, arg2: integer): void
public "drawString"(arg0: $Component$Type, arg1: $ScreenPosition$Type, arg2: integer): void
public "drawString"(arg0: string, arg1: integer, arg2: integer, arg3: integer): void
public "drawString"(arg0: string, arg1: $ScreenPosition$Type, arg2: integer): void
public "drawString"(arg0: $FormattedCharSequence$Type, arg1: integer, arg2: integer, arg3: integer): void
public "renderTooltip"(arg0: $List$Type<($FormattedCharSequence$Type)>, arg1: integer, arg2: integer): void
public "renderTooltip"(arg0: $ItemStack$Type): void
public "renderTooltip"(arg0: $ItemStack$Type, arg1: integer, arg2: integer): void
public "renderTooltip"(arg0: $Component$Type): void
public "renderTooltip"(arg0: $Component$Type, arg1: integer, arg2: integer): void
public "renderTooltip"(arg0: $List$Type<($FormattedCharSequence$Type)>): void
public "renderNormalBackground"(arg0: $ResourceLocation$Type, arg1: $IEasyScreen$Type): void
public "popOffset"(): $EasyGuiGraphics
public "blit"(arg0: $ResourceLocation$Type, arg1: $ScreenPosition$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer): void
public "blit"(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer): void
public "pushPose"(): $EasyGuiGraphics
public "popPose"(): void
public "pushOffset"(arg0: $ScreenPosition$Type): $EasyGuiGraphics
public "pushOffset"(arg0: $AbstractWidget$Type): $EasyGuiGraphics
public "TranslateToForeground"(): void
public "blitBackgroundOfSize"(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: integer, arg9: integer): void
public "blitSpriteFadeHoriz"(arg0: $Sprite$Type, arg1: integer, arg2: integer, arg3: float, arg4: boolean): void
public "blitSpriteFadeHoriz"(arg0: $Sprite$Type, arg1: $ScreenPosition$Type, arg2: float): void
public "blitSpriteFadeHoriz"(arg0: $Sprite$Type, arg1: integer, arg2: integer, arg3: float): void
public "blitSpriteFadeHoriz"(arg0: $Sprite$Type, arg1: $ScreenPosition$Type, arg2: float, arg3: boolean): void
public "resetColor"(): void
public "renderComponentTooltip"(arg0: $List$Type<($Component$Type)>, arg1: integer, arg2: integer): void
public "renderComponentTooltip"(arg0: $List$Type<($Component$Type)>): void
public "getPose"(): $PoseStack
public "pushOffsetZero"(): $EasyGuiGraphics
public "drawWordWrap"(arg0: $Component$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
public "drawWordWrap"(arg0: string, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
public "getGui"(): $GuiGraphics
public "renderSlotHighlight"(arg0: $ScreenPosition$Type): void
public "renderSlotHighlight"(arg0: integer, arg1: integer): void
set "color"(value: integer)
set "color"(value: $Vector4f$Type)
get "pose"(): $PoseStack
get "gui"(): $GuiGraphics
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyGuiGraphics$Type = ($EasyGuiGraphics);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyGuiGraphics_ = $EasyGuiGraphics$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$BookRendererGenerator" {
import {$BookRenderer, $BookRenderer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$BookRenderer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $BookRendererGenerator {

 "createRendererForItem"(arg0: $ItemStack$Type): $BookRenderer

(arg0: $ItemStack$Type): $BookRenderer
}

export namespace $BookRendererGenerator {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookRendererGenerator$Type = ($BookRendererGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookRendererGenerator_ = $BookRendererGenerator$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$IntOption" {
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $IntOption extends $ConfigOption<(integer)> {


public static "create"(arg0: integer): $IntOption
public static "create"(arg0: integer, arg1: integer): $IntOption
public static "create"(arg0: $NonNullSupplier$Type<(integer)>, arg1: integer): $IntOption
public static "create"(arg0: $NonNullSupplier$Type<(integer)>): $IntOption
public static "create"(arg0: $NonNullSupplier$Type<(integer)>, arg1: integer, arg2: integer): $IntOption
public static "create"(arg0: integer, arg1: integer, arg2: integer): $IntOption
public static "makeParser"(arg0: integer, arg1: integer): $ConfigParser<(integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntOption$Type = ($IntOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntOption_ = $IntOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/trader/$TraderClientTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $TraderClientTab extends $EasyTab {


public "getIcon"(): $IconData
public "getTooltip"(): $Component
public "getColor"(): integer
get "icon"(): $IconData
get "tooltip"(): $Component
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderClientTab$Type = ($TraderClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderClientTab_ = $TraderClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/text/$AdvancementTextEntry" {
import {$TextEntry, $TextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry"

export class $AdvancementTextEntry {
readonly "titleText": $TextEntry
readonly "descriptionText": $TextEntry


public static "of"(arg0: string): $AdvancementTextEntry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancementTextEntry$Type = ($AdvancementTextEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancementTextEntry_ = $AdvancementTextEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe$MintType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CoinMintRecipe$MintType extends $Enum<($CoinMintRecipe$MintType)> {
static readonly "MINT": $CoinMintRecipe$MintType
static readonly "MELT": $CoinMintRecipe$MintType
static readonly "OTHER": $CoinMintRecipe$MintType


public static "values"(): ($CoinMintRecipe$MintType)[]
public static "valueOf"(arg0: string): $CoinMintRecipe$MintType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinMintRecipe$MintType$Type = (("mint") | ("other") | ("melt")) | ($CoinMintRecipe$MintType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinMintRecipe$MintType_ = $CoinMintRecipe$MintType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/permissions/$Permissions" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $Permissions {
static readonly "OPEN_STORAGE": string
static readonly "CHANGE_NAME": string
static readonly "EDIT_TRADES": string
static readonly "COLLECT_COINS": string
static readonly "STORE_COINS": string
static readonly "EDIT_TRADE_RULES": string
static readonly "EDIT_SETTINGS": string
static readonly "ADD_REMOVE_ALLIES": string
static readonly "EDIT_PERMISSIONS": string
static readonly "VIEW_LOGS": string
static readonly "BREAK_TRADER": string
static readonly "BANK_LINK": string
static readonly "NOTIFICATION": string
static readonly "INTERACTION_LINK": string
static readonly "TRANSFER_OWNERSHIP": string
static readonly "ADMIN_MODE": string

constructor()

public static "PermissionWarning"(arg0: $Player$Type, arg1: string, arg2: string): void
public static "PermissionWarning"(arg0: $Player$Type, arg1: string, arg2: string, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Permissions$Type = ($Permissions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Permissions_ = $Permissions$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$IWalletHandler" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $IWalletHandler extends $IMoneyHandler {

 "load"(arg0: $CompoundTag$Type): void
 "clean"(): void
 "save"(): $CompoundTag
 "visible"(): boolean
 "tick"(): void
 "isDirty"(): boolean
 "setVisible"(arg0: boolean): void
 "syncWallet"(arg0: $ItemStack$Type): void
 "getWallet"(): $ItemStack
 "entity"(): $LivingEntity
 "setWallet"(arg0: $ItemStack$Type): void
 "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
 "flagAsKnown"(arg0: any): void
 "forgetContext"(arg0: any): void
 "hasStoredMoneyChanged"(arg0: any): boolean
 "getStoredMoney"(): $MoneyView
}

export namespace $IWalletHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IWalletHandler$Type = ($IWalletHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IWalletHandler_ = $IWalletHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/claiming/ftbchunks/$LCFTBClaimHandler" {
import {$IClaimPurchaseHandler, $IClaimPurchaseHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/integration/claiming/$IClaimPurchaseHandler"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export class $LCFTBClaimHandler implements $IClaimPurchaseHandler {
static readonly "INSTANCE": $IClaimPurchaseHandler


public "canBuyForceload"(arg0: $ServerPlayer$Type): boolean
public "canBuyClaims"(arg0: $ServerPlayer$Type): boolean
public "addBonusClaims"(arg0: $ServerPlayer$Type, arg1: integer): void
public "getCurrentBonusForceloadChunks"(arg0: $ServerPlayer$Type): integer
public "addBonusForceloadChunks"(arg0: $ServerPlayer$Type, arg1: integer): void
public "getCurrentBonusClaims"(arg0: $ServerPlayer$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCFTBClaimHandler$Type = ($LCFTBClaimHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCFTBClaimHandler_ = $LCFTBClaimHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$NullCategory" {
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$NotificationCategoryType, $NotificationCategoryType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategoryType"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $NullCategory extends $NotificationCategory {
static readonly "TYPE": $NotificationCategoryType<($NullCategory)>
static readonly "INSTANCE": $NullCategory
static readonly "GENERAL_TYPE": $NotificationCategoryType<(any)>
static readonly "GENERAL": $NotificationCategory


public "getName"(): $MutableComponent
public "matches"(arg0: $NotificationCategory$Type): boolean
public "getIcon"(): $IconData
get "name"(): $MutableComponent
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NullCategory$Type = ($NullCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NullCategory_ = $NullCategory$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType" {
import {$WoodType$Builder, $WoodType$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType$Builder"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$WoodData, $WoodData$Type} from "packages/io/github/lightman314/lightmanscurrency/datagen/util/$WoodData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IOptionalKey, $IOptionalKey$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$IOptionalKey"
import {$WoodType$Attributes, $WoodType$Attributes$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType$Attributes"

export class $WoodType implements $IOptionalKey {
static readonly "OAK": $WoodType
static readonly "SPRUCE": $WoodType
static readonly "BIRCH": $WoodType
static readonly "JUNGLE": $WoodType
static readonly "ACACIA": $WoodType
static readonly "DARK_OAK": $WoodType
static readonly "MANGROVE": $WoodType
static readonly "CHERRY": $WoodType
static readonly "BAMBOO": $WoodType
static readonly "CRIMSON": $WoodType
static readonly "WARPED": $WoodType
readonly "id": string
readonly "displayName": string
readonly "mapColor": $MapColor
readonly "attributes": $WoodType$Attributes


public "toString"(): string
public static "builder"(arg0: string, arg1: string): $WoodType$Builder
public "isValid"(): boolean
public "getData"(): $WoodData
public "isModded"(): boolean
public static "validValues"(): $List<($WoodType)>
public "isVanilla"(): boolean
public "generateResourceLocation"(arg0: string, arg1: string): string
public "generateResourceLocation"(arg0: string): string
public "isMod"(arg0: string): boolean
public static "sortByWood"(arg0: $WoodType$Type, arg1: $WoodType$Type): integer
public static "moddedValues"(): $List<($WoodType)>
public static "moddedValues"(arg0: string): $List<($WoodType)>
public "getModID"(): string
public static "fromTypeID"(arg0: string): $WoodType
public "generateID"(arg0: string): string
public static "vanillaValues"(): $ImmutableList<($WoodType)>
public static "hasModdedValues"(): boolean
get "valid"(): boolean
get "data"(): $WoodData
get "modded"(): boolean
get "vanilla"(): boolean
get "modID"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodType$Type = ($WoodType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodType_ = $WoodType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$MintMenu" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$CoinMintBlockEntity, $CoinMintBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinMintBlockEntity"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$EasyMenu, $EasyMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$EasyMenu"

export class $MintMenu extends $EasyMenu {
readonly "blockEntity": $CoinMintBlockEntity
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $CoinMintBlockEntity$Type)

public "removed"(arg0: $Player$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MintMenu$Type = ($MintMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MintMenu_ = $MintMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/team/$SPacketClearClientTeams" {
import {$ServerToClientPacket$Simple, $ServerToClientPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketClearClientTeams extends $ServerToClientPacket$Simple {
static readonly "INSTANCE": $SPacketClearClientTeams
static readonly "HANDLER": $CustomPacket$Handler<($SPacketClearClientTeams)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketClearClientTeams$Type = ($SPacketClearClientTeams);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketClearClientTeams_ = $SPacketClearClientTeams$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/util/$BlockEntityBlockHelper" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$RegistryObjectBundle, $RegistryObjectBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBundle"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$RegistryObjectBiBundle, $RegistryObjectBiBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBiBundle"

export class $BlockEntityBlockHelper {
static readonly "ITEM_TRADER_TYPE": $ResourceLocation
static readonly "FREEZER_TRADER_TYPE": $ResourceLocation
static readonly "BOOKSHELF_TRADER_TYPE": $ResourceLocation
static readonly "SLOT_MACHINE_TRADER_TYPE": $ResourceLocation
static readonly "CAPABILITY_INTERFACE_TYPE": $ResourceLocation
static readonly "AUCTION_STAND_TYPE": $ResourceLocation

constructor()

public static "addBlockToBlockEntity"<T extends $Block>(arg0: $ResourceLocation$Type, arg1: $Supplier$Type<(T)>): void
public static "addBlocksToBlockEntity"<T extends $Block>(arg0: $ResourceLocation$Type, ...arg1: ($RegistryObject$Type<(T)>)[]): void
public static "addBlocksToBlockEntity"<T extends $Block>(arg0: $ResourceLocation$Type, arg1: $List$Type<($Supplier$Type<(T)>)>): void
public static "addBlocksToBlockEntity"<T extends $Block>(arg0: $ResourceLocation$Type, arg1: $RegistryObjectBiBundle$Type<(T), (any), (any)>): void
public static "addBlocksToBlockEntity"<T extends $Block>(arg0: $ResourceLocation$Type, arg1: $RegistryObjectBundle$Type<(T), (any)>): void
public static "getBlocksForBlockEntity"(arg0: $ResourceLocation$Type): ($Block)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockEntityBlockHelper$Type = ($BlockEntityBlockHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockEntityBlockHelper_ = $BlockEntityBlockHelper$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/tiers/$EntityPoolLevel" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EntityPoolLevel extends $Enum<($EntityPoolLevel)> {
static readonly "T1": $EntityPoolLevel
static readonly "T2": $EntityPoolLevel
static readonly "T3": $EntityPoolLevel
static readonly "T4": $EntityPoolLevel
static readonly "T5": $EntityPoolLevel
static readonly "T6": $EntityPoolLevel
static readonly "BOSS_T1": $EntityPoolLevel
static readonly "BOSS_T2": $EntityPoolLevel
static readonly "BOSS_T3": $EntityPoolLevel
static readonly "BOSS_T4": $EntityPoolLevel
static readonly "BOSS_T5": $EntityPoolLevel
static readonly "BOSS_T6": $EntityPoolLevel
readonly "isBoss": boolean
readonly "lootTable": $ResourceLocation


public static "values"(): ($EntityPoolLevel)[]
public static "valueOf"(arg0: string): $EntityPoolLevel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityPoolLevel$Type = (("t4") | ("t5") | ("t6") | ("boss_t6") | ("boss_t4") | ("boss_t5") | ("boss_t2") | ("boss_t3") | ("boss_t1") | ("t1") | ("t2") | ("t3")) | ($EntityPoolLevel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityPoolLevel_ = $EntityPoolLevel$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/types/builtin/coins/$CoinPlayerMoneyHandler" {
import {$MoneyHandler, $MoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$MoneyHandler"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IPlayerMoneyHandler, $IPlayerMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$IPlayerMoneyHandler"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $CoinPlayerMoneyHandler extends $MoneyHandler implements $IPlayerMoneyHandler {

constructor(arg0: $Player$Type)

public "updatePlayer"(arg0: $Player$Type): void
public "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinPlayerMoneyHandler$Type = ($CoinPlayerMoneyHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinPlayerMoneyHandler_ = $CoinPlayerMoneyHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamBankAccountTab" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$TeamTab, $TeamTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamTab"
import {$TeamManagerScreen, $TeamManagerScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$TeamManagerScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TeamBankAccountTab extends $TeamTab {

constructor(arg0: $TeamManagerScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "allowViewing"(arg0: $Player$Type, arg1: $Team$Type): boolean
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamBankAccountTab$Type = ($TeamBankAccountTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamBankAccountTab_ = $TeamBankAccountTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/builtin/$PlayerOwner" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$OwnerType, $OwnerType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$OwnerType"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $PlayerOwner extends $Owner {
static readonly "TYPE": $OwnerType
readonly "player": $PlayerReference
static readonly "NULL": $Owner
static readonly "NULL_TYPE": $OwnerType


public "getName"(): $MutableComponent
public "matches"(arg0: $Owner$Type): boolean
public static "of"(arg0: $Player$Type): $PlayerOwner
public static "of"(arg0: $PlayerReference$Type): $PlayerOwner
public "getType"(): $OwnerType
public "pushNotification"(arg0: $NonNullSupplier$Type<(any)>, arg1: integer, arg2: boolean): void
public "asPlayerReference"(): $PlayerReference
public "alwaysValid"(): boolean
public "getCommandLabel"(): $MutableComponent
public "isMember"(arg0: $PlayerReference$Type): boolean
public "asBankReference"(): $BankReference
public "isOnline"(): boolean
public "stillValid"(): boolean
public "isAdmin"(arg0: $PlayerReference$Type): boolean
get "name"(): $MutableComponent
get "type"(): $OwnerType
get "commandLabel"(): $MutableComponent
get "online"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerOwner$Type = ($PlayerOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerOwner_ = $PlayerOwner$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/teams/$TeamSaveData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"

export class $TeamSaveData extends $SavedData {


public static "GetAllTeams"(arg0: boolean): $List<($Team)>
public static "MarkTeamDirty"(arg0: long): void
public static "RegisterTeam"(arg0: $Player$Type, arg1: string): $Team
public static "OnPlayerLogin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "RemoveTeam"(arg0: long): void
public static "GetTeam"(arg0: boolean, arg1: long): $Team
public "save"(arg0: $CompoundTag$Type): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamSaveData$Type = ($TeamSaveData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamSaveData_ = $TeamSaveData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/impl/$CoinAPIImpl" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SPacketSyncCoinData, $SPacketSyncCoinData$Type} from "packages/io/github/lightman314/lightmanscurrency/network/message/data/$SPacketSyncCoinData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$CoinAPI, $CoinAPI$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/$CoinAPI"
import {$PacketDistributor$PacketTarget, $PacketDistributor$PacketTarget$Type} from "packages/net/minecraftforge/network/$PacketDistributor$PacketTarget"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $CoinAPIImpl extends $CoinAPI {
static readonly "INSTANCE": $CoinAPIImpl
static readonly "SORTER": $Comparator<($ItemStack)>
static readonly "API": $CoinAPI
static readonly "COIN_SORTER": $Comparator<($ItemStack)>
static readonly "MONEY_FILE_LOCATION": string
static readonly "MAIN_CHAIN": string


public "CoinExchangeUp"(arg0: $Container$Type, arg1: $Item$Type): void
public "CoinExchangeDown"(arg0: $Container$Type, arg1: $Item$Type): void
public "SyncCoinDataWith"(arg0: $PacketDistributor$PacketTarget$Type): void
public "HandleSyncPacket"(arg0: $SPacketSyncCoinData$Type): void
public "CoinExchangeAllDown"(arg0: $Container$Type): void
public "ReloadCoinDataFromFile"(): void
public static "LoadEditedData"(arg0: string): void
public "IsCoin"(arg0: $ItemStack$Type, arg1: boolean): boolean
public "IsCoin"(arg0: $Item$Type, arg1: boolean): boolean
public "ChainDataOfCoin"(arg0: $Item$Type): $ChainData
public "ChainDataOfCoin"(arg0: $ItemStack$Type): $ChainData
public "getEquippedWallet"(arg0: $Player$Type): $ItemStack
public "NoDataAvailable"(): boolean
public "ChainData"(arg0: string): $ChainData
public "AllChainData"(): $List<($ChainData)>
public "Setup"(): void
public "SortCoinsByValue"(arg0: $Container$Type): void
public "CoinExchangeAllUp"(arg0: $Container$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinAPIImpl$Type = ($CoinAPIImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinAPIImpl_ = $CoinAPIImpl$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"

export class $ScreenArea {
readonly "x": integer
readonly "y": integer
readonly "pos": $ScreenPosition
readonly "width": integer
readonly "height": integer


public static "of"(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer): $ScreenArea
public static "of"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): $ScreenArea
public "ofSize"(arg0: integer, arg1: integer): $ScreenArea
public "atPosition"(arg0: integer, arg1: integer): $ScreenArea
public "atPosition"(arg0: $ScreenPosition$Type): $ScreenArea
public "offsetPosition"(arg0: integer, arg1: integer): $ScreenArea
public "offsetPosition"(arg0: $ScreenPosition$Type): $ScreenArea
public "isMouseInArea"(arg0: double, arg1: double): boolean
public "isMouseInArea"(arg0: integer, arg1: integer): boolean
public "isMouseInArea"(arg0: $ScreenPosition$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenArea$Type = ($ScreenArea);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenArea_ = $ScreenArea$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$CoinInputType, $CoinInputType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$CoinInputType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ATMData, $ATMData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMData"
import {$CoinEntry, $CoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$CoinEntry"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$TextEntry, $TextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData$Builder, $ChainData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData$Builder"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ValueDisplayData, $ValueDisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplayData"
import {$CoinValue, $CoinValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValue"

export class $ChainData {
static readonly "SORT_HIGHEST_VALUE_FIRST": $Comparator<($CoinEntry)>
static readonly "SORT_LOWEST_VALUE_FIRST": $Comparator<($CoinEntry)>
readonly "isEvent": boolean
readonly "chain": string


public static "builder"(arg0: string): $ChainData$Builder
public static "builder"(arg0: string, arg1: $TextEntry$Type): $ChainData$Builder
public static "builder"(arg0: string, arg1: $MutableComponent$Type): $ChainData$Builder
public "getDisplayName"(): $MutableComponent
public "findEntry"(arg0: $ItemStack$Type): $CoinEntry
public "findEntry"(arg0: $Item$Type): $CoinEntry
public static "fromJson"(arg0: $List$Type<($CoinEntry$Type)>, arg1: $JsonObject$Type): $ChainData
public "containsEntry"(arg0: $Item$Type): boolean
public "containsEntry"(arg0: $ItemStack$Type): boolean
public "formatCoinTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>, arg2: $TooltipFlag$Type): void
public "getAtmData"(): $ATMData
public "getDisplayData"(): $ValueDisplayData
public "getInputType"(): $CoinInputType
public "hasATMData"(): boolean
/**
 * 
 * @deprecated
 */
public "getLowerExchange"(arg0: $CoinEntry$Type): $Pair<($CoinEntry), (integer)>
public "getLowerExchange"(arg0: $Item$Type): $Pair<($CoinEntry), (integer)>
public "getSideChains"(): $List<($List<($CoinEntry)>)>
public "getAllEntries"(arg0: boolean, arg1: $Comparator$Type<($CoinEntry$Type)>): $List<($CoinEntry)>
public "getAllEntries"(arg0: boolean): $List<($CoinEntry)>
public "getUpperExchange"(arg0: $Item$Type): $Pair<($CoinEntry), (integer)>
/**
 * 
 * @deprecated
 */
public "getUpperExchange"(arg0: $CoinEntry$Type): $Pair<($CoinEntry), (integer)>
public "getCoreChain"(): $List<($CoinEntry)>
public "getAsJson"(): $JsonObject
public "findMatchingEntry"(arg0: $CoinEntry$Type): $CoinEntry
public "getCoreValue"(arg0: $Item$Type): long
public "getCoreValue"(arg0: $ItemStack$Type): long
public static "addCoinTooltips"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>, arg2: $TooltipFlag$Type, arg3: $Player$Type): void
public "isVisibleTo"(arg0: $Player$Type): boolean
public "getInputHandler"(): any
public "formatValue"(arg0: $CoinValue$Type, arg1: $MutableComponent$Type): $MutableComponent
get "displayName"(): $MutableComponent
get "atmData"(): $ATMData
get "displayData"(): $ValueDisplayData
get "inputType"(): $CoinInputType
get "sideChains"(): $List<($List<($CoinEntry)>)>
get "coreChain"(): $List<($CoinEntry)>
get "asJson"(): $JsonObject
get "inputHandler"(): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainData$Type = ($ChainData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainData_ = $ChainData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/taxes/$TaxesPaidNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TaxesPaidNotification extends $Notification {
static readonly "TYPE": $NotificationType<($TaxesPaidNotification)>


public "getMessage"(): $MutableComponent
public static "create"(arg0: $MoneyValue$Type, arg1: $NotificationCategory$Type): $NonNullSupplier<($Notification)>
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxesPaidNotification$Type = ($TaxesPaidNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxesPaidNotification_ = $TaxesPaidNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TradeRuleType<T extends $TradeRule> {
readonly "type": $ResourceLocation

constructor(arg0: $ResourceLocation$Type, arg1: $NonNullSupplier$Type<(T)>)

public "toString"(): string
public "load"(arg0: $CompoundTag$Type): T
public "createNew"(): T
public "loadFromJson"(arg0: $JsonObject$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeRuleType$Type<T> = ($TradeRuleType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeRuleType_<T> = $TradeRuleType$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$CustomPointsOfInterest" {
import {$PoiType, $PoiType$Type} from "packages/net/minecraft/world/entity/ai/village/poi/$PoiType"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $CustomPointsOfInterest {
static readonly "BANKER": $RegistryObject<($PoiType)>
static readonly "BANKER_KEY": $ResourceKey<($PoiType)>
static readonly "CASHIER": $RegistryObject<($PoiType)>
static readonly "CASHIER_KEY": $ResourceKey<($PoiType)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomPointsOfInterest$Type = ($CustomPointsOfInterest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomPointsOfInterest_ = $CustomPointsOfInterest$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$IconAndButtonUtil" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$NonNullFunction, $NonNullFunction$Type} from "packages/net/minecraftforge/common/util/$NonNullFunction"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$TraderInterfaceBlockEntity$InteractionType, $TraderInterfaceBlockEntity$InteractionType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$InteractionType"
import {$IconButton, $IconButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$DropdownWidget, $DropdownWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/dropdown/$DropdownWidget"
import {$TraderInterfaceBlockEntity$ActiveMode, $TraderInterfaceBlockEntity$ActiveMode$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$ActiveMode"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$PlainButton, $PlainButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$PlainButton"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$MoneyStorage, $MoneyStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage"

export class $IconAndButtonUtil {
static readonly "ICON_TEXTURE": $ResourceLocation
static readonly "WIDGET_TEXTURE": $ResourceLocation
static readonly "ICON_TRADER": $IconData
static readonly "ICON_TRADER_ALT": $IconData
static readonly "ICON_STORAGE": $IconData
static readonly "ICON_COLLECT_COINS": $IconData
static readonly "ICON_STORE_COINS": $IconData
static readonly "ICON_TRADE_RULES": $IconData
static readonly "ICON_SETTINGS": $IconData
static readonly "ICON_BACK": $IconData
static readonly "ICON_LEFT": $IconData
static readonly "ICON_RIGHT": $IconData
static readonly "ICON_UP": $IconData
static readonly "ICON_DOWN": $IconData
static readonly "ICON_SHOW_LOGGER": $IconData
static readonly "ICON_CLEAR_LOGGER": $IconData
static readonly "ICON_PERSISTENT_DATA": $IconData
static readonly "ICON_PLUS": $IconData
static readonly "ICON_X": $IconData
static readonly "ICON_WHITELIST": $IconData
static readonly "ICON_BLACKLIST": $IconData
static readonly "ICON_COUNT": $IconData
static readonly "ICON_COUNT_PLAYER": $IconData
static readonly "ICON_TIMED_SALE": $IconData
static readonly "ICON_DISCOUNT_LIST": $IconData
static readonly "ICON_FREE_SAMPLE": $IconData
static readonly "ICON_PRICE_FLUCTUATION": $IconData
static readonly "ICON_TRADELIST": $IconData
static readonly "ICON_MODE_DISABLED": $IconData
static readonly "ICON_MODE_REDSTONE_OFF": $IconData
static readonly "ICON_MODE_REDSTONE": $IconData
static readonly "ICON_MODE_ALWAYS_ON": $IconData
static readonly "ICON_CHECKMARK": $IconData
static readonly "ICON_ALEX_HEAD": $IconData
static readonly "ICON_TAXES": $IconData
static readonly "SPRITE_PLUS": $Sprite
static readonly "SPRITE_MINUS": $Sprite
static readonly "SPRITE_CHECK_ACTIVE": $Sprite
static readonly "SPRITE_CHECK_INACTIVE": $Sprite
static readonly "ICON_ONLINEMODE_TRUE": $IconData
static readonly "ICON_ONLINEMODE_FALSE": $IconData

constructor()

public static "minusButton"(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>): $PlainButton
public static "minusButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>): $PlainButton
public static "leftButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>): $IconButton
public static "rightButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>): $IconButton
public static "ICON_CREATIVE"(arg0: $NonNullSupplier$Type<(boolean)>): $NonNullFunction<($IconButton), ($IconData)>
public static "quickInsertButton"(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>): $PlainButton
public static "quickExtractButton"(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>): $PlainButton
public static "checkmarkButton"(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>, arg2: $NonNullSupplier$Type<(boolean)>): $PlainButton
public static "checkmarkButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $NonNullSupplier$Type<(boolean)>): $PlainButton
public static "creativeToggleButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $NonNullSupplier$Type<(boolean)>): $IconButton
public static "creativeToggleButton"(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>, arg2: $NonNullSupplier$Type<(boolean)>): $IconButton
public static "interactionTypeDropdown"(arg0: integer, arg1: integer, arg2: integer, arg3: $TraderInterfaceBlockEntity$InteractionType$Type, arg4: $Consumer$Type<(integer)>, arg5: $List$Type<($TraderInterfaceBlockEntity$InteractionType$Type)>): $DropdownWidget
public static "interactionTypeDropdown"(arg0: $ScreenPosition$Type, arg1: integer, arg2: $TraderInterfaceBlockEntity$InteractionType$Type, arg3: $Consumer$Type<(integer)>, arg4: $List$Type<($TraderInterfaceBlockEntity$InteractionType$Type)>): $DropdownWidget
public static "ICON_INTERFACE_ACTIVE"(arg0: $NonNullSupplier$Type<(boolean)>): $NonNullSupplier<($IconData)>
public static "GetIcon"(arg0: $TraderInterfaceBlockEntity$ActiveMode$Type): $IconData
public static "plusButton"(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>): $PlainButton
public static "plusButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>): $PlainButton
public static "backToTerminalButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>): $IconButton
public static "backToTerminalButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $NonNullSupplier$Type<(boolean)>): $IconButton
public static "collectCoinButtonAlt"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $Supplier$Type<($MoneyStorage$Type)>): $IconButton
public static "collectCoinButtonAlt"(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>, arg2: $Supplier$Type<($MoneyStorage$Type)>): $IconButton
public static "storageButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $NonNullSupplier$Type<(boolean)>): $IconButton
public static "storageButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>): $IconButton
public static "collectCoinButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $Player$Type, arg4: $Supplier$Type<($TraderData$Type)>): $IconButton
public static "storeCoinButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>): $IconButton
public static "traderButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>): $IconButton
public static "tradeRuleButton"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>): $IconButton
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconAndButtonUtil$Type = ($IconAndButtonUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconAndButtonUtil_ = $IconAndButtonUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineEntry" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SlotMachineTraderData, $SlotMachineTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineTraderData"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $SlotMachineEntry {
static readonly "ITEM_LIMIT": integer
readonly "items": $List<($ItemStack)>


public static "splitDisplayItems"(arg0: $List$Type<($ItemStack$Type)>): $List<($ItemStack)>
public static "load"(arg0: $CompoundTag$Type): $SlotMachineEntry
public "save"(): $CompoundTag
public static "create"(): $SlotMachineEntry
public static "parse"(arg0: $JsonObject$Type): $SlotMachineEntry
public "isValid"(): boolean
public "toJson"(): $JsonObject
public "TryAddItem"(arg0: $ItemStack$Type): void
public "validateItems"(): void
public "hasStock"(arg0: $SlotMachineTraderData$Type): boolean
public "getDisplayItems"(): $List<($ItemStack)>
public "isMoney"(): boolean
public "getMoneyValue"(): $MoneyValue
public "getStock"(arg0: $SlotMachineTraderData$Type): integer
public "getWeight"(): integer
public "setWeight"(arg0: integer): void
public "CanGiveToCustomer"(arg0: $TradeContext$Type): boolean
public "GiveToCustomer"(arg0: $SlotMachineTraderData$Type, arg1: $TradeContext$Type): boolean
public "isItemRelevant"(arg0: $ItemStack$Type): boolean
get "valid"(): boolean
get "displayItems"(): $List<($ItemStack)>
get "money"(): boolean
get "moneyValue"(): $MoneyValue
get "weight"(): integer
set "weight"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineEntry$Type = ($SlotMachineEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineEntry_ = $SlotMachineEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/$CoinAPI" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SPacketSyncCoinData, $SPacketSyncCoinData$Type} from "packages/io/github/lightman314/lightmanscurrency/network/message/data/$SPacketSyncCoinData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$PacketDistributor$PacketTarget, $PacketDistributor$PacketTarget$Type} from "packages/net/minecraftforge/network/$PacketDistributor$PacketTarget"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $CoinAPI {
static readonly "API": $CoinAPI
static readonly "COIN_SORTER": $Comparator<($ItemStack)>
static readonly "MONEY_FILE_LOCATION": string
static readonly "MAIN_CHAIN": string

constructor()

/**
 * 
 * @deprecated
 */
public static "isCoin"(arg0: $Item$Type, arg1: boolean): boolean
/**
 * 
 * @deprecated
 */
public static "isCoin"(arg0: $ItemStack$Type, arg1: boolean): boolean
/**
 * 
 * @deprecated
 */
public static "getAllChainData"(): $List<($ChainData)>
/**
 * 
 * @deprecated
 */
public static "DataNotReady"(): boolean
/**
 * 
 * @deprecated
 */
public static "chainForCoin"(arg0: $ItemStack$Type): $ChainData
/**
 * 
 * @deprecated
 */
public static "chainForCoin"(arg0: $Item$Type): $ChainData
/**
 * 
 * @deprecated
 */
public static "ExchangeAllCoinsUp"(arg0: $Container$Type): void
public "CoinExchangeUp"(arg0: $Container$Type, arg1: $Item$Type): void
/**
 * 
 * @deprecated
 */
public static "ExchangeCoinsUp"(arg0: $Container$Type, arg1: $Item$Type): void
/**
 * 
 * @deprecated
 */
public static "ExchangeCoinsDown"(arg0: $Container$Type, arg1: $Item$Type): void
public "CoinExchangeDown"(arg0: $Container$Type, arg1: $Item$Type): void
/**
 * 
 * @deprecated
 */
public static "SortCoins"(arg0: $Container$Type): void
public "SyncCoinDataWith"(arg0: $PacketDistributor$PacketTarget$Type): void
public "HandleSyncPacket"(arg0: $SPacketSyncCoinData$Type): void
/**
 * 
 * @deprecated
 */
public static "syncDataWith"(arg0: $PacketDistributor$PacketTarget$Type): void
public "CoinExchangeAllDown"(arg0: $Container$Type): void
/**
 * 
 * @deprecated
 */
public static "reloadMoneyDataFromFile"(): void
public "ReloadCoinDataFromFile"(): void
/**
 * 
 * @deprecated
 */
public static "ExchangeAllCoinsDown"(arg0: $Container$Type): void
/**
 * 
 * @deprecated
 */
public static "getChainData"(arg0: string): $ChainData
public "IsCoin"(arg0: $ItemStack$Type, arg1: boolean): boolean
public "IsCoin"(arg0: $Item$Type, arg1: boolean): boolean
public "ChainDataOfCoin"(arg0: $ItemStack$Type): $ChainData
public "ChainDataOfCoin"(arg0: $Item$Type): $ChainData
/**
 * 
 * @deprecated
 */
public static "getWalletStack"(arg0: $Player$Type): $ItemStack
public "getEquippedWallet"(arg0: $Player$Type): $ItemStack
public "NoDataAvailable"(): boolean
public "ChainData"(arg0: string): $ChainData
public "AllChainData"(): $List<($ChainData)>
/**
 * 
 * @deprecated
 */
public static "handleSyncPacket"(arg0: $SPacketSyncCoinData$Type): void
public "Setup"(): void
public "SortCoinsByValue"(arg0: $Container$Type): void
public "CoinExchangeAllUp"(arg0: $Container$Type): void
get "allChainData"(): $List<($ChainData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinAPI$Type = ($CoinAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinAPI_ = $CoinAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/customer/$ITraderScreen" {
import {$ITraderMenu, $ITraderMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/customer/$ITraderMenu"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IEasyScreen, $IEasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IEasyScreen"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TraderClientTab, $TraderClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/trader/$TraderClientTab"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export interface $ITraderScreen extends $IEasyScreen {

 "closeTab"(): void
 "setTab"(arg0: $TraderClientTab$Type): void
 "getMenu"(): $ITraderMenu
 "blockInventoryClosing"(): boolean
 "getArea"(): $ScreenArea
 "getCorner"(): $ScreenPosition
 "getPlayer"(): $Player
 "addChild"<W>(arg0: W): W
 "removeChild"(arg0: any): void
 "getFont"(): $Font
 "getGuiLeft"(): integer
 "getGuiTop"(): integer
 "getXSize"(): integer
 "getYSize"(): integer
}

export namespace $ITraderScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITraderScreen$Type = ($ITraderScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITraderScreen_ = $ITraderScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyHolder$Slave" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyViewer$Slave, $MoneyViewer$Slave$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyViewer$Slave"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $MoneyHolder$Slave extends $MoneyViewer$Slave implements $IMoneyHolder {

constructor()

public "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "getTooltipTitle"(): $Component
public "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
public "formatTooltip"(arg0: $List$Type<($Component$Type)>): void
public "priority"(): integer
public "inversePriority"(): integer
public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
get "tooltipTitle"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyHolder$Slave$Type = ($MoneyHolder$Slave);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyHolder$Slave_ = $MoneyHolder$Slave$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$FreezerBlock" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IItemTraderBlock, $IItemTraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IItemTraderBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Color, $Color$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$Color"
import {$TraderBlockTallRotatable, $TraderBlockTallRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockTallRotatable"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $FreezerBlock extends $TraderBlockTallRotatable implements $IItemTraderBlock {
static readonly "TRADECOUNT": integer
static readonly "SHAPE_SOUTH": $VoxelShape
static readonly "SHAPE_NORTH": $VoxelShape
static readonly "SHAPE_EAST": $VoxelShape
static readonly "SHAPE_WEST": $VoxelShape
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $ResourceLocation$Type)

public "getDoorModel"(): $ResourceLocation
public static "GenerateDoorModel"(arg0: $Color$Type): $ResourceLocation
public static "GenerateDoorModel"(arg0: string, arg1: $Color$Type): $ResourceLocation
public "traderType"(): $BlockEntityType<(any)>
public "makeTrader"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getItemPositionData"(): $ItemPositionData
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "doorModel"(): $ResourceLocation
get "itemPositionData"(): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FreezerBlock$Type = ($FreezerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FreezerBlock_ = $FreezerBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModBlockEntities" {
import {$TaxBlockEntity, $TaxBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$TaxBlockEntity"
import {$AuctionStandBlockEntity, $AuctionStandBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$AuctionStandBlockEntity"
import {$TicketTraderBlockEntity, $TicketTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$TicketTraderBlockEntity"
import {$CoinJarBlockEntity, $CoinJarBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinJarBlockEntity"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$CoinMintBlockEntity, $CoinMintBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinMintBlockEntity"
import {$TicketStationBlockEntity, $TicketStationBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$TicketStationBlockEntity"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$CashRegisterBlockEntity, $CashRegisterBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CashRegisterBlockEntity"
import {$ItemTraderInterfaceBlockEntity, $ItemTraderInterfaceBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$ItemTraderInterfaceBlockEntity"
import {$ArmorDisplayTraderBlockEntity, $ArmorDisplayTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$ArmorDisplayTraderBlockEntity"
import {$SlotMachineTraderBlockEntity, $SlotMachineTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$SlotMachineTraderBlockEntity"
import {$CapabilityInterfaceBlockEntity, $CapabilityInterfaceBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CapabilityInterfaceBlockEntity"
import {$FreezerTraderBlockEntity, $FreezerTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$FreezerTraderBlockEntity"
import {$BookTraderBlockEntity, $BookTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$BookTraderBlockEntity"
import {$ItemTraderBlockEntity, $ItemTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$ItemTraderBlockEntity"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"
import {$PaygateBlockEntity, $PaygateBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$PaygateBlockEntity"

export class $ModBlockEntities {
static readonly "ITEM_TRADER": $RegistryObject<($BlockEntityType<($ItemTraderBlockEntity)>)>
static readonly "ARMOR_TRADER": $RegistryObject<($BlockEntityType<($ArmorDisplayTraderBlockEntity)>)>
static readonly "FREEZER_TRADER": $RegistryObject<($BlockEntityType<($FreezerTraderBlockEntity)>)>
static readonly "TICKET_TRADER": $RegistryObject<($BlockEntityType<($TicketTraderBlockEntity)>)>
static readonly "BOOK_TRADER": $RegistryObject<($BlockEntityType<($BookTraderBlockEntity)>)>
static readonly "SLOT_MACHINE_TRADER": $RegistryObject<($BlockEntityType<($SlotMachineTraderBlockEntity)>)>
static readonly "CAPABILITY_INTERFACE": $RegistryObject<($BlockEntityType<($CapabilityInterfaceBlockEntity)>)>
static readonly "TRADER_INTERFACE_ITEM": $RegistryObject<($BlockEntityType<($ItemTraderInterfaceBlockEntity)>)>
static readonly "CASH_REGISTER": $RegistryObject<($BlockEntityType<($CashRegisterBlockEntity)>)>
static readonly "COIN_MINT": $RegistryObject<($BlockEntityType<($CoinMintBlockEntity)>)>
static readonly "TICKET_MACHINE": $RegistryObject<($BlockEntityType<($TicketStationBlockEntity)>)>
static readonly "PAYGATE": $RegistryObject<($BlockEntityType<($PaygateBlockEntity)>)>
static readonly "TAX_BLOCK": $RegistryObject<($BlockEntityType<($TaxBlockEntity)>)>
static readonly "COIN_JAR": $RegistryObject<($BlockEntityType<($CoinJarBlockEntity)>)>
static readonly "AUCTION_STAND": $RegistryObject<($BlockEntityType<($AuctionStandBlockEntity)>)>
static readonly "COIN_CHEST": $RegistryObject<($BlockEntityType<($CoinChestBlockEntity)>)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockEntities$Type = ($ModBlockEntities);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockEntities_ = $ModBlockEntities$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$MoneyHandler" {
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MoneyViewer, $MoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyViewer"

export class $MoneyHandler extends $MoneyViewer implements $IMoneyHandler {

constructor()

public static "combine"(arg0: $List$Type<($IMoneyHandler$Type)>): $IMoneyHandler
public "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyHandler$Type = ($MoneyHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyHandler_ = $MoneyHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"

export interface $ITraderStorageMenu extends $IClientTracker {

 "getContext"(): $TradeContext
 "clearContainer"(arg0: $Container$Type): void
 "SetCoinSlotsActive"(arg0: boolean): void
 "clearTab"(arg0: integer): void
 "setTab"(arg0: integer, arg1: $TraderStorageTab$Type): void
 "getTrader"(): $TraderData
 "createTabChangeMessage"(arg0: integer): $LazyPacketData$Builder
 "createTabChangeMessage"(arg0: integer, arg1: $LazyPacketData$Builder$Type): $LazyPacketData$Builder
 "getPlayer"(): $Player
 "hasPermission"(arg0: string): boolean
 "getPermissionLevel"(arg0: string): integer
 "changeTab"(arg0: integer): void
 "changeTab"(arg0: integer, arg1: $LazyPacketData$Builder$Type): void
 "getHeldItem"(): $ItemStack
 "setHeldItem"(arg0: $ItemStack$Type): void
 "SendMessage"(arg0: $LazyPacketData$Builder$Type): void
 "isClient"(): boolean
 "isServer"(): boolean
}

export namespace $ITraderStorageMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITraderStorageMenu$Type = ($ITraderStorageMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITraderStorageMenu_ = $ITraderStorageMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$LazyWidgetPositioner, $LazyWidgetPositioner$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/util/$LazyWidgetPositioner"
import {$TraderMenu, $TraderMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ITraderScreen, $ITraderScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/customer/$ITraderScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$TraderClientTab, $TraderClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/trader/$TraderClientTab"

export class $TraderScreen extends $EasyMenuScreen<($TraderMenu)> implements $ITraderScreen {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "WIDTH": integer
static readonly "HEIGHT": integer
readonly "leftEdgePositioner": $LazyWidgetPositioner
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $TraderMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "initialize"(arg0: $ScreenArea$Type): void
public "closeTab"(): void
public "blockInventoryClosing"(): boolean
public "setTab"(arg0: $TraderClientTab$Type): void
set "tab"(value: $TraderClientTab$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderScreen$Type = ($TraderScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderScreen_ = $TraderScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$ItemTraderInterfaceBlockEntity" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TraderItemStorage, $TraderItemStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage"
import {$TradeContext$Builder, $TradeContext$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext$Builder"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$TraderInterfaceBlockEntity, $TraderInterfaceBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemInterfaceHandler, $ItemInterfaceHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/handler/$ItemInterfaceHandler"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$TraderItemStorage$ITraderItemFilter, $TraderItemStorage$ITraderItemFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage$ITraderItemFilter"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"

export class $ItemTraderInterfaceBlockEntity extends $TraderInterfaceBlockEntity implements $TraderItemStorage$ITraderItemFilter {
static readonly "INTERACTION_DELAY": integer
readonly "owner": $OwnerData
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "getName"(): $MutableComponent
public "allowAdditionalUpgrade"(arg0: $UpgradeType$Type): boolean
public "getStorageStackLimit"(): integer
public "buildTradeContext"(arg0: $TradeContext$Builder$Type): $TradeContext$Builder
public "initMenuTabs"(arg0: $TraderInterfaceMenu$Type): void
public "validTraderType"(arg0: $TraderData$Type): boolean
public "load"(arg0: $CompoundTag$Type): void
public "allowInput"(arg0: $ItemStack$Type): boolean
public "getItemHandler"(): $ItemInterfaceHandler
public "getAdditionalContents"(arg0: $List$Type<($ItemStack$Type)>): void
public "allowOutput"(arg0: $ItemStack$Type): boolean
public "setItemBufferDirty"(): void
public "getItemBuffer"(): $TraderItemStorage
public "isItemRelevant"(arg0: $ItemStack$Type): boolean
public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
get "name"(): $MutableComponent
get "storageStackLimit"(): integer
get "itemHandler"(): $ItemInterfaceHandler
get "itemBuffer"(): $TraderItemStorage
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTraderInterfaceBlockEntity$Type = ($ItemTraderInterfaceBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTraderInterfaceBlockEntity_ = $ItemTraderInterfaceBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketRecipe" {
import {$InputReplacement, $InputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$InputReplacement"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSchema, $RecipeSchema$Type} from "packages/dev/latvian/mods/kubejs/recipe/schema/$RecipeSchema"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$TicketStationRecipe, $TicketStationRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketStationRecipe"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ReplacementMatch, $ReplacementMatch$Type} from "packages/dev/latvian/mods/kubejs/recipe/$ReplacementMatch"
import {$OutputReplacement, $OutputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$OutputReplacement"

export class $TicketRecipe implements $TicketStationRecipe {

constructor(arg0: $ResourceLocation$Type, arg1: $Ingredient$Type, arg2: $Ingredient$Type, arg3: $Item$Type)

public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "getIngredient"(): $Ingredient
public "validIngredient"(arg0: $ItemStack$Type): boolean
public "jeiModifierList"(): $List<($ItemStack)>
public "exampleResult"(): $ItemStack
public "consumeModifier"(): boolean
public "peekAtResult"(arg0: $Container$Type): $ItemStack
public "validModifier"(arg0: $ItemStack$Type): boolean
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(arg0: $Container$Type, arg1: $RegistryAccess$Type): $ItemStack
public "getId"(): $ResourceLocation
public static "exampleModifierList"(arg0: $TagKey$Type<($Item$Type)>, ...arg1: ($Item$Type)[]): $List<($ItemStack)>
public static "exampleTicketList"(arg0: $RegistryObject$Type<(any)>): $List<($ItemStack)>
public static "exampleTicketList"(arg0: $Ingredient$Type): $List<($ItemStack)>
public static "exampleTicketList"(arg0: $Item$Type): $List<($ItemStack)>
public "matches"(arg0: $Container$Type, arg1: $Level$Type): boolean
public "getRemainingItems"(arg0: $Container$Type): $NonNullList<($ItemStack)>
public "getIngredients"(): $NonNullList<($Ingredient)>
public "getToastSymbol"(): $ItemStack
public "isIncomplete"(): boolean
public "showNotification"(): boolean
public "isSpecial"(): boolean
public "getType"(): $ResourceLocation
public "replaceOutput"(match: $ReplacementMatch$Type, arg1: $OutputReplacement$Type): boolean
public "setGroup"(group: string): void
public "hasInput"(match: $ReplacementMatch$Type): boolean
public "getOrCreateId"(): $ResourceLocation
public "getSchema"(): $RecipeSchema
public "replaceInput"(match: $ReplacementMatch$Type, arg1: $InputReplacement$Type): boolean
public "hasOutput"(match: $ReplacementMatch$Type): boolean
public "getGroup"(): string
public "getMod"(): string
get "ingredient"(): $Ingredient
get "serializer"(): $RecipeSerializer<(any)>
get "id"(): $ResourceLocation
get "ingredients"(): $NonNullList<($Ingredient)>
get "toastSymbol"(): $ItemStack
get "incomplete"(): boolean
get "special"(): boolean
get "type"(): $ResourceLocation
set "group"(value: string)
get "orCreateId"(): $ResourceLocation
get "schema"(): $RecipeSchema
get "group"(): string
get "mod"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketRecipe$Type = ($TicketRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketRecipe_ = $TicketRecipe$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBundle" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$BundleRequestFilter, $BundleRequestFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$BundleRequestFilter"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $RegistryObjectBundle<T, L> {

constructor(arg0: $Comparator$Type<(L)>)

public "lock"(): $RegistryObjectBundle<(T), (L)>
public "get"(arg0: L): T
public "put"(arg0: L, arg1: $RegistryObject$Type<(T)>): void
public "forEach"(arg0: $BiConsumer$Type<(L), ($RegistryObject$Type<(T)>)>): void
public "getAll"(): $List<(T)>
public "getRegistryObject"(arg0: L): $RegistryObject<(T)>
public "getAllSorted"(arg0: $BundleRequestFilter$Type): $List<(T)>
public "getAllSorted"(): $List<(T)>
public "getAllSorted"(arg0: $BundleRequestFilter$Type, arg1: $Comparator$Type<(L)>): $List<(T)>
public "getAllSorted"(arg0: $Comparator$Type<(L)>): $List<(T)>
public "getSome"(...arg0: (L)[]): $List<(T)>
public "getAllKeys"(): $List<($ResourceLocation)>
public "getAllRegistryObjects"(): $Collection<($RegistryObject<(T)>)>
public "getSupplier"(): $List<($Supplier<(T)>)>
get "all"(): $List<(T)>
get "allSorted"(): $List<(T)>
get "allKeys"(): $List<($ResourceLocation)>
get "allRegistryObjects"(): $Collection<($RegistryObject<(T)>)>
get "supplier"(): $List<($Supplier<(T)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegistryObjectBundle$Type<T, L> = ($RegistryObjectBundle<(T), (L)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegistryObjectBundle_<T, L> = $RegistryObjectBundle$Type<(T), (L)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket$Simple" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $ClientToServerPacket$Simple extends $ClientToServerPacket {

constructor()

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientToServerPacket$Simple$Type = ($ClientToServerPacket$Simple);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientToServerPacket$Simple_ = $ClientToServerPacket$Simple$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$ChestCoinCollectButton" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ContainerScreen, $ContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$ContainerScreen"
import {$IconButton, $IconButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconButton"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ChestCoinCollectButton extends $IconButton {
static readonly "SIZE": integer
 "bgColor": integer
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ContainerScreen$Type)

public static "tryRenderTooltip"(arg0: $EasyGuiGraphics$Type, arg1: integer, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChestCoinCollectButton$Type = ($ChestCoinCollectButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChestCoinCollectButton_ = $ChestCoinCollectButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/client/resourcepacks/$LCCloserItemPositionProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ItemPositionProvider, $ItemPositionProvider$Type} from "packages/io/github/lightman314/lightmanscurrency/datagen/client/generators/$ItemPositionProvider"

export class $LCCloserItemPositionProvider extends $ItemPositionProvider {
static readonly "MO": float

constructor(arg0: $PackOutput$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCCloserItemPositionProvider$Type = ($LCCloserItemPositionProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCCloserItemPositionProvider_ = $LCCloserItemPositionProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/base/$TraderSelectTab" {
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"

export class $TraderSelectTab extends $TraderInterfaceTab {
static readonly "TAB_INFO": integer
static readonly "TAB_STORAGE": integer
static readonly "TAB_TRADER_SELECT": integer
static readonly "TAB_TRADE_SELECT": integer
static readonly "TAB_OWNERSHIP": integer
readonly "menu": $TraderInterfaceMenu

constructor(arg0: $TraderInterfaceMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "handleMessage"(arg0: $LazyPacketData$Type): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "setTrader"(arg0: long): void
public "createClientTab"(arg0: $TraderInterfaceScreen$Type): $TraderInterfaceClientTab<(any)>
public "onTabClose"(): void
public "onTabOpen"(): void
set "trader"(value: long)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderSelectTab$Type = ($TraderSelectTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderSelectTab_ = $TraderSelectTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$BooleanOption" {
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $BooleanOption extends $ConfigOption<(boolean)> {
static readonly "PARSER": $ConfigParser<(boolean)>


public static "create"(arg0: $NonNullSupplier$Type<(boolean)>): $BooleanOption
public static "createTrue"(): $BooleanOption
public static "createFalse"(): $BooleanOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BooleanOption$Type = ($BooleanOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BooleanOption_ = $BooleanOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/loot/packs/$EntityAddonLoot" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LootTable$Builder, $LootTable$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable$Builder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LootTableSubProvider, $LootTableSubProvider$Type} from "packages/net/minecraft/data/loot/$LootTableSubProvider"

export class $EntityAddonLoot implements $LootTableSubProvider {

constructor()

public "generate"(arg0: $BiConsumer$Type<($ResourceLocation$Type), ($LootTable$Builder$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityAddonLoot$Type = ($EntityAddonLoot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityAddonLoot_ = $EntityAddonLoot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$StatKey, $StatKey$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatKey"
import {$OwnerType, $OwnerType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$OwnerType"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $Owner implements $IClientTracker {
static readonly "NULL": $Owner
static readonly "NULL_TYPE": $OwnerType

constructor()

public "getName"(): $MutableComponent
public "equals"(arg0: any): boolean
public static "load"(arg0: $CompoundTag$Type): $Owner
public "matches"(arg0: $Owner$Type): boolean
public "save"(): $CompoundTag
public "getType"(): $OwnerType
public "isNull"(): boolean
public "isClient"(): boolean
public "pushNotification"(arg0: $NonNullSupplier$Type<(any)>, arg1: integer, arg2: boolean): void
public "hasNotificationLevels"(): boolean
public "asPlayerReference"(): $PlayerReference
public static "getOwnerLevelBlurb"(arg0: integer): $MutableComponent
public "alwaysValid"(): boolean
public "getCommandLabel"(): $MutableComponent
public "isMember"(arg0: $PlayerReference$Type): boolean
public "flagAsClient"(): $Owner
public "flagAsClient"(arg0: boolean): void
public "asBankReference"(): $BankReference
public "incrementStat"<T>(arg0: $StatKey$Type<(any), (T)>, arg1: T): void
public "isOnline"(): boolean
public "stillValid"(): boolean
public "isAdmin"(arg0: $PlayerReference$Type): boolean
public "isServer"(): boolean
get "name"(): $MutableComponent
get "type"(): $OwnerType
get "null"(): boolean
get "client"(): boolean
get "commandLabel"(): $MutableComponent
get "online"(): boolean
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Owner$Type = ($Owner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Owner_ = $Owner$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType$Instance" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $StatType$Instance<A, B> implements $IClientTracker {


public "add"(arg0: B): void
public "get"(): A
public "load"(arg0: $CompoundTag$Type): void
public "clear"(): void
public "save"(): $CompoundTag
public "setParent"(arg0: $StatTracker$Type): void
public "isClient"(): boolean
public "getInfoText"(arg0: string): $MutableComponent
public "getDisplay"(): any
public "isServer"(): boolean
set "parent"(value: $StatTracker$Type)
get "client"(): boolean
get "display"(): any
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatType$Instance$Type<A, B> = ($StatType$Instance<(A), (B)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatType$Instance_<A, B> = $StatType$Instance$Type<(A), (B)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$ItemListOption" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ListOption, $ListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ListOption"

export class $ItemListOption extends $ListOption<($Item)> {


public static "create"(arg0: $NonNullSupplier$Type<($List$Type<($Item$Type)>)>, arg1: boolean): $ItemListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<($Item$Type)>)>): $ItemListOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemListOption$Type = ($ItemListOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemListOption_ = $ItemListOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/types/builtin/coins/$CoinContainerMoneyHandler" {
import {$MoneyHandler, $MoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$MoneyHandler"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$MoneyView$Builder, $MoneyView$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView$Builder"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $CoinContainerMoneyHandler extends $MoneyHandler {

constructor(arg0: $Container$Type, arg1: $Consumer$Type<($ItemStack$Type)>)

public static "queryContainerContents"(arg0: $Container$Type, arg1: $MoneyView$Builder$Type): void
public "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinContainerMoneyHandler$Type = ($CoinContainerMoneyHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinContainerMoneyHandler_ = $CoinContainerMoneyHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/$IMoneyCollectionMenu" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IMoneyCollectionMenu {

 "CollectStoredMoney"(): void

(): void
}

export namespace $IMoneyCollectionMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMoneyCollectionMenu$Type = ($IMoneyCollectionMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMoneyCollectionMenu_ = $IMoneyCollectionMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/config/$ItemValueConfig" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ModConfigEvent, $ModConfigEvent$Type} from "packages/net/minecraftforge/fml/event/config/$ModConfigEvent"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ForgeConfigSpec$Builder, $ForgeConfigSpec$Builder$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$Builder"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ItemValueConfig implements $Supplier<($ItemLike)> {


public "get"(): $Item
public static "define"(arg0: $ForgeConfigSpec$Builder$Type, arg1: string, arg2: string, arg3: $Supplier$Type<($ForgeConfigSpec$Type)>): $ItemValueConfig
public static "define"(arg0: $ForgeConfigSpec$Builder$Type, arg1: string, arg2: $ResourceLocation$Type, arg3: $Supplier$Type<($ForgeConfigSpec$Type)>): $ItemValueConfig
public static "define"(arg0: $ForgeConfigSpec$Builder$Type, arg1: string, arg2: $ResourceLocation$Type, arg3: $Supplier$Type<($Item$Type)>, arg4: $Supplier$Type<($ForgeConfigSpec$Type)>): $ItemValueConfig
public "onConfigReloaded"(arg0: $ModConfigEvent$Type): void
public "withCheck"(arg0: $Predicate$Type<($Item$Type)>): $ItemValueConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemValueConfig$Type = ($ItemValueConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemValueConfig_ = $ItemValueConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trades_basic/$BasicTradeEditTab" {
import {$TraderStorageMenu, $TraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderStorageMenu"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"

export class $BasicTradeEditTab extends $TraderStorageTab {
static readonly "INTERACTION_INPUT": integer
static readonly "INTERACTION_OUTPUT": integer
static readonly "INTERACTION_OTHER": integer
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "sendInputInteractionMessage"(arg0: integer, arg1: integer, arg2: integer, arg3: $ItemStack$Type): void
public "sendOutputInteractionMessage"(arg0: integer, arg1: integer, arg2: integer, arg3: $ItemStack$Type): void
public "sendOpenTabMessage"(arg0: integer, arg1: $LazyPacketData$Builder$Type): void
public "setClient"(arg0: $Consumer$Type<($LazyPacketData$Builder$Type)>): void
public "removeTrade"(): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "addTrade"(): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "sendOtherInteractionMessage"(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
set "client"(value: $Consumer$Type<($LazyPacketData$Builder$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasicTradeEditTab$Type = ($BasicTradeEditTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasicTradeEditTab_ = $BasicTradeEditTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$ITradeRuleHost, $ITradeRuleHost$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$ITradeRuleHost"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"

export class $TradeRulesTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu


public "getHost"(): $ITradeRuleHost
public "canOpen"(arg0: $Player$Type): boolean
public "EditTradeRule"(arg0: $TradeRuleType$Type<(any)>, arg1: $LazyPacketData$Builder$Type): void
public "EditTradeRule"(arg0: $ResourceLocation$Type, arg1: $LazyPacketData$Builder$Type): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "goBack"(): void
public "onTabClose"(): void
public "onTabOpen"(): void
get "host"(): $ITradeRuleHost
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeRulesTab$Type = ($TradeRulesTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeRulesTab_ = $TradeRulesTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$IntListOption" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ListOption, $ListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ListOption"

export class $IntListOption extends $ListOption<(integer)> {


public static "create"(arg0: $List$Type<(integer)>, arg1: integer, arg2: integer): $IntListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(integer)>)>): $IntListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(integer)>)>, arg1: integer): $IntListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(integer)>)>, arg1: integer, arg2: integer): $IntListOption
public static "create"(arg0: $List$Type<(integer)>, arg1: integer): $IntListOption
public static "create"(arg0: $List$Type<(integer)>): $IntListOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntListOption$Type = ($IntListOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntListOption_ = $IntListOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$SlotMachineScreen" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$LazyWidgetPositioner, $LazyWidgetPositioner$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/util/$LazyWidgetPositioner"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SlotMachineMenu, $SlotMachineMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$SlotMachineMenu"
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $SlotMachineScreen extends $EasyMenuScreen<($SlotMachineMenu)> implements $IScrollable {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "WIDTH": integer
static readonly "HEIGHT": integer
static readonly "ENTRY_ROWS": integer
static readonly "ENTRY_COLUMNS": integer
static readonly "ENTRIES_PER_PAGE": integer
static readonly "SPRITE_INFO": $Sprite
static readonly "SPRITE_INTERACT_1": $Sprite
static readonly "SPRITE_INTERACT_5": $Sprite
static readonly "SPRITE_INTERACT_10": $Sprite
readonly "leftEdgePositioner": $LazyWidgetPositioner
readonly "SM_INFO_WIDGET": $ScreenPosition
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $SlotMachineMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineScreen$Type = ($SlotMachineScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineScreen_ = $SlotMachineScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/slot_machine/$SlotMachineEntryTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $SlotMachineEntryTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "AddEntry"(): void
public "AddEntryItem"(arg0: integer, arg1: $ItemStack$Type): void
public "EditEntryItem"(arg0: integer, arg1: integer, arg2: $ItemStack$Type): void
public "ChangeEntryWeight"(arg0: integer, arg1: integer): void
public "RemoveEntryItem"(arg0: integer, arg1: integer): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "RemoveEntry"(arg0: integer): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineEntryTab$Type = ($SlotMachineEntryTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineEntryTab_ = $SlotMachineEntryTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParsingException" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$Exception, $Exception$Type} from "packages/java/lang/$Exception"

export class $ConfigParsingException extends $Exception {

constructor(arg0: string)
constructor(arg0: string, arg1: $Throwable$Type)
constructor(arg0: $Throwable$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigParsingException$Type = ($ConfigParsingException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigParsingException_ = $ConfigParsingException$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"

export class $DisplayData extends $Record {

constructor(xOffset: integer, yOffset: integer, width: integer, height: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "divide"(arg0: integer): $List<($DisplayData)>
public "width"(): integer
public "height"(): integer
public "yOffset"(): integer
public "xOffset"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplayData$Type = ($DisplayData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplayData_ = $DisplayData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/data/$ClientTeamData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientPlayerNetworkEvent$LoggingOut, $ClientPlayerNetworkEvent$LoggingOut$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$LoggingOut"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"

export class $ClientTeamData {

constructor()

public static "GetAllTeams"(): $List<($Team)>
public static "onClientLogout"(arg0: $ClientPlayerNetworkEvent$LoggingOut$Type): void
public static "UpdateTeam"(arg0: $CompoundTag$Type): void
public static "RemoveTeam"(arg0: long): void
public static "ClearTeams"(): void
public static "GetTeam"(arg0: long): $Team
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTeamData$Type = ($ClientTeamData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTeamData_ = $ClientTeamData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$CustomPacket, $CustomPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PacketDistributor$PacketTarget, $PacketDistributor$PacketTarget$Type} from "packages/net/minecraftforge/network/$PacketDistributor$PacketTarget"

export class $ServerToClientPacket extends $CustomPacket {

constructor()

public "sendToTargets"(arg0: $List$Type<($PacketDistributor$PacketTarget$Type)>): void
public "sendToTarget"(arg0: $PacketDistributor$PacketTarget$Type): void
public "sendToAll"(): void
public "sendTo"(arg0: $List$Type<($ServerPlayer$Type)>): void
public "sendTo"(arg0: $ServerPlayer$Type): void
public "sendTo"(arg0: $Player$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerToClientPacket$Type = ($ServerToClientPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerToClientPacket_ = $ServerToClientPacket$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/entity/layers/$WalletLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $WalletLayer<T extends $LivingEntity, M extends $EntityModel<(T)>> extends $RenderLayer<(T), (M)> {

constructor(arg0: $RenderLayerParent$Type<(T), (M)>)

public static "createLayer"(): $LayerDefinition
public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletLayer$Type<T, M> = ($WalletLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletLayer_<T, M> = $WalletLayer$Type<(T), (M)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/team/$SPacketUpdateClientTeam" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketUpdateClientTeam extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketUpdateClientTeam)>

constructor(arg0: $CompoundTag$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketUpdateClientTeam$Type = ($SPacketUpdateClientTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketUpdateClientTeam_ = $SPacketUpdateClientTeam$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinMintBlockEntity" {
import {$EasyBlockEntity, $EasyBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$EasyBlockEntity"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IServerTicker, $IServerTicker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IServerTicker"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CoinMintRecipe, $CoinMintRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CoinMintBlockEntity extends $EasyBlockEntity implements $IServerTicker {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "dumpContents"(arg0: $Level$Type, arg1: $BlockPos$Type): void
public "onLoad"(): void
public "getExpectedMintTime"(): integer
public "getMintProgress"(): float
public "getMintTime"(): integer
public static "getCoinMintRecipes"(arg0: $Level$Type): $List<($CoinMintRecipe)>
public "hasOutputSpace"(): boolean
public "validMintInput"(arg0: $ItemStack$Type): boolean
public "getRelevantRecipe"(): $CoinMintRecipe
public "mintCoin"(): void
public "invalidateCaps"(): void
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
public "serverTick"(): void
public "getStorage"(): $SimpleContainer
get "expectedMintTime"(): integer
get "mintProgress"(): float
get "mintTime"(): integer
get "relevantRecipe"(): $CoinMintRecipe
get "storage"(): $SimpleContainer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinMintBlockEntity$Type = ($CoinMintBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinMintBlockEntity_ = $CoinMintBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$BankCategory" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$NotificationCategoryType, $NotificationCategoryType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategoryType"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $BankCategory extends $NotificationCategory {
static readonly "TYPE": $NotificationCategoryType<($BankCategory)>
static readonly "GENERAL_TYPE": $NotificationCategoryType<(any)>
static readonly "GENERAL": $NotificationCategory

constructor(arg0: $MutableComponent$Type)
constructor(arg0: $CompoundTag$Type)

public "getName"(): $MutableComponent
public "matches"(arg0: $NotificationCategory$Type): boolean
public "getIcon"(): $IconData
get "name"(): $MutableComponent
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankCategory$Type = ($BankCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankCategory_ = $BankCategory$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$CoinSlot$ICoinSlotListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $CoinSlot$ICoinSlotListener {

 "onCoinSlotChanged"(): void

(): void
}

export namespace $CoinSlot$ICoinSlotListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinSlot$ICoinSlotListener$Type = ($CoinSlot$ICoinSlotListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinSlot$ICoinSlotListener_ = $CoinSlot$ICoinSlotListener$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$RecipeTypes" {
import {$TicketStationRecipe, $TicketStationRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketStationRecipe"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$CoinMintRecipe, $CoinMintRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe"

export class $RecipeTypes {
static readonly "COIN_MINT": $RegistryObject<($RecipeType<($CoinMintRecipe)>)>
static readonly "TICKET": $RegistryObject<($RecipeType<($TicketStationRecipe)>)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeTypes$Type = ($RecipeTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeTypes_ = $RecipeTypes$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$StatType, $StatType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType"
import {$StatType$Instance, $StatType$Instance$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType$Instance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$StatKey, $StatKey$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatKey"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $StatTracker implements $IClientTracker {

constructor(arg0: $Runnable$Type, arg1: $IClientTracker$Type)

public "load"(arg0: $CompoundTag$Type): void
public "clear"(): void
public "save"(): $CompoundTag
public "getStat"(arg0: string): $StatType$Instance<(any), (any)>
public "getStat"<T>(arg0: $StatKey$Type<(T), (any)>, arg1: T): T
public "isClient"(): boolean
public "incrementStat"<T>(arg0: $StatKey$Type<(any), (T)>, arg1: T): void
public "addStat"<A, B>(arg0: string, arg1: $StatType$Instance$Type<(A), (B)>): $StatType$Instance<(A), (B)>
public "addStat"<A, B>(arg0: string, arg1: $StatType$Type<(A), (B)>): $StatType$Instance<(A), (B)>
public "addStat"<A, B>(arg0: $StatKey$Type<(A), (B)>): $StatType$Instance<(A), (B)>
public "setChanged"(): void
public "getDisplayLines"(): $List<($MutableComponent)>
public "isServer"(): boolean
get "client"(): boolean
get "displayLines"(): $List<($MutableComponent)>
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatTracker$Type = ($StatTracker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatTracker_ = $StatTracker$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/text/$TimeUnitTextEntry" {
import {$TextEntry, $TextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry"

export class $TimeUnitTextEntry {
readonly "fullText": $TextEntry
readonly "pluralText": $TextEntry
readonly "shortText": $TextEntry


public static "of"(arg0: string): $TimeUnitTextEntry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimeUnitTextEntry$Type = ($TimeUnitTextEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimeUnitTextEntry_ = $TimeUnitTextEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$SimpleTrade$Serializer" {
import {$ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingSerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingSerializer"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ItemListingSerializer$IItemListingDeserializer, $ItemListingSerializer$IItemListingDeserializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingDeserializer"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SimpleTrade$Serializer implements $ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingDeserializer {


public "getType"(): $ResourceLocation
public "deserialize"(arg0: $JsonObject$Type): $VillagerTrades$ItemListing
public "serializeInternal"(arg0: $JsonObject$Type, arg1: $VillagerTrades$ItemListing$Type): $JsonObject
public "serialize"(arg0: $VillagerTrades$ItemListing$Type): $JsonObject
get "type"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleTrade$Serializer$Type = ($SimpleTrade$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleTrade$Serializer_ = $SimpleTrade$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/client/language/$TranslationProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$LanguageProvider, $LanguageProvider$Type} from "packages/net/minecraftforge/common/data/$LanguageProvider"

export class $TranslationProvider extends $LanguageProvider {


public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TranslationProvider$Type = ($TranslationProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TranslationProvider_ = $TranslationProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$SimpleSlot" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $SimpleSlot extends $Slot {
 "active": boolean
 "locked": boolean
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer)

public static "Lock"(arg0: $AbstractContainerMenu$Type): void
public static "Lock"(arg0: $AbstractContainerMenu$Type, arg1: $Function$Type<($SimpleSlot$Type), (boolean)>): void
public static "SetActive"(arg0: $List$Type<(any)>): void
public static "SetActive"(arg0: $AbstractContainerMenu$Type, arg1: $Function$Type<($SimpleSlot$Type), (boolean)>): void
public static "SetActive"(arg0: $AbstractContainerMenu$Type): void
public static "SetActive"(arg0: $List$Type<(any)>, arg1: boolean): void
public "remove"(arg0: integer): $ItemStack
public "isActive"(): boolean
public "mayPlace"(arg0: $ItemStack$Type): boolean
public "mayPickup"(arg0: $Player$Type): boolean
public "setListener"(arg0: $Runnable$Type): void
public static "SetLocked"(arg0: $AbstractContainerMenu$Type, arg1: boolean, arg2: $Function$Type<($SimpleSlot$Type), (boolean)>): void
public static "SetLocked"(arg0: $AbstractContainerMenu$Type, arg1: boolean): void
public static "SetInactive"(arg0: $List$Type<(any)>): void
public static "SetInactive"(arg0: $AbstractContainerMenu$Type, arg1: $Function$Type<($SimpleSlot$Type), (boolean)>): void
public static "SetInactive"(arg0: $AbstractContainerMenu$Type): void
public static "Unlock"(arg0: $AbstractContainerMenu$Type, arg1: $Function$Type<($SimpleSlot$Type), (boolean)>): void
public static "Unlock"(arg0: $AbstractContainerMenu$Type): void
public "setChanged"(): void
get "active"(): boolean
set "listener"(value: $Runnable$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleSlot$Type = ($SimpleSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleSlot_ = $SimpleSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$ConfiguredTradeMod" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$StringBuilder, $StringBuilder$Type} from "packages/java/lang/$StringBuilder"
import {$VillagerTradeMods$Builder, $VillagerTradeMods$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMods$Builder"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ConfiguredTradeMod$ModBuilder, $ConfiguredTradeMod$ModBuilder$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$ConfiguredTradeMod$ModBuilder"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VillagerTradeMod, $VillagerTradeMod$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMod"

export class $ConfiguredTradeMod extends $VillagerTradeMod {

constructor(arg0: $Pair$Type<($Item$Type), ($Item$Type)>, arg1: $Map$Type<(string), ($Pair$Type<($Item$Type), ($Item$Type)>)>)

public static "builder"(arg0: $VillagerTradeMods$Builder$Type): $ConfiguredTradeMod$ModBuilder
public static "builder"(): $ConfiguredTradeMod$ModBuilder
public "write"(arg0: $StringBuilder$Type): void
public static "tryParse"(arg0: string, arg1: boolean): $ConfiguredTradeMod
public "modifyResult"(arg0: $Entity$Type, arg1: $ItemStack$Type): $ItemStack
public "modifyCost"(arg0: $Entity$Type, arg1: $ItemStack$Type): $ItemStack
public static "buildPair"(arg0: $Pair$Type<($Supplier$Type<(any)>), ($Supplier$Type<(any)>)>): $Pair<($Item), ($Item)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfiguredTradeMod$Type = ($ConfiguredTradeMod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfiguredTradeMod_ = $ConfiguredTradeMod$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/$NetworkTradeReference" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$NetworkTraderReference, $NetworkTraderReference$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/$NetworkTraderReference"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"

export class $NetworkTradeReference extends $NetworkTraderReference {

constructor(arg0: $Supplier$Type<(boolean)>, arg1: $Function$Type<($CompoundTag$Type), ($TradeData$Type)>)

public "load"(arg0: $CompoundTag$Type): void
public "save"(): $CompoundTag
public "hasTrade"(): boolean
public "getTradeIndex"(): integer
public "getLocalTrade"(): $TradeData
public "refreshTrade"(): void
public "setTrade"(arg0: integer): void
public "getTrueTrade"(): $TradeData
public "copyTrade"(arg0: $TradeData$Type): $TradeData
get "tradeIndex"(): integer
get "localTrade"(): $TradeData
set "trade"(value: integer)
get "trueTrade"(): $TradeData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkTradeReference$Type = ($NetworkTradeReference);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkTradeReference_ = $NetworkTradeReference$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/paygate/tradedata/client/$PaygateTradeButtonRenderer" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$PaygateTradeData, $PaygateTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/paygate/tradedata/$PaygateTradeData"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$DisplayData, $DisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"

export class $PaygateTradeButtonRenderer extends $TradeRenderManager<($PaygateTradeData)> {
readonly "trade": T

constructor(arg0: $PaygateTradeData$Type)

public "getOutputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "arrowPosition"(arg0: $TradeContext$Type): $LazyOptional<($ScreenPosition)>
public "inputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "outputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "getInputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "tradeButtonWidth"(arg0: $TradeContext$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaygateTradeButtonRenderer$Type = ($PaygateTradeButtonRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaygateTradeButtonRenderer_ = $PaygateTradeButtonRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/slot_machine/$SlotMachinePriceTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $SlotMachinePriceTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "SetPrice"(arg0: $MoneyValue$Type): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachinePriceTab$Type = ($SlotMachinePriceTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachinePriceTab_ = $SlotMachinePriceTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketRecipe$Serializer" {
import {$TicketRecipe, $TicketRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketRecipe"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $TicketRecipe$Serializer implements $RecipeSerializer<($TicketRecipe)> {

constructor()

public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): $TicketRecipe
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): $TicketRecipe
public "toNetwork"(arg0: $FriendlyByteBuf$Type, arg1: $TicketRecipe$Type): void
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type, arg2: $ICondition$IContext$Type): $TicketRecipe
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketRecipe$Serializer$Type = ($TicketRecipe$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketRecipe$Serializer_ = $TicketRecipe$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/providers/$WalletBankMenuProvider" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $WalletBankMenuProvider implements $MenuProvider {

constructor(arg0: integer)

public "getDisplayName"(): $Component
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletBankMenuProvider$Type = ($WalletBankMenuProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletBankMenuProvider_ = $WalletBankMenuProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$EjectionSaveData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EjectionData, $EjectionData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$EjectionData"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $EjectionSaveData extends $SavedData {


/**
 * 
 * @deprecated
 */
public static "GiveOldEjectionData"(arg0: $EjectionData$Type): void
public static "MarkEjectionDataDirty"(): void
public static "GetValidEjectionData"(arg0: boolean, arg1: $Player$Type): $List<($EjectionData)>
public static "RemoveEjectionData"(arg0: $EjectionData$Type): void
public static "GetEjectionData"(arg0: boolean): $List<($EjectionData)>
public static "onPlayerLogin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public "save"(arg0: $CompoundTag$Type): $CompoundTag
public static "HandleEjectionData"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $EjectionData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EjectionSaveData$Type = ($EjectionSaveData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EjectionSaveData_ = $EjectionSaveData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyView$Builder, $MoneyView$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView$Builder"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $MoneyView {


public "valueOf"(arg0: string): $MoneyValue
public "isEmpty"(): boolean
public static "builder"(): $MoneyView$Builder
public static "empty"(): $MoneyView
public "containsValue"(arg0: $MoneyValue$Type): boolean
public "getString"(): string
public "getRandomValue"(): $MoneyValue
public "getRandomValueText"(arg0: $MutableComponent$Type): $MutableComponent
public "getRandomValueText"(arg0: string): $MutableComponent
public "getRandomValueText"(): $MutableComponent
public "capValue"(arg0: $MoneyValue$Type): $MoneyValue
public "allValues"(): $List<($MoneyValue)>
get "string"(): string
get "randomValue"(): $MoneyValue
get "randomValueText"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyView$Type = ($MoneyView);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyView_ = $MoneyView$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/types/$IPlayerMoneyHandler" {
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export interface $IPlayerMoneyHandler extends $IMoneyHandler {

 "updatePlayer"(arg0: $Player$Type): void
 "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
 "flagAsKnown"(arg0: any): void
 "forgetContext"(arg0: any): void
 "hasStoredMoneyChanged"(arg0: any): boolean
 "getStoredMoney"(): $MoneyView
}

export namespace $IPlayerMoneyHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPlayerMoneyHandler$Type = ($IPlayerMoneyHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPlayerMoneyHandler_ = $IPlayerMoneyHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$MoneyStorage, $MoneyStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $IBankAccount extends $IMoneyHolder, $IClientTracker {

 "getName"(): $MutableComponent
 "getNotifications"(): $List<($Notification)>
 "getNotificationLevels"(): $Map<(string), ($MoneyValue)>
 "getNotificationLevelFor"(arg0: string): $MoneyValue
 "setNotificationLevel"(arg0: string, arg1: $MoneyValue$Type): void
 "pushNotification"(arg0: $NonNullSupplier$Type<($Notification$Type)>, arg1: boolean): void
 "pushNotification"(arg0: $NonNullSupplier$Type<($Notification$Type)>): void
 "applyInterest"(arg0: double, arg1: $List$Type<($MoneyValue$Type)>, arg2: boolean, arg3: boolean): void
 "getBalanceText"(): $Component
 "depositMoney"(arg0: $MoneyValue$Type): void
 "getMoneyStorage"(): $MoneyStorage
 "withdrawMoney"(arg0: $MoneyValue$Type): $MoneyValue
 "pushLocalNotification"(arg0: $Notification$Type): void
 "priority"(): integer
 "getTooltipTitle"(): $Component
 "inversePriority"(): integer
 "formatTooltip"(arg0: $List$Type<($Component$Type)>): void
 "isClient"(): boolean
 "isServer"(): boolean
 "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
 "flagAsKnown"(arg0: any): void
 "forgetContext"(arg0: any): void
 "hasStoredMoneyChanged"(arg0: any): boolean
 "getStoredMoney"(): $MoneyView
}

export namespace $IBankAccount {
function sortPayFirst(arg0: $List$Type<($IMoneyHolder$Type)>): void
function sortTakeFirst(arg0: $List$Type<($IMoneyHolder$Type)>): void
function defaultTooltipFormat(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBankAccount$Type = ($IBankAccount);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBankAccount_ = $IBankAccount$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/$CPacketRequestNBT" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketRequestNBT extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketRequestNBT)>

constructor(arg0: $BlockPos$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketRequestNBT$Type = ($CPacketRequestNBT);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketRequestNBT_ = $CPacketRequestNBT$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/wallet/$CPacketWalletToggleAutoExchange" {
import {$ClientToServerPacket$Simple, $ClientToServerPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $CPacketWalletToggleAutoExchange extends $ClientToServerPacket$Simple {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketWalletToggleAutoExchange)>


public static "sendToServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketWalletToggleAutoExchange$Type = ($CPacketWalletToggleAutoExchange);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketWalletToggleAutoExchange_ = $CPacketWalletToggleAutoExchange$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator" {
import {$ChestPoolLevel, $ChestPoolLevel$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/tiers/$ChestPoolLevel"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EntityPoolLevel, $EntityPoolLevel$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/tiers/$EntityPoolLevel"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$DroplistConfigGenerator$Chest, $DroplistConfigGenerator$Chest$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator$Chest"
import {$DroplistConfigGenerator$Entity, $DroplistConfigGenerator$Entity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator$Entity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DroplistConfigGenerator {


public "addEntry"(arg0: string): void
public "addEntry"(arg0: string, arg1: string): void
public "getEntries"(): $ImmutableList<(string)>
public "removeEntry"(arg0: $ResourceLocation$Type): void
public "getDefaultNamespace"(): string
public "setDefaultNamespace"(arg0: string): void
public static "CollectDefaultEntityDrops"(arg0: $EntityPoolLevel$Type): $List<(string)>
public static "CollectDefaultChestDrops"(arg0: $ChestPoolLevel$Type): $List<(string)>
public "resetDefaultNamespace"(): void
public "forceAddEntry"(arg0: $ResourceLocation$Type): void
public "addVanillaEntry"(arg0: string): void
public static "registerEntityListener"(arg0: $Consumer$Type<($DroplistConfigGenerator$Entity$Type)>): void
public static "registerChestListener"(arg0: $Consumer$Type<($DroplistConfigGenerator$Chest$Type)>): void
get "entries"(): $ImmutableList<(string)>
get "defaultNamespace"(): string
set "defaultNamespace"(value: string)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DroplistConfigGenerator$Type = ($DroplistConfigGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DroplistConfigGenerator_ = $DroplistConfigGenerator$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/crafting/builders/$MintRecipeBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RecipeBuilder, $RecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$RecipeBuilder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$CoinMintRecipe$MintType, $CoinMintRecipe$MintType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe$MintType"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$CriterionTriggerInstance, $CriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/$CriterionTriggerInstance"

export class $MintRecipeBuilder implements $RecipeBuilder {

constructor(arg0: $CoinMintRecipe$MintType$Type, arg1: $ItemLike$Type, arg2: integer)

public "ofDuration"(arg0: integer): $MintRecipeBuilder
public "group"(arg0: string): $MintRecipeBuilder
public static "other"(arg0: $ItemLike$Type): $MintRecipeBuilder
public static "other"(arg0: $ItemLike$Type, arg1: integer): $MintRecipeBuilder
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public "accepts"(arg0: $Ingredient$Type, arg1: integer): $MintRecipeBuilder
public "accepts"(arg0: $Ingredient$Type): $MintRecipeBuilder
public "accepts"(arg0: $TagKey$Type<($Item$Type)>, arg1: integer): $MintRecipeBuilder
public "accepts"(arg0: $TagKey$Type<($Item$Type)>): $MintRecipeBuilder
public "accepts"(arg0: $ItemLike$Type): $MintRecipeBuilder
public "accepts"(arg0: $ItemLike$Type, arg1: integer): $MintRecipeBuilder
public "unlockedBy"(arg0: string, arg1: $CriterionTriggerInstance$Type): $MintRecipeBuilder
public static "mint"(arg0: $ItemLike$Type, arg1: integer): $MintRecipeBuilder
public static "mint"(arg0: $ItemLike$Type): $MintRecipeBuilder
public static "melt"(arg0: $ItemLike$Type, arg1: integer): $MintRecipeBuilder
public static "melt"(arg0: $ItemLike$Type): $MintRecipeBuilder
public "getResult"(): $Item
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: string): void
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>): void
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
get "result"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MintRecipeBuilder$Type = ($MintRecipeBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MintRecipeBuilder_ = $MintRecipeBuilder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/trader/$SPacketUpdateClientTrader" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketUpdateClientTrader extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketUpdateClientTrader)>

constructor(arg0: $CompoundTag$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketUpdateClientTrader$Type = ($SPacketUpdateClientTrader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketUpdateClientTrader_ = $SPacketUpdateClientTrader$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$MasterTicketRecipe$Serializer" {
import {$MasterTicketRecipe, $MasterTicketRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$MasterTicketRecipe"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $MasterTicketRecipe$Serializer implements $RecipeSerializer<($MasterTicketRecipe)> {

constructor()

public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): $MasterTicketRecipe
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): $MasterTicketRecipe
public "toNetwork"(arg0: $FriendlyByteBuf$Type, arg1: $MasterTicketRecipe$Type): void
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type, arg2: $ICondition$IContext$Type): $MasterTicketRecipe
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MasterTicketRecipe$Serializer$Type = ($MasterTicketRecipe$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MasterTicketRecipe$Serializer_ = $MasterTicketRecipe$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UpgradeData {
static readonly "EMPTY": $UpgradeData

constructor(arg0: $UpgradeType$Type)

public "getValue"(arg0: string): any
public "read"(arg0: $CompoundTag$Type): void
public "setValue"(arg0: string, arg1: any): void
public "getKeys"(): $Set<(string)>
public "getBooleanValue"(arg0: string): boolean
public "getStringValue"(arg0: string): string
public "writeToNBT"(arg0: $UpgradeType$Type): $CompoundTag
public "writeToNBT"(): $CompoundTag
public "getIntValue"(arg0: string): integer
public "hasKey"(arg0: string): boolean
public "getFloatValue"(arg0: string): float
public "getLongValue"(arg0: string): long
public static "getModifiedEntries"(arg0: $UpgradeData$Type, arg1: $UpgradeType$Type): $Map<(string), (any)>
public "getCompoundValue"(arg0: string): $CompoundTag
get "keys"(): $Set<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeData$Type = ($UpgradeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeData_ = $UpgradeData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/capability/event_unlocks/$CapabilityEventUnlocks" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IEventUnlocks, $IEventUnlocks$Type} from "packages/io/github/lightman314/lightmanscurrency/common/capability/event_unlocks/$IEventUnlocks"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"

export class $CapabilityEventUnlocks {

constructor()

public static "lock"(arg0: $Player$Type, arg1: string): void
public static "unlock"(arg0: $Player$Type, arg1: string): void
public static "createProvider"(arg0: $Player$Type): $ICapabilityProvider
public static "isUnlocked"(arg0: $Player$Type, arg1: string): boolean
public static "getCapability"(arg0: $Player$Type): $IEventUnlocks
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapabilityEventUnlocks$Type = ($CapabilityEventUnlocks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapabilityEventUnlocks_ = $CapabilityEventUnlocks$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockTallRotatable" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$TraderBlockRotatable, $TraderBlockRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockRotatable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ITallBlock, $ITallBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$ITallBlock"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $TraderBlockTallRotatable extends $TraderBlockRotatable implements $ITallBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getBlockEntity"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "playerWillDestroy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
/**
 * 
 * @deprecated
 */
public "getReplacable"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): boolean
public "getIsBottom"(arg0: $BlockState$Type): boolean
public "isReplaceable"(arg0: $Level$Type, arg1: $BlockPos$Type): boolean
public "getIsTop"(arg0: $BlockState$Type): boolean
public "getOtherHeight"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockPos
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderBlockTallRotatable$Type = ($TraderBlockTallRotatable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderBlockTallRotatable_ = $TraderBlockTallRotatable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/bank/$CPacketOpenATM" {
import {$ClientToServerPacket$Simple, $ClientToServerPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $CPacketOpenATM extends $ClientToServerPacket$Simple {
static "HANDLER": $CustomPacket$Handler<($CPacketOpenATM)>


public static "sendToServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketOpenATM$Type = ($CPacketOpenATM);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketOpenATM_ = $CPacketOpenATM$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$IUpgradeItem" {
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$IUpgradeable, $IUpgradeable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$IUpgradeable"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"

export interface $IUpgradeItem {

 "getUpgradeType"(): $UpgradeType
 "getDefaultUpgradeData"(): $UpgradeData
 "onApplied"(arg0: $IUpgradeable$Type): void
}

export namespace $IUpgradeItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IUpgradeItem$Type = ($IUpgradeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IUpgradeItem_ = $IUpgradeItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$BankInterestNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $BankInterestNotification extends $Notification {
static readonly "TYPE": $NotificationType<($BankInterestNotification)>


public "getMessage"(): $MutableComponent
public static "create"(arg0: $MutableComponent$Type, arg1: $MoneyValue$Type): $NonNullSupplier<($Notification)>
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankInterestNotification$Type = ($BankInterestNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankInterestNotification_ = $BankInterestNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$MoneyValueArgument" {
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$RegisterCommandsEvent, $RegisterCommandsEvent$Type} from "packages/net/minecraftforge/event/$RegisterCommandsEvent"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$ArgumentType, $ArgumentType$Type} from "packages/com/mojang/brigadier/arguments/$ArgumentType"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $MoneyValueArgument implements $ArgumentType<($MoneyValue)> {


public static "argument"(arg0: $CommandBuildContext$Type): $MoneyValueArgument
public "parse"(arg0: $StringReader$Type): $MoneyValue
public static "getMoneyValue"(arg0: $CommandContext$Type<($CommandSourceStack$Type)>, arg1: string): $MoneyValue
public "getExamples"(): $Collection<(string)>
public "listSuggestions"<S>(arg0: $CommandContext$Type<(S)>, arg1: $SuggestionsBuilder$Type): $CompletableFuture<($Suggestions)>
public static "safeArgument"(arg0: $RegisterCommandsEvent$Type): $MoneyValueArgument
get "examples"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyValueArgument$Type = ($MoneyValueArgument);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyValueArgument_ = $MoneyValueArgument$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$NetworkTraderButton" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ITooltipWidget, $ITooltipWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipWidget"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"

export class $NetworkTraderButton extends $EasyButton implements $ITooltipWidget {
static readonly "BUTTON_TEXTURES": $ResourceLocation
static readonly "WIDTH": integer
static readonly "HEIGHT": integer
 "selected": boolean
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>)
constructor(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>)

public "getData"(): $TraderData
public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "getTooltipText"(): $List<($Component)>
public "SetData"(arg0: $TraderData$Type): void
public "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
public "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
get "data"(): $TraderData
get "tooltipText"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkTraderButton$Type = ($NetworkTraderButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkTraderButton_ = $NetworkTraderButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeData" {
import {$TimeUtil$TimeUnit, $TimeUtil$TimeUnit$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeUnit"

export class $TimeUtil$TimeData {
readonly "days": long
readonly "hours": long
readonly "minutes": long
readonly "seconds": long
readonly "miliseconds": long

constructor(arg0: long, arg1: long, arg2: long, arg3: long)
constructor(arg0: long)

public "getString"(arg0: integer): string
public "getString"(): string
public "getShortString"(): string
public "getShortString"(arg0: integer): string
public "getUnitString"(arg0: $TimeUtil$TimeUnit$Type, arg1: boolean): string
get "string"(): string
get "shortString"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimeUtil$TimeData$Type = ($TimeUtil$TimeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimeUtil$TimeData_ = $TimeUtil$TimeData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/$CommandLCAdmin" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CommandLCAdmin {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>, arg1: $CommandBuildContext$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandLCAdmin$Type = ($CommandLCAdmin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandLCAdmin_ = $CommandLCAdmin$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/overlay/$WalletDisplayOverlay" {
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $WalletDisplayOverlay implements $IGuiOverlay {
static readonly "INSTANCE": $WalletDisplayOverlay


public "render"(arg0: $ForgeGui$Type, arg1: $GuiGraphics$Type, arg2: float, arg3: integer, arg4: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletDisplayOverlay$Type = ($WalletDisplayOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletDisplayOverlay_ = $WalletDisplayOverlay$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMPageManager" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $ATMPageManager {


public "initialize"(arg0: $ScreenArea$Type): void
public static "create"(arg0: $Player$Type, arg1: $Consumer$Type<(any)>, arg2: $Consumer$Type<(any)>, arg3: $Consumer$Type<(string)>): $ATMPageManager
public "changeSelection"(arg0: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMPageManager$Type = ($ATMPageManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMPageManager_ = $ATMPageManager$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/alexsmobs/$LCAlexsMobs" {
import {$DroplistConfigGenerator$Entity, $DroplistConfigGenerator$Entity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator$Entity"

export class $LCAlexsMobs {

constructor()

public static "isLoaded"(): boolean
public static "AddEntityLoot"(arg0: $DroplistConfigGenerator$Entity$Type): void
public static "registerDroplistListeners"(): void
get "loaded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCAlexsMobs$Type = ($LCAlexsMobs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCAlexsMobs_ = $LCAlexsMobs$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$IValidatedMenu" {
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"

export interface $IValidatedMenu {

 "getValidator"(): $MenuValidator

(): $MenuValidator
}

export namespace $IValidatedMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IValidatedMenu$Type = ($IValidatedMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IValidatedMenu_ = $IValidatedMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/$EditableSideChain" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CoinEntry, $CoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$CoinEntry"
import {$EditableCoinEntry, $EditableCoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/$EditableCoinEntry"

export class $EditableSideChain {
 "entries": $List<($EditableCoinEntry)>

constructor(arg0: $List$Type<($CoinEntry$Type)>)
constructor(arg0: $Item$Type, arg1: $Item$Type, arg2: integer)

public "copy"(): $EditableSideChain
public "getParentCoin"(): $Item
get "parentCoin"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditableSideChain$Type = ($EditableSideChain);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditableSideChain_ = $EditableSideChain$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$TickableCoinChestUpgrade" {
import {$CoinChestUpgrade, $CoinChestUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgrade"
import {$CoinChestUpgradeData, $CoinChestUpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgradeData"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"

export class $TickableCoinChestUpgrade extends $CoinChestUpgrade {

constructor()

public "OnServerTick"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "getTickFrequency"(): integer
get "tickFrequency"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickableCoinChestUpgrade$Type = ($TickableCoinChestUpgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickableCoinChestUpgrade_ = $TickableCoinChestUpgrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$TaxBlockEntity" {
import {$EasyBlockEntity, $EasyBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$EasyBlockEntity"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TaxBlockEntity extends $EasyBlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "initialize"(arg0: $Player$Type): void
public "getContents"(arg0: boolean): $List<($ItemStack)>
public "onLoad"(): void
public "load"(arg0: $CompoundTag$Type): void
public "getTaxEntry"(): $TaxEntry
public "flagAsValidBreak"(): void
public "onRemove"(): void
get "taxEntry"(): $TaxEntry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxBlockEntity$Type = ($TaxBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxBlockEntity_ = $TaxBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderAPI" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ITraderSearchFilter, $ITraderSearchFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/terminal/$ITraderSearchFilter"

export class $TraderAPI {


public static "filterTrader"(arg0: $TraderData$Type, arg1: string): boolean
public static "filterTraders"(arg0: $List$Type<($TraderData$Type)>, arg1: string): $List<($TraderData)>
public static "getAllTraders"(arg0: boolean): $List<($TraderData)>
public static "getAllTraders"(arg0: $IClientTracker$Type): $List<($TraderData)>
public static "deleteTrader"(arg0: $TraderData$Type): void
public static "deleteTrader"(arg0: long): void
public static "addTrader"(arg0: $TraderData$Type, arg1: $Player$Type): long
public static "addTrader"(arg0: $TraderData$Type): long
public static "getTradeRuleTypes"(): $List<($TradeRuleType<(any)>)>
public static "getTradeRuleType"(arg0: $ResourceLocation$Type): $TradeRuleType<(any)>
public static "getAllTerminalTraders"(arg0: boolean): $List<($TraderData)>
public static "getAllTerminalTraders"(arg0: $IClientTracker$Type): $List<($TraderData)>
public static "getTrader"(arg0: $IClientTracker$Type, arg1: long): $TraderData
public static "getTrader"(arg0: boolean, arg1: long): $TraderData
public static "registerTrader"(arg0: $TraderType$Type<(any)>): void
public static "registerTradeRule"(arg0: $TradeRuleType$Type<(any)>): void
public static "getTraderType"(arg0: $ResourceLocation$Type): $TraderType<(any)>
public static "registerSearchFilter"(arg0: $ITraderSearchFilter$Type): void
get "tradeRuleTypes"(): $List<($TradeRuleType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderAPI$Type = ($TraderAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderAPI_ = $TraderAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/renderers/$NormalBookRenderer" {
import {$SimpleBookRenderer, $SimpleBookRenderer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$SimpleBookRenderer"
import {$BookRendererGenerator, $BookRendererGenerator$Type} from "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$BookRendererGenerator"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $NormalBookRenderer extends $SimpleBookRenderer {
static readonly "MODEL_LOCATION": $ResourceLocation
static readonly "INSTANCE": $NormalBookRenderer
static readonly "GENERATOR": $BookRendererGenerator


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NormalBookRenderer$Type = ($NormalBookRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NormalBookRenderer_ = $NormalBookRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/builtin/$SimpleArrowIcon" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$IconType, $IconType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$IconType"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$SimpleArrowIcon$ArrowType, $SimpleArrowIcon$ArrowType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/builtin/$SimpleArrowIcon$ArrowType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ATMExchangeButton, $ATMExchangeButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/atm/$ATMExchangeButton"
import {$ATMIconData, $ATMIconData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$ATMIconData"

export class $SimpleArrowIcon extends $ATMIconData {
static readonly "TYPE_NAME": $ResourceLocation
static readonly "TYPE": $IconType

constructor(arg0: $JsonObject$Type)
constructor(arg0: integer, arg1: integer, arg2: $SimpleArrowIcon$ArrowType$Type)

public "render"(arg0: $ATMExchangeButton$Type, arg1: $EasyGuiGraphics$Type, arg2: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleArrowIcon$Type = ($SimpleArrowIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleArrowIcon_ = $SimpleArrowIcon$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderinterface/$TraderSelectClientTab" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$TraderSelectTab, $TraderSelectTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/base/$TraderSelectTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TraderSelectClientTab extends $TraderInterfaceClientTab<($TraderSelectTab)> implements $IScrollable {
readonly "commonTab": T

constructor(arg0: $TraderInterfaceScreen$Type, arg1: $TraderSelectTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "icon"(): $IconData
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderSelectClientTab$Type = ($TraderSelectClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderSelectClientTab_ = $TraderSelectClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseBidNotification" {
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$AuctionHouseNotification, $AuctionHouseNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseNotification"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AuctionHouseBidNotification extends $AuctionHouseNotification {
static readonly "TYPE": $NotificationType<($AuctionHouseBidNotification)>

constructor(arg0: $AuctionTradeData$Type)

public "getMessage"(): $MutableComponent
get "message"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionHouseBidNotification$Type = ($AuctionHouseBidNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionHouseBidNotification_ = $AuctionHouseBidNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/item/$ItemStorageTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ItemStorageTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "getSlots"(): $List<(any)>
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "clickedOnSlot"(arg0: integer, arg1: boolean, arg2: boolean): void
public "quickTransfer"(arg0: integer): void
public "quickMoveStack"(arg0: $ItemStack$Type): boolean
get "slots"(): $List<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemStorageTab$Type = ($ItemStorageTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemStorageTab_ = $ItemStorageTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$TerminalMenu" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$IValidatedMenu, $IValidatedMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$IValidatedMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$EasyMenu, $EasyMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$EasyMenu"

export class $TerminalMenu extends $EasyMenu implements $IValidatedMenu {
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $MenuValidator$Type)

public "getValidator"(): $MenuValidator
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
get "validator"(): $MenuValidator
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TerminalMenu$Type = ($TerminalMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TerminalMenu_ = $TerminalMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$ChocolateCoinItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ChocolateCoinItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: float, ...arg2: ($MobEffectInstance$Type)[])
constructor(arg0: $Item$Properties$Type, ...arg1: ($MobEffectInstance$Type)[])
constructor(arg0: float, ...arg1: ($MobEffectInstance$Type)[])
constructor(...arg0: ($MobEffectInstance$Type)[])

public "finishUsingItem"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type): $ItemStack
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChocolateCoinItem$Type = ($ChocolateCoinItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChocolateCoinItem_ = $ChocolateCoinItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeNameNotification" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ChangeNameNotification extends $Notification {
static readonly "TYPE": $NotificationType<($ChangeNameNotification)>

constructor(arg0: $PlayerReference$Type, arg1: string, arg2: string)

public "getMessage"(): $MutableComponent
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeNameNotification$Type = ($ChangeNameNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeNameNotification_ = $ChangeNameNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$DoubleListOption" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ListOption, $ListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ListOption"

export class $DoubleListOption extends $ListOption<(double)> {


public static "create"(arg0: $List$Type<(double)>, arg1: double, arg2: double): $DoubleListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(double)>)>): $DoubleListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(double)>)>, arg1: double): $DoubleListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(double)>)>, arg1: double, arg2: double): $DoubleListOption
public static "create"(arg0: $List$Type<(double)>, arg1: double): $DoubleListOption
public static "create"(arg0: $List$Type<(double)>): $DoubleListOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleListOption$Type = ($DoubleListOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleListOption_ = $DoubleListOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$ShelfBlock" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$TraderBlockRotatable, $TraderBlockRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockRotatable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IItemTraderBlock, $IItemTraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IItemTraderBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $ShelfBlock extends $TraderBlockRotatable implements $IItemTraderBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)
constructor(arg0: $BlockBehaviour$Properties$Type, arg1: integer)

public "traderType"(): $BlockEntityType<(any)>
public "makeTrader"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getItemPositionData"(): $ItemPositionData
public "getBlockEntity"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "itemPositionData"(): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShelfBlock$Type = ($ShelfBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShelfBlock_ = $ShelfBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$AdminTab" {
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $AdminTab extends $TaxCollectorTab {
readonly "menu": $TaxCollectorMenu

constructor(arg0: $TaxCollectorMenu$Type)

public "canBeAccessed"(): boolean
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "SetInfiniteRange"(arg0: boolean): void
public "SetForceAcceptance"(arg0: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdminTab$Type = ($AdminTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdminTab_ = $AdminTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$CustomPacket, $CustomPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $CustomPacket$Handler<T extends $CustomPacket> {

constructor()

public "decode"(arg0: $FriendlyByteBuf$Type): T
public "handlePacket"(arg0: T, arg1: $Supplier$Type<($NetworkEvent$Context$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomPacket$Handler$Type<T> = ($CustomPacket$Handler<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomPacket$Handler_<T> = $CustomPacket$Handler$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/builtin/$TeamOwner" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$ITeam, $ITeam$Type} from "packages/io/github/lightman314/lightmanscurrency/api/teams/$ITeam"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$StatKey, $StatKey$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatKey"
import {$OwnerType, $OwnerType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$OwnerType"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TeamOwner extends $Owner {
static readonly "TYPE": $OwnerType
readonly "teamID": long
static readonly "NULL": $Owner
static readonly "NULL_TYPE": $OwnerType


public "getName"(): $MutableComponent
public "matches"(arg0: $Owner$Type): boolean
public static "of"(arg0: $ITeam$Type): $TeamOwner
public static "of"(arg0: long): $TeamOwner
public "getType"(): $OwnerType
public "pushNotification"(arg0: $NonNullSupplier$Type<(any)>, arg1: integer, arg2: boolean): void
public "hasNotificationLevels"(): boolean
public "asPlayerReference"(): $PlayerReference
public "getCommandLabel"(): $MutableComponent
public "isMember"(arg0: $PlayerReference$Type): boolean
public "asBankReference"(): $BankReference
public "incrementStat"<T>(arg0: $StatKey$Type<(any), (T)>, arg1: T): void
public "isOnline"(): boolean
public "stillValid"(): boolean
public "getTeam"(): $ITeam
public "isAdmin"(arg0: $PlayerReference$Type): boolean
get "name"(): $MutableComponent
get "type"(): $OwnerType
get "commandLabel"(): $MutableComponent
get "online"(): boolean
get "team"(): $ITeam
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamOwner$Type = ($TeamOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamOwner_ = $TeamOwner$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/taxes/$ITaxInfoInteractable" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"

export interface $ITaxInfoInteractable {

 "getTrader"(): $TraderData
 "canPlayerForceIgnore"(): boolean
 "AcceptTaxCollector"(arg0: long): void
 "ForceIgnoreTaxCollector"(arg0: long): void
 "PardonIgnoredTaxCollector"(arg0: long): void
}

export namespace $ITaxInfoInteractable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITaxInfoInteractable$Type = ($ITaxInfoInteractable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITaxInfoInteractable_ = $ITaxInfoInteractable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$NetworkItemTraderBlock" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$TraderBlockRotatable, $TraderBlockRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockRotatable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $NetworkItemTraderBlock extends $TraderBlockRotatable {
static readonly "TRADER_COUNT_SMALL": integer
static readonly "TRADER_COUNT_MEDIUM": integer
static readonly "TRADER_COUNT_LARGE": integer
static readonly "TRADER_COUNT_XLARGE": integer
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type, arg1: integer)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkItemTraderBlock$Type = ($NetworkItemTraderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkItemTraderBlock_ = $NetworkItemTraderBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$ClientPlayerTrade" {
import {$IPlayerTrade, $IPlayerTrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$IPlayerTrade"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $ClientPlayerTrade implements $IPlayerTrade {

constructor(arg0: $UUID$Type, arg1: $UUID$Type, arg2: $Component$Type, arg3: $Component$Type, arg4: $MoneyValue$Type, arg5: $MoneyValue$Type, arg6: $Container$Type, arg7: $Container$Type, arg8: integer, arg9: integer)

public static "decode"(arg0: $FriendlyByteBuf$Type): $ClientPlayerTrade
public "encode"(arg0: $FriendlyByteBuf$Type): void
public "getHostName"(): $Component
public "isCompleted"(): boolean
public "getGuestID"(): $UUID
public "getGuestName"(): $Component
public "getGuestMoney"(): $MoneyValue
public "getHostMoney"(): $MoneyValue
public "getHostID"(): $UUID
public "getHostItems"(): $Container
public "getGuestItems"(): $Container
public "getHostState"(): integer
public "getGuestState"(): integer
public "isGuest"(arg0: $Player$Type): boolean
public "isHost"(arg0: $Player$Type): boolean
get "hostName"(): $Component
get "completed"(): boolean
get "guestID"(): $UUID
get "guestName"(): $Component
get "guestMoney"(): $MoneyValue
get "hostMoney"(): $MoneyValue
get "hostID"(): $UUID
get "hostItems"(): $Container
get "guestItems"(): $Container
get "hostState"(): integer
get "guestState"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientPlayerTrade$Type = ($ClientPlayerTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientPlayerTrade_ = $ClientPlayerTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeUnit" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TimeUnitTextEntry, $TimeUnitTextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TimeUnitTextEntry"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TimeUtil$TimeUnit extends $Enum<($TimeUtil$TimeUnit)> {
static readonly "SECOND": $TimeUtil$TimeUnit
static readonly "MINUTE": $TimeUtil$TimeUnit
static readonly "HOUR": $TimeUtil$TimeUnit
static readonly "DAY": $TimeUtil$TimeUnit
readonly "text": $TimeUnitTextEntry
static readonly "UNITS_SMALL_TO_LARGE": $List<($TimeUtil$TimeUnit)>
static readonly "UNITS_LARGE_TO_SMALL": $List<($TimeUtil$TimeUnit)>


public static "values"(): ($TimeUtil$TimeUnit)[]
public static "valueOf"(arg0: string): $TimeUtil$TimeUnit
public "getText"(): $MutableComponent
public "getShortText"(): $MutableComponent
public "getPluralText"(): $MutableComponent
get "text"(): $MutableComponent
get "shortText"(): $MutableComponent
get "pluralText"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimeUtil$TimeUnit$Type = (("hour") | ("day") | ("second") | ("minute")) | ($TimeUtil$TimeUnit);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimeUtil$TimeUnit_ = $TimeUtil$TimeUnit$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/wallet/$WalletBankMenu" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$WalletMenuBase, $WalletMenuBase$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/wallet/$WalletMenuBase"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$IBankAccountMenu, $IBankAccountMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/menu/$IBankAccountMenu"

export class $WalletBankMenu extends $WalletMenuBase implements $IBankAccountMenu {
static readonly "BANK_WIDGET_SPACING": integer
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: integer)

public "getCoinInputHandler"(): $IMoneyViewer
public "onDepositOrWithdraw"(): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "getBankAccountReference"(): $BankReference
public "getPlayer"(): $Player
public "getBankAccount"(): $IBankAccount
public "isClient"(): boolean
get "coinInputHandler"(): $IMoneyViewer
get "bankAccountReference"(): $BankReference
get "player"(): $Player
get "bankAccount"(): $IBankAccount
get "client"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletBankMenu$Type = ($WalletBankMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletBankMenu_ = $WalletBankMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$TeamButton$Size" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $TeamButton$Size extends $Enum<($TeamButton$Size)> {
static readonly "WIDE": $TeamButton$Size
static readonly "NORMAL": $TeamButton$Size
static readonly "NARROW": $TeamButton$Size
readonly "width": integer
readonly "guiPos": integer


public static "values"(): ($TeamButton$Size)[]
public static "valueOf"(arg0: string): $TeamButton$Size
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamButton$Size$Type = (("normal") | ("wide") | ("narrow")) | ($TeamButton$Size);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamButton$Size_ = $TeamButton$Size$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"

export class $CustomPacket {

constructor()

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomPacket$Type = ($CustomPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomPacket_ = $CustomPacket$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/emergencyejection/$CPacketOpenEjectionMenu" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketOpenEjectionMenu extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketOpenEjectionMenu)>


public "encode"(arg0: $FriendlyByteBuf$Type): void
public static "sendToServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketOpenEjectionMenu$Type = ($CPacketOpenEjectionMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketOpenEjectionMenu_ = $CPacketOpenEjectionMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$TraderCategory" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$NotificationCategoryType, $NotificationCategoryType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategoryType"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $TraderCategory extends $NotificationCategory {
static readonly "TYPE": $NotificationCategoryType<($TraderCategory)>
static readonly "GENERAL_TYPE": $NotificationCategoryType<(any)>
static readonly "GENERAL": $NotificationCategory

constructor(arg0: $ItemLike$Type, arg1: $MutableComponent$Type, arg2: long)
constructor(arg0: $CompoundTag$Type)

public "getName"(): $MutableComponent
public "matches"(arg0: $NotificationCategory$Type): boolean
public "getType"(): $NotificationCategoryType<($TraderCategory)>
public "getIcon"(): $IconData
public "saveAdditional"(arg0: $CompoundTag$Type): void
get "name"(): $MutableComponent
get "type"(): $NotificationCategoryType<($TraderCategory)>
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderCategory$Type = ($TraderCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderCategory_ = $TraderCategory$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$WalletBankScreen" {
import {$WalletBankMenu, $WalletBankMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/wallet/$WalletBankMenu"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$WalletBankTab, $WalletBankTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/walletbank/$WalletBankTab"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $WalletBankScreen extends $EasyMenuScreen<($WalletBankMenu)> {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $WalletBankMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "blockInventoryClosing"(): boolean
public "currentTab"(): $WalletBankTab
public "changeTab"(arg0: integer): void
public "getTabs"(): $List<($WalletBankTab)>
get "tabs"(): $List<($WalletBankTab)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletBankScreen$Type = ($WalletBankScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletBankScreen_ = $WalletBankScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/config/$SPacketViewConfig" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketViewConfig extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketViewConfig)>

constructor(arg0: string, arg1: string)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketViewConfig$Type = ($SPacketViewConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketViewConfig_ = $SPacketViewConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $NotificationType<T extends $Notification> {
readonly "type": $ResourceLocation

constructor(arg0: $ResourceLocation$Type, arg1: $NonNullSupplier$Type<(T)>)

public "toString"(): string
public "load"(arg0: $CompoundTag$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationType$Type<T> = ($NotificationType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationType_<T> = $NotificationType$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/advancements/date/$DateTrigger" {
import {$DateTrigger$Instance, $DateTrigger$Instance$Type} from "packages/io/github/lightman314/lightmanscurrency/common/advancements/date/$DateTrigger$Instance"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$SimpleCriterionTrigger, $SimpleCriterionTrigger$Type} from "packages/net/minecraft/advancements/critereon/$SimpleCriterionTrigger"
import {$AbstractCriterionTriggerInstance, $AbstractCriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$AbstractCriterionTriggerInstance"
import {$DatePredicate, $DatePredicate$Type} from "packages/io/github/lightman314/lightmanscurrency/common/advancements/date/$DatePredicate"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DateTrigger extends $SimpleCriterionTrigger<($DateTrigger$Instance)> {
static readonly "ID": $ResourceLocation
static readonly "INSTANCE": $DateTrigger


public "trigger"(arg0: $ServerPlayer$Type): void
public static "ofRange"(arg0: $DatePredicate$Type, arg1: $DatePredicate$Type): $AbstractCriterionTriggerInstance
public static "ofRange"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): $AbstractCriterionTriggerInstance
public "getId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DateTrigger$Type = ($DateTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DateTrigger_ = $DateTrigger$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$ArmorDisplayBlock" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IItemTraderBlock, $IItemTraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IItemTraderBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TraderBlockTallRotatable, $TraderBlockTallRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockTallRotatable"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $ArmorDisplayBlock extends $TraderBlockTallRotatable implements $IItemTraderBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "traderType"(): $BlockEntityType<(any)>
public "makeTrader"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getItemPositionData"(): $ItemPositionData
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "itemPositionData"(): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorDisplayBlock$Type = ($ArmorDisplayBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorDisplayBlock_ = $ArmorDisplayBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/core/$NotificationTab" {
import {$TraderSettingsTab, $TraderSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $NotificationTab extends $SettingsSubTab {
readonly "parent": $TraderSettingsClientTab
readonly "commonTab": $TraderSettingsTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderSettingsClientTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "canOpen"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationTab$Type = ($NotificationTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationTab_ = $NotificationTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatKeys" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $StatKeys {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatKeys$Type = ($StatKeys);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatKeys_ = $StatKeys$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$TraderEvent" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"

export class $TraderEvent extends $Event {

constructor()

public "getOwner"(): $OwnerData
public "getID"(): long
public "isCancelable"(): boolean
public "getTrader"(): $TraderData
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "owner"(): $OwnerData
get "iD"(): long
get "cancelable"(): boolean
get "trader"(): $TraderData
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderEvent$Type = ($TraderEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderEvent_ = $TraderEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$TimedSale" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$PriceTweakingTradeRule, $PriceTweakingTradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$PriceTweakingTradeRule"
import {$TradeEvent$PostTradeEvent, $TradeEvent$PostTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PostTradeEvent"
import {$TradeEvent$PreTradeEvent, $TradeEvent$PreTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent"
import {$TimeUtil$TimeData, $TimeUtil$TimeData$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeData"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$TradeEvent$TradeCostEvent, $TradeEvent$TradeCostEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$TradeCostEvent"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"

export class $TimedSale extends $PriceTweakingTradeRule {
static readonly "TYPE": $TradeRuleType<($TimedSale)>
readonly "type": $TradeRuleType<(any)>


public "getDuration"(): long
public "createTab"(arg0: $TradeRulesClientTab$Type<(any)>): $TradeRulesClientSubTab
public "setDiscount"(arg0: integer): void
public "getDiscount"(): integer
public "timerActive"(): boolean
public "getTimeRemaining"(): $TimeUtil$TimeData
public "handleUpdateMessage"(arg0: $LazyPacketData$Type): void
public "loadPersistentData"(arg0: $CompoundTag$Type): void
public "savePersistentData"(): $CompoundTag
public "saveToJson"(arg0: $JsonObject$Type): $JsonObject
public "beforeTrade"(arg0: $TradeEvent$PreTradeEvent$Type): void
public "afterTrade"(arg0: $TradeEvent$PostTradeEvent$Type): void
public "tradeCost"(arg0: $TradeEvent$TradeCostEvent$Type): void
public "loadFromJson"(arg0: $JsonObject$Type): void
public "setDuration"(arg0: long): void
public "setStartTime"(arg0: long): void
get "duration"(): long
set "discount"(value: integer)
get "discount"(): integer
get "timeRemaining"(): $TimeUtil$TimeData
set "duration"(value: long)
set "startTime"(value: long)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimedSale$Type = ($TimedSale);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimedSale_ = $TimedSale$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/$EditableChainData" {
import {$CoinInputType, $CoinInputType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$CoinInputType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EditableDisplayData, $EditableDisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/display_data/$EditableDisplayData"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$EditableSideChain, $EditableSideChain$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/$EditableSideChain"
import {$EditableCoinEntry, $EditableCoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/$EditableCoinEntry"

export class $EditableChainData {
 "chainID": string
 "chainName": $Component
readonly "coreChain": $List<($EditableCoinEntry)>
readonly "sideChains": $List<($EditableSideChain)>
 "inputType": $CoinInputType
 "editableDisplayData": $EditableDisplayData

constructor(arg0: $ChainData$Type)
constructor(arg0: string, arg1: $ItemLike$Type, arg2: $Component$Type)
constructor(arg0: string, arg1: $ItemLike$Type, arg2: string)

public "copy"(): $EditableChainData
public static "isSaveable"(arg0: $Collection$Type<($EditableChainData$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditableChainData$Type = ($EditableChainData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditableChainData_ = $EditableChainData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EasyWidgetWithChildren extends $EasyWidget {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer


public "addChildrenBeforeThis"(): boolean
public "addChildren"(): void
public "pairWithScreen"(arg0: $Consumer$Type<(any)>, arg1: $Consumer$Type<(any)>): void
public "removeChildren"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyWidgetWithChildren$Type = ($EasyWidgetWithChildren);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyWidgetWithChildren_ = $EasyWidgetWithChildren$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$LowBalanceNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $LowBalanceNotification extends $Notification {
static readonly "TYPE": $NotificationType<($LowBalanceNotification)>


public "getMessage"(): $MutableComponent
public static "create"(arg0: $MutableComponent$Type, arg1: $MoneyValue$Type): $NonNullSupplier<($Notification)>
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LowBalanceNotification$Type = ($LowBalanceNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LowBalanceNotification_ = $LowBalanceNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$AddRemoveAllyNotification" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AddRemoveAllyNotification extends $Notification {
static readonly "TYPE": $NotificationType<($AddRemoveAllyNotification)>

constructor(arg0: $PlayerReference$Type, arg1: boolean, arg2: $PlayerReference$Type)

public "getMessage"(): $MutableComponent
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AddRemoveAllyNotification$Type = ($AddRemoveAllyNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AddRemoveAllyNotification_ = $AddRemoveAllyNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/claiming/$IClaimPurchaseHandler" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export interface $IClaimPurchaseHandler {

 "canBuyForceload"(arg0: $ServerPlayer$Type): boolean
 "canBuyClaims"(arg0: $ServerPlayer$Type): boolean
 "addBonusClaims"(arg0: $ServerPlayer$Type, arg1: integer): void
 "getCurrentBonusForceloadChunks"(arg0: $ServerPlayer$Type): integer
 "addBonusForceloadChunks"(arg0: $ServerPlayer$Type, arg1: integer): void
 "getCurrentBonusClaims"(arg0: $ServerPlayer$Type): integer
}

export namespace $IClaimPurchaseHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IClaimPurchaseHandler$Type = ($IClaimPurchaseHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IClaimPurchaseHandler_ = $IClaimPurchaseHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/terminal/$ITraderSearchFilter" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"

export interface $ITraderSearchFilter {

 "filter"(arg0: $TraderData$Type, arg1: string): boolean

(arg0: $TraderData$Type, arg1: string): boolean
}

export namespace $ITraderSearchFilter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITraderSearchFilter$Type = ($ITraderSearchFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITraderSearchFilter_ = $ITraderSearchFilter$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/trade_data/client/$SlotMachineTradeButtonRenderer" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$DisplayData, $DisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$SlotMachineTrade, $SlotMachineTrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/trade_data/$SlotMachineTrade"

export class $SlotMachineTradeButtonRenderer extends $TradeRenderManager<($SlotMachineTrade)> {
readonly "trade": T

constructor(arg0: $SlotMachineTrade$Type)

public "getOutputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "arrowPosition"(arg0: $TradeContext$Type): $LazyOptional<($ScreenPosition)>
public "inputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "outputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "getInputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "tradeButtonWidth"(arg0: $TradeContext$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineTradeButtonRenderer$Type = ($SlotMachineTradeButtonRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineTradeButtonRenderer_ = $SlotMachineTradeButtonRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseSellerNotification" {
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$AuctionHouseNotification, $AuctionHouseNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseNotification"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AuctionHouseSellerNotification extends $AuctionHouseNotification {
static readonly "TYPE": $NotificationType<($AuctionHouseSellerNotification)>

constructor(arg0: $AuctionTradeData$Type)

public "getMessage"(): $MutableComponent
get "message"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionHouseSellerNotification$Type = ($AuctionHouseSellerNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionHouseSellerNotification_ = $AuctionHouseSellerNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/$AuctionStandBlockEntityRenderer" {
import {$AuctionStandBlockEntity, $AuctionStandBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$AuctionStandBlockEntity"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $AuctionStandBlockEntityRenderer implements $BlockEntityRenderer<($AuctionStandBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $AuctionStandBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $AuctionStandBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $AuctionStandBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionStandBlockEntityRenderer$Type = ($AuctionStandBlockEntityRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionStandBlockEntityRenderer_ = $AuctionStandBlockEntityRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/item/$ItemStorageClientTab" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$IMouseListener, $IMouseListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener"
import {$ItemStorageTab, $ItemStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/item/$ItemStorageTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $ItemStorageClientTab extends $TraderStorageClientTab<($ItemStorageTab)> implements $IScrollable, $IMouseListener {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $ItemStorageTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
public "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
get "icon"(): $IconData
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemStorageClientTab$Type = ($ItemStorageClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemStorageClientTab_ = $ItemStorageClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/$LootModifiers" {
import {$CoinsInChestsModifier, $CoinsInChestsModifier$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/glm/$CoinsInChestsModifier"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $LootModifiers {
static readonly "COINS_IN_CHESTS": $RegistryObject<($Codec<($CoinsInChestsModifier)>)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootModifiers$Type = ($LootModifiers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootModifiers_ = $LootModifiers$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$TerminalBlock" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RotatableBlock, $RotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TerminalBlock extends $RotatableBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)
constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $VoxelShape$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TerminalBlock$Type = ($TerminalBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TerminalBlock_ = $TerminalBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/crafting/builders/$TicketRecipeBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RecipeBuilder, $RecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$RecipeBuilder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$CriterionTriggerInstance, $CriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/$CriterionTriggerInstance"

export class $TicketRecipeBuilder implements $RecipeBuilder {


public "group"(arg0: string): $TicketRecipeBuilder
public static "of"(arg0: $Ingredient$Type, arg1: $ItemLike$Type): $TicketRecipeBuilder
public static "of"(arg0: $TagKey$Type<($Item$Type)>, arg1: $ItemLike$Type): $TicketRecipeBuilder
public static "of"(arg0: $ItemLike$Type, arg1: $ItemLike$Type): $TicketRecipeBuilder
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public "unlockedBy"(arg0: string, arg1: $CriterionTriggerInstance$Type): $TicketRecipeBuilder
public "getResult"(): $Item
public "withMasterTicket"(arg0: $Ingredient$Type): $TicketRecipeBuilder
public "withMasterTicket"(arg0: $ItemLike$Type): $TicketRecipeBuilder
public "withMasterTicket"(arg0: $TagKey$Type<($Item$Type)>): $TicketRecipeBuilder
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: string): void
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>): void
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
get "result"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketRecipeBuilder$Type = ($TicketRecipeBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketRecipeBuilder_ = $TicketRecipeBuilder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/$ModLayerDefinitions" {
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"

export class $ModLayerDefinitions {
static readonly "WALLET": $ModelLayerLocation

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModLayerDefinitions$Type = ($ModLayerDefinitions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModLayerDefinitions_ = $ModLayerDefinitions$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ConfigFile, $ConfigFile$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ConfigOption$LoadSource, $ConfigOption$LoadSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption$LoadSource"
import {$ConfigParsingException, $ConfigParsingException$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParsingException"

export class $ConfigOption<T> implements $Supplier<(T)>, $NonNullSupplier<(T)> {


public "getName"(): string
public "get"(): T
public "load"(arg0: string, arg1: $ConfigOption$LoadSource$Type): $Pair<(boolean), ($ConfigParsingException)>
public "clear"(): void
public "set"(arg0: T): void
public "init"(arg0: $ConfigFile$Type, arg1: string, arg2: string): void
public "write"(arg0: string, arg1: $Consumer$Type<(string)>): void
public "write"(): string
public "isLoaded"(): boolean
public "loadDefault"(): void
public static "cleanWhitespace"(arg0: string): string
public "setComments"(arg0: $List$Type<(string)>): void
public "clearSyncedData"(): void
public "getComments"(): $List<(string)>
public "setToDefault"(): void
get "name"(): string
get "loaded"(): boolean
set "comments"(value: $List$Type<(string)>)
get "comments"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigOption$Type<T> = ($ConfigOption<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigOption_<T> = $ConfigOption$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMods" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$VillagerTradeMods$Builder, $VillagerTradeMods$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMods$Builder"
import {$VillagerTradeMod, $VillagerTradeMod$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMod"

export class $VillagerTradeMods {

constructor(arg0: $List$Type<(string)>)

public static "builder"(): $VillagerTradeMods$Builder
public "getModFor"(arg0: string): $VillagerTradeMod
public "writeToConfig"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerTradeMods$Type = ($VillagerTradeMods);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerTradeMods_ = $VillagerTradeMods$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModEnchantments" {
import {$MoneyMendingEnchantment, $MoneyMendingEnchantment$Type} from "packages/io/github/lightman314/lightmanscurrency/common/enchantments/$MoneyMendingEnchantment"
import {$CoinMagnetEnchantment, $CoinMagnetEnchantment$Type} from "packages/io/github/lightman314/lightmanscurrency/common/enchantments/$CoinMagnetEnchantment"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $ModEnchantments {
static readonly "MONEY_MENDING": $RegistryObject<($MoneyMendingEnchantment)>
static readonly "COIN_MAGNET": $RegistryObject<($CoinMagnetEnchantment)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModEnchantments$Type = ($ModEnchantments);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModEnchantments_ = $ModEnchantments$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/types/$SimpleValidator" {
import {$NonNullFunction, $NonNullFunction$Type} from "packages/net/minecraftforge/common/util/$NonNullFunction"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$MenuValidatorType, $MenuValidatorType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidatorType"

export class $SimpleValidator extends $MenuValidator {
static readonly "TYPE": $MenuValidatorType
static readonly "NULL": $MenuValidator
readonly "type": $MenuValidatorType


public static "of"(arg0: $NonNullSupplier$Type<(boolean)>): $MenuValidator
public static "of"(arg0: $NonNullFunction$Type<($Player$Type), (boolean)>): $MenuValidator
public "stillValid"(arg0: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleValidator$Type = ($SimpleValidator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleValidator_ = $SimpleValidator$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/item/$ItemStorageTab" {
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"

export class $ItemStorageTab extends $TraderInterfaceTab {
static readonly "TAB_INFO": integer
static readonly "TAB_STORAGE": integer
static readonly "TAB_TRADER_SELECT": integer
static readonly "TAB_TRADE_SELECT": integer
static readonly "TAB_OWNERSHIP": integer
readonly "menu": $TraderInterfaceMenu

constructor(arg0: $TraderInterfaceMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "handleMessage"(arg0: $LazyPacketData$Type): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "getSlots"(): $List<(any)>
public "createClientTab"(arg0: $TraderInterfaceScreen$Type): $TraderInterfaceClientTab<(any)>
public "onTabClose"(): void
public "onTabOpen"(): void
public "toggleInputSlot"(arg0: $Direction$Type): void
public "clickedOnSlot"(arg0: integer, arg1: boolean, arg2: boolean): void
public "toggleOutputSlot"(arg0: $Direction$Type): void
public "quickTransfer"(arg0: integer): void
public "quickMoveStack"(arg0: $ItemStack$Type): boolean
get "slots"(): $List<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemStorageTab$Type = ($ItemStorageTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemStorageTab_ = $ItemStorageTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/$CommandPlayerTrading" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CommandPlayerTrading {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandPlayerTrading$Type = ($CommandPlayerTrading);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandPlayerTrading_ = $CommandPlayerTrading$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/config/$SPacketResetConfig" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketResetConfig extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketResetConfig)>

constructor(arg0: string, arg1: string)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketResetConfig$Type = ($SPacketResetConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketResetConfig_ = $SPacketResetConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IClientTracker {

 "isClient"(): boolean
 "isServer"(): boolean

(): boolean
}

export namespace $IClientTracker {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IClientTracker$Type = ($IClientTracker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IClientTracker_ = $IClientTracker$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/util/$TooltipUtil" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $TooltipUtil {

constructor()

public static "lazyList"(arg0: $Component$Type): $List<($Component)>
public static "createToggleTooltip"(arg0: $NonNullSupplier$Type<(boolean)>, arg1: $Supplier$Type<($List$Type<($Component$Type)>)>, arg2: $Supplier$Type<($List$Type<($Component$Type)>)>): $Supplier<($List<($Component)>)>
public static "createToggleTooltip"(arg0: $NonNullSupplier$Type<(boolean)>, arg1: $List$Type<($Component$Type)>, arg2: $List$Type<($Component$Type)>): $Supplier<($List<($Component)>)>
public static "createToggleSingleTooltip"(arg0: $NonNullSupplier$Type<(boolean)>, arg1: $Supplier$Type<($Component$Type)>, arg2: $Supplier$Type<($Component$Type)>): $Supplier<($List<($Component)>)>
public static "createToggleSingleTooltip"(arg0: $NonNullSupplier$Type<(boolean)>, arg1: $Component$Type, arg2: $Component$Type): $Supplier<($List<($Component)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipUtil$Type = ($TooltipUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipUtil_ = $TooltipUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$InfoTab" {
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $InfoTab extends $TaxCollectorTab {
readonly "menu": $TaxCollectorMenu

constructor(arg0: $TaxCollectorMenu$Type)

public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "CanClearCache"(arg0: $TaxEntry$Type): boolean
public "ClearInfoCache"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InfoTab$Type = ($InfoTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InfoTab_ = $InfoTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$TradeCostEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$TradeEvent, $TradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent"

export class $TradeEvent$TradeCostEvent extends $TradeEvent {

constructor(arg0: $TradeData$Type, arg1: $TradeContext$Type)
constructor()

public "matches"(arg0: $TradeData$Type): boolean
public "matches"(arg0: $TradeEvent$TradeCostEvent$Type): boolean
public "giveDiscount"(arg0: integer): void
public "hikePrice"(arg0: integer): void
public "makeFree"(): void
public "getCostResult"(): $MoneyValue
public "makeNotFree"(): void
public "forcedFree"(): boolean
public "getBaseCost"(): $MoneyValue
public "getPricePercentage"(): integer
public "setPricePercentage"(arg0: integer): void
public "getCostResultIsFree"(): boolean
public "getListenerList"(): $ListenerList
get "costResult"(): $MoneyValue
get "baseCost"(): $MoneyValue
get "pricePercentage"(): integer
set "pricePercentage"(value: integer)
get "costResultIsFree"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeEvent$TradeCostEvent$Type = ($TradeEvent$TradeCostEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeEvent$TradeCostEvent_ = $TradeEvent$TradeCostEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$TextInputUtil" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EditBox, $EditBox$Type} from "packages/net/minecraft/client/gui/components/$EditBox"

export class $TextInputUtil {

constructor()

public static "isFloat"(arg0: $EditBox$Type): boolean
public static "isFloat"(arg0: string): boolean
public static "isDouble"(arg0: string): boolean
public static "isDouble"(arg0: $EditBox$Type): boolean
public static "whitelistInteger"(arg0: $EditBox$Type): void
public static "whitelistInteger"(arg0: $EditBox$Type, arg1: long, arg2: long): void
public static "getIntegerValue"(arg0: $EditBox$Type): integer
public static "getIntegerValue"(arg0: $EditBox$Type, arg1: integer): integer
public static "isLong"(arg0: $EditBox$Type): boolean
public static "isLong"(arg0: string): boolean
public static "whitelistFloat"(arg0: $EditBox$Type): void
public static "CreateInputHandler"(arg0: $EditBox$Type, arg1: integer, arg2: integer, arg3: integer, arg4: $Consumer$Type<(integer)>): any
public static "whitelistText"(arg0: $EditBox$Type, arg1: string): void
public static "getDoubleValue"(arg0: $EditBox$Type, arg1: double): double
public static "getDoubleValue"(arg0: $EditBox$Type): double
public static "getFloatValue"(arg0: $EditBox$Type, arg1: float): float
public static "getFloatValue"(arg0: $EditBox$Type): float
public static "getLongValue"(arg0: $EditBox$Type, arg1: integer): long
public static "getLongValue"(arg0: $EditBox$Type): long
public static "isPositiveDouble"(arg0: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextInputUtil$Type = ($TextInputUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextInputUtil_ = $TextInputUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionManager" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$SimpleJsonResourceReloadListener, $SimpleJsonResourceReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$SimpleJsonResourceReloadListener"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ItemPositionManager extends $SimpleJsonResourceReloadListener {
static readonly "INSTANCE": $ItemPositionManager


public static "getDataOrEmpty"(arg0: $ResourceLocation$Type): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemPositionManager$Type = ($ItemPositionManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemPositionManager_ = $ItemPositionManager$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$ICapabilityBlock" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ICapabilityBlock {

 "getCapabilityBlockEntity"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $BlockEntity

(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $BlockEntity
}

export namespace $ICapabilityBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICapabilityBlock$Type = ($ICapabilityBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICapabilityBlock_ = $ICapabilityBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/config/$VillagerTradeModsOption" {
import {$VillagerTradeMods, $VillagerTradeMods$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMods"
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $VillagerTradeModsOption extends $ConfigOption<($VillagerTradeMods)> {
static readonly "PARSER": $ConfigParser<($VillagerTradeMods)>


public static "create"(arg0: $NonNullSupplier$Type<($VillagerTradeMods$Type)>): $VillagerTradeModsOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerTradeModsOption$Type = ($VillagerTradeModsOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerTradeModsOption_ = $VillagerTradeModsOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/claiming/ftbchunks/$LCFTBChunksIntegration" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCFTBChunksIntegration {

constructor()

public static "setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCFTBChunksIntegration$Type = ($LCFTBChunksIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCFTBChunksIntegration_ = $LCFTBChunksIntegration$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/advancements/$LCAdvancementProvider" {
import {$ForgeAdvancementProvider, $ForgeAdvancementProvider$Type} from "packages/net/minecraftforge/common/data/$ForgeAdvancementProvider"
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"

export class $LCAdvancementProvider extends $ForgeAdvancementProvider {

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg2: $ExistingFileHelper$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCAdvancementProvider$Type = ($LCAdvancementProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCAdvancementProvider_ = $LCAdvancementProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/$BasicTradeEditClientTab" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$BasicTradeEditTab, $BasicTradeEditTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trades_basic/$BasicTradeEditTab"
import {$TradeButtonArea$InteractionConsumer, $TradeButtonArea$InteractionConsumer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$TradeButtonArea$InteractionConsumer"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $BasicTradeEditClientTab<T extends $BasicTradeEditTab> extends $TraderStorageClientTab<(T)> implements $TradeButtonArea$InteractionConsumer {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: T)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
public "onTradeButtonInputInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer): void
public "onTradeButtonInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer, arg4: integer): void
public "onTradeButtonOutputInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer): void
get "icon"(): $IconData
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasicTradeEditClientTab$Type<T> = ($BasicTradeEditClientTab<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasicTradeEditClientTab_<T> = $BasicTradeEditClientTab$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/slot_machine/$SlotMachineEntryDisplayWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ITooltipSource, $ITooltipSource$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipSource"
import {$SlotMachineTraderData, $SlotMachineTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineTraderData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SlotMachineEntryDisplayWidget extends $EasyWidget implements $ITooltipSource {
static readonly "WIDTH": integer
static readonly "HEIGHT": integer
readonly "trader": $Supplier<($SlotMachineTraderData)>
readonly "index": $Supplier<(integer)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ScreenPosition$Type, arg1: $Supplier$Type<($SlotMachineTraderData$Type)>, arg2: $Supplier$Type<(integer)>)
constructor(arg0: integer, arg1: integer, arg2: $Supplier$Type<($SlotMachineTraderData$Type)>, arg3: $Supplier$Type<(integer)>)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
public "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineEntryDisplayWidget$Type = ($SlotMachineEntryDisplayWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineEntryDisplayWidget_ = $SlotMachineEntryDisplayWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderinterface/$InfoClientTab" {
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$InfoTab, $InfoTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/base/$InfoTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $InfoClientTab extends $TraderInterfaceClientTab<($InfoTab)> {
readonly "commonTab": T

constructor(arg0: $TraderInterfaceScreen$Type, arg1: $InfoTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $MutableComponent
public "changeInTrades"(): boolean
get "icon"(): $IconData
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InfoClientTab$Type = ($InfoClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InfoClientTab_ = $InfoClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$AddRemoveTradeNotification" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AddRemoveTradeNotification extends $Notification {
static readonly "TYPE": $NotificationType<($AddRemoveTradeNotification)>

constructor()
constructor(arg0: $PlayerReference$Type, arg1: boolean, arg2: integer)

public "getMessage"(): $MutableComponent
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AddRemoveTradeNotification$Type = ($AddRemoveTradeNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AddRemoveTradeNotification_ = $AddRemoveTradeNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$TooltipItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$MultiLineTextEntry, $MultiLineTextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$MultiLineTextEntry"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TooltipItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type, arg1: $NonNullSupplier$Type<($List$Type<($Component$Type)>)>)

public static "combine"(...arg0: ($NonNullSupplier$Type<($List$Type<($Component$Type)>)>)[]): $NonNullSupplier<($List<($Component)>)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "addTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $NonNullSupplier$Type<($List$Type<($Component$Type)>)>): void
public static "addTooltip"(arg0: $List$Type<($Component$Type)>, arg1: $MultiLineTextEntry$Type): void
public static "addTooltipAlways"(arg0: $List$Type<($Component$Type)>, arg1: $NonNullSupplier$Type<($List$Type<($Component$Type)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipItem$Type = ($TooltipItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipItem_ = $TooltipItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$PlayerTradeLimit" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$TradeEvent$PostTradeEvent, $TradeEvent$PostTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PostTradeEvent"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$TradeEvent$PreTradeEvent, $TradeEvent$PreTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"

export class $PlayerTradeLimit extends $TradeRule {
static readonly "TYPE": $TradeRuleType<($PlayerTradeLimit)>
readonly "type": $TradeRuleType<(any)>


public "setLimit"(arg0: integer): void
public "getLimit"(): integer
public "createTab"(arg0: $TradeRulesClientTab$Type<(any)>): $TradeRulesClientSubTab
public "getTimeLimit"(): long
public "resetMemory"(): void
public "handleUpdateMessage"(arg0: $LazyPacketData$Type): void
public "loadPersistentData"(arg0: $CompoundTag$Type): void
public "savePersistentData"(): $CompoundTag
public "saveToJson"(arg0: $JsonObject$Type): $JsonObject
public "beforeTrade"(arg0: $TradeEvent$PreTradeEvent$Type): void
public "afterTrade"(arg0: $TradeEvent$PostTradeEvent$Type): void
public "loadFromJson"(arg0: $JsonObject$Type): void
public "setTimeLimit"(arg0: long): void
set "limit"(value: integer)
get "limit"(): integer
get "timeLimit"(): long
set "timeLimit"(value: long)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerTradeLimit$Type = ($PlayerTradeLimit);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerTradeLimit_ = $PlayerTradeLimit$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage$ITraderItemFilter" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $TraderItemStorage$ITraderItemFilter {

 "getStorageStackLimit"(): integer
 "isItemRelevant"(arg0: $ItemStack$Type): boolean
}

export namespace $TraderItemStorage$ITraderItemFilter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderItemStorage$ITraderItemFilter$Type = ($TraderItemStorage$ITraderItemFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderItemStorage$ITraderItemFilter_ = $TraderItemStorage$ITraderItemFilter$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/slot_machine/$SlotMachineRenderBlock" {
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $SlotMachineRenderBlock {
static readonly "EMPTY_SPRITE": $Sprite
readonly "weight": integer


public static "empty"(): $SlotMachineRenderBlock
public "render"(arg0: $EasyGuiGraphics$Type, arg1: integer, arg2: integer): void
public static "forItem"(arg0: integer, arg1: $ItemStack$Type): $SlotMachineRenderBlock
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineRenderBlock$Type = ($SlotMachineRenderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineRenderBlock_ = $SlotMachineRenderBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/enchantments/$SPacketMoneyMendingClink" {
import {$ServerToClientPacket$Simple, $ServerToClientPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketMoneyMendingClink extends $ServerToClientPacket$Simple {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketMoneyMendingClink)>
static readonly "INSTANCE": $SPacketMoneyMendingClink


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketMoneyMendingClink$Type = ($SPacketMoneyMendingClink);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketMoneyMendingClink_ = $SPacketMoneyMendingClink$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$ATMBlock" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$TallRotatableBlock, $TallRotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$TallRotatableBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ATMBlock extends $TallRotatableBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMBlock$Type = ($ATMBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMBlock_ = $ATMBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$TradeButtonArea$InteractionConsumer" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"

export interface $TradeButtonArea$InteractionConsumer {

 "onTradeButtonInputInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer): void
 "onTradeButtonInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer, arg4: integer): void
 "onTradeButtonOutputInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer): void
}

export namespace $TradeButtonArea$InteractionConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeButtonArea$InteractionConsumer$Type = ($TradeButtonArea$InteractionConsumer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeButtonArea$InteractionConsumer_ = $TradeButtonArea$InteractionConsumer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$MintScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MintMenu, $MintMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$MintMenu"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $MintScreen extends $EasyMenuScreen<($MintMenu)> {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "ARROW_SPRITE": $Sprite
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $MintMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MintScreen$Type = ($MintScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MintScreen_ = $MintScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/teams/$TeamAPI" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITeam, $ITeam$Type} from "packages/io/github/lightman314/lightmanscurrency/api/teams/$ITeam"

export class $TeamAPI {


public static "getAllTeams"(arg0: boolean): $List<(any)>
public static "sorterFor"(arg0: $Player$Type): $Comparator<($ITeam)>
public static "createTeam"(arg0: $Player$Type, arg1: string): $ITeam
public static "getAllTeamsForPlayer"(arg0: $Player$Type): $List<($ITeam)>
public static "getTeam"(arg0: boolean, arg1: long): $ITeam
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamAPI$Type = ($TeamAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamAPI_ = $TeamAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/data/$ClientTraderData" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientPlayerNetworkEvent$LoggingOut, $ClientPlayerNetworkEvent$LoggingOut$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$LoggingOut"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ClientTraderData {

constructor()

public static "onClientLogout"(arg0: $ClientPlayerNetworkEvent$LoggingOut$Type): void
public static "UpdateTrader"(arg0: $CompoundTag$Type): void
public static "RemoveTrader"(arg0: long): void
public static "ClearTraders"(): void
public static "GetAllTraders"(): $List<($TraderData)>
public static "GetTrader"(arg0: long): $TraderData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTraderData$Type = ($ClientTraderData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTraderData_ = $ClientTraderData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$CashRegisterItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CashRegisterItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Block$Type, arg1: $Item$Properties$Type)

public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CashRegisterItem$Type = ($CashRegisterItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CashRegisterItem_ = $CashRegisterItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/builtin/$PotentialPlayerOwner" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$PotentialOwner, $PotentialOwner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $PotentialPlayerOwner extends $PotentialOwner {
static readonly "PLAYER_PRIORITY": integer
readonly "player": $PlayerReference

constructor(arg0: $PlayerReference$Type)

public "getIcon"(): $IconData
public "appendTooltip"(arg0: $List$Type<($Component$Type)>): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotentialPlayerOwner$Type = ($PotentialPlayerOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotentialPlayerOwner_ = $PotentialPlayerOwner$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu


public "canOpen"(arg0: $Player$Type): boolean
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onMenuClose"(): void
public "onTabOpen"(): void
public "quickMoveStack"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderStorageTab$Type = ($TraderStorageTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderStorageTab_ = $TraderStorageTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/jeiplugin/$CoinMintCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CoinMintRecipe, $CoinMintRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IDrawable, $IDrawable$Type} from "packages/mezz/jei/api/gui/drawable/$IDrawable"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $CoinMintCategory implements $IRecipeCategory<($CoinMintRecipe)> {

constructor(arg0: $IGuiHelper$Type)

public "getRecipeType"(): $RecipeType<($CoinMintRecipe)>
public "draw"(arg0: $CoinMintRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "getIcon"(): $IDrawable
public "getTitle"(): $Component
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $CoinMintRecipe$Type, arg2: $IFocusGroup$Type): void
public "getBackground"(): $IDrawable
public "getWidth"(): integer
public "getHeight"(): integer
public "isHandled"(arg0: $CoinMintRecipe$Type): boolean
public "handleInput"(arg0: $CoinMintRecipe$Type, arg1: double, arg2: double, arg3: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: $CoinMintRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: double, arg3: double): $List<($Component)>
public "getRegistryName"(arg0: $CoinMintRecipe$Type): $ResourceLocation
get "recipeType"(): $RecipeType<($CoinMintRecipe)>
get "icon"(): $IDrawable
get "title"(): $Component
get "background"(): $IDrawable
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinMintCategory$Type = ($CoinMintCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinMintCategory_ = $CoinMintCategory$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxCollector" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$ITaxable, $ITaxable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxable"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$WorldArea, $WorldArea$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/world/$WorldArea"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $ITaxCollector extends $IClientTracker {

 "getName"(): $MutableComponent
 "canAccess"(arg0: $Player$Type): boolean
 "getOwner"(): $OwnerData
 "getID"(): long
 "isServerEntry"(): boolean
 "ShouldTax"(arg0: $ITaxable$Type): boolean
 "IsInArea"(arg0: $ITaxable$Type): boolean
 "AcceptTaxable"(arg0: $ITaxable$Type): void
 "getArea"(): $WorldArea
 "TaxableWasRemoved"(arg0: $ITaxable$Type): void
 "getTaxRate"(): integer
 "CalculateAndPayTaxes"(arg0: $ITaxable$Type, arg1: $MoneyValue$Type): $MoneyValue
 "isClient"(): boolean
 "isServer"(): boolean
}

export namespace $ITaxCollector {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITaxCollector$Type = ($ITaxCollector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITaxCollector_ = $ITaxCollector$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$ATMScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ATMTab, $ATMTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$ATMTab"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ATMMenu, $ATMMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$ATMMenu"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $ATMScreen extends $EasyMenuScreen<($ATMMenu)> {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "BUTTON_TEXTURE": $ResourceLocation
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ATMMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "blockInventoryClosing"(): boolean
public "currentTab"(): $ATMTab
public "changeTab"(arg0: integer): void
public "getTabs"(): $List<($ATMTab)>
get "tabs"(): $List<($ATMTab)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMScreen$Type = ($ATMScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMScreen_ = $ATMScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/client/$ItemTradeButtonRenderer" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$DisplayData, $DisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$ItemTradeData, $ItemTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"

export class $ItemTradeButtonRenderer extends $TradeRenderManager<($ItemTradeData)> {
static readonly "NBT_SLOT": $ResourceLocation
static readonly "NBT_BACKGROUND": $Pair<($ResourceLocation), ($ResourceLocation)>
readonly "trade": T

constructor(arg0: $ItemTradeData$Type)

public "getOutputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "arrowPosition"(arg0: $TradeContext$Type): $LazyOptional<($ScreenPosition)>
public "inputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "outputDisplayArea"(arg0: $TradeContext$Type): $DisplayData
public "getInputDisplays"(arg0: $TradeContext$Type): $List<($DisplayEntry)>
public "tradeButtonWidth"(arg0: $TradeContext$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTradeButtonRenderer$Type = ($ItemTradeButtonRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTradeButtonRenderer_ = $ItemTradeButtonRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/client/$LCBlockStateProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Property, $Property$Type} from "packages/net/minecraft/world/level/block/state/properties/$Property"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ImmutableMap, $ImmutableMap$Type} from "packages/com/google/common/collect/$ImmutableMap"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$WallSide, $WallSide$Type} from "packages/net/minecraft/world/level/block/state/properties/$WallSide"
import {$BlockStateProvider, $BlockStateProvider$Type} from "packages/net/minecraftforge/client/model/generators/$BlockStateProvider"

export class $LCBlockStateProvider extends $BlockStateProvider {
static readonly "WALL_PROPS": $ImmutableMap<($Direction), ($Property<($WallSide)>)>

constructor(arg0: $PackOutput$Type, arg1: $ExistingFileHelper$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCBlockStateProvider$Type = ($LCBlockStateProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCBlockStateProvider_ = $LCBlockStateProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/input/builtin/$CoinDisplayInput" {
import {$SimpleDisplayInput, $SimpleDisplayInput$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/input/templates/$SimpleDisplayInput"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $CoinDisplayInput extends $SimpleDisplayInput {

constructor(arg0: $ChainData$Type)

public "inputName"(): $MutableComponent
public "getUniqueName"(): string
get "uniqueName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinDisplayInput$Type = ($CoinDisplayInput);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinDisplayInput_ = $CoinDisplayInput$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/curios/wallet/$CuriosWalletHandler" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IWalletHandler, $IWalletHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$IWalletHandler"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CuriosWalletHandler extends $Record implements $IWalletHandler {

constructor(entity: $LivingEntity$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "load"(arg0: $CompoundTag$Type): void
public "clean"(): void
public "save"(): $CompoundTag
public "visible"(): boolean
public "tick"(): void
public "isDirty"(): boolean
public "setVisible"(arg0: boolean): void
public "syncWallet"(arg0: $ItemStack$Type): void
public "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "getWallet"(): $ItemStack
public "entity"(): $LivingEntity
public "flagAsKnown"(arg0: any): void
public "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
public "forgetContext"(arg0: any): void
public "hasStoredMoneyChanged"(arg0: any): boolean
public "setWallet"(arg0: $ItemStack$Type): void
public "getStoredMoney"(): $MoneyView
get "dirty"(): boolean
get "wallet"(): $ItemStack
set "wallet"(value: $ItemStack$Type)
get "storedMoney"(): $MoneyView
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CuriosWalletHandler$Type = ($CuriosWalletHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CuriosWalletHandler_ = $CuriosWalletHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$WalletItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WalletItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: integer, arg1: integer, arg2: string, arg3: $Item$Properties$Type)

public static "isEmpty"(arg0: $ItemStack$Type): boolean
public "getModelTexture"(): $ResourceLocation
public static "isWallet"(arg0: $Item$Type): boolean
public static "isWallet"(arg0: $ItemStack$Type): boolean
public static "PickupCoin"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): $ItemStack
public "getEnchantmentValue"(arg0: $ItemStack$Type): integer
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isEnchantable"(arg0: $ItemStack$Type): boolean
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
public static "CanPickup"(arg0: $WalletItem$Type): boolean
public static "HasBankAccess"(arg0: $WalletItem$Type): boolean
public static "validWalletStack"(arg0: $ItemStack$Type): boolean
public static "CanExchange"(arg0: $WalletItem$Type): boolean
public static "putWalletInventory"(arg0: $ItemStack$Type, arg1: $Container$Type): void
public static "toggleAutoExchange"(arg0: $ItemStack$Type): void
public static "getWalletInventory"(arg0: $ItemStack$Type): $SimpleContainer
public static "getAutoExchange"(arg0: $ItemStack$Type): boolean
public static "QuickCollect"(arg0: $Player$Type, arg1: $Container$Type, arg2: boolean): void
public static "InventorySize"(arg0: $ItemStack$Type): integer
public static "InventorySize"(arg0: $WalletItem$Type): integer
get "modelTexture"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletItem$Type = ($WalletItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletItem_ = $WalletItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/comparison/$TradeComparisonResult" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ProductComparisonResult, $ProductComparisonResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/comparison/$ProductComparisonResult"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $TradeComparisonResult {

constructor()

public "getProductResultCount"(): integer
public "isPriceCheaper"(): boolean
public "comparePrices"(arg0: $MoneyValue$Type, arg1: $MoneyValue$Type): void
public "addProductResults"(arg0: $Collection$Type<(any)>): void
public "PriceMatches"(): boolean
public "PriceIncompatible"(): boolean
public "isPriceExpensive"(): boolean
public "getProductResult"(arg0: integer): $ProductComparisonResult
public "setTypeResult"(arg0: boolean): void
public "setCompatible"(): void
public "TypeMatches"(): boolean
public "priceDifference"(): $MoneyValue
public "isCompatible"(): boolean
public "addProductResult"(arg0: $ProductComparisonResult$Type): void
public "addProductResult"(arg0: boolean, arg1: boolean, arg2: integer): void
public "ProductMatches"(): boolean
public "Identical"(): boolean
get "productResultCount"(): integer
get "priceCheaper"(): boolean
get "priceExpensive"(): boolean
set "typeResult"(value: boolean)
get "compatible"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeComparisonResult$Type = ($TradeComparisonResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeComparisonResult_ = $TradeComparisonResult$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$TicketTraderBlockEntity" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemTraderBlockEntity, $ItemTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$ItemTraderBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TicketTraderBlockEntity extends $ItemTraderBlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)
constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type, arg2: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketTraderBlockEntity$Type = ($TicketTraderBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketTraderBlockEntity_ = $TicketTraderBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxReferenceType" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$TaxableReference, $TaxableReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxableReference"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TaxReferenceType {
readonly "typeID": $ResourceLocation


public "load"(arg0: $CompoundTag$Type): $TaxableReference
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxReferenceType$Type = ($TaxReferenceType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxReferenceType_ = $TaxReferenceType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModLootPoolEntryTypes" {
import {$LootPoolEntryType, $LootPoolEntryType$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolEntryType"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $ModLootPoolEntryTypes {
static readonly "LOOT_TIER_TYPE": $RegistryObject<($LootPoolEntryType)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModLootPoolEntryTypes$Type = ($ModLootPoolEntryTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModLootPoolEntryTypes_ = $ModLootPoolEntryTypes$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$LazyShapes" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$TriFunction, $TriFunction$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TriFunction"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"

export class $LazyShapes {
static readonly "SHORT_BOX": $VoxelShape
static readonly "SHORT_BOX_SHAPE": $Function<($Direction), ($VoxelShape)>
static readonly "BOX": $VoxelShape
static readonly "BOX_SHAPE": $Function<($Direction), ($VoxelShape)>
static readonly "TALL_BOX": $VoxelShape
static readonly "TALL_BOX_SHAPE": $BiFunction<($Direction), (boolean), ($VoxelShape)>
static readonly "WIDE_BOX_NORTH": $VoxelShape
static readonly "WIDE_BOX_EAST": $VoxelShape
static readonly "WIDE_BOX_SOUTH": $VoxelShape
static readonly "WIDE_BOX_WEST": $VoxelShape
static readonly "WIDE_BOX_SHAPE": $BiFunction<($Direction), (boolean), ($VoxelShape)>
static readonly "TALL_WIDE_BOX_NORTH": $VoxelShape
static readonly "TALL_WIDE_BOX_EAST": $VoxelShape
static readonly "TALL_WIDE_BOX_SOUTH": $VoxelShape
static readonly "TALL_WIDE_BOX_WEST": $VoxelShape
static readonly "TALL_WIDE_BOX_SHAPE": $TriFunction<($Direction), (boolean), (boolean), ($VoxelShape)>

constructor()

public static "lazyWideDirectionalShape"(arg0: $VoxelShape$Type, arg1: $VoxelShape$Type, arg2: $VoxelShape$Type, arg3: $VoxelShape$Type): $BiFunction<($Direction), (boolean), ($VoxelShape)>
public static "lazyTallSingleShape"(arg0: $VoxelShape$Type): $BiFunction<($Direction), (boolean), ($VoxelShape)>
public static "lazyTallDirectionalShape"(arg0: $VoxelShape$Type, arg1: $VoxelShape$Type, arg2: $VoxelShape$Type, arg3: $VoxelShape$Type): $BiFunction<($Direction), (boolean), ($VoxelShape)>
public static "lazyTallWideDirectionalShape"(arg0: $VoxelShape$Type, arg1: $VoxelShape$Type, arg2: $VoxelShape$Type, arg3: $VoxelShape$Type): $TriFunction<($Direction), (boolean), (boolean), ($VoxelShape)>
public static "lazyTallWideDirectionalShape"(arg0: $BiFunction$Type<($Direction$Type), (boolean), ($VoxelShape$Type)>): $TriFunction<($Direction), (boolean), (boolean), ($VoxelShape)>
public static "lazyDirectionalShape"(arg0: $VoxelShape$Type, arg1: $VoxelShape$Type): $Function<($Direction), ($VoxelShape)>
public static "lazyDirectionalShape"(arg0: $VoxelShape$Type, arg1: $VoxelShape$Type, arg2: $VoxelShape$Type, arg3: $VoxelShape$Type): $Function<($Direction), ($VoxelShape)>
public static "moveDown"(arg0: $VoxelShape$Type): $VoxelShape
public static "lazySingleShape"(arg0: $VoxelShape$Type): $Function<($Direction), ($VoxelShape)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LazyShapes$Type = ($LazyShapes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LazyShapes_ = $LazyShapes$Type;
}}
declare module "packages/io/github/steveplays28/noisium/compat/lithium/$NoisiumLithiumCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $NoisiumLithiumCompat {
static readonly "LITHIUM_MOD_ID": string
static readonly "CANARY_MOD_ID": string
static readonly "RADIUM_MOD_ID": string

constructor()

public static "isLithiumLoaded"(): boolean
get "lithiumLoaded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoisiumLithiumCompat$Type = ($NoisiumLithiumCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoisiumLithiumCompat_ = $NoisiumLithiumCompat$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IScrollListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IScrollListener {

 "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean

(arg0: double, arg1: double, arg2: double): boolean
}

export namespace $IScrollListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IScrollListener$Type = ($IScrollListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IScrollListener_ = $IScrollListener$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$TeamButton" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamButton$Size, $TeamButton$Size$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$TeamButton$Size"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$Supplier, $Supplier$Type} from "packages/com/google/common/base/$Supplier"

export class $TeamButton extends $EasyButton {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "HEIGHT": integer
static readonly "TEXT_COLOR": integer
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ScreenPosition$Type, arg1: $TeamButton$Size$Type, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $Supplier$Type<($Team$Type)>, arg4: $Supplier$Type<(boolean)>)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "playDownSound"(arg0: $SoundManager$Type): void
public "getTeam"(): $Team
get "team"(): $Team
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamButton$Type = ($TeamButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamButton_ = $TeamButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity" {
import {$IClientTicker, $IClientTicker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IClientTicker"
import {$EasyBlockEntity, $EasyBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$EasyBlockEntity"
import {$CoinChestUpgrade, $CoinChestUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgrade"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$CoinContainer, $CoinContainer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/containers/$CoinContainer"
import {$IServerTicker, $IServerTicker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IServerTicker"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$CoinChestUpgradeData, $CoinChestUpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgradeData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$LidBlockEntity, $LidBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$LidBlockEntity"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$IUpgradeable, $IUpgradeable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$IUpgradeable"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CoinChestBlockEntity extends $EasyBlockEntity implements $IUpgradeable, $IClientTicker, $IServerTicker, $LidBlockEntity {
static readonly "STORAGE_ROWS": integer
static readonly "STORAGE_SIZE": integer
static readonly "UPGRADE_SIZE": integer
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "getDisplayName"(): $Component
public "markCustomNameDirty"(): void
public "getChestUpgradeForSlot"(arg0: integer): $CoinChestUpgradeData
public "hasChestUpgradeOfType"(arg0: $CoinChestUpgrade$Type): boolean
public "getChestUpgradeOfType"(arg0: $CoinChestUpgrade$Type): $CoinChestUpgradeData
public "checkUpgradeEquipped"(arg0: integer): void
public "clientTick"(): void
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "getUpgrades"(): $SimpleContainer
public "setCustomName"(arg0: $Component$Type): void
public "getChestUpgrades"(): $ImmutableList<($CoinChestUpgradeData)>
public "getOpenerCount"(): integer
public "markStorageDirty"(): void
public "markUpgradesDirty"(): void
public "onBlockRemoval"(): void
public "startOpen"(arg0: $Player$Type): void
public "allowUpgrade"(arg0: $UpgradeType$Type): boolean
public static "getMenuProvider"(arg0: $CoinChestBlockEntity$Type): $MenuProvider
public "allowAccess"(arg0: $Player$Type): boolean
public "recheckOpen"(): void
public "stopOpen"(arg0: $Player$Type): void
public "load"(arg0: $CompoundTag$Type): void
public "serverTick"(): void
public "triggerEvent"(arg0: integer, arg1: integer): boolean
public "getStorage"(): $CoinContainer
public "onValidBlockRemoval"(): void
public "getOpenNess"(arg0: float): float
public "allowUpgrade"(arg0: $UpgradeItem$Type): boolean
get "displayName"(): $Component
get "upgrades"(): $SimpleContainer
set "customName"(value: $Component$Type)
get "chestUpgrades"(): $ImmutableList<($CoinChestUpgradeData)>
get "openerCount"(): integer
get "storage"(): $CoinContainer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestBlockEntity$Type = ($CoinChestBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestBlockEntity_ = $CoinChestBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$ITooltipRenderable" {
import {$Tooltip, $Tooltip$Type} from "packages/net/minecraft/client/gui/components/$Tooltip"

export interface $ITooltipRenderable {

 "getTooltip"(): $Tooltip

(): $Tooltip
}

export namespace $ITooltipRenderable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITooltipRenderable$Type = ($ITooltipRenderable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITooltipRenderable_ = $ITooltipRenderable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/auction/$SPacketStartBid" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketStartBid extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketStartBid)>

constructor(arg0: long, arg1: integer)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketStartBid$Type = ($SPacketStartBid);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketStartBid_ = $SPacketStartBid$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/tabs/$CoinManagementTab" {
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"

export class $CoinManagementTab extends $EasyTab {


public "blockInventoryClosing"(): boolean
public "getColor"(): integer
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinManagementTab$Type = ($CoinManagementTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinManagementTab_ = $CoinManagementTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$SimpleTrade" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$SimpleTrade$Serializer, $SimpleTrade$Serializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$SimpleTrade$Serializer"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SimpleTrade implements $VillagerTrades$ItemListing {
static readonly "TYPE": $ResourceLocation
static readonly "SERIALIZER": $SimpleTrade$Serializer

constructor(arg0: integer, arg1: $ItemLike$Type, arg2: integer, arg3: $ItemLike$Type, arg4: integer, arg5: $ItemLike$Type)
constructor(arg0: integer, arg1: $ItemLike$Type, arg2: integer, arg3: $ItemLike$Type, arg4: integer, arg5: $ItemLike$Type, arg6: integer)
constructor(arg0: integer, arg1: $ItemLike$Type, arg2: integer, arg3: $ItemStack$Type)
constructor(arg0: integer, arg1: $ItemLike$Type, arg2: integer, arg3: $ItemLike$Type, arg4: integer, arg5: $ItemStack$Type)
constructor(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: integer)
constructor(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer, arg5: float)
constructor(arg0: $ItemLike$Type, arg1: integer, arg2: $ItemLike$Type)
constructor(arg0: $ItemLike$Type, arg1: integer, arg2: $ItemLike$Type, arg3: integer)
constructor(arg0: integer, arg1: $ItemLike$Type, arg2: integer, arg3: $ItemLike$Type)
constructor(arg0: $ItemLike$Type, arg1: integer, arg2: $ItemLike$Type, arg3: integer, arg4: $ItemLike$Type, arg5: integer)
constructor(arg0: $ItemLike$Type, arg1: integer, arg2: $ItemLike$Type, arg3: integer, arg4: $ItemLike$Type)
constructor(arg0: integer, arg1: $ItemLike$Type, arg2: integer, arg3: $ItemLike$Type, arg4: integer)

public "getOffer"(arg0: $Entity$Type, arg1: $RandomSource$Type): $MerchantOffer
public static "createSuspiciousStew"(arg0: $MobEffect$Type, arg1: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleTrade$Type = ($SimpleTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleTrade_ = $SimpleTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$TriConsumer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $TriConsumer<K, V, S> {

 "accept"(arg0: K, arg1: V, arg2: S): void

(arg0: K, arg1: V, arg2: S): void
}

export namespace $TriConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TriConsumer$Type<K, V, S> = ($TriConsumer<(K), (V), (S)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TriConsumer_<K, V, S> = $TriConsumer$Type<(K), (V), (S)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/util/$ColorHelper" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Color, $Color$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$Color"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ColorHelper {

constructor()

public static "GetWoolOfColor"(arg0: $Color$Type): $Item
public static "GetWoolTextureOfColor"(arg0: $Color$Type): $ResourceLocation
public static "GetConcretePowderOfColor"(arg0: $Color$Type): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorHelper$Type = ($ColorHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorHelper_ = $ColorHelper$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$CurrencyType, $CurrencyType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$CurrencyType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"

export class $MoneyValue {

constructor()

public "equals"(arg0: any): boolean
public static "load"(arg0: $CompoundTag$Type): $MoneyValue
public static "decode"(arg0: $FriendlyByteBuf$Type): $MoneyValue
public "encode"(arg0: $FriendlyByteBuf$Type): void
public "isEmpty"(): boolean
public static "empty"(): $MoneyValue
public "containsValue"(arg0: $MoneyValue$Type): boolean
public "save"(): $CompoundTag
public "isInvalid"(): boolean
public "getString"(arg0: string): string
public "getString"(): string
public "getCurrency"(): $CurrencyType
public "getText"(arg0: string): $MutableComponent
public "getText"(arg0: $MutableComponent$Type): $MutableComponent
public "getText"(): $MutableComponent
public static "free"(): $MoneyValue
public "toJson"(): $JsonObject
public "addValue"(arg0: $MoneyValue$Type): $MoneyValue
public "getUniqueName"(): string
public "getCoreValue"(): long
public "isFree"(): boolean
public static "loadFromJson"(arg0: $JsonElement$Type): $MoneyValue
public static "loadFromJson"(arg0: $JsonObject$Type): $MoneyValue
public "getDisplayEntry"(arg0: $List$Type<($Component$Type)>, arg1: boolean): $DisplayEntry
public static "safeLoad"(arg0: $CompoundTag$Type, arg1: string): $MoneyValue
public "percentageOfValue"(arg0: integer): $MoneyValue
public "percentageOfValue"(arg0: integer, arg1: boolean): $MoneyValue
public "subtractValue"(arg0: $MoneyValue$Type): $MoneyValue
public "multiplyValue"(arg0: double): $MoneyValue
public "onBlockBroken"(arg0: $Level$Type, arg1: $OwnerData$Type): $List<($ItemStack)>
public "getSmallestValue"(): $MoneyValue
public "isValidPrice"(): boolean
public "sameType"(arg0: $MoneyValue$Type): boolean
public static "generateCustomUniqueName"(arg0: $ResourceLocation$Type, arg1: string): string
get "invalid"(): boolean
get "string"(): string
get "currency"(): $CurrencyType
get "text"(): $MutableComponent
get "uniqueName"(): string
get "coreValue"(): long
get "smallestValue"(): $MoneyValue
get "validPrice"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyValue$Type = ($MoneyValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyValue_ = $MoneyValue$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$PortableTerminalItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$TooltipItem, $TooltipItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$TooltipItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PortableTerminalItem extends $TooltipItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PortableTerminalItem$Type = ($PortableTerminalItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PortableTerminalItem_ = $PortableTerminalItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMData" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$ChainData$Builder, $ChainData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData$Builder"
import {$ATMExchangeButtonData, $ATMExchangeButtonData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMExchangeButtonData"
import {$ATMData$Builder, $ATMData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMData$Builder"

export class $ATMData {
readonly "chain": $ChainData


public static "builder"(arg0: $ChainData$Builder$Type): $ATMData$Builder
public "save"(): $JsonObject
public static "parse"(arg0: $JsonObject$Type, arg1: $ChainData$Type): $ATMData
/**
 * 
 * @deprecated
 */
public static "parseDeprecated"(arg0: $ChainData$Builder$Type): void
public "getExchangeButtons"(): $List<($ATMExchangeButtonData)>
get "exchangeButtons"(): $List<($ATMExchangeButtonData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMData$Type = ($ATMData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMData_ = $ATMData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$SlotMachineTraderBlockEntity" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$TraderBlockEntity, $TraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blockentity/$TraderBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SlotMachineTraderData, $SlotMachineTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineTraderData"

export class $SlotMachineTraderBlockEntity extends $TraderBlockEntity<($SlotMachineTraderData)> {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineTraderBlockEntity$Type = ($SlotMachineTraderBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineTraderBlockEntity_ = $SlotMachineTraderBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockBase" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$EasyBlock, $EasyBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/$EasyBlock"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ITraderBlock, $ITraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$ITraderBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$IEasyEntityBlock, $IEasyEntityBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IEasyEntityBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $TraderBlockBase extends $EasyBlock implements $ITraderBlock, $IEasyEntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)
constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $VoxelShape$Type)

public "getBlockEntity"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "playerWillDestroy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "canEntityDestroy"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "playerWillDestroyBase"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "getAllowedTypes"(): $Collection<($BlockEntityType<(any)>)>
public "setPlacedByBase"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "getCapabilityBlockEntity"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $BlockEntity
public "canBreak"(arg0: $Player$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getDropBlockItem"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
get "allowedTypes"(): $Collection<($BlockEntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderBlockBase$Type = ($TraderBlockBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderBlockBase_ = $TraderBlockBase$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$DoubleOption" {
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $DoubleOption extends $ConfigOption<(double)> {


public static "create"(arg0: double): $DoubleOption
public static "create"(arg0: double, arg1: double): $DoubleOption
public static "create"(arg0: $NonNullSupplier$Type<(double)>, arg1: double): $DoubleOption
public static "create"(arg0: $NonNullSupplier$Type<(double)>): $DoubleOption
public static "create"(arg0: $NonNullSupplier$Type<(double)>, arg1: double, arg2: double): $DoubleOption
public static "create"(arg0: double, arg1: double, arg2: double): $DoubleOption
public static "makeParser"(arg0: double, arg1: double): $ConfigParser<(double)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleOption$Type = ($DoubleOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleOption_ = $DoubleOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$LogTab" {
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $LogTab extends $TaxCollectorTab {
readonly "menu": $TaxCollectorMenu

constructor(arg0: $TaxCollectorMenu$Type)

public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LogTab$Type = ($LogTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LogTab_ = $LogTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/command/$SPacketDebugTrader" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketDebugTrader extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketDebugTrader)>

constructor(arg0: long)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketDebugTrader$Type = ($SPacketDebugTrader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketDebugTrader_ = $SPacketDebugTrader$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/core/$PermissionsTab" {
import {$TraderSettingsTab, $TraderSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $PermissionsTab extends $SettingsSubTab {
readonly "parent": $TraderSettingsClientTab
readonly "commonTab": $TraderSettingsTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderSettingsClientTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "canOpen"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "shouldRenderInventoryText"(): boolean
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PermissionsTab$Type = ($PermissionsTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PermissionsTab_ = $PermissionsTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/glm/$CoinsInChestsModifier$Serializer" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$MapCodec, $MapCodec$Type} from "packages/com/mojang/serialization/$MapCodec"
import {$UnboundedMapCodec, $UnboundedMapCodec$Type} from "packages/com/mojang/serialization/codecs/$UnboundedMapCodec"
import {$MapEncoder, $MapEncoder$Type} from "packages/com/mojang/serialization/$MapEncoder"
import {$DynamicOps, $DynamicOps$Type} from "packages/com/mojang/serialization/$DynamicOps"
import {$Encoder, $Encoder$Type} from "packages/com/mojang/serialization/$Encoder"
import {$CoinsInChestsModifier, $CoinsInChestsModifier$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/glm/$CoinsInChestsModifier"
import {$Codec$ResultFunction, $Codec$ResultFunction$Type} from "packages/com/mojang/serialization/$Codec$ResultFunction"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UnaryOperator, $UnaryOperator$Type} from "packages/java/util/function/$UnaryOperator"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Decoder, $Decoder$Type} from "packages/com/mojang/serialization/$Decoder"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Lifecycle, $Lifecycle$Type} from "packages/com/mojang/serialization/$Lifecycle"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Decoder$Boxed, $Decoder$Boxed$Type} from "packages/com/mojang/serialization/$Decoder$Boxed"
import {$MapDecoder, $MapDecoder$Type} from "packages/com/mojang/serialization/$MapDecoder"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$DataResult, $DataResult$Type} from "packages/com/mojang/serialization/$DataResult"
import {$Decoder$Simple, $Decoder$Simple$Type} from "packages/com/mojang/serialization/$Decoder$Simple"
import {$SimpleMapCodec, $SimpleMapCodec$Type} from "packages/com/mojang/serialization/codecs/$SimpleMapCodec"
import {$Decoder$Terminal, $Decoder$Terminal$Type} from "packages/com/mojang/serialization/$Decoder$Terminal"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"

export class $CoinsInChestsModifier$Serializer implements $Codec<($CoinsInChestsModifier)> {

constructor()

public "decode"<T>(arg0: $DynamicOps$Type<(T)>, arg1: T): $DataResult<($Pair<($CoinsInChestsModifier), (T)>)>
public "encode"<T>(arg0: $CoinsInChestsModifier$Type, arg1: $DynamicOps$Type<(T)>, arg2: T): $DataResult<(T)>
public "dispatch"<E>(arg0: string, arg1: $Function$Type<(any), (any)>, arg2: $Function$Type<(any), (any)>): $Codec<(E)>
public "dispatch"<E>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(E)>
public static "of"<A>(arg0: $MapEncoder$Type<($CoinsInChestsModifier$Type)>, arg1: $MapDecoder$Type<($CoinsInChestsModifier$Type)>, arg2: $Supplier$Type<(string)>): $MapCodec<($CoinsInChestsModifier)>
public static "of"<A>(arg0: $MapEncoder$Type<($CoinsInChestsModifier$Type)>, arg1: $MapDecoder$Type<($CoinsInChestsModifier$Type)>): $MapCodec<($CoinsInChestsModifier)>
public static "of"<A>(arg0: $Encoder$Type<($CoinsInChestsModifier$Type)>, arg1: $Decoder$Type<($CoinsInChestsModifier$Type)>, arg2: string): $Codec<($CoinsInChestsModifier)>
public static "of"<A>(arg0: $Encoder$Type<($CoinsInChestsModifier$Type)>, arg1: $Decoder$Type<($CoinsInChestsModifier$Type)>): $Codec<($CoinsInChestsModifier)>
public static "list"<E>(arg0: $Codec$Type<(E)>): $Codec<($List<(E)>)>
public "orElse"(arg0: $CoinsInChestsModifier$Type): $Codec<($CoinsInChestsModifier)>
public "orElse"(arg0: $UnaryOperator$Type<(string)>, arg1: $CoinsInChestsModifier$Type): $Codec<($CoinsInChestsModifier)>
public "orElse"(arg0: $Consumer$Type<(string)>, arg1: $CoinsInChestsModifier$Type): $Codec<($CoinsInChestsModifier)>
public static "checkRange"<N extends (number) & ($Comparable<(N)>)>(arg0: N, arg1: N): $Function<(N), ($DataResult<(N)>)>
public static "unit"<A>(arg0: $CoinsInChestsModifier$Type): $Codec<($CoinsInChestsModifier)>
public static "unit"<A>(arg0: $Supplier$Type<($CoinsInChestsModifier$Type)>): $Codec<($CoinsInChestsModifier)>
public "orElseGet"(arg0: $Supplier$Type<(any)>): $Codec<($CoinsInChestsModifier)>
public "orElseGet"(arg0: $Consumer$Type<(string)>, arg1: $Supplier$Type<(any)>): $Codec<($CoinsInChestsModifier)>
public "orElseGet"(arg0: $UnaryOperator$Type<(string)>, arg1: $Supplier$Type<(any)>): $Codec<($CoinsInChestsModifier)>
public static "pair"<F, S>(arg0: $Codec$Type<(F)>, arg1: $Codec$Type<(S)>): $Codec<($Pair<(F), (S)>)>
public "xmap"<S>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(S)>
public static "optionalField"<F>(arg0: string, arg1: $Codec$Type<(F)>): $MapCodec<($Optional<(F)>)>
public "deprecated"(arg0: integer): $Codec<($CoinsInChestsModifier)>
public "withLifecycle"(arg0: $Lifecycle$Type): $Codec<($CoinsInChestsModifier)>
public "optionalFieldOf"(arg0: string): $MapCodec<($Optional<($CoinsInChestsModifier)>)>
public "optionalFieldOf"(arg0: string, arg1: $CoinsInChestsModifier$Type, arg2: $Lifecycle$Type): $MapCodec<($CoinsInChestsModifier)>
public "optionalFieldOf"(arg0: string, arg1: $Lifecycle$Type, arg2: $CoinsInChestsModifier$Type, arg3: $Lifecycle$Type): $MapCodec<($CoinsInChestsModifier)>
public "optionalFieldOf"(arg0: string, arg1: $CoinsInChestsModifier$Type): $MapCodec<($CoinsInChestsModifier)>
public "mapResult"(arg0: $Codec$ResultFunction$Type<($CoinsInChestsModifier$Type)>): $Codec<($CoinsInChestsModifier)>
public "flatXmap"<S>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(S)>
public "promotePartial"(arg0: $Consumer$Type<(string)>): $Codec<($CoinsInChestsModifier)>
public "partialDispatch"<E>(arg0: string, arg1: $Function$Type<(any), (any)>, arg2: $Function$Type<(any), (any)>): $Codec<(E)>
public "dispatchMap"<E>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $MapCodec<(E)>
public "dispatchMap"<E>(arg0: string, arg1: $Function$Type<(any), (any)>, arg2: $Function$Type<(any), (any)>): $MapCodec<(E)>
public static "compoundList"<K, V>(arg0: $Codec$Type<(K)>, arg1: $Codec$Type<(V)>): $Codec<($List<($Pair<(K), (V)>)>)>
public static "either"<F, S>(arg0: $Codec$Type<(F)>, arg1: $Codec$Type<(S)>): $Codec<($Either<(F), (S)>)>
public static "mapPair"<F, S>(arg0: $MapCodec$Type<(F)>, arg1: $MapCodec$Type<(S)>): $MapCodec<($Pair<(F), (S)>)>
public static "mapEither"<F, S>(arg0: $MapCodec$Type<(F)>, arg1: $MapCodec$Type<(S)>): $MapCodec<($Either<(F), (S)>)>
public "dispatchStable"<E>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(E)>
public "comapFlatMap"<S>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(S)>
public static "unboundedMap"<K, V>(arg0: $Codec$Type<(K)>, arg1: $Codec$Type<(V)>): $UnboundedMapCodec<(K), (V)>
public "flatComapMap"<S>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(S)>
public static "simpleMap"<K, V>(arg0: $Codec$Type<(K)>, arg1: $Codec$Type<(V)>, arg2: $Keyable$Type): $SimpleMapCodec<(K), (V)>
public static "doubleRange"(arg0: double, arg1: double): $Codec<(double)>
public static "floatRange"(arg0: float, arg1: float): $Codec<(float)>
public static "intRange"(arg0: integer, arg1: integer): $Codec<(integer)>
public "listOf"(): $Codec<($List<($CoinsInChestsModifier)>)>
public "stable"(): $Codec<($CoinsInChestsModifier)>
public static "empty"<A>(): $MapEncoder<($CoinsInChestsModifier)>
public static "error"<A>(arg0: string): $Encoder<($CoinsInChestsModifier)>
public "flatComap"<B>(arg0: $Function$Type<(any), (any)>): $Encoder<(B)>
public "comap"<B>(arg0: $Function$Type<(any), (any)>): $Encoder<(B)>
public "encodeStart"<T>(arg0: $DynamicOps$Type<(T)>, arg1: $CoinsInChestsModifier$Type): $DataResult<(T)>
public "decode"<T>(arg0: $Dynamic$Type<(T)>): $DataResult<($Pair<($CoinsInChestsModifier), (T)>)>
public "map"<B>(arg0: $Function$Type<(any), (any)>): $Decoder<(B)>
public "flatMap"<B>(arg0: $Function$Type<(any), (any)>): $Decoder<(B)>
public "parse"<T>(arg0: $Dynamic$Type<(T)>): $DataResult<($CoinsInChestsModifier)>
public "parse"<T>(arg0: $DynamicOps$Type<(T)>, arg1: T): $DataResult<($CoinsInChestsModifier)>
public "boxed"(): $Decoder$Boxed<($CoinsInChestsModifier)>
public "simple"(): $Decoder$Simple<($CoinsInChestsModifier)>
public static "ofBoxed"<A>(arg0: $Decoder$Boxed$Type<(any)>): $Decoder<($CoinsInChestsModifier)>
public static "ofTerminal"<A>(arg0: $Decoder$Terminal$Type<(any)>): $Decoder<($CoinsInChestsModifier)>
public static "ofSimple"<A>(arg0: $Decoder$Simple$Type<(any)>): $Decoder<($CoinsInChestsModifier)>
public "terminal"(): $Decoder$Terminal<($CoinsInChestsModifier)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinsInChestsModifier$Serializer$Type = ($CoinsInChestsModifier$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinsInChestsModifier$Serializer_ = $CoinsInChestsModifier$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/curios/client/$LCCuriosClient" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCCuriosClient {

constructor()

public static "registerRenderLayers"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCCuriosClient$Type = ($LCCuriosClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCCuriosClient_ = $LCCuriosClient$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/modifier/$SimpleLootModifier" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ILootModifier, $ILootModifier$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/modifier/$ILootModifier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"

export class $SimpleLootModifier implements $ILootModifier {

constructor()

public "tryModifyLoot"(arg0: $RandomSource$Type, arg1: $List$Type<($ItemStack$Type)>): boolean
public static "randomCheck"(arg0: $RandomSource$Type, arg1: double): boolean
public static "replaceRandomItems"(arg0: $RandomSource$Type, arg1: $List$Type<($ItemStack$Type)>, arg2: double, arg3: $Item$Type, arg4: $ItemLike$Type): void
public static "randomCount"(arg0: $RandomSource$Type, arg1: double, arg2: integer): integer
public static "replaceItem"(arg0: $ItemStack$Type, arg1: $ItemLike$Type): $ItemStack
public static "replaceItems"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Item$Type, arg2: $ItemLike$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleLootModifier$Type = ($SimpleLootModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleLootModifier_ = $SimpleLootModifier$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderDataArmor" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"
import {$ItemTraderData, $ItemTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderData"

export class $ItemTraderDataArmor extends $ItemTraderData {
static readonly "TYPE": $TraderType<($ItemTraderDataArmor)>
static readonly "ALLOWED_UPGRADES": $List<($UpgradeType)>
static readonly "DEFAULT_STACK_LIMIT": integer
readonly "ignoreSides": $ImmutableList<($Direction)>
static readonly "GLOBAL_TRADE_LIMIT": integer
readonly "type": $TraderType<(any)>
readonly "statTracker": $StatTracker

constructor(arg0: $Level$Type, arg1: $BlockPos$Type)

public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTraderDataArmor$Type = ($ItemTraderDataArmor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTraderDataArmor_ = $ItemTraderDataArmor$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeAllyPermissionNotification" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ChangeAllyPermissionNotification extends $Notification {
static readonly "TYPE": $NotificationType<($ChangeAllyPermissionNotification)>

constructor(arg0: $PlayerReference$Type, arg1: string, arg2: integer, arg3: integer)

public "getMessage"(): $MutableComponent
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeAllyPermissionNotification$Type = ($ChangeAllyPermissionNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeAllyPermissionNotification_ = $ChangeAllyPermissionNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/util/$TagUtil" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TagUtil {

constructor()

public static "saveBlockPos"(arg0: $BlockPos$Type): $CompoundTag
public static "loadBlockPos"(arg0: $CompoundTag$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TagUtil$Type = ($TagUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TagUtil_ = $TagUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/team/$SPacketRemoveClientTeam" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketRemoveClientTeam extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketRemoveClientTeam)>

constructor(arg0: long)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketRemoveClientTeam$Type = ($SPacketRemoveClientTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketRemoveClientTeam_ = $SPacketRemoveClientTeam$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/tags/$LCPoiTagProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$PoiTypeTagsProvider, $PoiTypeTagsProvider$Type} from "packages/net/minecraft/data/tags/$PoiTypeTagsProvider"

export class $LCPoiTagProvider extends $PoiTypeTagsProvider {

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg2: $ExistingFileHelper$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCPoiTagProvider$Type = ($LCPoiTagProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCPoiTagProvider_ = $LCPoiTagProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$ATMIconData" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ATMExchangeButton, $ATMExchangeButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/atm/$ATMExchangeButton"

export class $ATMIconData {


public "save"(): $JsonObject
public "render"(arg0: $ATMExchangeButton$Type, arg1: $EasyGuiGraphics$Type, arg2: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMIconData$Type = ($ATMIconData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMIconData_ = $ATMIconData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/condition/$LCCraftingConditions" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCCraftingConditions {

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCCraftingConditions$Type = ($LCCraftingConditions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCCraftingConditions_ = $LCCraftingConditions$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$MoneyValueOption" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $MoneyValueOption extends $ConfigOption<($MoneyValue)> {
static readonly "bonusComment": string


public static "create"(arg0: $NonNullSupplier$Type<($MoneyValue$Type)>, arg1: $Predicate$Type<($MoneyValue$Type)>): $MoneyValueOption
public static "create"(arg0: $NonNullSupplier$Type<($MoneyValue$Type)>): $MoneyValueOption
public static "createParser"(arg0: $Predicate$Type<($MoneyValue$Type)>): $ConfigParser<($MoneyValue)>
public static "createNonEmpty"(arg0: $NonNullSupplier$Type<($MoneyValue$Type)>): $MoneyValueOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyValueOption$Type = ($MoneyValueOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyValueOption_ = $MoneyValueOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/builtin/$CoinDisplay" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$NonNullFunction, $NonNullFunction$Type} from "packages/net/minecraftforge/common/util/$NonNullFunction"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ValueDisplaySerializer, $ValueDisplaySerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplaySerializer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ValueDisplayData, $ValueDisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplayData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CoinValue, $CoinValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValue"
import {$CoinDisplay$Builder, $CoinDisplay$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/builtin/$CoinDisplay$Builder"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $CoinDisplay extends $ValueDisplayData {
static readonly "TYPE": $ResourceLocation
static readonly "SERIALIZER": $ValueDisplaySerializer


public static "builder"(): $CoinDisplay$Builder
public static "easyDefine"(): $CoinDisplay
public static "easyDefine"(arg0: $NonNullFunction$Type<($Item$Type), ($Component$Type)>, arg1: $NonNullFunction$Type<($Item$Type), ($Component$Type)>): $CoinDisplay
public "getSerializer"(): $ValueDisplaySerializer
public "formatCoinTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "formatValue"(arg0: $CoinValue$Type, arg1: $MutableComponent$Type): $MutableComponent
get "serializer"(): $ValueDisplaySerializer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinDisplay$Type = ($CoinDisplay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinDisplay_ = $CoinDisplay$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/trader/$CPacketOpenStorage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketOpenStorage extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketOpenStorage)>

constructor(arg0: long)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketOpenStorage$Type = ($CPacketOpenStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketOpenStorage_ = $CPacketOpenStorage$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$ExchangeUpgradeTab" {
import {$CoinChestUpgradeData, $CoinChestUpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgradeData"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$CoinChestTab$Upgrade, $CoinChestTab$Upgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$CoinChestTab$Upgrade"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $ExchangeUpgradeTab extends $CoinChestTab$Upgrade {

constructor(arg0: $CoinChestUpgradeData$Type, arg1: any)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "coinSlotsVisible"(): boolean
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExchangeUpgradeTab$Type = ($ExchangeUpgradeTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExchangeUpgradeTab_ = $ExchangeUpgradeTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/$LCConfig$Common" {
import {$ItemOption, $ItemOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$ItemOption"
import {$ConfigFile$LoadPhase, $ConfigFile$LoadPhase$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile$LoadPhase"
import {$ConfigFile, $ConfigFile$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile"
import {$VillagerTradeModsOption, $VillagerTradeModsOption$Type} from "packages/io/github/lightman314/lightmanscurrency/common/config/$VillagerTradeModsOption"
import {$BooleanOption, $BooleanOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$BooleanOption"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$IntOption, $IntOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$IntOption"
import {$StringListOption, $StringListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$StringListOption"
import {$ConfiguredTradeModOption, $ConfiguredTradeModOption$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/configured/$ConfiguredTradeModOption"
import {$DoubleOption, $DoubleOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$DoubleOption"
import {$VillagerTradeMod, $VillagerTradeMod$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMod"

export class $LCConfig$Common extends $ConfigFile {
readonly "debugLevel": $IntOption
readonly "canCraftNetworkTraders": $BooleanOption
readonly "canCraftTraderInterfaces": $BooleanOption
readonly "canCraftAuctionStands": $BooleanOption
readonly "canCraftCoinChest": $BooleanOption
readonly "canCraftCoinChestUpgradeExchange": $BooleanOption
readonly "canCraftCoinChestUpgradeMagnet": $BooleanOption
readonly "canCraftCoinChestUpgradeSecurity": $BooleanOption
readonly "canCraftTaxBlock": $BooleanOption
readonly "addCustomWanderingTrades": $BooleanOption
readonly "addBankerVillager": $BooleanOption
readonly "addCashierVillager": $BooleanOption
readonly "changeVanillaTrades": $BooleanOption
readonly "changeModdedTrades": $BooleanOption
readonly "changeWanderingTrades": $BooleanOption
readonly "defaultEmeraldReplacementMod": $ConfiguredTradeModOption
readonly "professionEmeraldReplacementOverrides": $VillagerTradeModsOption
readonly "lootItem1": $ItemOption
readonly "lootItem2": $ItemOption
readonly "lootItem3": $ItemOption
readonly "lootItem4": $ItemOption
readonly "lootItem5": $ItemOption
readonly "lootItem6": $ItemOption
readonly "enableEntityDrops": $BooleanOption
readonly "allowSpawnerEntityDrops": $BooleanOption
readonly "allowFakePlayerCoinDrops": $BooleanOption
readonly "entityDropsT1": $StringListOption
readonly "entityDropsT2": $StringListOption
readonly "entityDropsT3": $StringListOption
readonly "entityDropsT4": $StringListOption
readonly "entityDropsT5": $StringListOption
readonly "entityDropsT6": $StringListOption
readonly "bossEntityDropsT1": $StringListOption
readonly "bossEntityDropsT2": $StringListOption
readonly "bossEntityDropsT3": $StringListOption
readonly "bossEntityDropsT4": $StringListOption
readonly "bossEntityDropsT5": $StringListOption
readonly "bossEntityDropsT6": $StringListOption
readonly "enableChestLoot": $BooleanOption
readonly "chestDropsT1": $StringListOption
readonly "chestDropsT2": $StringListOption
readonly "chestDropsT3": $StringListOption
readonly "chestDropsT4": $StringListOption
readonly "chestDropsT5": $StringListOption
readonly "chestDropsT6": $StringListOption
readonly "chocolateEventCoins": $BooleanOption
readonly "chocolateEventCoinLootDrops": $BooleanOption
readonly "chocolateCoinDropRate": $DoubleOption
readonly "eventAdvancementRewards": $BooleanOption
readonly "loadPhase": $ConfigFile$LoadPhase


public "getVillagerMod"(arg0: string): $Supplier<($VillagerTradeMod)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCConfig$Common$Type = ($LCConfig$Common);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCConfig$Common_ = $LCConfig$Common$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/capability/$CurrencyCapabilities" {
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$IEventUnlocks, $IEventUnlocks$Type} from "packages/io/github/lightman314/lightmanscurrency/common/capability/event_unlocks/$IEventUnlocks"
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"
import {$IWalletHandler, $IWalletHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$IWalletHandler"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $CurrencyCapabilities {
static readonly "WALLET": $Capability<($IWalletHandler)>
static readonly "MONEY_HANDLER": $Capability<($IMoneyHandler)>
static readonly "MONEY_VIEWER": $Capability<($IMoneyViewer)>
static readonly "EVENT_TRACKER": $Capability<($IEventUnlocks)>
static readonly "ID_WALLET": $ResourceLocation
static readonly "ID_MONEY_HANDLER": $ResourceLocation
static readonly "ID_MONEY_VIEW": $ResourceLocation
static readonly "ID_EVENT_TRACKER": $ResourceLocation

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurrencyCapabilities$Type = ($CurrencyCapabilities);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurrencyCapabilities_ = $CurrencyCapabilities$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/$MoneyAPI" {
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$CurrencyType, $CurrencyType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$CurrencyType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerMoneyHolder, $PlayerMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$PlayerMoneyHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $MoneyAPI {
static readonly "MODID": string
static readonly "API": $MoneyAPI

constructor()

/**
 * 
 * @deprecated
 */
public static "valueOfContainer"(arg0: $Container$Type): $MoneyView
/**
 * 
 * @deprecated
 */
public static "valueOfContainer"(arg0: $List$Type<($ItemStack$Type)>): $MoneyView
/**
 * 
 * @deprecated
 */
public static "canPlayerAfford"(arg0: $Player$Type, arg1: $MoneyValue$Type): boolean
/**
 * 
 * @deprecated
 */
public static "giveMoneyToPlayer"(arg0: $Player$Type, arg1: $MoneyValue$Type): void
/**
 * 
 * @deprecated
 */
public static "getCurrencyType"(arg0: $ResourceLocation$Type): $CurrencyType
/**
 * 
 * @deprecated
 */
public static "takeMoneyFromContainer"(arg0: $Container$Type, arg1: $Consumer$Type<($ItemStack$Type)>, arg2: $MoneyValue$Type): boolean
/**
 * 
 * @deprecated
 */
public static "takeMoneyFromContainer"(arg0: $Container$Type, arg1: $Player$Type, arg2: $MoneyValue$Type): boolean
/**
 * 
 * @deprecated
 */
public static "registerCurrencyType"(arg0: $CurrencyType$Type): void
/**
 * 
 * @deprecated
 */
public static "getPlayersMoneyHolder"(arg0: $Player$Type): $PlayerMoneyHolder
/**
 * 
 * @deprecated
 */
public static "getPlayersAvailableFunds"(arg0: $Player$Type): $MoneyView
/**
 * 
 * @deprecated
 */
public static "addMoneyToContainer"(arg0: $Container$Type, arg1: $Player$Type, arg2: $MoneyValue$Type): boolean
/**
 * 
 * @deprecated
 */
public static "addMoneyToContainer"(arg0: $Container$Type, arg1: $Consumer$Type<($ItemStack$Type)>, arg2: $MoneyValue$Type): boolean
/**
 * 
 * @deprecated
 */
public static "getAllCurrencyTypes"(): $List<($CurrencyType)>
/**
 * 
 * @deprecated
 */
public static "takeMoneyFromPlayer"(arg0: $Player$Type, arg1: $MoneyValue$Type): boolean
/**
 * 
 * @deprecated
 */
public static "canAddMoneyToContainer"(arg0: $Container$Type, arg1: $MoneyValue$Type): boolean
public "GetContainersMoneyHandler"(arg0: $Container$Type, arg1: $Consumer$Type<($ItemStack$Type)>): $IMoneyHandler
public "GetContainersMoneyHandler"(arg0: $Container$Type, arg1: $Player$Type): $IMoneyHandler
public "AllCurrencyTypes"(): $List<($CurrencyType)>
public "GetRegisteredCurrencyType"(arg0: $ResourceLocation$Type): $CurrencyType
public "GetATMMoneyHandler"(arg0: $Player$Type, arg1: $Container$Type): $IMoneyHandler
public "GetPlayersMoneyHandler"(arg0: $Player$Type): $IMoneyHolder
public "RegisterCurrencyType"(arg0: $CurrencyType$Type): void
get "allCurrencyTypes"(): $List<($CurrencyType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyAPI$Type = ($MoneyAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyAPI_ = $MoneyAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyViewer" {
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"

export class $MoneyViewer implements $IMoneyViewer {

constructor()

public "flagAsKnown"(arg0: any): void
public "forgetContext"(arg0: any): void
public "hasStoredMoneyChanged"(arg0: any): boolean
public "getStoredMoney"(): $MoneyView
get "storedMoney"(): $MoneyView
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyViewer$Type = ($MoneyViewer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyViewer_ = $MoneyViewer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$BlockEntityUtil" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BlockEntityUtil {

constructor()

public static "requestUpdatePacket"(arg0: $Level$Type, arg1: $BlockPos$Type): void
public static "requestUpdatePacket"(arg0: $BlockEntity$Type): void
public static "sendUpdatePacket"(arg0: $BlockEntity$Type): void
public static "sendUpdatePacket"(arg0: $BlockEntity$Type, arg1: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockEntityUtil$Type = ($BlockEntityUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockEntityUtil_ = $BlockEntityUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu$TraderMenuBlockSource" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$TraderMenu, $TraderMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"

export class $TraderMenu$TraderMenuBlockSource extends $TraderMenu {
static readonly "SLOT_OFFSET": integer
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $BlockPos$Type, arg3: $MenuValidator$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderMenu$TraderMenuBlockSource$Type = ($TraderMenu$TraderMenuBlockSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderMenu$TraderMenuBlockSource_ = $TraderMenu$TraderMenuBlockSource$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$TallRotatableBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ITallBlock, $ITallBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$ITallBlock"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$RotatableBlock, $RotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $TallRotatableBlock extends $RotatableBlock implements $ITallBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getIsBottom"(arg0: $BlockState$Type): boolean
public "isReplaceable"(arg0: $Level$Type, arg1: $BlockPos$Type): boolean
public "getIsTop"(arg0: $BlockState$Type): boolean
public "getOtherHeight"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockPos
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TallRotatableBlock$Type = ($TallRotatableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TallRotatableBlock_ = $TallRotatableBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/$CommandBalTop" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CommandBalTop {
static readonly "SORTER": $Comparator<($IBankAccount)>
static readonly "ENTRIES_PER_PAGE": integer

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandBalTop$Type = ($CommandBalTop);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandBalTop_ = $CommandBalTop$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/colors/$TicketColor" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"

export class $TicketColor implements $ItemColor {

constructor()

public "getColor"(arg0: $ItemStack$Type, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketColor$Type = ($TicketColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketColor_ = $TicketColor$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/$IntegrationUtil" {
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $IntegrationUtil {

constructor()

public static "SafeRunIfLoaded"(arg0: string, arg1: $Runnable$Type, arg2: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntegrationUtil$Type = ($IntegrationUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntegrationUtil_ = $IntegrationUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/$EditableCoinEntry" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CoinEntry, $CoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$CoinEntry"

export class $EditableCoinEntry {
 "coin": $Item
 "exchangeRate": integer
 "sideChainParent": $Item

constructor(arg0: $CoinEntry$Type)
constructor(arg0: $Item$Type, arg1: integer, arg2: $Item$Type)

public "copy"(): $EditableCoinEntry
public "changeSideChainParent"(arg0: $Item$Type): void
public "swapCoinsWith"(arg0: $EditableCoinEntry$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditableCoinEntry$Type = ($EditableCoinEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditableCoinEntry_ = $EditableCoinEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/loot/$LootTableProviderTemplate" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LootTable$Builder, $LootTable$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable$Builder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LootTableSubProvider, $LootTableSubProvider$Type} from "packages/net/minecraft/data/loot/$LootTableSubProvider"

export class $LootTableProviderTemplate implements $LootTableSubProvider {

constructor()

public "generate"(arg0: $BiConsumer$Type<($ResourceLocation$Type), ($LootTable$Builder$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootTableProviderTemplate$Type = ($LootTableProviderTemplate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootTableProviderTemplate_ = $LootTableProviderTemplate$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $Sprite {
readonly "image": $ResourceLocation
readonly "u": integer
readonly "v": integer
readonly "width": integer
readonly "height": integer
readonly "hoverOffsetU": integer
readonly "hoverOffsetV": integer


public static "SimpleSprite"(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): $Sprite
public static "LockedSprite"(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): $Sprite
public static "SimpleSpriteH"(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): $Sprite
public "getU"(arg0: boolean): integer
public "getV"(arg0: boolean): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Sprite$Type = ($Sprite);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Sprite_ = $Sprite$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$TaxEntryCategory" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$NotificationCategoryType, $NotificationCategoryType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategoryType"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $TaxEntryCategory extends $NotificationCategory {
static readonly "TYPE": $NotificationCategoryType<($TaxEntryCategory)>
static readonly "GENERAL_TYPE": $NotificationCategoryType<(any)>
static readonly "GENERAL": $NotificationCategory

constructor(arg0: $CompoundTag$Type)
constructor(arg0: $MutableComponent$Type, arg1: long)

public "getName"(): $MutableComponent
public "matches"(arg0: $NotificationCategory$Type): boolean
public "getEntryName"(): $MutableComponent
public "getIcon"(): $IconData
get "name"(): $MutableComponent
get "entryName"(): $MutableComponent
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxEntryCategory$Type = ($TaxEntryCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxEntryCategory_ = $TaxEntryCategory$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/paygate/$PaygateTraderData" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TradeResult, $TradeResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TraderScreen, $TraderScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderScreen"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PaygateTradeData, $PaygateTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/paygate/tradedata/$PaygateTradeData"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$TraderStorageScreen, $TraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderStorageScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"

export class $PaygateTraderData extends $TraderData {
static readonly "TYPE": $TraderType<($PaygateTraderData)>
static readonly "DURATION_MIN": integer
static readonly "GLOBAL_TRADE_LIMIT": integer
readonly "type": $TraderType<(any)>
readonly "statTracker": $StatTracker

constructor(arg0: $Level$Type, arg1: $BlockPos$Type)

public "isActive"(): boolean
public "onScreenInit"(arg0: $TraderScreen$Type, arg1: $Consumer$Type<(any)>): void
public "getIcon"(): $IconData
public "getStoredTicketStubs"(): integer
public "markTicketStubsDirty"(): void
public "canShowOnTerminal"(): boolean
public "getTradeData"(): $List<($PaygateTradeData)>
public "canEditTradeCount"(): boolean
public "getTradeStock"(arg0: integer): integer
public "getMaxTradeCount"(): integer
public "getTradeCount"(): integer
public "canMakePersistent"(): boolean
public "getTrade"(arg0: integer): $PaygateTradeData
public "ExecuteTrade"(arg0: $TradeContext$Type, arg1: integer): $TradeResult
public "removeTrade"(arg0: $Player$Type): void
public "initStorageTabs"(arg0: $ITraderStorageMenu$Type): void
public "addTrade"(arg0: $Player$Type): void
public "onStorageScreenInit"(arg0: $TraderStorageScreen$Type, arg1: $Consumer$Type<(any)>): void
public "addTicketStub"(arg0: $ItemStack$Type): void
public "overrideTradeCount"(arg0: integer): void
public static "getMaxDuration"(): integer
public "collectTicketStubs"(arg0: $Player$Type): void
public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
get "active"(): boolean
get "icon"(): $IconData
get "storedTicketStubs"(): integer
get "tradeData"(): $List<($PaygateTradeData)>
get "maxTradeCount"(): integer
get "tradeCount"(): integer
get "maxDuration"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaygateTraderData$Type = ($PaygateTraderData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaygateTraderData_ = $PaygateTraderData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/colors/$SusBlockColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $SusBlockColor implements $BlockColor {

constructor()

public "getColor"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SusBlockColor$Type = ($SusBlockColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SusBlockColor_ = $SusBlockColor$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/providers/$EasyMenuProvider" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export interface $EasyMenuProvider extends $MenuProvider {

 "getDisplayName"(): $Component
 "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu

(): $Component
}

export namespace $EasyMenuProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyMenuProvider$Type = ($EasyMenuProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyMenuProvider_ = $EasyMenuProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/text/$MultiLineTextEntry" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $MultiLineTextEntry {

constructor(arg0: string)

public "get"(...arg0: (any)[]): $List<($Component)>
public "getKey"(arg0: integer): string
public static "message"(arg0: string, arg1: string): $MultiLineTextEntry
public static "tooltip"(arg0: string, arg1: string): $MultiLineTextEntry
public "tooltip"(arg0: $List$Type<($Component$Type)>, ...arg1: (any)[]): void
public "asSupplier"(...arg0: (any)[]): $NonNullSupplier<($List<($Component)>)>
public "getWithStyle"(arg0: $Consumer$Type<($MutableComponent$Type)>, ...arg1: (any)[]): $List<($Component)>
public "getWithStyle"(arg0: $ChatFormatting$Type, ...arg1: (any)[]): $List<($Component)>
public "asTooltip"(...arg0: (any)[]): $NonNullSupplier<($List<($Component)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiLineTextEntry$Type = ($MultiLineTextEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiLineTextEntry_ = $MultiLineTextEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"

export class $TradeEvent extends $Event {

constructor()

public "getContext"(): $TradeContext
public "isCancelable"(): boolean
public "getPlayerReference"(): $PlayerReference
public "getTradeIndex"(): integer
public "getTrader"(): $TraderData
public "getTrade"(): $TradeData
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "context"(): $TradeContext
get "cancelable"(): boolean
get "playerReference"(): $PlayerReference
get "tradeIndex"(): integer
get "trader"(): $TraderData
get "trade"(): $TradeData
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeEvent$Type = ($TradeEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeEvent_ = $TradeEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$ResourceListOption" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ListOption, $ListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ListOption"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ResourceListOption extends $ListOption<($ResourceLocation)> {


public static "create"(arg0: $NonNullSupplier$Type<($List$Type<($ResourceLocation$Type)>)>): $ResourceListOption
public static "create"(arg0: $List$Type<($ResourceLocation$Type)>): $ResourceListOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceListOption$Type = ($ResourceListOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceListOption_ = $ResourceListOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$AlertType" {
import {$UnaryOperator, $UnaryOperator$Type} from "packages/java/util/function/$UnaryOperator"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $AlertType {
static readonly "HELPFUL": $AlertType
static readonly "NEUTRAL": $AlertType
static readonly "WARN": $AlertType
static readonly "ERROR": $AlertType
readonly "priority": integer
readonly "color": integer
readonly "format": $UnaryOperator<($Style)>

constructor(arg0: integer, arg1: integer, arg2: $ChatFormatting$Type)
constructor(arg0: integer, arg1: integer, arg2: $UnaryOperator$Type<($Style$Type)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlertType$Type = ($AlertType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlertType_ = $AlertType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/trader/$CPacketOpenTrades" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketOpenTrades extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketOpenTrades)>

constructor(arg0: long)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketOpenTrades$Type = ($CPacketOpenTrades);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketOpenTrades_ = $CPacketOpenTrades$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/claiming/flan/$LCFlanIntegration" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCFlanIntegration {

constructor()

public static "setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCFlanIntegration$Type = ($LCFlanIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCFlanIntegration_ = $LCFlanIntegration$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITeam, $ITeam$Type} from "packages/io/github/lightman314/lightmanscurrency/api/teams/$ITeam"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $Team implements $ITeam {
static readonly "MAX_NAME_LENGTH": integer


public "getName"(): string
public static "load"(arg0: $CompoundTag$Type): $Team
public static "of"(arg0: long, arg1: $PlayerReference$Type, arg2: string): $Team
public "save"(): $CompoundTag
public "getMembers"(): $List<($PlayerReference)>
public "getOwner"(): $PlayerReference
public "changeName"(arg0: $Player$Type, arg1: string): void
public "getID"(): long
public "isClient"(): boolean
public "getAdmins"(): $List<($PlayerReference)>
public static "NextBankLimit"(arg0: integer): integer
public "HandleEditRequest"(arg0: $ServerPlayer$Type, arg1: $LazyPacketData$Type): void
public "changeOwner"(arg0: $Player$Type, arg1: string): void
public "getBankReference"(): $BankReference
public "createBankAccount"(arg0: $Player$Type): void
public "changeRemoveMember"(arg0: $Player$Type, arg1: string): void
public "getBankLimit"(): integer
public "changeAddAdmin"(arg0: $Player$Type, arg1: string): void
public "changeBankLimit"(arg0: $Player$Type, arg1: integer): void
public "changeAddMember"(arg0: $Player$Type, arg1: string): void
public "clearStats"(arg0: $Player$Type): void
public static "sorterFor"(arg0: $Player$Type): $Comparator<($ITeam)>
public "isMember"(arg0: $UUID$Type): boolean
public "isMember"(arg0: $Player$Type): boolean
public "markDirty"(): void
public "flagAsClient"(): $Team
public "getBankAccount"(): $IBankAccount
public "hasBankAccount"(): boolean
public "getStats"(): $StatTracker
public "isOwner"(arg0: $UUID$Type): boolean
public "isOwner"(arg0: $Player$Type): boolean
public "canAccessBankAccount"(arg0: $Player$Type): boolean
public "isAdmin"(arg0: $UUID$Type): boolean
public "isAdmin"(arg0: $Player$Type): boolean
public "getMemberCount"(): integer
public "getAllMembers"(): $List<($PlayerReference)>
public "getAdminsAndOwner"(): $List<($PlayerReference)>
public "isMember"(arg0: $PlayerReference$Type): boolean
public "isOwner"(arg0: $PlayerReference$Type): boolean
public "isAdmin"(arg0: $PlayerReference$Type): boolean
public "isServer"(): boolean
get "name"(): string
get "members"(): $List<($PlayerReference)>
get "owner"(): $PlayerReference
get "iD"(): long
get "client"(): boolean
get "admins"(): $List<($PlayerReference)>
get "bankReference"(): $BankReference
get "bankLimit"(): integer
get "bankAccount"(): $IBankAccount
get "stats"(): $StatTracker
get "memberCount"(): integer
get "allMembers"(): $List<($PlayerReference)>
get "adminsAndOwner"(): $List<($PlayerReference)>
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Team$Type = ($Team);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Team_ = $Team$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType" {
import {$StatType$Instance, $StatType$Instance$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType$Instance"
import {$StatKey, $StatKey$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $StatType<A, B> {

constructor()

public static "register"(arg0: $StatType$Type<(any), (any)>): void
public "create"(): $StatType$Instance<(A), (B)>
public "getID"(): $ResourceLocation
public static "getID"(arg0: $ResourceLocation$Type): $StatType<(any), (any)>
public "createKey"(arg0: string): $StatKey<(A), (B)>
public static "getTranslationKey"(arg0: string): string
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatType$Type<A, B> = ($StatType<(A), (B)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatType_<A, B> = $StatType$Type<(A), (B)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/notifications/$CPacketFlagNotificationsSeen" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketFlagNotificationsSeen extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketFlagNotificationsSeen)>

constructor(arg0: $NotificationCategory$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketFlagNotificationsSeen$Type = ($CPacketFlagNotificationsSeen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketFlagNotificationsSeen_ = $CPacketFlagNotificationsSeen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/logs/$TraderLogClientTab" {
import {$TraderLogTab, $TraderLogTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/logs/$TraderLogTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TraderLogClientTab extends $TraderStorageClientTab<($TraderLogTab)> {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $TraderLogTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "closeAction"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $MutableComponent
get "icon"(): $IconData
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderLogClientTab$Type = ($TraderLogClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderLogClientTab_ = $TraderLogClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/trader/common/$TraderInteractionTab" {
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderScreen, $TraderScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$TraderClientTab, $TraderClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/trader/$TraderClientTab"

export class $TraderInteractionTab extends $TraderClientTab {

constructor(arg0: $TraderScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderInteractionTab$Type = ($TraderInteractionTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderInteractionTab_ = $TraderInteractionTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket" {
import {$CustomPacket, $CustomPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket"

export class $ClientToServerPacket extends $CustomPacket {

constructor()

public "send"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientToServerPacket$Type = ($ClientToServerPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientToServerPacket_ = $ClientToServerPacket$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/$TraderSaveData" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$JsonArray, $JsonArray$Type} from "packages/com/google/gson/$JsonArray"

export class $TraderSaveData extends $SavedData {
static readonly "PERSISTENT_TRADER_FILENAME": string
static readonly "PERSISTENT_TRADER_SECTION": string
static readonly "PERSISTENT_AUCTION_SECTION": string

constructor(arg0: $CompoundTag$Type)
constructor()

public static "onPlayerLogin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "MarkTraderDirty"(arg0: $CompoundTag$Type): void
/**
 * 
 * @deprecated
 */
public static "RegisterOldTrader"(arg0: $TraderData$Type): long
public static "DeleteTrader"(arg0: long): void
public static "GetAllTraders"(arg0: boolean): $List<($TraderData)>
public static "GetTrader"(arg0: boolean, arg1: long): $TraderData
public static "GetTrader"(arg0: boolean, arg1: string): $TraderData
public static "RegisterTrader"(arg0: $TraderData$Type, arg1: $Player$Type): long
public "save"(arg0: $CompoundTag$Type): $CompoundTag
/**
 * 
 * @deprecated
 */
public static "CheckOldPersistentID"(arg0: string): long
public static "setPersistentTraderJson"(arg0: $JsonObject$Type): void
public static "setPersistentTraderSection"(arg0: string, arg1: $JsonArray$Type): void
/**
 * 
 * @deprecated
 */
public static "GiveOldPersistentTag"(arg0: string, arg1: $CompoundTag$Type): void
public static "getPersistentTraderJson"(arg0: string): $JsonArray
public static "getPersistentTraderJson"(): $JsonObject
public static "ReloadPersistentTraders"(): void
public static "GetAllTerminalTraders"(arg0: boolean): $List<($TraderData)>
public static "onTick"(arg0: $TickEvent$ServerTickEvent$Type): void
public static "GetAuctionHouse"(arg0: boolean): $TraderData
set "persistentTraderJson"(value: $JsonObject$Type)
get "persistentTraderJson"(): $JsonObject
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderSaveData$Type = ($TraderSaveData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderSaveData_ = $TraderSaveData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/world/$WorldPosition" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$WorldArea, $WorldArea$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/world/$WorldArea"

export class $WorldPosition {
static readonly "VOID": $WorldPosition


public "equals"(arg0: any): boolean
public static "load"(arg0: $CompoundTag$Type): $WorldPosition
public static "of"(arg0: $ResourceKey$Type<($Level$Type)>, arg1: $BlockPos$Type): $WorldPosition
public "save"(): $CompoundTag
public "isVoid"(): boolean
public "getDimension"(): $ResourceKey<($Level)>
public static "ofBE"(arg0: $BlockEntity$Type): $WorldPosition
public "sameDimension"(arg0: $Level$Type): boolean
public "sameDimension"(arg0: $WorldPosition$Type): boolean
public "getArea"(arg0: integer, arg1: integer, arg2: integer): $WorldArea
public static "ofLevel"(arg0: $Level$Type, arg1: $BlockPos$Type): $WorldPosition
public "getPos"(): $BlockPos
get "void"(): boolean
get "dimension"(): $ResourceKey<($Level)>
get "pos"(): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldPosition$Type = ($WorldPosition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldPosition_ = $WorldPosition$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamMemberEditTab" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$TeamTab, $TeamTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamTab"
import {$TeamManagerScreen, $TeamManagerScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$TeamManagerScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TeamMemberEditTab extends $TeamTab {

constructor(arg0: $TeamManagerScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "allowViewing"(arg0: $Player$Type, arg1: $Team$Type): boolean
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamMemberEditTab$Type = ($TeamMemberEditTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamMemberEditTab_ = $TeamMemberEditTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$TicketItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Color, $Color$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$Color"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $TicketItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Item$Properties$Type)

public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "CraftTicket"(arg0: $ItemStack$Type, arg1: $Item$Type): $ItemStack
public static "CreateTicket"(arg0: $Item$Type, arg1: long): $ItemStack
public static "CreateTicket"(arg0: $Item$Type, arg1: long, arg2: integer): $ItemStack
public static "CreateTicket"(arg0: $Item$Type, arg1: long, arg2: integer, arg3: integer): $ItemStack
public static "SetTicketColor"(arg0: $ItemStack$Type, arg1: $Color$Type): void
public static "SetTicketColor"(arg0: $ItemStack$Type, arg1: integer): void
public static "isPass"(arg0: $ItemStack$Type): boolean
public static "GetTicketID"(arg0: $ItemStack$Type): long
public static "isTicketOrPass"(arg0: $ItemStack$Type): boolean
public static "isMasterTicket"(arg0: $ItemStack$Type): boolean
public static "isTicket"(arg0: $ItemStack$Type): boolean
public static "GetTicketColor"(arg0: $ItemStack$Type): integer
public static "CreateExampleTicket"(arg0: $Item$Type, arg1: $Color$Type): $ItemStack
public static "GetDefaultTicketColor"(arg0: long): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketItem$Type = ($TicketItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketItem_ = $TicketItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $LazyPacketData {
static readonly "TYPE_NULL": byte
static readonly "TYPE_BOOLEAN": byte
static readonly "TYPE_INT": byte
static readonly "TYPE_LONG": byte
static readonly "TYPE_FLOAT": byte
static readonly "TYPE_DOUBLE": byte
static readonly "TYPE_STRING": byte
static readonly "TYPE_TEXT": byte
static readonly "TYPE_NBT": byte


public static "simpleFloat"(arg0: string, arg1: float): $LazyPacketData$Builder
public static "simpleDouble"(arg0: string, arg1: double): $LazyPacketData$Builder
public "getBoolean"(arg0: string, arg1: boolean): boolean
public "getBoolean"(arg0: string): boolean
public "getInt"(arg0: string, arg1: integer): integer
public "getInt"(arg0: string): integer
public "getLong"(arg0: string, arg1: long): long
public "getLong"(arg0: string): long
public "getFloat"(arg0: string): float
public "getFloat"(arg0: string, arg1: float): float
public "getDouble"(arg0: string, arg1: double): double
public "getDouble"(arg0: string): double
public static "decode"(arg0: $FriendlyByteBuf$Type): $LazyPacketData
public "encode"(arg0: $FriendlyByteBuf$Type): void
public static "builder"(): $LazyPacketData$Builder
public "contains"(arg0: string): boolean
public "contains"(arg0: string, arg1: byte): boolean
public "getString"(arg0: string): string
public "getString"(arg0: string, arg1: string): string
public "getText"(arg0: string, arg1: $Component$Type): $Component
public "getText"(arg0: string): $Component
public static "simpleMoneyValue"(arg0: string, arg1: $MoneyValue$Type): $LazyPacketData$Builder
public static "simpleBoolean"(arg0: string, arg1: boolean): $LazyPacketData$Builder
public static "simpleInt"(arg0: string, arg1: integer): $LazyPacketData$Builder
public static "simpleLong"(arg0: string, arg1: long): $LazyPacketData$Builder
public static "simpleFlag"(arg0: string): $LazyPacketData$Builder
public static "simpleTag"(arg0: string, arg1: $CompoundTag$Type): $LazyPacketData$Builder
public static "simpleText"(arg0: string, arg1: $Component$Type): $LazyPacketData$Builder
public static "simpleString"(arg0: string, arg1: string): $LazyPacketData$Builder
public "getMoneyValue"(arg0: string, arg1: $MoneyValue$Type): $MoneyValue
public "getMoneyValue"(arg0: string): $MoneyValue
public "copyToBuilder"(): $LazyPacketData$Builder
public "getResourceLocation"(arg0: string, arg1: $ResourceLocation$Type): $ResourceLocation
public "getResourceLocation"(arg0: string): $ResourceLocation
public "getNBT"(arg0: string, arg1: $CompoundTag$Type): $CompoundTag
public "getNBT"(arg0: string): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LazyPacketData$Type = ($LazyPacketData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LazyPacketData_ = $LazyPacketData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/base/$OwnershipTab" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"

export class $OwnershipTab extends $TraderInterfaceTab {
static readonly "TAB_INFO": integer
static readonly "TAB_STORAGE": integer
static readonly "TAB_TRADER_SELECT": integer
static readonly "TAB_TRADE_SELECT": integer
static readonly "TAB_OWNERSHIP": integer
readonly "menu": $TraderInterfaceMenu

constructor(arg0: $TraderInterfaceMenu$Type)

public "setOwner"(arg0: $Owner$Type): void
public "canOpen"(arg0: $Player$Type): boolean
public "handleMessage"(arg0: $LazyPacketData$Type): void
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "setPlayerOwner"(arg0: string): void
public "createClientTab"(arg0: $TraderInterfaceScreen$Type): $TraderInterfaceClientTab<(any)>
public "onTabClose"(): void
public "onTabOpen"(): void
set "owner"(value: $Owner$Type)
set "playerOwner"(value: string)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnershipTab$Type = ($OwnershipTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnershipTab_ = $OwnershipTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/$LootManager" {
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$EntityPoolLevel, $EntityPoolLevel$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/tiers/$EntityPoolLevel"
import {$ILootModifier, $ILootModifier$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/modifier/$ILootModifier"
import {$DroplistConfigGenerator$Chest, $DroplistConfigGenerator$Chest$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator$Chest"
import {$DroplistConfigGenerator$Entity, $DroplistConfigGenerator$Entity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator$Entity"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootContextParamSet, $LootContextParamSet$Type} from "packages/net/minecraft/world/level/storage/loot/parameters/$LootContextParamSet"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$StringListOption, $StringListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$StringListOption"
import {$ChestPoolLevel, $ChestPoolLevel$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/tiers/$ChestPoolLevel"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$LootTable, $LootTable$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $LootManager {
static readonly "ENTITY_PARAMS": $LootContextParamSet

constructor()

public static "init"(): void
public static "onEntityDeath"(arg0: $LivingDeathEvent$Type): void
public static "getLoot"(arg0: $ResourceLocation$Type, arg1: $LootContext$Type): $List<($ItemStack)>
public static "safelyGetLoot"(arg0: $LootTable$Type, arg1: $LootContext$Type): $List<($ItemStack)>
public static "GetChestPoolLevel"(arg0: string): $ChestPoolLevel
public static "GetEntityPoolLevel"(arg0: $EntityType$Type<(any)>): $EntityPoolLevel
public static "debugLootConfigs"(): void
public static "addLootModifier"(arg0: $ILootModifier$Type): void
public static "AddDefaultChestEntries"(arg0: $DroplistConfigGenerator$Chest$Type): void
public static "deserializeSpawnReason"(arg0: string, arg1: $MobSpawnType$Type): $MobSpawnType
public static "deserializeSpawnReason"(arg0: string): $MobSpawnType
public static "checkForEventReplacements"(arg0: $MinecraftServer$Type, arg1: $List$Type<($ItemStack$Type)>): void
public static "generateEntityContext"(arg0: $Entity$Type, arg1: $Player$Type): $LootContext
public static "ConfigContainsEntity"(arg0: $StringListOption$Type, arg1: $EntityType$Type<(any)>): boolean
public static "AddDefaultEntityEntries"(arg0: $DroplistConfigGenerator$Entity$Type): void
public static "registerDroplistListeners"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootManager$Type = ($LootManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootManager_ = $LootManager$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/claiming/flan/$LCFlanClaimHandler" {
import {$IClaimPurchaseHandler, $IClaimPurchaseHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/integration/claiming/$IClaimPurchaseHandler"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export class $LCFlanClaimHandler implements $IClaimPurchaseHandler {
static readonly "INSTANCE": $IClaimPurchaseHandler


public "canBuyForceload"(arg0: $ServerPlayer$Type): boolean
public "addBonusClaims"(arg0: $ServerPlayer$Type, arg1: integer): void
public "getCurrentBonusForceloadChunks"(arg0: $ServerPlayer$Type): integer
public "addBonusForceloadChunks"(arg0: $ServerPlayer$Type, arg1: integer): void
public "getCurrentBonusClaims"(arg0: $ServerPlayer$Type): integer
public "canBuyClaims"(arg0: $ServerPlayer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCFlanClaimHandler$Type = ($LCFlanClaimHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCFlanClaimHandler_ = $LCFlanClaimHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/proxy/$ClientProxy" {
import {$TickEvent$RenderTickEvent, $TickEvent$RenderTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$RenderTickEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$ClientPlayerTrade, $ClientPlayerTrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$ClientPlayerTrade"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$ItemTooltipEvent, $ItemTooltipEvent$Type} from "packages/net/minecraftforge/event/entity/player/$ItemTooltipEvent"
import {$NotificationData, $NotificationData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationData"
import {$CommonProxy, $CommonProxy$Type} from "packages/io/github/lightman314/lightmanscurrency/proxy/$CommonProxy"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"

export class $ClientProxy extends $CommonProxy {

constructor()

public "setupClient"(): void
public "getPlayerList"(arg0: boolean): $List<($GameProfile)>
public "isClient"(): boolean
public "updateTrader"(arg0: $CompoundTag$Type): void
public "removeTrader"(arg0: long): void
public "clearClientTraders"(): void
public "updateTaxEntries"(arg0: $CompoundTag$Type): void
public "openTeamManager"(): void
public "loadAdminPlayers"(arg0: $List$Type<($UUID$Type)>): void
public "safeGetDummyLevel"(): $Level
public "loadPlayerTrade"(arg0: $ClientPlayerTrade$Type): void
public "syncEventUnlocks"(arg0: $List$Type<(string)>): void
public "clearBankAccounts"(): void
public "updateTeam"(arg0: $CompoundTag$Type): void
public "removeTeam"(arg0: long): void
public "playCoinSound"(): void
public "removeTaxEntry"(arg0: long): void
public "createTeamResponse"(arg0: long): void
public "setTimeDesync"(arg0: long): void
public "getTimeDesync"(): long
public "updateBankAccount"(arg0: $UUID$Type, arg1: $CompoundTag$Type): void
public "sendClientMessage"(arg0: $Component$Type): void
public "onItemTooltip"(arg0: $ItemTooltipEvent$Type): void
public "clearTeams"(): void
public "openScreenOnRenderTick"(arg0: $TickEvent$RenderTickEvent$Type): void
public "receiveSelectedBankAccount"(arg0: $BankReference$Type): void
public "updateNotifications"(arg0: $NotificationData$Type): void
public "receiveNotification"(arg0: $Notification$Type): void
public "receiveEmergencyEjectionData"(arg0: $CompoundTag$Type): void
public "openNotificationScreen"(): void
get "client"(): boolean
set "timeDesync"(value: long)
get "timeDesync"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientProxy$Type = ($ClientProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientProxy_ = $ClientProxy$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/$LCResourcePacks$CustomResourcePack" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Pack, $Pack$Type} from "packages/net/minecraft/server/packs/repository/$Pack"

export class $LCResourcePacks$CustomResourcePack {

constructor(arg0: string, arg1: string, arg2: $Component$Type)

public "addToRepository"(arg0: $Consumer$Type<($Pack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCResourcePacks$CustomResourcePack$Type = ($LCResourcePacks$CustomResourcePack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCResourcePacks$CustomResourcePack_ = $LCResourcePacks$CustomResourcePack$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/notifications/$NotificationDisplayWidget" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ITooltipWidget, $ITooltipWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipWidget"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $NotificationDisplayWidget extends $EasyWidget implements $IScrollable, $ITooltipWidget {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "HEIGHT_PER_ROW": integer
 "colorIfUnseen": boolean
 "backgroundColor": integer
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $NonNullSupplier$Type<($List$Type<($Notification$Type)>)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $NonNullSupplier$Type<($List$Type<($Notification$Type)>)>)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "getTooltipText"(): $List<($Component)>
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "playDownSound"(arg0: $SoundManager$Type): void
public static "CalculateHeight"(arg0: integer): integer
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
public "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
public "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
get "tooltipText"(): $List<($Component)>
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationDisplayWidget$Type = ($NotificationDisplayWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationDisplayWidget_ = $NotificationDisplayWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IOwnerData, $IOwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$IOwnerData"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $OwnerData implements $IOwnerData {

constructor(arg0: $IClientTracker$Type, arg1: $Consumer$Type<($OwnerData$Type)>)

public "getName"(): $MutableComponent
public "load"(arg0: $CompoundTag$Type): void
public "save"(): $CompoundTag
public "copyFrom"(arg0: $OwnerData$Type): void
/**
 * 
 * @deprecated
 */
public "hasPlayer"(): boolean
public "getPlayerForContext"(): $PlayerReference
public "isMember"(arg0: $Player$Type): boolean
public "isMember"(arg0: $PlayerReference$Type): boolean
/**
 * 
 * @deprecated
 */
public "getPlayer"(): $PlayerReference
/**
 * 
 * @deprecated
 */
public "hasTeam"(): boolean
public "flagAsClient"(): void
public "getValidOwner"(): $Owner
/**
 * 
 * @deprecated
 */
public "getOwnerName"(): string
/**
 * 
 * @deprecated
 */
public "getOwnerName"(arg0: boolean): string
public "hasOwner"(): boolean
/**
 * 
 * @deprecated
 */
public "SetCustomOwner"(arg0: string): void
/**
 * 
 * @deprecated
 */
public "SetCustomOwner"(arg0: $MutableComponent$Type): void
/**
 * 
 * @deprecated
 */
public "getTeam"(): $Team
/**
 * 
 * @deprecated
 */
public "SetOwner"(arg0: $PlayerReference$Type): void
/**
 * 
 * @deprecated
 */
public "SetOwner"(arg0: $Team$Type): void
/**
 * 
 * @deprecated
 */
public "SetOwner"(arg0: $Player$Type): void
public "SetOwner"(arg0: $Owner$Type): void
public "isAdmin"(arg0: $PlayerReference$Type): boolean
public "isAdmin"(arg0: $Player$Type): boolean
get "name"(): $MutableComponent
get "playerForContext"(): $PlayerReference
get "player"(): $PlayerReference
get "validOwner"(): $Owner
get "ownerName"(): string
get "team"(): $Team
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnerData$Type = ($OwnerData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnerData_ = $OwnerData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/data/$ItemWriteData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

/**
 * 
 * @deprecated
 */
export class $ItemWriteData {
readonly "isEmpty": boolean
readonly "itemName": $Component
readonly "count": integer

constructor(arg0: $CompoundTag$Type)
constructor(arg0: $ItemStack$Type, arg1: string)
constructor(arg0: $ItemStack$Type)

public "format"(): $Component
public "save"(): $CompoundTag
public static "getItemNames"(arg0: $ItemWriteData$Type, arg1: $ItemWriteData$Type): $Component
public static "getItemNames"(arg0: $List$Type<($ItemWriteData$Type)>): $Component
public "formatWith"(arg0: $Component$Type): $Component
public "formatWith"(arg0: $ItemWriteData$Type): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemWriteData$Type = ($ItemWriteData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemWriteData_ = $ItemWriteData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$TicketKioskBlock" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IItemTraderBlock, $IItemTraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IItemTraderBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TraderBlockTallRotatable, $TraderBlockTallRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockTallRotatable"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $TicketKioskBlock extends $TraderBlockTallRotatable implements $IItemTraderBlock {
static readonly "TRADECOUNT": integer
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "traderType"(): $BlockEntityType<(any)>
public "makeTrader"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getItemPositionData"(): $ItemPositionData
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "itemPositionData"(): $ItemPositionData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketKioskBlock$Type = ($TicketKioskBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketKioskBlock_ = $TicketKioskBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/client/generators/$ItemPositionProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$DataProvider, $DataProvider$Type} from "packages/net/minecraft/data/$DataProvider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"

export class $ItemPositionProvider implements $DataProvider {
static readonly "MO": float


public "run"(arg0: $CachedOutput$Type): $CompletableFuture<(void)>
public "getName"(): string
public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemPositionProvider$Type = ($ItemPositionProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemPositionProvider_ = $ItemPositionProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/builtin/$PotentialTeamOwner" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$PotentialOwner, $PotentialOwner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $PotentialTeamOwner extends $PotentialOwner {
static readonly "TEAM_PRIORITY": integer

constructor(arg0: long)

public "getIcon"(): $IconData
public "appendTooltip"(arg0: $List$Type<($Component$Type)>): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotentialTeamOwner$Type = ($PotentialTeamOwner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotentialTeamOwner_ = $PotentialTeamOwner$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/quark/$QuarkCustomWoodTypes" {
import {$WoodType, $WoodType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType"

export class $QuarkCustomWoodTypes {
static readonly "ANCIENT": $WoodType
static readonly "AZALEA": $WoodType
static readonly "BLOSSOM": $WoodType

constructor()

public static "setupWoodTypes"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkCustomWoodTypes$Type = ($QuarkCustomWoodTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkCustomWoodTypes_ = $QuarkCustomWoodTypes$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/modifier/$ILootModifier" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"

export interface $ILootModifier {

 "tryModifyLoot"(arg0: $RandomSource$Type, arg1: $List$Type<($ItemStack$Type)>): boolean

(arg0: $RandomSource$Type, arg1: $List$Type<($ItemStack$Type)>): boolean
}

export namespace $ILootModifier {
function replaceItem(arg0: $ItemStack$Type, arg1: $ItemLike$Type): $ItemStack
function replaceItems(arg0: $List$Type<($ItemStack$Type)>, arg1: $Item$Type, arg2: $ItemLike$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILootModifier$Type = ($ILootModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILootModifier_ = $ILootModifier$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/paygate/$PaygateTradeEditClientTab" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$IMouseListener, $IMouseListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$PaygateTradeEditTab, $PaygateTradeEditTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/paygate/$PaygateTradeEditTab"
import {$TradeButtonArea$InteractionConsumer, $TradeButtonArea$InteractionConsumer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$TradeButtonArea$InteractionConsumer"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $PaygateTradeEditClientTab extends $TraderStorageClientTab<($PaygateTradeEditTab)> implements $TradeButtonArea$InteractionConsumer, $IMouseListener {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $PaygateTradeEditTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "blockInventoryClosing"(): boolean
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $MutableComponent
public "onValueChanged"(arg0: $MoneyValue$Type): void
public "getTradeRuleTradeIndex"(): integer
public "tabButtonVisible"(): boolean
public "receiveSelfMessage"(arg0: $LazyPacketData$Type): void
public "onTradeButtonInputInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer): void
public "onTradeButtonInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer, arg4: integer): void
public "onTradeButtonOutputInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer): void
public "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
get "icon"(): $IconData
get "tooltip"(): $MutableComponent
get "tradeRuleTradeIndex"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaygateTradeEditClientTab$Type = ($PaygateTradeEditClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaygateTradeEditClientTab_ = $PaygateTradeEditClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$MathUtil" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Quaternionf, $Quaternionf$Type} from "packages/org/joml/$Quaternionf"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MathUtil {

constructor()

public static "getXP"(): $Vector3f
public static "WithinBounds"(arg0: integer, arg1: integer, arg2: integer): boolean
public static "WithinBounds"(arg0: $BlockPos$Type, arg1: $BlockPos$Type, arg2: $BlockPos$Type): boolean
public static "getZP"(): $Vector3f
public static "SafeDivide"(arg0: long, arg1: long, arg2: long): long
public static "clamp"(arg0: float, arg1: float, arg2: float): float
public static "clamp"(arg0: integer, arg1: integer, arg2: integer): integer
public static "clamp"(arg0: long, arg1: long, arg2: long): long
public static "clamp"(arg0: double, arg1: double, arg2: double): double
public static "DivideByAndRoundUp"(arg0: integer, arg1: integer): integer
public static "fromAxisAngleDegree"(arg0: $Vector3f$Type, arg1: float): $Quaternionf
public static "VectorMult"(arg0: $Vector3f$Type, arg1: float): $Vector3f
public static "getYP"(): $Vector3f
public static "VectorAdd"(...arg0: ($Vector3f$Type)[]): $Vector3f
get "xP"(): $Vector3f
get "zP"(): $Vector3f
get "yP"(): $Vector3f
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathUtil$Type = ($MathUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathUtil_ = $MathUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/biomesoplenty/$BOPCustomWoodTypes" {
import {$WoodType, $WoodType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType"

export class $BOPCustomWoodTypes {
static readonly "FIR": $WoodType
static readonly "REDWOOD": $WoodType
static readonly "MAHOGANY": $WoodType
static readonly "JACARANDA": $WoodType
static readonly "PALM": $WoodType
static readonly "WILLOW": $WoodType
static readonly "DEAD": $WoodType
static readonly "MAGIC": $WoodType
static readonly "UMBRAN": $WoodType
static readonly "HELLBARK": $WoodType

constructor()

public static "setupWoodTypes"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BOPCustomWoodTypes$Type = ($BOPCustomWoodTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BOPCustomWoodTypes_ = $BOPCustomWoodTypes$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$BookTraderBlockEntity" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Quaternionf, $Quaternionf$Type} from "packages/org/joml/$Quaternionf"
import {$ItemTraderBlockEntity, $ItemTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$ItemTraderBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BookTraderBlockEntity extends $ItemTraderBlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)
constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type, arg2: integer)

public "GetBookRenderPos"(arg0: integer): $Vector3f
public "GetBookRenderRot"(arg0: integer): $List<($Quaternionf)>
public "maxRenderIndex"(): integer
public "GetBookRenderScale"(arg0: integer): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookTraderBlockEntity$Type = ($BookTraderBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookTraderBlockEntity_ = $BookTraderBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/trader/$CPacketExecuteTrade" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketExecuteTrade extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketExecuteTrade)>

constructor(arg0: integer, arg1: integer)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketExecuteTrade$Type = ($CPacketExecuteTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketExecuteTrade_ = $CPacketExecuteTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$ItemsForMapTrade" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$ItemsForMapTrade$Serializer, $ItemsForMapTrade$Serializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$ItemsForMapTrade$Serializer"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$MapDecoration$Type, $MapDecoration$Type$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapDecoration$Type"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ItemsForMapTrade implements $VillagerTrades$ItemListing {
static readonly "TYPE": $ResourceLocation
static readonly "SERIALIZER": $ItemsForMapTrade$Serializer

constructor(arg0: $ItemStack$Type, arg1: $TagKey$Type<($Structure$Type)>, arg2: string, arg3: $MapDecoration$Type$Type, arg4: integer, arg5: integer)
constructor(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $TagKey$Type<($Structure$Type)>, arg3: string, arg4: $MapDecoration$Type$Type, arg5: integer, arg6: integer, arg7: float)

public "getOffer"(arg0: $Entity$Type, arg1: $RandomSource$Type): $MerchantOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemsForMapTrade$Type = ($ItemsForMapTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemsForMapTrade_ = $ItemsForMapTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator$Entity" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$EntityPoolLevel, $EntityPoolLevel$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/tiers/$EntityPoolLevel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$DroplistConfigGenerator, $DroplistConfigGenerator$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator"

export class $DroplistConfigGenerator$Entity extends $DroplistConfigGenerator {


public "forceAddTag"(arg0: $ResourceLocation$Type): void
public "forceAddTag"(arg0: $TagKey$Type<($EntityType$Type<(any)>)>): void
public "addTag"(arg0: string): void
public "getTier"(): $EntityPoolLevel
get "tier"(): $EntityPoolLevel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DroplistConfigGenerator$Entity$Type = ($DroplistConfigGenerator$Entity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DroplistConfigGenerator$Entity_ = $DroplistConfigGenerator$Entity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ConfigFile$LoadPhase, $ConfigFile$LoadPhase$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile$LoadPhase"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"
import {$PrintWriter, $PrintWriter$Type} from "packages/java/io/$PrintWriter"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ConfigFile {
readonly "loadPhase": $ConfigFile$LoadPhase


public static "writeComments"(arg0: $List$Type<(string)>, arg1: $Consumer$Type<(string)>): void
public "getFileName"(): string
public "isLoaded"(): boolean
public "reload"(): void
public "writeToFile"(): void
public static "cleanStartingWhitespace"(arg0: string): string
public "confirmSetup"(): void
public "shouldReload"(arg0: boolean): boolean
public static "reloadClientFiles"(): void
public static "getAvailableFiles"(): $Iterable<($ConfigFile)>
public "isServerOnly"(): boolean
public "getAllOptions"(): $Map<(string), ($ConfigOption<(any)>)>
public static "loadFiles"(arg0: boolean, arg1: $ConfigFile$LoadPhase$Type): void
public static "reloadServerFiles"(): void
public "onOptionChanged"(arg0: $ConfigOption$Type<(any)>): void
public "isClientOnly"(): boolean
public static "loadServerFiles"(arg0: $ConfigFile$LoadPhase$Type): void
public static "loadClientFiles"(arg0: $ConfigFile$LoadPhase$Type): void
public static "lineConsumer"(arg0: $PrintWriter$Type, arg1: integer): $Consumer<(string)>
public "addListener"(arg0: $Runnable$Type): void
get "fileName"(): string
get "loaded"(): boolean
get "availableFiles"(): $Iterable<($ConfigFile)>
get "serverOnly"(): boolean
get "allOptions"(): $Map<(string), ($ConfigOption<(any)>)>
get "clientOnly"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigFile$Type = ($ConfigFile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigFile_ = $ConfigFile$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$FreezerTraderBlockEntity" {
import {$IClientTicker, $IClientTicker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IClientTicker"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemTraderBlockEntity, $ItemTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$ItemTraderBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FreezerTraderBlockEntity extends $ItemTraderBlockEntity implements $IClientTicker {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)
constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type, arg2: integer)

public "clientTick"(): void
public "getDoorAngle"(arg0: float): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FreezerTraderBlockEntity$Type = ($FreezerTraderBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FreezerTraderBlockEntity_ = $FreezerTraderBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/builtin/$PlayerBankReference" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$BankReferenceType, $BankReferenceType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReferenceType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"

export class $PlayerBankReference extends $BankReference {
static readonly "TYPE": $BankReferenceType
readonly "playerID": $UUID


public "get"(): $IBankAccount
public static "of"(arg0: $UUID$Type): $BankReference
public static "of"(arg0: $PlayerReference$Type): $BankReference
public static "of"(arg0: $Player$Type): $BankReference
public "canPersist"(arg0: $Player$Type): boolean
public "allowedAccess"(arg0: $Player$Type): boolean
public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerBankReference$Type = ($PlayerBankReference);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerBankReference_ = $PlayerBankReference$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$SlotMachineBlock" {
import {$TraderBlockTallRotatable, $TraderBlockTallRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockTallRotatable"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $SlotMachineBlock extends $TraderBlockTallRotatable {
static readonly "LIGHT_MODEL_LOCATION": $ResourceLocation
static readonly "SHAPE_SOUTH": $VoxelShape
static readonly "SHAPE_NORTH": $VoxelShape
static readonly "SHAPE_EAST": $VoxelShape
static readonly "SHAPE_WEST": $VoxelShape
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "getLightModel"(): $ResourceLocation
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "lightModel"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineBlock$Type = ($SlotMachineBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineBlock_ = $SlotMachineBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blocks/$TraderInterfaceBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IOwnableBlock, $IOwnableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IOwnableBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IEasyEntityBlock, $IEasyEntityBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IEasyEntityBlock"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$TraderInterfaceBlockEntity, $TraderInterfaceBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity"
import {$RotatableBlock, $RotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $TraderInterfaceBlock extends $RotatableBlock implements $IEasyEntityBlock, $IOwnableBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "playerWillDestroy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "isSignalSource"(arg0: $BlockState$Type): boolean
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getAllowedTypes"(): $Collection<($BlockEntityType<(any)>)>
public "canBreak"(arg0: $Player$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getDropBlockItem"(arg0: $BlockState$Type, arg1: $TraderInterfaceBlockEntity$Type): $ItemStack
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "allowedTypes"(): $Collection<($BlockEntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderInterfaceBlock$Type = ($TraderInterfaceBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderInterfaceBlock_ = $TraderInterfaceBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/tickets/$TicketSaveData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"

export class $TicketSaveData extends $SavedData {


public static "peekNextID"(): long
public "save"(arg0: $CompoundTag$Type): $CompoundTag
public static "createNextID"(): long
public static "getConvertedID"(arg0: $UUID$Type): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketSaveData$Type = ($TicketSaveData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketSaveData_ = $TicketSaveData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/notifications/$NotificationTabButton" {
import {$NotificationData, $NotificationData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationData"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ITab, $ITab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/tab/$ITab"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$TabButton, $TabButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/tab/$TabButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"

export class $NotificationTabButton extends $TabButton {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "SIZE": integer
 "hideTooltip": boolean
readonly "tab": $ITab
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $Consumer$Type<($EasyButton$Type)>, arg1: $NonNullSupplier$Type<($NotificationData$Type)>, arg2: $NotificationCategory$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationTabButton$Type = ($NotificationTabButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationTabButton_ = $NotificationTabButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$CoinSlot" {
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$SimpleSlot, $SimpleSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$SimpleSlot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CoinSlot$ICoinSlotListener, $CoinSlot$ICoinSlotListener$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$CoinSlot$ICoinSlotListener"

export class $CoinSlot extends $SimpleSlot {
static readonly "EMPTY_COIN_SLOT": $ResourceLocation
 "active": boolean
 "locked": boolean
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer)
constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer, arg4: boolean)

public "addListener"(arg0: $CoinSlot$ICoinSlotListener$Type): $CoinSlot
public "mayPlace"(arg0: $ItemStack$Type): boolean
public "getNoItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
public "setChanged"(): void
get "noItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinSlot$Type = ($CoinSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinSlot_ = $CoinSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/proxy/$CommonProxy" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NotificationData, $NotificationData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationData"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$ClientPlayerTrade, $ClientPlayerTrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$ClientPlayerTrade"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"

export class $CommonProxy {

constructor()

public "setupClient"(): void
public "getPlayerList"(arg0: boolean): $List<($GameProfile)>
public "isClient"(): boolean
public "updateTrader"(arg0: $CompoundTag$Type): void
public "removeTrader"(arg0: long): void
public "clearClientTraders"(): void
public "updateTaxEntries"(arg0: $CompoundTag$Type): void
public "openTeamManager"(): void
public "loadAdminPlayers"(arg0: $List$Type<($UUID$Type)>): void
public "safeGetDummyLevel"(): $Level
public "loadPlayerTrade"(arg0: $ClientPlayerTrade$Type): void
public "syncEventUnlocks"(arg0: $List$Type<(string)>): void
public "clearBankAccounts"(): void
public "updateTeam"(arg0: $CompoundTag$Type): void
public "removeTeam"(arg0: long): void
public "playCoinSound"(): void
public "removeTaxEntry"(arg0: long): void
public "createTeamResponse"(arg0: long): void
public "setTimeDesync"(arg0: long): void
public "getTimeDesync"(): long
public "updateBankAccount"(arg0: $UUID$Type, arg1: $CompoundTag$Type): void
public "sendClientMessage"(arg0: $Component$Type): void
public "clearTeams"(): void
public "receiveSelectedBankAccount"(arg0: $BankReference$Type): void
public "updateNotifications"(arg0: $NotificationData$Type): void
public "receiveNotification"(arg0: $Notification$Type): void
public "receiveEmergencyEjectionData"(arg0: $CompoundTag$Type): void
public "openNotificationScreen"(): void
get "client"(): boolean
set "timeDesync"(value: long)
get "timeDesync"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonProxy$Type = ($CommonProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonProxy_ = $CommonProxy$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMod" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $VillagerTradeMod {

constructor()

public "modifyResult"(arg0: $Entity$Type, arg1: $ItemStack$Type): $ItemStack
public "modifyCost"(arg0: $Entity$Type, arg1: $ItemStack$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerTradeMod$Type = ($VillagerTradeMod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerTradeMod_ = $VillagerTradeMod$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/builtin/$CoinDisplay$Builder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CoinDisplay, $CoinDisplay$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/builtin/$CoinDisplay"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $CoinDisplay$Builder {


public "build"(): $CoinDisplay
public "defineFor"(arg0: $ItemLike$Type, arg1: $Component$Type, arg2: $Component$Type): $CoinDisplay$Builder
public "defineFor"(arg0: $RegistryObject$Type<(any)>, arg1: $Component$Type, arg2: $Component$Type): $CoinDisplay$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinDisplay$Builder$Type = ($CoinDisplay$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinDisplay$Builder_ = $CoinDisplay$Builder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValueParser" {
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$CommandSyntaxException, $CommandSyntaxException$Type} from "packages/com/mojang/brigadier/exceptions/$CommandSyntaxException"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$HolderLookup, $HolderLookup$Type} from "packages/net/minecraft/core/$HolderLookup"
import {$CommandExceptionType, $CommandExceptionType$Type} from "packages/com/mojang/brigadier/exceptions/$CommandExceptionType"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $MoneyValueParser {
readonly "prefix": string
static readonly "EXCEPTION_TYPE": $CommandExceptionType


public static "parse"(arg0: $StringReader$Type, arg1: boolean): $MoneyValue
public static "NoValueException"(arg0: $StringReader$Type): $CommandSyntaxException
public static "ParseConfigString"(arg0: string, arg1: $Supplier$Type<($MoneyValue$Type)>): $MoneyValue
public "listSuggestions"<S>(arg0: $CommandContext$Type<(S)>, arg1: $SuggestionsBuilder$Type, arg2: string, arg3: $HolderLookup$Type<($Item$Type)>): $CompletableFuture<($Suggestions)>
public static "writeParsable"(arg0: $MoneyValue$Type): string
public static "readStringUntil"(arg0: $StringReader$Type, ...arg1: (character)[]): string
public "addExamples"(arg0: $List$Type<(string)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyValueParser$Type = ($MoneyValueParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyValueParser_ = $MoneyValueParser$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$PriceTweakingTradeRule" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"

export class $PriceTweakingTradeRule extends $TradeRule {
readonly "type": $TradeRuleType<(any)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PriceTweakingTradeRule$Type = ($PriceTweakingTradeRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PriceTweakingTradeRule_ = $PriceTweakingTradeRule$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab" {
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"

export class $TraderInterfaceClientTab<T extends $TraderInterfaceTab> extends $EasyTab {
readonly "commonTab": T


public "getColor"(): integer
public "tabButtonVisible"(): boolean
public "receiveSelfMessage"(arg0: $CompoundTag$Type): void
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderInterfaceClientTab$Type<T> = ($TraderInterfaceClientTab<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderInterfaceClientTab_<T> = $TraderInterfaceClientTab$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$InteractionSlotData, $InteractionSlotData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$InteractionSlotData"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"
import {$StatKey, $StatKey$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatKey"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$TraderScreen, $TraderScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderScreen"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$WorldPosition, $WorldPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/world/$WorldPosition"
import {$ITaxCollector, $ITaxCollector$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxCollector"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$MoneyStorage, $MoneyStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$PermissionOption, $PermissionOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/permissions/$PermissionOption"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$TaxableReference, $TaxableReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxableReference"
import {$IUpgradeable, $IUpgradeable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$IUpgradeable"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$TraderCategory, $TraderCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$TraderCategory"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ITaxable, $ITaxable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxable"
import {$TradeResult, $TradeResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeResult"
import {$TradeEvent$TradeCostEvent, $TradeEvent$TradeCostEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$TradeCostEvent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$TradeEvent$PreTradeEvent, $TradeEvent$PreTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent"
import {$TraderStorageScreen, $TraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderStorageScreen"
import {$ITradeRuleHost, $ITradeRuleHost$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$ITradeRuleHost"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"

export class $TraderData implements $IClientTracker, $IDumpable, $IUpgradeable, $ITraderSource, $ITradeRuleHost, $ITaxable {
static readonly "GLOBAL_TRADE_LIMIT": integer
readonly "type": $TraderType<(any)>
readonly "statTracker": $StatTracker


public "getName"(): $MutableComponent
public "getReference"(): $TaxableReference
public "load"(arg0: $CompoundTag$Type): void
public "save"(): $CompoundTag
public "getOwner"(): $OwnerData
public "move"(arg0: $Level$Type, arg1: $BlockPos$Type): void
public "getID"(): long
public "getRules"(): $List<($TradeRule)>
public "getContents"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: boolean): $List<($ItemStack)>
public "setID"(arg0: long): void
public "getLevel"(): $ResourceKey<($Level)>
public "getNotifications"(): $List<($Notification)>
public "onScreenInit"(arg0: $TraderScreen$Type, arg1: $Consumer$Type<(any)>): void
public "getWorldPosition"(): $WorldPosition
public "isTrader"(): boolean
public "getCustomName"(): string
public "isClient"(): boolean
public "getSettingsTabs"(arg0: $TraderSettingsClientTab$Type): $List<($SettingsSubTab)>
public "getTraders"(): $List<($TraderData)>
public "isSingleTrader"(): boolean
public "getTerminalInfo"(arg0: $Player$Type): $List<($Component)>
public "pushNotification"(arg0: $NonNullSupplier$Type<($Notification$Type)>): void
public "getIcon"(): $IconData
public "hasPermission"(arg0: $Player$Type, arg1: string): boolean
public "hasPermission"(arg0: $PlayerReference$Type, arg1: string): boolean
public "getTitle"(): $MutableComponent
public "flagAsClient"(): void
public "setCreative"(arg0: $Player$Type, arg1: boolean): void
public "getPersistentID"(): string
public static "Deserialize"(arg0: boolean, arg1: $CompoundTag$Type): $TraderData
public static "Deserialize"(arg0: $JsonObject$Type): $TraderData
public "loadPersistentData"(arg0: $CompoundTag$Type): void
public "makePersistent"(arg0: long, arg1: string): void
public "showOnTerminal"(): boolean
public "shouldRemove"(arg0: $MinecraftServer$Type): boolean
public "allowMarkingDirty"(): $TraderData
public "savePersistentData"(): $CompoundTag
public "isCreative"(): boolean
public "getAllies"(): $List<($PlayerReference)>
public "getPermissionLevel"(arg0: $PlayerReference$Type, arg1: string): integer
public "getPermissionLevel"(arg0: $Player$Type, arg1: string): integer
public "canShowOnTerminal"(): boolean
public "getBankAccount"(): $IBankAccount
public "removeStoredMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "addStoredMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "payTaxesOn"(arg0: $MoneyValue$Type): $MoneyValue
public "hasCustomName"(): boolean
public "CollectStoredMoney"(arg0: $Player$Type): void
public "getLinkedToBank"(): boolean
public "getTradeData"(): $List<(any)>
public "canEditTradeCount"(): boolean
public "hasValidTrade"(): boolean
public "getTradeStock"(arg0: integer): integer
public "canLinkBankAccount"(): boolean
public "hasBankAccount"(): boolean
public "getMaxTradeCount"(): integer
public "getTradeCount"(): integer
public "getApplicableTaxes"(): $List<($ITaxCollector)>
public "anyTradeHasStock"(): boolean
public "setLinkedToBank"(arg0: $Player$Type, arg1: boolean): void
public "getPossibleTaxes"(): $List<($ITaxCollector)>
public "saveLevelData"(arg0: $CompoundTag$Type): void
public "PardonTaxEntry"(arg0: $TaxEntry$Type): void
public "saveToJson"(arg0: string, arg1: string): $JsonObject
public "markStatsDirty"(): void
public "canMakePersistent"(): boolean
public "markTradesDirty"(): void
public "userOpen"(arg0: $Player$Type): void
public "runPreTradeEvent"(arg0: $TradeData$Type, arg1: $TradeContext$Type): $TradeEvent$PreTradeEvent
public "runTradeCostEvent"(arg0: $TradeData$Type, arg1: $TradeContext$Type): $TradeEvent$TradeCostEvent
public "runPostTradeEvent"(arg0: $TradeData$Type, arg1: $TradeContext$Type, arg2: $MoneyValue$Type, arg3: $MoneyValue$Type): void
public "getUsers"(): $List<($Player)>
public "getUserCount"(): integer
public "getMenuDataWriter"(): $Consumer<($FriendlyByteBuf)>
public "canMoneyBeRelevant"(): boolean
public "incrementStat"<T>(arg0: $StatKey$Type<(any), (T)>, arg1: T): void
public "getTrade"(arg0: integer): $TradeData
public "isTrade"(): boolean
public "userClose"(arg0: $Player$Type): void
public "updateUserCount"(arg0: integer): void
public "indexOfTrade"(arg0: $TradeData$Type): integer
public "removeTrade"(arg0: $Player$Type): void
public "isMoneyRelevant"(): boolean
public "initStorageTabs"(arg0: $ITraderStorageMenu$Type): void
public "addTrade"(arg0: $Player$Type): void
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "getUpgrades"(): $Container
public "setCustomName"(arg0: $Player$Type, arg1: string): void
public "allowUpgrade"(arg0: $UpgradeType$Type): boolean
public "isPersistent"(): boolean
public "loadFromJson"(arg0: $JsonObject$Type): void
public "getPos"(): $BlockPos
public "getStorageDisplayFilter"(arg0: $ITraderStorageMenu$Type): $Function<($TradeData), (boolean)>
public "getNotificationCategory"(): $TraderCategory
public "addInteractionSlots"(arg0: $List$Type<($InteractionSlotData$Type)>): void
public "onStorageScreenInit"(arg0: $TraderStorageScreen$Type, arg1: $Consumer$Type<(any)>): void
public "handleSettingsChange"(arg0: $Player$Type, arg1: $LazyPacketData$Type): void
public "getPermissionOptions"(): $List<($PermissionOption)>
public "getTerminalTextColor"(): integer
public "shouldAlwaysShowOnTerminal"(): boolean
public "setAlwaysShowOnTerminal"(): void
public "ShouldIgnoreTaxEntry"(arg0: $ITaxCollector$Type): boolean
public "setAllyPermissionLevel"(arg0: $Player$Type, arg1: string, arg2: integer): void
public "getAllyPermissionLevel"(arg0: string): integer
public "ShouldIgnoreAllTaxes"(): boolean
public "ShouldIgnoreTaxEntryOnly"(arg0: $ITaxCollector$Type): boolean
public "getTotalTaxPercentage"(): integer
public "OnRegisteredToOffice"(): void
public "getInternalStoredMoney"(): $MoneyStorage
public "pushLocalNotification"(arg0: $Notification$Type): void
public "FlagTaxEntryToIgnore"(arg0: $TaxEntry$Type, arg1: $Player$Type): void
public "getAcceptableTaxRate"(): integer
public "notificationsEnabled"(): boolean
public "teamNotificationLevel"(): integer
public "exceedsAcceptableTaxRate"(): boolean
public "notificationsToChat"(): boolean
public static "getTraderMenuProvider"(arg0: $BlockPos$Type, arg1: $MenuValidator$Type): $MenuProvider
public "markTradeRulesDirty"(): void
public "openTraderMenu"(arg0: $Player$Type, arg1: $MenuValidator$Type): void
/**
 * 
 * @deprecated
 */
public "openTraderMenu"(arg0: $Player$Type): void
public "openStorageMenu"(arg0: $Player$Type, arg1: $MenuValidator$Type): void
/**
 * 
 * @deprecated
 */
public "openStorageMenu"(arg0: $Player$Type): void
public "TryExecuteTrade"(arg0: $TradeContext$Type, arg1: integer): $TradeResult
public "getStoredMoney"(): $IMoneyHolder
public "isServer"(): boolean
public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
public "allowUpgrade"(arg0: $UpgradeItem$Type): boolean
public "getSingleTrader"(): $TraderData
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
public "allowTradeRule"(arg0: $TradeRule$Type): boolean
public "validateRuleStates"(): void
public "HandleRuleUpdate"(arg0: $ResourceLocation$Type, arg1: $LazyPacketData$Type): void
public "getRuleOfType"(arg0: $ResourceLocation$Type): $TradeRule
get "name"(): $MutableComponent
get "reference"(): $TaxableReference
get "owner"(): $OwnerData
get "iD"(): long
get "rules"(): $List<($TradeRule)>
set "iD"(value: long)
get "level"(): $ResourceKey<($Level)>
get "notifications"(): $List<($Notification)>
get "worldPosition"(): $WorldPosition
get "trader"(): boolean
get "customName"(): string
get "client"(): boolean
get "traders"(): $List<($TraderData)>
get "singleTrader"(): boolean
get "icon"(): $IconData
get "title"(): $MutableComponent
get "persistentID"(): string
get "creative"(): boolean
get "allies"(): $List<($PlayerReference)>
get "bankAccount"(): $IBankAccount
get "linkedToBank"(): boolean
get "tradeData"(): $List<(any)>
get "maxTradeCount"(): integer
get "tradeCount"(): integer
get "applicableTaxes"(): $List<($ITaxCollector)>
get "possibleTaxes"(): $List<($ITaxCollector)>
get "users"(): $List<($Player)>
get "userCount"(): integer
get "menuDataWriter"(): $Consumer<($FriendlyByteBuf)>
get "trade"(): boolean
get "moneyRelevant"(): boolean
get "upgrades"(): $Container
get "persistent"(): boolean
get "pos"(): $BlockPos
get "notificationCategory"(): $TraderCategory
get "permissionOptions"(): $List<($PermissionOption)>
get "terminalTextColor"(): integer
get "totalTaxPercentage"(): integer
get "internalStoredMoney"(): $MoneyStorage
get "acceptableTaxRate"(): integer
get "storedMoney"(): $IMoneyHolder
get "server"(): boolean
get "singleTrader"(): $TraderData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderData$Type = ($TraderData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderData_ = $TraderData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/trader/$SPacketMessageRemoveClientTrader" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketMessageRemoveClientTrader extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketMessageRemoveClientTrader)>

constructor(arg0: long)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketMessageRemoveClientTrader$Type = ($SPacketMessageRemoveClientTrader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketMessageRemoveClientTrader_ = $SPacketMessageRemoveClientTrader$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/core/$TaxSettingsTab" {
import {$TraderSettingsTab, $TraderSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $TaxSettingsTab extends $SettingsSubTab {
readonly "parent": $TraderSettingsClientTab
readonly "commonTab": $TraderSettingsTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderSettingsClientTab$Type)

public "canOpen"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
get "icon"(): $IconData
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxSettingsTab$Type = ($TaxSettingsTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxSettingsTab_ = $TaxSettingsTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$ExchangeTab" {
import {$ATMScreen, $ATMScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$ATMScreen"
import {$ATMTab, $ATMTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$ATMTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $ExchangeTab extends $ATMTab {

constructor(arg0: $ATMScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExchangeTab$Type = ($ExchangeTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExchangeTab_ = $ExchangeTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType$Builder" {
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$WoodType, $WoodType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType"
import {$WoodType$Attributes, $WoodType$Attributes$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType$Attributes"

export class $WoodType$Builder {


public "build"(): $WoodType
public "ofName"(arg0: string): $WoodType$Builder
public "ofColor"(arg0: $MapColor$Type): $WoodType$Builder
public "withAttributes"(arg0: $WoodType$Attributes$Type): $WoodType$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodType$Builder$Type = ($WoodType$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodType$Builder_ = $WoodType$Builder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$BundleRequestFilter" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $BundleRequestFilter extends $Enum<($BundleRequestFilter)> {
static readonly "ALL": $BundleRequestFilter
static readonly "VANILLA": $BundleRequestFilter
static readonly "MODDED": $BundleRequestFilter


public static "values"(): ($BundleRequestFilter)[]
public static "valueOf"(arg0: string): $BundleRequestFilter
public "filterKey"(arg0: any): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BundleRequestFilter$Type = (("all") | ("modded") | ("vanilla")) | ($BundleRequestFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BundleRequestFilter_ = $BundleRequestFilter$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/trader/$ItemTradeNotification" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ItemTradeData, $ItemTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData"
import {$TraderCategory, $TraderCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$TraderCategory"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$TaxableNotification, $TaxableNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/$TaxableNotification"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ItemTradeNotification extends $TaxableNotification {
static readonly "TYPE": $NotificationType<($ItemTradeNotification)>

constructor(arg0: $ItemTradeData$Type, arg1: $MoneyValue$Type, arg2: $PlayerReference$Type, arg3: $TraderCategory$Type, arg4: $MoneyValue$Type)

public static "create"(arg0: $ItemTradeData$Type, arg1: $MoneyValue$Type, arg2: $PlayerReference$Type, arg3: $TraderCategory$Type, arg4: $MoneyValue$Type): $NonNullSupplier<($Notification)>
public "getCategory"(): $NotificationCategory
public "getNormalMessage"(): $MutableComponent
get "category"(): $NotificationCategory
get "normalMessage"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTradeNotification$Type = ($ItemTradeNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTradeNotification_ = $ItemTradeNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/containers/$SuppliedItemContainer" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$SuppliedItemContainer$IItemInteractable, $SuppliedItemContainer$IItemInteractable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/containers/$SuppliedItemContainer$IItemInteractable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $SuppliedItemContainer implements $Container {

constructor(arg0: $Supplier$Type<($SuppliedItemContainer$IItemInteractable$Type)>)

public "setChanged"(): void
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "stillValid"(arg0: $Player$Type): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "containerSize"(): integer
get "empty"(): boolean
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppliedItemContainer$Type = ($SuppliedItemContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppliedItemContainer_ = $SuppliedItemContainer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyAddonHelper" {
import {$TextEntry, $TextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$WidgetAddon, $WidgetAddon$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$MultiLineTextEntry, $MultiLineTextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$MultiLineTextEntry"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $EasyAddonHelper {

constructor()

public static "tooltips"(arg0: $List$Type<($Component$Type)>): $WidgetAddon
public static "tooltips"(arg0: $Supplier$Type<($List$Type<($Component$Type)>)>): $WidgetAddon
public static "visibleCheck"(arg0: $NonNullSupplier$Type<(boolean)>): $WidgetAddon
public static "visibleCheck"(arg0: $Function$Type<($EasyWidget$Type), (boolean)>): $WidgetAddon
public static "activeCheck"(arg0: $Function$Type<($EasyWidget$Type), (boolean)>): $WidgetAddon
public static "activeCheck"(arg0: $NonNullSupplier$Type<(boolean)>): $WidgetAddon
public static "tooltip"(arg0: $Supplier$Type<($Component$Type)>): $WidgetAddon
public static "tooltip"(arg0: $Component$Type, arg1: integer): $WidgetAddon
public static "tooltip"(arg0: $TextEntry$Type, arg1: integer): $WidgetAddon
public static "tooltip"(arg0: $Component$Type): $WidgetAddon
public static "tooltip"(arg0: $TextEntry$Type): $WidgetAddon
public static "tooltip"(arg0: $MultiLineTextEntry$Type): $WidgetAddon
public static "toggleTooltip"(arg0: $NonNullSupplier$Type<(boolean)>, arg1: $Component$Type, arg2: $Component$Type): $WidgetAddon
public static "toggleTooltip"(arg0: $NonNullSupplier$Type<(boolean)>, arg1: $Supplier$Type<($Component$Type)>, arg2: $Supplier$Type<($Component$Type)>): $WidgetAddon
/**
 * 
 * @deprecated
 */
public static "additiveTooltip2"(arg0: string, arg1: $Supplier$Type<(any)>): $WidgetAddon
/**
 * 
 * @deprecated
 */
public static "additiveTooltip"(arg0: string, arg1: $Supplier$Type<((any)[])>): $WidgetAddon
public static "changingTooltip"(arg0: $NonNullSupplier$Type<(integer)>, ...arg1: ($Component$Type)[]): $WidgetAddon
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyAddonHelper$Type = ($EasyAddonHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyAddonHelper_ = $EasyAddonHelper$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/$IServerTicker" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IServerTicker {

 "serverTick"(): void

(): void
}

export namespace $IServerTicker {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IServerTicker$Type = ($IServerTicker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IServerTicker_ = $IServerTicker$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestExchangeUpgrade" {
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$CoinChestUpgrade, $CoinChestUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgrade"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CoinChestUpgradeData, $CoinChestUpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgradeData"
import {$CoinChestMenu, $CoinChestMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinChestMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"

export class $CoinChestExchangeUpgrade extends $CoinChestUpgrade {

constructor()

public "getTooltip"(arg0: $UpgradeData$Type): $List<($Component)>
public "OnStorageChanged"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "OnEquip"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "getExchangeWhileOpen"(arg0: $CoinChestUpgradeData$Type): boolean
public "setExchangeWhileOpen"(arg0: $CoinChestUpgradeData$Type, arg1: boolean): void
public "ExecuteExchangeCommand"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "addClientTabs"(arg0: $CoinChestUpgradeData$Type, arg1: any, arg2: $Consumer$Type<(any)>): void
public "clearDataFromStack"(arg0: $CompoundTag$Type): boolean
public "HandleMenuMessage"(arg0: $CoinChestMenu$Type, arg1: $CoinChestUpgradeData$Type, arg2: $LazyPacketData$Type): void
public "getExchangeCommand"(arg0: $CoinChestUpgradeData$Type): string
public "setExchangeCommand"(arg0: $CoinChestUpgradeData$Type, arg1: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestExchangeUpgrade$Type = ($CoinChestExchangeUpgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestExchangeUpgrade_ = $CoinChestExchangeUpgrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/mixin/$AbstractContainerMenuAccessor" {
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"

export interface $AbstractContainerMenuAccessor {

 "addCustomSlot"(arg0: $Slot$Type): $Slot

(arg0: $Slot$Type): $Slot
}

export namespace $AbstractContainerMenuAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractContainerMenuAccessor$Type = ($AbstractContainerMenuAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractContainerMenuAccessor_ = $AbstractContainerMenuAccessor$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/$FreezerTraderBlockEntityRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$FreezerTraderBlockEntity, $FreezerTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$FreezerTraderBlockEntity"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $FreezerTraderBlockEntityRenderer implements $BlockEntityRenderer<($FreezerTraderBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $FreezerTraderBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $FreezerTraderBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $FreezerTraderBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FreezerTraderBlockEntityRenderer$Type = ($FreezerTraderBlockEntityRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FreezerTraderBlockEntityRenderer_ = $FreezerTraderBlockEntityRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/$LightmansCurrency" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CommonProxy, $CommonProxy$Type} from "packages/io/github/lightman314/lightmanscurrency/proxy/$CommonProxy"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ParallelDispatchEvent, $ParallelDispatchEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$ParallelDispatchEvent"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $LightmansCurrency {
static readonly "MODID": string
static readonly "PROXY": $CommonProxy

constructor()

public static "LogDebug"(arg0: string, ...arg1: (any)[]): void
public static "LogDebug"(arg0: string): void
public static "isCuriosValid"(arg0: $LivingEntity$Type): boolean
public static "safeEnqueueWork"<T extends $ParallelDispatchEvent>(arg0: T, arg1: string, arg2: $Consumer$Type<(T)>): void
public static "safeEnqueueWork"(arg0: $ParallelDispatchEvent$Type, arg1: string, arg2: $Runnable$Type): void
public "onPlayerLogin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "LogInfo"(arg0: string): void
public static "LogInfo"(arg0: string, ...arg1: (any)[]): void
/**
 * 
 * @deprecated
 */
public static "getWalletStack"(arg0: $Player$Type): $ItemStack
public static "LogError"(arg0: string): void
public static "LogError"(arg0: string, ...arg1: (any)[]): void
public static "LogWarning"(arg0: string): void
public static "LogWarning"(arg0: string, ...arg1: (any)[]): void
public static "isCuriosLoaded"(): boolean
get "curiosLoaded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightmansCurrency$Type = ($LightmansCurrency);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightmansCurrency_ = $LightmansCurrency$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ConfigParser<T> {

 "write"(arg0: T): string
 "tryParse"(arg0: string): T
}

export namespace $ConfigParser {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigParser$Type<T> = ($ConfigParser<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigParser_<T> = $ConfigParser$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$TicketStationMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TicketStationBlockEntity, $TicketStationBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$TicketStationBlockEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TicketStationRecipe, $TicketStationRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketStationRecipe"
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TicketStationMenu extends $LazyMessageMenu {
readonly "blockEntity": $TicketStationBlockEntity
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $TicketStationBlockEntity$Type)

public "removed"(arg0: $Player$Type): void
public "SendCraftTicketsMessage"(arg0: boolean, arg1: $ResourceLocation$Type): void
public "getRecipe"(arg0: $ResourceLocation$Type): $TicketStationRecipe
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public static "getAllRecipes"(arg0: $Level$Type): $List<($TicketStationRecipe)>
public "getAllRecipes"(): $List<($TicketStationRecipe)>
public "roomForOutput"(arg0: $TicketStationRecipe$Type): boolean
public "validInputs"(): boolean
public "craftTickets"(arg0: boolean, arg1: $ResourceLocation$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
get "allRecipes"(): $List<($TicketStationRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketStationMenu$Type = ($TicketStationMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketStationMenu_ = $TicketStationMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/data/$ClientBankData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientPlayerNetworkEvent$LoggingOut, $ClientPlayerNetworkEvent$LoggingOut$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$LoggingOut"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$BankAccount, $BankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/common/bank/$BankAccount"

export class $ClientBankData {

constructor()

public static "onClientLogout"(arg0: $ClientPlayerNetworkEvent$LoggingOut$Type): void
public static "UpdateBankAccount"(arg0: $UUID$Type, arg1: $CompoundTag$Type): void
public static "ClearBankAccounts"(): void
public static "UpdateLastSelectedAccount"(arg0: $BankReference$Type): void
public static "GetPlayerBankAccount"(arg0: $UUID$Type): $BankAccount
public static "GetLastSelectedAccount"(): $BankReference
public static "GetPlayerBankAccounts"(): $List<($BankReference)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBankData$Type = ($ClientBankData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBankData_ = $ClientBankData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$PlayerTrade" {
import {$IPlayerTrade, $IPlayerTrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$IPlayerTrade"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $PlayerTrade implements $IPlayerTrade, $MenuProvider {
readonly "creationTime": long
readonly "tradeID": integer

constructor(arg0: $ServerPlayer$Type, arg1: $ServerPlayer$Type, arg2: integer)

public "getHostName"(): $Component
public "isCompleted"(): boolean
public "onCancel"(): void
public "getDisplayName"(): $Component
public static "enforceDistance"(): double
public static "ignoreDistance"(): boolean
public "isGuestInRange"(arg0: $ServerPlayer$Type): integer
public "tryCloseMenu"(arg0: $UUID$Type): void
public "tryCloseMenu"(arg0: $Player$Type): void
public "requestAccepted"(arg0: $ServerPlayer$Type): boolean
public "isGuest"(arg0: $Player$Type): boolean
public "getGuestID"(): $UUID
public "getGuestName"(): $Component
public "getGuestMoney"(): $MoneyValue
public "getHostMoney"(): $MoneyValue
public "isHost"(arg0: $Player$Type): boolean
public "getHostID"(): $UUID
public "getHostItems"(): $Container
public "getGuestItems"(): $Container
public "getHostState"(): integer
public "getGuestState"(): integer
public "markDirty"(): void
public static "ignoreDimension"(): boolean
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "handleInteraction"(arg0: $Player$Type, arg1: $CompoundTag$Type): void
public "shouldCancel"(): boolean
get "hostName"(): $Component
get "completed"(): boolean
get "displayName"(): $Component
get "guestID"(): $UUID
get "guestName"(): $Component
get "guestMoney"(): $MoneyValue
get "hostMoney"(): $MoneyValue
get "hostID"(): $UUID
get "hostItems"(): $Container
get "guestItems"(): $Container
get "hostState"(): integer
get "guestState"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerTrade$Type = ($PlayerTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerTrade_ = $PlayerTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$MasterTicketRecipe" {
import {$InputReplacement, $InputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$InputReplacement"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSchema, $RecipeSchema$Type} from "packages/dev/latvian/mods/kubejs/recipe/schema/$RecipeSchema"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$TicketStationRecipe, $TicketStationRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketStationRecipe"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ReplacementMatch, $ReplacementMatch$Type} from "packages/dev/latvian/mods/kubejs/recipe/$ReplacementMatch"
import {$OutputReplacement, $OutputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$OutputReplacement"

export class $MasterTicketRecipe implements $TicketStationRecipe {

constructor(arg0: $ResourceLocation$Type, arg1: $Ingredient$Type, arg2: $Item$Type)

public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "getIngredient"(): $Ingredient
public "validIngredient"(arg0: $ItemStack$Type): boolean
public "jeiModifierList"(): $List<($ItemStack)>
public "exampleResult"(): $ItemStack
public "consumeModifier"(): boolean
public "peekAtResult"(arg0: $Container$Type): $ItemStack
public "validModifier"(arg0: $ItemStack$Type): boolean
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(arg0: $Container$Type, arg1: $RegistryAccess$Type): $ItemStack
public "getId"(): $ResourceLocation
public static "exampleModifierList"(arg0: $TagKey$Type<($Item$Type)>, ...arg1: ($Item$Type)[]): $List<($ItemStack)>
public static "exampleTicketList"(arg0: $RegistryObject$Type<(any)>): $List<($ItemStack)>
public static "exampleTicketList"(arg0: $Ingredient$Type): $List<($ItemStack)>
public static "exampleTicketList"(arg0: $Item$Type): $List<($ItemStack)>
public "matches"(arg0: $Container$Type, arg1: $Level$Type): boolean
public "getRemainingItems"(arg0: $Container$Type): $NonNullList<($ItemStack)>
public "getIngredients"(): $NonNullList<($Ingredient)>
public "getToastSymbol"(): $ItemStack
public "isIncomplete"(): boolean
public "showNotification"(): boolean
public "isSpecial"(): boolean
public "getType"(): $ResourceLocation
public "replaceOutput"(match: $ReplacementMatch$Type, arg1: $OutputReplacement$Type): boolean
public "setGroup"(group: string): void
public "hasInput"(match: $ReplacementMatch$Type): boolean
public "getOrCreateId"(): $ResourceLocation
public "getSchema"(): $RecipeSchema
public "replaceInput"(match: $ReplacementMatch$Type, arg1: $InputReplacement$Type): boolean
public "hasOutput"(match: $ReplacementMatch$Type): boolean
public "getGroup"(): string
public "getMod"(): string
get "ingredient"(): $Ingredient
get "serializer"(): $RecipeSerializer<(any)>
get "id"(): $ResourceLocation
get "ingredients"(): $NonNullList<($Ingredient)>
get "toastSymbol"(): $ItemStack
get "incomplete"(): boolean
get "special"(): boolean
get "type"(): $ResourceLocation
set "group"(value: string)
get "orCreateId"(): $ResourceLocation
get "schema"(): $RecipeSchema
get "group"(): string
get "mod"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MasterTicketRecipe$Type = ($MasterTicketRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MasterTicketRecipe_ = $MasterTicketRecipe$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/$SyncedConfigFile" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ConfigFile$LoadPhase, $ConfigFile$LoadPhase$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile$LoadPhase"
import {$ConfigFile, $ConfigFile$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SyncedConfigFile extends $ConfigFile {
readonly "loadPhase": $ConfigFile$LoadPhase


public "isLoaded"(): boolean
public "isServerOnly"(): boolean
public "clearSyncedData"(): void
public static "playerJoined"(arg0: $ServerPlayer$Type): void
public static "handleSyncData"(arg0: $ResourceLocation$Type, arg1: $Map$Type<(string), (string)>): void
public static "onClientLeavesServer"(): void
get "loaded"(): boolean
get "serverOnly"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncedConfigFile$Type = ($SyncedConfigFile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncedConfigFile_ = $SyncedConfigFile$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$AuctionStandBlockEntity" {
import {$EasyBlockEntity, $EasyBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$EasyBlockEntity"
import {$ServerStartedEvent, $ServerStartedEvent$Type} from "packages/net/minecraftforge/event/server/$ServerStartedEvent"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $AuctionStandBlockEntity extends $EasyBlockEntity {
 "dropItem": boolean
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public static "syncItemsFromServer"(arg0: $List$Type<($ItemStack$Type)>): void
public static "serverStart"(arg0: $ServerStartedEvent$Type): void
public static "getDisplayItems"(): $ImmutableList<($ItemStack)>
public static "playerJoin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "serverTick"(arg0: $TickEvent$ServerTickEvent$Type): void
get "displayItems"(): $ImmutableList<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionStandBlockEntity$Type = ($AuctionStandBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionStandBlockEntity_ = $AuctionStandBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab" {
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $TradeRulesClientSubTab extends $EasyTab {
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu


public "getFilteredRules"(): $List<($TradeRule)>
public "getTradeRules"(): $List<($TradeRule)>
public "isVisible"(): boolean
public "addChild"<T>(arg0: T): T
public "removeChild"(arg0: any): void
public "getColor"(): integer
get "filteredRules"(): $List<($TradeRule)>
get "tradeRules"(): $List<($TradeRule)>
get "visible"(): boolean
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeRulesClientSubTab$Type = ($TradeRulesClientSubTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeRulesClientSubTab_ = $TradeRulesClientSubTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/walletbank/$WalletBankTab" {
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"

export class $WalletBankTab extends $EasyTab {


public "getColor"(): integer
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletBankTab$Type = ($WalletBankTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletBankTab_ = $WalletBankTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/claiming/cadmus/$LCCadmusIntegration" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCCadmusIntegration {

constructor()

public static "setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCCadmusIntegration$Type = ($LCCadmusIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCCadmusIntegration_ = $LCCadmusIntegration$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$RegisterValueDisplayTypes" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$IModBusEvent, $IModBusEvent$Type} from "packages/net/minecraftforge/fml/event/$IModBusEvent"
import {$ValueDisplaySerializer, $ValueDisplaySerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplaySerializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RegisterValueDisplayTypes extends $Event implements $IModBusEvent {

constructor()

public "register"(arg0: $ValueDisplaySerializer$Type): void
public "isCancelable"(): boolean
public "getResults"(): $Map<($ResourceLocation), ($ValueDisplaySerializer)>
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "results"(): $Map<($ResourceLocation), ($ValueDisplaySerializer)>
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegisterValueDisplayTypes$Type = ($RegisterValueDisplayTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegisterValueDisplayTypes_ = $RegisterValueDisplayTypes$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$InteractionType" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $TraderInterfaceBlockEntity$InteractionType extends $Enum<($TraderInterfaceBlockEntity$InteractionType)> {
static readonly "RESTOCK_AND_DRAIN": $TraderInterfaceBlockEntity$InteractionType
static readonly "RESTOCK": $TraderInterfaceBlockEntity$InteractionType
static readonly "DRAIN": $TraderInterfaceBlockEntity$InteractionType
static readonly "TRADE": $TraderInterfaceBlockEntity$InteractionType
readonly "requiresPermissions": boolean
readonly "restocks": boolean
readonly "drains": boolean
readonly "trades": boolean
readonly "index": integer


public static "values"(): ($TraderInterfaceBlockEntity$InteractionType)[]
public static "valueOf"(arg0: string): $TraderInterfaceBlockEntity$InteractionType
public static "size"(): integer
public static "fromIndex"(arg0: integer): $TraderInterfaceBlockEntity$InteractionType
public "getDisplayText"(): $Component
get "displayText"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderInterfaceBlockEntity$InteractionType$Type = (("trade") | ("restock_and_drain") | ("restock") | ("drain")) | ($TraderInterfaceBlockEntity$InteractionType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderInterfaceBlockEntity$InteractionType_ = $TraderInterfaceBlockEntity$InteractionType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwnerList" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PotentialOwner, $PotentialOwner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"

export class $PotentialOwnerList {

constructor(arg0: $Player$Type, arg1: $Supplier$Type<($OwnerData$Type)>)

public "tick"(): void
public "getOwners"(): $List<($PotentialOwner)>
public "updateCache"(arg0: string): void
get "owners"(): $List<($PotentialOwner)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotentialOwnerList$Type = ($PotentialOwnerList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotentialOwnerList_ = $PotentialOwnerList$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/slot_machine/$SlotMachineStorageClientTab" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$IMouseListener, $IMouseListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$SlotMachineStorageTab, $SlotMachineStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/slot_machine/$SlotMachineStorageTab"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $SlotMachineStorageClientTab extends $TraderStorageClientTab<($SlotMachineStorageTab)> implements $IScrollable, $IMouseListener {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $SlotMachineStorageTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
public "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
get "icon"(): $IconData
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineStorageClientTab$Type = ($SlotMachineStorageClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineStorageClientTab_ = $SlotMachineStorageClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/bank/$CPacketBankInteraction" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketBankInteraction extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketBankInteraction)>

constructor(arg0: boolean, arg1: $MoneyValue$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketBankInteraction$Type = ($CPacketBankInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketBankInteraction_ = $CPacketBankInteraction$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/rule_tabs/$PlayerDiscountTab" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$PlayerDiscounts, $PlayerDiscounts$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$PlayerDiscounts"
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TradeRuleSubTab, $TradeRuleSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRuleSubTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $PlayerDiscountTab extends $TradeRuleSubTab<($PlayerDiscounts)> {
readonly "ruleType": $TradeRuleType<(T)>
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TradeRulesClientTab$Type<(any)>)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerDiscountTab$Type = ($PlayerDiscountTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerDiscountTab_ = $PlayerDiscountTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModCommandArguments" {
import {$ArgumentTypeInfo, $ArgumentTypeInfo$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo"
import {$ColorArgument, $ColorArgument$Type} from "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$ColorArgument"
import {$TraderArgument, $TraderArgument$Type} from "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$TraderArgument"
import {$TradeIDArgument, $TradeIDArgument$Type} from "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$TradeIDArgument"
import {$MoneyValueArgument, $MoneyValueArgument$Type} from "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$MoneyValueArgument"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $ModCommandArguments {
static readonly "TRADER_ARGUMENT": $RegistryObject<($ArgumentTypeInfo<($TraderArgument), (any)>)>
static readonly "TRADE_ID_ARGUMENT": $RegistryObject<($ArgumentTypeInfo<($TradeIDArgument), (any)>)>
static readonly "COLOR_ARGUMENT": $RegistryObject<($ArgumentTypeInfo<($ColorArgument), (any)>)>
static readonly "COIN_VALUE_ARGUMENT": $RegistryObject<($ArgumentTypeInfo<($MoneyValueArgument), (any)>)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModCommandArguments$Type = ($ModCommandArguments);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModCommandArguments_ = $ModCommandArguments$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/display/$EmptyPriceEntry" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DisplayData, $DisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $EmptyPriceEntry extends $DisplayEntry {

constructor(arg0: $MoneyValue$Type, arg1: $List$Type<($Component$Type)>)

public "render"(arg0: $EasyGuiGraphics$Type, arg1: integer, arg2: integer, arg3: $DisplayData$Type): void
public "isMouseOver"(arg0: integer, arg1: integer, arg2: $DisplayData$Type, arg3: integer, arg4: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmptyPriceEntry$Type = ($EmptyPriceEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmptyPriceEntry_ = $EmptyPriceEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$ResourceOption" {
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ResourceOption extends $ConfigOption<($ResourceLocation)> {
static readonly "PARSER": $ConfigParser<($ResourceLocation)>


public static "create"(arg0: $NonNullSupplier$Type<($ResourceLocation$Type)>): $ResourceOption
public static "create"(arg0: $ResourceLocation$Type): $ResourceOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceOption$Type = ($ResourceOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceOption_ = $ResourceOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconButton" {
import {$NonNullFunction, $NonNullFunction$Type} from "packages/net/minecraftforge/common/util/$NonNullFunction"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$WidgetAddon, $WidgetAddon$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $IconButton extends $EasyButton {
static readonly "SIZE": integer
 "bgColor": integer
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $NonNullFunction$Type<($IconButton$Type), ($IconData$Type)>)
constructor(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>, arg2: $NonNullFunction$Type<($IconButton$Type), ($IconData$Type)>)
constructor(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $NonNullSupplier$Type<($IconData$Type)>)
constructor(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>, arg2: $IconData$Type)
constructor(arg0: integer, arg1: integer, arg2: $Consumer$Type<($EasyButton$Type)>, arg3: $IconData$Type)
constructor(arg0: $ScreenPosition$Type, arg1: $Consumer$Type<($EasyButton$Type)>, arg2: $NonNullSupplier$Type<($IconData$Type)>)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "withAddons"(...arg0: ($WidgetAddon$Type)[]): $IconButton
public "setIcon"(arg0: $IconData$Type): void
public "setIcon"(arg0: $NonNullSupplier$Type<($IconData$Type)>): void
public "setIcon"(arg0: $NonNullFunction$Type<($IconButton$Type), ($IconData$Type)>): void
set "icon"(value: $IconData$Type)
set "icon"(value: $NonNullSupplier$Type<($IconData$Type)>)
set "icon"(value: $NonNullFunction$Type<($IconButton$Type), ($IconData$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconButton$Type = ($IconButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconButton_ = $IconButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyScreenHelper" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IEasyTickable, $IEasyTickable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IEasyTickable"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ITooltipSource, $ITooltipSource$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipSource"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $EasyScreenHelper {

constructor()

public static "RenderItemTooltipWithCount"(arg0: $EasyGuiGraphics$Type, arg1: $ItemStack$Type, arg2: integer, ...arg3: ($ChatFormatting$Type)[]): void
public static "getWidgetTicker"(arg0: any): $IEasyTickable
public static "RenderTooltips"(arg0: $EasyGuiGraphics$Type, arg1: $List$Type<($ITooltipSource$Type)>): void
public static "getTooltipFromItem"(arg0: $ItemStack$Type): $List<($Component)>
public static "formatItemCount"(arg0: integer, arg1: integer, ...arg2: ($ChatFormatting$Type)[]): $Component
public static "RenderItemTooltip"(arg0: $EasyGuiGraphics$Type, arg1: $ItemStack$Type): void
public static "RenderItemTooltip"(arg0: $EasyGuiGraphics$Type, arg1: $ItemStack$Type, arg2: $List$Type<($Component$Type)>): void
public static "RenderItemTooltipWithModifiers"(arg0: $EasyGuiGraphics$Type, arg1: $ItemStack$Type, arg2: $Consumer$Type<($List$Type<($Component$Type)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyScreenHelper$Type = ($EasyScreenHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyScreenHelper_ = $EasyScreenHelper$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/configured/$ConfiguredItemListing" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$VillagerTradeMod, $VillagerTradeMod$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/mods/$VillagerTradeMod"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ConfiguredItemListing implements $VillagerTrades$ItemListing {

constructor(arg0: $VillagerTrades$ItemListing$Type, arg1: $Supplier$Type<($VillagerTradeMod$Type)>)

public "getOffer"(arg0: $Entity$Type, arg1: $RandomSource$Type): $MerchantOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfiguredItemListing$Type = ($ConfiguredItemListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfiguredItemListing_ = $ConfiguredItemListing$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/$LCConfig$Server" {
import {$ConfigFile$LoadPhase, $ConfigFile$LoadPhase$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile$LoadPhase"
import {$MoneyValueOption, $MoneyValueOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$MoneyValueOption"
import {$BooleanOption, $BooleanOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$BooleanOption"
import {$MoneyValueListOption, $MoneyValueListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$MoneyValueListOption"
import {$IntOption, $IntOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$IntOption"
import {$StringOption, $StringOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$StringOption"
import {$CoinMintRecipe, $CoinMintRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe"
import {$SyncedConfigFile, $SyncedConfigFile$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$SyncedConfigFile"
import {$DoubleOption, $DoubleOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$DoubleOption"

export class $LCConfig$Server extends $SyncedConfigFile {
readonly "notificationLimit": $IntOption
readonly "safelyEjectMachineContents": $BooleanOption
readonly "anarchyMode": $BooleanOption
readonly "coinMintCanMint": $BooleanOption
readonly "coinMintCanMelt": $BooleanOption
readonly "coinMintDefaultDuration": $IntOption
readonly "coinMintMintableCopper": $BooleanOption
readonly "coinMintMintableIron": $BooleanOption
readonly "coinMintMintableGold": $BooleanOption
readonly "coinMintMintableEmerald": $BooleanOption
readonly "coinMintMintableDiamond": $BooleanOption
readonly "coinMintMintableNetherite": $BooleanOption
readonly "coinMintMeltableCopper": $BooleanOption
readonly "coinMintMeltableIron": $BooleanOption
readonly "coinMintMeltableGold": $BooleanOption
readonly "coinMintMeltableEmerald": $BooleanOption
readonly "coinMintMeltableDiamond": $BooleanOption
readonly "coinMintMeltableNetherite": $BooleanOption
readonly "walletExchangeLevel": $IntOption
readonly "walletPickupLevel": $IntOption
readonly "walletBankLevel": $IntOption
readonly "itemCapacityUpgrade1": $IntOption
readonly "itemCapacityUpgrade2": $IntOption
readonly "itemCapacityUpgrade3": $IntOption
readonly "itemCapacityUpgrade4": $IntOption
readonly "coinChestMagnetRange1": $IntOption
readonly "coinChestMagnetRange2": $IntOption
readonly "coinChestMagnetRange3": $IntOption
readonly "coinChestMagnetRange4": $IntOption
readonly "enchantmentTickDelay": $IntOption
readonly "enchantmentMaxTickDelay": $IntOption
readonly "moneyMendingRepairCost": $MoneyValueOption
readonly "moneyMendingInfinityCost": $MoneyValueOption
readonly "coinMagnetBaseRange": $IntOption
readonly "coinMagnetLeveledRange": $IntOption
readonly "coinMagnetCalculationCap": $IntOption
readonly "auctionHouseEnabled": $BooleanOption
readonly "auctionHouseOnTerminal": $BooleanOption
readonly "auctionHouseDurationMin": $IntOption
readonly "auctionHouseDurationMax": $IntOption
readonly "bankAccountInterestRate": $DoubleOption
readonly "bankAccountForceInterest": $BooleanOption
readonly "bankAccountInterestNotification": $BooleanOption
readonly "bankAccountInterestTime": $IntOption
readonly "bankAccountInterestLimits": $MoneyValueListOption
readonly "moveUnnamedTradersToBottom": $BooleanOption
readonly "paygateMaxDuration": $IntOption
readonly "playerTradingRange": $DoubleOption
readonly "taxCollectorAdminOnly": $BooleanOption
readonly "taxCollectorMaxRate": $IntOption
readonly "taxCollectorMaxRadius": $IntOption
readonly "taxCollectorMaxHeight": $IntOption
readonly "taxCollectorMaxVertOffset": $IntOption
readonly "chocolateCoinEffects": $BooleanOption
readonly "claimingAllowClaimPurchase": $BooleanOption
readonly "claimingClaimPrice": $MoneyValueOption
readonly "claimingMaxClaimCount": $IntOption
readonly "claimingAllowForceloadPurchase": $BooleanOption
readonly "claimingForceloadPrice": $MoneyValueOption
readonly "claimingMaxForceloadCount": $IntOption
readonly "flanClaimingBlocksPerChunk": $IntOption
readonly "ldiCurrencyChannel": $StringOption
readonly "ldiCurrencyCommandPrefix": $StringOption
readonly "ldiLimitSearchToNetworkTraders": $BooleanOption
readonly "ldiNetworkTraderNotification": $BooleanOption
readonly "ldiAuctionCreateNotification": $BooleanOption
readonly "ldiAuctionPersistentCreateNotification": $BooleanOption
readonly "ldiAuctionCancelNotification": $BooleanOption
readonly "ldiAuctionWinNotification": $BooleanOption
readonly "loadPhase": $ConfigFile$LoadPhase


public "allowCoinMintRecipe"(arg0: $CoinMintRecipe$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCConfig$Server$Type = ($LCConfig$Server);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCConfig$Server_ = $LCConfig$Server$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntryBundle" {
import {$TextEntry, $TextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$RegistryObjectBundle, $RegistryObjectBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBundle"
import {$RegistryObjectBiBundle, $RegistryObjectBiBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBiBundle"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TextEntryBundle<T> {

constructor(arg0: $Map$Type<(T), ($TextEntry$Type)>)

public "get"(arg0: T): $TextEntry
public static "of"<T>(arg0: $RegistryObjectBundle$Type<(any), (T)>): $TextEntryBundle<(T)>
public static "of"<T extends $Enum<(T)>>(arg0: (T)[], arg1: string): $TextEntryBundle<(T)>
public static "of"<T>(arg0: $RegistryObjectBiBundle$Type<(any), (T), (any)>): $TextEntryBundle<(T)>
public "forEach"(arg0: $BiConsumer$Type<(T), ($TextEntry$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextEntryBundle$Type<T> = ($TextEntryBundle<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextEntryBundle_<T> = $TextEntryBundle$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$WalletDropEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"
import {$IWalletHandler, $IWalletHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$IWalletHandler"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $WalletDropEvent extends $PlayerEvent {
readonly "source": $DamageSource
readonly "keepWallet": boolean
readonly "coinDropPercent": integer

constructor()
constructor(arg0: $Player$Type, arg1: $IWalletHandler$Type, arg2: $Container$Type, arg3: $DamageSource$Type, arg4: boolean, arg5: integer)

public "addDrop"(arg0: $ItemStack$Type): void
public "isCancelable"(): boolean
public "setDrops"(arg0: $List$Type<($ItemStack$Type)>): void
public "setWalletStack"(arg0: $ItemStack$Type): void
public "addDrops"(arg0: $Collection$Type<($ItemStack$Type)>): void
public "getDrops"(): $List<($ItemStack)>
public "getWalletStack"(): $ItemStack
public "getListenerList"(): $ListenerList
public "getWalletInventory"(): $Container
get "cancelable"(): boolean
set "drops"(value: $List$Type<($ItemStack$Type)>)
set "walletStack"(value: $ItemStack$Type)
get "drops"(): $List<($ItemStack)>
get "walletStack"(): $ItemStack
get "listenerList"(): $ListenerList
get "walletInventory"(): $Container
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletDropEvent$Type = ($WalletDropEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletDropEvent_ = $WalletDropEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderDataTicket" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"
import {$ItemTraderData, $ItemTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderData"

export class $ItemTraderDataTicket extends $ItemTraderData {
static readonly "TYPE": $TraderType<($ItemTraderDataTicket)>
static readonly "ALLOWED_UPGRADES": $List<($UpgradeType)>
static readonly "DEFAULT_STACK_LIMIT": integer
readonly "ignoreSides": $ImmutableList<($Direction)>
static readonly "GLOBAL_TRADE_LIMIT": integer
readonly "type": $TraderType<(any)>
readonly "statTracker": $StatTracker

constructor(arg0: integer, arg1: $Level$Type, arg2: $BlockPos$Type)

public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTraderDataTicket$Type = ($ItemTraderDataTicket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTraderDataTicket_ = $ItemTraderDataTicket$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$MainCoinEntry" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$CoinEntry, $CoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$CoinEntry"

export class $MainCoinEntry extends $CoinEntry {

constructor(arg0: $Item$Type, arg1: integer)

public static "parseMain"(arg0: $JsonObject$Type): $CoinEntry
public static "parseMain"(arg0: $JsonObject$Type, arg1: boolean): $CoinEntry
public "getExchangeRate"(): integer
get "exchangeRate"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MainCoinEntry$Type = ($MainCoinEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MainCoinEntry_ = $MainCoinEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/persistentdata/$CPacketCreatePersistentTrader" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketCreatePersistentTrader extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketCreatePersistentTrader)>

constructor(arg0: long, arg1: string, arg2: string)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketCreatePersistentTrader$Type = ($CPacketCreatePersistentTrader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketCreatePersistentTrader_ = $CPacketCreatePersistentTrader$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$TradeEvent$PostTradeEvent, $TradeEvent$PostTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PostTradeEvent"
import {$IRuleLoadListener, $IRuleLoadListener$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$IRuleLoadListener"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$JsonArray, $JsonArray$Type} from "packages/com/google/gson/$JsonArray"
import {$TradeEvent$TradeCostEvent, $TradeEvent$TradeCostEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$TradeCostEvent"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$TradeEvent$PreTradeEvent, $TradeEvent$PreTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITradeRuleHost, $ITradeRuleHost$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$ITradeRuleHost"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $TradeRule {
readonly "type": $TradeRuleType<(any)>


public "getName"(): $MutableComponent
public "load"(arg0: $CompoundTag$Type): void
public "save"(): $CompoundTag
public "isActive"(): boolean
public "setActive"(arg0: boolean): void
public static "nameOfType"(arg0: $ResourceLocation$Type): $MutableComponent
public static "CreateRule"(arg0: $ResourceLocation$Type): $TradeRule
public static "CreateRuleMessage"(): $CompoundTag
public static "HasTradeRule"(arg0: $List$Type<($TradeRule$Type)>, arg1: $ResourceLocation$Type): boolean
public "createTab"(arg0: $TradeRulesClientTab$Type<(any)>): $TradeRulesClientSubTab
public static "isRemoveMessage"(arg0: $CompoundTag$Type): boolean
public static "RemoveRuleMessage"(): $CompoundTag
public static "isCreateMessage"(arg0: $CompoundTag$Type): boolean
public "canActivate"(): boolean
public static "GetTradeRule"(arg0: $List$Type<($TradeRule$Type)>, arg1: $ResourceLocation$Type): $TradeRule
public static "getRule"(arg0: $ResourceLocation$Type, arg1: $List$Type<($TradeRule$Type)>): $TradeRule
public static "translationKeyOfType"(arg0: $ResourceLocation$Type): string
public static "addIgnoreMissing"(arg0: string): void
public static "addLoadListener"(arg0: $IRuleLoadListener$Type): void
public static "Deserialize"(arg0: $CompoundTag$Type): $TradeRule
public static "Deserialize"(arg0: $JsonObject$Type): $TradeRule
public "loadPersistentData"(arg0: $CompoundTag$Type): void
public static "loadPersistentData"(arg0: $CompoundTag$Type, arg1: $List$Type<($TradeRule$Type)>, arg2: string): void
public "savePersistentData"(): $CompoundTag
public static "savePersistentData"(arg0: $CompoundTag$Type, arg1: $List$Type<($TradeRule$Type)>, arg2: string): boolean
public static "saveRules"(arg0: $CompoundTag$Type, arg1: $List$Type<($TradeRule$Type)>, arg2: string): void
public "saveToJson"(arg0: $JsonObject$Type): $JsonObject
public static "saveRulesToJson"(arg0: $List$Type<($TradeRule$Type)>): $JsonArray
public static "loadRules"(arg0: $CompoundTag$Type, arg1: string, arg2: $ITradeRuleHost$Type): $List<($TradeRule)>
public "beforeTrade"(arg0: $TradeEvent$PreTradeEvent$Type): void
public "afterTrade"(arg0: $TradeEvent$PostTradeEvent$Type): void
public "tradeCost"(arg0: $TradeEvent$TradeCostEvent$Type): void
public "loadFromJson"(arg0: $JsonObject$Type): void
public static "Parse"(arg0: $JsonArray$Type, arg1: $ITradeRuleHost$Type): $List<($TradeRule)>
public static "ValidateTradeRuleActiveStates"(arg0: $List$Type<($TradeRule$Type)>): boolean
public "receiveUpdateMessage"(arg0: $LazyPacketData$Type): void
public static "ValidateTradeRuleList"(arg0: $List$Type<($TradeRule$Type)>, arg1: $ITradeRuleHost$Type): boolean
get "name"(): $MutableComponent
get "active"(): boolean
set "active"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeRule$Type = ($TradeRule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeRule_ = $TradeRule$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeSettingNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$ChangeSettingNotification$Advanced, $ChangeSettingNotification$Advanced$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeSettingNotification$Advanced"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$ChangeSettingNotification$Simple, $ChangeSettingNotification$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/settings/$ChangeSettingNotification$Simple"

export class $ChangeSettingNotification extends $Notification {
static readonly "ADVANCED_TYPE": $NotificationType<($ChangeSettingNotification$Advanced)>
static readonly "SIMPLE_TYPE": $NotificationType<($ChangeSettingNotification$Simple)>


public "getCategory"(): $NotificationCategory
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeSettingNotification$Type = ($ChangeSettingNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeSettingNotification_ = $ChangeSettingNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$BookRenderer" {
import {$BookRendererGenerator, $BookRendererGenerator$Type} from "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$BookRendererGenerator"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $BookRenderer {


public static "register"(arg0: $BookRendererGenerator$Type): void
public "render"(arg0: $BlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public static "GetRenderer"(arg0: $ItemStack$Type): $BookRenderer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookRenderer$Type = ($BookRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookRenderer_ = $BookRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/upgrades/slot/$UpgradeInputSlot" {
import {$IUpgradeable, $IUpgradeable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$IUpgradeable"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$SimpleSlot, $SimpleSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$SimpleSlot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $UpgradeInputSlot extends $SimpleSlot {
static readonly "EMPTY_UPGRADE_SLOT": $ResourceLocation
 "active": boolean
 "locked": boolean
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer, arg4: $IUpgradeable$Type)
constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer, arg4: $IUpgradeable$Type, arg5: $Runnable$Type)

public "mayPlace"(arg0: $ItemStack$Type): boolean
public "getNoItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
public "setChanged"(): void
public "getMaxStackSize"(): integer
get "noItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
get "maxStackSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeInputSlot$Type = ($UpgradeInputSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeInputSlot_ = $UpgradeInputSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/builtin/$PlayerOwnerProvider" {
import {$IPotentialOwnerProvider, $IPotentialOwnerProvider$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$IPotentialOwnerProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PotentialOwner, $PotentialOwner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner"
import {$List, $List$Type} from "packages/java/util/$List"

export class $PlayerOwnerProvider implements $IPotentialOwnerProvider {
static readonly "INSTANCE": $IPotentialOwnerProvider


public "collectPotentialOwners"(arg0: $Player$Type): $List<($PotentialOwner)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerOwnerProvider$Type = ($PlayerOwnerProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerOwnerProvider_ = $PlayerOwnerProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/$CommandTicket" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CommandTicket {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandTicket$Type = ($CommandTicket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandTicket_ = $CommandTicket$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/easy/$EasyMultiBGSlot" {
import {$EasySlot, $EasySlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/easy/$EasySlot"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EasyMultiBGSlot extends $EasySlot {
static readonly "EMPTY_SLOT_BG": $ResourceLocation
static readonly "BACKGROUND": $Pair<($ResourceLocation), ($ResourceLocation)>
 "active": boolean
 "locked": boolean
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer)

public "getNoItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
get "noItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyMultiBGSlot$Type = ($EasyMultiBGSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyMultiBGSlot_ = $EasyMultiBGSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$OwnerSelectButton" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$PotentialOwner, $PotentialOwner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$ITooltipWidget, $ITooltipWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipWidget"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"

export class $OwnerSelectButton extends $EasyButton implements $ITooltipWidget {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "HEIGHT": integer
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: $Runnable$Type, arg3: $Supplier$Type<($OwnerData$Type)>, arg4: $Supplier$Type<($PotentialOwner$Type)>, arg5: $Supplier$Type<(boolean)>)

public "getOwner"(): $PotentialOwner
public "getTooltipText"(): $List<($Component)>
public "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
public "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
get "owner"(): $PotentialOwner
get "tooltipText"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnerSelectButton$Type = ($OwnerSelectButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnerSelectButton_ = $OwnerSelectButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$TriFunction" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $TriFunction<T, U, V, W> {

 "apply"(arg0: T, arg1: U, arg2: V): W

(arg0: T, arg1: U, arg2: V): W
}

export namespace $TriFunction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TriFunction$Type<T, U, V, W> = ($TriFunction<(T), (U), (V), (W)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TriFunction_<T, U, V, W> = $TriFunction$Type<(T), (U), (V), (W)>;
}}
declare module "packages/io/github/steveplays28/noisium/$Noisium" {
import {$Logger, $Logger$Type} from "packages/org/slf4j/$Logger"

export class $Noisium {
static readonly "MOD_ID": string
static readonly "MOD_NAME": string
static readonly "LOGGER": $Logger

constructor()

public static "initialize"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Noisium$Type = ($Noisium);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Noisium_ = $Noisium$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType$Simple" {
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $UpgradeType$Simple extends $UpgradeType {

constructor(...arg0: ($Component$Type)[])

public "getTooltip"(arg0: $UpgradeData$Type): $List<($Component)>
public "withTarget"(arg0: $Component$Type): $UpgradeType$Simple
public "withTarget"(arg0: $ItemLike$Type): $UpgradeType$Simple
public "withTarget"(arg0: $RegistryObject$Type<(any)>): $UpgradeType$Simple
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeType$Simple$Type = ($UpgradeType$Simple);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeType$Simple_ = $UpgradeType$Simple$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$EnchantedItemForCoinsTrade" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EnchantedItemForCoinsTrade$Serializer, $EnchantedItemForCoinsTrade$Serializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$EnchantedItemForCoinsTrade$Serializer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EnchantedItemForCoinsTrade implements $VillagerTrades$ItemListing {
static readonly "TYPE": $ResourceLocation
static readonly "SERIALIZER": $EnchantedItemForCoinsTrade$Serializer

constructor(arg0: $ItemLike$Type, arg1: integer, arg2: $ItemLike$Type, arg3: integer, arg4: integer, arg5: float, arg6: double)

public "getOffer"(arg0: $Entity$Type, arg1: $RandomSource$Type): $MerchantOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantedItemForCoinsTrade$Type = ($EnchantedItemForCoinsTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantedItemForCoinsTrade_ = $EnchantedItemForCoinsTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$AuctionHouseEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$AuctionHouseTrader, $AuctionHouseTrader$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/$AuctionHouseTrader"

export class $AuctionHouseEvent extends $Event {

constructor()

public "isCancelable"(): boolean
public "getAuctionHouse"(): $AuctionHouseTrader
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "auctionHouse"(): $AuctionHouseTrader
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionHouseEvent$Type = ($AuctionHouseEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionHouseEvent_ = $AuctionHouseEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$PlayerTradeMenu" {
import {$IPlayerTrade, $IPlayerTrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$IPlayerTrade"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $PlayerTradeMenu extends $LazyMessageMenu {
readonly "tradeID": integer
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: integer, arg3: $IPlayerTrade$Type)

public "isClient"(): boolean
public "setChatReceiver"(arg0: $Consumer$Type<($Component$Type)>): void
public "showSlots"(): void
public "SendChatToServer"(arg0: string): void
public "hideSlots"(): void
public "getAvailableFunds"(): $MoneyView
public "onTradeChange"(): void
public "removed"(arg0: $Player$Type): void
public "isHost"(): boolean
public "reloadTrade"(arg0: $IPlayerTrade$Type): void
public "getTradeData"(): $IPlayerTrade
public "myState"(): integer
public "otherState"(): integer
public "isServer"(): boolean
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
get "client"(): boolean
set "chatReceiver"(value: $Consumer$Type<($Component$Type)>)
get "availableFunds"(): $MoneyView
get "host"(): boolean
get "tradeData"(): $IPlayerTrade
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerTradeMenu$Type = ($PlayerTradeMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerTradeMenu_ = $PlayerTradeMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$FloatListOption" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ListOption, $ListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ListOption"

export class $FloatListOption extends $ListOption<(float)> {


public static "create"(arg0: $List$Type<(float)>, arg1: float, arg2: float): $FloatListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(float)>)>): $FloatListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(float)>)>, arg1: float): $FloatListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(float)>)>, arg1: float, arg2: float): $FloatListOption
public static "create"(arg0: $List$Type<(float)>, arg1: float): $FloatListOption
public static "create"(arg0: $List$Type<(float)>): $FloatListOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FloatListOption$Type = ($FloatListOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FloatListOption_ = $FloatListOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$CoinJarBlock" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IEasyEntityBlock, $IEasyEntityBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IEasyEntityBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$RotatableBlock, $RotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $CoinJarBlock extends $RotatableBlock implements $IEasyEntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)
constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $VoxelShape$Type)

public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "playerWillDestroy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "getCloneItemStack"(arg0: $BlockState$Type, arg1: $HitResult$Type, arg2: $BlockGetter$Type, arg3: $BlockPos$Type, arg4: $Player$Type): $ItemStack
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getAllowedTypes"(): $Collection<($BlockEntityType<(any)>)>
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "allowedTypes"(): $Collection<($BlockEntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinJarBlock$Type = ($CoinJarBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinJarBlock_ = $CoinJarBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/tradeinterface/$ItemTraderInterfaceBlock" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$TraderInterfaceBlock, $TraderInterfaceBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blocks/$TraderInterfaceBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ItemTraderInterfaceBlock extends $TraderInterfaceBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTraderInterfaceBlock$Type = ($ItemTraderInterfaceBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTraderInterfaceBlock_ = $ItemTraderInterfaceBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/trader/$PaygateNotification" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$PaygateTradeData, $PaygateTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/paygate/tradedata/$PaygateTradeData"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$TraderCategory, $TraderCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$TraderCategory"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$TaxableNotification, $TaxableNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/$TaxableNotification"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $PaygateNotification extends $TaxableNotification {
static readonly "TYPE": $NotificationType<($PaygateNotification)>


public "getCategory"(): $NotificationCategory
public "getNormalMessage"(): $MutableComponent
public static "createMoney"(arg0: $PaygateTradeData$Type, arg1: $MoneyValue$Type, arg2: $PlayerReference$Type, arg3: $TraderCategory$Type, arg4: $MoneyValue$Type): $NonNullSupplier<($Notification)>
public static "createTicket"(arg0: $PaygateTradeData$Type, arg1: boolean, arg2: $PlayerReference$Type, arg3: $TraderCategory$Type): $NonNullSupplier<($Notification)>
get "category"(): $NotificationCategory
get "normalMessage"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaygateNotification$Type = ($PaygateNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaygateNotification_ = $PaygateNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/containers/$SuppliedContainer" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $SuppliedContainer implements $Container {
readonly "source": $Supplier<($Container)>

constructor(arg0: $Supplier$Type<($Container$Type)>)
constructor(arg0: $Supplier$Type<($Container$Type)>, arg1: $Container$Type)

public "setChanged"(): void
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stillValid"(arg0: $Player$Type): boolean
public "stopOpen"(arg0: $Player$Type): void
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "containerSize"(): integer
get "empty"(): boolean
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppliedContainer$Type = ($SuppliedContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppliedContainer_ = $SuppliedContainer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/discord/$LCDiscord" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCDiscord {

constructor()

public static "setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCDiscord$Type = ($LCDiscord);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCDiscord_ = $LCDiscord$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/tax_collector/$OwnershipClientTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$OwnershipTab, $OwnershipTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$OwnershipTab"
import {$TaxCollectorScreen, $TaxCollectorScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TaxCollectorScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TaxCollectorClientTab, $TaxCollectorClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorClientTab"

export class $OwnershipClientTab extends $TaxCollectorClientTab<($OwnershipTab)> {
readonly "screen": $TaxCollectorScreen
readonly "menu": $TaxCollectorMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $OwnershipTab$Type)

public "tick"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
get "icon"(): $IconData
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnershipClientTab$Type = ($OwnershipClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnershipClientTab_ = $OwnershipClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$CapabilityMoneyViewer" {
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CapabilityMoneyViewer {


public static "createProvider"(arg0: $IMoneyViewer$Type): $ICapabilityProvider
public static "getCapability"(arg0: $ItemStack$Type): $IMoneyViewer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapabilityMoneyViewer$Type = ($CapabilityMoneyViewer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapabilityMoneyViewer_ = $CapabilityMoneyViewer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderinterface/item/$ItemStorageClientTab" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$IMouseListener, $IMouseListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$ItemStorageTab, $ItemStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/item/$ItemStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $ItemStorageClientTab extends $TraderInterfaceClientTab<($ItemStorageTab)> implements $IScrollable, $IMouseListener {
readonly "commonTab": T

constructor(arg0: $TraderInterfaceScreen$Type, arg1: $ItemStorageTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
public "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
get "icon"(): $IconData
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemStorageClientTab$Type = ($ItemStorageClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemStorageClientTab_ = $ItemStorageClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/world/$WorldArea" {
import {$WorldPosition, $WorldPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/world/$WorldPosition"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $WorldArea {
static readonly "VOID": $WorldArea
static readonly "INFINITE_VOID": $WorldArea


public static "of"(arg0: $WorldPosition$Type, arg1: integer, arg2: integer, arg3: integer): $WorldArea
public static "of"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: integer, arg3: integer, arg4: integer): $WorldArea
public "isVoid"(): boolean
public "getCenter"(): $WorldPosition
public static "ofInfiniteRange"(arg0: $WorldPosition$Type): $WorldArea
public "isInfiniteRange"(): boolean
public "isInArea"(arg0: $WorldPosition$Type): boolean
public "isInArea"(arg0: $BlockPos$Type): boolean
public "getCorner1"(): $BlockPos
public "getCorner2"(): $BlockPos
get "void"(): boolean
get "center"(): $WorldPosition
get "infiniteRange"(): boolean
get "corner1"(): $BlockPos
get "corner2"(): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldArea$Type = ($WorldArea);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldArea_ = $WorldArea$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$ItemRequirement" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export class $ItemRequirement implements $Predicate<($ItemStack)> {
static readonly "NULL": $ItemRequirement
readonly "filter": $Predicate<($ItemStack)>
readonly "count": integer


public "test"(arg0: $ItemStack$Type): boolean
public static "of"(arg0: $Item$Type, arg1: integer): $ItemRequirement
public static "of"(arg0: $ItemStack$Type): $ItemRequirement
public static "of"(arg0: $Predicate$Type<($ItemStack$Type)>, arg1: integer): $ItemRequirement
public "merge"(arg0: $ItemRequirement$Type): $ItemRequirement
public "isNull"(): boolean
public static "getRandomItemsMatchingRequirements"(arg0: $IItemHandler$Type, arg1: $ItemRequirement$Type, arg2: $ItemRequirement$Type): $List<($ItemStack)>
public static "ofItemNoNBT"(arg0: $ItemStack$Type): $ItemRequirement
public static "getRandomItem"(arg0: $List$Type<($ItemStack$Type)>, arg1: integer): $ItemStack
public static "getValidItems"(arg0: $IItemHandler$Type, arg1: $ItemRequirement$Type): $List<($ItemStack)>
public static "getFirstItemsMatchingRequirements"(arg0: $IItemHandler$Type, ...arg1: ($ItemRequirement$Type)[]): $List<($ItemStack)>
public static "getFirstItemsMatchingRequirements"(arg0: $Container$Type, ...arg1: ($ItemRequirement$Type)[]): $List<($ItemStack)>
public static "isNotInList"(arg0: $List$Type<($ItemStack$Type)>, arg1: $ItemStack$Type): boolean
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($ItemStack)>
public "negate"(): $Predicate<($ItemStack)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($ItemStack)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($ItemStack)>
public static "isEqual"<T>(arg0: any): $Predicate<($ItemStack)>
get "null"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemRequirement$Type = ($ItemRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemRequirement_ = $ItemRequirement$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/permissions/$BooleanPermission" {
import {$PermissionOption, $PermissionOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/permissions/$PermissionOption"

export class $BooleanPermission extends $PermissionOption {
readonly "permission": string


public static "of"(arg0: string): $BooleanPermission
public "tick"(): void
public "widgetWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BooleanPermission$Type = ($BooleanPermission);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BooleanPermission_ = $BooleanPermission$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$CoinMintBlock" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IEasyEntityBlock, $IEasyEntityBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IEasyEntityBlock"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$RotatableBlock, $RotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $CoinMintBlock extends $RotatableBlock implements $IEasyEntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getAllowedTypes"(): $Collection<($BlockEntityType<(any)>)>
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "allowedTypes"(): $Collection<($BlockEntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinMintBlock$Type = ($CoinMintBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinMintBlock_ = $CoinMintBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseCancelNotification" {
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$AuctionHouseNotification, $AuctionHouseNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseNotification"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AuctionHouseCancelNotification extends $AuctionHouseNotification {
static readonly "TYPE": $NotificationType<($AuctionHouseCancelNotification)>

constructor(arg0: $AuctionTradeData$Type)

public "getMessage"(): $MutableComponent
get "message"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionHouseCancelNotification$Type = ($AuctionHouseCancelNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionHouseCancelNotification_ = $AuctionHouseCancelNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/$ItemTraderBlockEntityRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemTradeData, $ItemTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemTraderBlockEntity, $ItemTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$ItemTraderBlockEntity"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Quaternionf, $Quaternionf$Type} from "packages/org/joml/$Quaternionf"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $ItemTraderBlockEntityRenderer implements $BlockEntityRenderer<($ItemTraderBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $ItemTraderBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public static "getRotation"(arg0: float): $Quaternionf
public static "getRotationTime"(): long
public static "renderItems"(arg0: $ItemTraderBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public static "GetRenderItems"(arg0: $ItemTradeData$Type): $List<($ItemStack)>
public static "onClientTick"(arg0: $TickEvent$ClientTickEvent$Type): void
public "shouldRender"(arg0: $ItemTraderBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $ItemTraderBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "rotationTime"(): long
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTraderBlockEntityRenderer$Type = ($ItemTraderBlockEntityRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTraderBlockEntityRenderer_ = $ItemTraderBlockEntityRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$ItemEditWidget$IItemEditListener" {
import {$ItemTradeData, $ItemTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ItemEditWidget$IItemEditListener {

 "onItemClicked"(arg0: $ItemStack$Type): void
 "getTrade"(): $ItemTradeData
 "restrictItemEditItems"(): boolean
}

export namespace $ItemEditWidget$IItemEditListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemEditWidget$IItemEditListener$Type = ($ItemEditWidget$IItemEditListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemEditWidget$IItemEditListener_ = $ItemEditWidget$IItemEditListener$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/blockentity/$TraderBlockEntity" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$EasyBlockEntity, $EasyBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$EasyBlockEntity"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IServerTicker, $IServerTicker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IServerTicker"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$IOwnableBlockEntity, $IOwnableBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$IOwnableBlockEntity"

export class $TraderBlockEntity<D extends $TraderData> extends $EasyBlockEntity implements $IOwnableBlockEntity, $IServerTicker {
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "initialize"(arg0: $Player$Type, arg1: $ItemStack$Type): void
public "onLoad"(): void
public "saveCurrentTraderAsCustomTrader"(): void
public "getRawTraderData"(): $TraderData
/**
 * 
 * @deprecated
 */
public "setTraderID"(arg0: long): void
public "markDirty"(): void
public "getTraderID"(): long
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
public "getRenderBoundingBox"(): $AABB
public "serverTick"(): void
public "getTraderData"(): D
public "flagAsLegitBreak"(): void
public "legitimateBreak"(): boolean
public "onBreak"(): void
public "canBreak"(arg0: $Player$Type): boolean
get "rawTraderData"(): $TraderData
set "traderID"(value: long)
get "traderID"(): long
get "renderBoundingBox"(): $AABB
get "traderData"(): D
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderBlockEntity$Type<D> = ($TraderBlockEntity<(D)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderBlockEntity_<D> = $TraderBlockEntity$Type<(D)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export interface $IMoneyHolder extends $IMoneyHandler {

 "priority"(): integer
 "getTooltipTitle"(): $Component
 "inversePriority"(): integer
 "formatTooltip"(arg0: $List$Type<($Component$Type)>): void
 "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
 "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
 "flagAsKnown"(arg0: any): void
 "forgetContext"(arg0: any): void
 "hasStoredMoneyChanged"(arg0: any): boolean
 "getStoredMoney"(): $MoneyView
}

export namespace $IMoneyHolder {
function sortPayFirst(arg0: $List$Type<($IMoneyHolder$Type)>): void
function sortTakeFirst(arg0: $List$Type<($IMoneyHolder$Type)>): void
function defaultTooltipFormat(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMoneyHolder$Type = ($IMoneyHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMoneyHolder_ = $IMoneyHolder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/input/$MoneyValueWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$MoneyInputHandler, $MoneyInputHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/input/$MoneyInputHandler"
import {$EasyWidgetWithChildren, $EasyWidgetWithChildren$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $MoneyValueWidget extends $EasyWidgetWithChildren {
static readonly "HEIGHT": integer
static readonly "WIDTH": integer
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "SPRITE_FREE_TOGGLE": $Sprite
static readonly "SPRITE_UP_ARROW": $Sprite
static readonly "SPRITE_DOWN_ARROW": $Sprite
static readonly "SPRITE_LEFT_ARROW": $Sprite
static readonly "SPRITE_RIGHT_ARROW": $Sprite
static readonly "EMPTY_CONSUMER": $Consumer<($MoneyValue)>
 "drawBG": boolean
 "allowFreeInput": boolean
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ScreenPosition$Type, arg1: $MoneyValueWidget$Type, arg2: $MoneyValue$Type, arg3: $Consumer$Type<($MoneyValue$Type)>)
constructor(arg0: integer, arg1: integer, arg2: $MoneyValueWidget$Type, arg3: $MoneyValue$Type, arg4: $Consumer$Type<($MoneyValue$Type)>)

public "getCurrentHandler"(): $MoneyInputHandler
public "lock"(): void
public "isLocked"(): boolean
public "unlock"(): void
public "getCurrentValue"(): $MoneyValue
public "changeValue"(arg0: $MoneyValue$Type): void
public "hideFromMouse"(): boolean
public "addChildren"(): void
public "getFont"(): $Font
public "getCurrentHandlerType"(): string
public "setHandlerChangeListener"(arg0: $Consumer$Type<($MoneyValueWidget$Type)>): void
get "currentHandler"(): $MoneyInputHandler
get "locked"(): boolean
get "currentValue"(): $MoneyValue
get "font"(): $Font
get "currentHandlerType"(): string
set "handlerChangeListener"(value: $Consumer$Type<($MoneyValueWidget$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyValueWidget$Type = ($MoneyValueWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyValueWidget_ = $MoneyValueWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CashRegisterBlockEntity" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"

export class $CashRegisterBlockEntity extends $BlockEntity implements $ITraderSource {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "getTraders"(): $List<($TraderData)>
public "isSingleTrader"(): boolean
public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
public "OpenContainer"(arg0: $Player$Type): void
public "loadDataFromItems"(arg0: $CompoundTag$Type): void
public "getUpdateTag"(): $CompoundTag
public "getSingleTrader"(): $TraderData
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
get "traders"(): $List<($TraderData)>
get "singleTrader"(): boolean
get "updateTag"(): $CompoundTag
get "singleTrader"(): $TraderData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CashRegisterBlockEntity$Type = ($CashRegisterBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CashRegisterBlockEntity_ = $CashRegisterBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/$NotificationButton" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$InventoryButton, $InventoryButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/$InventoryButton"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $NotificationButton extends $InventoryButton {
static readonly "SIZE": integer
static readonly "OFFSET": $ScreenPosition
static readonly "SPRITE_NORMAL": $Sprite
static readonly "SPRITE_UNSEEN": $Sprite
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $AbstractContainerScreen$Type<(any)>)

public static "tryRenderTooltip"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationButton$Type = ($NotificationButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationButton_ = $NotificationButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$TradeButtonArea" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$WidgetAddon, $WidgetAddon$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon"
import {$ScrollBarWidget, $ScrollBarWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$ScrollBarWidget"
import {$EasyWidgetWithChildren, $EasyWidgetWithChildren$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren"
import {$ITooltipSource, $ITooltipSource$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$TradeButton, $TradeButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$TradeButton"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$IEasyTickable, $IEasyTickable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IEasyTickable"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TradeButtonArea$InteractionConsumer, $TradeButtonArea$InteractionConsumer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$TradeButtonArea$InteractionConsumer"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"

export class $TradeButtonArea extends $EasyWidgetWithChildren implements $IScrollable, $ITooltipSource, $IEasyTickable {
static readonly "FILTER_VALID": $Function<($TradeData), (boolean)>
static readonly "FILTER_ANY": $Function<($TradeData), (boolean)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $Supplier$Type<(any)>, arg1: $Function$Type<($TraderData$Type), ($TradeContext$Type)>, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: $BiConsumer$Type<($TraderData$Type), ($TradeData$Type)>, arg7: $Function$Type<($TradeData$Type), (boolean)>)

public "tick"(): void
public "renderTick"(): void
public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
public "getTrader"(arg0: integer): $TraderData
public "addChildren"(): void
public "withAddons"(...arg0: ($WidgetAddon$Type)[]): $TradeButtonArea
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "getHoveredButton"(arg0: $ScreenPosition$Type): $TradeButton
public "withTitle"(arg0: $ScreenPosition$Type, arg1: integer, arg2: boolean): $TradeButtonArea
/**
 * 
 * @deprecated
 */
public "getScrollBar"(): $ScrollBarWidget
public "getTradeAndTrader"(arg0: integer, arg1: integer): $Pair<($TraderData), ($TradeData)>
public "getTradeAndTrader"(arg0: integer): $Pair<($TraderData), ($TradeData)>
public "getAvailableWidth"(): integer
public "getTradesInRows"(): $List<($List<($Pair<($TraderData), ($TradeData)>)>)>
public "setSelectionDefinition"(arg0: $BiFunction$Type<($TraderData$Type), ($TradeData$Type), (boolean)>): void
public "setInteractionConsumer"(arg0: $TradeButtonArea$InteractionConsumer$Type): void
public "withScrollBarHeight"(arg0: integer): $TradeButtonArea
public "getMinAvailableWidth"(): integer
public "withScrollBarOffset"(arg0: $ScreenPosition$Type): $TradeButtonArea
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
public "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
get "maxScroll"(): integer
set "scroll"(value: integer)
get "scrollBar"(): $ScrollBarWidget
get "availableWidth"(): integer
get "tradesInRows"(): $List<($List<($Pair<($TraderData), ($TradeData)>)>)>
set "selectionDefinition"(value: $BiFunction$Type<($TraderData$Type), ($TradeData$Type), (boolean)>)
set "interactionConsumer"(value: $TradeButtonArea$InteractionConsumer$Type)
get "minAvailableWidth"(): integer
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeButtonArea$Type = ($TradeButtonArea);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeButtonArea_ = $TradeButtonArea$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/enchantments/$WalletEnchantment" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $WalletEnchantment extends $Enchantment {
readonly "category": $EnchantmentCategory


public "addWalletTooltips"(arg0: $List$Type<($Component$Type)>, arg1: integer, arg2: $ItemStack$Type): void
public static "addWalletEnchantmentTooltips"(arg0: $List$Type<($Component$Type)>, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletEnchantment$Type = ($WalletEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletEnchantment_ = $WalletEnchantment$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/source/builtin/$PlayerBankAccountSource" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$BankAccountSource, $BankAccountSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/source/$BankAccountSource"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"

export class $PlayerBankAccountSource extends $BankAccountSource {
static readonly "INSTANCE": $BankAccountSource


public "CollectAllReferences"(arg0: boolean): $List<($BankReference)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerBankAccountSource$Type = ($PlayerBankAccountSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerBankAccountSource_ = $PlayerBankAccountSource$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/notifications/$MarkAsSeenButton" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EasyTextButton, $EasyTextButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyTextButton"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $MarkAsSeenButton extends $EasyTextButton {
static readonly "HEIGHT": integer
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: $Component$Type, arg3: $Consumer$Type<($EasyButton$Type)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MarkAsSeenButton$Type = ($MarkAsSeenButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MarkAsSeenButton_ = $MarkAsSeenButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/tags/$LCItemTagProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$TagsProvider$TagLookup, $TagsProvider$TagLookup$Type} from "packages/net/minecraft/data/tags/$TagsProvider$TagLookup"
import {$ExistingFileHelper, $ExistingFileHelper$Type} from "packages/net/minecraftforge/common/data/$ExistingFileHelper"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ItemTagsProvider, $ItemTagsProvider$Type} from "packages/net/minecraft/data/tags/$ItemTagsProvider"

export class $LCItemTagProvider extends $ItemTagsProvider {

constructor(arg0: $PackOutput$Type, arg1: $CompletableFuture$Type<($HolderLookup$Provider$Type)>, arg2: $CompletableFuture$Type<($TagsProvider$TagLookup$Type<($Block$Type)>)>, arg3: $ExistingFileHelper$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCItemTagProvider$Type = ($LCItemTagProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCItemTagProvider_ = $LCItemTagProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$EnchantedItemForCoinsTrade$Serializer" {
import {$ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingSerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingSerializer"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ItemListingSerializer$IItemListingDeserializer, $ItemListingSerializer$IItemListingDeserializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingDeserializer"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EnchantedItemForCoinsTrade$Serializer implements $ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingDeserializer {


public "getType"(): $ResourceLocation
public "deserialize"(arg0: $JsonObject$Type): $VillagerTrades$ItemListing
public "serializeInternal"(arg0: $JsonObject$Type, arg1: $VillagerTrades$ItemListing$Type): $JsonObject
public "serialize"(arg0: $VillagerTrades$ItemListing$Type): $JsonObject
get "type"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantedItemForCoinsTrade$Serializer$Type = ($EnchantedItemForCoinsTrade$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantedItemForCoinsTrade$Serializer_ = $EnchantedItemForCoinsTrade$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$TransferTab" {
import {$ATMScreen, $ATMScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$ATMScreen"
import {$ATMTab, $ATMTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$ATMTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TransferTab extends $ATMTab {
static readonly "RESPONSE_DURATION": integer

constructor(arg0: $ATMScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "closeAction"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $MutableComponent
public "SelectTeam"(arg0: integer): void
public "selectedTeam"(): $Team
get "icon"(): $IconData
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TransferTab$Type = ($TransferTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TransferTab_ = $TransferTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$BankAPI" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$BankReferenceType, $BankReferenceType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReferenceType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IBankAccountAdvancedMenu, $IBankAccountAdvancedMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/menu/$IBankAccountAdvancedMenu"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BankAccountSource, $BankAccountSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/source/$BankAccountSource"
import {$IBankAccountMenu, $IBankAccountMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/menu/$IBankAccountMenu"

export class $BankAPI {
static readonly "API": $BankAPI

constructor()

/**
 * 
 * @deprecated
 */
public static "getType"(arg0: $ResourceLocation$Type): $BankReferenceType
public "BankDeposit"(arg0: $IBankAccountMenu$Type, arg1: $MoneyValue$Type): void
public "BankDeposit"(arg0: $Player$Type, arg1: $Container$Type, arg2: $BankReference$Type, arg3: $MoneyValue$Type): void
public "BankWithdraw"(arg0: $IBankAccountMenu$Type, arg1: $MoneyValue$Type): void
public "BankWithdraw"(arg0: $Player$Type, arg1: $Container$Type, arg2: $BankReference$Type, arg3: $MoneyValue$Type): void
public "BankTransfer"(arg0: $IBankAccountAdvancedMenu$Type, arg1: $MoneyValue$Type, arg2: $IBankAccount$Type): $MutableComponent
public "BankTransfer"(arg0: $Player$Type, arg1: $BankReference$Type, arg2: $MoneyValue$Type, arg3: $IBankAccount$Type): $MutableComponent
public "BankDepositFromServer"(arg0: $IBankAccount$Type, arg1: $MoneyValue$Type): boolean
public "BankDepositFromServer"(arg0: $IBankAccount$Type, arg1: $MoneyValue$Type, arg2: boolean): boolean
public "BankWithdrawFromServer"(arg0: $IBankAccount$Type, arg1: $MoneyValue$Type): $Pair<(boolean), ($MoneyValue)>
public "BankWithdrawFromServer"(arg0: $IBankAccount$Type, arg1: $MoneyValue$Type, arg2: boolean): $Pair<(boolean), ($MoneyValue)>
public "GetAllBankReferences"(arg0: boolean): $List<($BankReference)>
public "RegisterBankAccountSource"(arg0: $BankAccountSource$Type): void
/**
 * 
 * @deprecated
 */
public static "WithdrawCoins"(arg0: $Player$Type, arg1: $Container$Type, arg2: $IBankAccount$Type, arg3: $MoneyValue$Type): void
/**
 * 
 * @deprecated
 */
public static "WithdrawCoins"(arg0: $IBankAccountMenu$Type, arg1: $MoneyValue$Type): void
/**
 * 
 * @deprecated
 */
public static "ServerGiveCoins"(arg0: $IBankAccount$Type, arg1: $MoneyValue$Type): boolean
/**
 * 
 * @deprecated
 */
public static "DepositCoins"(arg0: $Player$Type, arg1: $Container$Type, arg2: $IBankAccount$Type, arg3: $MoneyValue$Type): void
/**
 * 
 * @deprecated
 */
public static "DepositCoins"(arg0: $IBankAccountMenu$Type, arg1: $MoneyValue$Type): void
/**
 * 
 * @deprecated
 */
public static "ServerTakeCoins"(arg0: $IBankAccount$Type, arg1: $MoneyValue$Type): $Pair<(boolean), ($MoneyValue)>
public "GetAllBankAccounts"(arg0: boolean): $List<($IBankAccount)>
/**
 * 
 * @deprecated
 */
public static "TransferCoins"(arg0: $IBankAccountAdvancedMenu$Type, arg1: $MoneyValue$Type, arg2: $BankReference$Type): $MutableComponent
/**
 * 
 * @deprecated
 */
public static "TransferCoins"(arg0: $Player$Type, arg1: $IBankAccount$Type, arg2: $MoneyValue$Type, arg3: $IBankAccount$Type): $MutableComponent
public "GetReferenceType"(arg0: $ResourceLocation$Type): $BankReferenceType
/**
 * 
 * @deprecated
 */
public static "registerType"(arg0: $BankReferenceType$Type): void
public "RegisterReferenceType"(arg0: $BankReferenceType$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankAPI$Type = ($BankAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankAPI_ = $BankAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket$Simple" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"

export class $ServerToClientPacket$Simple extends $ServerToClientPacket {

constructor()

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerToClientPacket$Simple$Type = ($ServerToClientPacket$Simple);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerToClientPacket$Simple_ = $ServerToClientPacket$Simple$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$BlacklistSlot" {
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $BlacklistSlot extends $Slot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer, arg4: $Container$Type, arg5: integer)

public "mayPlace"(arg0: $ItemStack$Type): boolean
public "setBlacklist"(arg0: $Container$Type, arg1: integer): void
public "getBlacklistedItem"(): $ItemStack
get "blacklistedItem"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlacklistSlot$Type = ($BlacklistSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlacklistSlot_ = $BlacklistSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $IconData {
static readonly "BLANK": $IconData

constructor()

public static "of"(arg0: $ItemStack$Type): $IconData
public static "of"(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer): $IconData
public static "of"(arg0: $Sprite$Type): $IconData
public static "of"(arg0: $Component$Type): $IconData
public static "of"(arg0: $Component$Type, arg1: integer): $IconData
public static "of"(...arg0: ($IconData$Type)[]): $IconData
public static "of"(arg0: $ItemLike$Type): $IconData
public static "of"(arg0: $ItemStack$Type, arg1: string): $IconData
public static "of"(arg0: $RegistryObject$Type<(any)>): $IconData
public static "of"(arg0: $RegistryObject$Type<(any)>, arg1: string): $IconData
public static "of"(arg0: $ItemLike$Type, arg1: string): $IconData
public "render"(arg0: $EasyGuiGraphics$Type, arg1: integer, arg2: integer): void
public "render"(arg0: $EasyGuiGraphics$Type, arg1: $ScreenPosition$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconData$Type = ($IconData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconData_ = $IconData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseBuyerNotification" {
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$AuctionHouseNotification, $AuctionHouseNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseNotification"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AuctionHouseBuyerNotification extends $AuctionHouseNotification {
static readonly "TYPE": $NotificationType<($AuctionHouseBuyerNotification)>

constructor(arg0: $AuctionTradeData$Type)

public "getMessage"(): $MutableComponent
get "message"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionHouseBuyerNotification$Type = ($AuctionHouseBuyerNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionHouseBuyerNotification_ = $AuctionHouseBuyerNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/$SpeedUpgrade" {
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"

export class $SpeedUpgrade extends $UpgradeType {
static "DELAY_AMOUNT": string

constructor()

public "getTooltip"(arg0: $UpgradeData$Type): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpeedUpgrade$Type = ($SpeedUpgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpeedUpgrade_ = $SpeedUpgrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/types/builtin/$CoinCurrencyType" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IPlayerMoneyHandler, $IPlayerMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$IPlayerMoneyHandler"
import {$CurrencyType, $CurrencyType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$CurrencyType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MoneyValueParser, $MoneyValueParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValueParser"
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $CoinCurrencyType extends $CurrencyType {
static readonly "TYPE": $ResourceLocation
static readonly "INSTANCE": $CoinCurrencyType


public static "getUniqueName"(arg0: string): string
public "getInputHandlers"(arg0: $Player$Type): $List<(any)>
public "getValueParser"(): $MoneyValueParser
public "createMoneyHandlerForContainer"(arg0: $Container$Type, arg1: $Consumer$Type<($ItemStack$Type)>): $IMoneyHandler
public "createMoneyHandlerForPlayer"(arg0: $Player$Type): $IPlayerMoneyHandler
public "loadMoneyValueJson"(arg0: $JsonObject$Type): $MoneyValue
public "loadMoneyValue"(arg0: $CompoundTag$Type): $MoneyValue
get "valueParser"(): $MoneyValueParser
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinCurrencyType$Type = ($CoinCurrencyType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinCurrencyType_ = $CoinCurrencyType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/builtin/$SimpleArrowIcon$ArrowType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SimpleArrowIcon$ArrowType extends $Enum<($SimpleArrowIcon$ArrowType)> {
static readonly "UP": $SimpleArrowIcon$ArrowType
static readonly "DOWN": $SimpleArrowIcon$ArrowType
static readonly "LEFT": $SimpleArrowIcon$ArrowType
static readonly "RIGHT": $SimpleArrowIcon$ArrowType
readonly "uOffset": integer


public static "values"(): ($SimpleArrowIcon$ArrowType)[]
public static "valueOf"(arg0: string): $SimpleArrowIcon$ArrowType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleArrowIcon$ArrowType$Type = (("left") | ("up") | ("right") | ("down")) | ($SimpleArrowIcon$ArrowType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleArrowIcon$ArrowType_ = $SimpleArrowIcon$ArrowType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderStorageMenu" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$IMoneyCollectionMenu, $IMoneyCollectionMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/$IMoneyCollectionMenu"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$CoinSlot, $CoinSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$CoinSlot"
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$IValidatedMenu, $IValidatedMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$IValidatedMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TraderStorageMenu extends $LazyMessageMenu implements $IValidatedMenu, $ITraderStorageMenu, $IMoneyCollectionMenu {
static readonly "SLOT_OFFSET": integer
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: long, arg3: $MenuValidator$Type)

public "getContext"(): $TradeContext
public "getValidator"(): $MenuValidator
public "getCoinSlots"(): $List<($CoinSlot)>
public "clearContainer"(arg0: $Container$Type): void
public "getAllTabs"(): $Map<(integer), ($TraderStorageTab)>
public "getCurrentTab"(): $TraderStorageTab
public "getCurrentTabIndex"(): integer
public "SetCoinSlotsActive"(arg0: boolean): void
public "validateCoinSlots"(): void
public "AddCoins"(): void
public "HasCoinsToAdd"(): boolean
public "clearTab"(arg0: integer): void
public "setTab"(arg0: integer, arg1: $TraderStorageTab$Type): void
public "getTrader"(): $TraderData
public "createTabChangeMessage"(arg0: integer, arg1: $LazyPacketData$Builder$Type): $LazyPacketData$Builder
public "createTabChangeMessage"(arg0: integer): $LazyPacketData$Builder
public "areCoinSlotsVisible"(): boolean
public "createCoinSlotActiveMessage"(arg0: boolean, arg1: $LazyPacketData$Builder$Type): $LazyPacketData$Builder
public "removed"(arg0: $Player$Type): void
public "getPlayer"(): $Player
public "getPermissionLevel"(arg0: string): integer
public "CollectStoredMoney"(): void
public "changeTab"(arg0: integer): void
public "changeTab"(arg0: integer, arg1: $LazyPacketData$Builder$Type): void
public "addListener"(arg0: $Consumer$Type<($LazyPacketData$Type)>): void
public "getHeldItem"(): $ItemStack
public "setHeldItem"(arg0: $ItemStack$Type): void
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "hasPermission"(arg0: string): boolean
public "SendMessage"(arg0: $LazyPacketData$Builder$Type): void
public "isClient"(): boolean
get "context"(): $TradeContext
get "validator"(): $MenuValidator
get "coinSlots"(): $List<($CoinSlot)>
get "allTabs"(): $Map<(integer), ($TraderStorageTab)>
get "currentTab"(): $TraderStorageTab
get "currentTabIndex"(): integer
get "trader"(): $TraderData
get "player"(): $Player
get "heldItem"(): $ItemStack
set "heldItem"(value: $ItemStack$Type)
get "client"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderStorageMenu$Type = ($TraderStorageMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderStorageMenu_ = $TraderStorageMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/$OwnerType" {
import {$Owner, $Owner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/$Owner"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $OwnerType {


public "load"(arg0: $CompoundTag$Type): $Owner
public static "create"(arg0: $ResourceLocation$Type, arg1: $Function$Type<($CompoundTag$Type), ($Owner$Type)>): $OwnerType
public "getID"(): $ResourceLocation
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnerType$Type = ($OwnerType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnerType_ = $OwnerType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/slot_machine/$SlotMachineEntryEditWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$SlotMachineEntryClientTab, $SlotMachineEntryClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/slot_machine/$SlotMachineEntryClientTab"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IEasyTickable, $IEasyTickable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IEasyTickable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$EasyWidgetWithChildren, $EasyWidgetWithChildren$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ITooltipSource, $ITooltipSource$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SlotMachineEntryEditWidget extends $EasyWidgetWithChildren implements $IEasyTickable, $ITooltipSource {
static readonly "WIDTH": integer
static readonly "HEIGHT": integer
readonly "tab": $SlotMachineEntryClientTab
readonly "entryIndex": $Supplier<(integer)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ScreenPosition$Type, arg1: $SlotMachineEntryClientTab$Type, arg2: $Supplier$Type<(integer)>)
constructor(arg0: integer, arg1: integer, arg2: $SlotMachineEntryClientTab$Type, arg3: $Supplier$Type<(integer)>)

public "tick"(): void
public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
public "addChildren"(): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineEntryEditWidget$Type = ($SlotMachineEntryEditWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineEntryEditWidget_ = $SlotMachineEntryEditWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$LogTab" {
import {$ATMScreen, $ATMScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$ATMScreen"
import {$ATMTab, $ATMTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$ATMTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $LogTab extends $ATMTab {

constructor(arg0: $ATMScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LogTab$Type = ($LogTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LogTab_ = $LogTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$PlayerDiscounts" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$PriceTweakingTradeRule, $PriceTweakingTradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$PriceTweakingTradeRule"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$TradeEvent$PreTradeEvent, $TradeEvent$PreTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$TradeEvent$TradeCostEvent, $TradeEvent$TradeCostEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$TradeCostEvent"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"

export class $PlayerDiscounts extends $PriceTweakingTradeRule {
static readonly "TYPE": $TradeRuleType<($PlayerDiscounts)>
readonly "type": $TradeRuleType<(any)>


public "createTab"(arg0: $TradeRulesClientTab$Type<(any)>): $TradeRulesClientSubTab
public "isOnList"(arg0: $PlayerReference$Type): boolean
public "setDiscount"(arg0: integer): void
public "getDiscount"(): integer
public "getPlayerList"(): $ImmutableList<($PlayerReference)>
public "loadPersistentData"(arg0: $CompoundTag$Type): void
public "savePersistentData"(): $CompoundTag
public "saveToJson"(arg0: $JsonObject$Type): $JsonObject
public "beforeTrade"(arg0: $TradeEvent$PreTradeEvent$Type): void
public "tradeCost"(arg0: $TradeEvent$TradeCostEvent$Type): void
public "loadFromJson"(arg0: $JsonObject$Type): void
set "discount"(value: integer)
get "discount"(): integer
get "playerList"(): $ImmutableList<($PlayerReference)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerDiscounts$Type = ($PlayerDiscounts);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerDiscounts_ = $PlayerDiscounts$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/restrictions/$EquipmentRestriction" {
import {$ItemTradeRestriction, $ItemTradeRestriction$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/restrictions/$ItemTradeRestriction"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EquipmentRestriction extends $ItemTradeRestriction {
static readonly "HEAD": $EquipmentRestriction
static readonly "CHEST": $EquipmentRestriction
static readonly "LEGS": $EquipmentRestriction
static readonly "FEET": $EquipmentRestriction
static readonly "NO_RESTRICTION_KEY": $ResourceLocation
static readonly "NONE": $ItemTradeRestriction


public "getEmptySlotBG"(): $Pair<($ResourceLocation), ($ResourceLocation)>
public "allowItemSelectItem"(arg0: $ItemStack$Type): boolean
public "allowSellItem"(arg0: $ItemStack$Type): boolean
public "getEquipmentSlot"(): $EquipmentSlot
get "emptySlotBG"(): $Pair<($ResourceLocation), ($ResourceLocation)>
get "equipmentSlot"(): $EquipmentSlot
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipmentRestriction$Type = ($EquipmentRestriction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipmentRestriction_ = $EquipmentRestriction$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$MagnetUpgradeItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MagnetUpgradeItem extends $UpgradeItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Supplier$Type<(integer)>, arg1: $Item$Properties$Type)

public "fillUpgradeData"(arg0: $UpgradeData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetUpgradeItem$Type = ($MagnetUpgradeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetUpgradeItem_ = $MagnetUpgradeItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$DirectionalSettingsWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DirectionalSettingsWidget {
static readonly "BLOCK_SIDE_TEXTURE": $ResourceLocation
 "visible": boolean

constructor(arg0: $ScreenPosition$Type, arg1: $Function$Type<($Direction$Type), (boolean)>, arg2: $ImmutableList$Type<($Direction$Type)>, arg3: $Consumer$Type<($Direction$Type)>, arg4: $Consumer$Type<(any)>)
constructor(arg0: integer, arg1: integer, arg2: $Function$Type<($Direction$Type), (boolean)>, arg3: $ImmutableList$Type<($Direction$Type)>, arg4: $Consumer$Type<($Direction$Type)>, arg5: $Consumer$Type<(any)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DirectionalSettingsWidget$Type = ($DirectionalSettingsWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DirectionalSettingsWidget_ = $DirectionalSettingsWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/$AuctionHouseTrader" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TraderMenu, $TraderMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu"
import {$AuctionPlayerStorage, $AuctionPlayerStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/$AuctionPlayerStorage"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$IEasyTickable, $IEasyTickable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IEasyTickable"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TradeResult, $TradeResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeResult"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"

export class $AuctionHouseTrader extends $TraderData implements $IEasyTickable {
static readonly "TYPE": $TraderType<($AuctionHouseTrader)>
static readonly "ICON": $IconData
static readonly "GLOBAL_TRADE_LIMIT": integer
readonly "type": $TraderType<(any)>
readonly "statTracker": $StatTracker


public "getName"(): $MutableComponent
public "tick"(): void
public static "isEnabled"(): boolean
public "getTradeIndex"(arg0: $AuctionTradeData$Type): integer
public "makeBid"(arg0: $Player$Type, arg1: $TraderMenu$Type, arg2: integer, arg3: $MoneyValue$Type): void
public "getIcon"(): $IconData
public "saveAdditional"(arg0: $CompoundTag$Type): void
public "loadAdditional"(arg0: $CompoundTag$Type): void
public "showOnTerminal"(): boolean
public "shouldRemove"(arg0: $MinecraftServer$Type): boolean
public "isCreative"(): boolean
public "getPermissionLevel"(arg0: $Player$Type, arg1: string): integer
public "getPermissionLevel"(arg0: $PlayerReference$Type, arg1: string): integer
public "getTradeData"(): $List<(any)>
public "hasValidTrade"(): boolean
public "getTradeStock"(arg0: integer): integer
public "getTradeCount"(): integer
public "canMakePersistent"(): boolean
public "markTradesDirty"(): void
public "getTrade"(arg0: integer): $AuctionTradeData
public "ExecuteTrade"(arg0: $TradeContext$Type, arg1: integer): $TradeResult
public "removeTrade"(arg0: $Player$Type): void
public "initStorageTabs"(arg0: $ITraderStorageMenu$Type): void
public "addTrade"(arg0: $AuctionTradeData$Type, arg1: boolean): void
public "addTrade"(arg0: $Player$Type): void
public "markStorageDirty"(): void
public "getStorage"(arg0: $Player$Type): $AuctionPlayerStorage
public "getStorage"(arg0: $PlayerReference$Type): $AuctionPlayerStorage
public static "shouldShowOnTerminal"(): boolean
public "getStorageDisplayFilter"(arg0: $ITraderStorageMenu$Type): $Function<($TradeData), (boolean)>
public "getTerminalTextColor"(): integer
public "hasPersistentAuction"(arg0: string): boolean
public "loadAdditionalPersistentData"(arg0: $CompoundTag$Type): void
public "getAdditionalContents"(arg0: $List$Type<($ItemStack$Type)>): void
public "saveAdditionalPersistentData"(arg0: $CompoundTag$Type): void
public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
get "name"(): $MutableComponent
get "enabled"(): boolean
get "icon"(): $IconData
get "creative"(): boolean
get "tradeData"(): $List<(any)>
get "tradeCount"(): integer
get "terminalTextColor"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionHouseTrader$Type = ($AuctionHouseTrader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionHouseTrader_ = $AuctionHouseTrader$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/overlay/$WalletDisplayOverlay$DisplayType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $WalletDisplayOverlay$DisplayType extends $Enum<($WalletDisplayOverlay$DisplayType)> {
static readonly "ITEMS_WIDE": $WalletDisplayOverlay$DisplayType
static readonly "ITEMS_NARROW": $WalletDisplayOverlay$DisplayType
static readonly "TEXT": $WalletDisplayOverlay$DisplayType


public static "values"(): ($WalletDisplayOverlay$DisplayType)[]
public static "valueOf"(arg0: string): $WalletDisplayOverlay$DisplayType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletDisplayOverlay$DisplayType$Type = (("items_narrow") | ("text") | ("items_wide")) | ($WalletDisplayOverlay$DisplayType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletDisplayOverlay$DisplayType_ = $WalletDisplayOverlay$DisplayType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/command/$SPacketSyncAdminList" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncAdminList extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncAdminList)>

constructor(arg0: $List$Type<($UUID$Type)>)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncAdminList$Type = ($SPacketSyncAdminList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncAdminList_ = $SPacketSyncAdminList$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$EnchantedBookForCoinsTrade$Serializer" {
import {$ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingSerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingSerializer"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ItemListingSerializer$IItemListingDeserializer, $ItemListingSerializer$IItemListingDeserializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingDeserializer"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EnchantedBookForCoinsTrade$Serializer implements $ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingDeserializer {


public "getType"(): $ResourceLocation
public "deserialize"(arg0: $JsonObject$Type): $VillagerTrades$ItemListing
public "serializeInternal"(arg0: $JsonObject$Type, arg1: $VillagerTrades$ItemListing$Type): $JsonObject
public "serialize"(arg0: $VillagerTrades$ItemListing$Type): $JsonObject
get "type"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantedBookForCoinsTrade$Serializer$Type = ($EnchantedBookForCoinsTrade$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantedBookForCoinsTrade$Serializer_ = $EnchantedBookForCoinsTrade$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/trader/$CPacketOpenNetworkTerminal" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketOpenNetworkTerminal extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketOpenNetworkTerminal)>

constructor()
constructor(arg0: boolean)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketOpenNetworkTerminal$Type = ($CPacketOpenNetworkTerminal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketOpenNetworkTerminal_ = $CPacketOpenNetworkTerminal$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/walletslot/$CPacketSetVisible" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketSetVisible extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketSetVisible)>

constructor(arg0: integer, arg1: boolean)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketSetVisible$Type = ($CPacketSetVisible);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketSetVisible_ = $CPacketSetVisible$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/time/$SPacketSyncTime" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$PacketDistributor$PacketTarget, $PacketDistributor$PacketTarget$Type} from "packages/net/minecraftforge/network/$PacketDistributor$PacketTarget"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncTime extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncTime)>


public "encode"(arg0: $FriendlyByteBuf$Type): void
public static "syncWith"(arg0: $PacketDistributor$PacketTarget$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncTime$Type = ($SPacketSyncTime);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncTime_ = $SPacketSyncTime$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/$InputTraderData" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$PermissionOption, $PermissionOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/permissions/$PermissionOption"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"

export class $InputTraderData extends $TraderData {
readonly "ignoreSides": $ImmutableList<($Direction)>
static readonly "GLOBAL_TRADE_LIMIT": integer
readonly "type": $TraderType<(any)>
readonly "statTracker": $StatTracker


public "allowInputSide"(arg0: $Direction$Type): boolean
public "hasInputSide"(): boolean
public "setOutputSide"(arg0: $Player$Type, arg1: $Direction$Type, arg2: boolean): void
public static "getFacingName"(arg0: $Direction$Type): $MutableComponent
public "hasOutputSide"(): boolean
public "setInputSide"(arg0: $Player$Type, arg1: $Direction$Type, arg2: boolean): void
public "allowOutputSide"(arg0: $Direction$Type): boolean
public "addSettingsTabs"(arg0: $TraderSettingsClientTab$Type, arg1: $List$Type<($SettingsSubTab$Type)>): void
public "inputSettingsTabTooltip"(): $MutableComponent
public "inputSettingsAddons"(): $List<(any)>
public "inputSettingsTabIcon"(): $IconData
public "addPermissionOptions"(arg0: $List$Type<($PermissionOption$Type)>): void
public "handleSettingsChange"(arg0: $Player$Type, arg1: $LazyPacketData$Type): void
public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InputTraderData$Type = ($InputTraderData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InputTraderData_ = $InputTraderData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$IEasyScreen, $IEasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IEasyScreen"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $ScreenPosition {
static readonly "ZERO": $ScreenPosition
readonly "x": integer
readonly "y": integer


public "toString"(): string
public static "of"(arg0: integer, arg1: integer): $ScreenPosition
public static "of"(arg0: double, arg1: double): $ScreenPosition
public static "of"(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer): $ScreenPosition
public static "of"(arg0: $IEasyScreen$Type, arg1: integer, arg2: integer): $ScreenPosition
public "offset"(arg0: $ScreenPosition$Type): $ScreenPosition
public "offset"(arg0: integer, arg1: integer): $ScreenPosition
public "offset"(arg0: $AbstractWidget$Type): $ScreenPosition
public "offset"(arg0: $IEasyScreen$Type): $ScreenPosition
public static "getScreenCorner"(arg0: $AbstractContainerScreen$Type<(any)>): $ScreenPosition
public "offsetScreen"(arg0: $AbstractContainerScreen$Type<(any)>): $ScreenPosition
public static "ofOptional"(arg0: integer, arg1: integer): $LazyOptional<($ScreenPosition)>
public "asArea"(arg0: integer, arg1: integer): $ScreenArea
public "setPosition"(arg0: $AbstractWidget$Type): void
public "isMouseInArea"(arg0: double, arg1: double, arg2: integer, arg3: integer): boolean
public "isMouseInArea"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): boolean
public "isMouseInArea"(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer): boolean
set "position"(value: $AbstractWidget$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenPosition$Type = ($ScreenPosition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenPosition_ = $ScreenPosition$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$CoinChestTab$Upgrade" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CoinChestTab, $CoinChestTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$CoinChestTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $CoinChestTab$Upgrade extends $CoinChestTab {


public "getIcon"(): $IconData
public "getTooltip"(): $Component
get "icon"(): $IconData
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestTab$Upgrade$Type = ($CoinChestTab$Upgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestTab$Upgrade_ = $CoinChestTab$Upgrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$RandomTrade$Serializer" {
import {$ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingSerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingSerializer"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ItemListingSerializer$IItemListingDeserializer, $ItemListingSerializer$IItemListingDeserializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingDeserializer"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $RandomTrade$Serializer implements $ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingDeserializer {


public "getType"(): $ResourceLocation
public "deserialize"(arg0: $JsonObject$Type): $VillagerTrades$ItemListing
public "serializeInternal"(arg0: $JsonObject$Type, arg1: $VillagerTrades$ItemListing$Type): $JsonObject
public "serialize"(arg0: $VillagerTrades$ItemListing$Type): $JsonObject
get "type"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomTrade$Serializer$Type = ($RandomTrade$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomTrade$Serializer_ = $RandomTrade$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$ArmorDisplayTraderBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemTraderBlockEntity, $ItemTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$ItemTraderBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemTraderData, $ItemTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderData"

export class $ArmorDisplayTraderBlockEntity extends $ItemTraderBlockEntity {
static readonly "TRADE_COUNT": integer
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "buildNewTrader"(): $ItemTraderData
public "killIntrudingArmorStands"(): void
public "load"(arg0: $CompoundTag$Type): void
public "m_183515_"(arg0: $CompoundTag$Type): void
public "serverTick"(): void
public "validateArmorStand"(): void
public "destroyArmorStand"(): void
public "flagAsLoaded"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorDisplayTraderBlockEntity$Type = ($ArmorDisplayTraderBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorDisplayTraderBlockEntity_ = $ArmorDisplayTraderBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"
import {$EasyMenu, $EasyMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$EasyMenu"

export class $LazyMessageMenu extends $EasyMenu {
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public "SendMessageToServer"(arg0: $LazyPacketData$Builder$Type): void
public "SendMessageToClient"(arg0: $LazyPacketData$Builder$Type): void
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "SendMessage"(arg0: $LazyPacketData$Builder$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LazyMessageMenu$Type = ($LazyMessageMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LazyMessageMenu_ = $LazyMessageMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/$CoinManagementScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$CoinManagementMenu, $CoinManagementMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinManagementMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EditableChainData, $EditableChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/$EditableChainData"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $CoinManagementScreen extends $EasyMenuScreen<($CoinManagementMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $CoinManagementMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "getEditableChains"(): $Collection<($EditableChainData)>
public "DeleteChain"(arg0: string): void
public "CreateChain"(arg0: string, arg1: $ItemLike$Type, arg2: string): void
public "ChangeChainID"(arg0: string, arg1: string, arg2: boolean): void
public "SaveChanges"(): void
public "getSelectedChain"(): $EditableChainData
get "editableChains"(): $Collection<($EditableChainData)>
get "selectedChain"(): $EditableChainData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinManagementScreen$Type = ($CoinManagementScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinManagementScreen_ = $CoinManagementScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/$IPermissions" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export interface $IPermissions {

 "hasPermission"(arg0: $Player$Type, arg1: string): boolean
 "hasPermission"(arg0: $PlayerReference$Type, arg1: string): boolean
 "getPermissionLevel"(arg0: $PlayerReference$Type, arg1: string): integer
 "getPermissionLevel"(arg0: $Player$Type, arg1: string): integer
}

export namespace $IPermissions {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPermissions$Type = ($IPermissions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPermissions_ = $IPermissions$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$EnchantedBookForCoinsTrade" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$EnchantedBookForCoinsTrade$Serializer, $EnchantedBookForCoinsTrade$Serializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$EnchantedBookForCoinsTrade$Serializer"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EnchantedBookForCoinsTrade implements $VillagerTrades$ItemListing {
static readonly "TYPE": $ResourceLocation
static readonly "SERIALIZER": $EnchantedBookForCoinsTrade$Serializer

constructor(arg0: integer)
constructor(arg0: $Item$Type, arg1: integer, arg2: integer, arg3: integer, arg4: float)

public "getOffer"(arg0: $Entity$Type, arg1: $RandomSource$Type): $MerchantOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantedBookForCoinsTrade$Type = ($EnchantedBookForCoinsTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantedBookForCoinsTrade_ = $EnchantedBookForCoinsTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$BuildDefaultMoneyDataEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData$Builder, $ChainData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData$Builder"
import {$CoinEntry, $CoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$CoinEntry"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BuildDefaultMoneyDataEvent extends $Event {

constructor()

public "available"(arg0: string): boolean
public "exists"(arg0: string): boolean
public "isCancelable"(): boolean
public "getFinalResult"(): $Map<(string), ($ChainData$Builder)>
public "getExistingBuilder"(arg0: string): $ChainData$Builder
public static "getExistingEntries"(): $List<($CoinEntry)>
public "addDefault"(arg0: $ChainData$Builder$Type): void
public "addDefault"(arg0: $ChainData$Builder$Type, arg1: boolean): void
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "finalResult"(): $Map<(string), ($ChainData$Builder)>
get "existingEntries"(): $List<($CoinEntry)>
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuildDefaultMoneyDataEvent$Type = ($BuildDefaultMoneyDataEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuildDefaultMoneyDataEvent_ = $BuildDefaultMoneyDataEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $TaxCollectorTab implements $IClientTracker {
readonly "menu": $TaxCollectorMenu


public "getEntry"(): $TaxEntry
public "isClient"(): boolean
public "addMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "canBeAccessed"(): boolean
public "hasAccess"(): boolean
public "isServerEntry"(): boolean
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "isOwner"(): boolean
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "quickMoveStack"(arg0: $ItemStack$Type): boolean
public "isAdmin"(): boolean
public "isServer"(): boolean
get "entry"(): $TaxEntry
get "client"(): boolean
get "serverEntry"(): boolean
get "owner"(): boolean
get "admin"(): boolean
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxCollectorTab$Type = ($TaxCollectorTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxCollectorTab_ = $TaxCollectorTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$TextRenderUtil$TextFormatting" {
import {$TextRenderUtil$TextFormatting$Centering, $TextRenderUtil$TextFormatting$Centering$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$TextRenderUtil$TextFormatting$Centering"

export class $TextRenderUtil$TextFormatting {


public "leftEdge"(): $TextRenderUtil$TextFormatting
public "topEdge"(): $TextRenderUtil$TextFormatting
public "bottomEdge"(): $TextRenderUtil$TextFormatting
public static "create"(): $TextRenderUtil$TextFormatting
public "color"(): integer
public "color"(arg0: integer): $TextRenderUtil$TextFormatting
public "middle"(): $TextRenderUtil$TextFormatting
public "centering"(): $TextRenderUtil$TextFormatting$Centering
public "centered"(): $TextRenderUtil$TextFormatting
public "rightEdge"(): $TextRenderUtil$TextFormatting
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextRenderUtil$TextFormatting$Type = ($TextRenderUtil$TextFormatting);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextRenderUtil$TextFormatting_ = $TextRenderUtil$TextFormatting$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/renderers/$EnchantedBookRenderer" {
import {$SimpleBookRenderer, $SimpleBookRenderer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$SimpleBookRenderer"
import {$BookRendererGenerator, $BookRendererGenerator$Type} from "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$BookRendererGenerator"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EnchantedBookRenderer extends $SimpleBookRenderer {
static readonly "MODEL_LOCATION": $ResourceLocation
static readonly "GENERATOR": $BookRendererGenerator


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantedBookRenderer$Type = ($EnchantedBookRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantedBookRenderer_ = $EnchantedBookRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/$LCText" {
import {$TraderInterfaceBlockEntity$InteractionType, $TraderInterfaceBlockEntity$InteractionType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$InteractionType"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$TradeResult, $TradeResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeResult"
import {$WoodType, $WoodType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType"
import {$Color, $Color$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$Color"
import {$TradeDirection, $TradeDirection$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeDirection"
import {$TextEntry, $TextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry"
import {$TextEntryBundle, $TextEntryBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntryBundle"
import {$TraderInterfaceBlockEntity$ActiveMode, $TraderInterfaceBlockEntity$ActiveMode$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$ActiveMode"
import {$CombinedTextEntry, $CombinedTextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$CombinedTextEntry"
import {$MultiLineTextEntry, $MultiLineTextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$MultiLineTextEntry"
import {$TimeUnitTextEntry, $TimeUnitTextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TimeUnitTextEntry"
import {$AdvancementTextEntry, $AdvancementTextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$AdvancementTextEntry"

export class $LCText {
static readonly "CREATIVE_GROUP_COINS": $TextEntry
static readonly "CREATIVE_GROUP_MACHINES": $TextEntry
static readonly "CREATIVE_GROUP_TRADING": $TextEntry
static readonly "CREATIVE_GROUP_UPGRADES": $TextEntry
static readonly "CREATIVE_GROUP_EXTRA": $TextEntry
static readonly "ITEM_COIN_COPPER": $TextEntry
static readonly "ITEM_COIN_COPPER_PLURAL": $TextEntry
static readonly "ITEM_COIN_COPPER_INITIAL": $TextEntry
static readonly "ITEM_COIN_IRON": $TextEntry
static readonly "ITEM_COIN_IRON_PLURAL": $TextEntry
static readonly "ITEM_COIN_IRON_INITIAL": $TextEntry
static readonly "ITEM_COIN_GOLD": $TextEntry
static readonly "ITEM_COIN_GOLD_PLURAL": $TextEntry
static readonly "ITEM_COIN_GOLD_INITIAL": $TextEntry
static readonly "ITEM_COIN_EMERALD": $TextEntry
static readonly "ITEM_COIN_EMERALD_PLURAL": $TextEntry
static readonly "ITEM_COIN_EMERALD_INITIAL": $TextEntry
static readonly "ITEM_COIN_DIAMOND": $TextEntry
static readonly "ITEM_COIN_DIAMOND_PLURAL": $TextEntry
static readonly "ITEM_COIN_DIAMOND_INITIAL": $TextEntry
static readonly "ITEM_COIN_NETHERITE": $TextEntry
static readonly "ITEM_COIN_NETHERITE_PLURAL": $TextEntry
static readonly "ITEM_COIN_NETHERITE_INITIAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_COPPER": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_COPPER_PLURAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_COPPER_INITIAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_IRON": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_IRON_PLURAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_IRON_INITIAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_GOLD": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_GOLD_PLURAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_GOLD_INITIAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_EMERALD": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_EMERALD_PLURAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_EMERALD_INITIAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_DIAMOND": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_DIAMOND_PLURAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_DIAMOND_INITIAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_NETHERITE": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_NETHERITE_PLURAL": $TextEntry
static readonly "ITEM_COIN_CHOCOLATE_NETHERITE_INITIAL": $TextEntry
static readonly "ITEM_WALLET_COPPER": $TextEntry
static readonly "ITEM_WALLET_IRON": $TextEntry
static readonly "ITEM_WALLET_GOLD": $TextEntry
static readonly "ITEM_WALLET_EMERALD": $TextEntry
static readonly "ITEM_WALLET_DIAMOND": $TextEntry
static readonly "ITEM_WALLET_NETHERITE": $TextEntry
static readonly "ITEM_TRADING_CORE": $TextEntry
static readonly "ITEM_TICKET": $TextEntry
static readonly "ITEM_PASS": $TextEntry
static readonly "ITEM_MASTER_TICKET": $TextEntry
static readonly "ITEM_TICKET_STUB": $TextEntry
static readonly "ITEM_GOLDEN_TICKET": $TextEntry
static readonly "ITEM_GOLDEN_PASS": $TextEntry
static readonly "ITEM_GOLDEN_MASTER_TICKET": $TextEntry
static readonly "ITEM_GOLDEN_TICKET_STUB": $TextEntry
static readonly "ITEM_UPGRADE_ITEM_CAPACITY_1": $TextEntry
static readonly "ITEM_UPGRADE_ITEM_CAPACITY_2": $TextEntry
static readonly "ITEM_UPGRADE_ITEM_CAPACITY_3": $TextEntry
static readonly "ITEM_UPGRADE_ITEM_CAPACITY_4": $TextEntry
static readonly "ITEM_UPGRADE_SPEED_1": $TextEntry
static readonly "ITEM_UPGRADE_SPEED_2": $TextEntry
static readonly "ITEM_UPGRADE_SPEED_3": $TextEntry
static readonly "ITEM_UPGRADE_SPEED_4": $TextEntry
static readonly "ITEM_UPGRADE_SPEED_5": $TextEntry
static readonly "ITEM_UPGRADE_NETWORK": $TextEntry
static readonly "ITEM_UPGRADE_HOPPER": $TextEntry
static readonly "ITEM_UPGRADE_COIN_EXCHANGE": $TextEntry
static readonly "ITEM_UPGRADE_MAGNET_1": $TextEntry
static readonly "ITEM_UPGRADE_MAGNET_2": $TextEntry
static readonly "ITEM_UPGRADE_MAGNET_3": $TextEntry
static readonly "ITEM_UPGRADE_MAGNET_4": $TextEntry
static readonly "ITEM_UPGRADE_SECURITY": $TextEntry
static readonly "ITEM_UPGRADE_TEMPLATE": $TextEntry
static readonly "BLOCK_COINPILE_COPPER": $TextEntry
static readonly "BLOCK_COINPILE_COPPER_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_IRON": $TextEntry
static readonly "BLOCK_COINPILE_IRON_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_GOLD": $TextEntry
static readonly "BLOCK_COINPILE_GOLD_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_EMERALD": $TextEntry
static readonly "BLOCK_COINPILE_EMERALD_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_DIAMOND": $TextEntry
static readonly "BLOCK_COINPILE_DIAMOND_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_NETHERITE": $TextEntry
static readonly "BLOCK_COINPILE_NETHERITE_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_COPPER": $TextEntry
static readonly "BLOCK_COINBLOCK_COPPER_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_IRON": $TextEntry
static readonly "BLOCK_COINBLOCK_IRON_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_GOLD": $TextEntry
static readonly "BLOCK_COINBLOCK_GOLD_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_EMERALD": $TextEntry
static readonly "BLOCK_COINBLOCK_EMERALD_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_DIAMOND": $TextEntry
static readonly "BLOCK_COINBLOCK_DIAMOND_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_NETHERITE": $TextEntry
static readonly "BLOCK_COINBLOCK_NETHERITE_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_COPPER": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_COPPER_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_IRON": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_IRON_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_GOLD": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_GOLD_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_EMERALD": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_EMERALD_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_DIAMOND": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_DIAMOND_PLURAL": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_NETHERITE": $TextEntry
static readonly "BLOCK_COINPILE_CHOCOLATE_NETHERITE_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_COPPER": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_COPPER_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_IRON": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_IRON_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_GOLD": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_GOLD_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_EMERALD": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_EMERALD_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_DIAMOND": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_DIAMOND_PLURAL": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_NETHERITE": $TextEntry
static readonly "BLOCK_COINBLOCK_CHOCOLATE_NETHERITE_PLURAL": $TextEntry
static readonly "BLOCK_CASH_REGISTER": $TextEntry
static readonly "BLOCK_COIN_MINT": $TextEntry
static readonly "BLOCK_TICKET_STATION": $TextEntry
static readonly "BLOCK_MONEY_CHEST": $TextEntry
static readonly "BLOCK_DISPLAY_CASE": $TextEntry
static readonly "BLOCK_SHELF": $TextEntryBundle<($WoodType)>
static readonly "BLOCK_SHELF_2x2": $TextEntryBundle<($WoodType)>
static readonly "BLOCK_CARD_DISPLAY": $TextEntryBundle<($WoodType)>
static readonly "BLOCK_VENDING_MACHINE": $TextEntryBundle<($Color)>
static readonly "BLOCK_FREEZER": $TextEntryBundle<($Color)>
static readonly "BLOCK_LARGE_VENDING_MACHINE": $TextEntryBundle<($Color)>
static readonly "BLOCK_PAYGATE": $TextEntry
static readonly "BLOCK_TICKET_KIOSK": $TextEntry
static readonly "BLOCK_SLOT_MACHINE": $TextEntry
static readonly "BLOCK_ARMOR_DISPLAY": $TextEntry
static readonly "BLOCK_BOOKSHELF_TRADER": $TextEntryBundle<($WoodType)>
static readonly "BLOCK_ITEM_NETWORK_TRADER_1": $TextEntry
static readonly "BLOCK_ITEM_NETWORK_TRADER_2": $TextEntry
static readonly "BLOCK_ITEM_NETWORK_TRADER_3": $TextEntry
static readonly "BLOCK_ITEM_NETWORK_TRADER_4": $TextEntry
static readonly "BLOCK_ITEM_TRADER_INTERFACE": $TextEntry
static readonly "BLOCK_TAX_COLLECTOR": $TextEntry
static readonly "BLOCK_AUCTION_STAND": $TextEntryBundle<($WoodType)>
static readonly "BLOCK_JAR_PIGGY_BANK": $TextEntry
static readonly "BLOCK_JAR_BLUE": $TextEntry
static readonly "BLOCK_JAR_SUS": $TextEntry
static readonly "ITEM_BLOCK_TERMINAL": $CombinedTextEntry
static readonly "ITEM_BLOCK_ATM": $CombinedTextEntry
static readonly "ENCHANTMENT_MONEY_MENDING": $TextEntry
static readonly "ENCHANTMENT_MONEY_MENDING_DESCRIPTION": $TextEntry
static readonly "ENCHANTMENT_COIN_MAGNET": $TextEntry
static readonly "ENCHANTMENT_COIN_MAGNET_DESCRIPTION": $TextEntry
static readonly "GAMERULE_KEEP_WALLET": $TextEntry
static readonly "GAMERULE_COIN_DROP_PERCENT": $TextEntry
static readonly "PROFESSION_BANKER": $TextEntry
static readonly "PROFESSION_CASHIER": $TextEntry
static readonly "KEY_WALLET": $TextEntry
static readonly "KEY_PORTABLE_TERMINAL": $TextEntry
static readonly "KEY_PORTABLE_ATM": $TextEntry
static readonly "SOUND_COINS_CLINKING": $TextEntry
static readonly "TOOLTIP_UPGRADE_TEMPLATE": $MultiLineTextEntry
static readonly "TOOLTIP_HEALING": $TextEntry
static readonly "TOOLTIP_BETA": $TextEntry
static readonly "TOOLTIP_DISABLED": $TextEntry
static readonly "TOOLTIP_INFO_BLURB": $TextEntry
static readonly "TOOLTIP_TICKET_ID": $TextEntry
static readonly "TOOLTIP_PASS": $TextEntry
static readonly "TOOLTIP_ITEM_TRADER": $MultiLineTextEntry
static readonly "TOOLTIP_ITEM_TRADER_ARMOR": $MultiLineTextEntry
static readonly "TOOLTIP_ITEM_TRADER_TICKET": $MultiLineTextEntry
static readonly "TOOLTIP_ITEM_TRADER_BOOK": $MultiLineTextEntry
static readonly "TOOLTIP_ITEM_TRADER_NETWORK": $MultiLineTextEntry
static readonly "TOOLTIP_SLOT_MACHINE": $MultiLineTextEntry
static readonly "TOOLTIP_PAYGATE": $MultiLineTextEntry
static readonly "TOOLTIP_TERMINAL": $MultiLineTextEntry
static readonly "TOOLTIP_INTERFACE_ITEM": $MultiLineTextEntry
static readonly "TOOLTIP_TAX_COLLECTOR": $MultiLineTextEntry
static readonly "TOOLTIP_TAX_COLLECTOR_ADMIN_ONLY": $TextEntry
static readonly "TOOLTIP_ATM": $MultiLineTextEntry
static readonly "TOOLTIP_COIN_MINT_MINTABLE": $TextEntry
static readonly "TOOLTIP_COIN_MINT_MELTABLE": $TextEntry
static readonly "TOOLTIP_COIN_MINT_DISABLED_TOP": $TextEntry
static readonly "TOOLTIP_COIN_MINT_DISABLED_BOTTOM": $TextEntry
static readonly "TOOLTIP_TICKET_STATION": $MultiLineTextEntry
static readonly "TOOLTIP_CASH_REGISTER": $MultiLineTextEntry
static readonly "TOOLTIP_COIN_JAR": $MultiLineTextEntry
static readonly "TOOLTIP_COIN_JAR_COLORED": $TextEntry
static readonly "TOOLTIP_COLORED_ITEM": $TextEntry
static readonly "TOOLTIP_ANARCHY_WARNING": $TextEntry
static readonly "TOOLTIP_COIN_WORTH_DOWN": $TextEntry
static readonly "TOOLTIP_COIN_WORTH_UP": $TextEntry
static readonly "TOOLTIP_COIN_WORTH_VALUE": $TextEntry
static readonly "TOOLTIP_COIN_WORTH_VALUE_STACK": $TextEntry
static readonly "TOOLTIP_COIN_ADVANCED_CHAIN": $TextEntry
static readonly "TOOLTIP_COIN_ADVANCED_VALUE": $TextEntry
static readonly "TOOLTIP_COIN_ADVANCED_CORE_CHAIN": $TextEntry
static readonly "TOOLTIP_COIN_ADVANCED_SIDE_CHAIN": $TextEntry
static readonly "MESSAGE_WALLET_NONE_EQUIPPED": $TextEntry
static readonly "TOOLTIP_WALLET_STORED_MONEY": $TextEntry
static readonly "TOOLTIP_WALLET_PICKUP": $TextEntry
static readonly "TOOLTIP_WALLET_PICKUP_MAGNET": $TextEntry
static readonly "TOOLTIP_WALLET_EXCHANGE_MANUAL": $TextEntry
static readonly "TOOLTIP_WALLET_EXCHANGE_AUTO": $TextEntry
static readonly "TOOLTIP_WALLET_EXCHANGE_AUTO_ON": $TextEntry
static readonly "TOOLTIP_WALLET_EXCHANGE_AUTO_OFF": $TextEntry
static readonly "TOOLTIP_WALLET_BANK_ACCOUNT": $TextEntry
static readonly "MESSAGE_CASH_REGISTER_NOT_LINKED": $TextEntry
static readonly "TOOLTIP_CASH_REGISTER_INFO": $TextEntry
static readonly "TOOLTIP_CASH_REGISTER_INSTRUCTIONS": $TextEntry
static readonly "TOOLTIP_CASH_REGISTER_HOLD_SHIFT": $TextEntry
static readonly "TOOLTIP_CASH_REGISTER_DETAILS": $TextEntry
static readonly "TOOLTIP_COIN_JAR_HOLD_SHIFT": $TextEntry
static readonly "TOOLTIP_COIN_JAR_CONTENTS_SINGLE": $TextEntry
static readonly "TOOLTIP_COIN_JAR_CONTENTS_MULTIPLE": $TextEntry
static readonly "TOOLTIP_UPGRADE_TARGETS": $TextEntry
static readonly "TOOLTIP_UPGRADE_ITEM_CAPACITY": $TextEntry
static readonly "TOOLTIP_UPGRADE_SPEED": $TextEntry
static readonly "TOOLTIP_UPGRADE_NETWORK": $TextEntry
static readonly "TOOLTIP_UPGRADE_HOPPER": $TextEntry
static readonly "TOOLTIP_UPGRADE_COIN_EXCHANGE": $TextEntry
static readonly "TOOLTIP_UPGRADE_MAGNET": $TextEntry
static readonly "TOOLTIP_UPGRADE_SECURITY": $MultiLineTextEntry
static readonly "TOOLTIP_UPGRADE_TARGET_TRADER": $TextEntry
static readonly "TOOLTIP_UPGRADE_TARGET_TRADER_NOT_NETWORK": $TextEntry
static readonly "TOOLTIP_UPGRADE_TARGET_TRADER_ITEM": $TextEntry
static readonly "TOOLTIP_UPGRADE_TARGET_TRADER_INTERFACE": $TextEntry
static readonly "TOOLTIP_MONEY_SOURCE_BANK": $TextEntry
static readonly "TOOLTIP_MONEY_SOURCE_SLOTS": $TextEntry
static readonly "TOOLTIP_MONEY_SOURCE_PLAYER": $TextEntry
static readonly "TOOLTIP_MONEY_SOURCE_STORAGE": $TextEntry
static readonly "TOOLTIP_OWNER_PLAYER": $TextEntry
static readonly "TOOLTIP_OWNER_TEAM": $MultiLineTextEntry
static readonly "TOOLTIP_MONEY_MENDING_COST": $TextEntry
static readonly "TOOLTIP_OUT_OF_STOCK": $TextEntry
static readonly "TOOLTIP_OUT_OF_SPACE": $TextEntry
static readonly "TOOLTIP_CANNOT_AFFORD": $TextEntry
static readonly "TOOLTIP_TAX_LIMIT": $TextEntry
static readonly "TOOLTIP_DENIED": $TextEntry
static readonly "TOOLTIP_SLOT_MACHINE_TO_INTERACT": $TextEntry
static readonly "TOOLTIP_SLOT_MACHINE_TO_INFO": $TextEntry
static readonly "TOOLTIP_SLOT_MACHINE_ROLL_ONCE": $MultiLineTextEntry
static readonly "TOOLTIP_SLOT_MACHINE_ROLL_MULTI": $MultiLineTextEntry
static readonly "TOOLTIP_SLOT_MACHINE_NORMAL_COST": $TextEntry
static readonly "TOOLTIP_SLOT_MACHINE_COST_FREE": $TextEntry
static readonly "TOOLTIP_SLOT_MACHINE_UNDEFINED": $TextEntry
static readonly "TOOLTIP_SLOT_MACHINE_MONEY": $TextEntry
static readonly "TOOLTIP_SLOT_MACHINE_WEIGHT": $TextEntry
static readonly "TOOLTIP_SLOT_MACHINE_ODDS": $TextEntry
static readonly "GUI_NETWORK_TERMINAL_TITLE": $TextEntry
static readonly "GUI_NETWORK_TERMINAL_SEARCH": $TextEntry
static readonly "TOOLTIP_NETWORK_TERMINAL_TRADE_COUNT": $TextEntry
static readonly "TOOLTIP_NETWORK_TERMINAL_OUT_OF_STOCK_COUNT": $TextEntry
static readonly "TOOLTIP_NETWORK_TERMINAL_AUCTION_HOUSE": $TextEntry
static readonly "BUTTON_NOTIFICATIONS_MARK_AS_READ": $TextEntry
static readonly "TOOLTIP_TEAM_SELECT": $TextEntry
static readonly "BUTTON_TEAM_CREATE": $TextEntry
static readonly "GUI_TEAM_SELECT": $TextEntry
static readonly "GUI_TEAM_CREATE": $TextEntry
static readonly "TOOLTIP_TEAM_MEMBERS": $TextEntry
static readonly "TOOLTIP_TEAM_NAME": $TextEntry
static readonly "BUTTON_TEAM_RENAME": $TextEntry
static readonly "GUI_TEAM_NAME_CURRENT": $TextEntry
static readonly "TOOLTIP_TEAM_MEMBER_EDIT": $TextEntry
static readonly "BUTTON_TEAM_MEMBER_PROMOTE": $TextEntry
static readonly "TOOLTIP_TEAM_BANK": $TextEntry
static readonly "BUTTON_TEAM_BANK_CREATE": $TextEntry
static readonly "BUTTON_TEAM_BANK_LIMIT": $TextEntry
static readonly "TOOLTIP_TEAM_STATS": $TextEntry
static readonly "TOOLTIP_TEAM_OWNER": $TextEntry
static readonly "BUTTON_TEAM_DISBAND": $TextEntry
static readonly "GUI_TEAM_ID": $TextEntry
static readonly "TOOLTIP_ATM_EXCHANGE": $TextEntry
static readonly "TOOLTIP_ATM_SELECTION": $TextEntry
static readonly "BUTTON_BANK_MY_ACCOUNT": $TextEntry
static readonly "BUTTON_BANK_PLAYER_ACCOUNT": $TextEntry
static readonly "GUI_BANK_NO_TEAMS_AVAILABLE": $TextEntry
static readonly "GUI_BANK_SELECT_PLAYER_SUCCESS": $TextEntry
static readonly "TOOLTIP_ATM_INTERACT": $TextEntry
static readonly "TOOLTIP_ATM_NOTIFICATIONS": $TextEntry
static readonly "GUI_BANK_NOTIFICATIONS_DISABLED": $TextEntry
static readonly "GUI_BANK_NOTIFICATIONS_DETAILS": $TextEntry
static readonly "TOOLTIP_ATM_LOGS": $TextEntry
static readonly "TOOLTIP_ATM_TRANSFER": $TextEntry
static readonly "TOOLTIP_ATM_TRANSFER_MODE_PLAYER": $TextEntry
static readonly "TOOLTIP_ATM_TRANSFER_MODE_TEAM": $TextEntry
static readonly "BUTTON_ATM_TRANSFER_PLAYER": $TextEntry
static readonly "BUTTON_ATM_TRANSFER_TEAM": $TextEntry
static readonly "BUTTON_EXCHANGE_UPGRADE_EXCHANGE_WHILE_OPEN_YES": $TextEntry
static readonly "BUTTON_EXCHANGE_UPGRADE_EXCHANGE_WHILE_OPEN_NO": $TextEntry
static readonly "MESSAGE_COIN_CHEST_PROTECTION_WARNING": $TextEntry
static readonly "GUI_EJECTION_NO_DATA": $TextEntry
static readonly "GUI_COIN_MINT_TITLE": $TextEntry
static readonly "BUTTON_PLAYER_TRADING_PROPOSE": $TextEntry
static readonly "BUTTON_PLAYER_TRADING_ACCEPT": $TextEntry
static readonly "BUTTON_PLAYER_TRADING_CANCEL": $TextEntry
static readonly "TOOLTIP_PLAYER_TRADING_CHAT_OPEN": $TextEntry
static readonly "TOOLTIP_PLAYER_TRADING_CHAT_CLOSE": $TextEntry
static readonly "MESSAGE_TAX_COLLECTOR_PLACEMENT_TRADER": $TextEntry
static readonly "MESSAGE_TAX_COLLECTOR_PLACEMENT_TRADER_SERVER_ONLY": $TextEntry
static readonly "MESSAGE_TAX_COLLECTOR_PLACEMENT_TRADER_INFO": $TextEntry
static readonly "GUI_TAX_COLLECTOR_DEFAULT_NAME": $TextEntry
static readonly "GUI_TAX_COLLECTOR_DEFAULT_NAME_SERVER": $TextEntry
static readonly "TOOLTIP_TAX_COLLECTOR_BASIC": $TextEntry
static readonly "GUI_TAX_COLLECTOR_ACTIVE": $TextEntry
static readonly "GUI_TAX_COLLECTOR_RENDER_MODE_LABEL": $TextEntry
static readonly "GUI_TAX_COLLECTOR_RENDER_MODE_NONE": $TextEntry
static readonly "GUI_TAX_COLLECTOR_RENDER_MODE_MEMBERS": $TextEntry
static readonly "GUI_TAX_COLLECTOR_RENDER_MODE_ALL": $TextEntry
static readonly "GUI_TAX_COLLECTOR_TAX_RATE": $TextEntry
static readonly "GUI_TAX_COLLECTOR_AREA_INFINITE_LABEL": $TextEntry
static readonly "GUI_TAX_COLLECTOR_AREA_INFINITE_VOID": $TextEntry
static readonly "GUI_TAX_COLLECTOR_AREA_INFINITE_DIMENSION": $TextEntry
static readonly "GUI_TAX_COLLECTOR_AREA_RADIUS": $TextEntry
static readonly "GUI_TAX_COLLECTOR_AREA_HEIGHT": $TextEntry
static readonly "GUI_TAX_COLLECTOR_AREA_VERTOFFSET": $TextEntry
static readonly "TOOLTIP_TAX_COLLECTOR_LOGS": $TextEntry
static readonly "TOOLTIP_TAX_COLLECTOR_INFO": $TextEntry
static readonly "BUTTON_TAX_COLLECTOR_STATS_CLEAR": $TextEntry
static readonly "GUI_TAX_COLLECTOR_STATS_TOTAL_COLLECTED": $TextEntry
static readonly "GUI_TAX_COLLECTOR_STATS_UNIQUE_TAXABLES": $TextEntry
static readonly "GUI_TAX_COLLECTOR_STATS_MOST_TAXED_LABEL": $TextEntry
static readonly "GUI_TAX_COLLECTOR_STATS_MOST_TAXED_FORMAT": $TextEntry
static readonly "TOOLTIP_TAX_COLLECTOR_OWNER": $TextEntry
static readonly "TOOLTIP_TAX_COLLECTOR_ADMIN": $TextEntry
static readonly "GUI_TAX_COLLECTOR_FORCE_ACCEPTANCE": $TextEntry
static readonly "GUI_TAX_COLLECTOR_INFINITE_RANGE": $TextEntry
static readonly "GUI_TAX_COLLECTOR_TAXABLE_ACCEPT_COLLECTOR": $TextEntry
static readonly "TOOLTIP_TAX_COLLECTOR_TAXABLE_FORCE_IGNORE": $TextEntry
static readonly "TOOLTIP_TAX_COLLECTOR_TAXABLE_PARDON_IGNORED": $TextEntry
static readonly "MESSAGE_TAX_COLLECTOR_WARNING_MISSING_DATA": $TextEntry
static readonly "MESSAGE_TAX_COLLECTOR_WARNING_NO_ACCESS": $TextEntry
static readonly "GUI_TICKET_STATION_TITLE": $TextEntry
static readonly "TOOLTIP_TICKET_STATION_RECIPE_INFO": $TextEntry
static readonly "TOOLTIP_TICKET_STATION_SELECT_RECIPE": $TextEntry
static readonly "TOOLTIP_TICKET_STATION_CRAFT": $TextEntry
static readonly "GUI_INTERFACE_INTERACTION_TYPE": $TextEntryBundle<($TraderInterfaceBlockEntity$InteractionType)>
static readonly "GUI_INTERFACE_ACTIVE_MODE": $TextEntryBundle<($TraderInterfaceBlockEntity$ActiveMode)>
static readonly "TOOLTIP_INTERFACE_ONLINE_MODE_ON": $TextEntry
static readonly "TOOLTIP_INTERFACE_ONLINE_MODE_OFF": $TextEntry
static readonly "TOOLTIP_INTERFACE_INFO": $TextEntry
static readonly "TOOLTIP_INTERFACE_INFO_ACCEPT_CHANGES": $TextEntry
static readonly "GUI_INTERFACE_INFO_MISSING_PERMISSIONS": $TextEntry
static readonly "GUI_INTERFACE_INFO_TRADER_NULL": $TextEntry
static readonly "GUI_INTERFACE_INFO_TRADER_REMOVED": $TextEntry
static readonly "GUI_INTERFACE_INFO_TRADE_NOT_DEFINED": $TextEntry
static readonly "GUI_INTERFACE_INFO_TRADE_MISSING": $TextEntry
static readonly "TOOLTIP_INTERFACE_TRADER_SELECT": $TextEntry
static readonly "TOOLTIP_INTERFACE_TRADE_SELECT": $TextEntry
static readonly "TOOLTIP_INTERFACE_STORAGE": $TextEntry
static readonly "GUI_TRADE_RESULT": $TextEntryBundle<($TradeResult)>
static readonly "GUI_TRADE_DIFFERENCE_MISSING": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_TYPE": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_MONEY_TYPE": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_CHEAPER": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_EXPENSIVE": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_PURCHASE_CHEAPER": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_PURCHASE_EXPENSIVE": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_ITEM_SELLING": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_ITEM_PURCHASING": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_ITEM_TYPE": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_ITEM_NBT": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_ITEM_QUANTITY_MORE": $TextEntry
static readonly "GUI_TRADE_DIFFERENCE_ITEM_QUANTITY_LESS": $TextEntry
static readonly "TOOLTIP_WALLET_EXCHANGE": $TextEntry
static readonly "TOOLTIP_WALLET_AUTO_EXCHANGE_ENABLE": $TextEntry
static readonly "TOOLTIP_WALLET_AUTO_EXCHANGE_DISABLE": $TextEntry
static readonly "TOOLTIP_WALLET_OPEN_BANK": $TextEntry
static readonly "TOOLTIP_WALLET_OPEN_WALLET": $TextEntry
static readonly "GUI_TRADER_TITLE": $TextEntry
static readonly "GUI_TRADER_DEFAULT_NAME": $TextEntry
static readonly "TOOLTIP_TRADER_OPEN_STORAGE": $TextEntry
static readonly "TOOLTIP_TRADER_COLLECT_COINS": $TextEntry
static readonly "TOOLTIP_TRADER_NETWORK_BACK": $TextEntry
static readonly "TOOLTIP_TRADER_OPEN_TRADES": $TextEntry
static readonly "TOOLTIP_TRADER_STORE_COINS": $TextEntry
static readonly "TOOLTIP_TRADER_TRADE_RULES_TRADER": $TextEntry
static readonly "TOOLTIP_TRADER_TRADE_RULES_TRADE": $TextEntry
static readonly "GUI_TRADER_NO_TRADES": $TextEntry
static readonly "TOOLTIP_TRADER_EDIT_TRADES": $TextEntry
static readonly "TOOLTIP_TRADER_LOGS": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_NAME": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_CREATIVE_ENABLE": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_CREATIVE_DISABLE": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_CREATIVE_ADD_TRADE": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_CREATIVE_REMOVE_TRADE": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_ALLY": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_ALLY_PERMS": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_NOTIFICATIONS": $TextEntry
static readonly "GUI_TRADER_SETTINGS_NOTIFICATIONS_ENABLED": $TextEntry
static readonly "GUI_TRADER_SETTINGS_NOTIFICATIONS_CHAT": $TextEntry
static readonly "GUI_TRADER_SETTINGS_NOTIFICATIONS_TARGET": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_TAXES": $TextEntry
static readonly "GUI_TRADER_SETTINGS_TAXES_ACCEPTABLE_RATE": $TextEntry
static readonly "GUI_TRADER_SETTINGS_TAXES_IGNORE_TAXES": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_INPUT_GENERIC": $TextEntry
static readonly "TOOLTIP_TRADER_SETTINGS_INPUT_ITEM": $TextEntry
static readonly "TOOLTIP_TRADER_STATS": $TextEntry
static readonly "BUTTON_TRADER_STATS_CLEAR": $TextEntry
static readonly "GUI_TRADER_STATS_EMPTY": $TextEntry
static readonly "TOOLTIP_TRADER_TAXES": $TextEntry
static readonly "GUI_TRADER_TAXES_TOTAL_RATE": $TextEntry
static readonly "GUI_TRADER_TAXES_NO_TAX_COLLECTORS": $TextEntry
static readonly "TOOLTIP_TRADER_STORAGE": $TextEntry
static readonly "MESSAGE_TRADER_WARNING_MISSING_DATA": $TextEntry
static readonly "TOOLTIP_TRADE_EDIT_PRICE": $TextEntry
static readonly "TOOLTIP_TRADE_INFO_TITLE": $TextEntry
static readonly "TOOLTIP_TRADE_INFO_ORIGINAL_NAME": $TextEntry
static readonly "TOOLTIP_TRADE_INFO_STOCK": $TextEntry
static readonly "TOOLTIP_TRADE_INFO_STOCK_INFINITE": $TextEntry
static readonly "GUI_TRADER_ITEM_ENFORCE_NBT": $TextEntry
static readonly "TOOLTIP_TRADE_ITEM_EDIT_ITEM": $TextEntry
static readonly "TOOLTIP_TRADE_ITEM_NBT_WARNING_PURCHASE": $TextEntry
static readonly "TOOLTIP_TRADE_ITEM_NBT_WARNING_SALE": $TextEntry
static readonly "GUI_ITEM_EDIT_SEARCH": $TextEntry
static readonly "TOOLTIP_ITEM_EDIT_SCROLL": $TextEntry
static readonly "TOOLTIP_TRADER_PAYGATE_COLLECT_TICKET_STUBS": $TextEntry
static readonly "GUI_TRADER_PAYGATE_DURATION": $TextEntry
static readonly "GUI_TRADER_PAYGATE_DURATION_UNIT": $TextEntry
static readonly "TOOLTIP_TRADER_PAYGATE_TICKET_STUBS_KEEP": $TextEntry
static readonly "TOOLTIP_TRADER_PAYGATE_TICKET_STUBS_GIVE": $TextEntry
static readonly "TOOLTIP_TRADER_PAYGATE_ALREADY_ACTIVE": $TextEntry
static readonly "GUI_TRADER_AUCTION_HOUSE": $TextEntry
static readonly "GUI_TRADER_AUCTION_HOUSE_OWNER": $TextEntry
static readonly "BUTTON_TRADER_AUCTION_BID": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_STORAGE": $TextEntry
static readonly "GUI_TRADER_AUCTION_STORAGE_ITEMS_NONE": $TextEntry
static readonly "GUI_TRADER_AUCTION_STORAGE_MONEY": $TextEntry
static readonly "GUI_TRADER_AUCTION_STORAGE_MONEY_NONE": $TextEntry
static readonly "GUI_TRADER_AUCTION_CANCEL": $TextEntry
static readonly "BUTTON_TRADER_AUCTION_CANCEL_SELF": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_CANCEL_SELF": $TextEntry
static readonly "BUTTON_TRADER_AUCTION_CANCEL_STORAGE": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_CANCEL_STORAGE": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_CREATE": $TextEntry
static readonly "BUTTON_TRADER_AUCTION_PRICE_MODE_STARTING_BID": $TextEntry
static readonly "BUTTON_TRADER_AUCTION_PRICE_MODE_MIN_BID_SIZE": $TextEntry
static readonly "BUTTON_TRADER_AUCTION_CREATE": $TextEntry
static readonly "GUI_TRADER_AUCTION_ITEMS": $TextEntry
static readonly "GUI_TRADER_AUCTION_CREATE_SUCCESS": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_INFO_NO_BIDDER": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_INFO_STARTING_BID": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_INFO_LAST_BIDDER": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_INFO_LAST_BID": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_INFO_MIN_BID": $TextEntry
static readonly "TOOLTIP_TRADER_AUCTION_TIME_REMAINING": $TextEntry
static readonly "TOOLTIP_TRADER_SLOT_MACHINE_EDIT_ENTRIES": $TextEntry
static readonly "GUI_TRADER_SLOT_MACHINE_WEIGHT_LABEL": $TextEntry
static readonly "GUI_TRADER_SLOT_MACHINE_ENTRY_LABEL": $TextEntry
static readonly "GUI_TRADER_SLOT_MACHINE_ODDS_LABEL": $TextEntry
static readonly "TOOLTIP_TRADER_SLOT_MACHINE_EDIT_PRICE": $TextEntry
static readonly "GUI_TRADE_DIRECTION": $TextEntryBundle<($TradeDirection)>
static readonly "GUI_TRADE_DIRECTION_ACTION": $TextEntryBundle<($TradeDirection)>
static readonly "GUI_TRADE_RULES_LIST": $TextEntry
static readonly "TOOLTIP_TRADE_RULES_MANAGER": $TextEntry
static readonly "TRADE_RULE_PLAYER_LISTING": $TextEntry
static readonly "TRADE_RULE_PLAYER_LISTING_DENIAL_BLACKLIST": $TextEntry
static readonly "TRADE_RULE_PLAYER_LISTING_DENIAL_WHITELIST": $TextEntry
static readonly "TRADE_RULE_PLAYER_LISTING_ALLOWED": $TextEntry
static readonly "BUTTON_PLAYER_LISTING_MODE_WHITELIST": $TextEntry
static readonly "BUTTON_PLAYER_LISTING_MODE_BLACKLIST": $TextEntry
static readonly "TRADE_RULE_PLAYER_TRADE_LIMIT": $TextEntry
static readonly "TRADE_RULE_PLAYER_TRADE_LIMIT_DENIAL_TIMED": $TextEntry
static readonly "TRADE_RULE_PLAYER_TRADE_LIMIT_DENIAL": $TextEntry
static readonly "TRADE_RULE_PLAYER_TRADE_LIMIT_DENIAL_LIMIT": $TextEntry
static readonly "TRADE_RULE_PLAYER_TRADE_LIMIT_INFO_TIMED": $TextEntry
static readonly "TRADE_RULE_PLAYER_TRADE_LIMIT_INFO": $TextEntry
static readonly "TOOLTIP_TRADE_LIMIT_CLEAR_MEMORY": $TextEntry
static readonly "GUI_TRADE_LIMIT_INFO": $TextEntry
static readonly "GUI_PLAYER_TRADE_LIMIT_DURATION": $TextEntry
static readonly "GUI_PLAYER_TRADE_LIMIT_NO_DURATION": $TextEntry
static readonly "TRADE_RULE_PLAYER_DISCOUNTS": $TextEntry
static readonly "TRADE_RULE_PLAYER_DISCOUNTS_INFO_SALE": $TextEntry
static readonly "TRADE_RULE_PLAYER_DISCOUNTS_INFO_PURCHASE": $TextEntry
static readonly "GUI_PLAYER_DISCOUNTS_INFO": $TextEntry
static readonly "TRADE_RULE_TIMED_SALE": $TextEntry
static readonly "TRADE_RULE_TIMED_SALE_INFO_SALE": $TextEntry
static readonly "TRADE_RULE_TIMED_SALE_INFO_PURCHASE": $TextEntry
static readonly "GUI_TIMED_SALE_INFO_ACTIVE": $TextEntry
static readonly "GUI_TIMED_SALE_INFO_INACTIVE": $TextEntry
static readonly "BUTTON_TIMED_SALE_START": $TextEntry
static readonly "TOOLTIP_TIMED_SALE_START": $TextEntry
static readonly "BUTTON_TIMED_SALE_STOP": $TextEntry
static readonly "TOOLTIP_TIMED_SALE_STOP": $TextEntry
static readonly "TRADE_RULE_TRADE_LIMIT": $TextEntry
static readonly "TRADE_RULE_TRADE_LIMIT_DENIAL": $TextEntry
static readonly "TRADE_RULE_TRADE_LIMIT_INFO": $TextEntry
static readonly "TRADE_RULE_FREE_SAMPLE": $TextEntry
static readonly "TRADE_RULE_FREE_SAMPLE_INFO": $TextEntry
static readonly "BUTTON_FREE_SAMPLE_RESET": $TextEntry
static readonly "TOOLTIP_FREE_SAMPLE_RESET": $TextEntry
static readonly "GUI_FREE_SAMPLE_PLAYER_COUNT": $TextEntry
static readonly "TRADE_RULE_PRICE_FLUCTUATION": $TextEntry
static readonly "GUI_PRICE_FLUCTUATION_LABEL": $TextEntry
static readonly "GUI_PRICE_FLUCTUATION_INFO": $TextEntry
static readonly "PERMISSION_OPEN_STORAGE": $TextEntry
static readonly "PERMISSION_CHANGE_NAME": $TextEntry
static readonly "PERMISSION_EDIT_TRADES": $TextEntry
static readonly "PERMISSION_COLLECT_MONEY": $TextEntry
static readonly "PERMISSION_STORE_MONEY": $TextEntry
static readonly "PERMISSION_EDIT_TRADE_RULES": $TextEntry
static readonly "PERMISSION_EDIT_SETTINGS": $TextEntry
static readonly "PERMISSION_EDIT_ALLIES": $TextEntry
static readonly "PERMISSION_EDIT_PERMISSIONS": $TextEntry
static readonly "PERMISSION_VIEW_LOGS": $TextEntry
static readonly "PERMISSION_BREAK_MACHINE": $TextEntry
static readonly "PERMISSION_BANK_LINK": $TextEntry
static readonly "PERMISSION_NOTIFICATION": $TextEntry
static readonly "PERMISSION_INTERACTION_LINK": $TextEntry
static readonly "PERMISSION_TRANSFER_OWNERSHIP": $TextEntry
static readonly "PERMISSION_EDIT_INPUTS": $TextEntry
static readonly "TOOLTIP_NOTIFICATION_BUTTON": $TextEntry
static readonly "TOOLTIP_TEAM_MANAGER_BUTTON": $TextEntry
static readonly "TOOLTIP_EJECTION_BUTTON": $TextEntry
static readonly "TOOLTIP_CHEST_COIN_COLLECTION_BUTTON": $TextEntry
static readonly "BUTTON_SETTINGS_CHANGE_NAME": $TextEntry
static readonly "BUTTON_SETTINGS_RESET_NAME": $TextEntry
static readonly "GUI_SETTINGS_BANK_LINK": $TextEntry
static readonly "TOOLTIP_SETTINGS_OWNER": $TextEntry
static readonly "GUI_SETTINGS_INPUT_SIDE": $TextEntry
static readonly "GUI_SETTINGS_OUTPUT_SIDE": $TextEntry
static readonly "GUI_INPUT_SIDES": $TextEntryBundle<($Direction)>
static readonly "GUI_PERSISTENT_ID": $TextEntry
static readonly "GUI_PERSISTENT_OWNER": $TextEntry
static readonly "TOOLTIP_PERSISTENT_CREATE_TRADER": $TextEntry
static readonly "MESSAGE_PERSISTENT_TRADER_OVERWRITE": $TextEntry
static readonly "MESSAGE_PERSISTENT_TRADER_ADD": $TextEntry
static readonly "MESSAGE_PERSISTENT_TRADER_FAIL": $TextEntry
static readonly "TOOLTIP_PERSISTENT_CREATE_AUCTION": $TextEntry
static readonly "MESSAGE_PERSISTENT_AUCTION_OVERWRITE": $TextEntry
static readonly "MESSAGE_PERSISTENT_AUCTION_ADD": $TextEntry
static readonly "MESSAGE_PERSISTENT_AUCTION_FAIL": $TextEntry
static readonly "GUI_BANK_BALANCE": $TextEntry
static readonly "GUI_BANK_NO_SELECTED_ACCOUNT": $TextEntry
static readonly "BUTTON_BANK_DEPOSIT": $TextEntry
static readonly "BUTTON_BANK_WITHDRAW": $TextEntry
static readonly "GUI_BANK_ACCOUNT_NAME": $TextEntry
static readonly "GUI_BANK_TRANSFER_ERROR_NULL_FROM": $TextEntry
static readonly "GUI_BANK_TRANSFER_ERROR_ACCESS": $TextEntry
static readonly "GUI_BANK_TRANSFER_ERROR_NULL_TARGET": $TextEntry
static readonly "GUI_BANK_TRANSFER_ERROR_AMOUNT": $TextEntry
static readonly "GUI_BANK_TRANSFER_ERROR_SAME": $TextEntry
static readonly "GUI_BANK_TRANSFER_ERROR_NO_BALANCE": $TextEntry
static readonly "GUI_BANK_TRANSFER_SUCCESS": $TextEntry
static readonly "BLURB_OWNERSHIP_MEMBERS": $TextEntry
static readonly "BLURB_OWNERSHIP_ADMINS": $TextEntry
static readonly "BLURB_OWNERSHIP_OWNER": $TextEntry
static readonly "BUTTON_OWNER_SET_PLAYER": $TextEntry
static readonly "GUI_OWNER_CURRENT": $TextEntry
static readonly "GUI_OWNER_NULL": $TextEntry
static readonly "TOOLTIP_OWNERSHIP_MODE_MANUAL": $TextEntry
static readonly "TOOLTIP_OWNERSHIP_MODE_SELECTION": $TextEntry
static readonly "GUI_MONEY_VALUE_FREE": $TextEntry
static readonly "GUI_MONEY_STORAGE_EMPTY": $TextEntry
static readonly "COIN_CHAIN_MAIN": $TextEntry
static readonly "COIN_CHAIN_CHOCOLATE": $TextEntry
static readonly "COIN_CHAIN_CHOCOLATE_DISPLAY": $TextEntry
static readonly "COIN_CHAIN_CHOCOLATE_DISPLAY_WORDY": $TextEntry
static readonly "COIN_CHAIN_EMERALDS": $TextEntry
static readonly "COIN_CHAIN_EMERALDS_DISPLAY": $TextEntry
static readonly "COIN_CHAIN_EMERALDS_DISPLAY_WORDY": $TextEntry
static readonly "BUTTON_CHANGE_NAME_ICON": $TextEntry
static readonly "GUI_NAME": $TextEntry
static readonly "TOOLTIP_WARNING_CANT_BE_UNDONE": $TextEntry
static readonly "TOOLTIP_ITEM_COUNT": $TextEntry
static readonly "BUTTON_ADD": $TextEntry
static readonly "BUTTON_REMOVE": $TextEntry
static readonly "BUTTON_SET": $TextEntry
static readonly "BUTTON_CLEAR_MEMORY": $TextEntry
static readonly "MISC_GENERIC_PLURAL": $TextEntry
static readonly "GUI_SEPERATOR": $TextEntry
static readonly "GUI_ADDED": $TextEntry
static readonly "GUI_REMOVED": $TextEntry
static readonly "GUI_TO": $TextEntry
static readonly "GUI_FROM": $TextEntry
static readonly "GUI_AND": $TextEntry
static readonly "TIME_UNIT_DAY": $TimeUnitTextEntry
static readonly "TIME_UNIT_HOUR": $TimeUnitTextEntry
static readonly "TIME_UNIT_MINUTE": $TimeUnitTextEntry
static readonly "TIME_UNIT_SECOND": $TimeUnitTextEntry
static readonly "TIME_UNIT_MILLISECOND": $TimeUnitTextEntry
static readonly "TIME_UNIT_TICK": $TimeUnitTextEntry
static readonly "NOTIFICATION_FORMAT_GENERAL": $TextEntry
static readonly "NOTIFICATION_FORMAT_CHAT": $TextEntry
static readonly "NOTIFICATION_FORMAT_CHAT_TITLE": $TextEntry
static readonly "NOTIFICATION_TIMESTAMP": $TextEntry
static readonly "NOTIFICATION_SOURCE_GENERAL": $TextEntry
static readonly "NOTIFICATION_AUCTION_BID": $TextEntry
static readonly "NOTIFICATION_AUCTION_BUYER": $TextEntry
static readonly "NOTIFICATION_AUCTION_CANCEL": $TextEntry
static readonly "NOTIFICATION_AUCTION_SELLER_NO_BID": $TextEntry
static readonly "NOTIFICATION_AUCTION_SELLER": $TextEntry
static readonly "NOTIFICATION_BANK_INTEREST": $TextEntry
static readonly "NOTIFICATION_BANK_TRANSFER": $TextEntry
static readonly "NOTIFICATION_BANK_DEPOSIT_WITHDRAW": $TextEntry
static readonly "NOTIFICATION_BANK_DEPOSIT": $TextEntry
static readonly "NOTIFICATION_BANK_WITHDRAW": $TextEntry
static readonly "NOTIFICATION_BANK_DEPOSIT_WITHDRAW_SERVER": $TextEntry
static readonly "NOTIFICATION_BANK_LOW_BALANCE": $TextEntry
static readonly "NOTIFICATION_EJECTION_ANARCHY": $TextEntry
static readonly "NOTIFICATION_EJECTION_EJECTED": $TextEntry
static readonly "NOTIFICATION_EJECTION_DROPPED": $TextEntry
static readonly "NOTIFICATION_SETTINGS_ADD_REMOVE_ALLY": $TextEntry
static readonly "NOTIFICATION_SETTINGS_ADD_REMOVE_TRADE": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_ALLY_PERMISSIONS": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_ALLY_PERMISSIONS_SIMPLE": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_CREATIVE": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_CREATIVE_ENABLED": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_CREATIVE_DISABLED": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_NAME": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_NAME_SET": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_NAME_RESET": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_OWNER_PASSED": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_OWNER_TAKEN": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_OWNER_TRANSFERRED": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_SIMPLE": $TextEntry
static readonly "NOTIFICATION_SETTINGS_CHANGE_ADVANCED": $TextEntry
static readonly "NOTIFICATION_TAXES_COLLECTED": $TextEntry
static readonly "NOTIFICATION_TAXES_PAID": $TextEntry
static readonly "NOTIFICATION_TAXES_PAID_NULL": $TextEntry
static readonly "NOTIFICATION_TRADER_OUT_OF_STOCK": $TextEntry
static readonly "NOTIFICATION_TRADER_OUT_OF_STOCK_INDEXLESS": $TextEntry
static readonly "NOTIFICATION_TRADE_ITEM": $TextEntry
static readonly "NOTIFICATION_TRADE_PAYGATE_TICKET": $TextEntry
static readonly "NOTIFICATION_TRADE_PAYGATE_PASS": $TextEntry
static readonly "NOTIFICATION_TRADE_PAYGATE_MONEY": $TextEntry
static readonly "NOTIFICATION_TRADE_SLOT_MACHINE": $TextEntry
static readonly "NOTIFICATION_ITEM_FORMAT": $TextEntry
static readonly "ARGUMENT_MONEY_VALUE_NOT_A_COIN": $TextEntry
static readonly "ARGUMENT_MONEY_VALUE_NO_VALUE": $TextEntry
static readonly "ARGUMENT_MONEY_VALUE_NOT_EMPTY_OR_FREE": $TextEntry
static readonly "ARGUMENT_COLOR_INVALID": $TextEntry
static readonly "ARGUMENT_TRADEID_INVALID": $TextEntry
static readonly "ARGUMENT_TRADER_NOT_FOUND": $TextEntry
static readonly "COMMAND_BALTOP_NO_RESULTS": $TextEntry
static readonly "COMMAND_BALTOP_ERROR_PAGE": $TextEntry
static readonly "COMMAND_BALTOP_TITLE": $TextEntry
static readonly "COMMAND_BALTOP_PAGE": $TextEntry
static readonly "COMMAND_BALTOP_ENTRY": $TextEntry
static readonly "COMMAND_BANK_TEAM_NULL": $TextEntry
static readonly "COMMAND_BANK_TEAM_NO_BANK": $TextEntry
static readonly "COMMAND_BANK_GIVE_FAIL": $TextEntry
static readonly "COMMAND_BANK_GIVE_SUCCESS": $TextEntry
static readonly "COMMAND_BANK_GIVE_SUCCESS_SINGLE": $TextEntry
static readonly "COMMAND_BANK_TAKE_FAIL": $TextEntry
static readonly "COMMAND_BANK_TAKE_SUCCESS": $TextEntry
static readonly "COMMAND_BANK_TAKE_SUCCESS_SINGLE": $TextEntry
static readonly "COMMAND_CONFIG_RELOAD": $TextEntry
static readonly "COMMAND_CONFIG_EDIT_SUCCESS": $TextEntry
static readonly "COMMAND_CONFIG_EDIT_FAIL_PARSE": $TextEntry
static readonly "COMMAND_CONFIG_EDIT_LIST_REMOVE_SUCCESS": $TextEntry
static readonly "COMMAND_CONFIG_VIEW": $TextEntry
static readonly "COMMAND_CONFIG_FAIL_MISSING": $TextEntry
static readonly "COMMAND_ADMIN_TOGGLE_ADMIN": $TextEntry
static readonly "COMMAND_ADMIN_TOGGLE_ADMIN_ENABLED": $TextEntry
static readonly "COMMAND_ADMIN_TOGGLE_ADMIN_DISABLED": $TextEntry
static readonly "COMMAND_ADMIN_PREPARE_FOR_STRUCTURE_ERROR": $TextEntry
static readonly "COMMAND_ADMIN_PREPARE_FOR_STRUCTURE_SUCCESS": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_TITLE": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_NONE": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_TRADER_ID": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_TRADER_ID_TOOLTIP": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_PERSISTENT_ID": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_TYPE": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_DIMENSION": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_POSITION": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_POSITION_TOOLTIP": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_LIST_NAME": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_SEARCH_NONE": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_DELETE_SUCCESS": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_ADD_TO_WHITELIST_SUCCESS": $TextEntry
static readonly "COMMAND_ADMIN_TRADERDATA_ADD_TO_WHITELIST_MISSING": $TextEntry
static readonly "COMMAND_ADMIN_REPLACE_WALLET_NOT_A_WALLET": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_OPEN_SERVER_TAX_ERROR": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_TITLE": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_ID": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_ID_TOOLTIP": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_DIMENSION": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_POSITION": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_POSITION_TOOLTIP": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_INFINITE_RANGE": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_RADIUS": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_HEIGHT": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_OFFSET": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_FORCE_ACCEPTANCE": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_LIST_NAME": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_DELETE_SUCCESS": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_DELETE_FAIL": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_FORCE_DISABLE_SUCCESS": $TextEntry
static readonly "COMMAND_ADMIN_TAXES_FORCE_DISABLE_FAIL": $TextEntry
static readonly "COMMAND_ADMIN_EVENT_LIST_NONE": $TextEntry
static readonly "COMMAND_ADMIN_EVENT_UNLOCK_SUCCESS": $TextEntry
static readonly "COMMAND_ADMIN_EVENT_UNLOCK_FAIL": $TextEntry
static readonly "COMMAND_ADMIN_EVENT_LOCK_SUCCESS": $TextEntry
static readonly "COMMAND_ADMIN_EVENT_LOCK_FAIL": $TextEntry
static readonly "COMMAND_LCADMIN_DATA_OWNER_PLAYER": $TextEntry
static readonly "COMMAND_LCADMIN_DATA_OWNER_TEAM": $TextEntry
static readonly "COMMAND_LCADMIN_DATA_OWNER_CUSTOM": $TextEntry
static readonly "COMMAND_TRADE_SELF": $TextEntry
static readonly "COMMAND_TRADE_HOST_NOTIFY": $TextEntry
static readonly "COMMAND_TRADE_GUEST_NOTIFY": $TextEntry
static readonly "COMMAND_TRADE_GUEST_NOTIFY_PROMPT": $TextEntry
static readonly "COMMAND_TRADE_ACCEPT_FAIL_OFFLINE": $TextEntry
static readonly "COMMAND_TRADE_ACCEPT_FAIL_DISTANCE": $TextEntry
static readonly "COMMAND_TRADE_ACCEPT_FAIL_DIMENSION": $TextEntry
static readonly "COMMAND_TRADE_ACCEPT_ERROR": $TextEntry
static readonly "COMMAND_TRADE_ACCEPT_NOT_FOUND": $TextEntry
static readonly "COMMAND_TICKETS_COLOR_NOT_HELD": $TextEntry
static readonly "COMMAND_CLAIM_FAIL_NO_DATA": $TextEntry
static readonly "COMMAND_CLAIM_FAIL_INVALID_PRICE": $TextEntry
static readonly "COMMAND_CLAIM_INVALID": $TextEntry
static readonly "COMMAND_CLAIM_INFO_CLAIMS": $TextEntry
static readonly "COMMAND_CLAIM_INFO_FORCELOAD": $TextEntry
static readonly "COMMAND_CLAIM_INFO_PRICE": $TextEntry
static readonly "COMMAND_CLAIM_INFO_DISABLED": $TextEntry
static readonly "COMMAND_CLAIM_BUY_CLAIM_DISABLED": $TextEntry
static readonly "COMMAND_CLAIM_BUY_CLAIM_LIMIT_REACHED": $TextEntry
static readonly "COMMAND_CLAIM_BUY_CLAIM_SUCCESS": $TextEntry
static readonly "COMMAND_CLAIM_BUY_CLAIM_CANNOT_AFFORD": $TextEntry
static readonly "COMMAND_CLAIM_BUY_FORCELOAD_DISABLED": $TextEntry
static readonly "COMMAND_CLAIM_BUY_FORCELOAD_LIMIT_REACHED": $TextEntry
static readonly "COMMAND_CLAIM_BUY_FORCELOAD_SUCCESS": $TextEntry
static readonly "COMMAND_CLAIM_BUY_FORCELOAD_CANNOT_AFFORD": $TextEntry
static readonly "ADVANCEMENT_ROOT": $AdvancementTextEntry
static readonly "ADVANCEMENT_MY_FIRST_PENNY": $AdvancementTextEntry
static readonly "ADVANCEMENT_TRADING_CORE": $AdvancementTextEntry
static readonly "ADVANCEMENT_TRADER": $AdvancementTextEntry
static readonly "ADVANCEMENT_SPECIALTY_TRADER": $AdvancementTextEntry
static readonly "ADVANCEMENT_NETWORK_TRADER": $AdvancementTextEntry
static readonly "ADVANCEMENT_TRADER_INTERFACE": $AdvancementTextEntry
static readonly "ADVANCEMENT_TERMINAL": $AdvancementTextEntry
static readonly "ADVANCEMENT_ATM": $AdvancementTextEntry
static readonly "ADVANCEMENT_BANKER_TRADE": $AdvancementTextEntry
static readonly "ADVANCEMENT_COIN_MINT": $AdvancementTextEntry
static readonly "ADVANCEMENT_WALLET_CRAFTING": $AdvancementTextEntry
static readonly "ADVANCEMENT_NETHERITE_WALLET": $AdvancementTextEntry
static readonly "ADVANCEMENT_ENCHANTED_WALLET": $AdvancementTextEntry
static readonly "ADVANCEMENT_CASH_REGISTER": $AdvancementTextEntry
static readonly "ADVANCEMENT_CASHIER_TRADE": $AdvancementTextEntry
static readonly "ADVANCEMENT_JAR_OF_SUS": $AdvancementTextEntry
static readonly "ADVANCEMENT_EVENT_CHOCOLATE": $AdvancementTextEntry
static readonly "ADVANCEMENT_EVENT_CHRISTMAS": $AdvancementTextEntry
static readonly "ADVANCEMENT_EVENT_VALENTINES": $AdvancementTextEntry
static readonly "RESOURCE_PACK_RUPEES": $TextEntry
static readonly "RESOURCE_PACK_CLOSER_ITEMS": $TextEntry
static readonly "RESOURCE_PACK_LEGACY_COINS": $TextEntry
static readonly "JEI_INFO_TICKET_STUB": $TextEntry
static readonly "CURIOS_SLOT_WALLET": $TextEntry

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCText$Type = ($LCText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCText_ = $LCText$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/terminal/$TerminalSorter" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$TerminalSorter$SortingOptions, $TerminalSorter$SortingOptions$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/terminal/$TerminalSorter$SortingOptions"

export class $TerminalSorter {


public static "options"(): $TerminalSorter$SortingOptions
public static "getSorter"(arg0: $TerminalSorter$SortingOptions$Type): $Comparator<($TraderData)>
public static "getDefaultSorter"(): $Comparator<($TraderData)>
get "defaultSorter"(): $Comparator<($TraderData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TerminalSorter$Type = ($TerminalSorter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TerminalSorter_ = $TerminalSorter$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock" {
import {$EasyBlock, $EasyBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/$EasyBlock"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$IRotatableBlock, $IRotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IRotatableBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $RotatableBlock extends $EasyBlock implements $IRotatableBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $Function$Type<($Direction$Type), ($VoxelShape$Type)>)
constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $VoxelShape$Type)
constructor(arg0: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getFacing"(arg0: $BlockState$Type): $Direction
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RotatableBlock$Type = ($RotatableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RotatableBlock_ = $RotatableBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/trader/$CPacketCollectCoins" {
import {$ClientToServerPacket$Simple, $ClientToServerPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $CPacketCollectCoins extends $ClientToServerPacket$Simple {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketCollectCoins)>


public static "sendToServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketCollectCoins$Type = ($CPacketCollectCoins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketCollectCoins_ = $CPacketCollectCoins$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/terminal/filters/$BasicSearchFilter" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$ITraderSearchFilter, $ITraderSearchFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/terminal/$ITraderSearchFilter"

export class $BasicSearchFilter implements $ITraderSearchFilter {

constructor()

public "filter"(arg0: $TraderData$Type, arg1: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasicSearchFilter$Type = ($BasicSearchFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasicSearchFilter_ = $BasicSearchFilter$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/rule_tabs/$PlayerListingTab" {
import {$PlayerListing, $PlayerListing$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$PlayerListing"
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TradeRuleSubTab, $TradeRuleSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRuleSubTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $PlayerListingTab extends $TradeRuleSubTab<($PlayerListing)> {
readonly "ruleType": $TradeRuleType<(T)>
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TradeRulesClientTab$Type<(any)>, arg1: $TradeRuleType$Type<($PlayerListing$Type)>)

public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerListingTab$Type = ($PlayerListingTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerListingTab_ = $PlayerListingTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab" {
import {$TraderStorageMenu, $TraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderStorageMenu"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $TraderSettingsTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderSettingsTab$Type = ($TraderSettingsTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderSettingsTab_ = $TraderSettingsTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Player" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$DepositWithdrawNotification$Server, $DepositWithdrawNotification$Server$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Server"
import {$DepositWithdrawNotification$Trader, $DepositWithdrawNotification$Trader$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Trader"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$DepositWithdrawNotification, $DepositWithdrawNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $DepositWithdrawNotification$Player extends $DepositWithdrawNotification {
static readonly "PLAYER_TYPE": $NotificationType<($DepositWithdrawNotification$Player)>
static readonly "TRADER_TYPE": $NotificationType<($DepositWithdrawNotification$Trader)>
static readonly "SERVER_TYPE": $NotificationType<($DepositWithdrawNotification$Server)>

constructor(arg0: $PlayerReference$Type, arg1: $MutableComponent$Type, arg2: boolean, arg3: $MoneyValue$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DepositWithdrawNotification$Player$Type = ($DepositWithdrawNotification$Player);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DepositWithdrawNotification$Player_ = $DepositWithdrawNotification$Player$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TaxCollectorMenu extends $LazyMessageMenu {
readonly "entryID": long
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: long, arg3: $MenuValidator$Type)

public "getEntry"(): $TaxEntry
public "getAllTabs"(): $List<($TaxCollectorTab)>
public "getCurrentTab"(): $TaxCollectorTab
public "ChangeTab"(arg0: integer, arg1: boolean): void
public "hasAccess"(): boolean
public "isServerEntry"(): boolean
public "setTabChangeListener"(arg0: $Consumer$Type<(integer)>): void
public "CollectStoredMoney"(): void
public "isOwner"(): boolean
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "isAdmin"(): boolean
get "entry"(): $TaxEntry
get "allTabs"(): $List<($TaxCollectorTab)>
get "currentTab"(): $TaxCollectorTab
get "serverEntry"(): boolean
set "tabChangeListener"(value: $Consumer$Type<(integer)>)
get "owner"(): boolean
get "admin"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxCollectorMenu$Type = ($TaxCollectorMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxCollectorMenu_ = $TaxCollectorMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/$SlotMachineBlockEntityRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$SlotMachineTraderBlockEntity, $SlotMachineTraderBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/trader/$SlotMachineTraderBlockEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $SlotMachineBlockEntityRenderer implements $BlockEntityRenderer<($SlotMachineTraderBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "getViewDistance"(): integer
public "render"(arg0: $SlotMachineTraderBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $SlotMachineTraderBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $SlotMachineTraderBlockEntity$Type): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineBlockEntityRenderer$Type = ($SlotMachineBlockEntityRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineBlockEntityRenderer_ = $SlotMachineBlockEntityRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$CoinJarItem$Colored" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$CoinJarItem, $CoinJarItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$CoinJarItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$DyeableLeatherItem, $DyeableLeatherItem$Type} from "packages/net/minecraft/world/item/$DyeableLeatherItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$DyeItem, $DyeItem$Type} from "packages/net/minecraft/world/item/$DyeItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CoinJarItem$Colored extends $CoinJarItem implements $DyeableLeatherItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Block$Type, arg1: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "getColor"(arg0: $ItemStack$Type): integer
public "hasCustomColor"(arg0: $ItemStack$Type): boolean
public "clearColor"(arg0: $ItemStack$Type): void
public static "dyeArmor"(arg0: $ItemStack$Type, arg1: $List$Type<($DyeItem$Type)>): $ItemStack
public "setColor"(arg0: $ItemStack$Type, arg1: integer): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinJarItem$Colored$Type = ($CoinJarItem$Colored);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinJarItem$Colored_ = $CoinJarItem$Colored$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$ScrollListener" {
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$IScrollListener, $IScrollListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IScrollListener"

export class $ScrollListener implements $IScrollListener {
 "area": $ScreenArea
 "active": boolean
 "inverted": boolean

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Consumer$Type<(double)>)
constructor(arg0: $ScreenArea$Type, arg1: $IScrollable$Type)
constructor(arg0: $ScreenArea$Type, arg1: $Function$Type<(double), (boolean)>)
/**
 * 
 * @deprecated
 */
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $IScrollListener$Type)
/**
 * 
 * @deprecated
 */
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $IScrollListener$Type)
/**
 * 
 * @deprecated
 */
constructor(arg0: $ScreenArea$Type, arg1: $IScrollListener$Type)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Consumer$Type<(double)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Function$Type<(double), (boolean)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $IScrollable$Type)
constructor(arg0: $ScreenArea$Type, arg1: $Consumer$Type<(double)>)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Function$Type<(double), (boolean)>)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $IScrollable$Type)

public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollListener$Type = ($ScrollListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollListener_ = $ScrollListener$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$IconType" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ATMIconData, $ATMIconData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$ATMIconData"

export class $IconType {
readonly "type": $ResourceLocation


public "matches"(arg0: string): boolean
public static "create"(arg0: $ResourceLocation$Type, arg1: $Function$Type<($JsonObject$Type), ($ATMIconData$Type)>): $IconType
public "parse"(arg0: $JsonObject$Type): $ATMIconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconType$Type = ($IconType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconType_ = $IconType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/handler/$TraderItemHandler" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$ItemTraderData, $ItemTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderData"

export class $TraderItemHandler {

constructor(arg0: $ItemTraderData$Type)

public "getHandler"(arg0: $Direction$Type): $IItemHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderItemHandler$Type = ($TraderItemHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderItemHandler_ = $TraderItemHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CapabilityInterfaceBlockEntity" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $CapabilityInterfaceBlockEntity extends $BlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapabilityInterfaceBlockEntity$Type = ($CapabilityInterfaceBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapabilityInterfaceBlockEntity_ = $CapabilityInterfaceBlockEntity$Type;
}}
declare module "packages/io/github/steveplays28/noisium/util/$ModUtil" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ModUtil {

constructor()

public static "isModPresent"(id: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModUtil$Type = ($ModUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModUtil_ = $ModUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$WalletCapability" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$IWalletHandler, $IWalletHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$IWalletHandler"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $WalletCapability {

constructor()

public static "createProvider"(arg0: $Player$Type): $ICapabilityProvider
public static "getWalletMoney"(arg0: $Entity$Type): $MoneyView
public static "getRenderWalletHandler"(arg0: $Entity$Type): $IWalletHandler
/**
 * 
 * @deprecated
 */
public static "getWalletHandler"(arg0: $Entity$Type): $LazyOptional<($IWalletHandler)>
public static "getWalletContainer"(arg0: $Entity$Type): $Container
public static "lazyGetWalletHandler"(arg0: $Entity$Type): $IWalletHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletCapability$Type = ($WalletCapability);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletCapability_ = $WalletCapability$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$CoinJarItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CoinJarItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Block$Type, arg1: $Item$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinJarItem$Type = ($CoinJarItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinJarItem_ = $CoinJarItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/$IClientTicker" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IClientTicker {

 "clientTick"(): void

(): void
}

export namespace $IClientTicker {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IClientTicker$Type = ($IClientTicker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IClientTicker_ = $IClientTicker$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/builtin/$TeamBankReference" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$BankReferenceType, $BankReferenceType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReferenceType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITeam, $ITeam$Type} from "packages/io/github/lightman314/lightmanscurrency/api/teams/$ITeam"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"

export class $TeamBankReference extends $BankReference {
static readonly "TYPE": $BankReferenceType
readonly "teamID": long


public "get"(): $IBankAccount
public static "of"(arg0: long): $BankReference
public static "of"(arg0: $ITeam$Type): $BankReference
public "allowedAccess"(arg0: $Player$Type): boolean
public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamBankReference$Type = ($TeamBankReference);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamBankReference_ = $TeamBankReference$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$CoinEntry" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ValueDisplayData, $ValueDisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplayData"

export class $CoinEntry {

constructor(arg0: $Item$Type)

public "getName"(): $Component
public "matches"(arg0: $CoinEntry$Type): boolean
public "matches"(arg0: $CompoundTag$Type): boolean
public "matches"(arg0: $ItemStack$Type): boolean
public "matches"(arg0: $Item$Type): boolean
public static "parse"(arg0: $JsonObject$Type): $CoinEntry
public "isSideChain"(): boolean
public "getCoin"(): $Item
public "getLowerExchange"(): $Pair<($CoinEntry), (integer)>
public "defineExchanges"(arg0: $Pair$Type<($CoinEntry$Type), (integer)>, arg1: $Pair$Type<($CoinEntry$Type), (integer)>): void
public "getUpperExchange"(): $Pair<($CoinEntry), (integer)>
public "setCoreValue"(arg0: long): void
public "getExchangeRate"(): integer
public "getCoreValue"(): long
public "serialize"(arg0: $ValueDisplayData$Type): $JsonObject
get "name"(): $Component
get "sideChain"(): boolean
get "coin"(): $Item
get "lowerExchange"(): $Pair<($CoinEntry), (integer)>
get "upperExchange"(): $Pair<($CoinEntry), (integer)>
set "coreValue"(value: long)
get "exchangeRate"(): integer
get "coreValue"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinEntry$Type = ($CoinEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinEntry_ = $CoinEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/$LCConfig" {
import {$LCConfig$Common, $LCConfig$Common$Type} from "packages/io/github/lightman314/lightmanscurrency/$LCConfig$Common"
import {$LCConfig$Server, $LCConfig$Server$Type} from "packages/io/github/lightman314/lightmanscurrency/$LCConfig$Server"
import {$LCConfig$Client, $LCConfig$Client$Type} from "packages/io/github/lightman314/lightmanscurrency/$LCConfig$Client"

export class $LCConfig {
static readonly "CLIENT": $LCConfig$Client
static readonly "COMMON": $LCConfig$Common
static readonly "SERVER": $LCConfig$Server


public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCConfig$Type = ($LCConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCConfig_ = $LCConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/loot/glm/$CoinsInChestsModifier" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$ObjectArrayList, $ObjectArrayList$Type} from "packages/it/unimi/dsi/fastutil/objects/$ObjectArrayList"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$IGlobalLootModifier, $IGlobalLootModifier$Type} from "packages/net/minecraftforge/common/loot/$IGlobalLootModifier"

export class $CoinsInChestsModifier implements $IGlobalLootModifier {


public "apply"(arg0: $ObjectArrayList$Type<($ItemStack$Type)>, arg1: $LootContext$Type): $ObjectArrayList<($ItemStack)>
public "codec"(): $Codec<(any)>
public static "getJson"<U>(arg0: $Dynamic$Type<(any)>): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinsInChestsModifier$Type = ($CoinsInChestsModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinsInChestsModifier_ = $CoinsInChestsModifier$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$AuctionHouseTrader, $AuctionHouseTrader$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/$AuctionHouseTrader"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$TradeDirection, $TradeDirection$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeDirection"
import {$PersistentAuctionData, $PersistentAuctionData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/$PersistentAuctionData"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$TradeComparisonResult, $TradeComparisonResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/comparison/$TradeComparisonResult"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BasicTradeEditTab, $BasicTradeEditTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trades_basic/$BasicTradeEditTab"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"

export class $AuctionTradeData extends $TradeData {
static readonly "DEFAULT_KEY": string

constructor(arg0: $PersistentAuctionData$Type)
constructor(arg0: $Player$Type)
constructor(arg0: $CompoundTag$Type)

public "compare"(arg0: $TradeData$Type): $TradeComparisonResult
public "isActive"(): boolean
public "getOwner"(): $PlayerReference
public "isValid"(): boolean
public "loadFromNBT"(arg0: $CompoundTag$Type): void
public "getMinNextBid"(): $MoneyValue
public "hasBid"(): boolean
public "setStartingBid"(arg0: $MoneyValue$Type): void
public static "GetMinimumDuration"(): long
public static "GetDefaultDuration"(): long
public "CancelTrade"(arg0: $AuctionHouseTrader$Type, arg1: boolean, arg2: $Player$Type): void
public "validateBidAmount"(arg0: $MoneyValue$Type): boolean
public "setAuctionItems"(arg0: $Container$Type): void
public "setMinBidDifferent"(arg0: $MoneyValue$Type): void
public "getTradeDirection"(): $TradeDirection
public "getLastBidPlayer"(): $PlayerReference
public "getLastBidAmount"(): $MoneyValue
public "getMinBidDifference"(): $MoneyValue
public "hasExpired"(arg0: long): boolean
public "getAsNBT"(): $CompoundTag
public "isPersistentID"(arg0: string): boolean
public "tryMakeBid"(arg0: $AuctionHouseTrader$Type, arg1: $Player$Type, arg2: $MoneyValue$Type): boolean
public "startTimer"(): void
public "getAuctionItems"(): $List<($ItemStack)>
public "getRemainingTime"(arg0: long): long
public "AcceptableDifferences"(arg0: $TradeComparisonResult$Type): boolean
public "OnOutputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "GetDifferenceWarnings"(arg0: $TradeComparisonResult$Type): $List<($Component)>
public "OnInputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "getButtonRenderer"(): $TradeRenderManager<(any)>
public "getStock"(arg0: $TradeContext$Type): integer
public "OnInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: integer, arg5: $ItemStack$Type): void
public "saveToJson"(arg0: $JsonObject$Type): $JsonObject
public "ExecuteTrade"(arg0: $AuctionHouseTrader$Type): void
public "setDuration"(arg0: long): void
public "isOwner"(arg0: $Player$Type): boolean
get "active"(): boolean
get "owner"(): $PlayerReference
get "valid"(): boolean
get "minNextBid"(): $MoneyValue
set "startingBid"(value: $MoneyValue$Type)
set "auctionItems"(value: $Container$Type)
set "minBidDifferent"(value: $MoneyValue$Type)
get "tradeDirection"(): $TradeDirection
get "lastBidPlayer"(): $PlayerReference
get "lastBidAmount"(): $MoneyValue
get "minBidDifference"(): $MoneyValue
get "asNBT"(): $CompoundTag
get "auctionItems"(): $List<($ItemStack)>
get "buttonRenderer"(): $TradeRenderManager<(any)>
set "duration"(value: long)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionTradeData$Type = ($AuctionTradeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionTradeData_ = $AuctionTradeData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxable" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$TaxableReference, $TaxableReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxableReference"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$WorldPosition, $WorldPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/world/$WorldPosition"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $ITaxable extends $IClientTracker {

 "getName"(): $MutableComponent
 "getReference"(): $TaxableReference
 "getWorldPosition"(): $WorldPosition
 "pushNotification"(arg0: $NonNullSupplier$Type<($Notification$Type)>): void
 "isClient"(): boolean
 "isServer"(): boolean
}

export namespace $ITaxable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITaxable$Type = ($ITaxable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITaxable_ = $ITaxable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/$InteractionSlotData" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $InteractionSlotData {
static readonly "FLUID_TYPE": string
static readonly "ENERGY_TYPE": string
readonly "type": string


public "allowItemInSlot"(arg0: $ItemStack$Type): boolean
public static "allowItemInSlot"(arg0: $List$Type<($InteractionSlotData$Type)>, arg1: $ItemStack$Type): boolean
public "emptySlotBG"(): $Pair<($ResourceLocation), ($ResourceLocation)>
public static "hasInteractionSlot"(arg0: $List$Type<($InteractionSlotData$Type)>, arg1: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InteractionSlotData$Type = ($InteractionSlotData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InteractionSlotData_ = $InteractionSlotData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$ChainDataReloadedEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ChainDataReloadedEvent extends $Event {

constructor()

public "isCancelable"(): boolean
public "chainExists"(arg0: string): boolean
public "getChains"(): $List<($ChainData)>
public "getChainMap"(): $Map<(string), ($ChainData)>
public "getChain"(arg0: string): $ChainData
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "chains"(): $List<($ChainData)>
get "chainMap"(): $Map<(string), ($ChainData)>
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainDataReloadedEvent$Type = ($ChainDataReloadedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainDataReloadedEvent_ = $ChainDataReloadedEvent$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/bank/$CPacketSelectBankAccount" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketSelectBankAccount extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketSelectBankAccount)>

constructor(arg0: $BankReference$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketSelectBankAccount$Type = ($CPacketSelectBankAccount);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketSelectBankAccount_ = $CPacketSelectBankAccount$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/data/$ClientTaxData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientPlayerNetworkEvent$LoggingOut, $ClientPlayerNetworkEvent$LoggingOut$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$LoggingOut"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"

export class $ClientTaxData {

constructor()

public static "GetEntry"(arg0: long): $TaxEntry
public static "onClientLogout"(arg0: $ClientPlayerNetworkEvent$LoggingOut$Type): void
public static "UpdateEntry"(arg0: $CompoundTag$Type): void
public static "RemoveEntry"(arg0: long): void
public static "GetAllTaxEntries"(): $List<($TaxEntry)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTaxData$Type = ($ClientTaxData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTaxData_ = $ClientTaxData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/restrictions/$BookRestriction" {
import {$ItemTradeRestriction, $ItemTradeRestriction$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/restrictions/$ItemTradeRestriction"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BookRestriction extends $ItemTradeRestriction {
static "INSTANCE": $BookRestriction
static readonly "EMPTY_BOOK_SLOT": $ResourceLocation
static readonly "NO_RESTRICTION_KEY": $ResourceLocation
static readonly "NONE": $ItemTradeRestriction


public "getEmptySlotBG"(): $Pair<($ResourceLocation), ($ResourceLocation)>
public static "CanSellAsBook"(arg0: $ItemStack$Type): boolean
public "allowItemSelectItem"(arg0: $ItemStack$Type): boolean
public "allowSellItem"(arg0: $ItemStack$Type): boolean
get "emptySlotBG"(): $Pair<($ResourceLocation), ($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookRestriction$Type = ($BookRestriction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookRestriction_ = $BookRestriction$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/wallet/$WalletButton" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$InventoryButton, $InventoryButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/$InventoryButton"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $WalletButton extends $InventoryButton {
static readonly "SPRITE": $Sprite
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $AbstractContainerScreen$Type<(any)>, arg1: $Consumer$Type<($EasyButton$Type)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletButton$Type = ($WalletButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletButton_ = $WalletButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/config/$ScreenPositionConfig" {
import {$ModConfigEvent, $ModConfigEvent$Type} from "packages/net/minecraftforge/fml/event/config/$ModConfigEvent"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$ForgeConfigSpec$Builder, $ForgeConfigSpec$Builder$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$Builder"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ScreenPositionConfig implements $Supplier<($ScreenPosition)> {


public "getDefault"(): $ScreenPosition
public static "define"(arg0: $ForgeConfigSpec$Builder$Type, arg1: string, arg2: $ScreenPosition$Type, arg3: $Supplier$Type<($ForgeConfigSpec$Type)>): $ScreenPositionConfig
public "onConfigReloaded"(arg0: $ModConfigEvent$Type): void
get "default"(): $ScreenPosition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenPositionConfig$Type = ($ScreenPositionConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenPositionConfig_ = $ScreenPositionConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$DebugUtil" {
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DebugUtil {

constructor()

public static "getSideText"(arg0: $Level$Type): string
public static "getSideText"(arg0: $IClientTracker$Type): string
public static "getSideText"(arg0: boolean): string
public static "getSideText"(arg0: $Entity$Type): string
public static "getContainerDebug"(arg0: $Container$Type): string
public static "getItemDebug"(arg0: $ItemStack$Type): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DebugUtil$Type = ($DebugUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DebugUtil_ = $DebugUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/supplementaries/$LCSupplementaries" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCSupplementaries {
static readonly "RED_MERCHANT_ID": string
static "triggerMixin": boolean


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCSupplementaries$Type = ($LCSupplementaries);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCSupplementaries_ = $LCSupplementaries$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$FileUtil" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Gson, $Gson$Type} from "packages/com/google/gson/$Gson"
import {$File, $File$Type} from "packages/java/io/$File"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $FileUtil {
static "GSON": $Gson

constructor()

public static "parseItemStack"(arg0: $JsonObject$Type): $ItemStack
public static "convertItemStack"(arg0: $ItemStack$Type): $JsonObject
public static "writeStringToFile"(arg0: $File$Type, arg1: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileUtil$Type = ($FileUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileUtil_ = $FileUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/wallet/$WalletMenu" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$WalletMenuBase, $WalletMenuBase$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/wallet/$WalletMenuBase"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $WalletMenu extends $WalletMenuBase {
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: integer)

public "QuickCollectCoins"(): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletMenu$Type = ($WalletMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletMenu_ = $WalletMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption$LoadSource" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ConfigOption$LoadSource extends $Enum<($ConfigOption$LoadSource)> {
static readonly "FILE": $ConfigOption$LoadSource
static readonly "COMMAND": $ConfigOption$LoadSource
static readonly "SYNC": $ConfigOption$LoadSource


public static "values"(): ($ConfigOption$LoadSource)[]
public static "valueOf"(arg0: string): $ConfigOption$LoadSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigOption$LoadSource$Type = (("file") | ("sync") | ("command")) | ($ConfigOption$LoadSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigOption$LoadSource_ = $ConfigOption$LoadSource$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/auction/$CPacketSubmitBid" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketSubmitBid extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketSubmitBid)>

constructor(arg0: long, arg1: integer, arg2: $MoneyValue$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketSubmitBid$Type = ($CPacketSubmitBid);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketSubmitBid_ = $CPacketSubmitBid$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/$LCTags" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LCTags {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCTags$Type = ($LCTags);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCTags_ = $LCTags$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/$PersistentAuctionData" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"

export class $PersistentAuctionData {
readonly "id": string
readonly "duration": long


public static "load"(arg0: $JsonObject$Type): $PersistentAuctionData
public "getStartingBid"(): $MoneyValue
public "getMinimumBidDifference"(): $MoneyValue
public "getAuctionItems"(): $List<($ItemStack)>
public "createAuction"(): $AuctionTradeData
get "startingBid"(): $MoneyValue
get "minimumBidDifference"(): $MoneyValue
get "auctionItems"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PersistentAuctionData$Type = ($PersistentAuctionData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PersistentAuctionData_ = $PersistentAuctionData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/event_coins/$ChocolateEventCoins" {
import {$ILootModifier, $ILootModifier$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/modifier/$ILootModifier"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$EventRange, $EventRange$Type} from "packages/io/github/lightman314/lightmanscurrency/common/event_coins/$EventRange"
import {$ChainDataReloadedEvent$Pre, $ChainDataReloadedEvent$Pre$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$ChainDataReloadedEvent$Pre"

export class $ChocolateEventCoins {
static readonly "CHAIN": string
static readonly "LOOT_MODIFIER": $ILootModifier
static readonly "CHRISTMAS": $EventRange
static readonly "VALENTINES": $EventRange


public static "shouldModifyLoot"(): boolean
public static "getChainData"(): $ChainData
public static "registerChain"(arg0: $ChainDataReloadedEvent$Pre$Type): void
get "chainData"(): $ChainData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChocolateEventCoins$Type = ($ChocolateEventCoins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChocolateEventCoins_ = $ChocolateEventCoins$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator$Chest" {
import {$ChestPoolLevel, $ChestPoolLevel$Type} from "packages/io/github/lightman314/lightmanscurrency/common/loot/tiers/$ChestPoolLevel"
import {$DroplistConfigGenerator, $DroplistConfigGenerator$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$DroplistConfigGenerator"

export class $DroplistConfigGenerator$Chest extends $DroplistConfigGenerator {


public "getTier"(): $ChestPoolLevel
get "tier"(): $ChestPoolLevel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DroplistConfigGenerator$Chest$Type = ($DroplistConfigGenerator$Chest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DroplistConfigGenerator$Chest_ = $DroplistConfigGenerator$Chest$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/jeiplugin/$LCJeiPlugin" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CoinMintRecipe, $CoinMintRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$TicketStationRecipe, $TicketStationRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketStationRecipe"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $LCJeiPlugin implements $IModPlugin {
static readonly "COIN_MINT_TYPE": $RecipeType<($CoinMintRecipe)>
static readonly "TICKET_TYPE": $RecipeType<($TicketStationRecipe)>

constructor()

public "registerGuiHandlers"(arg0: $IGuiHandlerRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipeCatalysts"(arg0: $IRecipeCatalystRegistration$Type): void
public "getPluginUid"(): $ResourceLocation
public "registerRecipes"(arg0: $IRecipeRegistration$Type): void
public "registerCategories"(arg0: $IRecipeCategoryRegistration$Type): void
public "registerItemSubtypes"(arg0: $ISubtypeRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "onRuntimeUnavailable"(): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerAdvanced"(arg0: $IAdvancedRegistration$Type): void
public "onRuntimeAvailable"(arg0: $IJeiRuntime$Type): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCJeiPlugin$Type = ($LCJeiPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCJeiPlugin_ = $LCJeiPlugin$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType" {
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $UpgradeType {

constructor()

public "getTooltip"(arg0: $UpgradeData$Type): $List<($Component)>
public "addTarget"(arg0: $Component$Type): void
public "addTarget"(arg0: $ItemLike$Type): void
public "addTarget"(arg0: $RegistryObject$Type<(any)>): void
public "getDefaultData"(): $UpgradeData
public "getPossibleTargets"(): $List<($Component)>
public static "hasUpgrade"(arg0: $UpgradeType$Type, arg1: $Container$Type): boolean
public "clearDataFromStack"(arg0: $CompoundTag$Type): boolean
get "defaultData"(): $UpgradeData
get "possibleTargets"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeType$Type = ($UpgradeType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeType_ = $UpgradeType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/wallet/$CPacketWalletExchangeCoins" {
import {$ClientToServerPacket$Simple, $ClientToServerPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $CPacketWalletExchangeCoins extends $ClientToServerPacket$Simple {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketWalletExchangeCoins)>


public static "sendToServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketWalletExchangeCoins$Type = ($CPacketWalletExchangeCoins);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketWalletExchangeCoins_ = $CPacketWalletExchangeCoins$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$MoneyValueListOption" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ListOption, $ListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ListOption"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $MoneyValueListOption extends $ListOption<($MoneyValue)> {


public static "create"(arg0: $NonNullSupplier$Type<($List$Type<($MoneyValue$Type)>)>): $MoneyValueListOption
public static "create"(arg0: $NonNullSupplier$Type<($List$Type<($MoneyValue$Type)>)>, arg1: $Predicate$Type<($MoneyValue$Type)>): $MoneyValueListOption
public static "createNonEmpty"(arg0: $NonNullSupplier$Type<($List$Type<($MoneyValue$Type)>)>): $MoneyValueListOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyValueListOption$Type = ($MoneyValueListOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyValueListOption_ = $MoneyValueListOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/loot/packs/$ChestAddonLoot" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LootTable$Builder, $LootTable$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable$Builder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LootTableSubProvider, $LootTableSubProvider$Type} from "packages/net/minecraft/data/loot/$LootTableSubProvider"

export class $ChestAddonLoot implements $LootTableSubProvider {

constructor()

public "generate"(arg0: $BiConsumer$Type<($ResourceLocation$Type), ($LootTable$Builder$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChestAddonLoot$Type = ($ChestAddonLoot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChestAddonLoot_ = $ChestAddonLoot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamTab" {
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"

export class $TeamTab extends $EasyTab {


public "getColor"(): integer
public "allowViewing"(arg0: $Player$Type, arg1: $Team$Type): boolean
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamTab$Type = ($TeamTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamTab_ = $TeamTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/$InventoryButton" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PlainButton, $PlainButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/$PlainButton"

export class $InventoryButton extends $PlainButton {
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryButton$Type = ($InventoryButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryButton_ = $InventoryButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/logs/$TraderLogTab" {
import {$TraderStorageMenu, $TraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderStorageMenu"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $TraderLogTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderLogTab$Type = ($TraderLogTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderLogTab_ = $TraderLogTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/menu/$IBankAccountAdvancedMenu" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IBankAccountMenu, $IBankAccountMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/menu/$IBankAccountMenu"

export interface $IBankAccountAdvancedMenu extends $IBankAccountMenu {

 "setTransferMessage"(arg0: $MutableComponent$Type): void
 "onDepositOrWithdraw"(): void
 "getBankAccountReference"(): $BankReference
 "getPlayer"(): $Player
 "getBankAccount"(): $IBankAccount
 "getCoinInput"(): $Container
 "isClient"(): boolean
 "isServer"(): boolean
}

export namespace $IBankAccountAdvancedMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBankAccountAdvancedMenu$Type = ($IBankAccountAdvancedMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBankAccountAdvancedMenu_ = $IBankAccountAdvancedMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValueParser" {
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$CommandSyntaxException, $CommandSyntaxException$Type} from "packages/com/mojang/brigadier/exceptions/$CommandSyntaxException"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MoneyValueParser, $MoneyValueParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValueParser"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$HolderLookup, $HolderLookup$Type} from "packages/net/minecraft/core/$HolderLookup"
import {$CommandExceptionType, $CommandExceptionType$Type} from "packages/com/mojang/brigadier/exceptions/$CommandExceptionType"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $CoinValueParser extends $MoneyValueParser {
static readonly "INSTANCE": $MoneyValueParser
readonly "prefix": string
static readonly "EXCEPTION_TYPE": $CommandExceptionType


public "parseValueArgument"(arg0: $StringReader$Type): $MoneyValue
public "listSuggestions"<S>(arg0: $CommandContext$Type<(S)>, arg1: $SuggestionsBuilder$Type, arg2: string, arg3: $HolderLookup$Type<($Item$Type)>): $CompletableFuture<($Suggestions)>
public "addExamples"(arg0: $List$Type<(string)>): void
public static "NotACoinException"(arg0: string, arg1: $StringReader$Type): $CommandSyntaxException
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinValueParser$Type = ($CoinValueParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinValueParser_ = $CoinValueParser$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/input/templates/$SimpleDisplayInput" {
import {$MoneyInputHandler, $MoneyInputHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/input/$MoneyInputHandler"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $SimpleDisplayInput extends $MoneyInputHandler {


public "initialize"(arg0: $ScreenArea$Type): void
public "renderTick"(): void
public "onValueChanged"(arg0: $MoneyValue$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleDisplayInput$Type = ($SimpleDisplayInput);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleDisplayInput_ = $SimpleDisplayInput$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$RuleToggleTab" {
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $RuleToggleTab extends $TradeRulesClientSubTab {
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TradeRulesClientTab$Type<(any)>)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "isVisible"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "visible"(): boolean
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RuleToggleTab$Type = ($RuleToggleTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RuleToggleTab_ = $RuleToggleTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/$AuctionPlayerStorage" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MoneyStorage, $MoneyStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage"

export class $AuctionPlayerStorage {

constructor(arg0: $CompoundTag$Type)
constructor(arg0: $PlayerReference$Type)

public "save"(arg0: $CompoundTag$Type): $CompoundTag
public "getOwner"(): $PlayerReference
public "collectedMoney"(arg0: $Player$Type): void
public "getStoredItems"(): $List<($ItemStack)>
public "giveMoney"(arg0: $MoneyValue$Type): void
public "collectItems"(arg0: $Player$Type): void
public "giveItem"(arg0: $ItemStack$Type): void
public "getStoredCoins"(): $MoneyStorage
public "removePartial"(arg0: integer, arg1: integer): void
get "owner"(): $PlayerReference
get "storedItems"(): $List<($ItemStack)>
get "storedCoins"(): $MoneyStorage
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionPlayerStorage$Type = ($AuctionPlayerStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionPlayerStorage_ = $AuctionPlayerStorage$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/stats/types/$IntegerStat" {
import {$StatType, $StatType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType"
import {$StatType$Instance, $StatType$Instance$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType$Instance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $IntegerStat extends $StatType<(integer), (integer)> {
static readonly "TYPE": $ResourceLocation
static readonly "INSTANCE": $StatType<(integer), (integer)>


public "create"(): $StatType$Instance<(integer), (integer)>
public "getID"(): $ResourceLocation
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntegerStat$Type = ($IntegerStat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntegerStat_ = $IntegerStat$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer" {
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"

export interface $IMoneyViewer {

 "flagAsKnown"(arg0: any): void
 "forgetContext"(arg0: any): void
 "hasStoredMoneyChanged"(arg0: any): boolean
 "getStoredMoney"(): $MoneyView
}

export namespace $IMoneyViewer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMoneyViewer$Type = ($IMoneyViewer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMoneyViewer_ = $IMoneyViewer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$BankAccountWidget$IBankAccountWidget" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"

export interface $BankAccountWidget$IBankAccountWidget {

 "getScreen"(): $Screen
 "getBankAccount"(): $IBankAccount
 "getFont"(): $Font
 "getCoinAccess"(): $IMoneyViewer
}

export namespace $BankAccountWidget$IBankAccountWidget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankAccountWidget$IBankAccountWidget$Type = ($BankAccountWidget$IBankAccountWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankAccountWidget$IBankAccountWidget_ = $BankAccountWidget$IBankAccountWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$RandomTrade" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$RandomTrade$Serializer, $RandomTrade$Serializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/listings/$RandomTrade$Serializer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RandomTrade implements $VillagerTrades$ItemListing {
static readonly "TYPE": $ResourceLocation
static readonly "SERIALIZER": $RandomTrade$Serializer

constructor(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $List$Type<($ItemStack$Type)>, arg3: $TagKey$Type<($Item$Type)>, arg4: integer, arg5: integer, arg6: float)

public static "build"(arg0: $ItemStack$Type, arg1: $List$Type<(any)>, arg2: integer, arg3: integer, arg4: float): $RandomTrade
public static "build"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $List$Type<(any)>, arg3: integer, arg4: integer, arg5: float): $RandomTrade
public static "build"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $TagKey$Type<($Item$Type)>, arg3: integer, arg4: integer, arg5: float): $RandomTrade
public static "build"(arg0: $ItemStack$Type, arg1: $TagKey$Type<($Item$Type)>, arg2: integer, arg3: integer, arg4: float): $RandomTrade
public "getOffer"(arg0: $Entity$Type, arg1: $RandomSource$Type): $MerchantOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomTrade$Type = ($RandomTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomTrade_ = $RandomTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/advancements/date/$DateTrigger$Instance" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$AbstractCriterionTriggerInstance, $AbstractCriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$AbstractCriterionTriggerInstance"
import {$DatePredicate, $DatePredicate$Type} from "packages/io/github/lightman314/lightmanscurrency/common/advancements/date/$DatePredicate"
import {$SerializationContext, $SerializationContext$Type} from "packages/net/minecraft/advancements/critereon/$SerializationContext"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $DateTrigger$Instance extends $AbstractCriterionTriggerInstance {

constructor(arg0: $ContextAwarePredicate$Type, arg1: $DatePredicate$Type, arg2: $DatePredicate$Type)

public "test"(): boolean
public "serializeToJson"(arg0: $SerializationContext$Type): $JsonObject
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DateTrigger$Instance$Type = ($DateTrigger$Instance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DateTrigger$Instance_ = $DateTrigger$Instance$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/builtin/$Null" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ValueDisplaySerializer, $ValueDisplaySerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplaySerializer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ValueDisplayData, $ValueDisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplayData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CoinValue, $CoinValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $Null extends $ValueDisplayData {
static readonly "TYPE": $ResourceLocation
static readonly "INSTANCE": $Null
static readonly "SERIALIZER": $ValueDisplaySerializer


public "getSerializer"(): $ValueDisplaySerializer
public "formatCoinTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "formatValue"(arg0: $CoinValue$Type, arg1: $MutableComponent$Type): $MutableComponent
get "serializer"(): $ValueDisplaySerializer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Null$Type = ($Null);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Null_ = $Null$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/trader/$SlotMachineTradeNotification" {
import {$SlotMachineEntry, $SlotMachineEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineEntry"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$TraderCategory, $TraderCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$TraderCategory"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$TaxableNotification, $TaxableNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/$TaxableNotification"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $SlotMachineTradeNotification extends $TaxableNotification {
static readonly "TYPE": $NotificationType<($SlotMachineTradeNotification)>


public static "create"(arg0: $SlotMachineEntry$Type, arg1: $MoneyValue$Type, arg2: $PlayerReference$Type, arg3: $TraderCategory$Type, arg4: $MoneyValue$Type): $NonNullSupplier<($Notification)>
public "getCategory"(): $NotificationCategory
public "getNormalMessage"(): $MutableComponent
get "category"(): $NotificationCategory
get "normalMessage"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineTradeNotification$Type = ($SlotMachineTradeNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineTradeNotification_ = $SlotMachineTradeNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/tax_collector/$BasicSettingsClientTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$BasicSettingsTab, $BasicSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$BasicSettingsTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TaxCollectorScreen, $TaxCollectorScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TaxCollectorScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TaxCollectorClientTab, $TaxCollectorClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorClientTab"

export class $BasicSettingsClientTab extends $TaxCollectorClientTab<($BasicSettingsTab)> {
readonly "screen": $TaxCollectorScreen
readonly "menu": $TaxCollectorMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $BasicSettingsTab$Type)

public "tick"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
get "icon"(): $IconData
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasicSettingsClientTab$Type = ($BasicSettingsClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasicSettingsClientTab_ = $BasicSettingsClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplayData" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$ValueDisplaySerializer, $ValueDisplaySerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplaySerializer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CoinValue, $CoinValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValue"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ValueDisplayData {

constructor()

public "getType"(): $ResourceLocation
public "setParent"(arg0: $ChainData$Type): void
public "getSerializer"(): $ValueDisplaySerializer
public "formatCoinTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "parseDisplayInput"(arg0: double): $MoneyValue
public "getChain"(): string
public "formatValue"(arg0: $CoinValue$Type, arg1: $MutableComponent$Type): $MutableComponent
get "type"(): $ResourceLocation
set "parent"(value: $ChainData$Type)
get "serializer"(): $ValueDisplaySerializer
get "chain"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueDisplayData$Type = ($ValueDisplayData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueDisplayData_ = $ValueDisplayData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValuePair" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CoinValuePair {
readonly "coin": $Item
readonly "amount": integer

constructor(arg0: $Item$Type, arg1: integer)

public static "load"(arg0: $ChainData$Type, arg1: $CompoundTag$Type): $CoinValuePair
public static "decode"(arg0: $ChainData$Type, arg1: $FriendlyByteBuf$Type): $CoinValuePair
public "encode"(arg0: $FriendlyByteBuf$Type): void
public "save"(): $CompoundTag
public "copy"(): $CoinValuePair
public static "fromJson"(arg0: $ChainData$Type, arg1: $JsonObject$Type): $CoinValuePair
public "toJson"(): $JsonObject
public "removeAmount"(arg0: integer): $CoinValuePair
public "asStack"(): $ItemStack
public "addAmount"(arg0: integer): $CoinValuePair
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinValuePair$Type = ($CoinValuePair);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinValuePair_ = $CoinValuePair$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/config/$SPacketSyncConfig" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SPacketSyncConfig extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncConfig)>

constructor(arg0: $ResourceLocation$Type, arg1: $Map$Type<(string), (string)>)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncConfig$Type = ($SPacketSyncConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncConfig_ = $SPacketSyncConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$InteractionTab" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$ATMScreen, $ATMScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$ATMScreen"
import {$ATMTab, $ATMTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$ATMTab"
import {$BankAccountWidget$IBankAccountWidget, $BankAccountWidget$IBankAccountWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$BankAccountWidget$IBankAccountWidget"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $InteractionTab extends $ATMTab implements $BankAccountWidget$IBankAccountWidget {

constructor(arg0: $ATMScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getIcon"(): $IconData
public "getScreen"(): $Screen
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getBankAccount"(): $IBankAccount
public "getCoinAccess"(): $IMoneyViewer
public "getFont"(): $Font
get "icon"(): $IconData
get "screen"(): $Screen
get "bankAccount"(): $IBankAccount
get "coinAccess"(): $IMoneyViewer
get "font"(): $Font
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InteractionTab$Type = ($InteractionTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InteractionTab_ = $InteractionTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/auction/$AuctionCreateClientTab" {
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$AuctionCreateTab, $AuctionCreateTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/auction/$AuctionCreateTab"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $AuctionCreateClientTab extends $TraderStorageClientTab<($AuctionCreateTab)> {
static readonly "CLOSE_DELAY": long
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $AuctionCreateTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "closeAction"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $MutableComponent
public "receiveServerMessage"(arg0: $LazyPacketData$Type): void
get "icon"(): $IconData
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionCreateClientTab$Type = ($AuctionCreateClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionCreateClientTab_ = $AuctionCreateClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBiBundle" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$BundleRequestFilter, $BundleRequestFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$BundleRequestFilter"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TriConsumer, $TriConsumer$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TriConsumer"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $RegistryObjectBiBundle<T, L, M> {

constructor(arg0: $Comparator$Type<(L)>, arg1: $Comparator$Type<(M)>)

public "lock"(): $RegistryObjectBiBundle<(T), (L), (M)>
public "get"(arg0: L, arg1: M): T
public "put"(arg0: L, arg1: M, arg2: $RegistryObject$Type<(T)>): void
public "forEach"(arg0: $TriConsumer$Type<(L), (M), ($RegistryObject$Type<(T)>)>): void
public "getAll"(): $List<(T)>
public "getRegistryObject"(arg0: L, arg1: M): $RegistryObject<(T)>
public "getAllSorted"(arg0: $Comparator$Type<(L)>, arg1: $Comparator$Type<(M)>): $List<(T)>
public "getAllSorted"(arg0: $BundleRequestFilter$Type): $List<(T)>
public "getAllSorted"(): $List<(T)>
public "getAllSorted"(arg0: $BundleRequestFilter$Type, arg1: $Comparator$Type<(L)>, arg2: $Comparator$Type<(M)>): $List<(T)>
public "forEachKey1"(arg0: $Consumer$Type<(L)>): void
public "getKey1Sorted"(): $List<(L)>
public "getAllRegistryObjects"(): $Collection<($RegistryObject<(T)>)>
public "getSupplier"(): $List<($Supplier<(T)>)>
get "all"(): $List<(T)>
get "allSorted"(): $List<(T)>
get "key1Sorted"(): $List<(L)>
get "allRegistryObjects"(): $Collection<($RegistryObject<(T)>)>
get "supplier"(): $List<($Supplier<(T)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegistryObjectBiBundle$Type<T, L, M> = ($RegistryObjectBiBundle<(T), (L), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegistryObjectBiBundle_<T, L, M> = $RegistryObjectBiBundle$Type<(T), (L), (M)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplayAPI" {
import {$ValueDisplaySerializer, $ValueDisplaySerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplaySerializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ValueDisplayAPI {

constructor()

public static "get"(arg0: $ResourceLocation$Type): $ValueDisplaySerializer
public static "Setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueDisplayAPI$Type = ($ValueDisplayAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueDisplayAPI_ = $ValueDisplayAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineTraderData" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$SlotMachineEntry, $SlotMachineEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineEntry"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TraderItemStorage, $TraderItemStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage"
import {$StatTracker, $StatTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatTracker"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TradeResult, $TradeResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderType, $TraderType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$TraderItemStorage$ITraderItemFilter, $TraderItemStorage$ITraderItemFilter$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage$ITraderItemFilter"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"
import {$SlotMachineTrade, $SlotMachineTrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/trade_data/$SlotMachineTrade"

export class $SlotMachineTraderData extends $TraderData implements $TraderItemStorage$ITraderItemFilter {
static readonly "TYPE": $TraderType<($SlotMachineTraderData)>
static readonly "GLOBAL_TRADE_LIMIT": integer
readonly "type": $TraderType<(any)>
readonly "statTracker": $StatTracker

constructor(arg0: $Level$Type, arg1: $BlockPos$Type)

public "addEntry"(): void
public "removeEntry"(arg0: integer): void
public "hasStock"(): boolean
public "getAllEntries"(): $List<($SlotMachineEntry)>
public "markLastRewardDirty"(): void
public "clearEntriesChangedCache"(): void
public "getPrice"(): $MoneyValue
public "getIcon"(): $IconData
public "getStorageStackLimit"(): integer
public "getTradeData"(): $List<($SlotMachineTrade)>
public "hasValidTrade"(): boolean
public "getTradeStock"(arg0: integer): integer
public "getTradeCount"(): integer
public "canMakePersistent"(): boolean
public "getTrade"(arg0: integer): $SlotMachineTrade
public "ExecuteTrade"(arg0: $TradeContext$Type, arg1: integer): $TradeResult
public "removeTrade"(arg0: $Player$Type): void
public "initStorageTabs"(arg0: $ITraderStorageMenu$Type): void
public "getTotalWeight"(): integer
public "addTrade"(arg0: $Player$Type): void
public "markStorageDirty"(): void
public "getStorage"(): $TraderItemStorage
public "areEntriesChanged"(): boolean
public "getValidEntries"(): $List<($SlotMachineEntry)>
public "markPriceDirty"(): void
public "markEntriesDirty"(): void
public "getRandomizedEntry"(arg0: $TradeContext$Type): $SlotMachineEntry
public "isPriceValid"(): boolean
public "setPrice"(arg0: $MoneyValue$Type): void
public "getLastRewards"(): $List<($ItemStack)>
public "getOdds"(arg0: integer): string
public "getSlotMachineInfo"(): $List<($Component)>
public "isItemRelevant"(arg0: $ItemStack$Type): boolean
public static "preCollected"(arg0: $List$Type<($ItemStack$Type)>, arg1: $Component$Type, arg2: $OwnerData$Type): $IDumpable
public static "UniversalTraderSource"(arg0: boolean): $Supplier<($ITraderSource)>
get "allEntries"(): $List<($SlotMachineEntry)>
get "price"(): $MoneyValue
get "icon"(): $IconData
get "storageStackLimit"(): integer
get "tradeData"(): $List<($SlotMachineTrade)>
get "tradeCount"(): integer
get "totalWeight"(): integer
get "storage"(): $TraderItemStorage
get "validEntries"(): $List<($SlotMachineEntry)>
get "priceValid"(): boolean
set "price"(value: $MoneyValue$Type)
get "lastRewards"(): $List<($ItemStack)>
get "slotMachineInfo"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineTraderData$Type = ($SlotMachineTraderData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineTraderData_ = $SlotMachineTraderData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/jeiplugin/$TicketStationCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"
import {$TicketStationRecipe, $TicketStationRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketStationRecipe"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IDrawable, $IDrawable$Type} from "packages/mezz/jei/api/gui/drawable/$IDrawable"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $TicketStationCategory implements $IRecipeCategory<($TicketStationRecipe)> {

constructor(arg0: $IGuiHelper$Type)

public "getRecipeType"(): $RecipeType<($TicketStationRecipe)>
public "getIcon"(): $IDrawable
public "getTitle"(): $Component
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $TicketStationRecipe$Type, arg2: $IFocusGroup$Type): void
public "getBackground"(): $IDrawable
public "draw"(arg0: $TicketStationRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "getWidth"(): integer
public "getHeight"(): integer
public "isHandled"(arg0: $TicketStationRecipe$Type): boolean
public "handleInput"(arg0: $TicketStationRecipe$Type, arg1: double, arg2: double, arg3: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: $TicketStationRecipe$Type, arg1: $IRecipeSlotsView$Type, arg2: double, arg3: double): $List<($Component)>
public "getRegistryName"(arg0: $TicketStationRecipe$Type): $ResourceLocation
get "recipeType"(): $RecipeType<($TicketStationRecipe)>
get "icon"(): $IDrawable
get "title"(): $Component
get "background"(): $IDrawable
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketStationCategory$Type = ($TicketStationCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketStationCategory_ = $TicketStationCategory$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export interface $ITraderSource {

 "getTraders"(): $List<($TraderData)>
 "isSingleTrader"(): boolean
 "getSingleTrader"(): $TraderData
}

export namespace $ITraderSource {
const CLIENT_TRADER_SOURCE: $ITraderSource
const SERVER_TRADER_SOURCE: $ITraderSource
function UniversalTraderSource(arg0: boolean): $Supplier<($ITraderSource)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITraderSource$Type = ($ITraderSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITraderSource_ = $ITraderSource$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$SimpleBookRenderer" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BookRenderer, $BookRenderer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/renderer/blockentity/book/$BookRenderer"

export class $SimpleBookRenderer extends $BookRenderer {


public "render"(arg0: $BlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleBookRenderer$Type = ($SimpleBookRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleBookRenderer_ = $SimpleBookRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TaxCollectorScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TaxCollectorClientTab, $TaxCollectorClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorClientTab"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TaxCollectorScreen extends $EasyMenuScreen<($TaxCollectorMenu)> {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $TaxCollectorMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "getEntry"(): $TaxEntry
public "blockInventoryClosing"(): boolean
public "getCurrentTab"(): $TaxCollectorClientTab<(any)>
get "entry"(): $TaxEntry
get "currentTab"(): $TaxCollectorClientTab<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxCollectorScreen$Type = ($TaxCollectorScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxCollectorScreen_ = $TaxCollectorScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType$Attributes" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"

export class $WoodType$Attributes extends $Record {
static readonly "ALL": $WoodType$Attributes
static readonly "LOG_ONLY": $WoodType$Attributes
static readonly "PLANKS_ONLY": $WoodType$Attributes
static readonly "PLANKS_AND_SLAB_ONLY": $WoodType$Attributes
static readonly "needsAll": $Predicate<($WoodType$Attributes)>
static readonly "needsLog": $Predicate<($WoodType$Attributes)>
static readonly "needsLogAndPlanks": $Predicate<($WoodType$Attributes)>
static readonly "needsLogAndSlab": $Predicate<($WoodType$Attributes)>
static readonly "needsPlanks": $Predicate<($WoodType$Attributes)>
static readonly "needsPlanksAndSlab": $Predicate<($WoodType$Attributes)>
static readonly "needsSlab": $Predicate<($WoodType$Attributes)>

constructor(hasCustomLog: boolean, hasCustomPlanks: boolean, hasCustomSlab: boolean)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "hasCustomPlanks"(): boolean
public "hasCustomLog"(): boolean
public "hasCustomSlab"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodType$Attributes$Type = ($WoodType$Attributes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodType$Attributes_ = $WoodType$Attributes$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/player/$LCAdminMode" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PacketDistributor$PacketTarget, $PacketDistributor$PacketTarget$Type} from "packages/net/minecraftforge/network/$PacketDistributor$PacketTarget"

export class $LCAdminMode {

constructor()

public static "sendSyncPacket"(arg0: $PacketDistributor$PacketTarget$Type): void
public static "loadAdminPlayers"(arg0: $List$Type<($UUID$Type)>): void
public static "isAdminPlayer"(arg0: $Player$Type): boolean
public static "ToggleAdminPlayer"(arg0: $ServerPlayer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCAdminMode$Type = ($LCAdminMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCAdminMode_ = $LCAdminMode$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"

export class $NotificationData implements $IClientTracker {

constructor()

public "load"(arg0: $CompoundTag$Type): void
public "save"(): $CompoundTag
public "getNotifications"(arg0: $NotificationCategory$Type): $List<($Notification)>
public "getNotifications"(): $List<($Notification)>
public static "loadFrom"(arg0: $CompoundTag$Type): $NotificationData
public "isClient"(): boolean
public "getCategories"(): $List<($NotificationCategory)>
public "addNotification"(arg0: $Notification$Type): void
public "flagAsClient"(): void
public "unseenNotification"(arg0: $NotificationCategory$Type): boolean
public "unseenNotification"(): boolean
public "isServer"(): boolean
get "notifications"(): $List<($Notification)>
get "client"(): boolean
get "categories"(): $List<($NotificationCategory)>
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationData$Type = ($NotificationData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationData_ = $NotificationData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer" {
import {$ItemListingSerializer$IItemListingSerializer, $ItemListingSerializer$IItemListingSerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingSerializer"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ItemListingSerializer$IItemListingDeserializer, $ItemListingSerializer$IItemListingDeserializer$Type} from "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingDeserializer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$JsonArray, $JsonArray$Type} from "packages/com/google/gson/$JsonArray"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ItemListingSerializer {

constructor()

public static "deserialize"(arg0: $JsonObject$Type): $Map<(integer), ($List<($VillagerTrades$ItemListing)>)>
public static "registerItemListing"<L extends $VillagerTrades$ItemListing, T extends ($ItemListingSerializer$IItemListingSerializer) & ($ItemListingSerializer$IItemListingDeserializer)>(arg0: $ResourceLocation$Type, arg1: $Class$Type<(L)>, arg2: T): void
public static "registerItemListing"<T extends $VillagerTrades$ItemListing>(arg0: $ResourceLocation$Type, arg1: $Class$Type<(T)>, arg2: $ItemListingSerializer$IItemListingSerializer$Type, arg3: $ItemListingSerializer$IItemListingDeserializer$Type): void
public static "serializeList"(arg0: $List$Type<($VillagerTrades$ItemListing$Type)>): $JsonArray
public static "deserializeList"(arg0: $JsonArray$Type): $List<($VillagerTrades$ItemListing)>
public static "serializeTrade"<T extends $VillagerTrades$ItemListing>(arg0: T): $JsonObject
public static "serialize"(arg0: $Map$Type<(integer), ($List$Type<($VillagerTrades$ItemListing$Type)>)>, arg1: integer): $JsonObject
public static "deserializeTrade"(arg0: $JsonObject$Type): $VillagerTrades$ItemListing
public static "registerDefaultSerializers"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemListingSerializer$Type = ($ItemListingSerializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemListingSerializer_ = $ItemListingSerializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/claiming/$LCClaiming" {
import {$IClaimPurchaseHandler, $IClaimPurchaseHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/integration/claiming/$IClaimPurchaseHandler"

export class $LCClaiming {

constructor()

public static "setup"(arg0: $IClaimPurchaseHandler$Type): void
set "up"(value: $IClaimPurchaseHandler$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCClaiming$Type = ($LCClaiming);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCClaiming_ = $LCClaiming$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/paygate/$CPacketCollectTicketStubs" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketCollectTicketStubs extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketCollectTicketStubs)>

constructor(arg0: long)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketCollectTicketStubs$Type = ($CPacketCollectTicketStubs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketCollectTicketStubs_ = $CPacketCollectTicketStubs$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/providers/$TerminalMenuProvider" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TerminalMenuProvider implements $MenuProvider {

constructor(arg0: $MenuValidator$Type)

public "getDisplayName"(): $Component
public static "OpenMenu"(arg0: $ServerPlayer$Type, arg1: $MenuValidator$Type): void
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TerminalMenuProvider$Type = ($TerminalMenuProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TerminalMenuProvider_ = $TerminalMenuProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/util/$CustomPathProvider" {
import {$PackOutput$Target, $PackOutput$Target$Type} from "packages/net/minecraft/data/$PackOutput$Target"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $CustomPathProvider {

constructor(arg0: $PackOutput$Type, arg1: $PackOutput$Target$Type, arg2: string)
constructor(arg0: $PackOutput$Type, arg1: $PackOutput$Target$Type, arg2: string, arg3: string)

public "file"(arg0: $ResourceLocation$Type, arg1: string): $Path
public "json"(arg0: $ResourceLocation$Type): $Path
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomPathProvider$Type = ($CustomPathProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomPathProvider_ = $CustomPathProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeDirection" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TradeDirection extends $Enum<($TradeDirection)> {
static readonly "SALE": $TradeDirection
static readonly "PURCHASE": $TradeDirection
static readonly "BARTER": $TradeDirection
static readonly "OTHER": $TradeDirection
readonly "index": integer


public "getName"(): $MutableComponent
public static "values"(): ($TradeDirection)[]
public static "valueOf"(arg0: string): $TradeDirection
public static "fromIndex"(arg0: integer): $TradeDirection
public "getActionPhrase"(): $MutableComponent
get "name"(): $MutableComponent
get "actionPhrase"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeDirection$Type = (("sale") | ("other") | ("purchase") | ("barter")) | ($TradeDirection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeDirection_ = $TradeDirection$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blockentity/$IOwnableBlockEntity" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export interface $IOwnableBlockEntity {

 "canBreak"(arg0: $Player$Type): boolean

(arg0: $Player$Type): boolean
}

export namespace $IOwnableBlockEntity {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IOwnableBlockEntity$Type = ($IOwnableBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IOwnableBlockEntity_ = $IOwnableBlockEntity$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IEasyEntityBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export interface $IEasyEntityBlock extends $EntityBlock {

 "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
 "getAllowedTypes"(): $Collection<($BlockEntityType<(any)>)>
 "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
 "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}

export namespace $IEasyEntityBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IEasyEntityBlock$Type = ($IEasyEntityBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IEasyEntityBlock_ = $IEasyEntityBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$PlayerMoneyHolder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyHolder$Slave, $MoneyHolder$Slave$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyHolder$Slave"

/**
 * 
 * @deprecated
 */
export class $PlayerMoneyHolder extends $MoneyHolder$Slave {

constructor(arg0: $IMoneyHolder$Type)

public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerMoneyHolder$Type = ($PlayerMoneyHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerMoneyHolder_ = $PlayerMoneyHolder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/auction/$SPacketSyncAuctionStandDisplay" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncAuctionStandDisplay extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncAuctionStandDisplay)>

constructor(arg0: $List$Type<($ItemStack$Type)>)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncAuctionStandDisplay$Type = ($SPacketSyncAuctionStandDisplay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncAuctionStandDisplay_ = $SPacketSyncAuctionStandDisplay$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModSounds" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $ModSounds {
static readonly "COINS_CLINKING": $RegistryObject<($SoundEvent)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModSounds$Type = ($ModSounds);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModSounds_ = $ModSounds$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderinterface/$TradeSelectClientTab" {
import {$TradeSelectTab, $TradeSelectTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderinterface/base/$TradeSelectTab"
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$TraderInterfaceClientTab, $TraderInterfaceClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceClientTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TraderInterfaceScreen, $TraderInterfaceScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderInterfaceScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TradeSelectClientTab extends $TraderInterfaceClientTab<($TradeSelectTab)> {
readonly "commonTab": T

constructor(arg0: $TraderInterfaceScreen$Type, arg1: $TradeSelectTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "tabButtonVisible"(): boolean
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeSelectClientTab$Type = ($TradeSelectClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeSelectClientTab_ = $TradeSelectClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Trader" {
import {$DepositWithdrawNotification$Server, $DepositWithdrawNotification$Server$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Server"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$DepositWithdrawNotification$Player, $DepositWithdrawNotification$Player$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Player"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$DepositWithdrawNotification, $DepositWithdrawNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $DepositWithdrawNotification$Trader extends $DepositWithdrawNotification {
static readonly "PLAYER_TYPE": $NotificationType<($DepositWithdrawNotification$Player)>
static readonly "TRADER_TYPE": $NotificationType<($DepositWithdrawNotification$Trader)>
static readonly "SERVER_TYPE": $NotificationType<($DepositWithdrawNotification$Server)>

constructor(arg0: $MutableComponent$Type, arg1: $MutableComponent$Type, arg2: boolean, arg3: $MoneyValue$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DepositWithdrawNotification$Trader$Type = ($DepositWithdrawNotification$Trader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DepositWithdrawNotification$Trader_ = $DepositWithdrawNotification$Trader$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/wallet/$VisibilityToggleButton" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$InventoryButton, $InventoryButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/inventory/$InventoryButton"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $VisibilityToggleButton extends $InventoryButton {
static readonly "SIZE": integer
static readonly "SPRITE_VISIBLE": $Sprite
static readonly "SPRITE_INVISIBLE": $Sprite
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $AbstractContainerScreen$Type<(any)>, arg1: $Consumer$Type<($EasyButton$Type)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VisibilityToggleButton$Type = ($VisibilityToggleButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VisibilityToggleButton_ = $VisibilityToggleButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/persistentdata/$CPacketCreatePersistentAuction" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketCreatePersistentAuction extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketCreatePersistentAuction)>

constructor(arg0: $CompoundTag$Type, arg1: string)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketCreatePersistentAuction$Type = ($CPacketCreatePersistentAuction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketCreatePersistentAuction_ = $CPacketCreatePersistentAuction$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ITab, $ITab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/tab/$ITab"
import {$NotificationCategoryType, $NotificationCategoryType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategoryType"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $NotificationCategory implements $ITab {
static readonly "GENERAL_TYPE": $NotificationCategoryType<(any)>
static readonly "GENERAL": $NotificationCategory

constructor()

public "getName"(): $MutableComponent
public "matches"(arg0: $NotificationCategory$Type): boolean
public "save"(): $CompoundTag
public "notGeneral"(): boolean
public "getColor"(): integer
public "getIcon"(): $IconData
get "name"(): $MutableComponent
get "color"(): integer
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationCategory$Type = ($NotificationCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationCategory_ = $NotificationCategory$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/crafting/builders/$WalletUpgradeRecipeBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RecipeBuilder, $RecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$RecipeBuilder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$CraftingRecipeBuilder, $CraftingRecipeBuilder$Type} from "packages/net/minecraft/data/recipes/$CraftingRecipeBuilder"
import {$RecipeCategory, $RecipeCategory$Type} from "packages/net/minecraft/data/recipes/$RecipeCategory"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$CriterionTriggerInstance, $CriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/$CriterionTriggerInstance"

export class $WalletUpgradeRecipeBuilder extends $CraftingRecipeBuilder implements $RecipeBuilder {

constructor(arg0: $RecipeCategory$Type, arg1: $ItemLike$Type, arg2: integer)

public "group"(arg0: string): $WalletUpgradeRecipeBuilder
public "requires"(arg0: $Ingredient$Type): $WalletUpgradeRecipeBuilder
public "requires"(arg0: $ItemLike$Type, arg1: integer): $WalletUpgradeRecipeBuilder
public "requires"(arg0: $Ingredient$Type, arg1: integer): $WalletUpgradeRecipeBuilder
public "requires"(arg0: $ItemLike$Type): $WalletUpgradeRecipeBuilder
public "requires"(arg0: $TagKey$Type<($Item$Type)>): $WalletUpgradeRecipeBuilder
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: $ResourceLocation$Type): void
public "unlockedBy"(arg0: string, arg1: $CriterionTriggerInstance$Type): $WalletUpgradeRecipeBuilder
public "getResult"(): $Item
public static "shapeless"(arg0: $RecipeCategory$Type, arg1: $ItemLike$Type): $WalletUpgradeRecipeBuilder
public static "shapeless"(arg0: $RecipeCategory$Type, arg1: $ItemLike$Type, arg2: integer): $WalletUpgradeRecipeBuilder
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>, arg1: string): void
public "save"(arg0: $Consumer$Type<($FinishedRecipe$Type)>): void
public static "getDefaultRecipeId"(arg0: $ItemLike$Type): $ResourceLocation
get "result"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletUpgradeRecipeBuilder$Type = ($WalletUpgradeRecipeBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletUpgradeRecipeBuilder_ = $WalletUpgradeRecipeBuilder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$CustomVillagerTradeData" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CustomVillagerTradeData {

constructor()

public static "getVillagerDataFile"(arg0: $ResourceLocation$Type): $File
public static "getVillagerData"(arg0: $ResourceLocation$Type): $Map<(integer), ($List<($VillagerTrades$ItemListing)>)>
public static "getWanderingTraderData"(): $Pair<($List<($VillagerTrades$ItemListing)>), ($List<($VillagerTrades$ItemListing)>)>
public static "registerDefaultWanderingTrades"(arg0: $List$Type<($VillagerTrades$ItemListing$Type)>, arg1: $List$Type<($VillagerTrades$ItemListing$Type)>): void
public static "registerDefaultFile"(arg0: $ResourceLocation$Type, arg1: $Map$Type<(integer), ($List$Type<($VillagerTrades$ItemListing$Type)>)>): void
get "wanderingTraderData"(): $Pair<($List<($VillagerTrades$ItemListing)>), ($List<($VillagerTrades$ItemListing)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomVillagerTradeData$Type = ($CustomVillagerTradeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomVillagerTradeData_ = $CustomVillagerTradeData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$TradeEvent$PostTradeEvent, $TradeEvent$PostTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PostTradeEvent"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TradeDirection, $TradeDirection$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeDirection"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$TradeEvent$TradeCostEvent, $TradeEvent$TradeCostEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$TradeCostEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$TradeComparisonResult, $TradeComparisonResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/comparison/$TradeComparisonResult"
import {$TradeEvent$PreTradeEvent, $TradeEvent$PreTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BasicTradeEditTab, $BasicTradeEditTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trades_basic/$BasicTradeEditTab"
import {$ITradeRuleHost, $ITradeRuleHost$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$ITradeRuleHost"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"

export class $TradeData implements $ITradeRuleHost {
static readonly "DEFAULT_KEY": string


public "compare"(arg0: $TradeData$Type): $TradeComparisonResult
public "getRules"(): $List<($TradeRule)>
public "isValid"(): boolean
public "isTrader"(): boolean
public "getTradeDirection"(): $TradeDirection
public "setCost"(arg0: $MoneyValue$Type): void
public "hasStock"(arg0: $TradeContext$Type): boolean
public "getAsNBT"(): $CompoundTag
public "AcceptableDifferences"(arg0: $TradeComparisonResult$Type): boolean
public "OnOutputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "GetDifferenceWarnings"(arg0: $TradeComparisonResult$Type): $List<($Component)>
public "OnInputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "getRelevantInventorySlots"(arg0: $TradeContext$Type, arg1: $List$Type<($Slot$Type)>): $List<(integer)>
public "outOfStock"(arg0: $TradeContext$Type): boolean
public "validCost"(): boolean
public "stockCountOfCost"(arg0: $TradeContext$Type): integer
public "stockCountOfCost"(arg0: $TraderData$Type): integer
public "setRules"(arg0: $List$Type<($TradeRule$Type)>): void
public "getButtonRenderer"(): $TradeRenderManager<(any)>
/**
 * 
 * @deprecated
 */
public "onInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($CompoundTag$Type)>, arg2: integer, arg3: integer, arg4: integer, arg5: $ItemStack$Type): void
public "getStock"(arg0: $TradeContext$Type): integer
public "getCostWithTaxes"(arg0: $TradeContext$Type): $MoneyValue
public "getCostWithTaxes"(arg0: $TraderData$Type): $MoneyValue
public "OnInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: integer, arg5: $ItemStack$Type): void
public "beforeTrade"(arg0: $TradeEvent$PreTradeEvent$Type): void
public "afterTrade"(arg0: $TradeEvent$PostTradeEvent$Type): void
public "tradeCost"(arg0: $TradeEvent$TradeCostEvent$Type): void
public "isTrade"(): boolean
public "getCost"(): $MoneyValue
public "getCost"(arg0: $TradeContext$Type): $MoneyValue
public "markTradeRulesDirty"(): void
public "allowTradeRule"(arg0: $TradeRule$Type): boolean
public "validateRuleStates"(): void
public "HandleRuleUpdate"(arg0: $ResourceLocation$Type, arg1: $LazyPacketData$Type): void
public "getRuleOfType"(arg0: $ResourceLocation$Type): $TradeRule
public "canMoneyBeRelevant"(): boolean
public "isMoneyRelevant"(): boolean
get "rules"(): $List<($TradeRule)>
get "valid"(): boolean
get "trader"(): boolean
get "tradeDirection"(): $TradeDirection
set "cost"(value: $MoneyValue$Type)
get "asNBT"(): $CompoundTag
set "rules"(value: $List$Type<($TradeRule$Type)>)
get "buttonRenderer"(): $TradeRenderManager<(any)>
get "trade"(): boolean
get "cost"(): $MoneyValue
get "moneyRelevant"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeData$Type = ($TradeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeData_ = $TradeData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/$TaxInfoTab" {
import {$TraderStorageMenu, $TraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderStorageMenu"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"

export class $TaxInfoTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "AcceptTaxes"(arg0: long): void
public "ForceIgnoreTaxCollector"(arg0: long): void
public "PardonIgnoredTaxCollector"(arg0: long): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxInfoTab$Type = ($TaxInfoTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxInfoTab_ = $TaxInfoTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeResult" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TradeResult extends $Enum<($TradeResult)> {
static readonly "SUCCESS": $TradeResult
static readonly "FAIL_OUT_OF_STOCK": $TradeResult
static readonly "FAIL_CANNOT_AFFORD": $TradeResult
static readonly "FAIL_NO_OUTPUT_SPACE": $TradeResult
static readonly "FAIL_NO_INPUT_SPACE": $TradeResult
static readonly "FAIL_TRADE_RULE_DENIAL": $TradeResult
static readonly "FAIL_TAX_EXCEEDED_LIMIT": $TradeResult
static readonly "FAIL_INVALID_TRADE": $TradeResult
static readonly "FAIL_NOT_SUPPORTED": $TradeResult
static readonly "FAIL_NULL": $TradeResult
static readonly "ALL_WITH_MESSAGES": ($TradeResult)[]


public static "values"(): ($TradeResult)[]
public static "valueOf"(arg0: string): $TradeResult
public "getMessage"(): $MutableComponent
public "isSuccess"(): boolean
public "hasMessage"(): boolean
get "message"(): $MutableComponent
get "success"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeResult$Type = (("fail_out_of_stock") | ("fail_invalid_trade") | ("success") | ("fail_no_input_space") | ("fail_not_supported") | ("fail_null") | ("fail_no_output_space") | ("fail_trade_rule_denial") | ("fail_tax_exceeded_limit") | ("fail_cannot_afford")) | ($TradeResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeResult_ = $TradeResult$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$OutputSlot" {
import {$SimpleSlot, $SimpleSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$SimpleSlot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $OutputSlot extends $SimpleSlot {
 "active": boolean
 "locked": boolean
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer)

public "mayPlace"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OutputSlot$Type = ($OutputSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OutputSlot_ = $OutputSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/$CommandBank" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $CommandBank {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>, arg1: $CommandBuildContext$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandBank$Type = ($CommandBank);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandBank_ = $CommandBank$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$IPlayerTrade" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export interface $IPlayerTrade {

 "getHostName"(): $Component
 "isCompleted"(): boolean
 "isGuest"(arg0: $Player$Type): boolean
 "getGuestID"(): $UUID
 "getGuestName"(): $Component
 "getGuestMoney"(): $MoneyValue
 "getHostMoney"(): $MoneyValue
 "isHost"(arg0: $Player$Type): boolean
 "getHostID"(): $UUID
 "getHostItems"(): $Container
 "getGuestItems"(): $Container
 "getHostState"(): integer
 "getGuestState"(): integer
}

export namespace $IPlayerTrade {
const ITEM_COUNT: integer
const PENDING_DURATION: long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPlayerTrade$Type = ($IPlayerTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPlayerTrade_ = $IPlayerTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/trader/auction/$AuctionBidTab" {
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderScreen, $TraderScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$TraderClientTab, $TraderClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/trader/$TraderClientTab"

export class $AuctionBidTab extends $TraderClientTab {

constructor(arg0: $TraderScreen$Type, arg1: long, arg2: integer)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionBidTab$Type = ($AuctionBidTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionBidTab_ = $AuctionBidTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/trader/$SPacketSyncUsers" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncUsers extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncUsers)>

constructor(arg0: long, arg1: integer)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncUsers$Type = ($SPacketSyncUsers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncUsers_ = $SPacketSyncUsers$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/core/$MainTab" {
import {$TraderSettingsTab, $TraderSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $MainTab extends $SettingsSubTab {
readonly "parent": $TraderSettingsClientTab
readonly "commonTab": $TraderSettingsTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderSettingsClientTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "canOpen"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MainTab$Type = ($MainTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MainTab_ = $MainTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$DefaultTab" {
import {$CoinChestTab, $CoinChestTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$CoinChestTab"
import {$CoinChestScreen, $CoinChestScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$CoinChestScreen"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $DefaultTab extends $CoinChestTab {

constructor(arg0: $CoinChestScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultTab$Type = ($DefaultTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultTab_ = $DefaultTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IRotatableBlock" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export interface $IRotatableBlock {

 "getFacing"(arg0: $BlockState$Type): $Direction
}

export namespace $IRotatableBlock {
const FACING: $DirectionProperty
function getLeftPos(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
function getForwardVect(arg0: $Direction$Type): $Vector3f
function getRelativeSide(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
function getForwardPos(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
function getBackwardVect(arg0: $Direction$Type): $Vector3f
function getRightPos(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
function getOffsetVect(arg0: $Direction$Type): $Vector3f
function getActualSide(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
function getLeftVect(arg0: $Direction$Type): $Vector3f
function getRightVect(arg0: $Direction$Type): $Vector3f
function getBackwardPos(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRotatableBlock$Type = ($IRotatableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRotatableBlock_ = $IRotatableBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ticket/$TicketData" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $TicketData {
readonly "masterTicket": $Item
readonly "ticket": $Item
readonly "ticketStub": $Item
readonly "material": $TagKey<($Item)>


public static "create"(arg0: $ItemLike$Type, arg1: $ItemLike$Type, arg2: $ItemLike$Type, arg3: $TagKey$Type<($Item$Type)>): void
public static "getForMaterial"(arg0: $ItemStack$Type): $TicketData
public static "allData"(): $List<($TicketData)>
public static "getForMaster"(arg0: $ItemStack$Type): $TicketData
public static "getForTicket"(arg0: $ItemStack$Type): $TicketData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketData$Type = ($TicketData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketData_ = $TicketData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/$SPacketSyncNotifications" {
import {$NotificationData, $NotificationData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationData"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncNotifications extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncNotifications)>
 "data": $NotificationData

constructor(arg0: $NotificationData$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncNotifications$Type = ($SPacketSyncNotifications);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncNotifications_ = $SPacketSyncNotifications$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData$Builder$ChainBuilder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData$Builder, $ChainData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData$Builder"
import {$CoinEntry, $CoinEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/coin/$CoinEntry"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $ChainData$Builder$ChainBuilder {


public "getEntries"(): $List<($CoinEntry)>
public "back"(): $ChainData$Builder
public "withCoin"(arg0: $RegistryObject$Type<(any)>, arg1: integer): $ChainData$Builder$ChainBuilder
public "withCoin"(arg0: $ItemLike$Type, arg1: integer): $ChainData$Builder$ChainBuilder
get "entries"(): $List<($CoinEntry)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainData$Builder$ChainBuilder$Type = ($ChainData$Builder$ChainBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainData$Builder$ChainBuilder_ = $ChainData$Builder$ChainBuilder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$WalletUpgradeRecipe$Serializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$WalletUpgradeRecipe, $WalletUpgradeRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$WalletUpgradeRecipe"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $WalletUpgradeRecipe$Serializer implements $RecipeSerializer<($WalletUpgradeRecipe)> {

constructor()

public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): $WalletUpgradeRecipe
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): $WalletUpgradeRecipe
public "toNetwork"(arg0: $FriendlyByteBuf$Type, arg1: $WalletUpgradeRecipe$Type): void
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type, arg2: $ICondition$IContext$Type): $WalletUpgradeRecipe
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletUpgradeRecipe$Serializer$Type = ($WalletUpgradeRecipe$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletUpgradeRecipe$Serializer_ = $WalletUpgradeRecipe$Serializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/trader/$OutOfStockNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$TraderCategory, $TraderCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$TraderCategory"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $OutOfStockNotification extends $Notification {
static readonly "TYPE": $NotificationType<($OutOfStockNotification)>


public "getMessage"(): $MutableComponent
public static "create"(arg0: $TraderCategory$Type, arg1: integer): $NonNullSupplier<($Notification)>
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OutOfStockNotification$Type = ($OutOfStockNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OutOfStockNotification_ = $OutOfStockNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinChestMenu" {
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $CoinChestMenu extends $LazyMessageMenu {
readonly "be": $CoinChestBlockEntity
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $CoinChestBlockEntity$Type)

public "AddExtraHandler"(arg0: $Consumer$Type<($LazyPacketData$Type)>): void
public "SetCoinSlotVisibility"(arg0: boolean): void
public "SetInventoryVisibility"(arg0: boolean): void
public "SetUpgradeSlotVisibility"(arg0: boolean): void
public "removed"(arg0: $Player$Type): void
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestMenu$Type = ($CoinChestMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestMenu_ = $CoinChestMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/bank/$BankSaveData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$BankAccount, $BankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/common/bank/$BankAccount"

export class $BankSaveData extends $SavedData {


public static "SetSelectedBankAccount"(arg0: $Player$Type, arg1: $BankReference$Type): void
public static "OnPlayerLogin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "InterestTick"(): integer
public static "ResetInterestTick"(): void
public static "GetBankAccount"(arg0: $Player$Type): $BankAccount
public static "GetBankAccount"(arg0: boolean, arg1: $UUID$Type): $BankAccount
public "save"(arg0: $CompoundTag$Type): $CompoundTag
public static "MarkBankAccountDirty"(arg0: $UUID$Type): void
public static "GetSelectedBankAccount"(arg0: $Player$Type): $BankReference
public static "GetPlayerBankAccounts"(arg0: boolean): $List<($BankReference)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankSaveData$Type = ($BankSaveData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankSaveData_ = $BankSaveData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/$IOwnerData" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IOwnerData {

}

export namespace $IOwnerData {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IOwnerData$Type = ($IOwnerData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IOwnerData_ = $IOwnerData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/impl/$BankAPIImpl" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$BankReferenceType, $BankReferenceType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReferenceType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IBankAccountAdvancedMenu, $IBankAccountAdvancedMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/menu/$IBankAccountAdvancedMenu"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BankAPI, $BankAPI$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$BankAPI"
import {$BankAccountSource, $BankAccountSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/source/$BankAccountSource"
import {$IBankAccountMenu, $IBankAccountMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/menu/$IBankAccountMenu"

export class $BankAPIImpl extends $BankAPI {
static readonly "INSTANCE": $BankAPIImpl
static readonly "API": $BankAPI


public "BankDeposit"(arg0: $Player$Type, arg1: $Container$Type, arg2: $BankReference$Type, arg3: $MoneyValue$Type): void
public "BankDeposit"(arg0: $IBankAccountMenu$Type, arg1: $MoneyValue$Type): void
public "BankWithdraw"(arg0: $IBankAccountMenu$Type, arg1: $MoneyValue$Type): void
public "BankWithdraw"(arg0: $Player$Type, arg1: $Container$Type, arg2: $BankReference$Type, arg3: $MoneyValue$Type): void
public "BankTransfer"(arg0: $Player$Type, arg1: $BankReference$Type, arg2: $MoneyValue$Type, arg3: $IBankAccount$Type): $MutableComponent
public "BankTransfer"(arg0: $IBankAccountAdvancedMenu$Type, arg1: $MoneyValue$Type, arg2: $IBankAccount$Type): $MutableComponent
public "BankDepositFromServer"(arg0: $IBankAccount$Type, arg1: $MoneyValue$Type, arg2: boolean): boolean
public "BankWithdrawFromServer"(arg0: $IBankAccount$Type, arg1: $MoneyValue$Type, arg2: boolean): $Pair<(boolean), ($MoneyValue)>
public "GetAllBankReferences"(arg0: boolean): $List<($BankReference)>
public "RegisterBankAccountSource"(arg0: $BankAccountSource$Type): void
public "GetAllBankAccounts"(arg0: boolean): $List<($IBankAccount)>
public "ServerTick"(arg0: $TickEvent$ServerTickEvent$Type): void
public "GetReferenceType"(arg0: $ResourceLocation$Type): $BankReferenceType
public "RegisterReferenceType"(arg0: $BankReferenceType$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankAPIImpl$Type = ($BankAPIImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankAPIImpl_ = $BankAPIImpl$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/walletslot/$CPacketCreativeWalletEdit" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketCreativeWalletEdit extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketCreativeWalletEdit)>

constructor(arg0: $ItemStack$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketCreativeWalletEdit$Type = ($CPacketCreativeWalletEdit);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketCreativeWalletEdit_ = $CPacketCreativeWalletEdit$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/$SPacketSyncCoinData" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncCoinData extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncCoinData)>

constructor(arg0: $JsonObject$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
public "getJson"(): $JsonObject
get "json"(): $JsonObject
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncCoinData$Type = ($SPacketSyncCoinData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncCoinData_ = $SPacketSyncCoinData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IItemTraderBlock" {
import {$ItemPositionData, $ItemPositionData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ITraderBlock, $ITraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$ITraderBlock"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IItemTraderBlock extends $ITraderBlock {

 "getItemPositionData"(): $ItemPositionData
 "getBlockEntity"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
 "getCapabilityBlockEntity"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $BlockEntity
 "canBreak"(arg0: $Player$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
 "getDropBlockItem"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack

(): $ItemPositionData
}

export namespace $IItemTraderBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IItemTraderBlock$Type = ($IItemTraderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IItemTraderBlock_ = $IItemTraderBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/tab/$TabButton" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITab, $ITab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/tab/$ITab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ITooltipSource, $ITooltipSource$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"

export class $TabButton extends $EasyButton implements $ITooltipSource {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "SIZE": integer
 "hideTooltip": boolean
readonly "tab": $ITab
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $Consumer$Type<($EasyButton$Type)>, arg1: $ITab$Type)

public "reposition"(arg0: $ScreenPosition$Type, arg1: integer): void
public "reposition"(arg0: integer, arg1: integer, arg2: integer): void
public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
public "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TabButton$Type = ($TabButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TabButton_ = $TabButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$CapabilityMoneyHandler" {
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CapabilityMoneyHandler {


public static "createProvider"(arg0: $IMoneyHandler$Type): $ICapabilityProvider
public static "getCapability"(arg0: $ItemStack$Type): $IMoneyHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapabilityMoneyHandler$Type = ($CapabilityMoneyHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapabilityMoneyHandler_ = $CapabilityMoneyHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IOwnableBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IOwnableBlock {

 "canBreak"(arg0: $Player$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean

(arg0: $Player$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
}

export namespace $IOwnableBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IOwnableBlock$Type = ($IOwnableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IOwnableBlock_ = $IOwnableBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/$TaxInfoClientTab" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ITaxInfoInteractable, $ITaxInfoInteractable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/taxes/$ITaxInfoInteractable"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$TaxInfoTab, $TaxInfoTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/$TaxInfoTab"

export class $TaxInfoClientTab extends $TraderStorageClientTab<($TaxInfoTab)> implements $IScrollable, $ITaxInfoInteractable {
static readonly "DISPLAY_ENTRIES": integer
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $TaxInfoTab$Type)

public "tick"(): void
public "getTrader"(): $TraderData
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public "canPlayerForceIgnore"(): boolean
public "AcceptTaxCollector"(arg0: long): void
public "ForceIgnoreTaxCollector"(arg0: long): void
public "PardonIgnoredTaxCollector"(arg0: long): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "trader"(): $TraderData
get "icon"(): $IconData
get "tooltip"(): $Component
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxInfoClientTab$Type = ($TaxInfoClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxInfoClientTab_ = $TaxInfoClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$EjectionRecoveryMenu" {
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$EjectionData, $EjectionData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$EjectionData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $EjectionRecoveryMenu extends $LazyMessageMenu {
static readonly "PROVIDER": $MenuProvider
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type)

public "getSelectedIndex"(): integer
public "getSelectedData"(): $EjectionData
public "changeSelection"(arg0: integer): void
public "getValidEjectionData"(): $List<($EjectionData)>
public "removed"(arg0: $Player$Type): void
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
get "selectedIndex"(): integer
get "selectedData"(): $EjectionData
get "validEjectionData"(): $List<($EjectionData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EjectionRecoveryMenu$Type = ($EjectionRecoveryMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EjectionRecoveryMenu_ = $EjectionRecoveryMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinManagementMenu" {
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $CoinManagementMenu extends $LazyMessageMenu {
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type)

public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinManagementMenu$Type = ($CoinManagementMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinManagementMenu_ = $CoinManagementMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$CoinChestTab" {
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"

export class $CoinChestTab extends $EasyTab {


public "isVisible"(): boolean
public "coinSlotsVisible"(): boolean
public "inventoryVisible"(): boolean
public "titleVisible"(): boolean
public "getColor"(): integer
public "upgradeSlotsVisible"(): boolean
get "visible"(): boolean
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestTab$Type = ($CoinChestTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestTab_ = $CoinChestTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/builtin/$NumberDisplay" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TextEntry, $TextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ValueDisplaySerializer, $ValueDisplaySerializer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplaySerializer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ValueDisplayData, $ValueDisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/display/$ValueDisplayData"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CoinValue, $CoinValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValue"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $NumberDisplay extends $ValueDisplayData {
static readonly "TYPE": $ResourceLocation
static readonly "SERIALIZER": $ValueDisplaySerializer

constructor(arg0: $Component$Type, arg1: $Item$Type)
constructor(arg0: $TextEntry$Type, arg1: $TextEntry$Type, arg2: $Item$Type)
constructor(arg0: $Component$Type, arg1: $Component$Type, arg2: $Item$Type)
constructor(arg0: $TextEntry$Type, arg1: $Item$Type)

public "getFormat"(): $Component
public "getSerializer"(): $ValueDisplaySerializer
public "getWordyFormat"(): $Component
public "formatCoinTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public "parseDisplayInput"(arg0: double): $MoneyValue
public "getDisplayValue"(arg0: long): double
public "formatValue"(arg0: $CoinValue$Type, arg1: $MutableComponent$Type): $MutableComponent
get "format"(): $Component
get "serializer"(): $ValueDisplaySerializer
get "wordyFormat"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NumberDisplay$Type = ($NumberDisplay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NumberDisplay_ = $NumberDisplay$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_management/display_data/$EditableDisplayData" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $EditableDisplayData {

constructor()

public "copy"(): $EditableDisplayData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditableDisplayData$Type = ($EditableDisplayData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditableDisplayData_ = $EditableDisplayData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModMenus" {
import {$TraderStorageMenu, $TraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderStorageMenu"
import {$WalletBankMenu, $WalletBankMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/wallet/$WalletBankMenu"
import {$TraderMenu, $TraderMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu"
import {$CoinChestMenu, $CoinChestMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinChestMenu"
import {$TraderMenu$TraderMenuBlockSource, $TraderMenu$TraderMenuBlockSource$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu$TraderMenuBlockSource"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$EjectionRecoveryMenu, $EjectionRecoveryMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$EjectionRecoveryMenu"
import {$WalletMenu, $WalletMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/wallet/$WalletMenu"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$MintMenu, $MintMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$MintMenu"
import {$TerminalMenu, $TerminalMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TerminalMenu"
import {$SlotMachineMenu, $SlotMachineMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$SlotMachineMenu"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$ATMMenu, $ATMMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$ATMMenu"
import {$TraderInterfaceMenu, $TraderInterfaceMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu"
import {$TicketStationMenu, $TicketStationMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TicketStationMenu"
import {$CoinManagementMenu, $CoinManagementMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinManagementMenu"
import {$PlayerTradeMenu, $PlayerTradeMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$PlayerTradeMenu"
import {$TraderMenu$TraderMenuAllNetwork, $TraderMenu$TraderMenuAllNetwork$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu$TraderMenuAllNetwork"

export class $ModMenus {
static readonly "ATM": $RegistryObject<($MenuType<($ATMMenu)>)>
static readonly "MINT": $RegistryObject<($MenuType<($MintMenu)>)>
static readonly "NETWORK_TERMINAL": $RegistryObject<($MenuType<($TerminalMenu)>)>
static readonly "TRADER": $RegistryObject<($MenuType<($TraderMenu)>)>
static readonly "TRADER_BLOCK": $RegistryObject<($MenuType<($TraderMenu$TraderMenuBlockSource)>)>
static readonly "TRADER_NETWORK_ALL": $RegistryObject<($MenuType<($TraderMenu$TraderMenuAllNetwork)>)>
static readonly "SLOT_MACHINE": $RegistryObject<($MenuType<($SlotMachineMenu)>)>
static readonly "TRADER_STORAGE": $RegistryObject<($MenuType<($TraderStorageMenu)>)>
static readonly "WALLET": $RegistryObject<($MenuType<($WalletMenu)>)>
static readonly "WALLET_BANK": $RegistryObject<($MenuType<($WalletBankMenu)>)>
static readonly "TICKET_MACHINE": $RegistryObject<($MenuType<($TicketStationMenu)>)>
static readonly "TRADER_INTERFACE": $RegistryObject<($MenuType<($TraderInterfaceMenu)>)>
static readonly "EJECTION_RECOVERY": $RegistryObject<($MenuType<($EjectionRecoveryMenu)>)>
static readonly "PLAYER_TRADE": $RegistryObject<($MenuType<($PlayerTradeMenu)>)>
static readonly "COIN_CHEST": $RegistryObject<($MenuType<($CoinChestMenu)>)>
static readonly "TAX_COLLECTOR": $RegistryObject<($MenuType<($TaxCollectorMenu)>)>
static readonly "COIN_MANAGEMENT": $RegistryObject<($MenuType<($CoinManagementMenu)>)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModMenus$Type = ($ModMenus);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModMenus_ = $ModMenus$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Server" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$DepositWithdrawNotification$Trader, $DepositWithdrawNotification$Trader$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Trader"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$DepositWithdrawNotification$Player, $DepositWithdrawNotification$Player$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification$Player"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$DepositWithdrawNotification, $DepositWithdrawNotification$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$DepositWithdrawNotification"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $DepositWithdrawNotification$Server extends $DepositWithdrawNotification {
static readonly "PLAYER_TYPE": $NotificationType<($DepositWithdrawNotification$Player)>
static readonly "TRADER_TYPE": $NotificationType<($DepositWithdrawNotification$Trader)>
static readonly "SERVER_TYPE": $NotificationType<($DepositWithdrawNotification$Server)>


public static "create"(arg0: $MutableComponent$Type, arg1: boolean, arg2: $MoneyValue$Type): $NonNullSupplier<($Notification)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DepositWithdrawNotification$Server$Type = ($DepositWithdrawNotification$Server);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DepositWithdrawNotification$Server_ = $DepositWithdrawNotification$Server$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModRecipes" {
import {$MasterTicketRecipe, $MasterTicketRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$MasterTicketRecipe"
import {$TicketRecipe, $TicketRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketRecipe"
import {$WalletUpgradeRecipe, $WalletUpgradeRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$WalletUpgradeRecipe"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$CoinMintRecipe, $CoinMintRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe"

export class $ModRecipes {
static readonly "WALLET_UPGRADE": $RegistryObject<($RecipeSerializer<($WalletUpgradeRecipe)>)>
static readonly "COIN_MINT": $RegistryObject<($RecipeSerializer<($CoinMintRecipe)>)>
static readonly "TICKET": $RegistryObject<($RecipeSerializer<($TicketRecipe)>)>
static readonly "TICKET_MASTER": $RegistryObject<($RecipeSerializer<($MasterTicketRecipe)>)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModRecipes$Type = ($ModRecipes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModRecipes_ = $ModRecipes$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$CustomBlockModelItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IClientItemExtensions, $IClientItemExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientItemExtensions"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CustomBlockModelItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Block$Type, arg1: $Item$Properties$Type)

public "initializeClient"(arg0: $Consumer$Type<($IClientItemExtensions$Type)>): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomBlockModelItem$Type = ($CustomBlockModelItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomBlockModelItem_ = $CustomBlockModelItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$TimeInputWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$WidgetAddon, $WidgetAddon$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon"
import {$TimeUtil$TimeData, $TimeUtil$TimeData$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeData"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$EasyWidgetWithChildren, $EasyWidgetWithChildren$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TimeUtil$TimeUnit, $TimeUtil$TimeUnit$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeUnit"

export class $TimeInputWidget extends $EasyWidgetWithChildren {
 "maxDuration": long
 "minDuration": long
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: $TimeUtil$TimeUnit$Type, arg4: $TimeUtil$TimeUnit$Type, arg5: $Consumer$Type<($TimeUtil$TimeData$Type)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: $TimeUtil$TimeUnit$Type, arg3: $TimeUtil$TimeUnit$Type, arg4: $Consumer$Type<($TimeUtil$TimeData$Type)>)

public "getTime"(): $TimeUtil$TimeData
public "setTime"(arg0: $TimeUtil$TimeData$Type): void
public "setTime"(arg0: long): void
public "setTime"(arg0: long, arg1: long, arg2: long, arg3: long): void
public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "addChildren"(): void
public "withAddons"(...arg0: ($WidgetAddon$Type)[]): $TimeInputWidget
get "time"(): $TimeUtil$TimeData
set "time"(value: $TimeUtil$TimeData$Type)
set "time"(value: long)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimeInputWidget$Type = ($TimeInputWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimeInputWidget_ = $TimeInputWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FluidStack, $FluidStack$Type} from "packages/net/minecraftforge/fluids/$FluidStack"
import {$TradeContext$Builder, $TradeContext$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext$Builder"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemRequirement, $ItemRequirement$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$ItemRequirement"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"

export class $TradeContext {
readonly "id": long
readonly "isStorageMode": boolean


public static "create"(arg0: $TraderData$Type, arg1: $Player$Type): $TradeContext$Builder
public static "create"(arg0: $TraderData$Type, arg1: $PlayerReference$Type): $TradeContext$Builder
public "clearCache"(): void
public "givePayment"(arg0: $MoneyValue$Type): boolean
public "hasPaymentMethod"(): boolean
public "fillEnergy"(arg0: integer): boolean
public "fillFluid"(arg0: $FluidStack$Type): boolean
public "drainFluid"(arg0: $FluidStack$Type): boolean
public "hasEnergy"(arg0: integer): boolean
public "canFitEnergy"(arg0: integer): boolean
public "canFitFluid"(arg0: $FluidStack$Type): boolean
public "drainEnergy"(arg0: integer): boolean
public "hasFluid"(arg0: $FluidStack$Type): boolean
public "getPlayerReference"(): $PlayerReference
public "getAvailableFunds"(): $MoneyView
public "hasPlayer"(): boolean
public "getPayment"(arg0: $MoneyValue$Type): boolean
public "getTrader"(): $TraderData
public "getCollectableItems"(...arg0: ($ItemRequirement$Type)[]): $List<($ItemStack)>
public "hasPlayerReference"(): boolean
public "hasItems"(...arg0: ($ItemRequirement$Type)[]): boolean
public "hasItems"(arg0: $List$Type<($ItemStack$Type)>): boolean
public "hasItems"(...arg0: ($ItemStack$Type)[]): boolean
public "canFitItems"(arg0: $List$Type<($ItemStack$Type)>): boolean
public "canFitItems"(...arg0: ($ItemStack$Type)[]): boolean
public "hasFunds"(arg0: $MoneyValue$Type): boolean
public "hightlightItems"(arg0: $List$Type<($ItemRequirement$Type)>, arg1: $List$Type<($Slot$Type)>, arg2: $List$Type<(integer)>): void
public "getPlayer"(): $Player
public "collectItems"(arg0: $List$Type<($ItemStack$Type)>): boolean
public "putItem"(arg0: $ItemStack$Type): boolean
public static "createStorageMode"(arg0: $TraderData$Type): $TradeContext
public "hasTrader"(): boolean
public "getAvailableFundsDescription"(): $List<($Component)>
public "hasItem"(arg0: $ItemStack$Type): boolean
public "hasTicket"(arg0: long): boolean
public "hasPass"(arg0: long): boolean
public "canFitItem"(arg0: $ItemStack$Type): boolean
public "collectTicket"(arg0: long): boolean
public "collectItem"(arg0: $ItemStack$Type): boolean
get "playerReference"(): $PlayerReference
get "availableFunds"(): $MoneyView
get "trader"(): $TraderData
get "player"(): $Player
get "availableFundsDescription"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeContext$Type = ($TradeContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeContext_ = $TradeContext$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/permissions/$IntegerPermission" {
import {$PermissionOption, $PermissionOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/permissions/$PermissionOption"

export class $IntegerPermission extends $PermissionOption {
readonly "maxValue": integer
readonly "permission": string


public static "of"(arg0: string, arg1: integer): $IntegerPermission
public "widgetWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntegerPermission$Type = ($IntegerPermission);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntegerPermission_ = $IntegerPermission$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/util/$LazyWidgetPositioner" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$IEasyScreen, $IEasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IEasyScreen"
import {$IPreRender, $IPreRender$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IPreRender"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"

export class $LazyWidgetPositioner implements $IPreRender {
static readonly "MODE_TOPDOWN": $Function<($LazyWidgetPositioner), ($ScreenPosition)>
static readonly "MODE_BOTTOMUP": $Function<($LazyWidgetPositioner), ($ScreenPosition)>
readonly "widgetSize": integer


public "clear"(): void
public static "create"(arg0: $IEasyScreen$Type, arg1: $Function$Type<($LazyWidgetPositioner$Type), ($ScreenPosition$Type)>, arg2: integer, arg3: integer, arg4: integer): $LazyWidgetPositioner
public static "create"(arg0: $IEasyScreen$Type, arg1: $Function$Type<($LazyWidgetPositioner$Type), ($ScreenPosition$Type)>, arg2: $ScreenPosition$Type, arg3: integer): $LazyWidgetPositioner
public "startPos"(): $ScreenPosition
public "addWidgets"(...arg0: ($EasyWidget$Type)[]): void
public "addWidget"(arg0: $EasyWidget$Type): void
public "preRender"(arg0: $EasyGuiGraphics$Type): void
public "getPositionIndex"(): integer
get "positionIndex"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LazyWidgetPositioner$Type = ($LazyWidgetPositioner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LazyWidgetPositioner_ = $LazyWidgetPositioner$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/client/language/$EnglishProvider" {
import {$CachedOutput, $CachedOutput$Type} from "packages/net/minecraft/data/$CachedOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$TranslationProvider, $TranslationProvider$Type} from "packages/io/github/lightman314/lightmanscurrency/datagen/client/language/$TranslationProvider"

export class $EnglishProvider extends $TranslationProvider {

constructor(arg0: $PackOutput$Type)

public static "saveStable"(arg0: $CachedOutput$Type, arg1: $JsonElement$Type, arg2: $Path$Type): $CompletableFuture<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnglishProvider$Type = ($EnglishProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnglishProvider_ = $EnglishProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/bank/$CPacketATMSetPlayerAccount" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketATMSetPlayerAccount extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketATMSetPlayerAccount)>

constructor(arg0: string)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketATMSetPlayerAccount$Type = ($CPacketATMSetPlayerAccount);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketATMSetPlayerAccount_ = $CPacketATMSetPlayerAccount$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/enchantments/$CoinMagnetEnchantment" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$WalletEnchantment, $WalletEnchantment$Type} from "packages/io/github/lightman314/lightmanscurrency/common/enchantments/$WalletEnchantment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Enchantment$Rarity, $Enchantment$Rarity$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment$Rarity"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$IWalletHandler, $IWalletHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/common/capability/wallet/$IWalletHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CoinMagnetEnchantment extends $WalletEnchantment {
readonly "category": $EnchantmentCategory

constructor(arg0: $Enchantment$Rarity$Type, ...arg1: ($EquipmentSlot$Type)[])

public static "runEntityTick"(arg0: $IWalletHandler$Type, arg1: $LivingEntity$Type): void
public "addWalletTooltips"(arg0: $List$Type<($Component$Type)>, arg1: integer, arg2: $ItemStack$Type): void
public static "getCollectionRange"(arg0: integer): float
public static "coinMagnetEntityFilter"(arg0: $Entity$Type): boolean
public static "getCollectionRangeDisplay"(arg0: integer): $Component
public "getMaxCost"(arg0: integer): integer
public "getMaxLevel"(): integer
public "getMinCost"(arg0: integer): integer
get "maxLevel"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinMagnetEnchantment$Type = ($CoinMagnetEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinMagnetEnchantment_ = $CoinMagnetEnchantment$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$WalletUpgradeRecipe" {
import {$InputReplacement, $InputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$InputReplacement"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$RecipeSchema, $RecipeSchema$Type} from "packages/dev/latvian/mods/kubejs/recipe/schema/$RecipeSchema"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$CraftingRecipe, $CraftingRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CraftingRecipe"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ReplacementMatch, $ReplacementMatch$Type} from "packages/dev/latvian/mods/kubejs/recipe/$ReplacementMatch"
import {$OutputReplacement, $OutputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$OutputReplacement"

export class $WalletUpgradeRecipe implements $CraftingRecipe {

constructor(arg0: $ResourceLocation$Type, arg1: string, arg2: $ItemStack$Type, arg3: $NonNullList$Type<($Ingredient$Type)>)

public "matches"(arg0: $CraftingContainer$Type, arg1: $Level$Type): boolean
public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "getIngredients"(): $NonNullList<($Ingredient)>
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "category"(): $CraftingBookCategory
public "assemble"(arg0: $CraftingContainer$Type, arg1: $RegistryAccess$Type): $ItemStack
public "getId"(): $ResourceLocation
public "getRemainingItems"(arg0: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "getToastSymbol"(): $ItemStack
public "isIncomplete"(): boolean
public "showNotification"(): boolean
public "isSpecial"(): boolean
public "getType"(): $ResourceLocation
public "replaceOutput"(match: $ReplacementMatch$Type, arg1: $OutputReplacement$Type): boolean
public "setGroup"(group: string): void
public "hasInput"(match: $ReplacementMatch$Type): boolean
public "getOrCreateId"(): $ResourceLocation
public "getSchema"(): $RecipeSchema
public "replaceInput"(match: $ReplacementMatch$Type, arg1: $InputReplacement$Type): boolean
public "hasOutput"(match: $ReplacementMatch$Type): boolean
public "getGroup"(): string
public "getMod"(): string
get "ingredients"(): $NonNullList<($Ingredient)>
get "serializer"(): $RecipeSerializer<(any)>
get "id"(): $ResourceLocation
get "toastSymbol"(): $ItemStack
get "incomplete"(): boolean
get "special"(): boolean
get "type"(): $ResourceLocation
set "group"(value: string)
get "orCreateId"(): $ResourceLocation
get "schema"(): $RecipeSchema
get "group"(): string
get "mod"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletUpgradeRecipe$Type = ($WalletUpgradeRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletUpgradeRecipe_ = $WalletUpgradeRecipe$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/display/$CoinPriceEntry" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DisplayData, $DisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$CoinValue, $CoinValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValue"

export class $CoinPriceEntry extends $DisplayEntry {

constructor(arg0: $CoinValue$Type, arg1: $List$Type<($Component$Type)>, arg2: boolean)

public "render"(arg0: $EasyGuiGraphics$Type, arg1: integer, arg2: integer, arg3: $DisplayData$Type): void
public "isMouseOver"(arg0: integer, arg1: integer, arg2: $DisplayData$Type, arg3: integer, arg4: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinPriceEntry$Type = ($CoinPriceEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinPriceEntry_ = $CoinPriceEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/ticket/$TicketSlot" {
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TicketSlot extends $Slot {
static readonly "EMPTY_TICKET_SLOT": $ResourceLocation
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer)

public "mayPlace"(arg0: $ItemStack$Type): boolean
public "getNoItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
get "noItemIcon"(): $Pair<($ResourceLocation), ($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketSlot$Type = ($TicketSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketSlot_ = $TicketSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/bank/$SPacketClearClientBank" {
import {$ServerToClientPacket$Simple, $ServerToClientPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketClearClientBank extends $ServerToClientPacket$Simple {
static readonly "INSTANCE": $SPacketClearClientBank
static readonly "HANDLER": $CustomPacket$Handler<($SPacketClearClientBank)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketClearClientBank$Type = ($SPacketClearClientBank);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketClearClientBank_ = $SPacketClearClientBank$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/tax_collector/$LogClientTab" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TaxCollectorMenu, $TaxCollectorMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TaxCollectorMenu"
import {$TaxCollectorTab, $TaxCollectorTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TaxCollectorScreen, $TaxCollectorScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TaxCollectorScreen"
import {$LogTab, $LogTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/tabs/$LogTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TaxCollectorClientTab, $TaxCollectorClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/tax_collector/$TaxCollectorClientTab"

export class $LogClientTab extends $TaxCollectorClientTab<($LogTab)> {
readonly "screen": $TaxCollectorScreen
readonly "menu": $TaxCollectorMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $LogTab$Type)

public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getTooltip"(): $Component
get "icon"(): $IconData
get "tooltip"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LogClientTab$Type = ($LogClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LogClientTab_ = $LogClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/auction/$AuctionHouseNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"

export class $AuctionHouseNotification extends $Notification {

constructor()

public "getCategory"(): $NotificationCategory
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionHouseNotification$Type = ($AuctionHouseNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionHouseNotification_ = $AuctionHouseNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/permissions/$PermissionOption" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $PermissionOption {
readonly "permission": string


public "setValue"(arg0: integer): void
public "setValue"(arg0: boolean): void
public "tick"(): void
public "render"(arg0: $EasyGuiGraphics$Type): void
public "widgetWidth"(): integer
public "initWidgets"(arg0: $SettingsSubTab$Type, arg1: integer, arg2: integer, arg3: $Consumer$Type<(any)>): void
public "widgetName"(): $MutableComponent
set "value"(value: integer)
set "value"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PermissionOption$Type = ($PermissionOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PermissionOption_ = $PermissionOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem$Simple" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UpgradeItem$Simple extends $UpgradeItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $UpgradeType$Type, arg1: $Item$Properties$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeItem$Simple$Type = ($UpgradeItem$Simple);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeItem$Simple_ = $UpgradeItem$Simple$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$EasyMenu" {
import {$NonNullFunction, $NonNullFunction$Type} from "packages/net/minecraftforge/common/util/$NonNullFunction"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $EasyMenu extends $AbstractContainerMenu implements $IClientTracker {
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer


public static "encoder"(arg0: $BlockPos$Type, arg1: $MenuValidator$Type): $Consumer<($FriendlyByteBuf)>
public static "encoder"(arg0: $MenuValidator$Type): $Consumer<($FriendlyByteBuf)>
public static "encoder"(arg0: $Consumer$Type<($FriendlyByteBuf$Type)>, arg1: $MenuValidator$Type): $Consumer<($FriendlyByteBuf)>
public "isClient"(): boolean
public "stillValid"(arg0: $Player$Type): boolean
public "removeValidator"(arg0: $MenuValidator$Type): void
public "addValidator"(arg0: $NonNullFunction$Type<($Player$Type), (boolean)>): void
public "addValidator"(arg0: $NonNullSupplier$Type<(boolean)>): void
public "addValidator"(arg0: $MenuValidator$Type): void
public static "nullEncoder"(): $Consumer<($FriendlyByteBuf)>
public "isServer"(): boolean
get "client"(): boolean
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyMenu$Type = ($EasyMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyMenu_ = $EasyMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyScreen" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$IEasyScreen, $IEasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IEasyScreen"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $EasyScreen extends $Screen implements $IEasyScreen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getArea"(): $ScreenArea
public "getCorner"(): $ScreenPosition
public "getPlayer"(): $Player
public "isPauseScreen"(): boolean
public "tick"(): void
public "addChild"<T>(arg0: T): T
public "removeChild"(arg0: any): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "getFont"(): $Font
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
public "blockInventoryClosing"(): boolean
get "area"(): $ScreenArea
get "corner"(): $ScreenPosition
get "player"(): $Player
get "pauseScreen"(): boolean
get "font"(): $Font
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyScreen$Type = ($EasyScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyScreen_ = $EasyScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/util/$WoodDataHelper" {
import {$WoodData, $WoodData$Type} from "packages/io/github/lightman314/lightmanscurrency/datagen/util/$WoodData"
import {$WoodType, $WoodType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType"

export class $WoodDataHelper {

constructor()

public static "get"(arg0: $WoodType$Type): $WoodData
public static "register"(arg0: $WoodType$Type, arg1: $WoodData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodDataHelper$Type = ($WoodDataHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodDataHelper_ = $WoodDataHelper$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationAPI" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategoryType, $NotificationCategoryType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategoryType"

export class $NotificationAPI {

constructor()

public static "PushPlayerNotification"(arg0: $UUID$Type, arg1: $Notification$Type): void
public static "PushPlayerNotification"(arg0: $UUID$Type, arg1: $Notification$Type, arg2: boolean): void
public static "loadCategory"(arg0: $CompoundTag$Type): $NotificationCategory
public static "registerCategory"(arg0: $NotificationCategoryType$Type<(any)>): void
public static "loadNotification"(arg0: $CompoundTag$Type): $Notification
public static "registerNotification"(arg0: $NotificationType$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationAPI$Type = ($NotificationAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationAPI_ = $NotificationAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/slot_machine/$SlotMachineLine" {
import {$SlotMachineRenderBlock, $SlotMachineRenderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/slot_machine/$SlotMachineRenderBlock"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$SlotMachineRenderer, $SlotMachineRenderer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/slot_machine/$SlotMachineRenderer"

export class $SlotMachineLine {
static "BLOCK_SIZE": integer

constructor(arg0: $SlotMachineRenderer$Type)

public "lockAtResult"(arg0: $SlotMachineRenderBlock$Type, arg1: integer): void
public "initialize"(): void
public "initialize"(arg0: $SlotMachineRenderBlock$Type): void
public "unlock"(): void
public "render"(arg0: $EasyGuiGraphics$Type, arg1: integer, arg2: integer): void
public "animationTick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineLine$Type = ($SlotMachineLine);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineLine_ = $SlotMachineLine$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/emergencyejection/$SPacketSyncEjectionData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncEjectionData extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncEjectionData)>

constructor(arg0: $CompoundTag$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncEjectionData$Type = ($SPacketSyncEjectionData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncEjectionData_ = $SPacketSyncEjectionData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$InventoryUtil" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$ItemRequirement, $ItemRequirement$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$ItemRequirement"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $InventoryUtil {

constructor()

public static "copy"(arg0: $Container$Type): $SimpleContainer
public static "totalItemCount"(arg0: $List$Type<($ItemStack$Type)>): integer
public static "dumpContents"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Container$Type): void
public static "dumpContents"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $List$Type<($ItemStack$Type)>): void
public static "dumpContents"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $ItemStack$Type): void
public static "MergeStacks"(arg0: $Container$Type): void
public static "GetItemCount"(arg0: $Container$Type, arg1: $ItemStack$Type): integer
public static "GetItemCount"(arg0: $IItemHandler$Type, arg1: $ItemStack$Type): integer
public static "GetItemCount"(arg0: $Container$Type, arg1: $Item$Type): integer
public static "GetItemCount"(arg0: $Container$Type, arg1: $Predicate$Type<($ItemStack$Type)>): integer
public static "RemoveItemCount"(arg0: $Container$Type, arg1: $ItemStack$Type): boolean
public static "RemoveItemCount"(arg0: $IItemHandler$Type, arg1: $ItemStack$Type): boolean
public static "RemoveItemCount"(arg0: $Container$Type, arg1: $Item$Type, arg2: integer): boolean
public static "buildInventory"(arg0: $List$Type<($ItemStack$Type)>): $SimpleContainer
public static "buildInventory"(arg0: $ItemStack$Type): $Container
public static "combineRequirements"(...arg0: ($ItemRequirement$Type)[]): $List<($ItemRequirement)>
public static "ItemMatches"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public static "copyList"(arg0: $List$Type<($ItemStack$Type)>): $List<($ItemStack)>
public static "combineQueryItems"(...arg0: ($ItemStack$Type)[]): $List<($ItemStack)>
public static "combineQueryItems"(arg0: $List$Type<($ItemStack$Type)>): $List<($ItemStack)>
public static "ItemsFullyMatch"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public static "encodeItems"(arg0: $Container$Type, arg1: $FriendlyByteBuf$Type): void
public static "decodeItems"(arg0: $FriendlyByteBuf$Type): $SimpleContainer
public static "loadAllItems"(arg0: string, arg1: $CompoundTag$Type, arg2: integer): $SimpleContainer
public static "saveAllItems"(arg0: string, arg1: $CompoundTag$Type, arg2: $Container$Type): void
public static "buildList"(arg0: $Container$Type): $NonNullList<($ItemStack)>
public static "GetItemTagCount"(arg0: $Container$Type, arg1: $TagKey$Type<($Item$Type)>, ...arg2: ($Item$Type)[]): integer
public static "copyInventory"(arg0: $Container$Type): $Container
public static "RemoveItemTagCount"(arg0: $Container$Type, arg1: $TagKey$Type<($Item$Type)>, arg2: integer, ...arg3: ($Item$Type)[]): boolean
public static "CanExtractItem"(arg0: $IItemHandler$Type, arg1: $ItemStack$Type): boolean
public static "CanPutItemStack"(arg0: $Container$Type, arg1: $ItemStack$Type): boolean
public static "GetItemSpace"(arg0: $Container$Type, arg1: $ItemStack$Type, arg2: integer, arg3: integer): integer
public static "GetItemSpace"(arg0: $Container$Type, arg1: $ItemStack$Type): integer
public static "CanPutItemStacks"(arg0: $Container$Type, ...arg1: ($ItemStack$Type)[]): boolean
public static "CanPutItemStacks"(arg0: $Container$Type, arg1: $List$Type<($ItemStack$Type)>): boolean
public static "ContainerMatches"(arg0: $Container$Type, arg1: $Container$Type): boolean
public static "PutItemStack"(arg0: $Container$Type, arg1: $ItemStack$Type): boolean
public static "safeGiveToPlayer"(arg0: $Inventory$Type, arg1: $ItemStack$Type): integer
public static "ItemHasTag"(arg0: $ItemStack$Type, arg1: $TagKey$Type<($Item$Type)>): boolean
public static "TryPutItemStack"(arg0: $Container$Type, arg1: $ItemStack$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryUtil$Type = ($InventoryUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryUtil_ = $InventoryUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidatorType" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"

export class $MenuValidatorType {
readonly "type": $ResourceLocation


public "load"(arg0: $CompoundTag$Type): $MenuValidator
public "decode"(arg0: $FriendlyByteBuf$Type): $MenuValidator
public static "register"(arg0: $MenuValidatorType$Type): void
public static "getType"(arg0: $ResourceLocation$Type): $MenuValidatorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuValidatorType$Type = ($MenuValidatorType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuValidatorType_ = $MenuValidatorType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IEasyTickable, $IEasyTickable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/$IEasyTickable"
import {$ITab, $ITab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/tab/$ITab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $EasyTab implements $ITab, $IEasyTickable {


public "onClose"(): void
public "tick"(): void
public "blockInventoryClosing"(): boolean
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "onOpen"(): void
public "addChild"<T>(arg0: T): T
public "removeChild"(arg0: any): void
public "getFont"(): $Font
public "getIcon"(): $IconData
public "getTooltip"(): $Component
public "getColor"(): integer
get "font"(): $Font
get "icon"(): $IconData
get "tooltip"(): $Component
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyTab$Type = ($EasyTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyTab_ = $EasyTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$ITraderBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$IOwnableBlock, $IOwnableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IOwnableBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICapabilityBlock, $ICapabilityBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$ICapabilityBlock"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ITraderBlock extends $IOwnableBlock, $ICapabilityBlock {

 "getBlockEntity"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
 "getCapabilityBlockEntity"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $BlockEntity
 "canBreak"(arg0: $Player$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
 "getDropBlockItem"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack

(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
}

export namespace $ITraderBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITraderBlock$Type = ($ITraderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITraderBlock_ = $ITraderBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$IOptionalKey" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IOptionalKey {

 "isModded"(): boolean
 "isVanilla"(): boolean

(): boolean
}

export namespace $IOptionalKey {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IOptionalKey$Type = ($IOptionalKey);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IOptionalKey_ = $IOptionalKey$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$CoinChestBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IOwnableBlock, $IOwnableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IOwnableBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$IEasyEntityBlock, $IEasyEntityBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IEasyEntityBlock"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$RotatableBlock, $RotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $CoinChestBlock extends $RotatableBlock implements $IEasyEntityBlock, $IOwnableBlock {
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "playerWillDestroy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "triggerEvent"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: integer, arg4: integer): boolean
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getAllowedTypes"(): $Collection<($BlockEntityType<(any)>)>
public "canBreak"(arg0: $Player$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "allowedTypes"(): $Collection<($BlockEntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestBlock$Type = ($CoinChestBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestBlock_ = $CoinChestBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ListOption" {
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"
import {$ConfigParsingException, $ConfigParsingException$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParsingException"

export class $ListOption<T> extends $ConfigOption<($List<(T)>)> {


public static "makeParser"<T>(arg0: $ConfigParser$Type<(T)>): $ConfigParser<($List<(T)>)>
public "editList"(arg0: string, arg1: integer, arg2: boolean): $Pair<(boolean), ($ConfigParsingException)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListOption$Type<T> = ($ListOption<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListOption_<T> = $ListOption$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMData$Builder" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ATMData, $ATMData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"
import {$ChainData$Builder, $ChainData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData$Builder"
import {$ATMExchangeButtonData, $ATMExchangeButtonData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMExchangeButtonData"

export class $ATMData$Builder {


public "viewExchangeButtons"(): $List<($ATMExchangeButtonData)>
public "accept"(arg0: $Consumer$Type<($ATMData$Builder$Type)>): $ATMData$Builder
public "build"(arg0: $ChainData$Type): $ATMData
public "back"(): $ChainData$Builder
public "addButtons"(arg0: $List$Type<($ATMExchangeButtonData$Type)>): $ATMData$Builder
public "addButton"(arg0: $ATMExchangeButtonData$Type): $ATMData$Builder
public "removeButton"(arg0: integer): $ATMData$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMData$Builder$Type = ($ATMData$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMData$Builder_ = $ATMData$Builder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$ItemEditWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$WidgetAddon, $WidgetAddon$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$EasyWidgetWithChildren, $EasyWidgetWithChildren$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ITooltipSource, $ITooltipSource$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ITooltipSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemEditWidget$IItemEditListener, $ItemEditWidget$IItemEditListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$ItemEditWidget$IItemEditListener"

export class $ItemEditWidget extends $EasyWidgetWithChildren implements $IScrollable, $ITooltipSource {
static readonly "GUI_TEXTURE": $ResourceLocation
 "searchOffX": integer
 "searchOffY": integer
 "stackSizeOffX": integer
 "stackSizeOffY": integer
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $ItemEditWidget$Type, arg4: $ItemEditWidget$IItemEditListener$Type)
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $ItemEditWidget$Type, arg5: $ItemEditWidget$IItemEditListener$Type)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "getTooltipText"(arg0: integer, arg1: integer): $List<($Component)>
public static "AddExtraItemAfter"(arg0: $ItemStack$Type, arg1: $Item$Type): void
public static "AddExtraItemAfter"(arg0: $ItemStack$Type, arg1: $Predicate$Type<($ItemStack$Type)>): void
public static "BlacklistItem"(arg0: $RegistryObject$Type<(any)>): void
public static "BlacklistItem"(arg0: $ItemLike$Type): void
public static "BlacklistItem"(arg0: $Predicate$Type<($ItemStack$Type)>): void
public "addChildren"(): void
public "withAddons"(...arg0: ($WidgetAddon$Type)[]): $ItemEditWidget
public static "AddExtraItem"(arg0: $ItemStack$Type): void
public static "AddExtraItemBefore"(arg0: $ItemStack$Type, arg1: $Item$Type): void
public static "AddExtraItemBefore"(arg0: $ItemStack$Type, arg1: $Predicate$Type<($ItemStack$Type)>): void
public "refreshPage"(): void
public "refreshSearch"(): void
public "modifySearch"(arg0: string): void
public static "safeInitItemList"(): void
public static "isItemAllowed"(arg0: $ItemStack$Type): boolean
public "stackCountScroll"(arg0: double): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public static "ConfirmItemListLoaded"(): void
public static "BlacklistCreativeTab"(arg0: $Function$Type<($CreativeModeTab$Type), (boolean)>): void
public static "IsCreativeTabAllowed"(arg0: $CreativeModeTab$Type): boolean
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "setScroll"(arg0: integer): void
public static "BlacklistCreativeTabs"(...arg0: ($ResourceKey$Type<($CreativeModeTab$Type)>)[]): void
public static "BlacklistCreativeTabs"(...arg0: ($CreativeModeTab$Type)[]): void
public static "BlacklistCreativeTabs"(...arg0: ($RegistryObject$Type<($CreativeModeTab$Type)>)[]): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
public "renderTooltip"(arg0: $EasyGuiGraphics$Type): void
get "maxScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemEditWidget$Type = ($ItemEditWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemEditWidget_ = $ItemEditWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModBlocks" {
import {$RegistryObjectBundle, $RegistryObjectBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBundle"
import {$WoodType, $WoodType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$WoodType"
import {$Color, $Color$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/variants/$Color"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$RegistryObjectBiBundle, $RegistryObjectBiBundle$Type} from "packages/io/github/lightman314/lightmanscurrency/common/core/groups/$RegistryObjectBiBundle"
import {$FreezerBlock, $FreezerBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$FreezerBlock"

export class $ModBlocks {
static readonly "COINPILE_COPPER": $RegistryObject<($Block)>
static readonly "COINPILE_IRON": $RegistryObject<($Block)>
static readonly "COINPILE_GOLD": $RegistryObject<($Block)>
static readonly "COINPILE_DIAMOND": $RegistryObject<($Block)>
static readonly "COINPILE_EMERALD": $RegistryObject<($Block)>
static readonly "COINPILE_NETHERITE": $RegistryObject<($Block)>
static readonly "COINPILE_CHOCOLATE_COPPER": $RegistryObject<($Block)>
static readonly "COINPILE_CHOCOLATE_IRON": $RegistryObject<($Block)>
static readonly "COINPILE_CHOCOLATE_GOLD": $RegistryObject<($Block)>
static readonly "COINPILE_CHOCOLATE_DIAMOND": $RegistryObject<($Block)>
static readonly "COINPILE_CHOCOLATE_EMERALD": $RegistryObject<($Block)>
static readonly "COINPILE_CHOCOLATE_NETHERITE": $RegistryObject<($Block)>
static readonly "COINBLOCK_COPPER": $RegistryObject<($Block)>
static readonly "COINBLOCK_IRON": $RegistryObject<($Block)>
static readonly "COINBLOCK_GOLD": $RegistryObject<($Block)>
static readonly "COINBLOCK_EMERALD": $RegistryObject<($Block)>
static readonly "COINBLOCK_DIAMOND": $RegistryObject<($Block)>
static readonly "COINBLOCK_NETHERITE": $RegistryObject<($Block)>
static readonly "COINBLOCK_CHOCOLATE_COPPER": $RegistryObject<($Block)>
static readonly "COINBLOCK_CHOCOLATE_IRON": $RegistryObject<($Block)>
static readonly "COINBLOCK_CHOCOLATE_GOLD": $RegistryObject<($Block)>
static readonly "COINBLOCK_CHOCOLATE_EMERALD": $RegistryObject<($Block)>
static readonly "COINBLOCK_CHOCOLATE_DIAMOND": $RegistryObject<($Block)>
static readonly "COINBLOCK_CHOCOLATE_NETHERITE": $RegistryObject<($Block)>
static readonly "ATM": $RegistryObject<($Block)>
static readonly "COIN_MINT": $RegistryObject<($Block)>
static readonly "DISPLAY_CASE": $RegistryObject<($Block)>
static readonly "VENDING_MACHINE": $RegistryObjectBundle<($Block), ($Color)>
static readonly "VENDING_MACHINE_LARGE": $RegistryObjectBundle<($Block), ($Color)>
static readonly "SHELF": $RegistryObjectBundle<($Block), ($WoodType)>
static readonly "SHELF_2x2": $RegistryObjectBundle<($Block), ($WoodType)>
static readonly "CARD_DISPLAY": $RegistryObjectBiBundle<($Block), ($WoodType), ($Color)>
static readonly "ARMOR_DISPLAY": $RegistryObject<($Block)>
static readonly "FREEZER": $RegistryObjectBundle<($FreezerBlock), ($Color)>
static readonly "ITEM_NETWORK_TRADER_1": $RegistryObject<($Block)>
static readonly "ITEM_NETWORK_TRADER_2": $RegistryObject<($Block)>
static readonly "ITEM_NETWORK_TRADER_3": $RegistryObject<($Block)>
static readonly "ITEM_NETWORK_TRADER_4": $RegistryObject<($Block)>
static readonly "ITEM_TRADER_INTERFACE": $RegistryObject<($Block)>
static readonly "CASH_REGISTER": $RegistryObject<($Block)>
static readonly "TERMINAL": $RegistryObject<($Block)>
static readonly "GEM_TERMINAL": $RegistryObject<($Block)>
static readonly "PAYGATE": $RegistryObject<($Block)>
static readonly "TICKET_KIOSK": $RegistryObject<($Block)>
static readonly "BOOKSHELF_TRADER": $RegistryObjectBundle<($Block), ($WoodType)>
static readonly "SLOT_MACHINE": $RegistryObject<($Block)>
static readonly "TICKET_STATION": $RegistryObject<($Block)>
static readonly "COIN_CHEST": $RegistryObject<($Block)>
static readonly "TAX_COLLECTOR": $RegistryObject<($Block)>
static readonly "PIGGY_BANK": $RegistryObject<($Block)>
static readonly "COINJAR_BLUE": $RegistryObject<($Block)>
static readonly "SUS_JAR": $RegistryObject<($Block)>
static readonly "AUCTION_STAND": $RegistryObjectBundle<($Block), ($WoodType)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlocks$Type = ($ModBlocks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlocks_ = $ModBlocks$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/$CommandConfig" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"

export class $CommandConfig {

constructor()

public static "register"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
public static "configResetCommands"(): $ArgumentBuilder<($CommandSourceStack), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandConfig$Type = ($CommandConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandConfig_ = $CommandConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/$TextNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TextNotification extends $Notification {
static readonly "TYPE": $NotificationType<($TextNotification)>

constructor(arg0: $MutableComponent$Type, arg1: $NotificationCategory$Type)
constructor(arg0: $MutableComponent$Type)

public "getMessage"(): $MutableComponent
public static "create"(arg0: $MutableComponent$Type): $NonNullSupplier<($Notification)>
public static "create"(arg0: $MutableComponent$Type, arg1: $NotificationCategory$Type): $NonNullSupplier<($Notification)>
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextNotification$Type = ($TextNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextNotification_ = $TextNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/types/$BlockEntityValidator" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$MenuValidatorType, $MenuValidatorType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidatorType"

export class $BlockEntityValidator extends $MenuValidator {
static readonly "TYPE": $MenuValidatorType
readonly "type": $MenuValidatorType


public static "of"(arg0: $BlockEntity$Type): $MenuValidator
public "stillValid"(arg0: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockEntityValidator$Type = ($BlockEntityValidator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockEntityValidator_ = $BlockEntityValidator$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$InteractionSlot" {
import {$InteractionSlotData, $InteractionSlotData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$InteractionSlotData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyMultiBGSlot, $EasyMultiBGSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/easy/$EasyMultiBGSlot"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $InteractionSlot extends $EasyMultiBGSlot {
readonly "slotData": $List<($InteractionSlotData)>
static readonly "EMPTY_SLOT_BG": $ResourceLocation
static readonly "BACKGROUND": $Pair<($ResourceLocation), ($ResourceLocation)>
 "active": boolean
 "locked": boolean
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $List$Type<($InteractionSlotData$Type)>, arg1: integer, arg2: integer)

public "isType"(arg0: string): boolean
public "isActive"(): boolean
public "mayPlace"(arg0: $ItemStack$Type): boolean
public "getMaxStackSize"(): integer
get "active"(): boolean
get "maxStackSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InteractionSlot$Type = ($InteractionSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InteractionSlot_ = $InteractionSlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/types/$CurrencyType" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IPlayerMoneyHandler, $IPlayerMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$IPlayerMoneyHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MoneyValueParser, $MoneyValueParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValueParser"
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $CurrencyType {


public "getType"(): $ResourceLocation
public "getInputHandlers"(arg0: $Player$Type): $List<(any)>
public "getValueParser"(): $MoneyValueParser
public "sumValues"(arg0: $List$Type<($MoneyValue$Type)>): $MoneyValue
public "createMoneyHandlerForContainer"(arg0: $Container$Type, arg1: $Consumer$Type<($ItemStack$Type)>): $IMoneyHandler
public "createMoneyHandlerForATM"(arg0: $Player$Type, arg1: $Container$Type): $IMoneyHandler
public "createMoneyHandlerForPlayer"(arg0: $Player$Type): $IPlayerMoneyHandler
public "loadMoneyValueJson"(arg0: $JsonObject$Type): $MoneyValue
public "loadMoneyValue"(arg0: $CompoundTag$Type): $MoneyValue
get "type"(): $ResourceLocation
get "valueParser"(): $MoneyValueParser
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurrencyType$Type = ($CurrencyType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurrencyType_ = $CurrencyType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/util/$ListUtil" {
import {$List, $List$Type} from "packages/java/util/$List"

export class $ListUtil {

constructor()

public static "createList"(arg0: (integer)[]): $List<(integer)>
public static "convertList"<T>(arg0: $List$Type<(any)>): $List<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListUtil$Type = ($ListUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListUtil_ = $ListUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/rule_tabs/$FreeSampleTab" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TradeRuleSubTab, $TradeRuleSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRuleSubTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$FreeSample, $FreeSample$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$FreeSample"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $FreeSampleTab extends $TradeRuleSubTab<($FreeSample)> {
readonly "ruleType": $TradeRuleType<(T)>
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TradeRulesClientTab$Type<(any)>)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FreeSampleTab$Type = ($FreeSampleTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FreeSampleTab_ = $FreeSampleTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$IEasyScreen, $IEasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IEasyScreen"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export interface $ITraderStorageScreen extends $IEasyScreen {

 "getMenu"(): $ITraderStorageMenu
 "changeTab"(arg0: integer, arg1: boolean, arg2: $LazyPacketData$Builder$Type): void
 "changeTab"(arg0: integer): void
 "selfMessage"(arg0: $LazyPacketData$Builder$Type): void
 "blockInventoryClosing"(): boolean
 "getArea"(): $ScreenArea
 "getCorner"(): $ScreenPosition
 "getPlayer"(): $Player
 "addChild"<W>(arg0: W): W
 "removeChild"(arg0: any): void
 "getFont"(): $Font
 "getGuiLeft"(): integer
 "getGuiTop"(): integer
 "getXSize"(): integer
 "getYSize"(): integer
}

export namespace $ITraderStorageScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITraderStorageScreen$Type = ($ITraderStorageScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITraderStorageScreen_ = $ITraderStorageScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/$ClientEvents" {
import {$ContainerScreenEvent$Render$Background, $ContainerScreenEvent$Render$Background$Type} from "packages/net/minecraftforge/client/event/$ContainerScreenEvent$Render$Background"
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$InputEvent$Key, $InputEvent$Key$Type} from "packages/net/minecraftforge/client/event/$InputEvent$Key"
import {$ClientPlayerNetworkEvent$LoggingOut, $ClientPlayerNetworkEvent$LoggingOut$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$LoggingOut"
import {$ScreenEvent$Render$Post, $ScreenEvent$Render$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Render$Post"
import {$ScreenEvent$Init$Post, $ScreenEvent$Init$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Init$Post"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ClientPlayerNetworkEvent$LoggingIn, $ClientPlayerNetworkEvent$LoggingIn$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$LoggingIn"

export class $ClientEvents {
static readonly "WALLET_SLOT_TEXTURE": $ResourceLocation
static readonly "KEY_WALLET": $KeyMapping
static readonly "KEY_PORTABLE_TERMINAL": $KeyMapping
static readonly "KEY_PORTABLE_ATM": $KeyMapping

constructor()

public static "getWalletSlotPosition"(arg0: boolean): $ScreenPosition
public static "renderInventoryScreen"(arg0: $ContainerScreenEvent$Render$Background$Type): void
public static "renderInventoryTooltips"(arg0: $ScreenEvent$Render$Post$Type): void
public static "playerLeavesServer"(arg0: $ClientPlayerNetworkEvent$LoggingOut$Type): void
public static "playerJoinsServer"(arg0: $ClientPlayerNetworkEvent$LoggingIn$Type): void
public static "onInventoryGuiInit"(arg0: $ScreenEvent$Init$Post$Type): void
public static "onKeyInput"(arg0: $InputEvent$Key$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEvents$Type = ($ClientEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEvents_ = $ClientEvents$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/wallet/$CPacketOpenWalletBank" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketOpenWalletBank extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketOpenWalletBank)>

constructor(arg0: integer)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketOpenWalletBank$Type = ($CPacketOpenWalletBank);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketOpenWalletBank_ = $CPacketOpenWalletBank$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRuleSubTab" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $TradeRuleSubTab<T extends $TradeRule> extends $TradeRulesClientSubTab {
readonly "ruleType": $TradeRuleType<(T)>
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TradeRulesClientTab$Type<(any)>, arg1: $TradeRuleType$Type<(T)>)

public "sendUpdateMessage"(arg0: $LazyPacketData$Builder$Type): void
public "isVisible"(): boolean
get "visible"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeRuleSubTab$Type<T> = ($TradeRuleSubTab<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeRuleSubTab_<T> = $TradeRuleSubTab$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/teams/$CPacketEditTeam" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketEditTeam extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketEditTeam)>

constructor(arg0: long, arg1: $LazyPacketData$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketEditTeam$Type = ($CPacketEditTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketEditTeam_ = $CPacketEditTeam$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$ScrollTextDisplay" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Supplier, $Supplier$Type} from "packages/com/google/common/base/$Supplier"

export class $ScrollTextDisplay extends $EasyWidget {
 "invertText": boolean
 "backgroundColor": integer
 "textColor": integer
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Supplier$Type<($List$Type<(any)>)>)
constructor(arg0: $ScreenPosition$Type, arg1: integer, arg2: integer, arg3: $Supplier$Type<($List$Type<(any)>)>)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "setColumnCount"(arg0: integer): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
set "columnCount"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollTextDisplay$Type = ($ScrollTextDisplay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollTextDisplay_ = $ScrollTextDisplay$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$IEasyScreen, $IEasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IEasyScreen"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"

export class $EasyMenuScreen<T extends $AbstractContainerMenu> extends $AbstractContainerScreen<(T)> implements $IEasyScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getArea"(): $ScreenArea
public "getCorner"(): $ScreenPosition
public "getPlayer"(): $Player
public "addChild"<W>(arg0: W): W
public "removeChild"(arg0: any): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "getFont"(): $Font
public "getGuiLeft"(): integer
public "getGuiTop"(): integer
public "getXSize"(): integer
public "getYSize"(): integer
public "blockInventoryClosing"(): boolean
get "area"(): $ScreenArea
get "corner"(): $ScreenPosition
get "player"(): $Player
get "font"(): $Font
get "guiLeft"(): integer
get "guiTop"(): integer
get "xSize"(): integer
get "ySize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyMenuScreen$Type<T> = ($EasyMenuScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyMenuScreen_<T> = $EasyMenuScreen$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/bank/$SPacketUpdateClientBank" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketUpdateClientBank extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketUpdateClientBank)>

constructor(arg0: $UUID$Type, arg1: $CompoundTag$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketUpdateClientBank$Type = ($SPacketUpdateClientBank);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketUpdateClientBank_ = $SPacketUpdateClientBank$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/$BookTraderBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$TraderBlockRotatable, $TraderBlockRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockRotatable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IBookTraderBlock, $IBookTraderBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/traderblocks/interfaces/$IBookTraderBlock"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Quaternionf, $Quaternionf$Type} from "packages/org/joml/$Quaternionf"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $BookTraderBlock extends $TraderBlockRotatable implements $IBookTraderBlock {
static readonly "BOOK_COUNT": integer
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "GetBookRenderPos"(arg0: integer, arg1: $BlockState$Type): $Vector3f
public "GetBookRenderRot"(arg0: integer, arg1: $BlockState$Type): $List<($Quaternionf)>
public "maxRenderIndex"(): integer
public "GetBookRenderScale"(arg0: integer, arg1: $BlockState$Type): float
public "getBlockEntity"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookTraderBlock$Type = ($BookTraderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookTraderBlock_ = $BookTraderBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/condition/$SimpleCraftingCondition" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $SimpleCraftingCondition implements $ICondition {


public "test"(arg0: $ICondition$IContext$Type): boolean
public "getID"(): $ResourceLocation
public static "shouldRegisterEntry"(arg0: $JsonElement$Type): boolean
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleCraftingCondition$Type = ($SimpleCraftingCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleCraftingCondition_ = $SimpleCraftingCondition$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$OutlineUtil" {
import {$Vector4f, $Vector4f$Type} from "packages/org/joml/$Vector4f"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $OutlineUtil {

constructor()

public static "renderBox"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: $AABB$Type, arg3: integer, arg4: float): void
public static "renderBox"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: $AABB$Type, arg3: $Vector4f$Type): void
public static "renderBox"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: $AABB$Type, arg3: integer): void
public static "decodeColor"(arg0: integer): $Vector4f
public static "decodeColor"(arg0: integer, arg1: float): $Vector4f
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OutlineUtil$Type = ($OutlineUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OutlineUtil_ = $OutlineUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/paygate/tradedata/$PaygateTradeData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TradeRenderManager, $TradeRenderManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/client/$TradeRenderManager"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TradeDirection, $TradeDirection$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeDirection"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$TradeComparisonResult, $TradeComparisonResult$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/comparison/$TradeComparisonResult"
import {$BasicTradeEditTab, $BasicTradeEditTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trades_basic/$BasicTradeEditTab"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"

export class $PaygateTradeData extends $TradeData {
static readonly "DEFAULT_KEY": string

constructor()

public "compare"(arg0: $TradeData$Type): $TradeComparisonResult
public "getDuration"(): integer
public "isValid"(): boolean
public "getTradeDirection"(): $TradeDirection
public "getAsNBT"(): $CompoundTag
public static "formatDurationDisplay"(arg0: integer): $MutableComponent
public "setStoreTicketStubs"(arg0: boolean): void
public "AcceptableDifferences"(arg0: $TradeComparisonResult$Type): boolean
public static "formatDurationShort"(arg0: integer): $MutableComponent
public "OnOutputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "GetDifferenceWarnings"(arg0: $TradeComparisonResult$Type): $List<($Component)>
public "OnInputDisplayInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: $ItemStack$Type): void
public "isTicketTrade"(): boolean
public "getTicketID"(): long
public "getButtonRenderer"(): $TradeRenderManager<(any)>
public "getStock"(arg0: $TradeContext$Type): integer
public "OnInteraction"(arg0: $BasicTradeEditTab$Type, arg1: $Consumer$Type<($LazyPacketData$Builder$Type)>, arg2: integer, arg3: integer, arg4: integer, arg5: $ItemStack$Type): void
public "canAfford"(arg0: $TradeContext$Type): boolean
public static "loadAllData"(arg0: $CompoundTag$Type): $List<($PaygateTradeData)>
public static "loadAllData"(arg0: string, arg1: $CompoundTag$Type): $List<($PaygateTradeData)>
public static "saveAllData"(arg0: $CompoundTag$Type, arg1: $List$Type<($PaygateTradeData$Type)>): void
public static "saveAllData"(arg0: $CompoundTag$Type, arg1: $List$Type<($PaygateTradeData$Type)>, arg2: string): void
public static "listOfSize"(arg0: integer): $List<($PaygateTradeData)>
public "shouldStoreTicketStubs"(): boolean
public static "loadData"(arg0: $CompoundTag$Type): $PaygateTradeData
public "isMoneyRelevant"(): boolean
public "setDuration"(arg0: integer): void
public static "formatDuration"(arg0: integer): $MutableComponent
public "getTicketColor"(): integer
public "setTicket"(arg0: $ItemStack$Type): void
public "getTicketItem"(): $Item
public "getTicketStub"(): $ItemStack
get "duration"(): integer
get "valid"(): boolean
get "tradeDirection"(): $TradeDirection
get "asNBT"(): $CompoundTag
set "storeTicketStubs"(value: boolean)
get "ticketTrade"(): boolean
get "ticketID"(): long
get "buttonRenderer"(): $TradeRenderManager<(any)>
get "moneyRelevant"(): boolean
set "duration"(value: integer)
get "ticketColor"(): integer
set "ticket"(value: $ItemStack$Type)
get "ticketItem"(): $Item
get "ticketStub"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaygateTradeData$Type = ($PaygateTradeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaygateTradeData_ = $PaygateTradeData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxSaveData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"

export class $TaxSaveData extends $SavedData {
static readonly "SERVER_TAX_ID": long


public static "GetTaxEntry"(arg0: long, arg1: boolean): $TaxEntry
public static "GetServerTaxEntry"(arg0: boolean): $TaxEntry
public static "CreateAndRegister"(arg0: $BlockEntity$Type, arg1: $Player$Type): long
public static "MarkTaxEntryDirty"(arg0: long, arg1: $CompoundTag$Type): void
public static "RemoveEntry"(arg0: long): void
public static "GetAllTaxEntries"(arg0: boolean): $List<($TaxEntry)>
public static "onPlayerJoin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public "save"(arg0: $CompoundTag$Type): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxSaveData$Type = ($TaxSaveData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxSaveData_ = $TaxSaveData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$TraderArgument" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$ArgumentType, $ArgumentType$Type} from "packages/com/mojang/brigadier/arguments/$ArgumentType"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $TraderArgument implements $ArgumentType<($TraderData)> {


public "parse"(arg0: $StringReader$Type): $TraderData
public static "getTrader"(arg0: $CommandContext$Type<($CommandSourceStack$Type)>, arg1: string): $TraderData
public static "trader"(): $TraderArgument
public "listSuggestions"<S>(arg0: $CommandContext$Type<(S)>, arg1: $SuggestionsBuilder$Type): $CompletableFuture<($Suggestions)>
public static "traderWithPersistent"(): $TraderArgument
public "getExamples"(): $Collection<(string)>
get "examples"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderArgument$Type = ($TraderArgument);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderArgument_ = $TraderArgument$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatKey" {
import {$StatType, $StatType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/stats/$StatType"

export class $StatKey<A, B> {
readonly "key": string
readonly "type": $StatType<(A), (B)>


public static "create"<A, B>(arg0: string, arg1: $StatType$Type<(A), (B)>): $StatKey<(A), (B)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatKey$Type<A, B> = ($StatKey<(A), (B)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatKey_<A, B> = $StatKey$Type<(A), (B)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab" {
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TradeRulesClientTab<T extends $TradeRulesTab> extends $TraderStorageClientTab<(T)> {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T


public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "closeAction"(): void
public "blockInventoryClosing"(): boolean
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "refreshTabs"(): void
public "openTab"(arg0: integer): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeRulesClientTab$Type<T> = ($TradeRulesClientTab<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeRulesClientTab_<T> = $TradeRulesClientTab$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockRotatable" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$IRotatableBlock, $IRotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IRotatableBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TraderBlockBase, $TraderBlockBase$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockBase"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $TraderBlockRotatable extends $TraderBlockBase implements $IRotatableBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getFacing"(arg0: $BlockState$Type): $Direction
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderBlockRotatable$Type = ($TraderBlockRotatable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderBlockRotatable_ = $TraderBlockRotatable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestMagnetUpgrade" {
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CoinChestUpgradeData, $CoinChestUpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgradeData"
import {$CoinChestMenu, $CoinChestMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinChestMenu"
import {$TickableCoinChestUpgrade, $TickableCoinChestUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$TickableCoinChestUpgrade"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"

export class $CoinChestMagnetUpgrade extends $TickableCoinChestUpgrade {
static readonly "RANGE": string

constructor()

public "getRadius"(arg0: $CoinChestUpgradeData$Type): integer
public "getTooltip"(arg0: $UpgradeData$Type): $List<($Component)>
public "OnServerTick"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "addClientTabs"(arg0: $CoinChestUpgradeData$Type, arg1: any, arg2: $Consumer$Type<(any)>): void
public "HandleMenuMessage"(arg0: $CoinChestMenu$Type, arg1: $CoinChestUpgradeData$Type, arg2: $LazyPacketData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestMagnetUpgrade$Type = ($CoinChestMagnetUpgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestMagnetUpgrade_ = $CoinChestMagnetUpgrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/data/$ClientEjectionData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientPlayerNetworkEvent$LoggingOut, $ClientPlayerNetworkEvent$LoggingOut$Type} from "packages/net/minecraftforge/client/event/$ClientPlayerNetworkEvent$LoggingOut"
import {$EjectionData, $EjectionData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$EjectionData"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ClientEjectionData {

constructor()

public static "GetEjectionData"(): $List<($EjectionData)>
public static "onClientLogout"(arg0: $ClientPlayerNetworkEvent$LoggingOut$Type): void
public static "UpdateEjectionData"(arg0: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEjectionData$Type = ($ClientEjectionData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEjectionData_ = $ClientEjectionData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgradeData" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$CoinChestUpgrade, $CoinChestUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgrade"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $CoinChestUpgradeData {
static readonly "NULL": $CoinChestUpgradeData
readonly "slot": integer
readonly "upgrade": $CoinChestUpgrade


public "isNull"(): boolean
public "tick"(arg0: $CoinChestBlockEntity$Type): void
public "getItem"(): $Item
public "setItemTag"(arg0: $CompoundTag$Type): void
public "notNull"(): boolean
public "getUpgradeData"(): $UpgradeData
public "copyRelevantData"(arg0: $CoinChestUpgradeData$Type): void
public static "forItem"(arg0: $ItemStack$Type, arg1: integer, arg2: $Runnable$Type): $CoinChestUpgradeData
public "getItemTag"(): $CompoundTag
get "null"(): boolean
get "item"(): $Item
set "itemTag"(value: $CompoundTag$Type)
get "upgradeData"(): $UpgradeData
get "itemTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestUpgradeData$Type = ($CoinChestUpgradeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestUpgradeData_ = $CoinChestUpgradeData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/core/$OwnershipTab" {
import {$TraderSettingsTab, $TraderSettingsTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/settings/$TraderSettingsTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TraderSettingsClientTab, $TraderSettingsClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$TraderSettingsClientTab"
import {$SettingsSubTab, $SettingsSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/settings/$SettingsSubTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $OwnershipTab extends $SettingsSubTab {
readonly "parent": $TraderSettingsClientTab
readonly "commonTab": $TraderSettingsTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TraderSettingsClientTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "canOpen"(): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnershipTab$Type = ($OwnershipTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnershipTab_ = $OwnershipTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$WalletScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$WalletMenu, $WalletMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/wallet/$WalletMenu"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $WalletScreen extends $EasyMenuScreen<($WalletMenu)> {
static readonly "GUI_TEXTURE": $ResourceLocation
static readonly "SPRITE_QUICK_COLLECT": $Sprite
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $WalletMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "screenTick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletScreen$Type = ($WalletScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletScreen_ = $WalletScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/taxes/$TaxAPI" {
import {$ITaxable, $ITaxable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITaxCollector, $ITaxCollector$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxCollector"
import {$TaxReferenceType, $TaxReferenceType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxReferenceType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TaxAPI {


public static "getReferenceType"(arg0: $ResourceLocation$Type): $TaxReferenceType
public static "GetActiveTaxCollectorsFor"(arg0: $ITaxable$Type): $List<($ITaxCollector)>
public static "GetPossibleTaxCollectorsFor"(arg0: $ITaxable$Type): $List<($ITaxCollector)>
public static "registerReferenceType"(arg0: $TaxReferenceType$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxAPI$Type = ($TaxAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxAPI_ = $TaxAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$StringListOption" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ListOption, $ListOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ListOption"

export class $StringListOption extends $ListOption<(string)> {


public static "create"(arg0: $NonNullSupplier$Type<($List$Type<(string)>)>): $StringListOption
public static "create"(arg0: $List$Type<(string)>): $StringListOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringListOption$Type = ($StringListOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringListOption_ = $StringListOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$EasyBlock" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $EasyBlock extends $Block {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "getOcclusionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyBlock$Type = ($EasyBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyBlock_ = $EasyBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgrade" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CoinChestUpgradeData, $CoinChestUpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgradeData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$CoinChestMenu, $CoinChestMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$CoinChestMenu"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$CoinChestBlockEntity, $CoinChestBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blockentity/$CoinChestBlockEntity"

export class $CoinChestUpgrade extends $UpgradeType {

constructor()

public "OnStorageChanged"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "BlockAccess"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type, arg2: $Player$Type): boolean
public "OnBlockRemoval"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "OnEquip"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "allowsDuplicates"(): boolean
public "OnValidBlockRemoval"(arg0: $CoinChestBlockEntity$Type, arg1: $CoinChestUpgradeData$Type): void
public "addClientTabs"(arg0: $CoinChestUpgradeData$Type, arg1: any, arg2: $Consumer$Type<(any)>): void
public "HandleMenuMessage"(arg0: $CoinChestMenu$Type, arg1: $CoinChestUpgradeData$Type, arg2: $LazyPacketData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinChestUpgrade$Type = ($CoinChestUpgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinChestUpgrade_ = $CoinChestUpgrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/atm/$ATMExchangeButton" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ATMExchangeButtonData, $ATMExchangeButtonData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMExchangeButtonData"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ATMExchangeButton extends $EasyButton {
static readonly "HEIGHT": integer
readonly "data": $ATMExchangeButtonData
 "selected": boolean
static readonly "NULL_PRESS": $Consumer<($EasyButton)>
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ScreenPosition$Type, arg1: $ATMExchangeButtonData$Type, arg2: $Consumer$Type<(string)>)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMExchangeButton$Type = ($ATMExchangeButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMExchangeButton_ = $ATMExchangeButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/curios/client/renderer/$WalletCurioRenderer" {
import {$SlotContext, $SlotContext$Type} from "packages/top/theillusivec4/curios/api/$SlotContext"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$ICurioRenderer, $ICurioRenderer$Type} from "packages/top/theillusivec4/curios/api/client/$ICurioRenderer"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $WalletCurioRenderer implements $ICurioRenderer {
static readonly "INSTANCE": $ICurioRenderer


public static "supplier"(): $Supplier<($ICurioRenderer)>
public "render"<T extends $LivingEntity, M extends $EntityModel<(T)>>(arg0: $ItemStack$Type, arg1: $SlotContext$Type, arg2: $PoseStack$Type, arg3: $RenderLayerParent$Type<(T), (M)>, arg4: $MultiBufferSource$Type, arg5: integer, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float): void
public static "followHeadRotations"(arg0: $LivingEntity$Type, ...arg1: ($ModelPart$Type)[]): void
public static "translateIfSneaking"(arg0: $PoseStack$Type, arg1: $LivingEntity$Type): void
public static "followBodyRotations"(arg0: $LivingEntity$Type, ...arg1: ($HumanoidModel$Type<($LivingEntity$Type)>)[]): void
public static "rotateIfSneaking"(arg0: $PoseStack$Type, arg1: $LivingEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WalletCurioRenderer$Type = ($WalletCurioRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WalletCurioRenderer_ = $WalletCurioRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/event/$SPacketSyncEventUnlocks" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncEventUnlocks extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncEventUnlocks)>

constructor(arg0: $List$Type<(string)>)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncEventUnlocks$Type = ($SPacketSyncEventUnlocks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncEventUnlocks_ = $SPacketSyncEventUnlocks$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/restrictions/$TicketKioskRestriction" {
import {$ItemTradeRestriction, $ItemTradeRestriction$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/restrictions/$ItemTradeRestriction"
import {$TraderItemStorage, $TraderItemStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemTradeData, $ItemTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TicketKioskRestriction extends $ItemTradeRestriction {
static "INSTANCE": $TicketKioskRestriction
static readonly "NO_RESTRICTION_KEY": $ResourceLocation
static readonly "NONE": $ItemTradeRestriction


public "getEmptySlotBG"(): $Pair<($ResourceLocation), ($ResourceLocation)>
public "allowItemSelectItem"(arg0: $ItemStack$Type): boolean
public "removeItemsFromStorage"(arg0: $TraderItemStorage$Type, arg1: $List$Type<($ItemStack$Type)>): void
public "allowExtraItemInStorage"(arg0: $ItemStack$Type): boolean
public "allowSellItem"(arg0: $ItemStack$Type): boolean
public "alwaysEnforceNBT"(arg0: integer): boolean
public "modifySellItem"(arg0: $ItemStack$Type, arg1: string, arg2: $ItemTradeData$Type): $ItemStack
public "filterSellItem"(arg0: $ItemStack$Type): $ItemStack
public "getSaleStock"(arg0: $TraderItemStorage$Type, arg1: $ItemTradeData$Type): integer
get "emptySlotBG"(): $Pair<($ResourceLocation), ($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TicketKioskRestriction$Type = ($TicketKioskRestriction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TicketKioskRestriction_ = $TicketKioskRestriction$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$CoinpileBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$CoinBlock, $CoinBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/common/blocks/$CoinBlock"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$IRotatableBlock, $IRotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IRotatableBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"

export class $CoinpileBlock extends $CoinBlock implements $IRotatableBlock, $SimpleWaterloggedBlock {
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $Supplier$Type<($Item$Type)>)
constructor(arg0: $BlockBehaviour$Properties$Type, arg1: $Supplier$Type<($Item$Type)>, arg2: $VoxelShape$Type)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "isPathfindable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $PathComputationType$Type): boolean
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getFacing"(arg0: $BlockState$Type): $Direction
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinpileBlock$Type = ($CoinpileBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinpileBlock_ = $CoinpileBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blockentity/handler/$ICanCopy" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ICanCopy<T extends $ICanCopy<(T)>> {

 "copy"(): T

(): T
}

export namespace $ICanCopy {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICanCopy$Type<T> = ($ICanCopy<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICanCopy_<T> = $ICanCopy$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/rule_tabs/$PriceFluctuationTab" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$TradeRulesTab, $TradeRulesTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/trade_rules/$TradeRulesTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TimeUtil$TimeData, $TimeUtil$TimeData$Type} from "packages/io/github/lightman314/lightmanscurrency/util/$TimeUtil$TimeData"
import {$TradeRuleSubTab, $TradeRuleSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRuleSubTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$PriceFluctuation, $PriceFluctuation$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$PriceFluctuation"

export class $PriceFluctuationTab extends $TradeRuleSubTab<($PriceFluctuation)> {
readonly "ruleType": $TradeRuleType<(T)>
readonly "parent": $TradeRulesClientTab<(any)>
readonly "commonTab": $TradeRulesTab
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu

constructor(arg0: $TradeRulesClientTab$Type<(any)>)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "onTimeSet"(arg0: $TimeUtil$TimeData$Type): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PriceFluctuationTab$Type = ($PriceFluctuationTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PriceFluctuationTab_ = $PriceFluctuationTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/taxes/$TaxInfoWidget" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Sprite, $Sprite$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/rendering/$Sprite"
import {$EasyWidgetWithChildren, $EasyWidgetWithChildren$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidgetWithChildren"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ITaxCollector, $ITaxCollector$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxCollector"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ITaxInfoInteractable, $ITaxInfoInteractable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/taxes/$ITaxInfoInteractable"

export class $TaxInfoWidget extends $EasyWidgetWithChildren {
static readonly "SPRITE_IGNORE_TC": $Sprite
static readonly "SPRITE_STOP_IGNORING_TC": $Sprite
static readonly "HEIGHT": integer
static readonly "WIDTH": integer
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ScreenPosition$Type, arg1: $Supplier$Type<($ITaxCollector$Type)>, arg2: $ITaxInfoInteractable$Type)
constructor(arg0: integer, arg1: integer, arg2: $Supplier$Type<($ITaxCollector$Type)>, arg3: $ITaxInfoInteractable$Type)

public "addChildren"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxInfoWidget$Type = ($TaxInfoWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxInfoWidget_ = $TaxInfoWidget$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$SecurityUpgradeTab" {
import {$CoinChestUpgradeData, $CoinChestUpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/coin_chest/$CoinChestUpgradeData"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$CoinChestTab$Upgrade, $CoinChestTab$Upgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/coin_chest/$CoinChestTab$Upgrade"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $SecurityUpgradeTab extends $CoinChestTab$Upgrade {

constructor(arg0: $CoinChestUpgradeData$Type, arg1: any)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "blockInventoryClosing"(): boolean
public "isVisible"(): boolean
public "coinSlotsVisible"(): boolean
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "titleVisible"(): boolean
get "visible"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SecurityUpgradeTab$Type = ($SecurityUpgradeTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SecurityUpgradeTab_ = $SecurityUpgradeTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/$ATMAPI" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$IconType, $IconType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$IconType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ATMPageManager, $ATMPageManager$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMPageManager"
import {$ATMIconData, $ATMIconData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$ATMIconData"

export class $ATMAPI {

constructor()

public static "registerIconType"(arg0: $IconType$Type): void
public static "UpdateCommand"(arg0: string): string
public static "parseIcon"(arg0: $JsonObject$Type): $ATMIconData
public static "getATMPageManager"(arg0: $Player$Type, arg1: $Consumer$Type<(any)>, arg2: $Consumer$Type<(any)>, arg3: $Consumer$Type<(string)>): $ATMPageManager
public static "Setup"(): void
public static "ExecuteATMExchangeCommand"(arg0: $Container$Type, arg1: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMAPI$Type = ($ATMAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMAPI_ = $ATMAPI$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$AuctionHouseCategory" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$NotificationCategoryType, $NotificationCategoryType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategoryType"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"

export class $AuctionHouseCategory extends $NotificationCategory {
static readonly "TYPE": $NotificationCategoryType<($AuctionHouseCategory)>
static readonly "INSTANCE": $AuctionHouseCategory
static readonly "GENERAL_TYPE": $NotificationCategoryType<(any)>
static readonly "GENERAL": $NotificationCategory


public "getName"(): $MutableComponent
public "matches"(arg0: $NotificationCategory$Type): boolean
public "getType"(): $NotificationCategoryType<($AuctionHouseCategory)>
public "getIcon"(): $IconData
public "saveAdditional"(arg0: $CompoundTag$Type): void
get "name"(): $MutableComponent
get "type"(): $NotificationCategoryType<($AuctionHouseCategory)>
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionHouseCategory$Type = ($AuctionHouseCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionHouseCategory_ = $AuctionHouseCategory$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$AlertData" {
import {$TextEntry, $TextEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/text/$TextEntry"
import {$AlertType, $AlertType$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$AlertType"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AlertData {
readonly "type": $AlertType


public static "compare"(arg0: $AlertData$Type, arg1: $AlertData$Type): integer
public static "error"(arg0: $MutableComponent$Type): $AlertData
public static "error"(arg0: $TextEntry$Type): $AlertData
public static "warn"(arg0: $TextEntry$Type): $AlertData
public static "warn"(arg0: $MutableComponent$Type): $AlertData
public static "neutral"(arg0: $MutableComponent$Type): $AlertData
public static "neutral"(arg0: $TextEntry$Type): $AlertData
public static "helpful"(arg0: $MutableComponent$Type): $AlertData
public static "helpful"(arg0: $TextEntry$Type): $AlertData
public "setShaderColor"(arg0: $EasyGuiGraphics$Type, arg1: float): void
public "getFormattedMessage"(): $MutableComponent
get "formattedMessage"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlertData$Type = ($AlertData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlertData_ = $AlertData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/trader/$SPacketClearClientTraders" {
import {$ServerToClientPacket$Simple, $ServerToClientPacket$Simple$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket$Simple"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketClearClientTraders extends $ServerToClientPacket$Simple {
static readonly "INSTANCE": $SPacketClearClientTraders
static readonly "HANDLER": $CustomPacket$Handler<($SPacketClearClientTraders)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketClearClientTraders$Type = ($SPacketClearClientTraders);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketClearClientTraders_ = $SPacketClearClientTraders$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/$EventHandler" {
import {$PlayerEvent$Clone, $PlayerEvent$Clone$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$Clone"
import {$BlockEvent$BreakEvent, $BlockEvent$BreakEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent$BreakEvent"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$LivingDropsEvent, $LivingDropsEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDropsEvent"
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$SaplingGrowTreeEvent, $SaplingGrowTreeEvent$Type} from "packages/net/minecraftforge/event/level/$SaplingGrowTreeEvent"
import {$PlayerEvent$PlayerChangedDimensionEvent, $PlayerEvent$PlayerChangedDimensionEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerChangedDimensionEvent"
import {$EntityItemPickupEvent, $EntityItemPickupEvent$Type} from "packages/net/minecraftforge/event/entity/player/$EntityItemPickupEvent"
import {$ServerStartedEvent, $ServerStartedEvent$Type} from "packages/net/minecraftforge/event/server/$ServerStartedEvent"
import {$PlayerEvent$StartTracking, $PlayerEvent$StartTracking$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$StartTracking"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$WalletDropEvent, $WalletDropEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$WalletDropEvent"
import {$PlayerEvent$BreakSpeed, $PlayerEvent$BreakSpeed$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$BreakSpeed"
import {$LivingEvent$LivingTickEvent, $LivingEvent$LivingTickEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent$LivingTickEvent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EventHandler {

constructor()

public static "serverStart"(arg0: $ServerStartedEvent$Type): void
public static "blockBreakSpeed"(arg0: $PlayerEvent$BreakSpeed$Type): void
public static "pickupItem"(arg0: $EntityItemPickupEvent$Type): void
public static "playerDrops"(arg0: $LivingDropsEvent$Type): void
public static "onWalletDrop"(arg0: $WalletDropEvent$Type): void
public static "entityTick"(arg0: $LivingEvent$LivingTickEvent$Type): void
public static "treeGrowEvent"(arg0: $SaplingGrowTreeEvent$Type): void
public static "onBlockBreak"(arg0: $BlockEvent$BreakEvent$Type): void
public static "playerChangedDimensions"(arg0: $PlayerEvent$PlayerChangedDimensionEvent$Type): void
public static "playerStartTracking"(arg0: $PlayerEvent$StartTracking$Type): void
public static "attachEntitiesCapabilities"(arg0: $AttachCapabilitiesEvent$Type<($Entity$Type)>): void
public static "playerClone"(arg0: $PlayerEvent$Clone$Type): void
public static "serverTick"(arg0: $TickEvent$ServerTickEvent$Type): void
public static "playerLogin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventHandler$Type = ($EventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventHandler_ = $EventHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traderinterface/$NetworkTraderReference" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $NetworkTraderReference {

constructor(arg0: $Supplier$Type<(boolean)>)

public "load"(arg0: $CompoundTag$Type): void
public "save"(): $CompoundTag
public "isClient"(): boolean
public "getTrader"(): $TraderData
public "setTrader"(arg0: long): void
public "getTraderID"(): long
public "hasTrader"(): boolean
get "client"(): boolean
get "trader"(): $TraderData
set "trader"(value: long)
get "traderID"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkTraderReference$Type = ($NetworkTraderReference);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkTraderReference_ = $NetworkTraderReference$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/integration/discord/data/$CurrencyBotData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"

export class $CurrencyBotData {
readonly "discordAccount": string

constructor(arg0: string)
constructor(arg0: $CompoundTag$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurrencyBotData$Type = ($CurrencyBotData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurrencyBotData_ = $CurrencyBotData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$IPotentialOwnerProvider" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PotentialOwner, $PotentialOwner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $IPotentialOwnerProvider {

 "collectPotentialOwners"(arg0: $Player$Type): $List<($PotentialOwner)>

(arg0: $Player$Type): $List<($PotentialOwner)>
}

export namespace $IPotentialOwnerProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPotentialOwnerProvider$Type = ($IPotentialOwnerProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPotentialOwnerProvider_ = $IPotentialOwnerProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/event_coins/$EventRange" {
import {$DatePredicate, $DatePredicate$Type} from "packages/io/github/lightman314/lightmanscurrency/common/advancements/date/$DatePredicate"

export class $EventRange {


public static "create"(arg0: $DatePredicate$Type, arg1: $DatePredicate$Type): $EventRange
public static "create"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): $EventRange
public "isActive"(): boolean
get "active"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventRange$Type = ($EventRange);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventRange_ = $EventRange$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/util/$TextRenderUtil" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UnaryOperator, $UnaryOperator$Type} from "packages/java/util/function/$UnaryOperator"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TextRenderUtil {

constructor()

public static "fitString"(arg0: $Component$Type, arg1: integer, arg2: $Style$Type): $Component
public static "fitString"(arg0: $Component$Type, arg1: integer, arg2: string): $Component
public static "fitString"(arg0: $Component$Type, arg1: integer): $Component
public static "fitString"(arg0: $Component$Type, arg1: integer, arg2: string, arg3: $Style$Type): $Component
public static "fitString"(arg0: string, arg1: integer, arg2: string, arg3: $Style$Type): $Component
public static "fitString"(arg0: string, arg1: integer): $Component
public static "fitString"(arg0: string, arg1: integer, arg2: $Style$Type): $Component
public static "fitString"(arg0: string, arg1: integer, arg2: string): $Component
public static "drawCenteredText"(arg0: $EasyGuiGraphics$Type, arg1: $Component$Type, arg2: integer, arg3: integer, arg4: integer): void
public static "drawCenteredText"(arg0: $EasyGuiGraphics$Type, arg1: string, arg2: integer, arg3: integer, arg4: integer): void
public static "drawCenteredMultilineText"(arg0: $EasyGuiGraphics$Type, arg1: $Component$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer): void
public static "drawCenteredMultilineText"(arg0: $EasyGuiGraphics$Type, arg1: string, arg2: integer, arg3: integer, arg4: integer, arg5: integer): void
public static "getFont"(): $Font
public static "drawVerticallyCenteredMultilineText"(arg0: $EasyGuiGraphics$Type, arg1: $Component$Type, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer): void
public static "drawVerticallyCenteredMultilineText"(arg0: $EasyGuiGraphics$Type, arg1: string, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer): void
public static "changeStyle"(arg0: $Component$Type, arg1: $UnaryOperator$Type<($Style$Type)>): $MutableComponent
public static "drawRightEdgeText"(arg0: $EasyGuiGraphics$Type, arg1: $Component$Type, arg2: integer, arg3: integer, arg4: integer): void
public static "drawRightEdgeText"(arg0: $EasyGuiGraphics$Type, arg1: string, arg2: integer, arg3: integer, arg4: integer): void
get "font"(): $Font
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextRenderUtil$Type = ($TextRenderUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextRenderUtil_ = $TextRenderUtil$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/capacity/$ItemCapacityUpgrade" {
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CapacityUpgrade, $CapacityUpgrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/upgrades/types/capacity/$CapacityUpgrade"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ItemCapacityUpgrade extends $CapacityUpgrade {
static "CAPACITY": string

constructor()

public "getTooltip"(arg0: $UpgradeData$Type): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemCapacityUpgrade$Type = ($ItemCapacityUpgrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemCapacityUpgrade_ = $ItemCapacityUpgrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/auction/$AuctionTradeCancelClientTab" {
import {$AuctionTradeCancelTab, $AuctionTradeCancelTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/auction/$AuctionTradeCancelTab"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $AuctionTradeCancelClientTab extends $TraderStorageClientTab<($AuctionTradeCancelTab)> {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $AuctionTradeCancelTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "receiveServerMessage"(arg0: $LazyPacketData$Type): void
public "tabButtonVisible"(): boolean
public "receiveSelfMessage"(arg0: $LazyPacketData$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionTradeCancelClientTab$Type = ($AuctionTradeCancelClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionTradeCancelClientTab_ = $AuctionTradeCancelClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$EnumOption" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $EnumOption<T extends $Enum<(T)>> extends $ConfigOption<(T)> {


public static "create"<T extends $Enum<(T)>>(arg0: T): $EnumOption<(T)>
public static "create"<T extends $Enum<(T)>>(arg0: $NonNullSupplier$Type<(T)>, arg1: $Class$Type<(any)>): $EnumOption<(T)>
public static "buildParser"<T extends $Enum<(T)>>(arg0: $Class$Type<(T)>): $ConfigParser<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnumOption$Type<T> = ($EnumOption<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnumOption_<T> = $EnumOption$Type<(T)>;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$SelectionTab" {
import {$ATMScreen, $ATMScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$ATMScreen"
import {$ATMTab, $ATMTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$ATMTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $SelectionTab extends $ATMTab {

constructor(arg0: $ATMScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "closeAction"(): void
public "ReceiveSelectPlayerResponse"(arg0: $MutableComponent$Type): void
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "SelectTeam"(arg0: integer): void
public "selectedTeam"(): $Team
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectionTab$Type = ($SelectionTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectionTab_ = $SelectionTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/restrictions/$ItemTradeRestriction" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$TraderItemStorage, $TraderItemStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$TraderItemStorage"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemTradeData, $ItemTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ItemTraderData, $ItemTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/$ItemTraderData"

export class $ItemTradeRestriction {
static readonly "NO_RESTRICTION_KEY": $ResourceLocation
static readonly "NONE": $ItemTradeRestriction


public static "register"(arg0: $ResourceLocation$Type, arg1: $ItemTradeRestriction$Type): void
public static "init"(): void
public static "forEach"(arg0: $BiConsumer$Type<($ResourceLocation$Type), ($ItemTradeRestriction$Type)>): void
public static "getId"(arg0: $ItemTradeRestriction$Type): $ResourceLocation
public "getEmptySlotBG"(): $Pair<($ResourceLocation), ($ResourceLocation)>
public "allowItemSelectItem"(arg0: $ItemStack$Type): boolean
public "removeItemsFromStorage"(arg0: $TraderItemStorage$Type, arg1: $List$Type<($ItemStack$Type)>): void
public "allowExtraItemInStorage"(arg0: $ItemStack$Type): boolean
public "getRandomSellItems"(arg0: $ItemTraderData$Type, arg1: $ItemTradeData$Type): $List<($ItemStack)>
public "allowSellItem"(arg0: $ItemStack$Type): boolean
public "alwaysEnforceNBT"(arg0: integer): boolean
public "modifySellItem"(arg0: $ItemStack$Type, arg1: string, arg2: $ItemTradeData$Type): $ItemStack
public "filterSellItem"(arg0: $ItemStack$Type): $ItemStack
public "getSaleStock"(arg0: $TraderItemStorage$Type, arg1: $ItemTradeData$Type): integer
get "emptySlotBG"(): $Pair<($ResourceLocation), ($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTradeRestriction$Type = ($ItemTradeRestriction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTradeRestriction_ = $ItemTradeRestriction$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MultiMoneyHolder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyHolder, $MoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyHolder"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $MultiMoneyHolder extends $MoneyHolder {
static readonly "EMPTY": $IMoneyHolder

constructor(arg0: $List$Type<($IMoneyHolder$Type)>)

public "clearCache"(arg0: any): void
public "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "getTooltipTitle"(): $Component
public "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
public "formatTooltip"(arg0: $List$Type<($Component$Type)>): void
public "hasStoredMoneyChanged"(): boolean
public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
get "tooltipTitle"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiMoneyHolder$Type = ($MultiMoneyHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiMoneyHolder_ = $MultiMoneyHolder$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$IRuleLoadListener" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ITradeRuleHost, $ITradeRuleHost$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$ITradeRuleHost"

export interface $IRuleLoadListener {

 "afterLoading"(arg0: $ITradeRuleHost$Type, arg1: $List$Type<($CompoundTag$Type)>, arg2: $List$Type<($TradeRule$Type)>): void
 "beforeLoading"(arg0: $ITradeRuleHost$Type, arg1: $List$Type<($CompoundTag$Type)>, arg2: $List$Type<($TradeRule$Type)>): void
}

export namespace $IRuleLoadListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRuleLoadListener$Type = ($IRuleLoadListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRuleLoadListener_ = $IRuleLoadListener$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry" {
import {$TextRenderUtil$TextFormatting, $TextRenderUtil$TextFormatting$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$TextRenderUtil$TextFormatting"
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$DisplayData, $DisplayData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $DisplayEntry {


public static "of"(arg0: $Component$Type, arg1: $TextRenderUtil$TextFormatting$Type): $DisplayEntry
public static "of"(arg0: $Pair$Type<($ResourceLocation$Type), ($ResourceLocation$Type)>, arg1: $List$Type<($Component$Type)>): $DisplayEntry
public static "of"(arg0: $Component$Type, arg1: $TextRenderUtil$TextFormatting$Type, arg2: boolean): $DisplayEntry
public static "of"(arg0: $Pair$Type<($ResourceLocation$Type), ($ResourceLocation$Type)>): $DisplayEntry
public static "of"(arg0: $ItemStack$Type, arg1: integer, arg2: $Consumer$Type<($List$Type<($Component$Type)>)>, arg3: $Pair$Type<($ResourceLocation$Type), ($ResourceLocation$Type)>, arg4: $ScreenPosition$Type): $DisplayEntry
public static "of"(arg0: $ItemStack$Type, arg1: integer, arg2: $List$Type<($Component$Type)>, arg3: $Pair$Type<($ResourceLocation$Type), ($ResourceLocation$Type)>, arg4: $ScreenPosition$Type): $DisplayEntry
public static "of"(arg0: $MoneyValue$Type, arg1: $List$Type<($Component$Type)>, arg2: boolean): $DisplayEntry
public static "of"(arg0: $MoneyValue$Type, arg1: $List$Type<($Component$Type)>): $DisplayEntry
public static "of"(arg0: $MoneyValue$Type): $DisplayEntry
public static "of"(arg0: $Component$Type, arg1: $TextRenderUtil$TextFormatting$Type, arg2: $List$Type<($Component$Type)>, arg3: boolean): $DisplayEntry
public static "of"(arg0: $Component$Type, arg1: $TextRenderUtil$TextFormatting$Type, arg2: $List$Type<($Component$Type)>): $DisplayEntry
public static "of"(arg0: $ItemStack$Type, arg1: integer): $DisplayEntry
public static "of"(arg0: $ItemStack$Type, arg1: integer, arg2: $Consumer$Type<($List$Type<($Component$Type)>)>): $DisplayEntry
public static "of"(arg0: $ItemStack$Type, arg1: integer, arg2: $List$Type<($Component$Type)>): $DisplayEntry
public static "of"(arg0: $ItemStack$Type, arg1: integer, arg2: $List$Type<($Component$Type)>, arg3: $Pair$Type<($ResourceLocation$Type), ($ResourceLocation$Type)>): $DisplayEntry
public static "of"(arg0: $ItemStack$Type, arg1: integer, arg2: $Consumer$Type<($List$Type<($Component$Type)>)>, arg3: $Pair$Type<($ResourceLocation$Type), ($ResourceLocation$Type)>): $DisplayEntry
public "trySelfRenderTooltip"(arg0: $EasyGuiGraphics$Type): boolean
public "render"(arg0: $EasyGuiGraphics$Type, arg1: integer, arg2: integer, arg3: $DisplayData$Type): void
public "getTooltip"(): $List<($Component)>
public "isMouseOver"(arg0: integer, arg1: integer, arg2: $DisplayData$Type, arg3: integer, arg4: integer): boolean
get "tooltip"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplayEntry$Type = ($DisplayEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplayEntry_ = $DisplayEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/bank/$BankAccount" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$TaxEntry, $TaxEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/common/taxes/$TaxEntry"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$MoneyHolder$Slave, $MoneyHolder$Slave$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyHolder$Slave"
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$MoneyStorage, $MoneyStorage$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BankAccount extends $MoneyHolder$Slave implements $IBankAccount {

constructor(arg0: $Runnable$Type)
constructor()
constructor(arg0: $CompoundTag$Type)
constructor(arg0: $Runnable$Type, arg1: $CompoundTag$Type)

public "getName"(): $MutableComponent
public "save"(): $CompoundTag
public "getNotifications"(): $List<($Notification)>
public "getNotificationLevels"(): $Map<(string), ($MoneyValue)>
public "getNotificationLevelFor"(arg0: string): $MoneyValue
public "setNotificationLevel"(arg0: string, arg1: $MoneyValue$Type): void
public "isClient"(): boolean
public "pushNotification"(arg0: $NonNullSupplier$Type<($Notification$Type)>, arg1: boolean): void
public "updateOwnersName"(arg0: string): void
public "getOwnersName"(): string
public "LogTransfer"(arg0: $Player$Type, arg1: $MoneyValue$Type, arg2: $MutableComponent$Type, arg3: boolean): void
public "applyInterest"(arg0: double, arg1: $List$Type<($MoneyValue$Type)>, arg2: boolean, arg3: boolean): void
public "markDirty"(): void
public "getTooltipTitle"(): $Component
public "formatTooltip"(arg0: $List$Type<($Component$Type)>): void
public "flagAsClient"(): $BankAccount
public "depositMoney"(arg0: $MoneyValue$Type): void
public "LogInteraction"(arg0: $TraderData$Type, arg1: $MoneyValue$Type, arg2: boolean): void
public "LogInteraction"(arg0: $Player$Type, arg1: $MoneyValue$Type, arg2: boolean): void
public "LogInteraction"(arg0: $TaxEntry$Type, arg1: $MoneyValue$Type): void
public "getMoneyStorage"(): $MoneyStorage
public "withdrawMoney"(arg0: $MoneyValue$Type): $MoneyValue
public static "generateNotificationAcceptor"(arg0: $UUID$Type): $Consumer<($NonNullSupplier<($Notification)>)>
public "setNotificationConsumer"(arg0: $Consumer$Type<($NonNullSupplier$Type<($Notification$Type)>)>): void
public "pushLocalNotification"(arg0: $Notification$Type): void
public "pushNotification"(arg0: $NonNullSupplier$Type<($Notification$Type)>): void
public "getBalanceText"(): $Component
public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
public "isServer"(): boolean
get "name"(): $MutableComponent
get "notifications"(): $List<($Notification)>
get "notificationLevels"(): $Map<(string), ($MoneyValue)>
get "client"(): boolean
get "ownersName"(): string
get "tooltipTitle"(): $Component
get "moneyStorage"(): $MoneyStorage
set "notificationConsumer"(value: $Consumer$Type<($NonNullSupplier$Type<($Notification$Type)>)>)
get "balanceText"(): $Component
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankAccount$Type = ($BankAccount);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankAccount_ = $BankAccount$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemPositionData$PositionEntry, $ItemPositionData$PositionEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData$PositionEntry"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Quaternionf, $Quaternionf$Type} from "packages/org/joml/$Quaternionf"

export class $ItemPositionData {
static readonly "EMPTY": $ItemPositionData

constructor(...arg0: ($ItemPositionData$PositionEntry$Type)[])
constructor(arg0: $List$Type<($ItemPositionData$PositionEntry$Type)>)

public "isEmpty"(): boolean
public static "parse"(arg0: $JsonObject$Type): $ItemPositionData
public "getRotation"(arg0: $BlockState$Type, arg1: integer, arg2: float): $List<($Quaternionf)>
public "getScale"(arg0: integer): float
public "getEntryCount"(): integer
public "getPositions"(arg0: $BlockState$Type, arg1: integer): $List<($Vector3f)>
get "empty"(): boolean
get "entryCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemPositionData$Type = ($ItemPositionData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemPositionData_ = $ItemPositionData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$TaxCollectorBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IOwnableBlock, $IOwnableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IOwnableBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IEasyEntityBlock, $IEasyEntityBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IEasyEntityBlock"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$RotatableBlock, $RotatableBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$RotatableBlock"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $TaxCollectorBlock extends $RotatableBlock implements $IOwnableBlock, $IEasyEntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "playerWillDestroy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getAllowedTypes"(): $Collection<($BlockEntityType<(any)>)>
public "canBreak"(arg0: $Player$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
get "allowedTypes"(): $Collection<($BlockEntityType<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxCollectorBlock$Type = ($TaxCollectorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxCollectorBlock_ = $TaxCollectorBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/containers/$SuppliedItemContainer$IItemInteractable" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $SuppliedItemContainer$IItemInteractable {

 "getItem"(): $ItemStack
 "setItem"(arg0: $ItemStack$Type): void
}

export namespace $SuppliedItemContainer$IItemInteractable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppliedItemContainer$IItemInteractable$Type = ($SuppliedItemContainer$IItemInteractable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppliedItemContainer$IItemInteractable_ = $SuppliedItemContainer$IItemInteractable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/$TaxableNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TaxableNotification extends $Notification {


public "getMessage"(): $MutableComponent
get "message"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxableNotification$Type = ($TaxableNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxableNotification_ = $TaxableNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/ejection/$OwnableBlockEjectedNotification" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $OwnableBlockEjectedNotification extends $Notification {
static readonly "TYPE": $NotificationType<($OwnableBlockEjectedNotification)>

constructor(arg0: $Component$Type)

public "getMessage"(): $MutableComponent
public static "create"(arg0: $Component$Type): $NonNullSupplier<($Notification)>
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OwnableBlockEjectedNotification$Type = ($OwnableBlockEjectedNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OwnableBlockEjectedNotification_ = $OwnableBlockEjectedNotification$Type;
}}
declare module "packages/io/github/steveplays28/noisium/mixin/$NoisiumMixinPlugin" {
import {$IMixinInfo, $IMixinInfo$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinInfo"
import {$ClassNode, $ClassNode$Type} from "packages/org/objectweb/asm/tree/$ClassNode"
import {$IMixinConfigPlugin, $IMixinConfigPlugin$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinConfigPlugin"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"

export class $NoisiumMixinPlugin implements $IMixinConfigPlugin {

constructor()

public "onLoad"(mixinPackage: string): void
public "postApply"(targetClassName: string, targetClass: $ClassNode$Type, mixinClassName: string, mixinInfo: $IMixinInfo$Type): void
public "getMixins"(): $List<(string)>
public "getRefMapperConfig"(): string
public "shouldApplyMixin"(targetClassName: string, mixinClassName: string): boolean
public "preApply"(targetClassName: string, targetClass: $ClassNode$Type, mixinClassName: string, mixinInfo: $IMixinInfo$Type): void
public "acceptTargets"(myTargets: $Set$Type<(string)>, otherTargets: $Set$Type<(string)>): void
get "mixins"(): $List<(string)>
get "refMapperConfig"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoisiumMixinPlugin$Type = ($NoisiumMixinPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoisiumMixinPlugin_ = $NoisiumMixinPlugin$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/blocks/$PaygateBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$TraderBlockRotatable, $TraderBlockRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockRotatable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $PaygateBlock extends $TraderBlockRotatable {
static readonly "POWERED": $BooleanProperty
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockBehaviour$Properties$Type)

public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "isSignalSource"(arg0: $BlockState$Type): boolean
public "getSignal"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaygateBlock$Type = ($PaygateBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaygateBlock_ = $PaygateBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/config/$SPacketEditListConfig" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketEditListConfig extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketEditListConfig)>

constructor(arg0: string, arg1: string, arg2: string, arg3: integer, arg4: boolean)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketEditListConfig$Type = ($SPacketEditListConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketEditListConfig_ = $SPacketEditListConfig$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/taxes/$TaxesCollectedNotification" {
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$TaxEntryCategory, $TaxEntryCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/common/notifications/categories/$TaxEntryCategory"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $TaxesCollectedNotification extends $Notification {
static readonly "TYPE": $NotificationType<($TaxesCollectedNotification)>


public "getMessage"(): $MutableComponent
public static "create"(arg0: $MutableComponent$Type, arg1: $MoneyValue$Type, arg2: $TaxEntryCategory$Type): $NonNullSupplier<($Notification)>
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxesCollectedNotification$Type = ($TaxesCollectedNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxesCollectedNotification_ = $TaxesCollectedNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$DisplaySlot" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SimpleSlot, $SimpleSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$SimpleSlot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $DisplaySlot extends $SimpleSlot {
 "active": boolean
 "locked": boolean
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer)

public "mayPlace"(arg0: $ItemStack$Type): boolean
public "mayPickup"(arg0: $Player$Type): boolean
public "set"(arg0: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplaySlot$Type = ($DisplaySlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplaySlot_ = $DisplaySlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$LongOption" {
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $LongOption extends $ConfigOption<(long)> {


public static "create"(arg0: long): $LongOption
public static "create"(arg0: long, arg1: long): $LongOption
public static "create"(arg0: $NonNullSupplier$Type<(long)>, arg1: long): $LongOption
public static "create"(arg0: $NonNullSupplier$Type<(long)>): $LongOption
public static "create"(arg0: $NonNullSupplier$Type<(long)>, arg1: long, arg2: long): $LongOption
public static "create"(arg0: long, arg1: long, arg2: long): $LongOption
public static "makeParser"(arg0: long, arg1: long): $ConfigParser<(long)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongOption$Type = ($LongOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongOption_ = $LongOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$SlotMachineMenu" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IMoneyCollectionMenu, $IMoneyCollectionMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/$IMoneyCollectionMenu"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"
import {$SlotMachineTraderData, $SlotMachineTraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/slot_machine/$SlotMachineTraderData"
import {$SlotMachineMenu$RewardCache, $SlotMachineMenu$RewardCache$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$SlotMachineMenu$RewardCache"
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$IValidatedMenu, $IValidatedMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$IValidatedMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $SlotMachineMenu extends $LazyMessageMenu implements $IValidatedMenu, $IMoneyCollectionMenu {
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: long, arg3: $MenuValidator$Type)

public "getContext"(): $TradeContext
public "getContext"(arg0: $SlotMachineMenu$RewardCache$Type): $TradeContext
public "getValidator"(): $MenuValidator
public "getNextReward"(): $SlotMachineMenu$RewardCache
public "hasPendingReward"(): boolean
public "clearContainer"(arg0: $Container$Type): void
public "GiveNextReward"(): boolean
public "loadReward"(arg0: $CompoundTag$Type): $SlotMachineMenu$RewardCache
public "getTrader"(): $SlotMachineTraderData
public "getAndRemoveNextReward"(): $SlotMachineMenu$RewardCache
public "removed"(arg0: $Player$Type): void
public "CollectStoredMoney"(): void
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
get "context"(): $TradeContext
get "validator"(): $MenuValidator
get "nextReward"(): $SlotMachineMenu$RewardCache
get "trader"(): $SlotMachineTraderData
get "andRemoveNextReward"(): $SlotMachineMenu$RewardCache
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachineMenu$Type = ($SlotMachineMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachineMenu_ = $SlotMachineMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/item/$ItemTradeEditClientTab" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$IMouseListener, $IMouseListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$ItemTradeData, $ItemTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/item/tradedata/$ItemTradeData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$TradeData, $TradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/trade/$TradeData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$ItemTradeEditTab, $ItemTradeEditTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/item/$ItemTradeEditTab"
import {$TradeButtonArea$InteractionConsumer, $TradeButtonArea$InteractionConsumer$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$TradeButtonArea$InteractionConsumer"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$ItemEditWidget$IItemEditListener, $ItemEditWidget$IItemEditListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$ItemEditWidget$IItemEditListener"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $ItemTradeEditClientTab extends $TraderStorageClientTab<($ItemTradeEditTab)> implements $TradeButtonArea$InteractionConsumer, $ItemEditWidget$IItemEditListener, $IMouseListener {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $ItemTradeEditTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "closeAction"(): void
public "blockInventoryClosing"(): boolean
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "onValueChanged"(arg0: $MoneyValue$Type): void
public "onItemClicked"(arg0: $ItemStack$Type): void
public "getTrade"(): $ItemTradeData
public "getTradeRuleTradeIndex"(): integer
public "restrictItemEditItems"(): boolean
public "tabButtonVisible"(): boolean
public "receiveSelfMessage"(arg0: $LazyPacketData$Type): void
public "onTradeButtonInputInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer): void
public "onTradeButtonInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer, arg4: integer): void
public "onTradeButtonOutputInteraction"(arg0: $TraderData$Type, arg1: $TradeData$Type, arg2: integer, arg3: integer): void
public "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
get "icon"(): $IconData
get "trade"(): $ItemTradeData
get "tradeRuleTradeIndex"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTradeEditClientTab$Type = ($ItemTradeEditClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTradeEditClientTab_ = $ItemTradeEditClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$IUpgradeItem, $IUpgradeItem$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$IUpgradeItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IUpgradeable, $IUpgradeable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$IUpgradeable"
import {$UpgradeType, $UpgradeType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UpgradeItem extends $Item implements $IUpgradeItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $UpgradeType$Type, arg1: $Item$Properties$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "getUpgradeData"(arg0: $ItemStack$Type): $UpgradeData
public "getUpgradeType"(): $UpgradeType
public "getDefaultUpgradeData"(): $UpgradeData
public "addsTooltips"(): boolean
public static "setUpgradeData"(arg0: $ItemStack$Type, arg1: $UpgradeData$Type): void
public static "getUpgradeTooltip"(arg0: $ItemStack$Type, arg1: boolean): $List<($Component)>
public static "getUpgradeTooltip"(arg0: $ItemStack$Type): $List<($Component)>
public "onApplied"(arg0: $IUpgradeable$Type): void
get "upgradeType"(): $UpgradeType
get "defaultUpgradeData"(): $UpgradeData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpgradeItem$Type = ($UpgradeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpgradeItem_ = $UpgradeItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/menu/$CPacketLazyMenu" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketLazyMenu extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketLazyMenu)>

constructor(arg0: $LazyPacketData$Type)
constructor(arg0: $LazyPacketData$Builder$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketLazyMenu$Type = ($CPacketLazyMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketLazyMenu_ = $CPacketLazyMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$ItemOption" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $ItemOption extends $ConfigOption<($Item)> {
static readonly "PARSER": $ConfigParser<($Item)>
static readonly "PARSER_NO_AIR": $ConfigParser<($Item)>


public static "create"(arg0: $NonNullSupplier$Type<($Item$Type)>): $ItemOption
public static "create"(arg0: $NonNullSupplier$Type<($Item$Type)>, arg1: boolean): $ItemOption
public static "create"(arg0: $RegistryObject$Type<(any)>): $ItemOption
public static "create"(arg0: $RegistryObject$Type<(any)>, arg1: boolean): $ItemOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemOption$Type = ($ItemOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemOption_ = $ItemOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/builtin/$TeamOwnerProvider" {
import {$IPotentialOwnerProvider, $IPotentialOwnerProvider$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$IPotentialOwnerProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PotentialOwner, $PotentialOwner$Type} from "packages/io/github/lightman314/lightmanscurrency/api/ownership/listing/$PotentialOwner"
import {$List, $List$Type} from "packages/java/util/$List"

export class $TeamOwnerProvider implements $IPotentialOwnerProvider {
static readonly "INSTANCE": $IPotentialOwnerProvider


public "collectPotentialOwners"(arg0: $Player$Type): $List<($PotentialOwner)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamOwnerProvider$Type = ($TeamOwnerProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamOwnerProvider_ = $TeamOwnerProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/bank/source/$BankAccountSource" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"

export class $BankAccountSource {

constructor()

public "CollectAllReferences"(arg0: boolean): $List<($BankReference)>
public "CollectAllBankAccounts"(arg0: boolean): $List<($IBankAccount)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankAccountSource$Type = ($BankAccountSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankAccountSource_ = $BankAccountSource$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/containers/$CoinContainer" {
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CoinContainer extends $SimpleContainer {

constructor(arg0: $Container$Type, arg1: boolean)
constructor(arg0: $Container$Type)
constructor(arg0: integer, arg1: boolean)
constructor(arg0: integer)

public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinContainer$Type = ($CoinContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinContainer_ = $CoinContainer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/walletbank/$SelectionTab" {
import {$WalletBankScreen, $WalletBankScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$WalletBankScreen"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$WalletBankTab, $WalletBankTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/walletbank/$WalletBankTab"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $SelectionTab extends $WalletBankTab {

constructor(arg0: $WalletBankScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "getIcon"(): $IconData
public "renderAfterWidgets"(arg0: $EasyGuiGraphics$Type): void
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "SelectTeam"(arg0: integer): void
public "selectedTeam"(): $Team
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectionTab$Type = ($SelectionTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectionTab_ = $SelectionTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/villager_merchant/$ItemListingSerializer$IItemListingSerializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ItemListingSerializer$IItemListingSerializer {

 "getType"(): $ResourceLocation
 "serialize"(arg0: $VillagerTrades$ItemListing$Type): $JsonObject
 "serializeInternal"(arg0: $JsonObject$Type, arg1: $VillagerTrades$ItemListing$Type): $JsonObject
}

export namespace $ItemListingSerializer$IItemListingSerializer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemListingSerializer$IItemListingSerializer$Type = ($ItemListingSerializer$IItemListingSerializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemListingSerializer$IItemListingSerializer_ = $ItemListingSerializer$IItemListingSerializer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/util/$WoodData" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"

export class $WoodData {
readonly "logSideTexture": $ResourceLocation
readonly "logTopTexture": $ResourceLocation
readonly "plankTexture": $ResourceLocation


public static "of"(arg0: $ItemLike$Type, arg1: $ItemLike$Type, arg2: $ItemLike$Type, arg3: string, arg4: string, arg5: string): $WoodData
public static "of"(arg0: $ItemLike$Type, arg1: $ItemLike$Type, arg2: $ItemLike$Type, arg3: $ResourceLocation$Type, arg4: $ResourceLocation$Type, arg5: $ResourceLocation$Type): $WoodData
public static "of1"(arg0: $Supplier$Type<($RegistryObject$Type<(any)>)>, arg1: $Supplier$Type<($RegistryObject$Type<(any)>)>, arg2: $Supplier$Type<($RegistryObject$Type<(any)>)>, arg3: string, arg4: string, arg5: string): $WoodData
public static "of1"(arg0: $Supplier$Type<($RegistryObject$Type<(any)>)>, arg1: $Supplier$Type<($RegistryObject$Type<(any)>)>, arg2: $Supplier$Type<($RegistryObject$Type<(any)>)>, arg3: $ResourceLocation$Type, arg4: $ResourceLocation$Type, arg5: $ResourceLocation$Type): $WoodData
public static "of2"(arg0: $Supplier$Type<(any)>, arg1: $Supplier$Type<(any)>, arg2: $Supplier$Type<(any)>, arg3: $ResourceLocation$Type, arg4: $ResourceLocation$Type, arg5: $ResourceLocation$Type): $WoodData
public static "of2"(arg0: $Supplier$Type<(any)>, arg1: $Supplier$Type<(any)>, arg2: $Supplier$Type<(any)>, arg3: string, arg4: string, arg5: string): $WoodData
public "getSlab"(): $Item
public "getLog"(): $Item
public "getPlank"(): $Item
get "slab"(): $Item
get "log"(): $Item
get "plank"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodData$Type = ($WoodData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodData_ = $WoodData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/items/$SpeedUpgradeItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UpgradeData, $UpgradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/upgrades/$UpgradeData"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$UpgradeItem, $UpgradeItem$Type} from "packages/io/github/lightman314/lightmanscurrency/common/items/$UpgradeItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SpeedUpgradeItem extends $UpgradeItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: integer, arg1: $Item$Properties$Type)

public "fillUpgradeData"(arg0: $UpgradeData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpeedUpgradeItem$Type = ($SpeedUpgradeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpeedUpgradeItem_ = $SpeedUpgradeItem$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/enchantments/$EnchantmentEvents" {
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"

export class $EnchantmentEvents {


public static "onServerTick"(arg0: $TickEvent$ServerTickEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentEvents$Type = ($EnchantmentEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentEvents_ = $EnchantmentEvents$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderInterfaceMenu" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$TraderInterfaceTab, $TraderInterfaceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/menu/$TraderInterfaceTab"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TraderInterfaceBlockEntity, $TraderInterfaceBlockEntity$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity"
import {$TraderInterfaceBlockEntity$ActiveMode, $TraderInterfaceBlockEntity$ActiveMode$Type} from "packages/io/github/lightman314/lightmanscurrency/api/trader_interface/blockentity/$TraderInterfaceBlockEntity$ActiveMode"
import {$LazyMessageMenu, $LazyMessageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$LazyMessageMenu"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TraderInterfaceMenu extends $LazyMessageMenu {
static readonly "SLOT_OFFSET": integer
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $TraderInterfaceBlockEntity$Type)

/**
 * 
 * @deprecated
 */
public "sendMessage"(arg0: $CompoundTag$Type): void
public "getAllTabs"(): $Map<(integer), ($TraderInterfaceTab)>
public "getCurrentTab"(): $TraderInterfaceTab
public "getCurrentTabIndex"(): integer
public "setTab"(arg0: integer, arg1: $TraderInterfaceTab$Type): void
public "changeMode"(arg0: $TraderInterfaceBlockEntity$ActiveMode$Type): void
public "createTabChangeMessage"(arg0: integer, arg1: $CompoundTag$Type): $CompoundTag
public "removed"(arg0: $Player$Type): void
public "setOnlineMode"(arg0: boolean): void
public "getTradeContext"(): $TradeContext
public "changeTab"(arg0: integer): void
public "getBE"(): $TraderInterfaceBlockEntity
public "HandleMessage"(arg0: $LazyPacketData$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
get "allTabs"(): $Map<(integer), ($TraderInterfaceTab)>
get "currentTab"(): $TraderInterfaceTab
get "currentTabIndex"(): integer
set "onlineMode"(value: boolean)
get "tradeContext"(): $TradeContext
get "bE"(): $TraderInterfaceBlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderInterfaceMenu$Type = ($TraderInterfaceMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderInterfaceMenu_ = $TraderInterfaceMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/datagen/common/loot/$LCLootTableProvider" {
import {$PackOutput, $PackOutput$Type} from "packages/net/minecraft/data/$PackOutput"
import {$LootTableProvider, $LootTableProvider$Type} from "packages/net/minecraft/data/loot/$LootTableProvider"

export class $LCLootTableProvider {

constructor()

public static "create"(arg0: $PackOutput$Type): $LootTableProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCLootTableProvider$Type = ($LCLootTableProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCLootTableProvider_ = $LCLootTableProvider$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$TradeIDArgument" {
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$ArgumentType, $ArgumentType$Type} from "packages/com/mojang/brigadier/arguments/$ArgumentType"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $TradeIDArgument implements $ArgumentType<(integer)> {


public static "argument"(): $TradeIDArgument
public "listSuggestions"<S>(arg0: $CommandContext$Type<(S)>, arg1: $SuggestionsBuilder$Type): $CompletableFuture<($Suggestions)>
public static "getTradeID"(arg0: $CommandContext$Type<($CommandSourceStack$Type)>, arg1: string): integer
public "getExamples"(): $Collection<(string)>
get "examples"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TradeIDArgument$Type = ($TradeIDArgument);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TradeIDArgument_ = $TradeIDArgument$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxableReference" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ITaxable, $ITaxable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/$ITaxable"
import {$TaxReferenceType, $TaxReferenceType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/taxes/reference/$TaxReferenceType"

export class $TaxableReference {
readonly "type": $TaxReferenceType


public "equals"(arg0: any): boolean
public static "load"(arg0: $CompoundTag$Type): $TaxableReference
public "save"(): $CompoundTag
public "getTaxable"(arg0: boolean): $ITaxable
public "stillValid"(arg0: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxableReference$Type = ($TaxableReference);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxableReference_ = $TaxableReference$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe" {
import {$InputReplacement, $InputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$InputReplacement"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSchema, $RecipeSchema$Type} from "packages/dev/latvian/mods/kubejs/recipe/schema/$RecipeSchema"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$CoinMintRecipe$MintType, $CoinMintRecipe$MintType$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe$MintType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ReplacementMatch, $ReplacementMatch$Type} from "packages/dev/latvian/mods/kubejs/recipe/$ReplacementMatch"
import {$OutputReplacement, $OutputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$OutputReplacement"

export class $CoinMintRecipe implements $Recipe<($Container)> {
readonly "ingredientCount": integer

constructor(arg0: $ResourceLocation$Type, arg1: $CoinMintRecipe$MintType$Type, arg2: integer, arg3: $Ingredient$Type, arg4: integer, arg5: $ItemStack$Type)

public "getDuration"(): integer
public "isValid"(): boolean
public "allowed"(): boolean
public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "getIngredient"(): $Ingredient
public "getInternalDuration"(): integer
public static "readType"(arg0: string): $CoinMintRecipe$MintType
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(arg0: $Container$Type, arg1: $RegistryAccess$Type): $ItemStack
public "getMintType"(): $CoinMintRecipe$MintType
public "getOutputItem"(): $ItemStack
public "getId"(): $ResourceLocation
public "matches"(arg0: $Container$Type, arg1: $Level$Type): boolean
public "getRemainingItems"(arg0: $Container$Type): $NonNullList<($ItemStack)>
public "getIngredients"(): $NonNullList<($Ingredient)>
public "getToastSymbol"(): $ItemStack
public "isIncomplete"(): boolean
public "showNotification"(): boolean
public "isSpecial"(): boolean
public "getType"(): $ResourceLocation
public "replaceOutput"(match: $ReplacementMatch$Type, arg1: $OutputReplacement$Type): boolean
public "setGroup"(group: string): void
public "hasInput"(match: $ReplacementMatch$Type): boolean
public "getOrCreateId"(): $ResourceLocation
public "getSchema"(): $RecipeSchema
public "replaceInput"(match: $ReplacementMatch$Type, arg1: $InputReplacement$Type): boolean
public "hasOutput"(match: $ReplacementMatch$Type): boolean
public "getGroup"(): string
public "getMod"(): string
get "duration"(): integer
get "valid"(): boolean
get "ingredient"(): $Ingredient
get "internalDuration"(): integer
get "serializer"(): $RecipeSerializer<(any)>
get "mintType"(): $CoinMintRecipe$MintType
get "outputItem"(): $ItemStack
get "id"(): $ResourceLocation
get "ingredients"(): $NonNullList<($Ingredient)>
get "toastSymbol"(): $ItemStack
get "incomplete"(): boolean
get "special"(): boolean
get "type"(): $ResourceLocation
set "group"(value: string)
get "orCreateId"(): $ResourceLocation
get "schema"(): $RecipeSchema
get "group"(): string
get "mod"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinMintRecipe$Type = ($CoinMintRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinMintRecipe_ = $CoinMintRecipe$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$TraderStorageScreen" {
import {$TraderStorageMenu, $TraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderStorageMenu"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EasyMenuScreen, $EasyMenuScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyMenuScreen"
import {$LazyWidgetPositioner, $LazyWidgetPositioner$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/util/$LazyWidgetPositioner"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$LazyPacketData$Builder, $LazyPacketData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData$Builder"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"

export class $TraderStorageScreen extends $EasyMenuScreen<($TraderStorageMenu)> implements $ITraderStorageScreen {
readonly "leftEdgePositioner": $LazyWidgetPositioner
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $TraderStorageMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "initialize"(arg0: $ScreenArea$Type): void
public "blockInventoryClosing"(): boolean
public "screenTick"(): void
public "currentTab"(): $TraderStorageClientTab<(any)>
public "changeTab"(arg0: integer): void
public "changeTab"(arg0: integer, arg1: boolean, arg2: $LazyPacketData$Builder$Type): void
public "serverMessage"(arg0: $LazyPacketData$Type): void
public "selfMessage"(arg0: $LazyPacketData$Builder$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderStorageScreen$Type = ($TraderStorageScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderStorageScreen_ = $TraderStorageScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$WidgetAddon" {
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"

export class $WidgetAddon {

constructor()

public "attach"(arg0: $EasyWidget$Type): void
public "renderTick"(): void
public "visibleTick"(): void
public "activeTick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetAddon$Type = ($WidgetAddon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetAddon_ = $WidgetAddon$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/notifications/types/bank/$BankTransferNotification" {
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$NotificationType, $NotificationType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationType"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $BankTransferNotification extends $Notification {
static readonly "TYPE": $NotificationType<($BankTransferNotification)>

constructor(arg0: $PlayerReference$Type, arg1: $MoneyValue$Type, arg2: $MutableComponent$Type, arg3: $MutableComponent$Type, arg4: boolean)

public "getMessage"(): $MutableComponent
public "getCategory"(): $NotificationCategory
get "message"(): $MutableComponent
get "category"(): $NotificationCategory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BankTransferNotification$Type = ($BankTransferNotification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BankTransferNotification_ = $BankTransferNotification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$NotificationScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$EasyScreen, $EasyScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IScrollable, $IScrollable$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/scroll/$IScrollable"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$NotificationData, $NotificationData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationData"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$EasyButton, $EasyButton$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyButton"

export class $NotificationScreen extends $EasyScreen implements $IScrollable {
static readonly "GUI_TEXTURE": $ResourceLocation
readonly "TABS_PER_PAGE": integer
readonly "NOTIFICATIONS_PER_PAGE": integer
readonly "NOTIFICATION_HEIGHT": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor()

public "getNotifications"(): $NotificationData
public "notificationScrolled"(arg0: double): boolean
public "getMaxNotificationScroll"(): integer
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "getCategories"(): $List<($NotificationCategory)>
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "markAsRead"(arg0: $EasyButton$Type): void
public "currentScroll"(): integer
public "getMaxScroll"(): integer
public "tabScrolled"(arg0: double): boolean
public "getMaxTabScroll"(): integer
public "setScroll"(arg0: integer): void
public "reinit"(): void
public "getMinScroll"(): integer
public "handleScrollWheel"(arg0: double): boolean
public static "calculateMaxScroll"(arg0: integer, arg1: integer): integer
public static "calculateMaxScroll"(arg0: integer, arg1: integer, arg2: integer): integer
public "validateScroll"(): void
get "notifications"(): $NotificationData
get "maxNotificationScroll"(): integer
get "categories"(): $List<($NotificationCategory)>
get "maxScroll"(): integer
get "maxTabScroll"(): integer
set "scroll"(value: integer)
get "minScroll"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationScreen$Type = ($NotificationScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationScreen_ = $NotificationScreen$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IWideBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IWideBlock {

 "getIsLeft"(arg0: $BlockState$Type): boolean
 "getIsRight"(arg0: $BlockState$Type): boolean
 "getOtherSide"(arg0: $BlockPos$Type, arg1: $BlockState$Type, arg2: $Direction$Type): $BlockPos
}

export namespace $IWideBlock {
const ISLEFT: $BooleanProperty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IWideBlock$Type = ($IWideBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IWideBlock_ = $IWideBlock$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/mixin/$LCMixinPlugin" {
import {$IMixinInfo, $IMixinInfo$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinInfo"
import {$ClassNode, $ClassNode$Type} from "packages/org/objectweb/asm/tree/$ClassNode"
import {$IMixinConfigPlugin, $IMixinConfigPlugin$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinConfigPlugin"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"

export class $LCMixinPlugin implements $IMixinConfigPlugin {

constructor()

public "onLoad"(arg0: string): void
public "postApply"(arg0: string, arg1: $ClassNode$Type, arg2: string, arg3: $IMixinInfo$Type): void
public "getMixins"(): $List<(string)>
public "getRefMapperConfig"(): string
public "shouldApplyMixin"(arg0: string, arg1: string): boolean
public "preApply"(arg0: string, arg1: $ClassNode$Type, arg2: string, arg3: $IMixinInfo$Type): void
public "acceptTargets"(arg0: $Set$Type<(string)>, arg1: $Set$Type<(string)>): void
get "mixins"(): $List<(string)>
get "refMapperConfig"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCMixinPlugin$Type = ($LCMixinPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCMixinPlugin_ = $LCMixinPlugin$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/renderer/$TaxBlockRenderer" {
import {$RenderLevelStageEvent, $RenderLevelStageEvent$Type} from "packages/net/minecraftforge/client/event/$RenderLevelStageEvent"

export class $TaxBlockRenderer {

constructor()

public static "onLevelRender"(arg0: $RenderLevelStageEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaxBlockRenderer$Type = ($TaxBlockRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaxBlockRenderer_ = $TaxBlockRenderer$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValue" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DisplayEntry, $DisplayEntry$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/trade/$DisplayEntry"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$OwnerData, $OwnerData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$OwnerData"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$CoinValuePair, $CoinValuePair$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/builtin/$CoinValuePair"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ChainData, $ChainData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$ChainData"

export class $CoinValue extends $MoneyValue {
readonly "coinValues": $ImmutableList<($CoinValuePair)>


public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "isEmpty"(): boolean
public "containsValue"(arg0: $MoneyValue$Type): boolean
public static "create"(arg0: string, arg1: $List$Type<($CoinValuePair$Type)>): $MoneyValue
public "getEntries"(): $List<($CoinValuePair)>
public "isInvalid"(): boolean
public "getEntry"(arg0: $Item$Type): long
public "getText"(arg0: $MutableComponent$Type): $MutableComponent
public "isValid"(): boolean
public "addValue"(arg0: $MoneyValue$Type): $MoneyValue
public "getAsItemList"(): $List<($ItemStack)>
public "getCoreValue"(): long
public static "fromNumber"(arg0: string, arg1: long): $MoneyValue
public static "fromNumber"(arg0: $ChainData$Type, arg1: long): $MoneyValue
public "getAsSeperatedItemList"(): $List<($ItemStack)>
public "saveAdditional"(arg0: $CompoundTag$Type): void
public "getChain"(): string
public static "loadCoinValue"(arg0: $JsonObject$Type): $MoneyValue
public static "loadCoinValue"(arg0: $CompoundTag$Type): $MoneyValue
public "getDisplayEntry"(arg0: $List$Type<($Component$Type)>, arg1: boolean): $DisplayEntry
public static "loadDeprecated"(arg0: $CompoundTag$Type, arg1: string): $MoneyValue
public static "loadDeprecated"(arg0: $JsonElement$Type): $MoneyValue
public static "loadDeprecated"(arg0: $CompoundTag$Type): $MoneyValue
public "percentageOfValue"(arg0: integer, arg1: boolean): $MoneyValue
public "subtractValue"(arg0: $MoneyValue$Type): $MoneyValue
public "multiplyValue"(arg0: double): $MoneyValue
public "onBlockBroken"(arg0: $Level$Type, arg1: $OwnerData$Type): $List<($ItemStack)>
public "getSmallestValue"(): $MoneyValue
public static "fromItemOrValue"(arg0: $Item$Type, arg1: long): $MoneyValue
public static "fromItemOrValue"(arg0: $Item$Type, arg1: integer, arg2: long): $MoneyValue
get "empty"(): boolean
get "entries"(): $List<($CoinValuePair)>
get "invalid"(): boolean
get "valid"(): boolean
get "asItemList"(): $List<($ItemStack)>
get "coreValue"(): long
get "asSeperatedItemList"(): $List<($ItemStack)>
get "chain"(): string
get "smallestValue"(): $MoneyValue
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinValue$Type = ($CoinValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinValue_ = $CoinValue$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$NotificationCategory, $NotificationCategory$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationCategory"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $Notification implements $IClientTracker {


public "load"(arg0: $CompoundTag$Type): void
public "getMessage"(): $MutableComponent
public "save"(): $CompoundTag
public "getCount"(): integer
public "getTimeStampMessage"(): $Component
public "getCategory"(): $NotificationCategory
public "isClient"(): boolean
public "getChatMessage"(): $MutableComponent
public "onNewNotification"(arg0: $Notification$Type): boolean
public "flagAsClient"(): void
public "setSeen"(): void
public "getTimeStamp"(): long
public "hasTimeStamp"(): boolean
public "getGeneralMessage"(): $MutableComponent
public "wasSeen"(): boolean
public "isServer"(): boolean
get "message"(): $MutableComponent
get "count"(): integer
get "timeStampMessage"(): $Component
get "category"(): $NotificationCategory
get "client"(): boolean
get "chatMessage"(): $MutableComponent
get "timeStamp"(): long
get "generalMessage"(): $MutableComponent
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Notification$Type = ($Notification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Notification_ = $Notification$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/capability/event_unlocks/$IEventUnlocks" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"

export interface $IEventUnlocks {

 "lock"(arg0: string): void
 "load"(arg0: $CompoundTag$Type): void
 "clean"(): void
 "save"(): $CompoundTag
 "sync"(arg0: $List$Type<(string)>): void
 "unlock"(arg0: string): void
 "isDirty"(): boolean
 "isUnlocked"(arg0: string): boolean
 "getUnlockedList"(): $List<(string)>
}

export namespace $IEventUnlocks {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IEventUnlocks$Type = ($IEventUnlocks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IEventUnlocks_ = $IEventUnlocks$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/slot_machine/$SlotMachinePriceClientTab" {
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$SlotMachinePriceTab, $SlotMachinePriceTab$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/slot_machine/$SlotMachinePriceTab"
import {$TraderStorageClientTab, $TraderStorageClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageClientTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ITraderStorageScreen, $ITraderStorageScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageScreen"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $SlotMachinePriceClientTab extends $TraderStorageClientTab<($SlotMachinePriceTab)> {
readonly "screen": $ITraderStorageScreen
readonly "menu": $ITraderStorageMenu
readonly "commonTab": T

constructor(arg0: any, arg1: $SlotMachinePriceTab$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotMachinePriceClientTab$Type = ($SlotMachinePriceClientTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotMachinePriceClientTab_ = $SlotMachinePriceClientTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/dropdown/$DropdownButton" {
import {$IMouseListener, $IMouseListener$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$IMouseListener"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ILateRender, $ILateRender$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ILateRender"
import {$EasyWidget, $EasyWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/easy/$EasyWidget"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $DropdownButton extends $EasyWidget implements $ILateRender, $IMouseListener {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: $Component$Type, arg4: $Runnable$Type)

public "renderWidget"(arg0: $EasyGuiGraphics$Type): void
public "onMouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "lateRender"(arg0: $EasyGuiGraphics$Type): void
public "onMouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DropdownButton$Type = ($DropdownButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DropdownButton_ = $DropdownButton$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$EjectionData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IDumpable, $IDumpable$Type} from "packages/io/github/lightman314/lightmanscurrency/common/emergency_ejection/$IDumpable"

export class $EjectionData implements $Container, $IClientTracker {


public "load"(arg0: $CompoundTag$Type): void
public "save"(): $CompoundTag
public "canAccess"(arg0: $Player$Type): boolean
public static "create"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $IDumpable$Type, arg4: boolean): $EjectionData
public static "create"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $IDumpable$Type): $EjectionData
public "setChanged"(): void
public "isClient"(): boolean
public "pushNotificationToOwner"(): void
public "getTraderName"(): $MutableComponent
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public static "loadData"(arg0: $CompoundTag$Type): $EjectionData
public "flagAsClient"(): void
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "stillValid"(arg0: $Player$Type): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public "isServer"(): boolean
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "client"(): boolean
get "traderName"(): $MutableComponent
get "containerSize"(): integer
get "empty"(): boolean
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "server"(): boolean
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EjectionData$Type = ($EjectionData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EjectionData_ = $EjectionData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/data/bank/$SPacketSyncSelectedBankAccount" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$BankReference, $BankReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/reference/$BankReference"

export class $SPacketSyncSelectedBankAccount extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncSelectedBankAccount)>

constructor(arg0: $BankReference$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncSelectedBankAccount$Type = ($SPacketSyncSelectedBankAccount);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncSelectedBankAccount_ = $SPacketSyncSelectedBankAccount$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyStorage" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MoneyHolder, $MoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$MoneyHolder"
import {$MoneyView, $MoneyView$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyView"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $MoneyStorage extends $MoneyHolder {
static readonly "EMPTY": $IMoneyHolder

constructor(arg0: $Runnable$Type)
constructor(arg0: $Runnable$Type, arg1: integer)

public "priority"(): integer
public "load"(arg0: $ListTag$Type): void
public "valueOf"(arg0: string): $MoneyValue
public "clear"(): void
public "isEmpty"(): boolean
public "containsValue"(arg0: $MoneyValue$Type): boolean
public "save"(): $ListTag
public "addValue"(arg0: $MoneyValue$Type): void
public "getRandomValueText"(arg0: string): $Component
public "getRandomValueText"(): $Component
public "getRandomValueText"(arg0: $Component$Type): $Component
public "capValue"(arg0: $MoneyValue$Type): $MoneyValue
public "extractMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "getTooltipTitle"(): $Component
public "insertMoney"(arg0: $MoneyValue$Type, arg1: boolean): $MoneyValue
public "isMoneyTypeValid"(arg0: $MoneyValue$Type): boolean
public "GiveToPlayer"(arg0: $Player$Type): void
public "safeLoad"(arg0: $CompoundTag$Type, arg1: string): void
public "addValues"(arg0: $Collection$Type<($MoneyValue$Type)>): void
public "hasStoredMoneyChanged"(): boolean
public "getAllValueText"(): $Component
public "removeValue"(arg0: $MoneyValue$Type): void
public "allValues"(): $List<($MoneyValue)>
public static "sortPayFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "sortTakeFirst"(arg0: $List$Type<($IMoneyHolder$Type)>): void
public static "defaultTooltipFormat"(arg0: $List$Type<($Component$Type)>, arg1: $Component$Type, arg2: $MoneyView$Type): void
get "empty"(): boolean
get "randomValueText"(): $Component
get "tooltipTitle"(): $Component
get "allValueText"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyStorage$Type = ($MoneyStorage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyStorage_ = $MoneyStorage$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamMemberListTab" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$Team, $Team$Type} from "packages/io/github/lightman314/lightmanscurrency/common/teams/$Team"
import {$TeamTab, $TeamTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/team/$TeamTab"
import {$TeamManagerScreen, $TeamManagerScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/$TeamManagerScreen"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $TeamMemberListTab extends $TeamTab {

constructor(arg0: $TeamManagerScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "getIcon"(): $IconData
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "allowViewing"(arg0: $Player$Type, arg1: $Team$Type): boolean
get "icon"(): $IconData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamMemberListTab$Type = ($TeamMemberListTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamMemberListTab_ = $TeamMemberListTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/crafting/$RecipeValidator" {
import {$TicketStationRecipe, $TicketStationRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$TicketStationRecipe"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CoinMintRecipe, $CoinMintRecipe$Type} from "packages/io/github/lightman314/lightmanscurrency/common/crafting/$CoinMintRecipe"

export class $RecipeValidator {

constructor()

public static "getValidTicketStationRecipes"(arg0: $Level$Type): $List<($TicketStationRecipe)>
public static "getAllMintRecipes"(arg0: $Level$Type): $List<($CoinMintRecipe)>
public static "getValidMintRecipes"(arg0: $Level$Type): $List<($CoinMintRecipe)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeValidator$Type = ($RecipeValidator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeValidator_ = $RecipeValidator$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/interfaces/$ILateRender" {
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"

export interface $ILateRender {

 "lateRender"(arg0: $EasyGuiGraphics$Type): void

(arg0: $EasyGuiGraphics$Type): void
}

export namespace $ILateRender {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILateRender$Type = ($ILateRender);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILateRender_ = $ILateRender$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$RotationHandler" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $RotationHandler {
static readonly "SPINNING": string
static readonly "FACING": string
static readonly "FACING_UP": string

constructor()

public static "debugRegisteredHandlers"(): void
public static "registerRotationHandler"(arg0: string, arg1: $RotationHandler$Type): void
public static "getRotationHandler"(arg0: string): $RotationHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RotationHandler$Type = ($RotationHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RotationHandler_ = $RotationHandler$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockTallWideRotatable" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$IWideBlock, $IWideBlock$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/blocks/$IWideBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TraderBlockTallRotatable, $TraderBlockTallRotatable$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/blocks/$TraderBlockTallRotatable"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $TraderBlockTallWideRotatable extends $TraderBlockTallRotatable implements $IWideBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getBlockEntity"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type): $BlockEntity
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "playerWillDestroy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): void
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getIsLeft"(arg0: $BlockState$Type): boolean
public "getIsRight"(arg0: $BlockState$Type): boolean
public "getOtherSide"(arg0: $BlockPos$Type, arg1: $BlockState$Type, arg2: $Direction$Type): $BlockPos
public static "getLeftPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getForwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRelativeSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getForwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getBackwardVect"(arg0: $Direction$Type): $Vector3f
public static "getRightPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
public static "getOffsetVect"(arg0: $Direction$Type): $Vector3f
public static "getActualSide"(arg0: $Direction$Type, arg1: $Direction$Type): $Direction
public static "getLeftVect"(arg0: $Direction$Type): $Vector3f
public static "getRightVect"(arg0: $Direction$Type): $Vector3f
public static "getBackwardPos"(arg0: $BlockPos$Type, arg1: $Direction$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderBlockTallWideRotatable$Type = ($TraderBlockTallWideRotatable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderBlockTallWideRotatable_ = $TraderBlockTallWideRotatable$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/walletbank/$InteractionTab" {
import {$IBankAccount, $IBankAccount$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/bank/$IBankAccount"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$BankAccountWidget$IBankAccountWidget, $BankAccountWidget$IBankAccountWidget$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/$BankAccountWidget$IBankAccountWidget"
import {$WalletBankScreen, $WalletBankScreen$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/$WalletBankScreen"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$EasyGuiGraphics, $EasyGuiGraphics$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/client/rendering/$EasyGuiGraphics"
import {$IMoneyViewer, $IMoneyViewer$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyViewer"
import {$WalletBankTab, $WalletBankTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/walletbank/$WalletBankTab"
import {$IconData, $IconData$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/widget/button/icon/$IconData"
import {$ScreenArea, $ScreenArea$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenArea"

export class $InteractionTab extends $WalletBankTab implements $BankAccountWidget$IBankAccountWidget {

constructor(arg0: $WalletBankScreen$Type)

public "initialize"(arg0: $ScreenArea$Type, arg1: boolean): void
public "tick"(): void
public "getIcon"(): $IconData
public "getScreen"(): $Screen
public "renderBG"(arg0: $EasyGuiGraphics$Type): void
public "getBankAccount"(): $IBankAccount
public "getCoinAccess"(): $IMoneyViewer
public "getFont"(): $Font
get "icon"(): $IconData
get "screen"(): $Screen
get "bankAccount"(): $IBankAccount
get "coinAccess"(): $IMoneyViewer
get "font"(): $Font
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InteractionTab$Type = ($InteractionTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InteractionTab_ = $InteractionTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/$LCConfig$Client" {
import {$ScreenPositionOption, $ScreenPositionOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/builtin/$ScreenPositionOption"
import {$WalletDisplayOverlay$DisplayType, $WalletDisplayOverlay$DisplayType$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/overlay/$WalletDisplayOverlay$DisplayType"
import {$ConfigFile$LoadPhase, $ConfigFile$LoadPhase$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ConfigFile$LoadPhase"
import {$ClientConfigFile, $ClientConfigFile$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/$ClientConfigFile"
import {$BooleanOption, $BooleanOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$BooleanOption"
import {$IntOption, $IntOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$IntOption"
import {$ScreenCorner, $ScreenCorner$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenCorner"
import {$StringOption, $StringOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$StringOption"
import {$EnumOption, $EnumOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$EnumOption"

export class $LCConfig$Client extends $ClientConfigFile {
readonly "itemRenderLimit": $IntOption
readonly "timeFormat": $StringOption
readonly "walletSlot": $ScreenPositionOption
readonly "walletSlotCreative": $ScreenPositionOption
readonly "walletButtonOffset": $ScreenPositionOption
readonly "walletOverlayEnabled": $BooleanOption
readonly "walletOverlayCorner": $EnumOption<($ScreenCorner)>
readonly "walletOverlayPosition": $ScreenPositionOption
readonly "walletOverlayType": $EnumOption<($WalletDisplayOverlay$DisplayType)>
readonly "notificationAndTeamButtonPosition": $ScreenPositionOption
readonly "notificationAndTeamButtonCreativePosition": $ScreenPositionOption
readonly "chestButtonVisible": $BooleanOption
readonly "chestButtonAllowSideChains": $BooleanOption
readonly "pushNotificationsToChat": $BooleanOption
readonly "slotMachineAnimationTime": $IntOption
readonly "slotMachineAnimationRestTime": $IntOption
readonly "moneyMendingClink": $BooleanOption
readonly "terminalColumnLimit": $IntOption
readonly "terminalRowLimit": $IntOption
readonly "loadPhase": $ConfigFile$LoadPhase


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LCConfig$Client$Type = ($LCConfig$Client);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LCConfig$Client_ = $LCConfig$Client$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/paygate/$PaygateTradeEditTab" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PaygateTradeData, $PaygateTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/paygate/tradedata/$PaygateTradeData"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MoneyValue, $MoneyValue$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/$MoneyValue"

export class $PaygateTradeEditTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "setTicketStubHandling"(arg0: boolean): void
public "getTradeIndex"(): integer
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "getTrade"(): $PaygateTradeData
public "setTradeIndex"(arg0: integer): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "setDuration"(arg0: integer): void
public "setPrice"(arg0: $MoneyValue$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onTabOpen"(): void
public "setTicket"(arg0: $ItemStack$Type): void
set "ticketStubHandling"(value: boolean)
get "tradeIndex"(): integer
get "trade"(): $PaygateTradeData
set "tradeIndex"(value: integer)
set "duration"(value: integer)
set "price"(value: $MoneyValue$Type)
set "ticket"(value: $ItemStack$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaygateTradeEditTab$Type = ($PaygateTradeEditTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaygateTradeEditTab_ = $PaygateTradeEditTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationSaveData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$NotificationData, $NotificationData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$NotificationData"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Notification, $Notification$Type} from "packages/io/github/lightman314/lightmanscurrency/api/notifications/$Notification"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"

export class $NotificationSaveData extends $SavedData {


public static "OnPlayerLogin"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "PushNotification"(arg0: $UUID$Type, arg1: $Notification$Type, arg2: boolean): void
public static "PushNotification"(arg0: $UUID$Type, arg1: $Notification$Type): void
public static "MarkNotificationsDirty"(arg0: $UUID$Type): void
public static "GetNotifications"(arg0: $UUID$Type): $NotificationData
public static "GetNotifications"(arg0: $Player$Type): $NotificationData
public "save"(arg0: $CompoundTag$Type): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotificationSaveData$Type = ($NotificationSaveData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotificationSaveData_ = $NotificationSaveData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMExchangeButtonData" {
import {$ScreenPosition, $ScreenPosition$Type} from "packages/io/github/lightman314/lightmanscurrency/client/util/$ScreenPosition"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ATMData$Builder, $ATMData$Builder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/data/$ATMData$Builder"
import {$ATMIconData, $ATMIconData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/coins/atm/icons/$ATMIconData"

export class $ATMExchangeButtonData {
readonly "position": $ScreenPosition
readonly "width": integer
readonly "command": string

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: string, arg4: $List$Type<($ATMIconData$Type)>)

public "save"(): $JsonObject
public static "parse"(arg0: $JsonObject$Type): $ATMExchangeButtonData
public static "generateMain"(arg0: $ATMData$Builder$Type): void
public static "generateChocolate"(arg0: $ATMData$Builder$Type): void
public "getIcons"(): $ImmutableList<($ATMIconData)>
get "icons"(): $ImmutableList<($ATMIconData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMExchangeButtonData$Type = ($ATMExchangeButtonData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMExchangeButtonData_ = $ATMExchangeButtonData$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/playertrading/$SPacketSyncPlayerTrade" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ClientPlayerTrade, $ClientPlayerTrade$Type} from "packages/io/github/lightman314/lightmanscurrency/common/playertrading/$ClientPlayerTrade"
import {$ServerToClientPacket, $ServerToClientPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ServerToClientPacket"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"

export class $SPacketSyncPlayerTrade extends $ServerToClientPacket {
static readonly "HANDLER": $CustomPacket$Handler<($SPacketSyncPlayerTrade)>

constructor(arg0: $ClientPlayerTrade$Type)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SPacketSyncPlayerTrade$Type = ($SPacketSyncPlayerTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SPacketSyncPlayerTrade_ = $SPacketSyncPlayerTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu$TraderMenuAllNetwork" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$TraderMenu, $TraderMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/$TraderMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$MenuValidator, $MenuValidator$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/validation/$MenuValidator"

export class $TraderMenu$TraderMenuAllNetwork extends $TraderMenu {
static readonly "SLOT_OFFSET": integer
readonly "player": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $MenuValidator$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderMenu$TraderMenuAllNetwork$Type = ($TraderMenu$TraderMenuAllNetwork);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderMenu$TraderMenuAllNetwork_ = $TraderMenu$TraderMenuAllNetwork$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/money/coins/data/$CoinInputType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CoinInputType extends $Enum<($CoinInputType)> {
static readonly "DEFAULT": $CoinInputType
static readonly "TEXT": $CoinInputType


public static "values"(): ($CoinInputType)[]
public static "valueOf"(arg0: string): $CoinInputType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoinInputType$Type = (("default") | ("text")) | ($CoinInputType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoinInputType_ = $CoinInputType$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/easy/$EasySlot" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EasySlot extends $Slot {
static readonly "EMPTY_SLOT_BG": $ResourceLocation
static readonly "BACKGROUND": $Pair<($ResourceLocation), ($ResourceLocation)>
 "active": boolean
 "locked": boolean
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $Container$Type, arg1: integer, arg2: integer, arg3: integer)

public static "Lock"(arg0: $AbstractContainerMenu$Type, arg1: $Function$Type<($EasySlot$Type), (boolean)>): void
public static "Lock"(arg0: $AbstractContainerMenu$Type): void
public static "SetActive"(arg0: $AbstractContainerMenu$Type, arg1: $Function$Type<($EasySlot$Type), (boolean)>): void
public static "SetActive"(arg0: $List$Type<(any)>, arg1: boolean): void
public static "SetActive"(arg0: $List$Type<(any)>): void
public static "SetActive"(arg0: $AbstractContainerMenu$Type): void
public "remove"(arg0: integer): $ItemStack
public "isActive"(): boolean
public "mayPlace"(arg0: $ItemStack$Type): boolean
public "mayPickup"(arg0: $Player$Type): boolean
public static "SetLocked"(arg0: $AbstractContainerMenu$Type, arg1: boolean): void
public static "SetLocked"(arg0: $AbstractContainerMenu$Type, arg1: boolean, arg2: $Function$Type<($EasySlot$Type), (boolean)>): void
public static "SetInactive"(arg0: $AbstractContainerMenu$Type, arg1: $Function$Type<($EasySlot$Type), (boolean)>): void
public static "SetInactive"(arg0: $AbstractContainerMenu$Type): void
public static "SetInactive"(arg0: $List$Type<(any)>): void
public static "Unlock"(arg0: $AbstractContainerMenu$Type): void
public static "Unlock"(arg0: $AbstractContainerMenu$Type, arg1: $Function$Type<($EasySlot$Type), (boolean)>): void
get "active"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasySlot$Type = ($EasySlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasySlot_ = $EasySlot$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/wallet/$CPacketChestQuickCollect" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketChestQuickCollect extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketChestQuickCollect)>


public "encode"(arg0: $FriendlyByteBuf$Type): void
public static "sendToServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketChestQuickCollect$Type = ($CPacketChestQuickCollect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketChestQuickCollect_ = $CPacketChestQuickCollect$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$ItemPositionData$PositionEntry" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$RotationHandler, $RotationHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/client/resourcepacks/data/item_trader/$RotationHandler"

export class $ItemPositionData$PositionEntry extends $Record {

constructor(position: $Vector3f$Type, extraCount: integer, extraOffset: $Vector3f$Type, scale: float, rotationHandler: $RotationHandler$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "scale"(): float
public "position"(): $Vector3f
public "extraOffset"(): $Vector3f
public "extraCount"(): integer
public "rotationHandler"(): $RotationHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemPositionData$PositionEntry$Type = ($ItemPositionData$PositionEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemPositionData$PositionEntry_ = $ItemPositionData$PositionEntry$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/menus/traderstorage/auction/$AuctionCreateTab" {
import {$SimpleContainer, $SimpleContainer$Type} from "packages/net/minecraft/world/$SimpleContainer"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ITraderStorageMenu, $ITraderStorageMenu$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$ITraderStorageMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TraderStorageTab, $TraderStorageTab$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/storage/$TraderStorageTab"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$LazyPacketData, $LazyPacketData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/network/$LazyPacketData"
import {$SimpleSlot, $SimpleSlot$Type} from "packages/io/github/lightman314/lightmanscurrency/common/menus/slots/$SimpleSlot"
import {$AuctionTradeData, $AuctionTradeData$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/auction/tradedata/$AuctionTradeData"

export class $AuctionCreateTab extends $TraderStorageTab {
static readonly "TAB_TRADE_BASIC": integer
static readonly "TAB_TRADE_STORAGE": integer
static readonly "TAB_TRADE_ADVANCED": integer
static readonly "TAB_TRADE_MISC": integer
static readonly "TAB_TRADER_LOGS": integer
static readonly "TAB_TRADER_SETTINGS": integer
static readonly "TAB_TRADER_STATS": integer
static readonly "TAB_TAX_INFO": integer
static readonly "TAB_RULES_TRADER": integer
static readonly "TAB_RULES_TRADE": integer
readonly "menu": $ITraderStorageMenu

constructor(arg0: $ITraderStorageMenu$Type)

public "canOpen"(arg0: $Player$Type): boolean
public "getAuctionItems"(): $SimpleContainer
public "addStorageMenuSlots"(arg0: $Function$Type<($Slot$Type), ($Slot$Type)>): void
public "getSlots"(): $List<($SimpleSlot)>
public "createAuction"(arg0: $AuctionTradeData$Type): void
public "receiveMessage"(arg0: $LazyPacketData$Type): void
public "createClientTab"(arg0: any): any
public "onTabClose"(): void
public "onMenuClose"(): void
public "onTabOpen"(): void
get "auctionItems"(): $SimpleContainer
get "slots"(): $List<($SimpleSlot)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AuctionCreateTab$Type = ($AuctionCreateTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AuctionCreateTab_ = $AuctionCreateTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/config/options/basic/$StringOption" {
import {$ConfigParser, $ConfigParser$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/parsing/$ConfigParser"
import {$NonNullSupplier, $NonNullSupplier$Type} from "packages/net/minecraftforge/common/util/$NonNullSupplier"
import {$ConfigOption, $ConfigOption$Type} from "packages/io/github/lightman314/lightmanscurrency/api/config/options/$ConfigOption"

export class $StringOption extends $ConfigOption<(string)> {
static readonly "PARSER": $ConfigParser<(string)>


public static "create"(arg0: $NonNullSupplier$Type<(string)>): $StringOption
public static "create"(arg0: string): $StringOption
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringOption$Type = ($StringOption);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringOption_ = $StringOption$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/atm/$ATMTab" {
import {$EasyTab, $EasyTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/easy/$EasyTab"

export class $ATMTab extends $EasyTab {


public "getColor"(): integer
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ATMTab$Type = ($ATMTab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ATMTab_ = $ATMTab$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/core/$ModRegistries" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$PoiType, $PoiType$Type} from "packages/net/minecraft/world/entity/ai/village/poi/$PoiType"
import {$ArgumentTypeInfo, $ArgumentTypeInfo$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$VillagerProfession, $VillagerProfession$Type} from "packages/net/minecraft/world/entity/npc/$VillagerProfession"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$LootPoolEntryType, $LootPoolEntryType$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolEntryType"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/net/minecraftforge/registries/$DeferredRegister"

export class $ModRegistries {
static readonly "ITEMS": $DeferredRegister<($Item)>
static readonly "BLOCKS": $DeferredRegister<($Block)>
static readonly "BLOCK_ENTITIES": $DeferredRegister<($BlockEntityType<(any)>)>
static readonly "ENCHANTMENTS": $DeferredRegister<($Enchantment)>
static readonly "MENUS": $DeferredRegister<($MenuType<(any)>)>
static readonly "RECIPE_TYPES": $DeferredRegister<($RecipeType<(any)>)>
static readonly "RECIPE_SERIALIZERS": $DeferredRegister<($RecipeSerializer<(any)>)>
static readonly "PROFESSIONS": $DeferredRegister<($VillagerProfession)>
static readonly "POI_TYPES": $DeferredRegister<($PoiType)>
static readonly "SOUND_EVENTS": $DeferredRegister<($SoundEvent)>
static readonly "GLOBAL_LOOT_MODIFIERS": $DeferredRegister<($Codec<(any)>)>
static readonly "COMMAND_ARGUMENT_TYPES": $DeferredRegister<($ArgumentTypeInfo<(any), (any)>)>
static readonly "CREATIVE_TABS": $DeferredRegister<($CreativeModeTab)>
static readonly "LOOT_POOL_ENTRY_TYPES": $DeferredRegister<($LootPoolEntryType)>

constructor()

public static "register"(arg0: $IEventBus$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModRegistries$Type = ($ModRegistries);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModRegistries_ = $ModRegistries$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/impl/$MoneyAPIImpl" {
import {$MoneyAPI, $MoneyAPI$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/$MoneyAPI"
import {$IMoneyHandler, $IMoneyHandler$Type} from "packages/io/github/lightman314/lightmanscurrency/api/capability/money/$IMoneyHandler"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMoneyHolder, $IMoneyHolder$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/value/holder/$IMoneyHolder"
import {$CurrencyType, $CurrencyType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/money/types/$CurrencyType"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $MoneyAPIImpl extends $MoneyAPI {
static readonly "INSTANCE": $MoneyAPI
static readonly "MODID": string
static readonly "API": $MoneyAPI


public "AllCurrencyTypes"(): $List<($CurrencyType)>
public "GetRegisteredCurrencyType"(arg0: $ResourceLocation$Type): $CurrencyType
public "GetATMMoneyHandler"(arg0: $Player$Type, arg1: $Container$Type): $IMoneyHandler
public "GetPlayersMoneyHandler"(arg0: $Player$Type): $IMoneyHolder
public "RegisterCurrencyType"(arg0: $CurrencyType$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoneyAPIImpl$Type = ($MoneyAPIImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoneyAPIImpl_ = $MoneyAPIImpl$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$TraderArgument$Info" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$TraderArgument$Info$Template, $TraderArgument$Info$Template$Type} from "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$TraderArgument$Info$Template"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ArgumentTypeInfo, $ArgumentTypeInfo$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo"
import {$TraderArgument, $TraderArgument$Type} from "packages/io/github/lightman314/lightmanscurrency/common/commands/arguments/$TraderArgument"

export class $TraderArgument$Info implements $ArgumentTypeInfo<($TraderArgument), ($TraderArgument$Info$Template)> {

constructor()

public "unpack"(arg0: $TraderArgument$Type): $TraderArgument$Info$Template
public "deserializeFromNetwork"(arg0: $FriendlyByteBuf$Type): $TraderArgument$Info$Template
public "serializeToJson"(arg0: $TraderArgument$Info$Template$Type, arg1: $JsonObject$Type): void
public "serializeToNetwork"(arg0: $TraderArgument$Info$Template$Type, arg1: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TraderArgument$Info$Type = ($TraderArgument$Info);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TraderArgument$Info_ = $TraderArgument$Info$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/network/message/trader/$CPacketAddOrRemoveTrade" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$CustomPacket$Handler, $CustomPacket$Handler$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$CustomPacket$Handler"
import {$ClientToServerPacket, $ClientToServerPacket$Type} from "packages/io/github/lightman314/lightmanscurrency/network/packet/$ClientToServerPacket"

export class $CPacketAddOrRemoveTrade extends $ClientToServerPacket {
static readonly "HANDLER": $CustomPacket$Handler<($CPacketAddOrRemoveTrade)>

constructor(arg0: long, arg1: boolean)

public "encode"(arg0: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CPacketAddOrRemoveTrade$Type = ($CPacketAddOrRemoveTrade);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CPacketAddOrRemoveTrade_ = $CPacketAddOrRemoveTrade$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/api/traders/menu/customer/$ITraderMenu" {
import {$TraderData, $TraderData$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TraderData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IClientTracker, $IClientTracker$Type} from "packages/io/github/lightman314/lightmanscurrency/common/util/$IClientTracker"
import {$TradeContext, $TradeContext$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$TradeContext"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ITraderSource, $ITraderSource$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/$ITraderSource"

export interface $ITraderMenu extends $IClientTracker {

 "getContext"(arg0: $TraderData$Type): $TradeContext
 "getTraderSource"(): $ITraderSource
 "getSlots"(): $List<($Slot)>
 "getPlayer"(): $Player
 "getHeldItem"(): $ItemStack
 "setHeldItem"(arg0: $ItemStack$Type): void
 "isClient"(): boolean
 "isServer"(): boolean
}

export namespace $ITraderMenu {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITraderMenu$Type = ($ITraderMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITraderMenu_ = $ITraderMenu$Type;
}}
declare module "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/types/$PlayerListing" {
import {$TradeRuleType, $TradeRuleType$Type} from "packages/io/github/lightman314/lightmanscurrency/api/traders/rules/$TradeRuleType"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PlayerReference, $PlayerReference$Type} from "packages/io/github/lightman314/lightmanscurrency/api/misc/player/$PlayerReference"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$TradeRule, $TradeRule$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$TradeRule"
import {$TradeEvent$PreTradeEvent, $TradeEvent$PreTradeEvent$Type} from "packages/io/github/lightman314/lightmanscurrency/api/events/$TradeEvent$PreTradeEvent"
import {$IRuleLoadListener, $IRuleLoadListener$Type} from "packages/io/github/lightman314/lightmanscurrency/common/traders/rules/$IRuleLoadListener"
import {$TradeRulesClientSubTab, $TradeRulesClientSubTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientSubTab"
import {$TradeRulesClientTab, $TradeRulesClientTab$Type} from "packages/io/github/lightman314/lightmanscurrency/client/gui/screen/inventory/traderstorage/trade_rules/$TradeRulesClientTab"

export class $PlayerListing extends $TradeRule {
static readonly "TYPE": $TradeRuleType<($PlayerListing)>
static readonly "LISTENER": $IRuleLoadListener
readonly "type": $TradeRuleType<(any)>


public "createTab"(arg0: $TradeRulesClientTab$Type<(any)>): $TradeRulesClientSubTab
public "isWhitelistMode"(): boolean
public "addToWhitelist"(arg0: $ServerPlayer$Type): boolean
public "isBlacklistMode"(): boolean
public "getPlayerList"(): $ImmutableList<($PlayerReference)>
public "loadPersistentData"(arg0: $CompoundTag$Type): void
public "savePersistentData"(): $CompoundTag
public "isInList"(arg0: $PlayerReference$Type): boolean
public "saveToJson"(arg0: $JsonObject$Type): $JsonObject
public "beforeTrade"(arg0: $TradeEvent$PreTradeEvent$Type): void
public "loadFromJson"(arg0: $JsonObject$Type): void
get "whitelistMode"(): boolean
get "blacklistMode"(): boolean
get "playerList"(): $ImmutableList<($PlayerReference)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerListing$Type = ($PlayerListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerListing_ = $PlayerListing$Type;
}}
